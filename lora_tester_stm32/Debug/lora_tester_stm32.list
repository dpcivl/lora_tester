
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018330  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003524  08018500  08018500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba24  0801ba24  0001d210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801ba24  0801ba24  0001ca24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba2c  0801ba2c  0001d210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba2c  0801ba2c  0001ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ba30  0801ba30  0001ca30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  0801ba34  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  0801bb04  0001d0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  0801bba4  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012f30  20000220  0801bc44  0001d220  2**5
                  ALLOC
 12 ._user_heap_stack 00000600  20013150  0801bc44  0001e150  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001d210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042840  00000000  00000000  0001d240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000910a  00000000  00000000  0005fa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000037c0  00000000  00000000  00068b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002b7b  00000000  00000000  0006c350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037eb2  00000000  00000000  0006eecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ba69  00000000  00000000  000a6d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e122  00000000  00000000  000f27e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00220908  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f644  00000000  00000000  0022094c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0022ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080184e8 	.word	0x080184e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	080184e8 	.word	0x080184e8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 fe72 	bl	8005314 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f017 f80a 	bl	8017658 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f016 ff1a 	bl	80174a8 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 fe42 	bl	8005314 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 ff59 	bl	8005548 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 fe34 	bl	8005314 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 fe2c 	bl	8005314 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 fe27 	bl	8005314 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	08018500 	.word	0x08018500
 80006d4:	0801851c 	.word	0x0801851c
 80006d8:	08018524 	.word	0x08018524
 80006dc:	0801853c 	.word	0x0801853c
 80006e0:	0801856c 	.word	0x0801856c
 80006e4:	080185a4 	.word	0x080185a4

080006e8 <get_state_name>:
};

const int LORA_DEFAULT_INIT_COMMANDS_COUNT = sizeof(LORA_DEFAULT_INIT_COMMANDS) / sizeof(LORA_DEFAULT_INIT_COMMANDS[0]);

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	08018610 	.word	0x08018610
 800076c:	08018618 	.word	0x08018618
 8000770:	08018624 	.word	0x08018624
 8000774:	0801862c 	.word	0x0801862c
 8000778:	08018638 	.word	0x08018638
 800077c:	08018648 	.word	0x08018648
 8000780:	08018658 	.word	0x08018658
 8000784:	0801866c 	.word	0x0801866c
 8000788:	08018680 	.word	0x08018680
 800078c:	0801868c 	.word	0x0801868c
 8000790:	08018694 	.word	0x08018694
 8000794:	0801869c 	.word	0x0801869c

08000798 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d032      	beq.n	800080e <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a18      	ldr	r2, [pc, #96]	@ (8000818 <LoraStarter_InitWithDefaults+0x80>)
 80007b8:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007ba:	2205      	movs	r2, #5
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <LoraStarter_InitWithDefaults+0x32>
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	e000      	b.n	80007cc <LoraStarter_InitWithDefaults+0x34>
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <LoraStarter_InitWithDefaults+0x84>)
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = 3;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2203      	movs	r2, #3
 80007d4:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = 300000;  // 5분 간격
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4a11      	ldr	r2, [pc, #68]	@ (8000820 <LoraStarter_InitWithDefaults+0x88>)
 80007da:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = 1000;  // 1초 초기 지연
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	68da      	ldr	r2, [r3, #12]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4907      	ldr	r1, [pc, #28]	@ (8000824 <LoraStarter_InitWithDefaults+0x8c>)
 8000806:	2001      	movs	r0, #1
 8000808:	f004 fd84 	bl	8005314 <LOGGER_SendFormatted>
 800080c:	e000      	b.n	8000810 <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800080e:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	080186c0 	.word	0x080186c0
 8000820:	000493e0 	.word	0x000493e0
 8000824:	080186c8 	.word	0x080186c8

08000828 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b0bf      	sub	sp, #252	@ 0xfc
 800082c:	af02      	add	r7, sp, #8
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	f000 8289 	beq.w	8000d4c <LoraStarter_Process+0x524>

    LoraState old_state = ctx->state;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b08      	cmp	r3, #8
 8000848:	f200 8261 	bhi.w	8000d0e <LoraStarter_Process+0x4e6>
 800084c:	a201      	add	r2, pc, #4	@ (adr r2, 8000854 <LoraStarter_Process+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	08000879 	.word	0x08000879
 8000858:	080008c7 	.word	0x080008c7
 800085c:	0800091d 	.word	0x0800091d
 8000860:	080009d7 	.word	0x080009d7
 8000864:	080009ed 	.word	0x080009ed
 8000868:	08000a3b 	.word	0x08000a3b
 800086c:	08000af9 	.word	0x08000af9
 8000870:	08000c35 	.word	0x08000c35
 8000874:	08000c9b 	.word	0x08000c9b
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800088e:	2b00      	cmp	r3, #0
 8000890:	d102      	bne.n	8000898 <LoraStarter_Process+0x70>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d102      	bne.n	80008a6 <LoraStarter_Process+0x7e>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4aaa      	ldr	r2, [pc, #680]	@ (8000b4c <LoraStarter_Process+0x324>)
 80008a4:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2200      	movs	r2, #0
 80008aa:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008bc:	49a4      	ldr	r1, [pc, #656]	@ (8000b50 <LoraStarter_Process+0x328>)
 80008be:	2001      	movs	r0, #1
 80008c0:	f004 fd28 	bl	8005314 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 80008c4:	e22a      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	da20      	bge.n	8000914 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	1c59      	adds	r1, r3, #1
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68d8      	ldr	r0, [r3, #12]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	689a      	ldr	r2, [r3, #8]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	4413      	add	r3, r2
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	9300      	str	r3, [sp, #0]
 80008ec:	4603      	mov	r3, r0
 80008ee:	460a      	mov	r2, r1
 80008f0:	4998      	ldr	r1, [pc, #608]	@ (8000b54 <LoraStarter_Process+0x32c>)
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 fd0e 	bl	8005314 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fe80 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2202      	movs	r2, #2
 8000910:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000912:	e203      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
            break;
 800091a:	e1ff      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 81f7 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                if (is_response_ok(uart_rx)) {
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f000 fa31 	bl	8000d8c <is_response_ok>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d010      	beq.n	8000952 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	3301      	adds	r3, #1
 8000936:	461a      	mov	r2, r3
 8000938:	4987      	ldr	r1, [pc, #540]	@ (8000b58 <LoraStarter_Process+0x330>)
 800093a:	2000      	movs	r0, #0
 800093c:	f004 fcea 	bl	8005314 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 8000950:	e1df      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 8000952:	4982      	ldr	r1, [pc, #520]	@ (8000b5c <LoraStarter_Process+0x334>)
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f016 fe9a 	bl	801768e <strstr>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d107      	bne.n	8000970 <LoraStarter_Process+0x148>
 8000960:	497f      	ldr	r1, [pc, #508]	@ (8000b60 <LoraStarter_Process+0x338>)
 8000962:	6838      	ldr	r0, [r7, #0]
 8000964:	f016 fe93 	bl	801768e <strstr>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	f000 81d1 	beq.w	8000d12 <LoraStarter_Process+0x4ea>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	497a      	ldr	r1, [pc, #488]	@ (8000b64 <LoraStarter_Process+0x33c>)
 800097a:	2002      	movs	r0, #2
 800097c:	f004 fcca 	bl	8005314 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a1b      	ldr	r3, [r3, #32]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	2b02      	cmp	r3, #2
 8000990:	dc0d      	bgt.n	80009ae <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6a1b      	ldr	r3, [r3, #32]
 800099c:	3301      	adds	r3, #1
 800099e:	4972      	ldr	r1, [pc, #456]	@ (8000b68 <LoraStarter_Process+0x340>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 fcb7 	bl	8005314 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
            break;
 80009ac:	e1b1      	b.n	8000d12 <LoraStarter_Process+0x4ea>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	3301      	adds	r3, #1
 80009b4:	461a      	mov	r2, r3
 80009b6:	496d      	ldr	r1, [pc, #436]	@ (8000b6c <LoraStarter_Process+0x344>)
 80009b8:	2002      	movs	r0, #2
 80009ba:	f004 fcab 	bl	8005314 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	1c5a      	adds	r2, r3, #1
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
            break;
 80009d4:	e19d      	b.n	8000d12 <LoraStarter_Process+0x4ea>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 80009d6:	4966      	ldr	r1, [pc, #408]	@ (8000b70 <LoraStarter_Process+0x348>)
 80009d8:	2002      	movs	r0, #2
 80009da:	f004 fc9b 	bl	8005314 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 80009de:	4865      	ldr	r0, [pc, #404]	@ (8000b74 <LoraStarter_Process+0x34c>)
 80009e0:	f7ff fe14 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	2204      	movs	r2, #4
 80009e8:	701a      	strb	r2, [r3, #0]
            break;
 80009ea:	e197      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f000 8191 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f000 fa31 	bl	8000e5c <is_join_response_ok>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	f000 818a 	beq.w	8000d16 <LoraStarter_Process+0x4ee>
                LORA_LOG_JOIN_SUCCESS();
 8000a02:	495d      	ldr	r1, [pc, #372]	@ (8000b78 <LoraStarter_Process+0x350>)
 8000a04:	2002      	movs	r0, #2
 8000a06:	f004 fc85 	bl	8005314 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2205      	movs	r2, #5
 8000a0e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_WARN("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4952      	ldr	r1, [pc, #328]	@ (8000b7c <LoraStarter_Process+0x354>)
 8000a32:	2002      	movs	r0, #2
 8000a34:	f004 fc6e 	bl	8005314 <LOGGER_SendFormatted>
            }
            break;
 8000a38:	e16d      	b.n	8000d16 <LoraStarter_Process+0x4ee>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d002      	beq.n	8000a48 <LoraStarter_Process+0x220>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	e000      	b.n	8000a4a <LoraStarter_Process+0x222>
 8000a48:	4b40      	ldr	r3, [pc, #256]	@ (8000b4c <LoraStarter_Process+0x324>)
 8000a4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 8000a4e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8000a52:	f7ff fbe7 	bl	8000224 <strlen>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a62:	e014      	b.n	8000a8e <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 8000a64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	f107 020c 	add.w	r2, r7, #12
 8000a6e:	18d0      	adds	r0, r2, r3
 8000a70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4940      	ldr	r1, [pc, #256]	@ (8000b80 <LoraStarter_Process+0x358>)
 8000a80:	f016 fd48 	bl	8017514 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000a84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8000a8e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	da03      	bge.n	8000aa2 <LoraStarter_Process+0x27a>
 8000a9a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a9e:	2b1e      	cmp	r3, #30
 8000aa0:	dde0      	ble.n	8000a64 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000aa2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	33f0      	adds	r3, #240	@ 0xf0
 8000aaa:	443b      	add	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000ab2:	f107 030c 	add.w	r3, r7, #12
 8000ab6:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <LoraStarter_Process+0x35c>)
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	f016 fcf3 	bl	80174a8 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000ac2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000ac6:	4930      	ldr	r1, [pc, #192]	@ (8000b88 <LoraStarter_Process+0x360>)
 8000ac8:	2002      	movs	r0, #2
 8000aca:	f004 fc23 	bl	8005314 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000ace:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd9a 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2206      	movs	r2, #6
 8000adc:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4927      	ldr	r1, [pc, #156]	@ (8000b8c <LoraStarter_Process+0x364>)
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 fc0f 	bl	8005314 <LOGGER_SendFormatted>
            }
            break;
 8000af6:	e111      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	f000 810d 	beq.w	8000d1a <LoraStarter_Process+0x4f2>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f000 fa2f 	bl	8000f64 <ResponseHandler_ParseSendResponse>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000b0c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d03f      	beq.n	8000b94 <LoraStarter_Process+0x36c>
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	f300 8086 	bgt.w	8000c26 <LoraStarter_Process+0x3fe>
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d002      	beq.n	8000b24 <LoraStarter_Process+0x2fc>
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d04c      	beq.n	8000bbc <LoraStarter_Process+0x394>
 8000b22:	e080      	b.n	8000c26 <LoraStarter_Process+0x3fe>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000b24:	491a      	ldr	r1, [pc, #104]	@ (8000b90 <LoraStarter_Process+0x368>)
 8000b26:	2002      	movs	r0, #2
 8000b28:	f004 fbf4 	bl	8005314 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b40:	f004 fb7a 	bl	8005238 <TIME_GetCurrentMs>
 8000b44:	4602      	mov	r2, r0
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
                        break;
 8000b4a:	e072      	b.n	8000c32 <LoraStarter_Process+0x40a>
 8000b4c:	08018708 	.word	0x08018708
 8000b50:	08018710 	.word	0x08018710
 8000b54:	08018748 	.word	0x08018748
 8000b58:	0801876c 	.word	0x0801876c
 8000b5c:	08018694 	.word	0x08018694
 8000b60:	0801878c 	.word	0x0801878c
 8000b64:	080187a4 	.word	0x080187a4
 8000b68:	080187c4 	.word	0x080187c4
 8000b6c:	080187f0 	.word	0x080187f0
 8000b70:	0801882c 	.word	0x0801882c
 8000b74:	08018850 	.word	0x08018850
 8000b78:	0801885c 	.word	0x0801885c
 8000b7c:	08018878 	.word	0x08018878
 8000b80:	080188ac 	.word	0x080188ac
 8000b84:	080188b4 	.word	0x080188b4
 8000b88:	080188c4 	.word	0x080188c4
 8000b8c:	080188e4 	.word	0x080188e4
 8000b90:	080188fc 	.word	0x080188fc
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b94:	496f      	ldr	r1, [pc, #444]	@ (8000d54 <LoraStarter_Process+0x52c>)
 8000b96:	2002      	movs	r0, #2
 8000b98:	f004 fbbc 	bl	8005314 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2207      	movs	r2, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000bae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000bb0:	f004 fb42 	bl	8005238 <TIME_GetCurrentMs>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
                        break;
 8000bba:	e03a      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000bbc:	4a66      	ldr	r2, [pc, #408]	@ (8000d58 <LoraStarter_Process+0x530>)
 8000bbe:	4967      	ldr	r1, [pc, #412]	@ (8000d5c <LoraStarter_Process+0x534>)
 8000bc0:	2002      	movs	r0, #2
 8000bc2:	f004 fba7 	bl	8005314 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a1b      	ldr	r3, [r3, #32]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4962      	ldr	r1, [pc, #392]	@ (8000d60 <LoraStarter_Process+0x538>)
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f004 fb9b 	bl	8005314 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <LoraStarter_Process+0x3ca>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a1a      	ldr	r2, [r3, #32]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	da11      	bge.n	8000c16 <LoraStarter_Process+0x3ee>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6a1a      	ldr	r2, [r3, #32]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <LoraStarter_Process+0x3dc>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c02:	e000      	b.n	8000c06 <LoraStarter_Process+0x3de>
 8000c04:	4b57      	ldr	r3, [pc, #348]	@ (8000d64 <LoraStarter_Process+0x53c>)
 8000c06:	4958      	ldr	r1, [pc, #352]	@ (8000d68 <LoraStarter_Process+0x540>)
 8000c08:	2002      	movs	r0, #2
 8000c0a:	f004 fb83 	bl	8005314 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2208      	movs	r2, #8
 8000c12:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000c14:	e00d      	b.n	8000c32 <LoraStarter_Process+0x40a>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000c16:	4955      	ldr	r1, [pc, #340]	@ (8000d6c <LoraStarter_Process+0x544>)
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f004 fb7b 	bl	8005314 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	220a      	movs	r2, #10
 8000c22:	701a      	strb	r2, [r3, #0]
                        break;
 8000c24:	e005      	b.n	8000c32 <LoraStarter_Process+0x40a>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000c26:	683a      	ldr	r2, [r7, #0]
 8000c28:	4951      	ldr	r1, [pc, #324]	@ (8000d70 <LoraStarter_Process+0x548>)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f004 fb72 	bl	8005314 <LOGGER_SendFormatted>
                        break;
 8000c30:	bf00      	nop
                }
            }
            break;
 8000c32:	e072      	b.n	8000d1a <LoraStarter_Process+0x4f2>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c34:	f004 fb00 	bl	8005238 <TIME_GetCurrentMs>
 8000c38:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <LoraStarter_Process+0x422>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	e001      	b.n	8000c4e <LoraStarter_Process+0x426>
 8000c4a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000c5a:	1ad3      	subs	r3, r2, r3
 8000c5c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d809      	bhi.n	8000c78 <LoraStarter_Process+0x450>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000c64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c68:	4942      	ldr	r1, [pc, #264]	@ (8000d74 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f004 fb52 	bl	8005314 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2205      	movs	r2, #5
 8000c74:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000c76:	e051      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000c86:	4413      	add	r3, r2
 8000c88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000c8c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000c90:	4939      	ldr	r1, [pc, #228]	@ (8000d78 <LoraStarter_Process+0x550>)
 8000c92:	2000      	movs	r0, #0
 8000c94:	f004 fb3e 	bl	8005314 <LOGGER_SendFormatted>
            break;
 8000c98:	e040      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000c9a:	f004 facd 	bl	8005238 <TIME_GetCurrentMs>
 8000c9e:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10b      	bne.n	8000cc2 <LoraStarter_Process+0x49a>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000caa:	4934      	ldr	r1, [pc, #208]	@ (8000d7c <LoraStarter_Process+0x554>)
 8000cac:	2000      	movs	r0, #0
 8000cae:	f004 fb31 	bl	8005314 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cb8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000cc0:	e02c      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000cca:	1ad2      	subs	r2, r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d30e      	bcc.n	8000cf2 <LoraStarter_Process+0x4ca>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4929      	ldr	r1, [pc, #164]	@ (8000d80 <LoraStarter_Process+0x558>)
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f004 fb19 	bl	8005314 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2203      	movs	r2, #3
 8000cee:	701a      	strb	r2, [r3, #0]
            break;
 8000cf0:	e014      	b.n	8000d1c <LoraStarter_Process+0x4f4>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000cfe:	1acb      	subs	r3, r1, r3
 8000d00:	4413      	add	r3, r2
 8000d02:	461a      	mov	r2, r3
 8000d04:	491f      	ldr	r1, [pc, #124]	@ (8000d84 <LoraStarter_Process+0x55c>)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f004 fb04 	bl	8005314 <LOGGER_SendFormatted>
            break;
 8000d0c:	e006      	b.n	8000d1c <LoraStarter_Process+0x4f4>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000d0e:	bf00      	nop
 8000d10:	e004      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d12:	bf00      	nop
 8000d14:	e002      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <LoraStarter_Process+0x4f4>
            break;
 8000d1a:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d012      	beq.n	8000d4e <LoraStarter_Process+0x526>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000d28:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fcdb 	bl	80006e8 <get_state_name>
 8000d32:	4604      	mov	r4, r0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcd5 	bl	80006e8 <get_state_name>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4622      	mov	r2, r4
 8000d42:	4911      	ldr	r1, [pc, #68]	@ (8000d88 <LoraStarter_Process+0x560>)
 8000d44:	2000      	movs	r0, #0
 8000d46:	f004 fae5 	bl	8005314 <LOGGER_SendFormatted>
 8000d4a:	e000      	b.n	8000d4e <LoraStarter_Process+0x526>
    if (ctx == NULL) return;
 8000d4c:	bf00      	nop
    }
}
 8000d4e:	37f4      	adds	r7, #244	@ 0xf4
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	08018918 	.word	0x08018918
 8000d58:	0801892c 	.word	0x0801892c
 8000d5c:	0801893c 	.word	0x0801893c
 8000d60:	08018954 	.word	0x08018954
 8000d64:	0801896c 	.word	0x0801896c
 8000d68:	08018970 	.word	0x08018970
 8000d6c:	0801898c 	.word	0x0801898c
 8000d70:	080189b0 	.word	0x080189b0
 8000d74:	080189cc 	.word	0x080189cc
 8000d78:	08018a08 	.word	0x08018a08
 8000d7c:	08018a3c 	.word	0x08018a3c
 8000d80:	08018a54 	.word	0x08018a54
 8000d84:	08018a7c 	.word	0x08018a7c
 8000d88:	08018ab0 	.word	0x08018ab0

08000d8c <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000d9a:	4925      	ldr	r1, [pc, #148]	@ (8000e30 <is_response_ok+0xa4>)
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f004 fab9 	bl	8005314 <LOGGER_SendFormatted>
        return false;
 8000da2:	2300      	movs	r3, #0
 8000da4:	e03f      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4922      	ldr	r1, [pc, #136]	@ (8000e34 <is_response_ok+0xa8>)
 8000daa:	2000      	movs	r0, #0
 8000dac:	f004 fab2 	bl	8005314 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000db0:	4921      	ldr	r1, [pc, #132]	@ (8000e38 <is_response_ok+0xac>)
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fa2c 	bl	8000210 <strcmp>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d105      	bne.n	8000dca <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000dbe:	491f      	ldr	r1, [pc, #124]	@ (8000e3c <is_response_ok+0xb0>)
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f004 faa7 	bl	8005314 <LOGGER_SendFormatted>
        return true;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e02d      	b.n	8000e26 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000dca:	491d      	ldr	r1, [pc, #116]	@ (8000e40 <is_response_ok+0xb4>)
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff fa1f 	bl	8000210 <strcmp>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d105      	bne.n	8000de4 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000dd8:	491a      	ldr	r1, [pc, #104]	@ (8000e44 <is_response_ok+0xb8>)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f004 fa9a 	bl	8005314 <LOGGER_SendFormatted>
        return true;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e020      	b.n	8000e26 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000de4:	4918      	ldr	r1, [pc, #96]	@ (8000e48 <is_response_ok+0xbc>)
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fa12 	bl	8000210 <strcmp>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d105      	bne.n	8000dfe <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000df2:	4916      	ldr	r1, [pc, #88]	@ (8000e4c <is_response_ok+0xc0>)
 8000df4:	2000      	movs	r0, #0
 8000df6:	f004 fa8d 	bl	8005314 <LOGGER_SendFormatted>
        return true;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e013      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000dfe:	4914      	ldr	r1, [pc, #80]	@ (8000e50 <is_response_ok+0xc4>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f016 fc44 	bl	801768e <strstr>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4911      	ldr	r1, [pc, #68]	@ (8000e54 <is_response_ok+0xc8>)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f004 fa7f 	bl	8005314 <LOGGER_SendFormatted>
        return true;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e005      	b.n	8000e26 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <is_response_ok+0xcc>)
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f004 fa78 	bl	8005314 <LOGGER_SendFormatted>
    return false;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	08018ad0 	.word	0x08018ad0
 8000e34:	08018b00 	.word	0x08018b00
 8000e38:	08018b30 	.word	0x08018b30
 8000e3c:	08018b34 	.word	0x08018b34
 8000e40:	08018b5c 	.word	0x08018b5c
 8000e44:	08018b64 	.word	0x08018b64
 8000e48:	08018b98 	.word	0x08018b98
 8000e4c:	08018b9c 	.word	0x08018b9c
 8000e50:	08018bd0 	.word	0x08018bd0
 8000e54:	08018bd8 	.word	0x08018bd8
 8000e58:	08018c0c 	.word	0x08018c0c

08000e5c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e68:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e6c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000e6e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e72:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d105      	bne.n	8000e88 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000e7c:	4934      	ldr	r1, [pc, #208]	@ (8000f50 <is_join_response_ok+0xf4>)
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f004 fa48 	bl	8005314 <LOGGER_SendFormatted>
        return false;
 8000e84:	2300      	movs	r3, #0
 8000e86:	e05e      	b.n	8000f46 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000e88:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e8c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4930      	ldr	r1, [pc, #192]	@ (8000f54 <is_join_response_ok+0xf8>)
 8000e94:	2000      	movs	r0, #0
 8000e96:	f004 fa3d 	bl	8005314 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000e9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e9e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ea2:	f107 0008 	add.w	r0, r7, #8
 8000ea6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000eaa:	6819      	ldr	r1, [r3, #0]
 8000eac:	f016 fbdc 	bl	8017668 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000eb0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000eb4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ec6:	e013      	b.n	8000ef0 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000ec8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b0d      	cmp	r3, #13
 8000ed0:	d004      	beq.n	8000edc <is_join_response_ok+0x80>
 8000ed2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b0a      	cmp	r3, #10
 8000eda:	d104      	bne.n	8000ee6 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000edc:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
            break;
 8000ee4:	e009      	b.n	8000efa <is_join_response_ok+0x9e>
        }
        pos++;
 8000ee6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000eea:	3301      	adds	r3, #1
 8000eec:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ef0:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1e6      	bne.n	8000ec8 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	4916      	ldr	r1, [pc, #88]	@ (8000f58 <is_join_response_ok+0xfc>)
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff f985 	bl	8000210 <strcmp>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	bf0c      	ite	eq
 8000f0c:	2301      	moveq	r3, #1
 8000f0e:	2300      	movne	r3, #0
 8000f10:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000f14:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d009      	beq.n	8000f30 <is_join_response_ok+0xd4>
        LOG_WARN("[ResponseHandler] ✅ JOIN SUCCESS: %s", response);
 8000f1c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f20:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	490d      	ldr	r1, [pc, #52]	@ (8000f5c <is_join_response_ok+0x100>)
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f004 f9f3 	bl	8005314 <LOGGER_SendFormatted>
 8000f2e:	e008      	b.n	8000f42 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000f30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f34:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4909      	ldr	r1, [pc, #36]	@ (8000f60 <is_join_response_ok+0x104>)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f004 f9e9 	bl	8005314 <LOGGER_SendFormatted>
    }
    
    return result;
 8000f42:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08018c38 	.word	0x08018c38
 8000f54:	08018c70 	.word	0x08018c70
 8000f58:	08018ca0 	.word	0x08018ca0
 8000f5c:	08018cac 	.word	0x08018cac
 8000f60:	08018cd4 	.word	0x08018cd4

08000f64 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8000f72:	491e      	ldr	r1, [pc, #120]	@ (8000fec <ResponseHandler_ParseSendResponse+0x88>)
 8000f74:	2000      	movs	r0, #0
 8000f76:	f004 f9cd 	bl	8005314 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e031      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	491b      	ldr	r1, [pc, #108]	@ (8000ff0 <ResponseHandler_ParseSendResponse+0x8c>)
 8000f82:	2000      	movs	r0, #0
 8000f84:	f004 f9c6 	bl	8005314 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8000f88:	491a      	ldr	r1, [pc, #104]	@ (8000ff4 <ResponseHandler_ParseSendResponse+0x90>)
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f016 fb7f 	bl	801768e <strstr>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d005      	beq.n	8000fa2 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("[ResponseHandler] ✅ SEND SUCCESS: CONFIRMED_OK");
 8000f96:	4918      	ldr	r1, [pc, #96]	@ (8000ff8 <ResponseHandler_ParseSendResponse+0x94>)
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f004 f9bb 	bl	8005314 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e01f      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8000fa2:	4916      	ldr	r1, [pc, #88]	@ (8000ffc <ResponseHandler_ParseSendResponse+0x98>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f016 fb72 	bl	801768e <strstr>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d005      	beq.n	8000fbc <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8000fb0:	4913      	ldr	r1, [pc, #76]	@ (8001000 <ResponseHandler_ParseSendResponse+0x9c>)
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f004 f9ae 	bl	8005314 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e012      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8000fbc:	4911      	ldr	r1, [pc, #68]	@ (8001004 <ResponseHandler_ParseSendResponse+0xa0>)
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff f926 	bl	8000210 <strcmp>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d105      	bne.n	8000fd6 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8000fca:	490f      	ldr	r1, [pc, #60]	@ (8001008 <ResponseHandler_ParseSendResponse+0xa4>)
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f004 f9a1 	bl	8005314 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e005      	b.n	8000fe2 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	490c      	ldr	r1, [pc, #48]	@ (800100c <ResponseHandler_ParseSendResponse+0xa8>)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f004 f99a 	bl	8005314 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8000fe0:	2303      	movs	r3, #3
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	08018d00 	.word	0x08018d00
 8000ff0:	08018d34 	.word	0x08018d34
 8000ff4:	08018d64 	.word	0x08018d64
 8000ff8:	08018d7c 	.word	0x08018d7c
 8000ffc:	08018db0 	.word	0x08018db0
 8001000:	08018dcc 	.word	0x08018dcc
 8001004:	08018e00 	.word	0x08018e00
 8001008:	08018e08 	.word	0x08018e08
 800100c:	08018e34 	.word	0x08018e34

08001010 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001016:	4b1b      	ldr	r3, [pc, #108]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800101e:	f3bf 8f4f 	dsb	sy
}
 8001022:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001024:	4b17      	ldr	r3, [pc, #92]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800102a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	0b5b      	lsrs	r3, r3, #13
 8001030:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001034:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	08db      	lsrs	r3, r3, #3
 800103a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800103e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	015a      	lsls	r2, r3, #5
 8001044:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001048:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800104e:	490d      	ldr	r1, [pc, #52]	@ (8001084 <SCB_CleanInvalidateDCache+0x74>)
 8001050:	4313      	orrs	r3, r2
 8001052:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	60ba      	str	r2, [r7, #8]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1ef      	bne.n	8001040 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	60fa      	str	r2, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1e5      	bne.n	8001036 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800106a:	f3bf 8f4f 	dsb	sy
}
 800106e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001070:	f3bf 8f6f 	isb	sy
}
 8001074:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <_ensure_file_closed>:
static FILE* g_log_file = NULL;
#endif

// 파일 닫기 보장 함수들
#ifdef STM32F746xx
static void _ensure_file_closed(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    if (g_current_file_handle != NULL) {
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <_ensure_file_closed+0x38>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d012      	beq.n	80010ba <_ensure_file_closed+0x32>
        LOG_DEBUG("[SDStorage] Force closing previously opened file: %s", g_current_open_file);
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <_ensure_file_closed+0x3c>)
 8001096:	490c      	ldr	r1, [pc, #48]	@ (80010c8 <_ensure_file_closed+0x40>)
 8001098:	2000      	movs	r0, #0
 800109a:	f004 f93b 	bl	8005314 <LOGGER_SendFormatted>
        f_close(g_current_file_handle);
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <_ensure_file_closed+0x38>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f012 fe92 	bl	8013dcc <f_close>
        g_current_file_handle = NULL;
 80010a8:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <_ensure_file_closed+0x38>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
        memset(g_current_open_file, 0, sizeof(g_current_open_file));
 80010ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b2:	2100      	movs	r1, #0
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <_ensure_file_closed+0x3c>)
 80010b6:	f016 facf 	bl	8017658 <memset>
    }
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000348 	.word	0x20000348
 80010c4:	2000034c 	.word	0x2000034c
 80010c8:	08018e64 	.word	0x08018e64

080010cc <_register_file_opened>:

static void _register_file_opened(FIL* file_handle, const char* filename) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
    g_current_file_handle = file_handle;
 80010d6:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <_register_file_opened+0x2c>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6013      	str	r3, [r2, #0]
    strncpy(g_current_open_file, filename, sizeof(g_current_open_file) - 1);
 80010dc:	22ff      	movs	r2, #255	@ 0xff
 80010de:	6839      	ldr	r1, [r7, #0]
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <_register_file_opened+0x30>)
 80010e2:	f016 fac1 	bl	8017668 <strncpy>
    g_current_open_file[sizeof(g_current_open_file) - 1] = '\0';
 80010e6:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <_register_file_opened+0x30>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000348 	.word	0x20000348
 80010fc:	2000034c 	.word	0x2000034c

08001100 <_register_file_closed>:

static void _register_file_closed(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
    g_current_file_handle = NULL;
 8001104:	4b05      	ldr	r3, [pc, #20]	@ (800111c <_register_file_closed+0x1c>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
    memset(g_current_open_file, 0, sizeof(g_current_open_file));
 800110a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800110e:	2100      	movs	r1, #0
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <_register_file_closed+0x20>)
 8001112:	f016 faa1 	bl	8017658 <memset>
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000348 	.word	0x20000348
 8001120:	2000034c 	.word	0x2000034c

08001124 <SDStorage_Init>:
static int _create_log_directory(void);
static int _generate_log_filename(char* filename, size_t max_len);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // STM32 환경: FatFs 초기화 및 진단
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 800112a:	49b0      	ldr	r1, [pc, #704]	@ (80013ec <SDStorage_Init+0x2c8>)
 800112c:	2001      	movs	r0, #1
 800112e:	f004 f8f1 	bl	8005314 <LOGGER_SendFormatted>
    
    // 초기화 시 파일 닫기 보장
    _ensure_file_closed();
 8001132:	f7ff ffa9 	bl	8001088 <_ensure_file_closed>
    
    // 1. 하드웨어 상태 진단 및 TRANSFER 상태까지 대기
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001136:	48ae      	ldr	r0, [pc, #696]	@ (80013f0 <SDStorage_Init+0x2cc>)
 8001138:	f00c f858 	bl	800d1ec <HAL_SD_GetCardState>
 800113c:	6178      	str	r0, [r7, #20]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	49ac      	ldr	r1, [pc, #688]	@ (80013f4 <SDStorage_Init+0x2d0>)
 8001142:	2001      	movs	r0, #1
 8001144:	f004 f8e6 	bl	8005314 <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기 (성공 프로젝트 패턴)
    int wait_count = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 800114c:	e010      	b.n	8001170 <SDStorage_Init+0x4c>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	3301      	adds	r3, #1
 8001152:	461a      	mov	r2, r3
 8001154:	49a8      	ldr	r1, [pc, #672]	@ (80013f8 <SDStorage_Init+0x2d4>)
 8001156:	2001      	movs	r0, #1
 8001158:	f004 f8dc 	bl	8005314 <LOGGER_SendFormatted>
        HAL_Delay(100);
 800115c:	2064      	movs	r0, #100	@ 0x64
 800115e:	f004 feaf 	bl	8005ec0 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 8001162:	48a3      	ldr	r0, [pc, #652]	@ (80013f0 <SDStorage_Init+0x2cc>)
 8001164:	f00c f842 	bl	800d1ec <HAL_SD_GetCardState>
 8001168:	6178      	str	r0, [r7, #20]
        wait_count++;
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	3301      	adds	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < 50) {  // 최대 5초 대기
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	2b04      	cmp	r3, #4
 8001174:	d002      	beq.n	800117c <SDStorage_Init+0x58>
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	2b31      	cmp	r3, #49	@ 0x31
 800117a:	dde8      	ble.n	800114e <SDStorage_Init+0x2a>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	2b04      	cmp	r3, #4
 8001180:	d128      	bne.n	80011d4 <SDStorage_Init+0xb0>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 8001182:	499e      	ldr	r1, [pc, #632]	@ (80013fc <SDStorage_Init+0x2d8>)
 8001184:	2001      	movs	r0, #1
 8001186:	f004 f8c5 	bl	8005314 <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크 (성공 프로젝트 패턴)
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 800118a:	4b99      	ldr	r3, [pc, #612]	@ (80013f0 <SDStorage_Init+0x2cc>)
 800118c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118e:	2b00      	cmp	r3, #0
 8001190:	d02f      	beq.n	80011f2 <SDStorage_Init+0xce>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 8001192:	4b97      	ldr	r3, [pc, #604]	@ (80013f0 <SDStorage_Init+0x2cc>)
 8001194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001196:	461a      	mov	r2, r3
 8001198:	4999      	ldr	r1, [pc, #612]	@ (8001400 <SDStorage_Init+0x2dc>)
 800119a:	2002      	movs	r0, #2
 800119c:	f004 f8ba 	bl	8005314 <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 80011a0:	4b93      	ldr	r3, [pc, #588]	@ (80013f0 <SDStorage_Init+0x2cc>)
 80011a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <SDStorage_Init+0x90>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 80011ac:	4995      	ldr	r1, [pc, #596]	@ (8001404 <SDStorage_Init+0x2e0>)
 80011ae:	2002      	movs	r0, #2
 80011b0:	f004 f8b0 	bl	8005314 <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 80011b4:	4b8e      	ldr	r3, [pc, #568]	@ (80013f0 <SDStorage_Init+0x2cc>)
 80011b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <SDStorage_Init+0xa8>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 80011c0:	4991      	ldr	r1, [pc, #580]	@ (8001408 <SDStorage_Init+0x2e4>)
 80011c2:	2002      	movs	r0, #2
 80011c4:	f004 f8a6 	bl	8005314 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80011c8:	f7ff ff22 	bl	8001010 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 80011cc:	4b88      	ldr	r3, [pc, #544]	@ (80013f0 <SDStorage_Init+0x2cc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80011d2:	e00e      	b.n	80011f2 <SDStorage_Init+0xce>
        }
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	498d      	ldr	r1, [pc, #564]	@ (800140c <SDStorage_Init+0x2e8>)
 80011d8:	2003      	movs	r0, #3
 80011da:	f004 f89b 	bl	8005314 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 80011de:	4b84      	ldr	r3, [pc, #528]	@ (80013f0 <SDStorage_Init+0x2cc>)
 80011e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011e2:	461a      	mov	r2, r3
 80011e4:	498a      	ldr	r1, [pc, #552]	@ (8001410 <SDStorage_Init+0x2ec>)
 80011e6:	2003      	movs	r0, #3
 80011e8:	f004 f894 	bl	8005314 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	e199      	b.n	8001526 <SDStorage_Init+0x402>
    }
    
    DSTATUS disk_status = disk_initialize(0);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f010 fe78 	bl	8011ee8 <disk_initialize>
 80011f8:	4603      	mov	r3, r0
 80011fa:	71fb      	strb	r3, [r7, #7]
    LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	461a      	mov	r2, r3
 8001200:	4984      	ldr	r1, [pc, #528]	@ (8001414 <SDStorage_Init+0x2f0>)
 8001202:	2001      	movs	r0, #1
 8001204:	f004 f886 	bl	8005314 <LOGGER_SendFormatted>
    
    // disk_initialize 실패 시 조기 종료 (블로킹 방지)
    if (disk_status != 0) {
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00a      	beq.n	8001224 <SDStorage_Init+0x100>
        LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 800120e:	4982      	ldr	r1, [pc, #520]	@ (8001418 <SDStorage_Init+0x2f4>)
 8001210:	2003      	movs	r0, #3
 8001212:	f004 f87f 	bl	8005314 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001216:	4981      	ldr	r1, [pc, #516]	@ (800141c <SDStorage_Init+0x2f8>)
 8001218:	2003      	movs	r0, #3
 800121a:	f004 f87b 	bl	8005314 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e180      	b.n	8001526 <SDStorage_Init+0x402>
    }
    
    // 2. 파일시스템 마운트 시도 (지연 마운트로 변경 - 블로킹 방지)
    LOG_INFO("[SDStorage] Using deferred mount (flag=0) to avoid blocking...");
 8001224:	497e      	ldr	r1, [pc, #504]	@ (8001420 <SDStorage_Init+0x2fc>)
 8001226:	2001      	movs	r0, #1
 8001228:	f004 f874 	bl	8005314 <LOGGER_SendFormatted>
    
    // f_mount 호출 전에 충분한 지연 (SD 카드 안정화)
    #ifdef STM32F746xx
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (500ms)...");
 800122c:	497d      	ldr	r1, [pc, #500]	@ (8001424 <SDStorage_Init+0x300>)
 800122e:	2001      	movs	r0, #1
 8001230:	f004 f870 	bl	8005314 <LOGGER_SendFormatted>
    HAL_Delay(500);
 8001234:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001238:	f004 fe42 	bl	8005ec0 <HAL_Delay>
    #endif
    
    // f_mount 블로킹 문제 - 완전 우회 시도
    LOG_WARN("[SDStorage] f_mount consistently blocks despite all fixes");
 800123c:	497a      	ldr	r1, [pc, #488]	@ (8001428 <SDStorage_Init+0x304>)
 800123e:	2002      	movs	r0, #2
 8001240:	f004 f868 	bl	8005314 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Attempting direct file operations without f_mount...");
 8001244:	4979      	ldr	r1, [pc, #484]	@ (800142c <SDStorage_Init+0x308>)
 8001246:	2001      	movs	r0, #1
 8001248:	f004 f864 	bl	8005314 <LOGGER_SendFormatted>
    LOG_INFO("[SDStorage] Some FatFs implementations support auto-mount on first file access");
 800124c:	4978      	ldr	r1, [pc, #480]	@ (8001430 <SDStorage_Init+0x30c>)
 800124e:	2001      	movs	r0, #1
 8001250:	f004 f860 	bl	8005314 <LOGGER_SendFormatted>
    
    // f_mount 여러 번 재시도 (성공 프로젝트 패턴)
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001254:	4977      	ldr	r1, [pc, #476]	@ (8001434 <SDStorage_Init+0x310>)
 8001256:	2001      	movs	r0, #1
 8001258:	f004 f85c 	bl	8005314 <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;  // 초기값
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < 3; retry++) {
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	e035      	b.n	80012d2 <SDStorage_Init+0x1ae>
        LOG_INFO("[SDStorage] f_mount attempt %d/3...", retry + 1);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3301      	adds	r3, #1
 800126a:	461a      	mov	r2, r3
 800126c:	4972      	ldr	r1, [pc, #456]	@ (8001438 <SDStorage_Init+0x314>)
 800126e:	2001      	movs	r0, #1
 8001270:	f004 f850 	bl	8005314 <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 8001274:	2201      	movs	r2, #1
 8001276:	4971      	ldr	r1, [pc, #452]	@ (800143c <SDStorage_Init+0x318>)
 8001278:	4871      	ldr	r0, [pc, #452]	@ (8001440 <SDStorage_Init+0x31c>)
 800127a:	f012 f9e5 	bl	8013648 <f_mount>
 800127e:	4603      	mov	r3, r0
 8001280:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	461a      	mov	r2, r3
 8001286:	496f      	ldr	r1, [pc, #444]	@ (8001444 <SDStorage_Init+0x320>)
 8001288:	2001      	movs	r0, #1
 800128a:	f004 f843 	bl	8005314 <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d107      	bne.n	80012a4 <SDStorage_Init+0x180>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	3301      	adds	r3, #1
 8001298:	461a      	mov	r2, r3
 800129a:	496b      	ldr	r1, [pc, #428]	@ (8001448 <SDStorage_Init+0x324>)
 800129c:	2001      	movs	r0, #1
 800129e:	f004 f839 	bl	8005314 <LOGGER_SendFormatted>
            break;
 80012a2:	e019      	b.n	80012d8 <SDStorage_Init+0x1b4>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in 1000ms...", retry + 1);
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3301      	adds	r3, #1
 80012a8:	461a      	mov	r2, r3
 80012aa:	4968      	ldr	r1, [pc, #416]	@ (800144c <SDStorage_Init+0x328>)
 80012ac:	2002      	movs	r0, #2
 80012ae:	f004 f831 	bl	8005314 <LOGGER_SendFormatted>
            if (retry < 2) {  // 마지막 시도가 아니면 대기
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	dc09      	bgt.n	80012cc <SDStorage_Init+0x1a8>
                // STM32F7 D-Cache 클리어 (성공 프로젝트 패턴)
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 80012b8:	4965      	ldr	r1, [pc, #404]	@ (8001450 <SDStorage_Init+0x32c>)
 80012ba:	2001      	movs	r0, #1
 80012bc:	f004 f82a 	bl	8005314 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 80012c0:	f7ff fea6 	bl	8001010 <SCB_CleanInvalidateDCache>
                HAL_Delay(1000);
 80012c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012c8:	f004 fdfa 	bl	8005ec0 <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	ddc6      	ble.n	8001266 <SDStorage_Init+0x142>
            }
        }
    }
    
    // 즉시 마운트 성공 시 쓰기 준비 완료
    if (mount_result == FR_OK) {
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d103      	bne.n	80012e6 <SDStorage_Init+0x1c2>
        LOG_INFO("[SDStorage] Immediate mount successful - SD ready for write operations");
 80012de:	495d      	ldr	r1, [pc, #372]	@ (8001454 <SDStorage_Init+0x330>)
 80012e0:	2001      	movs	r0, #1
 80012e2:	f004 f817 	bl	8005314 <LOGGER_SendFormatted>
    }
    
    if (mount_result != FR_OK) {
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80f8 	beq.w	80014de <SDStorage_Init+0x3ba>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4959      	ldr	r1, [pc, #356]	@ (8001458 <SDStorage_Init+0x334>)
 80012f4:	2002      	movs	r0, #2
 80012f6:	f004 f80d 	bl	8005314 <LOGGER_SendFormatted>
        
        // SD 카드가 이미 포맷되어 있다면 f_mkfs 시도하지 않고 다른 접근법 사용
        if (mount_result == FR_DISK_ERR) {
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d12f      	bne.n	8001360 <SDStorage_Init+0x23c>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - SD card may be formatted but incompatible");
 8001300:	4956      	ldr	r1, [pc, #344]	@ (800145c <SDStorage_Init+0x338>)
 8001302:	2002      	movs	r0, #2
 8001304:	f004 f806 	bl	8005314 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Skipping f_mkfs since SD card is already FAT32 formatted");
 8001308:	4955      	ldr	r1, [pc, #340]	@ (8001460 <SDStorage_Init+0x33c>)
 800130a:	2001      	movs	r0, #1
 800130c:	f004 f802 	bl	8005314 <LOGGER_SendFormatted>
            LOG_INFO("[SDStorage] Trying alternative mount approach...");
 8001310:	4954      	ldr	r1, [pc, #336]	@ (8001464 <SDStorage_Init+0x340>)
 8001312:	2001      	movs	r0, #1
 8001314:	f003 fffe 	bl	8005314 <LOGGER_SendFormatted>
            
            // 다른 마운트 방식 시도 (지연 마운트)
            LOG_INFO("[SDStorage] Attempting deferred mount (flag=0)...");
 8001318:	4953      	ldr	r1, [pc, #332]	@ (8001468 <SDStorage_Init+0x344>)
 800131a:	2001      	movs	r0, #1
 800131c:	f003 fffa 	bl	8005314 <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	4946      	ldr	r1, [pc, #280]	@ (800143c <SDStorage_Init+0x318>)
 8001324:	4846      	ldr	r0, [pc, #280]	@ (8001440 <SDStorage_Init+0x31c>)
 8001326:	f012 f98f 	bl	8013648 <f_mount>
 800132a:	4603      	mov	r3, r0
 800132c:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	461a      	mov	r2, r3
 8001332:	494e      	ldr	r1, [pc, #312]	@ (800146c <SDStorage_Init+0x348>)
 8001334:	2001      	movs	r0, #1
 8001336:	f003 ffed 	bl	8005314 <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d104      	bne.n	800134a <SDStorage_Init+0x226>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 8001340:	494b      	ldr	r1, [pc, #300]	@ (8001470 <SDStorage_Init+0x34c>)
 8001342:	2001      	movs	r0, #1
 8001344:	f003 ffe6 	bl	8005314 <LOGGER_SendFormatted>
 8001348:	e0c9      	b.n	80014de <SDStorage_Init+0x3ba>
            } else {
                LOG_ERROR("[SDStorage] Both immediate and deferred mount failed");
 800134a:	494a      	ldr	r1, [pc, #296]	@ (8001474 <SDStorage_Init+0x350>)
 800134c:	2003      	movs	r0, #3
 800134e:	f003 ffe1 	bl	8005314 <LOGGER_SendFormatted>
                LOG_ERROR("[SDStorage] SD card may have hardware compatibility issues");
 8001352:	4949      	ldr	r1, [pc, #292]	@ (8001478 <SDStorage_Init+0x354>)
 8001354:	2003      	movs	r0, #3
 8001356:	f003 ffdd 	bl	8005314 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e0e2      	b.n	8001526 <SDStorage_Init+0x402>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b03      	cmp	r3, #3
 8001364:	d003      	beq.n	800136e <SDStorage_Init+0x24a>
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	2b0d      	cmp	r3, #13
 800136a:	f040 80ae 	bne.w	80014ca <SDStorage_Init+0x3a6>
            // 작업 버퍼 할당 (전역 또는 스택)
            static BYTE work[_MAX_SS];
            
            // 실제 f_mkfs 시도
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 800136e:	4943      	ldr	r1, [pc, #268]	@ (800147c <SDStorage_Init+0x358>)
 8001370:	2001      	movs	r0, #1
 8001372:	f003 ffcf 	bl	8005314 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001376:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4b40      	ldr	r3, [pc, #256]	@ (8001480 <SDStorage_Init+0x35c>)
 800137e:	2200      	movs	r2, #0
 8001380:	2107      	movs	r1, #7
 8001382:	482e      	ldr	r0, [pc, #184]	@ (800143c <SDStorage_Init+0x318>)
 8001384:	f012 fe4a 	bl	801401c <f_mkfs>
 8001388:	4603      	mov	r3, r0
 800138a:	71bb      	strb	r3, [r7, #6]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	461a      	mov	r2, r3
 8001390:	493c      	ldr	r1, [pc, #240]	@ (8001484 <SDStorage_Init+0x360>)
 8001392:	2001      	movs	r0, #1
 8001394:	f003 ffbe 	bl	8005314 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d07c      	beq.n	8001498 <SDStorage_Init+0x374>
                // FAT32로 다시 시도
                LOG_INFO("[SDStorage] Retrying with explicit FAT32 format...");
 800139e:	493a      	ldr	r1, [pc, #232]	@ (8001488 <SDStorage_Init+0x364>)
 80013a0:	2001      	movs	r0, #1
 80013a2:	f003 ffb7 	bl	8005314 <LOGGER_SendFormatted>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 80013a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <SDStorage_Init+0x35c>)
 80013ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013b2:	2102      	movs	r1, #2
 80013b4:	4821      	ldr	r0, [pc, #132]	@ (800143c <SDStorage_Init+0x318>)
 80013b6:	f012 fe31 	bl	801401c <f_mkfs>
 80013ba:	4603      	mov	r3, r0
 80013bc:	71bb      	strb	r3, [r7, #6]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 80013be:	79bb      	ldrb	r3, [r7, #6]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4932      	ldr	r1, [pc, #200]	@ (800148c <SDStorage_Init+0x368>)
 80013c4:	2001      	movs	r0, #1
 80013c6:	f003 ffa5 	bl	8005314 <LOGGER_SendFormatted>
                
                if (mkfs_result != FR_OK) {
 80013ca:	79bb      	ldrb	r3, [r7, #6]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d063      	beq.n	8001498 <SDStorage_Init+0x374>
                    LOG_ERROR("[SDStorage] File system creation failed: %d", mkfs_result);
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	461a      	mov	r2, r3
 80013d4:	492e      	ldr	r1, [pc, #184]	@ (8001490 <SDStorage_Init+0x36c>)
 80013d6:	2003      	movs	r0, #3
 80013d8:	f003 ff9c 	bl	8005314 <LOGGER_SendFormatted>
                    LOG_ERROR("[SDStorage] Possible SD card hardware issue - try different card");
 80013dc:	492d      	ldr	r1, [pc, #180]	@ (8001494 <SDStorage_Init+0x370>)
 80013de:	2003      	movs	r0, #3
 80013e0:	f003 ff98 	bl	8005314 <LOGGER_SendFormatted>
                    return SDSTORAGE_ERROR;
 80013e4:	f04f 33ff 	mov.w	r3, #4294967295
 80013e8:	e09d      	b.n	8001526 <SDStorage_Init+0x402>
 80013ea:	bf00      	nop
 80013ec:	08018e9c 	.word	0x08018e9c
 80013f0:	20001d50 	.word	0x20001d50
 80013f4:	08018ecc 	.word	0x08018ecc
 80013f8:	08018ef4 	.word	0x08018ef4
 80013fc:	08018f34 	.word	0x08018f34
 8001400:	08018f70 	.word	0x08018f70
 8001404:	08018fa0 	.word	0x08018fa0
 8001408:	08018fdc 	.word	0x08018fdc
 800140c:	08019014 	.word	0x08019014
 8001410:	08019058 	.word	0x08019058
 8001414:	0801907c 	.word	0x0801907c
 8001418:	080190a8 	.word	0x080190a8
 800141c:	080190e0 	.word	0x080190e0
 8001420:	0801912c 	.word	0x0801912c
 8001424:	0801916c 	.word	0x0801916c
 8001428:	080191a8 	.word	0x080191a8
 800142c:	080191e4 	.word	0x080191e4
 8001430:	08019228 	.word	0x08019228
 8001434:	08019278 	.word	0x08019278
 8001438:	080192ac 	.word	0x080192ac
 800143c:	2000268c 	.word	0x2000268c
 8001440:	20002690 	.word	0x20002690
 8001444:	080192d0 	.word	0x080192d0
 8001448:	080192f0 	.word	0x080192f0
 800144c:	08019324 	.word	0x08019324
 8001450:	08019364 	.word	0x08019364
 8001454:	080193a0 	.word	0x080193a0
 8001458:	080193e8 	.word	0x080193e8
 800145c:	08019414 	.word	0x08019414
 8001460:	08019464 	.word	0x08019464
 8001464:	080194ac 	.word	0x080194ac
 8001468:	080194e0 	.word	0x080194e0
 800146c:	08019514 	.word	0x08019514
 8001470:	0801953c 	.word	0x0801953c
 8001474:	08019564 	.word	0x08019564
 8001478:	0801959c 	.word	0x0801959c
 800147c:	080195d8 	.word	0x080195d8
 8001480:	2000044c 	.word	0x2000044c
 8001484:	08019614 	.word	0x08019614
 8001488:	0801963c 	.word	0x0801963c
 800148c:	08019670 	.word	0x08019670
 8001490:	08019698 	.word	0x08019698
 8001494:	080196c4 	.word	0x080196c4
                }
            }
            
            // 파일시스템 생성 후 재마운트 시도
            mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001498:	2201      	movs	r2, #1
 800149a:	4925      	ldr	r1, [pc, #148]	@ (8001530 <SDStorage_Init+0x40c>)
 800149c:	4825      	ldr	r0, [pc, #148]	@ (8001534 <SDStorage_Init+0x410>)
 800149e:	f012 f8d3 	bl	8013648 <f_mount>
 80014a2:	4603      	mov	r3, r0
 80014a4:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 80014a6:	7bfb      	ldrb	r3, [r7, #15]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4923      	ldr	r1, [pc, #140]	@ (8001538 <SDStorage_Init+0x414>)
 80014ac:	2001      	movs	r0, #1
 80014ae:	f003 ff31 	bl	8005314 <LOGGER_SendFormatted>
            
            if (mount_result != FR_OK) {
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d011      	beq.n	80014dc <SDStorage_Init+0x3b8>
                LOG_ERROR("[SDStorage] Re-mount failed after mkfs: %d", mount_result);
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	461a      	mov	r2, r3
 80014bc:	491f      	ldr	r1, [pc, #124]	@ (800153c <SDStorage_Init+0x418>)
 80014be:	2003      	movs	r0, #3
 80014c0:	f003 ff28 	bl	8005314 <LOGGER_SendFormatted>
                return SDSTORAGE_ERROR;
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	e02d      	b.n	8001526 <SDStorage_Init+0x402>
            }
        } else {
            LOG_ERROR("[SDStorage] Mount failed with unrecoverable error: %d", mount_result);
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	461a      	mov	r2, r3
 80014ce:	491c      	ldr	r1, [pc, #112]	@ (8001540 <SDStorage_Init+0x41c>)
 80014d0:	2003      	movs	r0, #3
 80014d2:	f003 ff1f 	bl	8005314 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e024      	b.n	8001526 <SDStorage_Init+0x402>
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 80014dc:	bf00      	nop
        }
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 80014de:	4919      	ldr	r1, [pc, #100]	@ (8001544 <SDStorage_Init+0x420>)
 80014e0:	2001      	movs	r0, #1
 80014e2:	f003 ff17 	bl	8005314 <LOGGER_SendFormatted>
#endif

    // FatFs 마운트 성공 확인됨
    
    // 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 80014e6:	4918      	ldr	r1, [pc, #96]	@ (8001548 <SDStorage_Init+0x424>)
 80014e8:	2001      	movs	r0, #1
 80014ea:	f003 ff13 	bl	8005314 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 80014ee:	f000 fb21 	bl	8001b34 <_create_log_directory>
 80014f2:	6038      	str	r0, [r7, #0]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	bf0c      	ite	eq
 80014fa:	2301      	moveq	r3, #1
 80014fc:	2300      	movne	r3, #0
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <SDStorage_Init+0x428>)
 8001502:	701a      	strb	r2, [r3, #0]
    
    g_sd_ready = true;
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <SDStorage_Init+0x42c>)
 8001506:	2201      	movs	r2, #1
 8001508:	701a      	strb	r2, [r3, #0]
    g_current_log_size = 0;
 800150a:	4b12      	ldr	r3, [pc, #72]	@ (8001554 <SDStorage_Init+0x430>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
    memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001510:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001514:	2100      	movs	r1, #0
 8001516:	4810      	ldr	r0, [pc, #64]	@ (8001558 <SDStorage_Init+0x434>)
 8001518:	f016 f89e 	bl	8017658 <memset>
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 800151c:	490f      	ldr	r1, [pc, #60]	@ (800155c <SDStorage_Init+0x438>)
 800151e:	2001      	movs	r0, #1
 8001520:	f003 fef8 	bl	8005314 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000268c 	.word	0x2000268c
 8001534:	20002690 	.word	0x20002690
 8001538:	08019708 	.word	0x08019708
 800153c:	08019734 	.word	0x08019734
 8001540:	08019760 	.word	0x08019760
 8001544:	08019798 	.word	0x08019798
 8001548:	080197c4 	.word	0x080197c4
 800154c:	20000344 	.word	0x20000344
 8001550:	2000023c 	.word	0x2000023c
 8001554:	20000340 	.word	0x20000340
 8001558:	20000240 	.word	0x20000240
 800155c:	080197ec 	.word	0x080197ec

08001560 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8001566:	af02      	add	r7, sp, #8
 8001568:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800156c:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001570:	6018      	str	r0, [r3, #0]
 8001572:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001576:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800157a:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 800157c:	4bbf      	ldr	r3, [pc, #764]	@ (800187c <SDStorage_WriteLog+0x31c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	f083 0301 	eor.w	r3, r3, #1
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 800158a:	f06f 0301 	mvn.w	r3, #1
 800158e:	e20b      	b.n	80019a8 <SDStorage_WriteLog+0x448>
    }
    
    if (data == NULL || size == 0) {
 8001590:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001594:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d006      	beq.n	80015ac <SDStorage_WriteLog+0x4c>
 800159e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80015a2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 80015ac:	f06f 0304 	mvn.w	r3, #4
 80015b0:	e1fa      	b.n	80019a8 <SDStorage_WriteLog+0x448>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 80015b2:	4bb3      	ldr	r3, [pc, #716]	@ (8001880 <SDStorage_WriteLog+0x320>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d00a      	beq.n	80015d0 <SDStorage_WriteLog+0x70>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 80015ba:	4bb2      	ldr	r3, [pc, #712]	@ (8001884 <SDStorage_WriteLog+0x324>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80015c2:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 80015ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015ce:	d907      	bls.n	80015e0 <SDStorage_WriteLog+0x80>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80015d0:	f000 fa0a 	bl	80019e8 <SDStorage_CreateNewLogFile>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <SDStorage_WriteLog+0x80>
            return SDSTORAGE_FILE_ERROR;
 80015da:	f06f 0302 	mvn.w	r3, #2
 80015de:	e1e3      	b.n	80019a8 <SDStorage_WriteLog+0x448>

#ifdef STM32F746xx
    // STM32 환경: 안정적인 열기-쓰기-닫기 방식
    
    // 로그 파일명이 없으면 생성
    if (strlen(g_current_log_file) == 0) {
 80015e0:	4ba7      	ldr	r3, [pc, #668]	@ (8001880 <SDStorage_WriteLog+0x320>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10e      	bne.n	8001606 <SDStorage_WriteLog+0xa6>
        if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 80015e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ec:	48a4      	ldr	r0, [pc, #656]	@ (8001880 <SDStorage_WriteLog+0x320>)
 80015ee:	f000 fb03 	bl	8001bf8 <_generate_log_filename>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d006      	beq.n	8001606 <SDStorage_WriteLog+0xa6>
            LOG_ERROR("[SDStorage] Failed to generate log filename");
 80015f8:	49a3      	ldr	r1, [pc, #652]	@ (8001888 <SDStorage_WriteLog+0x328>)
 80015fa:	2003      	movs	r0, #3
 80015fc:	f003 fe8a 	bl	8005314 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
 8001604:	e1d0      	b.n	80019a8 <SDStorage_WriteLog+0x448>
        }
    }
    
    // SD 카드 상태 변화에 robust한 방식: 매번 열고 닫기
    FIL temp_file;
    memset(&temp_file, 0, sizeof(temp_file));
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800160e:	2100      	movs	r1, #0
 8001610:	4618      	mov	r0, r3
 8001612:	f016 f821 	bl	8017658 <memset>
    
    // 파일 닫기 보장: 이전에 열린 파일이 있으면 강제로 닫기
    _ensure_file_closed();
 8001616:	f7ff fd37 	bl	8001088 <_ensure_file_closed>
    
    // 성공 프로젝트 방식: 디스크 상태 먼저 확인
    DSTATUS current_disk_stat = disk_status(0);
 800161a:	2000      	movs	r0, #0
 800161c:	f010 fc4a 	bl	8011eb4 <disk_status>
 8001620:	4603      	mov	r3, r0
 8001622:	f887 3246 	strb.w	r3, [r7, #582]	@ 0x246
    if (current_disk_stat != 0) {
 8001626:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01a      	beq.n	8001664 <SDStorage_WriteLog+0x104>
        LOG_WARN("[SDStorage] Disk not ready (%d), reinitializing...", current_disk_stat);
 800162e:	f897 3246 	ldrb.w	r3, [r7, #582]	@ 0x246
 8001632:	461a      	mov	r2, r3
 8001634:	4995      	ldr	r1, [pc, #596]	@ (800188c <SDStorage_WriteLog+0x32c>)
 8001636:	2002      	movs	r0, #2
 8001638:	f003 fe6c 	bl	8005314 <LOGGER_SendFormatted>
        DSTATUS init_result = disk_initialize(0);
 800163c:	2000      	movs	r0, #0
 800163e:	f010 fc53 	bl	8011ee8 <disk_initialize>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
        if (init_result != 0) {
 8001648:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 800164c:	2b00      	cmp	r3, #0
 800164e:	d009      	beq.n	8001664 <SDStorage_WriteLog+0x104>
            LOG_ERROR("[SDStorage] Disk reinitialization failed: %d", init_result);
 8001650:	f897 3245 	ldrb.w	r3, [r7, #581]	@ 0x245
 8001654:	461a      	mov	r2, r3
 8001656:	498e      	ldr	r1, [pc, #568]	@ (8001890 <SDStorage_WriteLog+0x330>)
 8001658:	2003      	movs	r0, #3
 800165a:	f003 fe5b 	bl	8005314 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 800165e:	f06f 0301 	mvn.w	r3, #1
 8001662:	e1a1      	b.n	80019a8 <SDStorage_WriteLog+0x448>
        }
    }
    
    // 파일 열기 (성공 프로젝트 방식: 단계적 시도)
    FRESULT open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2232      	movs	r2, #50	@ 0x32
 800166a:	4985      	ldr	r1, [pc, #532]	@ (8001880 <SDStorage_WriteLog+0x320>)
 800166c:	4618      	mov	r0, r3
 800166e:	f012 f82f 	bl	80136d0 <f_open>
 8001672:	4603      	mov	r3, r0
 8001674:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    
    // 파일 열기 성공 시 추적 등록
    if (open_result == FR_OK) {
 8001678:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10a      	bne.n	8001696 <SDStorage_WriteLog+0x136>
        _register_file_opened(&temp_file, g_current_log_file);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	497e      	ldr	r1, [pc, #504]	@ (8001880 <SDStorage_WriteLog+0x320>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fd20 	bl	80010cc <_register_file_opened>
        LOG_DEBUG("[SDStorage] File opened and registered: %s", g_current_log_file);
 800168c:	4a7c      	ldr	r2, [pc, #496]	@ (8001880 <SDStorage_WriteLog+0x320>)
 800168e:	4981      	ldr	r1, [pc, #516]	@ (8001894 <SDStorage_WriteLog+0x334>)
 8001690:	2000      	movs	r0, #0
 8001692:	f003 fe3f 	bl	8005314 <LOGGER_SendFormatted>
    }
    
    // f_open 실패 시 성공 프로젝트 방식의 복구 로직
    if (open_result != FR_OK) {
 8001696:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 808f 	beq.w	80017be <SDStorage_WriteLog+0x25e>
        LOG_WARN("[SDStorage] f_open failed (%d), trying recovery...", open_result);
 80016a0:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80016a4:	461a      	mov	r2, r3
 80016a6:	497c      	ldr	r1, [pc, #496]	@ (8001898 <SDStorage_WriteLog+0x338>)
 80016a8:	2002      	movs	r0, #2
 80016aa:	f003 fe33 	bl	8005314 <LOGGER_SendFormatted>
        
        // 1단계: 마운트 재시도
        f_mount(NULL, SDPath, 0);  // 언마운트
 80016ae:	2200      	movs	r2, #0
 80016b0:	497a      	ldr	r1, [pc, #488]	@ (800189c <SDStorage_WriteLog+0x33c>)
 80016b2:	2000      	movs	r0, #0
 80016b4:	f011 ffc8 	bl	8013648 <f_mount>
        HAL_Delay(200);
 80016b8:	20c8      	movs	r0, #200	@ 0xc8
 80016ba:	f004 fc01 	bl	8005ec0 <HAL_Delay>
        FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);  // 강제 재마운트
 80016be:	2201      	movs	r2, #1
 80016c0:	4976      	ldr	r1, [pc, #472]	@ (800189c <SDStorage_WriteLog+0x33c>)
 80016c2:	4877      	ldr	r0, [pc, #476]	@ (80018a0 <SDStorage_WriteLog+0x340>)
 80016c4:	f011 ffc0 	bl	8013648 <f_mount>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
        
        if (remount_result == FR_OK) {
 80016ce:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d117      	bne.n	8001706 <SDStorage_WriteLog+0x1a6>
            // 재마운트 성공 후 다시 파일 열기 시도
            open_result = f_open(&temp_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	2232      	movs	r2, #50	@ 0x32
 80016dc:	4968      	ldr	r1, [pc, #416]	@ (8001880 <SDStorage_WriteLog+0x320>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f011 fff6 	bl	80136d0 <f_open>
 80016e4:	4603      	mov	r3, r0
 80016e6:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
            if (open_result == FR_OK) {
 80016ea:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <SDStorage_WriteLog+0x1a6>
                _register_file_opened(&temp_file, g_current_log_file);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4962      	ldr	r1, [pc, #392]	@ (8001880 <SDStorage_WriteLog+0x320>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fce7 	bl	80010cc <_register_file_opened>
                LOG_INFO("[SDStorage] File opened after remount recovery");
 80016fe:	4969      	ldr	r1, [pc, #420]	@ (80018a4 <SDStorage_WriteLog+0x344>)
 8001700:	2001      	movs	r0, #1
 8001702:	f003 fe07 	bl	8005314 <LOGGER_SendFormatted>
            }
        }
        
        // 2단계: 여전히 실패하면 f_mkfs 시도
        if (open_result != FR_OK) {
 8001706:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800170a:	2b00      	cmp	r3, #0
 800170c:	d049      	beq.n	80017a2 <SDStorage_WriteLog+0x242>
            LOG_WARN("[SDStorage] File still failed, trying f_mkfs recovery...");
 800170e:	4966      	ldr	r1, [pc, #408]	@ (80018a8 <SDStorage_WriteLog+0x348>)
 8001710:	2002      	movs	r0, #2
 8001712:	f003 fdff 	bl	8005314 <LOGGER_SendFormatted>
            static BYTE work[4096];
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4b63      	ldr	r3, [pc, #396]	@ (80018ac <SDStorage_WriteLog+0x34c>)
 800171e:	2200      	movs	r2, #0
 8001720:	2107      	movs	r1, #7
 8001722:	485e      	ldr	r0, [pc, #376]	@ (800189c <SDStorage_WriteLog+0x33c>)
 8001724:	f012 fc7a 	bl	801401c <f_mkfs>
 8001728:	4603      	mov	r3, r0
 800172a:	f887 3243 	strb.w	r3, [r7, #579]	@ 0x243
            
            if (mkfs_result == FR_OK) {
 800172e:	f897 3243 	ldrb.w	r3, [r7, #579]	@ 0x243
 8001732:	2b00      	cmp	r3, #0
 8001734:	d135      	bne.n	80017a2 <SDStorage_WriteLog+0x242>
                LOG_INFO("[SDStorage] f_mkfs successful, remounting...");
 8001736:	495e      	ldr	r1, [pc, #376]	@ (80018b0 <SDStorage_WriteLog+0x350>)
 8001738:	2001      	movs	r0, #1
 800173a:	f003 fdeb 	bl	8005314 <LOGGER_SendFormatted>
                f_mount(NULL, SDPath, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	4956      	ldr	r1, [pc, #344]	@ (800189c <SDStorage_WriteLog+0x33c>)
 8001742:	2000      	movs	r0, #0
 8001744:	f011 ff80 	bl	8013648 <f_mount>
                HAL_Delay(500);
 8001748:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800174c:	f004 fbb8 	bl	8005ec0 <HAL_Delay>
                remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001750:	2201      	movs	r2, #1
 8001752:	4952      	ldr	r1, [pc, #328]	@ (800189c <SDStorage_WriteLog+0x33c>)
 8001754:	4852      	ldr	r0, [pc, #328]	@ (80018a0 <SDStorage_WriteLog+0x340>)
 8001756:	f011 ff77 	bl	8013648 <f_mount>
 800175a:	4603      	mov	r3, r0
 800175c:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244
                
                if (remount_result == FR_OK) {
 8001760:	f897 3244 	ldrb.w	r3, [r7, #580]	@ 0x244
 8001764:	2b00      	cmp	r3, #0
 8001766:	d11c      	bne.n	80017a2 <SDStorage_WriteLog+0x242>
                    // 파일명 재생성 (mkfs 후 파일이 사라졌으므로)
                    _generate_log_filename(g_current_log_file, sizeof(g_current_log_file));
 8001768:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800176c:	4844      	ldr	r0, [pc, #272]	@ (8001880 <SDStorage_WriteLog+0x320>)
 800176e:	f000 fa43 	bl	8001bf8 <_generate_log_filename>
                    open_result = f_open(&temp_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	220a      	movs	r2, #10
 8001778:	4941      	ldr	r1, [pc, #260]	@ (8001880 <SDStorage_WriteLog+0x320>)
 800177a:	4618      	mov	r0, r3
 800177c:	f011 ffa8 	bl	80136d0 <f_open>
 8001780:	4603      	mov	r3, r0
 8001782:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
                    if (open_result == FR_OK) {
 8001786:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <SDStorage_WriteLog+0x242>
                        _register_file_opened(&temp_file, g_current_log_file);
 800178e:	f107 0314 	add.w	r3, r7, #20
 8001792:	493b      	ldr	r1, [pc, #236]	@ (8001880 <SDStorage_WriteLog+0x320>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc99 	bl	80010cc <_register_file_opened>
                        LOG_INFO("[SDStorage] File created after f_mkfs recovery");
 800179a:	4946      	ldr	r1, [pc, #280]	@ (80018b4 <SDStorage_WriteLog+0x354>)
 800179c:	2001      	movs	r0, #1
 800179e:	f003 fdb9 	bl	8005314 <LOGGER_SendFormatted>
                }
            }
        }
        
        // 모든 복구 시도 실패
        if (open_result != FR_OK) {
 80017a2:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d009      	beq.n	80017be <SDStorage_WriteLog+0x25e>
            LOG_ERROR("[SDStorage] All recovery attempts failed: %d", open_result);
 80017aa:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80017ae:	461a      	mov	r2, r3
 80017b0:	4941      	ldr	r1, [pc, #260]	@ (80018b8 <SDStorage_WriteLog+0x358>)
 80017b2:	2003      	movs	r0, #3
 80017b4:	f003 fdae 	bl	8005314 <LOGGER_SendFormatted>
            return SDSTORAGE_FILE_ERROR;
 80017b8:	f06f 0302 	mvn.w	r3, #2
 80017bc:	e0f4      	b.n	80019a8 <SDStorage_WriteLog+0x448>
        }
    }
    
    if (open_result == FR_OK) {
 80017be:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 80c3 	bne.w	800194e <SDStorage_WriteLog+0x3ee>
        // FA_OPEN_APPEND 사용 시 자동으로 파일 끝에 위치
        
        // 원본 데이터 쓰기
        UINT bytes_written;
        FRESULT write_result = f_write(&temp_file, data, size, &bytes_written);
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 80017d0:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 80017d4:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 80017d8:	f5a1 7111 	sub.w	r1, r1, #580	@ 0x244
 80017dc:	f107 0014 	add.w	r0, r7, #20
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	6809      	ldr	r1, [r1, #0]
 80017e4:	f012 f8ff 	bl	80139e6 <f_write>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f887 3241 	strb.w	r3, [r7, #577]	@ 0x241
        
        if (write_result == FR_OK && bytes_written == size) {
 80017ee:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d179      	bne.n	80018ea <SDStorage_WriteLog+0x38a>
 80017f6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80017fa:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8001804:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d16d      	bne.n	80018ea <SDStorage_WriteLog+0x38a>
            // 줄바꿈 추가 (Windows 호환을 위해 \r\n 사용)
            UINT newline_written;
            FRESULT newline_result = f_write(&temp_file, "\r\n", 2, &newline_written);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	f107 0014 	add.w	r0, r7, #20
 8001816:	2202      	movs	r2, #2
 8001818:	4928      	ldr	r1, [pc, #160]	@ (80018bc <SDStorage_WriteLog+0x35c>)
 800181a:	f012 f8e4 	bl	80139e6 <f_write>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 3240 	strb.w	r3, [r7, #576]	@ 0x240
            
            // 즉시 동기화 및 닫기
            f_sync(&temp_file);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4618      	mov	r0, r3
 800182a:	f012 fa51 	bl	8013cd0 <f_sync>
            f_close(&temp_file);
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4618      	mov	r0, r3
 8001834:	f012 faca 	bl	8013dcc <f_close>
            _register_file_closed();  // 추적 해제
 8001838:	f7ff fc62 	bl	8001100 <_register_file_closed>
            
            if (newline_result == FR_OK) {
 800183c:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8001840:	2b00      	cmp	r3, #0
 8001842:	d13f      	bne.n	80018c4 <SDStorage_WriteLog+0x364>
                g_current_log_size += bytes_written + newline_written;
 8001844:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001848:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001852:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	441a      	add	r2, r3
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <SDStorage_WriteLog+0x324>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a08      	ldr	r2, [pc, #32]	@ (8001884 <SDStorage_WriteLog+0x324>)
 8001862:	6013      	str	r3, [r2, #0]
                LOG_DEBUG("[SDStorage] Log written successfully: %d+2 bytes", bytes_written);
 8001864:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001868:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	4913      	ldr	r1, [pc, #76]	@ (80018c0 <SDStorage_WriteLog+0x360>)
 8001872:	2000      	movs	r0, #0
 8001874:	f003 fd4e 	bl	8005314 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e095      	b.n	80019a8 <SDStorage_WriteLog+0x448>
 800187c:	2000023c 	.word	0x2000023c
 8001880:	20000240 	.word	0x20000240
 8001884:	20000340 	.word	0x20000340
 8001888:	08019820 	.word	0x08019820
 800188c:	0801984c 	.word	0x0801984c
 8001890:	08019880 	.word	0x08019880
 8001894:	080198b0 	.word	0x080198b0
 8001898:	080198dc 	.word	0x080198dc
 800189c:	2000268c 	.word	0x2000268c
 80018a0:	20002690 	.word	0x20002690
 80018a4:	08019910 	.word	0x08019910
 80018a8:	08019940 	.word	0x08019940
 80018ac:	2000064c 	.word	0x2000064c
 80018b0:	0801997c 	.word	0x0801997c
 80018b4:	080199ac 	.word	0x080199ac
 80018b8:	080199dc 	.word	0x080199dc
 80018bc:	08019a0c 	.word	0x08019a0c
 80018c0:	08019a10 	.word	0x08019a10
            } else {
                LOG_WARN("[SDStorage] Newline write failed: %d", newline_result);
 80018c4:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 80018c8:	461a      	mov	r2, r3
 80018ca:	493a      	ldr	r1, [pc, #232]	@ (80019b4 <SDStorage_WriteLog+0x454>)
 80018cc:	2002      	movs	r0, #2
 80018ce:	f003 fd21 	bl	8005314 <LOGGER_SendFormatted>
                g_current_log_size += bytes_written;  // 원본 데이터는 성공했으므로 카운트
 80018d2:	4b39      	ldr	r3, [pc, #228]	@ (80019b8 <SDStorage_WriteLog+0x458>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80018da:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a35      	ldr	r2, [pc, #212]	@ (80019b8 <SDStorage_WriteLog+0x458>)
 80018e4:	6013      	str	r3, [r2, #0]
                return SDSTORAGE_OK;  // 원본 데이터 쓰기는 성공했으므로 OK 반환
 80018e6:	2300      	movs	r3, #0
 80018e8:	e05e      	b.n	80019a8 <SDStorage_WriteLog+0x448>
            }
        } else {
            f_close(&temp_file);  // 실패해도 파일 닫기
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4618      	mov	r0, r3
 80018f0:	f012 fa6c 	bl	8013dcc <f_close>
            _register_file_closed();  // 추적 해제
 80018f4:	f7ff fc04 	bl	8001100 <_register_file_closed>
            if (write_result != FR_OK) {
 80018f8:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <SDStorage_WriteLog+0x3b4>
                LOG_ERROR("[SDStorage] f_write failed: %d", write_result);
 8001900:	f897 3241 	ldrb.w	r3, [r7, #577]	@ 0x241
 8001904:	461a      	mov	r2, r3
 8001906:	492d      	ldr	r1, [pc, #180]	@ (80019bc <SDStorage_WriteLog+0x45c>)
 8001908:	2003      	movs	r0, #3
 800190a:	f003 fd03 	bl	8005314 <LOGGER_SendFormatted>
                return SDSTORAGE_FILE_ERROR;
 800190e:	f06f 0302 	mvn.w	r3, #2
 8001912:	e049      	b.n	80019a8 <SDStorage_WriteLog+0x448>
            } else if (bytes_written != size) {
 8001914:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001918:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8001922:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d032      	beq.n	8001992 <SDStorage_WriteLog+0x432>
                LOG_WARN("[SDStorage] Partial write: %d/%d bytes", bytes_written, size);
 800192c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8001930:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800193a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	491f      	ldr	r1, [pc, #124]	@ (80019c0 <SDStorage_WriteLog+0x460>)
 8001942:	2002      	movs	r0, #2
 8001944:	f003 fce6 	bl	8005314 <LOGGER_SendFormatted>
                return SDSTORAGE_DISK_FULL;
 8001948:	f06f 0303 	mvn.w	r3, #3
 800194c:	e02c      	b.n	80019a8 <SDStorage_WriteLog+0x448>
            }
        }
    } else {
        LOG_ERROR("[SDStorage] f_open failed: %d - SD card state may have changed", open_result);
 800194e:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8001952:	461a      	mov	r2, r3
 8001954:	491b      	ldr	r1, [pc, #108]	@ (80019c4 <SDStorage_WriteLog+0x464>)
 8001956:	2003      	movs	r0, #3
 8001958:	f003 fcdc 	bl	8005314 <LOGGER_SendFormatted>
        
        // SD 카드 상태 재확인
        DSTATUS current_status = disk_status(0);
 800195c:	2000      	movs	r0, #0
 800195e:	f010 faa9 	bl	8011eb4 <disk_status>
 8001962:	4603      	mov	r3, r0
 8001964:	f887 3242 	strb.w	r3, [r7, #578]	@ 0x242
        LOG_WARN("[SDStorage] Current disk status: 0x%02X", current_status);
 8001968:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 800196c:	461a      	mov	r2, r3
 800196e:	4916      	ldr	r1, [pc, #88]	@ (80019c8 <SDStorage_WriteLog+0x468>)
 8001970:	2002      	movs	r0, #2
 8001972:	f003 fccf 	bl	8005314 <LOGGER_SendFormatted>
        
        if (current_status != 0) {
 8001976:	f897 3242 	ldrb.w	r3, [r7, #578]	@ 0x242
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <SDStorage_WriteLog+0x42c>
            LOG_WARN("[SDStorage] SD card not ready - temporarily disabling SD logging");
 800197e:	4913      	ldr	r1, [pc, #76]	@ (80019cc <SDStorage_WriteLog+0x46c>)
 8001980:	2002      	movs	r0, #2
 8001982:	f003 fcc7 	bl	8005314 <LOGGER_SendFormatted>
            return SDSTORAGE_NOT_READY;
 8001986:	f06f 0301 	mvn.w	r3, #1
 800198a:	e00d      	b.n	80019a8 <SDStorage_WriteLog+0x448>
        }
        
        return SDSTORAGE_FILE_ERROR;
 800198c:	f06f 0302 	mvn.w	r3, #2
 8001990:	e00a      	b.n	80019a8 <SDStorage_WriteLog+0x448>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <SDStorage_WriteLog+0x458>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800199a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <SDStorage_WriteLog+0x458>)
 80019a4:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 80019a6:	2300      	movs	r3, #0
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	08019a44 	.word	0x08019a44
 80019b8:	20000340 	.word	0x20000340
 80019bc:	08019a6c 	.word	0x08019a6c
 80019c0:	08019a8c 	.word	0x08019a8c
 80019c4:	08019ab4 	.word	0x08019ab4
 80019c8:	08019af4 	.word	0x08019af4
 80019cc:	08019b1c 	.word	0x08019b1c

080019d0 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
    return g_sd_ready;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <SDStorage_IsReady+0x14>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	2000023c 	.word	0x2000023c

080019e8 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 80019ee:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 80019f0:	4b43      	ldr	r3, [pc, #268]	@ (8001b00 <SDStorage_CreateNewLogFile+0x118>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	f083 0301 	eor.w	r3, r3, #1
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <SDStorage_CreateNewLogFile+0x1c>
        return SDSTORAGE_NOT_READY;
 80019fe:	f06f 0301 	mvn.w	r3, #1
 8001a02:	e077      	b.n	8001af4 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 전역 파일 객체 제거됨 - 별도 처리 불필요
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001a04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a08:	483e      	ldr	r0, [pc, #248]	@ (8001b04 <SDStorage_CreateNewLogFile+0x11c>)
 8001a0a:	f000 f8f5 	bl	8001bf8 <_generate_log_filename>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <SDStorage_CreateNewLogFile+0x32>
        return SDSTORAGE_ERROR;
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
 8001a18:	e06c      	b.n	8001af4 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 테스트 (간단한 방식)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Testing file creation: %s", g_current_log_file);
 8001a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b04 <SDStorage_CreateNewLogFile+0x11c>)
 8001a1c:	493a      	ldr	r1, [pc, #232]	@ (8001b08 <SDStorage_CreateNewLogFile+0x120>)
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f003 fc78 	bl	8005314 <LOGGER_SendFormatted>
    
    // 지역 변수로 파일 객체 생성
    FIL test_file;
    memset(&test_file, 0, sizeof(test_file));
 8001a24:	463b      	mov	r3, r7
 8001a26:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f015 fe13 	bl	8017658 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f010 fa3e 	bl	8011eb4 <disk_status>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 8001a3e:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001a42:	461a      	mov	r2, r3
 8001a44:	4931      	ldr	r1, [pc, #196]	@ (8001b0c <SDStorage_CreateNewLogFile+0x124>)
 8001a46:	2001      	movs	r0, #1
 8001a48:	f003 fc64 	bl	8005314 <LOGGER_SendFormatted>
    
    // 파일 생성 테스트
    FRESULT open_result = f_open(&test_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	220a      	movs	r2, #10
 8001a50:	492c      	ldr	r1, [pc, #176]	@ (8001b04 <SDStorage_CreateNewLogFile+0x11c>)
 8001a52:	4618      	mov	r0, r3
 8001a54:	f011 fe3c 	bl	80136d0 <f_open>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001a5e:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001a62:	461a      	mov	r2, r3
 8001a64:	492a      	ldr	r1, [pc, #168]	@ (8001b10 <SDStorage_CreateNewLogFile+0x128>)
 8001a66:	2001      	movs	r0, #1
 8001a68:	f003 fc54 	bl	8005314 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001a6c:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d032      	beq.n	8001ada <SDStorage_CreateNewLogFile+0xf2>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001a74:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4926      	ldr	r1, [pc, #152]	@ (8001b14 <SDStorage_CreateNewLogFile+0x12c>)
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f003 fc49 	bl	8005314 <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 8001a82:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	d006      	beq.n	8001a98 <SDStorage_CreateNewLogFile+0xb0>
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	dc13      	bgt.n	8001ab6 <SDStorage_CreateNewLogFile+0xce>
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d00c      	beq.n	8001aac <SDStorage_CreateNewLogFile+0xc4>
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	d005      	beq.n	8001aa2 <SDStorage_CreateNewLogFile+0xba>
 8001a96:	e00e      	b.n	8001ab6 <SDStorage_CreateNewLogFile+0xce>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001a98:	491f      	ldr	r1, [pc, #124]	@ (8001b18 <SDStorage_CreateNewLogFile+0x130>)
 8001a9a:	2003      	movs	r0, #3
 8001a9c:	f003 fc3a 	bl	8005314 <LOGGER_SendFormatted>
                break;
 8001aa0:	e011      	b.n	8001ac6 <SDStorage_CreateNewLogFile+0xde>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 8001aa2:	491e      	ldr	r1, [pc, #120]	@ (8001b1c <SDStorage_CreateNewLogFile+0x134>)
 8001aa4:	2003      	movs	r0, #3
 8001aa6:	f003 fc35 	bl	8005314 <LOGGER_SendFormatted>
                break;
 8001aaa:	e00c      	b.n	8001ac6 <SDStorage_CreateNewLogFile+0xde>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 8001aac:	491c      	ldr	r1, [pc, #112]	@ (8001b20 <SDStorage_CreateNewLogFile+0x138>)
 8001aae:	2003      	movs	r0, #3
 8001ab0:	f003 fc30 	bl	8005314 <LOGGER_SendFormatted>
                break;
 8001ab4:	e007      	b.n	8001ac6 <SDStorage_CreateNewLogFile+0xde>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 8001ab6:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001aba:	461a      	mov	r2, r3
 8001abc:	4919      	ldr	r1, [pc, #100]	@ (8001b24 <SDStorage_CreateNewLogFile+0x13c>)
 8001abe:	2003      	movs	r0, #3
 8001ac0:	f003 fc28 	bl	8005314 <LOGGER_SendFormatted>
                break;
 8001ac4:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001ac6:	4918      	ldr	r1, [pc, #96]	@ (8001b28 <SDStorage_CreateNewLogFile+0x140>)
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f003 fc23 	bl	8005314 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001ace:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <SDStorage_CreateNewLogFile+0x118>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001ad4:	f06f 0302 	mvn.w	r3, #2
 8001ad8:	e00c      	b.n	8001af4 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 확인 후 즉시 닫기 (추적 등록 없이)
    f_close(&test_file);
 8001ada:	463b      	mov	r3, r7
 8001adc:	4618      	mov	r0, r3
 8001ade:	f012 f975 	bl	8013dcc <f_close>
    LOG_INFO("[SDStorage] File created and ready for logging: %s", g_current_log_file);
 8001ae2:	4a08      	ldr	r2, [pc, #32]	@ (8001b04 <SDStorage_CreateNewLogFile+0x11c>)
 8001ae4:	4911      	ldr	r1, [pc, #68]	@ (8001b2c <SDStorage_CreateNewLogFile+0x144>)
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f003 fc14 	bl	8005314 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <SDStorage_CreateNewLogFile+0x148>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2000023c 	.word	0x2000023c
 8001b04:	20000240 	.word	0x20000240
 8001b08:	08019b60 	.word	0x08019b60
 8001b0c:	08019af4 	.word	0x08019af4
 8001b10:	08019b88 	.word	0x08019b88
 8001b14:	08019ba8 	.word	0x08019ba8
 8001b18:	08019bc8 	.word	0x08019bc8
 8001b1c:	08019c0c 	.word	0x08019c0c
 8001b20:	08019c48 	.word	0x08019c48
 8001b24:	08019c74 	.word	0x08019c74
 8001b28:	08019c9c 	.word	0x08019c9c
 8001b2c:	08019cdc 	.word	0x08019cdc
 8001b30:	20000340 	.word	0x20000340

08001b34 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001b3a:	4924      	ldr	r1, [pc, #144]	@ (8001bcc <_create_log_directory+0x98>)
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f003 fbe9 	bl	8005314 <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001b42:	2201      	movs	r2, #1
 8001b44:	4922      	ldr	r1, [pc, #136]	@ (8001bd0 <_create_log_directory+0x9c>)
 8001b46:	4823      	ldr	r0, [pc, #140]	@ (8001bd4 <_create_log_directory+0xa0>)
 8001b48:	f011 fd7e 	bl	8013648 <f_mount>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	461a      	mov	r2, r3
 8001b54:	4920      	ldr	r1, [pc, #128]	@ (8001bd8 <_create_log_directory+0xa4>)
 8001b56:	2001      	movs	r0, #1
 8001b58:	f003 fbdc 	bl	8005314 <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001b60:	79bb      	ldrb	r3, [r7, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 8001b66:	491d      	ldr	r1, [pc, #116]	@ (8001bdc <_create_log_directory+0xa8>)
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f003 fbd3 	bl	8005314 <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001b6e:	481c      	ldr	r0, [pc, #112]	@ (8001be0 <_create_log_directory+0xac>)
 8001b70:	f012 f94c 	bl	8013e0c <f_mkdir>
 8001b74:	4603      	mov	r3, r0
 8001b76:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4919      	ldr	r1, [pc, #100]	@ (8001be4 <_create_log_directory+0xb0>)
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f003 fbc8 	bl	8005314 <LOGGER_SendFormatted>
 8001b84:	e005      	b.n	8001b92 <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001b86:	79bb      	ldrb	r3, [r7, #6]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4917      	ldr	r1, [pc, #92]	@ (8001be8 <_create_log_directory+0xb4>)
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f003 fbc1 	bl	8005314 <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <_create_log_directory+0x6a>
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d105      	bne.n	8001baa <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001b9e:	4913      	ldr	r1, [pc, #76]	@ (8001bec <_create_log_directory+0xb8>)
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f003 fbb7 	bl	8005314 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e00b      	b.n	8001bc2 <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4910      	ldr	r1, [pc, #64]	@ (8001bf0 <_create_log_directory+0xbc>)
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f003 fbaf 	bl	8005314 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001bb6:	490f      	ldr	r1, [pc, #60]	@ (8001bf4 <_create_log_directory+0xc0>)
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f003 fbab 	bl	8005314 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	08019d10 	.word	0x08019d10
 8001bd0:	2000268c 	.word	0x2000268c
 8001bd4:	20002690 	.word	0x20002690
 8001bd8:	08019d48 	.word	0x08019d48
 8001bdc:	08019d70 	.word	0x08019d70
 8001be0:	08019da4 	.word	0x08019da4
 8001be4:	08019db0 	.word	0x08019db0
 8001be8:	08019dd0 	.word	0x08019dd0
 8001bec:	08019df8 	.word	0x08019df8
 8001bf0:	08019e30 	.word	0x08019e30
 8001bf4:	08019e68 	.word	0x08019e68

08001bf8 <_generate_log_filename>:

static int _generate_log_filename(char* filename, size_t max_len)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001c04:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001c08:	6018      	str	r0, [r3, #0]
 8001c0a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001c0e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001c12:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8001c14:	4b48      	ldr	r3, [pc, #288]	@ (8001d38 <_generate_log_filename+0x140>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d14a      	bne.n	8001cb2 <_generate_log_filename+0xba>
        file_counter = 1;
 8001c1c:	4b46      	ldr	r3, [pc, #280]	@ (8001d38 <_generate_log_filename+0x140>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 8001c22:	2301      	movs	r3, #1
 8001c24:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001c28:	e034      	b.n	8001c94 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 8001c2a:	4b44      	ldr	r3, [pc, #272]	@ (8001d3c <_generate_log_filename+0x144>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 8001c32:	f107 0008 	add.w	r0, r7, #8
 8001c36:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001c3a:	4a41      	ldr	r2, [pc, #260]	@ (8001d40 <_generate_log_filename+0x148>)
 8001c3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c40:	f015 fc32 	bl	80174a8 <sniprintf>
 8001c44:	e008      	b.n	8001c58 <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 8001c46:	f107 0008 	add.w	r0, r7, #8
 8001c4a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001c4e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d44 <_generate_log_filename+0x14c>)
 8001c50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c54:	f015 fc28 	bl	80174a8 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 8001c58:	f107 0108 	add.w	r1, r7, #8
 8001c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c60:	2201      	movs	r2, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f011 fd34 	bl	80136d0 <f_open>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
            if (test_result == FR_OK) {
 8001c6e:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d115      	bne.n	8001ca2 <_generate_log_filename+0xaa>
                f_close(&test_file);
 8001c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f012 f8a6 	bl	8013dcc <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 8001c80:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001c84:	3301      	adds	r3, #1
 8001c86:	4a2c      	ldr	r2, [pc, #176]	@ (8001d38 <_generate_log_filename+0x140>)
 8001c88:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 8001c8a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001c94:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001c98:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	ddc4      	ble.n	8001c2a <_generate_log_filename+0x32>
 8001ca0:	e000      	b.n	8001ca4 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 8001ca2:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 8001ca4:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <_generate_log_filename+0x140>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4927      	ldr	r1, [pc, #156]	@ (8001d48 <_generate_log_filename+0x150>)
 8001cac:	2000      	movs	r0, #0
 8001cae:	f003 fb31 	bl	8005314 <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <_generate_log_filename+0x144>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d011      	beq.n	8001cde <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 8001cba:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <_generate_log_filename+0x140>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001cc2:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8001cc6:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001cca:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001cce:	4a1c      	ldr	r2, [pc, #112]	@ (8001d40 <_generate_log_filename+0x148>)
 8001cd0:	6809      	ldr	r1, [r1, #0]
 8001cd2:	6800      	ldr	r0, [r0, #0]
 8001cd4:	f015 fbe8 	bl	80174a8 <sniprintf>
 8001cd8:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8001cdc:	e010      	b.n	8001d00 <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 8001cde:	4b16      	ldr	r3, [pc, #88]	@ (8001d38 <_generate_log_filename+0x140>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001ce6:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8001cea:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001cee:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001cf2:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <_generate_log_filename+0x14c>)
 8001cf4:	6809      	ldr	r1, [r1, #0]
 8001cf6:	6800      	ldr	r0, [r0, #0]
 8001cf8:	f015 fbd6 	bl	80174a8 <sniprintf>
 8001cfc:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
    }
    
    file_counter++;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	@ (8001d38 <_generate_log_filename+0x140>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	4a0c      	ldr	r2, [pc, #48]	@ (8001d38 <_generate_log_filename+0x140>)
 8001d08:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 8001d0a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db08      	blt.n	8001d24 <_generate_log_filename+0x12c>
 8001d12:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001d16:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001d1a:	f5a2 7250 	sub.w	r2, r2, #832	@ 0x340
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d802      	bhi.n	8001d2a <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	e000      	b.n	8001d2c <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	2000164c 	.word	0x2000164c
 8001d3c:	20000344 	.word	0x20000344
 8001d40:	08019ea4 	.word	0x08019ea4
 8001d44:	08019ebc 	.word	0x08019ebc
 8001d48:	08019ecc 	.word	0x08019ecc

08001d4c <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
	...

08001d80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4a07      	ldr	r2, [pc, #28]	@ (8001dac <vApplicationGetIdleTaskMemory+0x2c>)
 8001d90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	4a06      	ldr	r2, [pc, #24]	@ (8001db0 <vApplicationGetIdleTaskMemory+0x30>)
 8001d96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2280      	movs	r2, #128	@ 0x80
 8001d9c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20001650 	.word	0x20001650
 8001db0:	200016a8 	.word	0x200016a8

08001db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	b09a      	sub	sp, #104	@ 0x68
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001dba:	4b96      	ldr	r3, [pc, #600]	@ (8002014 <main+0x260>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a94      	ldr	r2, [pc, #592]	@ (8002014 <main+0x260>)
 8001dc2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc4:	f004 f84f 	bl	8005e66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc8:	f000 f966 	bl	8002098 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001dcc:	f000 f9d6 	bl	800217c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dd0:	f001 f9a0 	bl	8003114 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001dd4:	f001 ff92 	bl	8003cfc <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001dd8:	f001 ffb6 	bl	8003d48 <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001ddc:	f000 fa00 	bl	80021e0 <MX_ADC3_Init>
  MX_CRC_Init();
 8001de0:	f000 fa50 	bl	8002284 <MX_CRC_Init>
  MX_DCMI_Init();
 8001de4:	f000 fa70 	bl	80022c8 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8001de8:	f000 faa2 	bl	8002330 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001dec:	f000 fad2 	bl	8002394 <MX_ETH_Init>
  MX_FMC_Init();
 8001df0:	f001 f940 	bl	8003074 <MX_FMC_Init>
  MX_I2C1_Init();
 8001df4:	f000 fb1c 	bl	8002430 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001df8:	f000 fb5a 	bl	80024b0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001dfc:	f000 fb98 	bl	8002530 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001e00:	f000 fc18 	bl	8002634 <MX_QUADSPI_Init>
  MX_RTC_Init();
 8001e04:	f000 fc42 	bl	800268c <MX_RTC_Init>
  MX_SAI2_Init();
 8001e08:	f000 fce4 	bl	80027d4 <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001e0c:	f000 fd8a 	bl	8002924 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001e10:	f000 fdb6 	bl	8002980 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 8001e14:	f000 fde4 	bl	80029e0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001e18:	f000 fe20 	bl	8002a5c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001e1c:	f000 feca 	bl	8002bb4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e20:	f000 ff3e 	bl	8002ca0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001e24:	f000 ffb4 	bl	8002d90 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001e28:	f001 f82a 	bl	8002e80 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001e2c:	f001 f87c 	bl	8002f28 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001e30:	f001 f8c0 	bl	8002fb4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001e34:	f001 f8ee 	bl	8003014 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8001e38:	4b77      	ldr	r3, [pc, #476]	@ (8002018 <main+0x264>)
 8001e3a:	4a78      	ldr	r2, [pc, #480]	@ (800201c <main+0x268>)
 8001e3c:	675a      	str	r2, [r3, #116]	@ 0x74
 8001e3e:	4b77      	ldr	r3, [pc, #476]	@ (800201c <main+0x268>)
 8001e40:	4a75      	ldr	r2, [pc, #468]	@ (8002018 <main+0x264>)
 8001e42:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001e44:	4b74      	ldr	r3, [pc, #464]	@ (8002018 <main+0x264>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b73      	ldr	r3, [pc, #460]	@ (8002018 <main+0x264>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0210 	orr.w	r2, r2, #16
 8001e52:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 8001e54:	f00f fc36 	bl	80116c4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	4871      	ldr	r0, [pc, #452]	@ (8002020 <main+0x26c>)
 8001e5c:	f003 f9fa 	bl	8005254 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8001e60:	4b6c      	ldr	r3, [pc, #432]	@ (8002014 <main+0x260>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	496f      	ldr	r1, [pc, #444]	@ (8002024 <main+0x270>)
 8001e68:	2001      	movs	r0, #1
 8001e6a:	f003 fa53 	bl	8005314 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8001e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002028 <main+0x274>)
 8001e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <main+0xce>
 8001e7a:	496c      	ldr	r1, [pc, #432]	@ (800202c <main+0x278>)
 8001e7c:	2002      	movs	r0, #2
 8001e7e:	f003 fa49 	bl	8005314 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 8001e82:	4b69      	ldr	r3, [pc, #420]	@ (8002028 <main+0x274>)
 8001e84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <main+0xe2>
 8001e8e:	4968      	ldr	r1, [pc, #416]	@ (8002030 <main+0x27c>)
 8001e90:	2002      	movs	r0, #2
 8001e92:	f003 fa3f 	bl	8005314 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 8001e96:	4b64      	ldr	r3, [pc, #400]	@ (8002028 <main+0x274>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e9a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <main+0xf6>
 8001ea2:	4964      	ldr	r1, [pc, #400]	@ (8002034 <main+0x280>)
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f003 fa35 	bl	8005314 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 8001eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002028 <main+0x274>)
 8001eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <main+0x10a>
 8001eb6:	4960      	ldr	r1, [pc, #384]	@ (8002038 <main+0x284>)
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f003 fa2b 	bl	8005314 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 8001ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8002028 <main+0x274>)
 8001ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ec2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <main+0x11e>
 8001eca:	495c      	ldr	r1, [pc, #368]	@ (800203c <main+0x288>)
 8001ecc:	2002      	movs	r0, #2
 8001ece:	f003 fa21 	bl	8005314 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 8001ed2:	4b55      	ldr	r3, [pc, #340]	@ (8002028 <main+0x274>)
 8001ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <main+0x132>
 8001ede:	4958      	ldr	r1, [pc, #352]	@ (8002040 <main+0x28c>)
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f003 fa17 	bl	8005314 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 8001ee6:	4b50      	ldr	r3, [pc, #320]	@ (8002028 <main+0x274>)
 8001ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da03      	bge.n	8001ef6 <main+0x142>
 8001eee:	4955      	ldr	r1, [pc, #340]	@ (8002044 <main+0x290>)
 8001ef0:	2002      	movs	r0, #2
 8001ef2:	f003 fa0f 	bl	8005314 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8002028 <main+0x274>)
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001efa:	4a4b      	ldr	r2, [pc, #300]	@ (8002028 <main+0x274>)
 8001efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f00:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 8001f02:	4951      	ldr	r1, [pc, #324]	@ (8002048 <main+0x294>)
 8001f04:	2001      	movs	r0, #1
 8001f06:	f003 fa05 	bl	8005314 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8001f0a:	4b50      	ldr	r3, [pc, #320]	@ (800204c <main+0x298>)
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 8001f12:	494f      	ldr	r1, [pc, #316]	@ (8002050 <main+0x29c>)
 8001f14:	2001      	movs	r0, #1
 8001f16:	f003 f9fd 	bl	8005314 <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8001f1a:	494e      	ldr	r1, [pc, #312]	@ (8002054 <main+0x2a0>)
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f003 f9f9 	bl	8005314 <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001f22:	4b3d      	ldr	r3, [pc, #244]	@ (8002018 <main+0x264>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b3b      	ldr	r3, [pc, #236]	@ (8002018 <main+0x264>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0210 	orr.w	r2, r2, #16
 8001f30:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 8001f32:	4949      	ldr	r1, [pc, #292]	@ (8002058 <main+0x2a4>)
 8001f34:	2001      	movs	r0, #1
 8001f36:	f003 f9ed 	bl	8005314 <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8001f3a:	2388      	movs	r3, #136	@ 0x88
 8001f3c:	220a      	movs	r2, #10
 8001f3e:	4947      	ldr	r1, [pc, #284]	@ (800205c <main+0x2a8>)
 8001f40:	2001      	movs	r0, #1
 8001f42:	f003 f9e7 	bl	8005314 <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 8001f46:	4b46      	ldr	r3, [pc, #280]	@ (8002060 <main+0x2ac>)
 8001f48:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001f4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 8001f52:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f56:	2100      	movs	r1, #0
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f012 fd93 	bl	8014a84 <osMessageCreate>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4a40      	ldr	r2, [pc, #256]	@ (8002064 <main+0x2b0>)
 8001f62:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 8001f64:	4b3f      	ldr	r3, [pc, #252]	@ (8002064 <main+0x2b0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d104      	bne.n	8001f76 <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8001f6c:	493e      	ldr	r1, [pc, #248]	@ (8002068 <main+0x2b4>)
 8001f6e:	2003      	movs	r0, #3
 8001f70:	f003 f9d0 	bl	8005314 <LOGGER_SendFormatted>
 8001f74:	e003      	b.n	8001f7e <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 8001f76:	493d      	ldr	r1, [pc, #244]	@ (800206c <main+0x2b8>)
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f003 f9cb 	bl	8005314 <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 8001f7e:	4b3c      	ldr	r3, [pc, #240]	@ (8002070 <main+0x2bc>)
 8001f80:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001f84:	461d      	mov	r5, r3
 8001f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001f92:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001f96:	2100      	movs	r1, #0
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f012 fd13 	bl	80149c4 <osThreadCreate>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	4a34      	ldr	r2, [pc, #208]	@ (8002074 <main+0x2c0>)
 8001fa2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 8001fa4:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <main+0x2c4>)
 8001fa6:	f107 0420 	add.w	r4, r7, #32
 8001faa:	461d      	mov	r5, r3
 8001fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 8001fb8:	f107 0320 	add.w	r3, r7, #32
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f012 fd00 	bl	80149c4 <osThreadCreate>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800207c <main+0x2c8>)
 8001fc8:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 8001fca:	492d      	ldr	r1, [pc, #180]	@ (8002080 <main+0x2cc>)
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f003 f9a1 	bl	8005314 <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 8001fd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002084 <main+0x2d0>)
 8001fd4:	1d3c      	adds	r4, r7, #4
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fdc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fe0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 8001fe4:	1d3b      	adds	r3, r7, #4
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f012 fceb 	bl	80149c4 <osThreadCreate>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4a25      	ldr	r2, [pc, #148]	@ (8002088 <main+0x2d4>)
 8001ff2:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 8001ff4:	4925      	ldr	r1, [pc, #148]	@ (800208c <main+0x2d8>)
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f003 f98c 	bl	8005314 <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8001ffc:	4924      	ldr	r1, [pc, #144]	@ (8002090 <main+0x2dc>)
 8001ffe:	2001      	movs	r0, #1
 8002000:	f003 f988 	bl	8005314 <LOGGER_SendFormatted>
  osKernelStart();
 8002004:	f012 fcbb 	bl	801497e <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8002008:	4922      	ldr	r1, [pc, #136]	@ (8002094 <main+0x2e0>)
 800200a:	2003      	movs	r0, #3
 800200c:	f003 f982 	bl	8005314 <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <main+0x25c>
 8002014:	2000240c 	.word	0x2000240c
 8002018:	200020d4 	.word	0x200020d4
 800201c:	200023ac 	.word	0x200023ac
 8002020:	08019f00 	.word	0x08019f00
 8002024:	08019f08 	.word	0x08019f08
 8002028:	40023800 	.word	0x40023800
 800202c:	08019f2c 	.word	0x08019f2c
 8002030:	08019f44 	.word	0x08019f44
 8002034:	08019f5c 	.word	0x08019f5c
 8002038:	08019f74 	.word	0x08019f74
 800203c:	08019f84 	.word	0x08019f84
 8002040:	08019f9c 	.word	0x08019f9c
 8002044:	08019fbc 	.word	0x08019fbc
 8002048:	08019fd4 	.word	0x08019fd4
 800204c:	20000014 	.word	0x20000014
 8002050:	0801a014 	.word	0x0801a014
 8002054:	0801a04c 	.word	0x0801a04c
 8002058:	0801a074 	.word	0x0801a074
 800205c:	0801a090 	.word	0x0801a090
 8002060:	0801a1e4 	.word	0x0801a1e4
 8002064:	2000219c 	.word	0x2000219c
 8002068:	0801a0cc 	.word	0x0801a0cc
 800206c:	0801a108 	.word	0x0801a108
 8002070:	0801a200 	.word	0x0801a200
 8002074:	20002190 	.word	0x20002190
 8002078:	0801a228 	.word	0x0801a228
 800207c:	20002194 	.word	0x20002194
 8002080:	0801a134 	.word	0x0801a134
 8002084:	0801a254 	.word	0x0801a254
 8002088:	20002198 	.word	0x20002198
 800208c:	0801a168 	.word	0x0801a168
 8002090:	0801a188 	.word	0x0801a188
 8002094:	0801a1ac 	.word	0x0801a1ac

08002098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b094      	sub	sp, #80	@ 0x50
 800209c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	2230      	movs	r2, #48	@ 0x30
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f015 fad6 	bl	8017658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020bc:	f008 f982 	bl	800a3c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002174 <SystemClock_Config+0xdc>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <SystemClock_Config+0xdc>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80020cc:	4b29      	ldr	r3, [pc, #164]	@ (8002174 <SystemClock_Config+0xdc>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d8:	4b27      	ldr	r3, [pc, #156]	@ (8002178 <SystemClock_Config+0xe0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a26      	ldr	r2, [pc, #152]	@ (8002178 <SystemClock_Config+0xe0>)
 80020de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <SystemClock_Config+0xe0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80020f0:	2309      	movs	r3, #9
 80020f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020fa:	2301      	movs	r3, #1
 80020fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fe:	2302      	movs	r3, #2
 8002100:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002102:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002108:	2319      	movs	r3, #25
 800210a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800210c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002110:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002112:	2302      	movs	r3, #2
 8002114:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002116:	2309      	movs	r3, #9
 8002118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211a:	f107 0320 	add.w	r3, r7, #32
 800211e:	4618      	mov	r0, r3
 8002120:	f008 fa72 	bl	800a608 <HAL_RCC_OscConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800212a:	f001 fde1 	bl	8003cf0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800212e:	f008 f959 	bl	800a3e4 <HAL_PWREx_EnableOverDrive>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002138:	f001 fdda 	bl	8003cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800213c:	230f      	movs	r3, #15
 800213e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002140:	2302      	movs	r3, #2
 8002142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002148:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800214c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800214e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002152:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	2106      	movs	r1, #6
 800215a:	4618      	mov	r0, r3
 800215c:	f008 fcf8 	bl	800ab50 <HAL_RCC_ClockConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002166:	f001 fdc3 	bl	8003cf0 <Error_Handler>
  }
}
 800216a:	bf00      	nop
 800216c:	3750      	adds	r7, #80	@ 0x50
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000

0800217c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b0a2      	sub	sp, #136	@ 0x88
 8002180:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2284      	movs	r2, #132	@ 0x84
 8002186:	2100      	movs	r1, #0
 8002188:	4618      	mov	r0, r3
 800218a:	f015 fa65 	bl	8017658 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 800218e:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <PeriphCommonClock_Config+0x60>)
 8002190:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002192:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002196:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002198:	2305      	movs	r3, #5
 800219a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800219c:	2302      	movs	r3, #2
 800219e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80021a0:	2303      	movs	r3, #3
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80021a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021ac:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80021ae:	2300      	movs	r3, #0
 80021b0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80021b2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80021b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	4618      	mov	r0, r3
 80021c4:	f008 fedc 	bl	800af80 <HAL_RCCEx_PeriphCLKConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80021ce:	f001 fd8f 	bl	8003cf0 <Error_Handler>
  }
}
 80021d2:	bf00      	nop
 80021d4:	3788      	adds	r7, #136	@ 0x88
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	00b00008 	.word	0x00b00008

080021e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80021f2:	4b21      	ldr	r3, [pc, #132]	@ (8002278 <MX_ADC3_Init+0x98>)
 80021f4:	4a21      	ldr	r2, [pc, #132]	@ (800227c <MX_ADC3_Init+0x9c>)
 80021f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80021f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <MX_ADC3_Init+0x98>)
 80021fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80021fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002200:	4b1d      	ldr	r3, [pc, #116]	@ (8002278 <MX_ADC3_Init+0x98>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002206:	4b1c      	ldr	r3, [pc, #112]	@ (8002278 <MX_ADC3_Init+0x98>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800220c:	4b1a      	ldr	r3, [pc, #104]	@ (8002278 <MX_ADC3_Init+0x98>)
 800220e:	2200      	movs	r2, #0
 8002210:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002212:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <MX_ADC3_Init+0x98>)
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800221a:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <MX_ADC3_Init+0x98>)
 800221c:	2200      	movs	r2, #0
 800221e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002220:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <MX_ADC3_Init+0x98>)
 8002222:	4a17      	ldr	r2, [pc, #92]	@ (8002280 <MX_ADC3_Init+0xa0>)
 8002224:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <MX_ADC3_Init+0x98>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <MX_ADC3_Init+0x98>)
 800222e:	2201      	movs	r2, #1
 8002230:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_ADC3_Init+0x98>)
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800223a:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <MX_ADC3_Init+0x98>)
 800223c:	2201      	movs	r2, #1
 800223e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002240:	480d      	ldr	r0, [pc, #52]	@ (8002278 <MX_ADC3_Init+0x98>)
 8002242:	f003 fe61 	bl	8005f08 <HAL_ADC_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800224c:	f001 fd50 	bl	8003cf0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002250:	2304      	movs	r3, #4
 8002252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002254:	2301      	movs	r3, #1
 8002256:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	@ (8002278 <MX_ADC3_Init+0x98>)
 8002262:	f003 fe95 	bl	8005f90 <HAL_ADC_ConfigChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800226c:	f001 fd40 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200018e0 	.word	0x200018e0
 800227c:	40012200 	.word	0x40012200
 8002280:	0f000001 	.word	0x0f000001

08002284 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002288:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <MX_CRC_Init+0x3c>)
 800228a:	4a0e      	ldr	r2, [pc, #56]	@ (80022c4 <MX_CRC_Init+0x40>)
 800228c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <MX_CRC_Init+0x3c>)
 8002290:	2200      	movs	r2, #0
 8002292:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002294:	4b0a      	ldr	r3, [pc, #40]	@ (80022c0 <MX_CRC_Init+0x3c>)
 8002296:	2200      	movs	r2, #0
 8002298:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <MX_CRC_Init+0x3c>)
 800229c:	2200      	movs	r2, #0
 800229e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80022a0:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <MX_CRC_Init+0x3c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80022a6:	4b06      	ldr	r3, [pc, #24]	@ (80022c0 <MX_CRC_Init+0x3c>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <MX_CRC_Init+0x3c>)
 80022ae:	f004 f9a5 	bl	80065fc <HAL_CRC_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80022b8:	f001 fd1a 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20001928 	.word	0x20001928
 80022c4:	40023000 	.word	0x40023000

080022c8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80022cc:	4b16      	ldr	r3, [pc, #88]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022ce:	4a17      	ldr	r2, [pc, #92]	@ (800232c <MX_DCMI_Init+0x64>)
 80022d0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80022d8:	4b13      	ldr	r3, [pc, #76]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80022de:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80022ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80022f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80022f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <MX_DCMI_Init+0x60>)
 80022fe:	2200      	movs	r2, #0
 8002300:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002302:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <MX_DCMI_Init+0x60>)
 8002304:	2200      	movs	r2, #0
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002308:	4b07      	ldr	r3, [pc, #28]	@ (8002328 <MX_DCMI_Init+0x60>)
 800230a:	2200      	movs	r2, #0
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800230e:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <MX_DCMI_Init+0x60>)
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002314:	4804      	ldr	r0, [pc, #16]	@ (8002328 <MX_DCMI_Init+0x60>)
 8002316:	f004 fa63 	bl	80067e0 <HAL_DCMI_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002320:	f001 fce6 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	2000194c 	.word	0x2000194c
 800232c:	50050000 	.word	0x50050000

08002330 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002334:	4b15      	ldr	r3, [pc, #84]	@ (800238c <MX_DMA2D_Init+0x5c>)
 8002336:	4a16      	ldr	r2, [pc, #88]	@ (8002390 <MX_DMA2D_Init+0x60>)
 8002338:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800233a:	4b14      	ldr	r3, [pc, #80]	@ (800238c <MX_DMA2D_Init+0x5c>)
 800233c:	2200      	movs	r2, #0
 800233e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <MX_DMA2D_Init+0x5c>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002346:	4b11      	ldr	r3, [pc, #68]	@ (800238c <MX_DMA2D_Init+0x5c>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800234c:	4b0f      	ldr	r3, [pc, #60]	@ (800238c <MX_DMA2D_Init+0x5c>)
 800234e:	2200      	movs	r2, #0
 8002350:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002352:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <MX_DMA2D_Init+0x5c>)
 8002354:	2200      	movs	r2, #0
 8002356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002358:	4b0c      	ldr	r3, [pc, #48]	@ (800238c <MX_DMA2D_Init+0x5c>)
 800235a:	2200      	movs	r2, #0
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800235e:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <MX_DMA2D_Init+0x5c>)
 8002360:	2200      	movs	r2, #0
 8002362:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002364:	4809      	ldr	r0, [pc, #36]	@ (800238c <MX_DMA2D_Init+0x5c>)
 8002366:	f004 ff29 	bl	80071bc <HAL_DMA2D_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002370:	f001 fcbe 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002374:	2101      	movs	r1, #1
 8002376:	4805      	ldr	r0, [pc, #20]	@ (800238c <MX_DMA2D_Init+0x5c>)
 8002378:	f005 f87a 	bl	8007470 <HAL_DMA2D_ConfigLayer>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002382:	f001 fcb5 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000199c 	.word	0x2000199c
 8002390:	4002b000 	.word	0x4002b000

08002394 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <MX_ETH_Init+0x84>)
 800239a:	4a20      	ldr	r2, [pc, #128]	@ (800241c <MX_ETH_Init+0x88>)
 800239c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800239e:	4b20      	ldr	r3, [pc, #128]	@ (8002420 <MX_ETH_Init+0x8c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80023a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <MX_ETH_Init+0x8c>)
 80023a6:	2280      	movs	r2, #128	@ 0x80
 80023a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80023aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002420 <MX_ETH_Init+0x8c>)
 80023ac:	22e1      	movs	r2, #225	@ 0xe1
 80023ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80023b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002420 <MX_ETH_Init+0x8c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <MX_ETH_Init+0x8c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80023bc:	4b18      	ldr	r3, [pc, #96]	@ (8002420 <MX_ETH_Init+0x8c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <MX_ETH_Init+0x84>)
 80023c4:	4a16      	ldr	r2, [pc, #88]	@ (8002420 <MX_ETH_Init+0x8c>)
 80023c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80023c8:	4b13      	ldr	r3, [pc, #76]	@ (8002418 <MX_ETH_Init+0x84>)
 80023ca:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80023d0:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <MX_ETH_Init+0x84>)
 80023d2:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <MX_ETH_Init+0x90>)
 80023d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80023d6:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <MX_ETH_Init+0x84>)
 80023d8:	4a13      	ldr	r2, [pc, #76]	@ (8002428 <MX_ETH_Init+0x94>)
 80023da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80023dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002418 <MX_ETH_Init+0x84>)
 80023de:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80023e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80023e4:	480c      	ldr	r0, [pc, #48]	@ (8002418 <MX_ETH_Init+0x84>)
 80023e6:	f005 f8d5 	bl	8007594 <HAL_ETH_Init>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80023f0:	f001 fc7e 	bl	8003cf0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80023f4:	2238      	movs	r2, #56	@ 0x38
 80023f6:	2100      	movs	r1, #0
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <MX_ETH_Init+0x98>)
 80023fa:	f015 f92d 	bl	8017658 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <MX_ETH_Init+0x98>)
 8002400:	2221      	movs	r2, #33	@ 0x21
 8002402:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <MX_ETH_Init+0x98>)
 8002406:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800240a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800240c:	4b07      	ldr	r3, [pc, #28]	@ (800242c <MX_ETH_Init+0x98>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200019dc 	.word	0x200019dc
 800241c:	40028000 	.word	0x40028000
 8002420:	20002410 	.word	0x20002410
 8002424:	20000170 	.word	0x20000170
 8002428:	200000d0 	.word	0x200000d0
 800242c:	200018a8 	.word	0x200018a8

08002430 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002436:	4a1c      	ldr	r2, [pc, #112]	@ (80024a8 <MX_I2C1_Init+0x78>)
 8002438:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 800243a:	4b1a      	ldr	r3, [pc, #104]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800243c:	4a1b      	ldr	r2, [pc, #108]	@ (80024ac <MX_I2C1_Init+0x7c>)
 800243e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002440:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002448:	2201      	movs	r2, #1
 800244a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800244c:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002454:	2200      	movs	r2, #0
 8002456:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002458:	4b12      	ldr	r3, [pc, #72]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800245a:	2200      	movs	r2, #0
 800245c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002460:	2200      	movs	r2, #0
 8002462:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002464:	4b0f      	ldr	r3, [pc, #60]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800246a:	480e      	ldr	r0, [pc, #56]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800246c:	f007 fb64 	bl	8009b38 <HAL_I2C_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002476:	f001 fc3b 	bl	8003cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800247a:	2100      	movs	r1, #0
 800247c:	4809      	ldr	r0, [pc, #36]	@ (80024a4 <MX_I2C1_Init+0x74>)
 800247e:	f007 fbf7 	bl	8009c70 <HAL_I2CEx_ConfigAnalogFilter>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002488:	f001 fc32 	bl	8003cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800248c:	2100      	movs	r1, #0
 800248e:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <MX_I2C1_Init+0x74>)
 8002490:	f007 fc39 	bl	8009d06 <HAL_I2CEx_ConfigDigitalFilter>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800249a:	f001 fc29 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20001a8c 	.word	0x20001a8c
 80024a8:	40005400 	.word	0x40005400
 80024ac:	00c0eaff 	.word	0x00c0eaff

080024b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <MX_I2C3_Init+0x78>)
 80024b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024bc:	4a1b      	ldr	r2, [pc, #108]	@ (800252c <MX_I2C3_Init+0x7c>)
 80024be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80024c0:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024c6:	4b17      	ldr	r3, [pc, #92]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024cc:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80024d2:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024ea:	480e      	ldr	r0, [pc, #56]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024ec:	f007 fb24 	bl	8009b38 <HAL_I2C_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80024f6:	f001 fbfb 	bl	8003cf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024fa:	2100      	movs	r1, #0
 80024fc:	4809      	ldr	r0, [pc, #36]	@ (8002524 <MX_I2C3_Init+0x74>)
 80024fe:	f007 fbb7 	bl	8009c70 <HAL_I2CEx_ConfigAnalogFilter>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002508:	f001 fbf2 	bl	8003cf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800250c:	2100      	movs	r1, #0
 800250e:	4805      	ldr	r0, [pc, #20]	@ (8002524 <MX_I2C3_Init+0x74>)
 8002510:	f007 fbf9 	bl	8009d06 <HAL_I2CEx_ConfigDigitalFilter>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800251a:	f001 fbe9 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	20001ae0 	.word	0x20001ae0
 8002528:	40005c00 	.word	0x40005c00
 800252c:	00c0eaff 	.word	0x00c0eaff

08002530 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08e      	sub	sp, #56	@ 0x38
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2234      	movs	r2, #52	@ 0x34
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f015 f88b 	bl	8017658 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002542:	4b3a      	ldr	r3, [pc, #232]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002544:	4a3a      	ldr	r2, [pc, #232]	@ (8002630 <MX_LTDC_Init+0x100>)
 8002546:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002548:	4b38      	ldr	r3, [pc, #224]	@ (800262c <MX_LTDC_Init+0xfc>)
 800254a:	2200      	movs	r2, #0
 800254c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800254e:	4b37      	ldr	r3, [pc, #220]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002550:	2200      	movs	r2, #0
 8002552:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002554:	4b35      	ldr	r3, [pc, #212]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002556:	2200      	movs	r2, #0
 8002558:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800255a:	4b34      	ldr	r3, [pc, #208]	@ (800262c <MX_LTDC_Init+0xfc>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002560:	4b32      	ldr	r3, [pc, #200]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002562:	2228      	movs	r2, #40	@ 0x28
 8002564:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8002566:	4b31      	ldr	r3, [pc, #196]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002568:	2209      	movs	r2, #9
 800256a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800256c:	4b2f      	ldr	r3, [pc, #188]	@ (800262c <MX_LTDC_Init+0xfc>)
 800256e:	2235      	movs	r2, #53	@ 0x35
 8002570:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002572:	4b2e      	ldr	r3, [pc, #184]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002574:	220b      	movs	r2, #11
 8002576:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002578:	4b2c      	ldr	r3, [pc, #176]	@ (800262c <MX_LTDC_Init+0xfc>)
 800257a:	f240 2215 	movw	r2, #533	@ 0x215
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002580:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002582:	f240 121b 	movw	r2, #283	@ 0x11b
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8002588:	4b28      	ldr	r3, [pc, #160]	@ (800262c <MX_LTDC_Init+0xfc>)
 800258a:	f240 2235 	movw	r2, #565	@ 0x235
 800258e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002590:	4b26      	ldr	r3, [pc, #152]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002592:	f240 121d 	movw	r2, #285	@ 0x11d
 8002596:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <MX_LTDC_Init+0xfc>)
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80025a0:	4b22      	ldr	r3, [pc, #136]	@ (800262c <MX_LTDC_Init+0xfc>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <MX_LTDC_Init+0xfc>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80025b0:	481e      	ldr	r0, [pc, #120]	@ (800262c <MX_LTDC_Init+0xfc>)
 80025b2:	f007 fbf4 	bl	8009d9e <HAL_LTDC_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80025bc:	f001 fb98 	bl	8003cf0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80025c4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80025c8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80025ce:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80025d2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80025d4:	2302      	movs	r3, #2
 80025d6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80025d8:	23ff      	movs	r3, #255	@ 0xff
 80025da:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80025e0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025e4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80025e6:	2307      	movs	r3, #7
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80025ea:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 80025f0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80025f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 80025f6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80025fa:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	2200      	movs	r2, #0
 8002612:	4619      	mov	r1, r3
 8002614:	4805      	ldr	r0, [pc, #20]	@ (800262c <MX_LTDC_Init+0xfc>)
 8002616:	f007 fd21 	bl	800a05c <HAL_LTDC_ConfigLayer>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002620:	f001 fb66 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002624:	bf00      	nop
 8002626:	3738      	adds	r7, #56	@ 0x38
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20001b34 	.word	0x20001b34
 8002630:	40016800 	.word	0x40016800

08002634 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002638:	4b12      	ldr	r3, [pc, #72]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <MX_QUADSPI_Init+0x54>)
 800263c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 8002640:	2201      	movs	r2, #1
 8002642:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 8002646:	2204      	movs	r2, #4
 8002648:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 800264c:	2210      	movs	r2, #16
 800264e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 8002652:	2218      	movs	r2, #24
 8002654:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 8002658:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 800265c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800265e:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800266a:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002670:	4804      	ldr	r0, [pc, #16]	@ (8002684 <MX_QUADSPI_Init+0x50>)
 8002672:	f007 ff07 	bl	800a484 <HAL_QSPI_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 800267c:	f001 fb38 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20001bdc 	.word	0x20001bdc
 8002688:	a0001000 	.word	0xa0001000

0800268c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b090      	sub	sp, #64	@ 0x40
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80026a2:	2300      	movs	r3, #0
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80026a6:	463b      	mov	r3, r7
 80026a8:	2228      	movs	r2, #40	@ 0x28
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f014 ffd3 	bl	8017658 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026b2:	4b46      	ldr	r3, [pc, #280]	@ (80027cc <MX_RTC_Init+0x140>)
 80026b4:	4a46      	ldr	r2, [pc, #280]	@ (80027d0 <MX_RTC_Init+0x144>)
 80026b6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026b8:	4b44      	ldr	r3, [pc, #272]	@ (80027cc <MX_RTC_Init+0x140>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80026be:	4b43      	ldr	r3, [pc, #268]	@ (80027cc <MX_RTC_Init+0x140>)
 80026c0:	227f      	movs	r2, #127	@ 0x7f
 80026c2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80026c4:	4b41      	ldr	r3, [pc, #260]	@ (80027cc <MX_RTC_Init+0x140>)
 80026c6:	22ff      	movs	r2, #255	@ 0xff
 80026c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026ca:	4b40      	ldr	r3, [pc, #256]	@ (80027cc <MX_RTC_Init+0x140>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026d0:	4b3e      	ldr	r3, [pc, #248]	@ (80027cc <MX_RTC_Init+0x140>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026d6:	4b3d      	ldr	r3, [pc, #244]	@ (80027cc <MX_RTC_Init+0x140>)
 80026d8:	2200      	movs	r2, #0
 80026da:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026dc:	483b      	ldr	r0, [pc, #236]	@ (80027cc <MX_RTC_Init+0x140>)
 80026de:	f009 f97f 	bl	800b9e0 <HAL_RTC_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80026e8:	f001 fb02 	bl	8003cf0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026fe:	2300      	movs	r3, #0
 8002700:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002706:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800270a:	2201      	movs	r2, #1
 800270c:	4619      	mov	r1, r3
 800270e:	482f      	ldr	r0, [pc, #188]	@ (80027cc <MX_RTC_Init+0x140>)
 8002710:	f009 f9e8 	bl	800bae4 <HAL_RTC_SetTime>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800271a:	f001 fae9 	bl	8003cf0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002724:	2301      	movs	r3, #1
 8002726:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800272a:	2301      	movs	r3, #1
 800272c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002736:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800273a:	2201      	movs	r2, #1
 800273c:	4619      	mov	r1, r3
 800273e:	4823      	ldr	r0, [pc, #140]	@ (80027cc <MX_RTC_Init+0x140>)
 8002740:	f009 fa6a 	bl	800bc18 <HAL_RTC_SetDate>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800274a:	f001 fad1 	bl	8003cf0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800274e:	2300      	movs	r3, #0
 8002750:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002752:	2300      	movs	r3, #0
 8002754:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002756:	2300      	movs	r3, #0
 8002758:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800276a:	2300      	movs	r3, #0
 800276c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002772:	2301      	movs	r3, #1
 8002774:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800277e:	463b      	mov	r3, r7
 8002780:	2201      	movs	r2, #1
 8002782:	4619      	mov	r1, r3
 8002784:	4811      	ldr	r0, [pc, #68]	@ (80027cc <MX_RTC_Init+0x140>)
 8002786:	f009 facb 	bl	800bd20 <HAL_RTC_SetAlarm>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002790:	f001 faae 	bl	8003cf0 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002794:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002798:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	2201      	movs	r2, #1
 800279e:	4619      	mov	r1, r3
 80027a0:	480a      	ldr	r0, [pc, #40]	@ (80027cc <MX_RTC_Init+0x140>)
 80027a2:	f009 fabd 	bl	800bd20 <HAL_RTC_SetAlarm>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80027ac:	f001 faa0 	bl	8003cf0 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80027b0:	2202      	movs	r2, #2
 80027b2:	2100      	movs	r1, #0
 80027b4:	4805      	ldr	r0, [pc, #20]	@ (80027cc <MX_RTC_Init+0x140>)
 80027b6:	f009 fc7d 	bl	800c0b4 <HAL_RTCEx_SetTimeStamp>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80027c0:	f001 fa96 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80027c4:	bf00      	nop
 80027c6:	3740      	adds	r7, #64	@ 0x40
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20001c28 	.word	0x20001c28
 80027d0:	40002800 	.word	0x40002800

080027d4 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80027d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002910 <MX_SAI2_Init+0x13c>)
 80027da:	4a4e      	ldr	r2, [pc, #312]	@ (8002914 <MX_SAI2_Init+0x140>)
 80027dc:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80027de:	4b4c      	ldr	r3, [pc, #304]	@ (8002910 <MX_SAI2_Init+0x13c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80027e4:	4b4a      	ldr	r3, [pc, #296]	@ (8002910 <MX_SAI2_Init+0x13c>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80027ea:	4b49      	ldr	r3, [pc, #292]	@ (8002910 <MX_SAI2_Init+0x13c>)
 80027ec:	2240      	movs	r2, #64	@ 0x40
 80027ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80027f0:	4b47      	ldr	r3, [pc, #284]	@ (8002910 <MX_SAI2_Init+0x13c>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80027f6:	4b46      	ldr	r3, [pc, #280]	@ (8002910 <MX_SAI2_Init+0x13c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80027fc:	4b44      	ldr	r3, [pc, #272]	@ (8002910 <MX_SAI2_Init+0x13c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002802:	4b43      	ldr	r3, [pc, #268]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002808:	4b41      	ldr	r3, [pc, #260]	@ (8002910 <MX_SAI2_Init+0x13c>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800280e:	4b40      	ldr	r3, [pc, #256]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002810:	2200      	movs	r2, #0
 8002812:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002814:	4b3e      	ldr	r3, [pc, #248]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002816:	4a40      	ldr	r2, [pc, #256]	@ (8002918 <MX_SAI2_Init+0x144>)
 8002818:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800281a:	4b3d      	ldr	r3, [pc, #244]	@ (8002910 <MX_SAI2_Init+0x13c>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002820:	4b3b      	ldr	r3, [pc, #236]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002822:	2200      	movs	r2, #0
 8002824:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002826:	4b3a      	ldr	r3, [pc, #232]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002828:	2200      	movs	r2, #0
 800282a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800282c:	4b38      	ldr	r3, [pc, #224]	@ (8002910 <MX_SAI2_Init+0x13c>)
 800282e:	2200      	movs	r2, #0
 8002830:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002832:	4b37      	ldr	r3, [pc, #220]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002834:	2208      	movs	r2, #8
 8002836:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002838:	4b35      	ldr	r3, [pc, #212]	@ (8002910 <MX_SAI2_Init+0x13c>)
 800283a:	2201      	movs	r2, #1
 800283c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800283e:	4b34      	ldr	r3, [pc, #208]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002840:	2200      	movs	r2, #0
 8002842:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002844:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002846:	2200      	movs	r2, #0
 8002848:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800284a:	4b31      	ldr	r3, [pc, #196]	@ (8002910 <MX_SAI2_Init+0x13c>)
 800284c:	2200      	movs	r2, #0
 800284e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002850:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002852:	2200      	movs	r2, #0
 8002854:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002856:	4b2e      	ldr	r3, [pc, #184]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002858:	2200      	movs	r2, #0
 800285a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800285c:	4b2c      	ldr	r3, [pc, #176]	@ (8002910 <MX_SAI2_Init+0x13c>)
 800285e:	2201      	movs	r2, #1
 8002860:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002862:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <MX_SAI2_Init+0x13c>)
 8002864:	2200      	movs	r2, #0
 8002866:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002868:	4829      	ldr	r0, [pc, #164]	@ (8002910 <MX_SAI2_Init+0x13c>)
 800286a:	f009 fc8b 	bl	800c184 <HAL_SAI_Init>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002874:	f001 fa3c 	bl	8003cf0 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002878:	4b28      	ldr	r3, [pc, #160]	@ (800291c <MX_SAI2_Init+0x148>)
 800287a:	4a29      	ldr	r2, [pc, #164]	@ (8002920 <MX_SAI2_Init+0x14c>)
 800287c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800287e:	4b27      	ldr	r3, [pc, #156]	@ (800291c <MX_SAI2_Init+0x148>)
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002884:	4b25      	ldr	r3, [pc, #148]	@ (800291c <MX_SAI2_Init+0x148>)
 8002886:	2203      	movs	r2, #3
 8002888:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 800288a:	4b24      	ldr	r3, [pc, #144]	@ (800291c <MX_SAI2_Init+0x148>)
 800288c:	2240      	movs	r2, #64	@ 0x40
 800288e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002890:	4b22      	ldr	r3, [pc, #136]	@ (800291c <MX_SAI2_Init+0x148>)
 8002892:	2200      	movs	r2, #0
 8002894:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002896:	4b21      	ldr	r3, [pc, #132]	@ (800291c <MX_SAI2_Init+0x148>)
 8002898:	2200      	movs	r2, #0
 800289a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800289c:	4b1f      	ldr	r3, [pc, #124]	@ (800291c <MX_SAI2_Init+0x148>)
 800289e:	2201      	movs	r2, #1
 80028a0:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <MX_SAI2_Init+0x148>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80028a8:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <MX_SAI2_Init+0x148>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80028ae:	4b1b      	ldr	r3, [pc, #108]	@ (800291c <MX_SAI2_Init+0x148>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80028b4:	4b19      	ldr	r3, [pc, #100]	@ (800291c <MX_SAI2_Init+0x148>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80028ba:	4b18      	ldr	r3, [pc, #96]	@ (800291c <MX_SAI2_Init+0x148>)
 80028bc:	2200      	movs	r2, #0
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <MX_SAI2_Init+0x148>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <MX_SAI2_Init+0x148>)
 80028c8:	2208      	movs	r2, #8
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <MX_SAI2_Init+0x148>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80028d2:	4b12      	ldr	r3, [pc, #72]	@ (800291c <MX_SAI2_Init+0x148>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80028d8:	4b10      	ldr	r3, [pc, #64]	@ (800291c <MX_SAI2_Init+0x148>)
 80028da:	2200      	movs	r2, #0
 80028dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80028de:	4b0f      	ldr	r3, [pc, #60]	@ (800291c <MX_SAI2_Init+0x148>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80028e4:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <MX_SAI2_Init+0x148>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80028ea:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <MX_SAI2_Init+0x148>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <MX_SAI2_Init+0x148>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80028f6:	4b09      	ldr	r3, [pc, #36]	@ (800291c <MX_SAI2_Init+0x148>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80028fc:	4807      	ldr	r0, [pc, #28]	@ (800291c <MX_SAI2_Init+0x148>)
 80028fe:	f009 fc41 	bl	800c184 <HAL_SAI_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002908:	f001 f9f2 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20001c48 	.word	0x20001c48
 8002914:	40015c04 	.word	0x40015c04
 8002918:	0002ee00 	.word	0x0002ee00
 800291c:	20001ccc 	.word	0x20001ccc
 8002920:	40015c24 	.word	0x40015c24

08002924 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800292a:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <MX_SDMMC1_SD_Init+0x54>)
 800292c:	4a13      	ldr	r2, [pc, #76]	@ (800297c <MX_SDMMC1_SD_Init+0x58>)
 800292e:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <MX_SDMMC1_SD_Init+0x54>)
 8002932:	2200      	movs	r2, #0
 8002934:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002936:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <MX_SDMMC1_SD_Init+0x54>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800293c:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <MX_SDMMC1_SD_Init+0x54>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 8002942:	4b0d      	ldr	r3, [pc, #52]	@ (8002978 <MX_SDMMC1_SD_Init+0x54>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <MX_SDMMC1_SD_Init+0x54>)
 800294a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800294e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <MX_SDMMC1_SD_Init+0x54>)
 8002952:	2208      	movs	r2, #8
 8002954:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002956:	4808      	ldr	r0, [pc, #32]	@ (8002978 <MX_SDMMC1_SD_Init+0x54>)
 8002958:	f009 fdca 	bl	800c4f0 <HAL_SD_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 8002962:	f001 f9c5 	bl	8003cf0 <Error_Handler>
  }
  
  // BSP 초기화도 호출 (FatFs 호환성을 위해)
  uint8_t bsp_result = BSP_SD_Init();
 8002966:	f00e fec7 	bl	80116f8 <BSP_SD_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
    // Error_Handler() 호출하지 않음
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20001d50 	.word	0x20001d50
 800297c:	40012c00 	.word	0x40012c00

08002980 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002984:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 8002986:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800298a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 800298e:	2200      	movs	r2, #0
 8002990:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002998:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 800299e:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80029a4:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80029aa:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80029b0:	4b0a      	ldr	r3, [pc, #40]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80029b6:	4b09      	ldr	r3, [pc, #36]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80029bc:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80029c2:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80029c8:	4804      	ldr	r0, [pc, #16]	@ (80029dc <MX_SPDIFRX_Init+0x5c>)
 80029ca:	f00a ff51 	bl	800d870 <HAL_SPDIFRX_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80029d4:	f001 f98c 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20001dd4 	.word	0x20001dd4

080029e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <MX_SPI2_Init+0x74>)
 80029e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <MX_SPI2_Init+0x78>)
 80029e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80029ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <MX_SPI2_Init+0x74>)
 80029ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80029f2:	4b18      	ldr	r3, [pc, #96]	@ (8002a54 <MX_SPI2_Init+0x74>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80029f8:	4b16      	ldr	r3, [pc, #88]	@ (8002a54 <MX_SPI2_Init+0x74>)
 80029fa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80029fe:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a00:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a06:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002a0c:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a12:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a20:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a26:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a2e:	2207      	movs	r2, #7
 8002a30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a32:	4b08      	ldr	r3, [pc, #32]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002a3e:	4805      	ldr	r0, [pc, #20]	@ (8002a54 <MX_SPI2_Init+0x74>)
 8002a40:	f00a ff72 	bl	800d928 <HAL_SPI_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002a4a:	f001 f951 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20001e20 	.word	0x20001e20
 8002a58:	40003800 	.word	0x40003800

08002a5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b09a      	sub	sp, #104	@ 0x68
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a62:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
 8002a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a7c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
 8002a8c:	615a      	str	r2, [r3, #20]
 8002a8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a90:	1d3b      	adds	r3, r7, #4
 8002a92:	222c      	movs	r2, #44	@ 0x2c
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f014 fdde 	bl	8017658 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a9c:	4b43      	ldr	r3, [pc, #268]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002a9e:	4a44      	ldr	r2, [pc, #272]	@ (8002bb0 <MX_TIM1_Init+0x154>)
 8002aa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002aa2:	4b42      	ldr	r3, [pc, #264]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa8:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002aae:	4b3f      	ldr	r3, [pc, #252]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002abc:	4b3b      	ldr	r3, [pc, #236]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac2:	4b3a      	ldr	r3, [pc, #232]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ac8:	4838      	ldr	r0, [pc, #224]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002aca:	f00a ffd8 	bl	800da7e <HAL_TIM_Base_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002ad4:	f001 f90c 	bl	8003cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002adc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ade:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4831      	ldr	r0, [pc, #196]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002ae6:	f00b fb0b 	bl	800e100 <HAL_TIM_ConfigClockSource>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002af0:	f001 f8fe 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002af4:	482d      	ldr	r0, [pc, #180]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002af6:	f00b f891 	bl	800dc1c <HAL_TIM_PWM_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002b00:	f001 f8f6 	bl	8003cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b04:	2300      	movs	r3, #0
 8002b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b14:	4619      	mov	r1, r3
 8002b16:	4825      	ldr	r0, [pc, #148]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002b18:	f00b ff82 	bl	800ea20 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002b22:	f001 f8e5 	bl	8003cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b26:	2360      	movs	r3, #96	@ 0x60
 8002b28:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b32:	2300      	movs	r3, #0
 8002b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b36:	2300      	movs	r3, #0
 8002b38:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b46:	2200      	movs	r2, #0
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4818      	ldr	r0, [pc, #96]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002b4c:	f00b f9c4 	bl	800ded8 <HAL_TIM_PWM_ConfigChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002b56:	f001 f8cb 	bl	8003cf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b7c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4807      	ldr	r0, [pc, #28]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002b90:	f00b ffd4 	bl	800eb3c <HAL_TIMEx_ConfigBreakDeadTime>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002b9a:	f001 f8a9 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b9e:	4803      	ldr	r0, [pc, #12]	@ (8002bac <MX_TIM1_Init+0x150>)
 8002ba0:	f001 ff1a 	bl	80049d8 <HAL_TIM_MspPostInit>

}
 8002ba4:	bf00      	nop
 8002ba6:	3768      	adds	r7, #104	@ 0x68
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20001e84 	.word	0x20001e84
 8002bb0:	40010000 	.word	0x40010000

08002bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08e      	sub	sp, #56	@ 0x38
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bd4:	463b      	mov	r3, r7
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	615a      	str	r2, [r3, #20]
 8002be4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002be6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002be8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002bee:	4b2b      	ldr	r3, [pc, #172]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf4:	4b29      	ldr	r3, [pc, #164]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002bfa:	4b28      	ldr	r3, [pc, #160]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002c00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c02:	4b26      	ldr	r3, [pc, #152]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c08:	4b24      	ldr	r3, [pc, #144]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c0e:	4823      	ldr	r0, [pc, #140]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002c10:	f00a ff35 	bl	800da7e <HAL_TIM_Base_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002c1a:	f001 f869 	bl	8003cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c28:	4619      	mov	r1, r3
 8002c2a:	481c      	ldr	r0, [pc, #112]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002c2c:	f00b fa68 	bl	800e100 <HAL_TIM_ConfigClockSource>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002c36:	f001 f85b 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002c3a:	4818      	ldr	r0, [pc, #96]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002c3c:	f00a ffee 	bl	800dc1c <HAL_TIM_PWM_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002c46:	f001 f853 	bl	8003cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c52:	f107 031c 	add.w	r3, r7, #28
 8002c56:	4619      	mov	r1, r3
 8002c58:	4810      	ldr	r0, [pc, #64]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002c5a:	f00b fee1 	bl	800ea20 <HAL_TIMEx_MasterConfigSynchronization>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002c64:	f001 f844 	bl	8003cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c68:	2360      	movs	r3, #96	@ 0x60
 8002c6a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c78:	463b      	mov	r3, r7
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4807      	ldr	r0, [pc, #28]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002c80:	f00b f92a 	bl	800ded8 <HAL_TIM_PWM_ConfigChannel>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002c8a:	f001 f831 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c8e:	4803      	ldr	r0, [pc, #12]	@ (8002c9c <MX_TIM2_Init+0xe8>)
 8002c90:	f001 fea2 	bl	80049d8 <HAL_TIM_MspPostInit>

}
 8002c94:	bf00      	nop
 8002c96:	3738      	adds	r7, #56	@ 0x38
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20001ed0 	.word	0x20001ed0

08002ca0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08e      	sub	sp, #56	@ 0x38
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ca6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
 8002cb0:	609a      	str	r2, [r3, #8]
 8002cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cc0:	463b      	mov	r3, r7
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	60da      	str	r2, [r3, #12]
 8002ccc:	611a      	str	r2, [r3, #16]
 8002cce:	615a      	str	r2, [r3, #20]
 8002cd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <MX_TIM3_Init+0xec>)
 8002cd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cde:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002ce4:	4b28      	ldr	r3, [pc, #160]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cec:	4b26      	ldr	r3, [pc, #152]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cf2:	4b25      	ldr	r3, [pc, #148]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cf8:	4823      	ldr	r0, [pc, #140]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002cfa:	f00a fec0 	bl	800da7e <HAL_TIM_Base_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002d04:	f000 fff4 	bl	8003cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002d0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d12:	4619      	mov	r1, r3
 8002d14:	481c      	ldr	r0, [pc, #112]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002d16:	f00b f9f3 	bl	800e100 <HAL_TIM_ConfigClockSource>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002d20:	f000 ffe6 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002d24:	4818      	ldr	r0, [pc, #96]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002d26:	f00a ff79 	bl	800dc1c <HAL_TIM_PWM_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002d30:	f000 ffde 	bl	8003cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	4811      	ldr	r0, [pc, #68]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002d44:	f00b fe6c 	bl	800ea20 <HAL_TIMEx_MasterConfigSynchronization>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002d4e:	f000 ffcf 	bl	8003cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d52:	2360      	movs	r3, #96	@ 0x60
 8002d54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d62:	463b      	mov	r3, r7
 8002d64:	2200      	movs	r2, #0
 8002d66:	4619      	mov	r1, r3
 8002d68:	4807      	ldr	r0, [pc, #28]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002d6a:	f00b f8b5 	bl	800ded8 <HAL_TIM_PWM_ConfigChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d74:	f000 ffbc 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d78:	4803      	ldr	r0, [pc, #12]	@ (8002d88 <MX_TIM3_Init+0xe8>)
 8002d7a:	f001 fe2d 	bl	80049d8 <HAL_TIM_MspPostInit>

}
 8002d7e:	bf00      	nop
 8002d80:	3738      	adds	r7, #56	@ 0x38
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20001f1c 	.word	0x20001f1c
 8002d8c:	40000400 	.word	0x40000400

08002d90 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08e      	sub	sp, #56	@ 0x38
 8002d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db0:	463b      	mov	r3, r7
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	609a      	str	r2, [r3, #8]
 8002dba:	60da      	str	r2, [r3, #12]
 8002dbc:	611a      	str	r2, [r3, #16]
 8002dbe:	615a      	str	r2, [r3, #20]
 8002dc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8002e7c <MX_TIM5_Init+0xec>)
 8002dc6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dce:	4b2a      	ldr	r3, [pc, #168]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002dd4:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dda:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ddc:	4b26      	ldr	r3, [pc, #152]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de2:	4b25      	ldr	r3, [pc, #148]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002de8:	4823      	ldr	r0, [pc, #140]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002dea:	f00a fe48 	bl	800da7e <HAL_TIM_Base_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002df4:	f000 ff7c 	bl	8003cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002dfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e02:	4619      	mov	r1, r3
 8002e04:	481c      	ldr	r0, [pc, #112]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002e06:	f00b f97b 	bl	800e100 <HAL_TIM_ConfigClockSource>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002e10:	f000 ff6e 	bl	8003cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002e14:	4818      	ldr	r0, [pc, #96]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002e16:	f00a ff01 	bl	800dc1c <HAL_TIM_PWM_Init>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002e20:	f000 ff66 	bl	8003cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	4619      	mov	r1, r3
 8002e32:	4811      	ldr	r0, [pc, #68]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002e34:	f00b fdf4 	bl	800ea20 <HAL_TIMEx_MasterConfigSynchronization>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002e3e:	f000 ff57 	bl	8003cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e42:	2360      	movs	r3, #96	@ 0x60
 8002e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e52:	463b      	mov	r3, r7
 8002e54:	220c      	movs	r2, #12
 8002e56:	4619      	mov	r1, r3
 8002e58:	4807      	ldr	r0, [pc, #28]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002e5a:	f00b f83d 	bl	800ded8 <HAL_TIM_PWM_ConfigChannel>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002e64:	f000 ff44 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002e68:	4803      	ldr	r0, [pc, #12]	@ (8002e78 <MX_TIM5_Init+0xe8>)
 8002e6a:	f001 fdb5 	bl	80049d8 <HAL_TIM_MspPostInit>

}
 8002e6e:	bf00      	nop
 8002e70:	3738      	adds	r7, #56	@ 0x38
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20001f68 	.word	0x20001f68
 8002e7c:	40000c00 	.word	0x40000c00

08002e80 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e86:	f107 0310 	add.w	r3, r7, #16
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	605a      	str	r2, [r3, #4]
 8002e9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e9e:	4b20      	ldr	r3, [pc, #128]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002ea0:	4a20      	ldr	r2, [pc, #128]	@ (8002f24 <MX_TIM8_Init+0xa4>)
 8002ea2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002eb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eb6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002ebe:	4b18      	ldr	r3, [pc, #96]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ec4:	4b16      	ldr	r3, [pc, #88]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002eca:	4815      	ldr	r0, [pc, #84]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002ecc:	f00a fdd7 	bl	800da7e <HAL_TIM_Base_Init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8002ed6:	f000 ff0b 	bl	8003cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ede:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480e      	ldr	r0, [pc, #56]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002ee8:	f00b f90a 	bl	800e100 <HAL_TIM_ConfigClockSource>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002ef2:	f000 fefd 	bl	8003cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4806      	ldr	r0, [pc, #24]	@ (8002f20 <MX_TIM8_Init+0xa0>)
 8002f08:	f00b fd8a 	bl	800ea20 <HAL_TIMEx_MasterConfigSynchronization>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002f12:	f000 feed 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002f16:	bf00      	nop
 8002f18:	3720      	adds	r7, #32
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20001fb4 	.word	0x20001fb4
 8002f24:	40010400 	.word	0x40010400

08002f28 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	615a      	str	r2, [r3, #20]
 8002f3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002f40:	4b1a      	ldr	r3, [pc, #104]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f42:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb0 <MX_TIM12_Init+0x88>)
 8002f44:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002f46:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f4c:	4b17      	ldr	r3, [pc, #92]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002f52:	4b16      	ldr	r3, [pc, #88]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f58:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f5a:	4b14      	ldr	r3, [pc, #80]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f60:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002f66:	4811      	ldr	r0, [pc, #68]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f68:	f00a fe58 	bl	800dc1c <HAL_TIM_PWM_Init>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002f72:	f000 febd 	bl	8003cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f76:	2360      	movs	r3, #96	@ 0x60
 8002f78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	2200      	movs	r2, #0
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4807      	ldr	r0, [pc, #28]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f8e:	f00a ffa3 	bl	800ded8 <HAL_TIM_PWM_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002f98:	f000 feaa 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002f9c:	4803      	ldr	r0, [pc, #12]	@ (8002fac <MX_TIM12_Init+0x84>)
 8002f9e:	f001 fd1b 	bl	80049d8 <HAL_TIM_MspPostInit>

}
 8002fa2:	bf00      	nop
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20002000 	.word	0x20002000
 8002fb0:	40001800 	.word	0x40001800

08002fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fb8:	4b14      	ldr	r3, [pc, #80]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fba:	4a15      	ldr	r2, [pc, #84]	@ (8003010 <MX_USART1_UART_Init+0x5c>)
 8002fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fbe:	4b13      	ldr	r3, [pc, #76]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fda:	220c      	movs	r2, #12
 8002fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fde:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe4:	4b09      	ldr	r3, [pc, #36]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fea:	4b08      	ldr	r3, [pc, #32]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ff6:	4805      	ldr	r0, [pc, #20]	@ (800300c <MX_USART1_UART_Init+0x58>)
 8002ff8:	f00b fe3c 	bl	800ec74 <HAL_UART_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003002:	f000 fe75 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	2000204c 	.word	0x2000204c
 8003010:	40011000 	.word	0x40011000

08003014 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003018:	4b14      	ldr	r3, [pc, #80]	@ (800306c <MX_USART6_UART_Init+0x58>)
 800301a:	4a15      	ldr	r2, [pc, #84]	@ (8003070 <MX_USART6_UART_Init+0x5c>)
 800301c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800301e:	4b13      	ldr	r3, [pc, #76]	@ (800306c <MX_USART6_UART_Init+0x58>)
 8003020:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003024:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003026:	4b11      	ldr	r3, [pc, #68]	@ (800306c <MX_USART6_UART_Init+0x58>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800302c:	4b0f      	ldr	r3, [pc, #60]	@ (800306c <MX_USART6_UART_Init+0x58>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003032:	4b0e      	ldr	r3, [pc, #56]	@ (800306c <MX_USART6_UART_Init+0x58>)
 8003034:	2200      	movs	r2, #0
 8003036:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <MX_USART6_UART_Init+0x58>)
 800303a:	220c      	movs	r2, #12
 800303c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303e:	4b0b      	ldr	r3, [pc, #44]	@ (800306c <MX_USART6_UART_Init+0x58>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003044:	4b09      	ldr	r3, [pc, #36]	@ (800306c <MX_USART6_UART_Init+0x58>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800304a:	4b08      	ldr	r3, [pc, #32]	@ (800306c <MX_USART6_UART_Init+0x58>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <MX_USART6_UART_Init+0x58>)
 8003052:	2200      	movs	r2, #0
 8003054:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003056:	4805      	ldr	r0, [pc, #20]	@ (800306c <MX_USART6_UART_Init+0x58>)
 8003058:	f00b fe0c 	bl	800ec74 <HAL_UART_Init>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8003062:	f000 fe45 	bl	8003cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200020d4 	.word	0x200020d4
 8003070:	40011400 	.word	0x40011400

08003074 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800307a:	1d3b      	adds	r3, r7, #4
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]
 8003088:	615a      	str	r2, [r3, #20]
 800308a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800308c:	4b1f      	ldr	r3, [pc, #124]	@ (800310c <MX_FMC_Init+0x98>)
 800308e:	4a20      	ldr	r2, [pc, #128]	@ (8003110 <MX_FMC_Init+0x9c>)
 8003090:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003092:	4b1e      	ldr	r3, [pc, #120]	@ (800310c <MX_FMC_Init+0x98>)
 8003094:	2200      	movs	r2, #0
 8003096:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003098:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <MX_FMC_Init+0x98>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800309e:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <MX_FMC_Init+0x98>)
 80030a0:	2204      	movs	r2, #4
 80030a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <MX_FMC_Init+0x98>)
 80030a6:	2210      	movs	r2, #16
 80030a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80030aa:	4b18      	ldr	r3, [pc, #96]	@ (800310c <MX_FMC_Init+0x98>)
 80030ac:	2240      	movs	r2, #64	@ 0x40
 80030ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80030b0:	4b16      	ldr	r3, [pc, #88]	@ (800310c <MX_FMC_Init+0x98>)
 80030b2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80030b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80030b8:	4b14      	ldr	r3, [pc, #80]	@ (800310c <MX_FMC_Init+0x98>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80030be:	4b13      	ldr	r3, [pc, #76]	@ (800310c <MX_FMC_Init+0x98>)
 80030c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80030c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80030c6:	4b11      	ldr	r3, [pc, #68]	@ (800310c <MX_FMC_Init+0x98>)
 80030c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80030cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80030ce:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <MX_FMC_Init+0x98>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80030d4:	2302      	movs	r3, #2
 80030d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80030d8:	2307      	movs	r3, #7
 80030da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80030dc:	2304      	movs	r3, #4
 80030de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80030e0:	2307      	movs	r3, #7
 80030e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80030e4:	2303      	movs	r3, #3
 80030e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80030e8:	2302      	movs	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80030ec:	2302      	movs	r3, #2
 80030ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	4619      	mov	r1, r3
 80030f4:	4805      	ldr	r0, [pc, #20]	@ (800310c <MX_FMC_Init+0x98>)
 80030f6:	f00a fb86 	bl	800d806 <HAL_SDRAM_Init>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8003100:	f000 fdf6 	bl	8003cf0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003104:	bf00      	nop
 8003106:	3720      	adds	r7, #32
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	2000215c 	.word	0x2000215c
 8003110:	a0000140 	.word	0xa0000140

08003114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b090      	sub	sp, #64	@ 0x40
 8003118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800312a:	4bb0      	ldr	r3, [pc, #704]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	4aaf      	ldr	r2, [pc, #700]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003130:	f043 0310 	orr.w	r3, r3, #16
 8003134:	6313      	str	r3, [r2, #48]	@ 0x30
 8003136:	4bad      	ldr	r3, [pc, #692]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003142:	4baa      	ldr	r3, [pc, #680]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	4aa9      	ldr	r2, [pc, #676]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800314c:	6313      	str	r3, [r2, #48]	@ 0x30
 800314e:	4ba7      	ldr	r3, [pc, #668]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800315a:	4ba4      	ldr	r3, [pc, #656]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	4aa3      	ldr	r2, [pc, #652]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003160:	f043 0302 	orr.w	r3, r3, #2
 8003164:	6313      	str	r3, [r2, #48]	@ 0x30
 8003166:	4ba1      	ldr	r3, [pc, #644]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	623b      	str	r3, [r7, #32]
 8003170:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003172:	4b9e      	ldr	r3, [pc, #632]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	4a9d      	ldr	r2, [pc, #628]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	6313      	str	r3, [r2, #48]	@ 0x30
 800317e:	4b9b      	ldr	r3, [pc, #620]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	61fb      	str	r3, [r7, #28]
 8003188:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800318a:	4b98      	ldr	r3, [pc, #608]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4a97      	ldr	r2, [pc, #604]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003190:	f043 0304 	orr.w	r3, r3, #4
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4b95      	ldr	r3, [pc, #596]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a2:	4b92      	ldr	r3, [pc, #584]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	4a91      	ldr	r2, [pc, #580]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ae:	4b8f      	ldr	r3, [pc, #572]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80031ba:	4b8c      	ldr	r3, [pc, #560]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a8b      	ldr	r2, [pc, #556]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031d2:	4b86      	ldr	r3, [pc, #536]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a85      	ldr	r2, [pc, #532]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b83      	ldr	r3, [pc, #524]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80031ea:	4b80      	ldr	r3, [pc, #512]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a7f      	ldr	r2, [pc, #508]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b7d      	ldr	r3, [pc, #500]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fe:	60bb      	str	r3, [r7, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003202:	4b7a      	ldr	r3, [pc, #488]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4a79      	ldr	r2, [pc, #484]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003208:	f043 0320 	orr.w	r3, r3, #32
 800320c:	6313      	str	r3, [r2, #48]	@ 0x30
 800320e:	4b77      	ldr	r3, [pc, #476]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800321a:	4b74      	ldr	r3, [pc, #464]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	4a73      	ldr	r2, [pc, #460]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003224:	6313      	str	r3, [r2, #48]	@ 0x30
 8003226:	4b71      	ldr	r3, [pc, #452]	@ (80033ec <MX_GPIO_Init+0x2d8>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003232:	2201      	movs	r2, #1
 8003234:	2120      	movs	r1, #32
 8003236:	486e      	ldr	r0, [pc, #440]	@ (80033f0 <MX_GPIO_Init+0x2dc>)
 8003238:	f004 febe 	bl	8007fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800323c:	2200      	movs	r2, #0
 800323e:	210c      	movs	r1, #12
 8003240:	486c      	ldr	r0, [pc, #432]	@ (80033f4 <MX_GPIO_Init+0x2e0>)
 8003242:	f004 feb9 	bl	8007fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003246:	2201      	movs	r2, #1
 8003248:	2108      	movs	r1, #8
 800324a:	486b      	ldr	r0, [pc, #428]	@ (80033f8 <MX_GPIO_Init+0x2e4>)
 800324c:	f004 feb4 	bl	8007fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8003250:	2201      	movs	r2, #1
 8003252:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003256:	4867      	ldr	r0, [pc, #412]	@ (80033f4 <MX_GPIO_Init+0x2e0>)
 8003258:	f004 feae 	bl	8007fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800325c:	2200      	movs	r2, #0
 800325e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003262:	4866      	ldr	r0, [pc, #408]	@ (80033fc <MX_GPIO_Init+0x2e8>)
 8003264:	f004 fea8 	bl	8007fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003268:	2200      	movs	r2, #0
 800326a:	21c8      	movs	r1, #200	@ 0xc8
 800326c:	4864      	ldr	r0, [pc, #400]	@ (8003400 <MX_GPIO_Init+0x2ec>)
 800326e:	f004 fea3 	bl	8007fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003272:	2308      	movs	r3, #8
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003276:	2300      	movs	r3, #0
 8003278:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800327e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003282:	4619      	mov	r1, r3
 8003284:	485f      	ldr	r0, [pc, #380]	@ (8003404 <MX_GPIO_Init+0x2f0>)
 8003286:	f004 fcd3 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800328a:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800328e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003298:	2303      	movs	r3, #3
 800329a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800329c:	230a      	movs	r3, #10
 800329e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032a4:	4619      	mov	r1, r3
 80032a6:	4858      	ldr	r0, [pc, #352]	@ (8003408 <MX_GPIO_Init+0x2f4>)
 80032a8:	f004 fcc2 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80032ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032b2:	2300      	movs	r3, #0
 80032b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80032ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032be:	4619      	mov	r1, r3
 80032c0:	4852      	ldr	r0, [pc, #328]	@ (800340c <MX_GPIO_Init+0x2f8>)
 80032c2:	f004 fcb5 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80032c6:	2340      	movs	r3, #64	@ 0x40
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80032ca:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80032ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80032d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032d8:	4619      	mov	r1, r3
 80032da:	4845      	ldr	r0, [pc, #276]	@ (80033f0 <MX_GPIO_Init+0x2dc>)
 80032dc:	f004 fca8 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80032e0:	2320      	movs	r3, #32
 80032e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e4:	2301      	movs	r3, #1
 80032e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ec:	2300      	movs	r3, #0
 80032ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80032f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032f4:	4619      	mov	r1, r3
 80032f6:	483e      	ldr	r0, [pc, #248]	@ (80033f0 <MX_GPIO_Init+0x2dc>)
 80032f8:	f004 fc9a 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80032fc:	f241 030c 	movw	r3, #4108	@ 0x100c
 8003300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003302:	2301      	movs	r3, #1
 8003304:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003306:	2300      	movs	r3, #0
 8003308:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330a:	2300      	movs	r3, #0
 800330c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800330e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003312:	4619      	mov	r1, r3
 8003314:	4837      	ldr	r0, [pc, #220]	@ (80033f4 <MX_GPIO_Init+0x2e0>)
 8003316:	f004 fc8b 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800331a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800331e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003320:	2300      	movs	r3, #0
 8003322:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003328:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800332c:	4619      	mov	r1, r3
 800332e:	4838      	ldr	r0, [pc, #224]	@ (8003410 <MX_GPIO_Init+0x2fc>)
 8003330:	f004 fc7e 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003334:	2308      	movs	r3, #8
 8003336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003338:	2301      	movs	r3, #1
 800333a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003344:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003348:	4619      	mov	r1, r3
 800334a:	482b      	ldr	r0, [pc, #172]	@ (80033f8 <MX_GPIO_Init+0x2e4>)
 800334c:	f004 fc70 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003350:	2310      	movs	r3, #16
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003354:	2300      	movs	r3, #0
 8003356:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800335c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003360:	4619      	mov	r1, r3
 8003362:	4823      	ldr	r0, [pc, #140]	@ (80033f0 <MX_GPIO_Init+0x2dc>)
 8003364:	f004 fc64 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003368:	f248 0304 	movw	r3, #32772	@ 0x8004
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800336e:	2300      	movs	r3, #0
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	2300      	movs	r3, #0
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003376:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800337a:	4619      	mov	r1, r3
 800337c:	481f      	ldr	r0, [pc, #124]	@ (80033fc <MX_GPIO_Init+0x2e8>)
 800337e:	f004 fc57 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003382:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003388:	2301      	movs	r3, #1
 800338a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338c:	2300      	movs	r3, #0
 800338e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003390:	2300      	movs	r3, #0
 8003392:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003394:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003398:	4619      	mov	r1, r3
 800339a:	4818      	ldr	r0, [pc, #96]	@ (80033fc <MX_GPIO_Init+0x2e8>)
 800339c:	f004 fc48 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80033a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80033a6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80033aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80033b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033b4:	4619      	mov	r1, r3
 80033b6:	480f      	ldr	r0, [pc, #60]	@ (80033f4 <MX_GPIO_Init+0x2e0>)
 80033b8:	f004 fc3a 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80033bc:	2310      	movs	r3, #16
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c0:	2302      	movs	r3, #2
 80033c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	2303      	movs	r3, #3
 80033ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80033cc:	230a      	movs	r3, #10
 80033ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80033d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033d4:	4619      	mov	r1, r3
 80033d6:	4809      	ldr	r0, [pc, #36]	@ (80033fc <MX_GPIO_Init+0x2e8>)
 80033d8:	f004 fc2a 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80033dc:	23c8      	movs	r3, #200	@ 0xc8
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033e0:	2301      	movs	r3, #1
 80033e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033e8:	e014      	b.n	8003414 <MX_GPIO_Init+0x300>
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40022000 	.word	0x40022000
 80033f8:	40022800 	.word	0x40022800
 80033fc:	40021c00 	.word	0x40021c00
 8003400:	40021800 	.word	0x40021800
 8003404:	40021000 	.word	0x40021000
 8003408:	40020400 	.word	0x40020400
 800340c:	40022400 	.word	0x40022400
 8003410:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003414:	2300      	movs	r3, #0
 8003416:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003418:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800341c:	4619      	mov	r1, r3
 800341e:	4819      	ldr	r0, [pc, #100]	@ (8003484 <MX_GPIO_Init+0x370>)
 8003420:	f004 fc06 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8003424:	2305      	movs	r3, #5
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003430:	2303      	movs	r3, #3
 8003432:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003434:	230a      	movs	r3, #10
 8003436:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003438:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800343c:	4619      	mov	r1, r3
 800343e:	4812      	ldr	r0, [pc, #72]	@ (8003488 <MX_GPIO_Init+0x374>)
 8003440:	f004 fbf6 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003444:	2304      	movs	r3, #4
 8003446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003448:	2300      	movs	r3, #0
 800344a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344c:	2300      	movs	r3, #0
 800344e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003454:	4619      	mov	r1, r3
 8003456:	480b      	ldr	r0, [pc, #44]	@ (8003484 <MX_GPIO_Init+0x370>)
 8003458:	f004 fbea 	bl	8007c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800345c:	2328      	movs	r3, #40	@ 0x28
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	2302      	movs	r3, #2
 8003462:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003468:	2303      	movs	r3, #3
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800346c:	230a      	movs	r3, #10
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003474:	4619      	mov	r1, r3
 8003476:	4805      	ldr	r0, [pc, #20]	@ (800348c <MX_GPIO_Init+0x378>)
 8003478:	f004 fbda 	bl	8007c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800347c:	bf00      	nop
 800347e:	3740      	adds	r7, #64	@ 0x40
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	40021800 	.word	0x40021800
 8003488:	40020800 	.word	0x40020800
 800348c:	40020000 	.word	0x40020000

08003490 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b096      	sub	sp, #88	@ 0x58
 8003494:	af02      	add	r7, sp, #8
 8003496:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 8003498:	49b6      	ldr	r1, [pc, #728]	@ (8003774 <StartDefaultTask+0x2e4>)
 800349a:	2002      	movs	r0, #2
 800349c:	f001 ff3a 	bl	8005314 <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 80034a0:	49b5      	ldr	r1, [pc, #724]	@ (8003778 <StartDefaultTask+0x2e8>)
 80034a2:	2001      	movs	r0, #1
 80034a4:	f001 ff36 	bl	8005314 <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 80034a8:	49b4      	ldr	r1, [pc, #720]	@ (800377c <StartDefaultTask+0x2ec>)
 80034aa:	2001      	movs	r0, #1
 80034ac:	f001 ff32 	bl	8005314 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 80034b0:	49b3      	ldr	r1, [pc, #716]	@ (8003780 <StartDefaultTask+0x2f0>)
 80034b2:	2001      	movs	r0, #1
 80034b4:	f001 ff2e 	bl	8005314 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 80034b8:	4bb2      	ldr	r3, [pc, #712]	@ (8003784 <StartDefaultTask+0x2f4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4ab2      	ldr	r2, [pc, #712]	@ (8003788 <StartDefaultTask+0x2f8>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0c9b      	lsrs	r3, r3, #18
 80034c4:	461a      	mov	r2, r3
 80034c6:	49b1      	ldr	r1, [pc, #708]	@ (800378c <StartDefaultTask+0x2fc>)
 80034c8:	2001      	movs	r0, #1
 80034ca:	f001 ff23 	bl	8005314 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 80034ce:	49b0      	ldr	r1, [pc, #704]	@ (8003790 <StartDefaultTask+0x300>)
 80034d0:	2001      	movs	r0, #1
 80034d2:	f001 ff1f 	bl	8005314 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 80034d6:	49af      	ldr	r1, [pc, #700]	@ (8003794 <StartDefaultTask+0x304>)
 80034d8:	2001      	movs	r0, #1
 80034da:	f001 ff1b 	bl	8005314 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 80034de:	49ae      	ldr	r1, [pc, #696]	@ (8003798 <StartDefaultTask+0x308>)
 80034e0:	2001      	movs	r0, #1
 80034e2:	f001 ff17 	bl	8005314 <LOGGER_SendFormatted>
  
  // SD 카드 기본 기능 테스트 (Default Task에서 수행)
  LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 80034e6:	49ad      	ldr	r1, [pc, #692]	@ (800379c <StartDefaultTask+0x30c>)
 80034e8:	2001      	movs	r0, #1
 80034ea:	f001 ff13 	bl	8005314 <LOGGER_SendFormatted>
  
  // SD 초기화 시도
  LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 80034ee:	49ac      	ldr	r1, [pc, #688]	@ (80037a0 <StartDefaultTask+0x310>)
 80034f0:	2001      	movs	r0, #1
 80034f2:	f001 ff0f 	bl	8005314 <LOGGER_SendFormatted>
  g_sd_initialization_result = SDStorage_Init();
 80034f6:	f7fd fe15 	bl	8001124 <SDStorage_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	4aa9      	ldr	r2, [pc, #676]	@ (80037a4 <StartDefaultTask+0x314>)
 80034fe:	6013      	str	r3, [r2, #0]
  
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 8003500:	4ba8      	ldr	r3, [pc, #672]	@ (80037a4 <StartDefaultTask+0x314>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d124      	bne.n	8003552 <StartDefaultTask+0xc2>
    LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 8003508:	49a7      	ldr	r1, [pc, #668]	@ (80037a8 <StartDefaultTask+0x318>)
 800350a:	2001      	movs	r0, #1
 800350c:	f001 ff02 	bl	8005314 <LOGGER_SendFormatted>
    
    // 기본 쓰기 테스트
    LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 8003510:	49a6      	ldr	r1, [pc, #664]	@ (80037ac <StartDefaultTask+0x31c>)
 8003512:	2001      	movs	r0, #1
 8003514:	f001 fefe 	bl	8005314 <LOGGER_SendFormatted>
    const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 8003518:	4ba5      	ldr	r3, [pc, #660]	@ (80037b0 <StartDefaultTask+0x320>)
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
    int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 800351c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800351e:	f7fc fe81 	bl	8000224 <strlen>
 8003522:	4603      	mov	r3, r0
 8003524:	4619      	mov	r1, r3
 8003526:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003528:	f7fe f81a 	bl	8001560 <SDStorage_WriteLog>
 800352c:	6438      	str	r0, [r7, #64]	@ 0x40
    
    if (write_result == SDSTORAGE_OK) {
 800352e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003530:	2b00      	cmp	r3, #0
 8003532:	d108      	bne.n	8003546 <StartDefaultTask+0xb6>
      LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 8003534:	499f      	ldr	r1, [pc, #636]	@ (80037b4 <StartDefaultTask+0x324>)
 8003536:	2001      	movs	r0, #1
 8003538:	f001 feec 	bl	8005314 <LOGGER_SendFormatted>
      LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 800353c:	499e      	ldr	r1, [pc, #632]	@ (80037b8 <StartDefaultTask+0x328>)
 800353e:	2001      	movs	r0, #1
 8003540:	f001 fee8 	bl	8005314 <LOGGER_SendFormatted>
 8003544:	e010      	b.n	8003568 <StartDefaultTask+0xd8>
    } else {
      LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 8003546:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003548:	499c      	ldr	r1, [pc, #624]	@ (80037bc <StartDefaultTask+0x32c>)
 800354a:	2003      	movs	r0, #3
 800354c:	f001 fee2 	bl	8005314 <LOGGER_SendFormatted>
 8003550:	e00a      	b.n	8003568 <StartDefaultTask+0xd8>
    }
  } else {
    LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", g_sd_initialization_result);
 8003552:	4b94      	ldr	r3, [pc, #592]	@ (80037a4 <StartDefaultTask+0x314>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	4999      	ldr	r1, [pc, #612]	@ (80037c0 <StartDefaultTask+0x330>)
 800355a:	2003      	movs	r0, #3
 800355c:	f001 feda 	bl	8005314 <LOGGER_SendFormatted>
    LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 8003560:	4998      	ldr	r1, [pc, #608]	@ (80037c4 <StartDefaultTask+0x334>)
 8003562:	2001      	movs	r0, #1
 8003564:	f001 fed6 	bl	8005314 <LOGGER_SendFormatted>
  }

  // SD 테스트 건너뛰고 바로 LoRa 시작
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003568:	4997      	ldr	r1, [pc, #604]	@ (80037c8 <StartDefaultTask+0x338>)
 800356a:	2001      	movs	r0, #1
 800356c:	f001 fed2 	bl	8005314 <LOGGER_SendFormatted>
  
  // UART 연결 (LoRa 통신을 위해 필수)
  LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 8003570:	4996      	ldr	r1, [pc, #600]	@ (80037cc <StartDefaultTask+0x33c>)
 8003572:	2001      	movs	r0, #1
 8003574:	f001 fece 	bl	8005314 <LOGGER_SendFormatted>
  UartStatus uart_status = UART_Connect("UART6");
 8003578:	4895      	ldr	r0, [pc, #596]	@ (80037d0 <StartDefaultTask+0x340>)
 800357a:	f001 ffad 	bl	80054d8 <UART_Connect>
 800357e:	4603      	mov	r3, r0
 8003580:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (uart_status == UART_STATUS_OK) {
 8003584:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003588:	2b00      	cmp	r3, #0
 800358a:	d104      	bne.n	8003596 <StartDefaultTask+0x106>
    LOG_INFO("✅ [TX_TASK] UART connection successful");
 800358c:	4991      	ldr	r1, [pc, #580]	@ (80037d4 <StartDefaultTask+0x344>)
 800358e:	2001      	movs	r0, #1
 8003590:	f001 fec0 	bl	8005314 <LOGGER_SendFormatted>
 8003594:	e006      	b.n	80035a4 <StartDefaultTask+0x114>
  } else {
    LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 8003596:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800359a:	461a      	mov	r2, r3
 800359c:	498e      	ldr	r1, [pc, #568]	@ (80037d8 <StartDefaultTask+0x348>)
 800359e:	2003      	movs	r0, #3
 80035a0:	f001 feb8 	bl	8005314 <LOGGER_SendFormatted>
  }
  
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80035a4:	498d      	ldr	r1, [pc, #564]	@ (80037dc <StartDefaultTask+0x34c>)
 80035a6:	2001      	movs	r0, #1
 80035a8:	f001 feb4 	bl	8005314 <LOGGER_SendFormatted>
  osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80035ac:	f241 3088 	movw	r0, #5000	@ 0x1388
 80035b0:	f011 fa54 	bl	8014a5c <osDelay>
  
  // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
  LoraStarterContext lora_ctx;
  LoraStarter_InitWithDefaults(&lora_ctx, "TEST");
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	4989      	ldr	r1, [pc, #548]	@ (80037e0 <StartDefaultTask+0x350>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd f8ec 	bl	8000798 <LoraStarter_InitWithDefaults>
  
  LOG_INFO("=== LoRa Initialization ===");
 80035c0:	4988      	ldr	r1, [pc, #544]	@ (80037e4 <StartDefaultTask+0x354>)
 80035c2:	2001      	movs	r0, #1
 80035c4:	f001 fea6 	bl	8005314 <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	460b      	mov	r3, r1
 80035d2:	4985      	ldr	r1, [pc, #532]	@ (80037e8 <StartDefaultTask+0x358>)
 80035d4:	2001      	movs	r0, #1
 80035d6:	f001 fe9d 	bl	8005314 <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // SD 카드 로깅 설정 (간단한 방식)
  extern int g_sd_initialization_result; // main()에서 설정된 SD 결과
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80035da:	4b72      	ldr	r3, [pc, #456]	@ (80037a4 <StartDefaultTask+0x314>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d104      	bne.n	80035ec <StartDefaultTask+0x15c>
    LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 80035e2:	4982      	ldr	r1, [pc, #520]	@ (80037ec <StartDefaultTask+0x35c>)
 80035e4:	2001      	movs	r0, #1
 80035e6:	f001 fe95 	bl	8005314 <LOGGER_SendFormatted>
 80035ea:	e003      	b.n	80035f4 <StartDefaultTask+0x164>
  } else {
    LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 80035ec:	4980      	ldr	r1, [pc, #512]	@ (80037f0 <StartDefaultTask+0x360>)
 80035ee:	2001      	movs	r0, #1
 80035f0:	f001 fe90 	bl	8005314 <LOGGER_SendFormatted>
  }
  
  // LoRa 로깅 모드 설정 (터미널에서 모든 로그를 보기 위해 INFO 레벨 유지)
  if (g_sd_initialization_result == SDSTORAGE_OK) {
 80035f4:	4b6b      	ldr	r3, [pc, #428]	@ (80037a4 <StartDefaultTask+0x314>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <StartDefaultTask+0x182>
    LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 80035fc:	2002      	movs	r0, #2
 80035fe:	f001 fe65 	bl	80052cc <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 8003602:	2001      	movs	r0, #1
 8003604:	f001 fe52 	bl	80052ac <LOGGER_SetFilterLevel>
    LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), INFO level for debugging");
 8003608:	497a      	ldr	r1, [pc, #488]	@ (80037f4 <StartDefaultTask+0x364>)
 800360a:	2002      	movs	r0, #2
 800360c:	f001 fe82 	bl	8005314 <LOGGER_SendFormatted>
 8003610:	e009      	b.n	8003626 <StartDefaultTask+0x196>
  } else {
    LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 8003612:	2000      	movs	r0, #0
 8003614:	f001 fe5a 	bl	80052cc <LOGGER_SetMode>
    LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003618:	2001      	movs	r0, #1
 800361a:	f001 fe47 	bl	80052ac <LOGGER_SetFilterLevel>
    LOG_INFO("📺 LoRa logging mode: Terminal only");
 800361e:	4976      	ldr	r1, [pc, #472]	@ (80037f8 <StartDefaultTask+0x368>)
 8003620:	2001      	movs	r0, #1
 8003622:	f001 fe77 	bl	8005314 <LOGGER_SendFormatted>
  }
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 8003626:	4975      	ldr	r1, [pc, #468]	@ (80037fc <StartDefaultTask+0x36c>)
 8003628:	2001      	movs	r0, #1
 800362a:	f001 fe73 	bl	8005314 <LOGGER_SendFormatted>
  
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (lora_new_response) {
 8003632:	4b73      	ldr	r3, [pc, #460]	@ (8003800 <StartDefaultTask+0x370>)
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <StartDefaultTask+0x1b6>
      rx_data = lora_rx_response;
 800363c:	4b71      	ldr	r3, [pc, #452]	@ (8003804 <StartDefaultTask+0x374>)
 800363e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      lora_new_response = false; // 플래그 클리어
 8003640:	4b6f      	ldr	r3, [pc, #444]	@ (8003800 <StartDefaultTask+0x370>)
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
      // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8003646:	f107 030c 	add.w	r3, r7, #12
 800364a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd f8eb 	bl	8000828 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅 (중요한 상태만)
    static int last_state = -1;
    if (lora_ctx.state != last_state) {
 8003652:	7b3b      	ldrb	r3, [r7, #12]
 8003654:	461a      	mov	r2, r3
 8003656:	4b6c      	ldr	r3, [pc, #432]	@ (8003808 <StartDefaultTask+0x378>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d01a      	beq.n	8003694 <StartDefaultTask+0x204>
      // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 800365e:	7b3b      	ldrb	r3, [r7, #12]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d008      	beq.n	8003676 <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 8003664:	7b3b      	ldrb	r3, [r7, #12]
      if (lora_ctx.state == LORA_STATE_SEND_JOIN || 
 8003666:	2b05      	cmp	r3, #5
 8003668:	d005      	beq.n	8003676 <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_DONE ||
 800366a:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_SEND_PERIODIC ||
 800366c:	2b09      	cmp	r3, #9
 800366e:	d002      	beq.n	8003676 <StartDefaultTask+0x1e6>
          lora_ctx.state == LORA_STATE_ERROR) {
 8003670:	7b3b      	ldrb	r3, [r7, #12]
          lora_ctx.state == LORA_STATE_DONE ||
 8003672:	2b0a      	cmp	r3, #10
 8003674:	d10a      	bne.n	800368c <StartDefaultTask+0x1fc>
        LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 8003676:	7b3b      	ldrb	r3, [r7, #12]
 8003678:	4619      	mov	r1, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	460a      	mov	r2, r1
 8003684:	4961      	ldr	r1, [pc, #388]	@ (800380c <StartDefaultTask+0x37c>)
 8003686:	2001      	movs	r0, #1
 8003688:	f001 fe44 	bl	8005314 <LOGGER_SendFormatted>
                  lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
      }
      last_state = lora_ctx.state;
 800368c:	7b3b      	ldrb	r3, [r7, #12]
 800368e:	461a      	mov	r2, r3
 8003690:	4b5d      	ldr	r3, [pc, #372]	@ (8003808 <StartDefaultTask+0x378>)
 8003692:	601a      	str	r2, [r3, #0]
    }
    
    switch(lora_ctx.state) {
 8003694:	7b3b      	ldrb	r3, [r7, #12]
 8003696:	2b0a      	cmp	r3, #10
 8003698:	d855      	bhi.n	8003746 <StartDefaultTask+0x2b6>
 800369a:	a201      	add	r2, pc, #4	@ (adr r2, 80036a0 <StartDefaultTask+0x210>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036d7 	.word	0x080036d7
 80036a8:	080036ef 	.word	0x080036ef
 80036ac:	080036f9 	.word	0x080036f9
 80036b0:	08003703 	.word	0x08003703
 80036b4:	080036f9 	.word	0x080036f9
 80036b8:	08003703 	.word	0x08003703
 80036bc:	0800370d 	.word	0x0800370d
 80036c0:	08003717 	.word	0x08003717
 80036c4:	08003721 	.word	0x08003721
 80036c8:	08003721 	.word	0x08003721
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 80036cc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80036d0:	f011 f9c4 	bl	8014a5c <osDelay>
        break;
 80036d4:	e03c      	b.n	8003750 <StartDefaultTask+0x2c0>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	494c      	ldr	r1, [pc, #304]	@ (8003810 <StartDefaultTask+0x380>)
 80036de:	2001      	movs	r0, #1
 80036e0:	f001 fe18 	bl	8005314 <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 80036e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80036e8:	f011 f9b8 	bl	8014a5c <osDelay>
        break;
 80036ec:	e030      	b.n	8003750 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_OK:
        // OK 응답 대기 중 - 조용히 대기
        osDelay(2000); // OK 응답 대기 중 2초 간격
 80036ee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80036f2:	f011 f9b3 	bl	8014a5c <osDelay>
        break;
 80036f6:	e02b      	b.n	8003750 <StartDefaultTask+0x2c0>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 80036f8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80036fc:	f011 f9ae 	bl	8014a5c <osDelay>
        break;
 8003700:	e026      	b.n	8003750 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8003702:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003706:	f011 f9a9 	bl	8014a5c <osDelay>
        break;
 800370a:	e021      	b.n	8003750 <StartDefaultTask+0x2c0>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 800370c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003710:	f011 f9a4 	bl	8014a5c <osDelay>
        break;
 8003714:	e01c      	b.n	8003750 <StartDefaultTask+0x2c0>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8003716:	f241 3088 	movw	r0, #5000	@ 0x1388
 800371a:	f011 f99f 	bl	8014a5c <osDelay>
        break;
 800371e:	e017      	b.n	8003750 <StartDefaultTask+0x2c0>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003720:	7b3b      	ldrb	r3, [r7, #12]
 8003722:	2b09      	cmp	r3, #9
 8003724:	d101      	bne.n	800372a <StartDefaultTask+0x29a>
 8003726:	4b3b      	ldr	r3, [pc, #236]	@ (8003814 <StartDefaultTask+0x384>)
 8003728:	e000      	b.n	800372c <StartDefaultTask+0x29c>
 800372a:	4b3b      	ldr	r3, [pc, #236]	@ (8003818 <StartDefaultTask+0x388>)
 800372c:	461a      	mov	r2, r3
 800372e:	493b      	ldr	r1, [pc, #236]	@ (800381c <StartDefaultTask+0x38c>)
 8003730:	2001      	movs	r0, #1
 8003732:	f001 fdef 	bl	8005314 <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8003736:	bf00      	nop
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003738:	4939      	ldr	r1, [pc, #228]	@ (8003820 <StartDefaultTask+0x390>)
 800373a:	2001      	movs	r0, #1
 800373c:	f001 fdea 	bl	8005314 <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003744:	e005      	b.n	8003752 <StartDefaultTask+0x2c2>
        osDelay(1000);
 8003746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800374a:	f011 f987 	bl	8014a5c <osDelay>
        break;
 800374e:	bf00      	nop
  {
 8003750:	e76d      	b.n	800362e <StartDefaultTask+0x19e>
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8003752:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003756:	f011 f981 	bl	8014a5c <osDelay>
    idle_counter++;
 800375a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800375c:	3301      	adds	r3, #1
 800375e:	64bb      	str	r3, [r7, #72]	@ 0x48
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003762:	085b      	lsrs	r3, r3, #1
 8003764:	461a      	mov	r2, r3
 8003766:	492f      	ldr	r1, [pc, #188]	@ (8003824 <StartDefaultTask+0x394>)
 8003768:	2001      	movs	r0, #1
 800376a:	f001 fdd3 	bl	8005314 <LOGGER_SendFormatted>
    osDelay(30000);
 800376e:	bf00      	nop
 8003770:	e7ef      	b.n	8003752 <StartDefaultTask+0x2c2>
 8003772:	bf00      	nop
 8003774:	0801a270 	.word	0x0801a270
 8003778:	0801a2bc 	.word	0x0801a2bc
 800377c:	0801a2fc 	.word	0x0801a2fc
 8003780:	0801a344 	.word	0x0801a344
 8003784:	2000001c 	.word	0x2000001c
 8003788:	431bde83 	.word	0x431bde83
 800378c:	0801a370 	.word	0x0801a370
 8003790:	0801a388 	.word	0x0801a388
 8003794:	0801a3b0 	.word	0x0801a3b0
 8003798:	0801a3fc 	.word	0x0801a3fc
 800379c:	0801a438 	.word	0x0801a438
 80037a0:	0801a474 	.word	0x0801a474
 80037a4:	20000014 	.word	0x20000014
 80037a8:	0801a4a8 	.word	0x0801a4a8
 80037ac:	0801a4d8 	.word	0x0801a4d8
 80037b0:	0801a50c 	.word	0x0801a50c
 80037b4:	0801a538 	.word	0x0801a538
 80037b8:	0801a568 	.word	0x0801a568
 80037bc:	0801a5b8 	.word	0x0801a5b8
 80037c0:	0801a5f0 	.word	0x0801a5f0
 80037c4:	0801a628 	.word	0x0801a628
 80037c8:	0801a660 	.word	0x0801a660
 80037cc:	0801a698 	.word	0x0801a698
 80037d0:	0801a6d4 	.word	0x0801a6d4
 80037d4:	0801a6dc 	.word	0x0801a6dc
 80037d8:	0801a708 	.word	0x0801a708
 80037dc:	0801a73c 	.word	0x0801a73c
 80037e0:	0801a79c 	.word	0x0801a79c
 80037e4:	0801a7a4 	.word	0x0801a7a4
 80037e8:	0801a7c0 	.word	0x0801a7c0
 80037ec:	0801a7f0 	.word	0x0801a7f0
 80037f0:	0801a828 	.word	0x0801a828
 80037f4:	0801a870 	.word	0x0801a870
 80037f8:	0801a8b8 	.word	0x0801a8b8
 80037fc:	0801a8e0 	.word	0x0801a8e0
 8003800:	200023a8 	.word	0x200023a8
 8003804:	200021a8 	.word	0x200021a8
 8003808:	20000018 	.word	0x20000018
 800380c:	0801a910 	.word	0x0801a910
 8003810:	0801a944 	.word	0x0801a944
 8003814:	0801a96c 	.word	0x0801a96c
 8003818:	0801a974 	.word	0x0801a974
 800381c:	0801a97c 	.word	0x0801a97c
 8003820:	0801a9b4 	.word	0x0801a9b4
 8003824:	0801a9dc 	.word	0x0801a9dc

08003828 <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b0b2      	sub	sp, #200	@ 0xc8
 800382c:	af02      	add	r7, sp, #8
 800382e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003830:	4971      	ldr	r1, [pc, #452]	@ (80039f8 <StartSDLoggingTask+0x1d0>)
 8003832:	2001      	movs	r0, #1
 8003834:	f001 fd6e 	bl	8005314 <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003838:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800383c:	f011 f90e 	bl	8014a5c <osDelay>
  
  // SD 초기화 시도 (타임아웃 있는 안전한 방식)
  LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003840:	496e      	ldr	r1, [pc, #440]	@ (80039fc <StartSDLoggingTask+0x1d4>)
 8003842:	2001      	movs	r0, #1
 8003844:	f001 fd66 	bl	8005314 <LOGGER_SendFormatted>
  
  // 단계별 안전한 SD 초기화
  int init_attempts = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  const int MAX_INIT_ATTEMPTS = 3;
 800384e:	2303      	movs	r3, #3
 8003850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800385a:	e054      	b.n	8003906 <StartSDLoggingTask+0xde>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 800385c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003866:	4966      	ldr	r1, [pc, #408]	@ (8003a00 <StartSDLoggingTask+0x1d8>)
 8003868:	2001      	movs	r0, #1
 800386a:	f001 fd53 	bl	8005314 <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 800386e:	f002 fb1b 	bl	8005ea8 <HAL_GetTick>
 8003872:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 8003876:	f242 7310 	movw	r3, #10000	@ 0x2710
 800387a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    int init_result = SDStorage_Init();
 800387e:	f7fd fc51 	bl	8001124 <SDStorage_Init>
 8003882:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 8003886:	f002 fb0f 	bl	8005ea8 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 8003896:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800389a:	1c5a      	adds	r2, r3, #1
 800389c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80038a6:	4957      	ldr	r1, [pc, #348]	@ (8003a04 <StartSDLoggingTask+0x1dc>)
 80038a8:	2001      	movs	r0, #1
 80038aa:	f001 fd33 	bl	8005314 <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 80038ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <StartSDLoggingTask+0xa4>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 80038b6:	4954      	ldr	r1, [pc, #336]	@ (8003a08 <StartSDLoggingTask+0x1e0>)
 80038b8:	2001      	movs	r0, #1
 80038ba:	f001 fd2b 	bl	8005314 <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 80038be:	4b53      	ldr	r3, [pc, #332]	@ (8003a0c <StartSDLoggingTask+0x1e4>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 80038c4:	4b52      	ldr	r3, [pc, #328]	@ (8003a10 <StartSDLoggingTask+0x1e8>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
      break;
 80038ca:	e022      	b.n	8003912 <StartSDLoggingTask+0xea>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 80038cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038d6:	494f      	ldr	r1, [pc, #316]	@ (8003a14 <StartSDLoggingTask+0x1ec>)
 80038d8:	2002      	movs	r0, #2
 80038da:	f001 fd1b 	bl	8005314 <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 80038de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80038e2:	3b01      	subs	r3, #1
 80038e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80038e8:	429a      	cmp	r2, r3
 80038ea:	da07      	bge.n	80038fc <StartSDLoggingTask+0xd4>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 80038ec:	494a      	ldr	r1, [pc, #296]	@ (8003a18 <StartSDLoggingTask+0x1f0>)
 80038ee:	2001      	movs	r0, #1
 80038f0:	f001 fd10 	bl	8005314 <LOGGER_SendFormatted>
        osDelay(5000);
 80038f4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80038f8:	f011 f8b0 	bl	8014a5c <osDelay>
  for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 80038fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003900:	3301      	adds	r3, #1
 8003902:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003906:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800390a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800390e:	429a      	cmp	r2, r3
 8003910:	dba4      	blt.n	800385c <StartSDLoggingTask+0x34>
      }
    }
  }
  
  if (!g_sd_logging_active) {
 8003912:	4b3f      	ldr	r3, [pc, #252]	@ (8003a10 <StartSDLoggingTask+0x1e8>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00c      	beq.n	800393a <StartSDLoggingTask+0x112>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003920:	493e      	ldr	r1, [pc, #248]	@ (8003a1c <StartSDLoggingTask+0x1f4>)
 8003922:	2003      	movs	r0, #3
 8003924:	f001 fcf6 	bl	8005314 <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003928:	493d      	ldr	r1, [pc, #244]	@ (8003a20 <StartSDLoggingTask+0x1f8>)
 800392a:	2001      	movs	r0, #1
 800392c:	f001 fcf2 	bl	8005314 <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003930:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003934:	f011 f892 	bl	8014a5c <osDelay>
 8003938:	e7fa      	b.n	8003930 <StartSDLoggingTask+0x108>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 800393a:	493a      	ldr	r1, [pc, #232]	@ (8003a24 <StartSDLoggingTask+0x1fc>)
 800393c:	2001      	movs	r0, #1
 800393e:	f001 fce9 	bl	8005314 <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 8003942:	4b39      	ldr	r3, [pc, #228]	@ (8003a28 <StartSDLoggingTask+0x200>)
 8003944:	6819      	ldr	r1, [r3, #0]
 8003946:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800394a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800394e:	4618      	mov	r0, r3
 8003950:	f011 f900 	bl	8014b54 <osMessageGet>
    
    if (event.status == osEventMessage) {
 8003954:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003958:	2b10      	cmp	r3, #16
 800395a:	d12d      	bne.n	80039b8 <StartSDLoggingTask+0x190>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 800395c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003960:	f107 0308 	add.w	r3, r7, #8
 8003964:	4611      	mov	r1, r2
 8003966:	2288      	movs	r2, #136	@ 0x88
 8003968:	4618      	mov	r0, r3
 800396a:	f013 ff2a 	bl	80177c2 <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 800396e:	f002 fa9b 	bl	8005ea8 <HAL_GetTick>
 8003972:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 8003976:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd fded 	bl	8001560 <SDStorage_WriteLog>
 8003986:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
      uint32_t write_duration = HAL_GetTick() - write_start;
 800398a:	f002 fa8d 	bl	8005ea8 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
      
      if (write_result != SDSTORAGE_OK) {
 800399a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <StartSDLoggingTask+0x190>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 80039a2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80039a6:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80039aa:	4820      	ldr	r0, [pc, #128]	@ (8003a2c <StartSDLoggingTask+0x204>)
 80039ac:	f013 fd6a 	bl	8017484 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 80039b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039b4:	f011 f852 	bl	8014a5c <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 80039b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a30 <StartSDLoggingTask+0x208>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	4a1c      	ldr	r2, [pc, #112]	@ (8003a30 <StartSDLoggingTask+0x208>)
 80039c0:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 80039c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a30 <StartSDLoggingTask+0x208>)
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <StartSDLoggingTask+0x20c>)
 80039c8:	fba3 2301 	umull	r2, r3, r3, r1
 80039cc:	095a      	lsrs	r2, r3, #5
 80039ce:	4613      	mov	r3, r2
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	1aca      	subs	r2, r1, r3
 80039d8:	2a00      	cmp	r2, #0
 80039da:	d108      	bne.n	80039ee <StartSDLoggingTask+0x1c6>
      if (SDStorage_IsReady()) {
 80039dc:	f7fd fff8 	bl	80019d0 <SDStorage_IsReady>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <StartSDLoggingTask+0x1c6>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 80039e6:	4914      	ldr	r1, [pc, #80]	@ (8003a38 <StartSDLoggingTask+0x210>)
 80039e8:	2002      	movs	r0, #2
 80039ea:	f001 fc93 	bl	8005314 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 80039ee:	2032      	movs	r0, #50	@ 0x32
 80039f0:	f011 f834 	bl	8014a5c <osDelay>
  {
 80039f4:	e7a5      	b.n	8003942 <StartSDLoggingTask+0x11a>
 80039f6:	bf00      	nop
 80039f8:	0801aa0c 	.word	0x0801aa0c
 80039fc:	0801aa2c 	.word	0x0801aa2c
 8003a00:	0801aa60 	.word	0x0801aa60
 8003a04:	0801aa88 	.word	0x0801aa88
 8003a08:	0801aabc 	.word	0x0801aabc
 8003a0c:	20000014 	.word	0x20000014
 8003a10:	200021a0 	.word	0x200021a0
 8003a14:	0801aae8 	.word	0x0801aae8
 8003a18:	0801ab20 	.word	0x0801ab20
 8003a1c:	0801ab4c 	.word	0x0801ab4c
 8003a20:	0801ab80 	.word	0x0801ab80
 8003a24:	0801abb0 	.word	0x0801abb0
 8003a28:	2000219c 	.word	0x2000219c
 8003a2c:	0801abe8 	.word	0x0801abe8
 8003a30:	20002418 	.word	0x20002418
 8003a34:	88888889 	.word	0x88888889
 8003a38:	0801ac20 	.word	0x0801ac20

08003a3c <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003a42:	af02      	add	r7, sp, #8
 8003a44:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a48:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003a4c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003a4e:	498c      	ldr	r1, [pc, #560]	@ (8003c80 <StartReceiveTask+0x244>)
 8003a50:	2001      	movs	r0, #1
 8003a52:	f001 fc5f 	bl	8005314 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003a56:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a5a:	f010 ffff 	bl	8014a5c <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003a5e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003a62:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003a6a:	f107 0208 	add.w	r2, r7, #8
 8003a6e:	f107 030c 	add.w	r3, r7, #12
 8003a72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fdaa 	bl	80055d0 <UART_Receive>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003a82:	4b80      	ldr	r3, [pc, #512]	@ (8003c84 <StartReceiveTask+0x248>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3301      	adds	r3, #1
 8003a88:	4a7e      	ldr	r2, [pc, #504]	@ (8003c84 <StartReceiveTask+0x248>)
 8003a8a:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8003c84 <StartReceiveTask+0x248>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b7d      	ldr	r3, [pc, #500]	@ (8003c88 <StartReceiveTask+0x24c>)
 8003a92:	fba3 1302 	umull	r1, r3, r3, r2
 8003a96:	09db      	lsrs	r3, r3, #7
 8003a98:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003a9c:	fb01 f303 	mul.w	r3, r1, r3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d116      	bne.n	8003ad4 <StartReceiveTask+0x98>
 8003aa6:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d012      	beq.n	8003ad4 <StartReceiveTask+0x98>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003aae:	4b75      	ldr	r3, [pc, #468]	@ (8003c84 <StartReceiveTask+0x248>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a75      	ldr	r2, [pc, #468]	@ (8003c88 <StartReceiveTask+0x24c>)
 8003ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab8:	09da      	lsrs	r2, r3, #7
 8003aba:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003abe:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ac2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	460b      	mov	r3, r1
 8003acc:	496f      	ldr	r1, [pc, #444]	@ (8003c8c <StartReceiveTask+0x250>)
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f001 fc20 	bl	8005314 <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003ad4:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 80cc 	bne.w	8003c76 <StartReceiveTask+0x23a>
 8003ade:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ae2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f340 80c4 	ble.w	8003c76 <StartReceiveTask+0x23a>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 8003aee:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003af2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b1e      	cmp	r3, #30
 8003afa:	dd01      	ble.n	8003b00 <StartReceiveTask+0xc4>
 8003afc:	4964      	ldr	r1, [pc, #400]	@ (8003c90 <StartReceiveTask+0x254>)
 8003afe:	e000      	b.n	8003b02 <StartReceiveTask+0xc6>
 8003b00:	4964      	ldr	r1, [pc, #400]	@ (8003c94 <StartReceiveTask+0x258>)
 8003b02:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b06:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f107 020c 	add.w	r2, r7, #12
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	460b      	mov	r3, r1
 8003b14:	4960      	ldr	r1, [pc, #384]	@ (8003c98 <StartReceiveTask+0x25c>)
 8003b16:	2001      	movs	r0, #1
 8003b18:	f001 fbfc 	bl	8005314 <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003b1c:	f107 030c 	add.w	r3, r7, #12
 8003b20:	495e      	ldr	r1, [pc, #376]	@ (8003c9c <StartReceiveTask+0x260>)
 8003b22:	4618      	mov	r0, r3
 8003b24:	f013 fdb3 	bl	801768e <strstr>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <StartReceiveTask+0xfc>
        LOG_WARN("✅ JOIN CONFIRMED - Network joined successfully");
 8003b2e:	495c      	ldr	r1, [pc, #368]	@ (8003ca0 <StartReceiveTask+0x264>)
 8003b30:	2002      	movs	r0, #2
 8003b32:	f001 fbef 	bl	8005314 <LOGGER_SendFormatted>
 8003b36:	e00c      	b.n	8003b52 <StartReceiveTask+0x116>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	4959      	ldr	r1, [pc, #356]	@ (8003ca4 <StartReceiveTask+0x268>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f013 fda5 	bl	801768e <strstr>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <StartReceiveTask+0x116>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003b4a:	4957      	ldr	r1, [pc, #348]	@ (8003ca8 <StartReceiveTask+0x26c>)
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f001 fbe1 	bl	8005314 <LOGGER_SendFormatted>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003b52:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b56:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f107 030c 	add.w	r3, r7, #12
 8003b62:	4619      	mov	r1, r3
 8003b64:	4851      	ldr	r0, [pc, #324]	@ (8003cac <StartReceiveTask+0x270>)
 8003b66:	f013 fe2c 	bl	80177c2 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003b6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003b6e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb0 <StartReceiveTask+0x274>)
 8003b76:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8003b7e:	f107 030c 	add.w	r3, r7, #12
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fd f902 	bl	8000d8c <is_response_ok>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <StartReceiveTask+0x15a>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003b94:	e03f      	b.n	8003c16 <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003b96:	f107 030c 	add.w	r3, r7, #12
 8003b9a:	4940      	ldr	r1, [pc, #256]	@ (8003c9c <StartReceiveTask+0x260>)
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f013 fd76 	bl	801768e <strstr>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d003      	beq.n	8003bb0 <StartReceiveTask+0x174>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003bae:	e032      	b.n	8003c16 <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	493f      	ldr	r1, [pc, #252]	@ (8003cb4 <StartReceiveTask+0x278>)
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f013 fd69 	bl	801768e <strstr>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <StartReceiveTask+0x18e>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003bc8:	e025      	b.n	8003c16 <StartReceiveTask+0x1da>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003bca:	f107 030c 	add.w	r3, r7, #12
 8003bce:	4935      	ldr	r1, [pc, #212]	@ (8003ca4 <StartReceiveTask+0x268>)
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f013 fd5c 	bl	801768e <strstr>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d108      	bne.n	8003bee <StartReceiveTask+0x1b2>
 8003bdc:	f107 030c 	add.w	r3, r7, #12
 8003be0:	4935      	ldr	r1, [pc, #212]	@ (8003cb8 <StartReceiveTask+0x27c>)
 8003be2:	4618      	mov	r0, r3
 8003be4:	f013 fd53 	bl	801768e <strstr>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d004      	beq.n	8003bf8 <StartReceiveTask+0x1bc>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8003bee:	4933      	ldr	r1, [pc, #204]	@ (8003cbc <StartReceiveTask+0x280>)
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f001 fb8f 	bl	8005314 <LOGGER_SendFormatted>
 8003bf6:	e00e      	b.n	8003c16 <StartReceiveTask+0x1da>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8003bf8:	f107 030c 	add.w	r3, r7, #12
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fd f9b1 	bl	8000f64 <ResponseHandler_ParseSendResponse>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        if (response_type != RESPONSE_UNKNOWN) {
 8003c08:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d002      	beq.n	8003c16 <StartReceiveTask+0x1da>
          is_lora_command_response = true;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8003c16:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01d      	beq.n	8003c5a <StartReceiveTask+0x21e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8003c1e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c22:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f107 030c 	add.w	r3, r7, #12
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4823      	ldr	r0, [pc, #140]	@ (8003cc0 <StartReceiveTask+0x284>)
 8003c32:	f013 fdc6 	bl	80177c2 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8003c36:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c3a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc0 <StartReceiveTask+0x284>)
 8003c42:	2100      	movs	r1, #0
 8003c44:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8003c46:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc4 <StartReceiveTask+0x288>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 8003c4c:	f107 030c 	add.w	r3, r7, #12
 8003c50:	461a      	mov	r2, r3
 8003c52:	491d      	ldr	r1, [pc, #116]	@ (8003cc8 <StartReceiveTask+0x28c>)
 8003c54:	2000      	movs	r0, #0
 8003c56:	f001 fb5d 	bl	8005314 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 8003c5a:	f107 030c 	add.w	r3, r7, #12
 8003c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c62:	2100      	movs	r1, #0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f013 fcf7 	bl	8017658 <memset>
      local_bytes_received = 0;
 8003c6a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003c6e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8003c76:	2032      	movs	r0, #50	@ 0x32
 8003c78:	f010 fef0 	bl	8014a5c <osDelay>
  {
 8003c7c:	e6f5      	b.n	8003a6a <StartReceiveTask+0x2e>
 8003c7e:	bf00      	nop
 8003c80:	0801ac54 	.word	0x0801ac54
 8003c84:	2000241c 	.word	0x2000241c
 8003c88:	1b4e81b5 	.word	0x1b4e81b5
 8003c8c:	0801ac7c 	.word	0x0801ac7c
 8003c90:	0801acb0 	.word	0x0801acb0
 8003c94:	0801acb4 	.word	0x0801acb4
 8003c98:	0801acb8 	.word	0x0801acb8
 8003c9c:	0801acd8 	.word	0x0801acd8
 8003ca0:	0801ace4 	.word	0x0801ace4
 8003ca4:	0801ad18 	.word	0x0801ad18
 8003ca8:	0801ad24 	.word	0x0801ad24
 8003cac:	20002480 	.word	0x20002480
 8003cb0:	200021a4 	.word	0x200021a4
 8003cb4:	0801ad4c 	.word	0x0801ad4c
 8003cb8:	0801ad54 	.word	0x0801ad54
 8003cbc:	0801ad64 	.word	0x0801ad64
 8003cc0:	200021a8 	.word	0x200021a8
 8003cc4:	200023a8 	.word	0x200023a8
 8003cc8:	0801ada0 	.word	0x0801ada0

08003ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a04      	ldr	r2, [pc, #16]	@ (8003cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003cde:	f002 f8cf 	bl	8005e80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40001000 	.word	0x40001000

08003cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf4:	b672      	cpsid	i
}
 8003cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cf8:	bf00      	nop
 8003cfa:	e7fd      	b.n	8003cf8 <Error_Handler+0x8>

08003cfc <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003d02:	4b10      	ldr	r3, [pc, #64]	@ (8003d44 <MX_DMA_Init+0x48>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	4a0f      	ldr	r2, [pc, #60]	@ (8003d44 <MX_DMA_Init+0x48>)
 8003d08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d44 <MX_DMA_Init+0x48>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d16:	607b      	str	r3, [r7, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2105      	movs	r1, #5
 8003d1e:	2039      	movs	r0, #57	@ 0x39
 8003d20:	f002 fc42 	bl	80065a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003d24:	2039      	movs	r0, #57	@ 0x39
 8003d26:	f002 fc5b 	bl	80065e0 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2105      	movs	r1, #5
 8003d2e:	2047      	movs	r0, #71	@ 0x47
 8003d30:	f002 fc3a 	bl	80065a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003d34:	2047      	movs	r0, #71	@ 0x47
 8003d36:	f002 fc53 	bl	80065e0 <HAL_NVIC_EnableIRQ>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40023800 	.word	0x40023800

08003d48 <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8003d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d133      	bne.n	8003dbe <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8003d56:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d58:	4a1c      	ldr	r2, [pc, #112]	@ (8003dcc <MX_USART6_DMA_Init+0x84>)
 8003d5a:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d5e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003d62:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d64:	4b18      	ldr	r3, [pc, #96]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d6a:	4b17      	ldr	r3, [pc, #92]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d70:	4b15      	ldr	r3, [pc, #84]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d76:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d78:	4b13      	ldr	r3, [pc, #76]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d7e:	4b12      	ldr	r3, [pc, #72]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8003d84:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d8c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d90:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 8003d98:	480b      	ldr	r0, [pc, #44]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003d9a:	f002 fd9b 	bl	80068d4 <HAL_DMA_Init>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 8003da8:	4b07      	ldr	r3, [pc, #28]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    return;
 8003dae:	e007      	b.n	8003dc0 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <MX_USART6_DMA_Init+0x88>)
 8003db2:	4a05      	ldr	r2, [pc, #20]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003db4:	675a      	str	r2, [r3, #116]	@ 0x74
 8003db6:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <MX_USART6_DMA_Init+0x80>)
 8003db8:	4a05      	ldr	r2, [pc, #20]	@ (8003dd0 <MX_USART6_DMA_Init+0x88>)
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38
 8003dbc:	e000      	b.n	8003dc0 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 8003dbe:	bf00      	nop
}
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	200023ac 	.word	0x200023ac
 8003dcc:	40026428 	.word	0x40026428
 8003dd0:	200020d4 	.word	0x200020d4

08003dd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	4b11      	ldr	r3, [pc, #68]	@ (8003e20 <HAL_MspInit+0x4c>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	4a10      	ldr	r2, [pc, #64]	@ (8003e20 <HAL_MspInit+0x4c>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003de6:	4b0e      	ldr	r3, [pc, #56]	@ (8003e20 <HAL_MspInit+0x4c>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e20 <HAL_MspInit+0x4c>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e20 <HAL_MspInit+0x4c>)
 8003df8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dfe:	4b08      	ldr	r3, [pc, #32]	@ (8003e20 <HAL_MspInit+0x4c>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	210f      	movs	r1, #15
 8003e0e:	f06f 0001 	mvn.w	r0, #1
 8003e12:	f002 fbc9 	bl	80065a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40023800 	.word	0x40023800

08003e24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b08a      	sub	sp, #40	@ 0x28
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	60da      	str	r2, [r3, #12]
 8003e3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a21      	ldr	r2, [pc, #132]	@ (8003ec8 <HAL_ADC_MspInit+0xa4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d13c      	bne.n	8003ec0 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003e46:	4b21      	ldr	r3, [pc, #132]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4a:	4a20      	ldr	r2, [pc, #128]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e52:	4b1e      	ldr	r3, [pc, #120]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	4a1a      	ldr	r2, [pc, #104]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e64:	f043 0320 	orr.w	r3, r3, #32
 8003e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e6a:	4b18      	ldr	r3, [pc, #96]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e76:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7a:	4a14      	ldr	r2, [pc, #80]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e82:	4b12      	ldr	r3, [pc, #72]	@ (8003ecc <HAL_ADC_MspInit+0xa8>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8003e8e:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8003e92:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e94:	2303      	movs	r3, #3
 8003e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e9c:	f107 0314 	add.w	r3, r7, #20
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	480b      	ldr	r0, [pc, #44]	@ (8003ed0 <HAL_ADC_MspInit+0xac>)
 8003ea4:	f003 fec4 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eac:	2303      	movs	r3, #3
 8003eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4806      	ldr	r0, [pc, #24]	@ (8003ed4 <HAL_ADC_MspInit+0xb0>)
 8003ebc:	f003 feb8 	bl	8007c30 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8003ec0:	bf00      	nop
 8003ec2:	3728      	adds	r7, #40	@ 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40012200 	.word	0x40012200
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40021400 	.word	0x40021400
 8003ed4:	40020000 	.word	0x40020000

08003ed8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8003f10 <HAL_CRC_MspInit+0x38>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10b      	bne.n	8003f02 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003eea:	4b0a      	ldr	r3, [pc, #40]	@ (8003f14 <HAL_CRC_MspInit+0x3c>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eee:	4a09      	ldr	r2, [pc, #36]	@ (8003f14 <HAL_CRC_MspInit+0x3c>)
 8003ef0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ef6:	4b07      	ldr	r3, [pc, #28]	@ (8003f14 <HAL_CRC_MspInit+0x3c>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40023000 	.word	0x40023000
 8003f14:	40023800 	.word	0x40023800

08003f18 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08e      	sub	sp, #56	@ 0x38
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a50      	ldr	r2, [pc, #320]	@ (8004078 <HAL_DCMI_MspInit+0x160>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	f040 809a 	bne.w	8004070 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8003f3c:	4b4f      	ldr	r3, [pc, #316]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f40:	4a4e      	ldr	r2, [pc, #312]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	6353      	str	r3, [r2, #52]	@ 0x34
 8003f48:	4b4c      	ldr	r3, [pc, #304]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	623b      	str	r3, [r7, #32]
 8003f52:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f54:	4b49      	ldr	r3, [pc, #292]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f58:	4a48      	ldr	r2, [pc, #288]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f5a:	f043 0310 	orr.w	r3, r3, #16
 8003f5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f60:	4b46      	ldr	r3, [pc, #280]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f6c:	4b43      	ldr	r3, [pc, #268]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	4a42      	ldr	r2, [pc, #264]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f72:	f043 0308 	orr.w	r3, r3, #8
 8003f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f78:	4b40      	ldr	r3, [pc, #256]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f84:	4b3d      	ldr	r3, [pc, #244]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	4a3c      	ldr	r2, [pc, #240]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f90:	4b3a      	ldr	r3, [pc, #232]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f9c:	4b37      	ldr	r3, [pc, #220]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	4a36      	ldr	r2, [pc, #216]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fa8:	4b34      	ldr	r3, [pc, #208]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb4:	4b31      	ldr	r3, [pc, #196]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb8:	4a30      	ldr	r2, [pc, #192]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003fba:	f043 0301 	orr.w	r3, r3, #1
 8003fbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc0:	4b2e      	ldr	r3, [pc, #184]	@ (800407c <HAL_DCMI_MspInit+0x164>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003fcc:	2360      	movs	r3, #96	@ 0x60
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003fdc:	230d      	movs	r3, #13
 8003fde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4826      	ldr	r0, [pc, #152]	@ (8004080 <HAL_DCMI_MspInit+0x168>)
 8003fe8:	f003 fe22 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8003fec:	2308      	movs	r3, #8
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003ffc:	230d      	movs	r3, #13
 8003ffe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004004:	4619      	mov	r1, r3
 8004006:	481f      	ldr	r0, [pc, #124]	@ (8004084 <HAL_DCMI_MspInit+0x16c>)
 8004008:	f003 fe12 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800400c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004016:	2300      	movs	r3, #0
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800401a:	2300      	movs	r3, #0
 800401c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800401e:	230d      	movs	r3, #13
 8004020:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004026:	4619      	mov	r1, r3
 8004028:	4817      	ldr	r0, [pc, #92]	@ (8004088 <HAL_DCMI_MspInit+0x170>)
 800402a:	f003 fe01 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800402e:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004034:	2302      	movs	r3, #2
 8004036:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004038:	2300      	movs	r3, #0
 800403a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403c:	2300      	movs	r3, #0
 800403e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004040:	230d      	movs	r3, #13
 8004042:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004048:	4619      	mov	r1, r3
 800404a:	4810      	ldr	r0, [pc, #64]	@ (800408c <HAL_DCMI_MspInit+0x174>)
 800404c:	f003 fdf0 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8004050:	2350      	movs	r3, #80	@ 0x50
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004060:	230d      	movs	r3, #13
 8004062:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004068:	4619      	mov	r1, r3
 800406a:	4809      	ldr	r0, [pc, #36]	@ (8004090 <HAL_DCMI_MspInit+0x178>)
 800406c:	f003 fde0 	bl	8007c30 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8004070:	bf00      	nop
 8004072:	3738      	adds	r7, #56	@ 0x38
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	50050000 	.word	0x50050000
 800407c:	40023800 	.word	0x40023800
 8004080:	40021000 	.word	0x40021000
 8004084:	40020c00 	.word	0x40020c00
 8004088:	40021800 	.word	0x40021800
 800408c:	40021c00 	.word	0x40021c00
 8004090:	40020000 	.word	0x40020000

08004094 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0d      	ldr	r2, [pc, #52]	@ (80040d8 <HAL_DMA2D_MspInit+0x44>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d113      	bne.n	80040ce <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <HAL_DMA2D_MspInit+0x48>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040aa:	4a0c      	ldr	r2, [pc, #48]	@ (80040dc <HAL_DMA2D_MspInit+0x48>)
 80040ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b2:	4b0a      	ldr	r3, [pc, #40]	@ (80040dc <HAL_DMA2D_MspInit+0x48>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2105      	movs	r1, #5
 80040c2:	205a      	movs	r0, #90	@ 0x5a
 80040c4:	f002 fa70 	bl	80065a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80040c8:	205a      	movs	r0, #90	@ 0x5a
 80040ca:	f002 fa89 	bl	80065e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	4002b000 	.word	0x4002b000
 80040dc:	40023800 	.word	0x40023800

080040e0 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	@ 0x38
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a3f      	ldr	r2, [pc, #252]	@ (80041fc <HAL_ETH_MspInit+0x11c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d178      	bne.n	80041f4 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004102:	4b3f      	ldr	r3, [pc, #252]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	4a3e      	ldr	r2, [pc, #248]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004108:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800410c:	6313      	str	r3, [r2, #48]	@ 0x30
 800410e:	4b3c      	ldr	r3, [pc, #240]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	623b      	str	r3, [r7, #32]
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	4a38      	ldr	r2, [pc, #224]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004120:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004124:	6313      	str	r3, [r2, #48]	@ 0x30
 8004126:	4b36      	ldr	r3, [pc, #216]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	4b33      	ldr	r3, [pc, #204]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	4a32      	ldr	r2, [pc, #200]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004138:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800413c:	6313      	str	r3, [r2, #48]	@ 0x30
 800413e:	4b30      	ldr	r3, [pc, #192]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800414a:	4b2d      	ldr	r3, [pc, #180]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	4a2c      	ldr	r2, [pc, #176]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004154:	6313      	str	r3, [r2, #48]	@ 0x30
 8004156:	4b2a      	ldr	r3, [pc, #168]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004162:	4b27      	ldr	r3, [pc, #156]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	4a26      	ldr	r2, [pc, #152]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	6313      	str	r3, [r2, #48]	@ 0x30
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800417a:	4b21      	ldr	r3, [pc, #132]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417e:	4a20      	ldr	r2, [pc, #128]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6313      	str	r3, [r2, #48]	@ 0x30
 8004186:	4b1e      	ldr	r3, [pc, #120]	@ (8004200 <HAL_ETH_MspInit+0x120>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8004192:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004198:	2302      	movs	r3, #2
 800419a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041a0:	2303      	movs	r3, #3
 80041a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041a4:	230b      	movs	r3, #11
 80041a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ac:	4619      	mov	r1, r3
 80041ae:	4815      	ldr	r0, [pc, #84]	@ (8004204 <HAL_ETH_MspInit+0x124>)
 80041b0:	f003 fd3e 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80041b4:	2332      	movs	r3, #50	@ 0x32
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041b8:	2302      	movs	r3, #2
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041c0:	2303      	movs	r3, #3
 80041c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041c4:	230b      	movs	r3, #11
 80041c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041cc:	4619      	mov	r1, r3
 80041ce:	480e      	ldr	r0, [pc, #56]	@ (8004208 <HAL_ETH_MspInit+0x128>)
 80041d0:	f003 fd2e 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80041d4:	2386      	movs	r3, #134	@ 0x86
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d8:	2302      	movs	r3, #2
 80041da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e0:	2303      	movs	r3, #3
 80041e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041e4:	230b      	movs	r3, #11
 80041e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ec:	4619      	mov	r1, r3
 80041ee:	4807      	ldr	r0, [pc, #28]	@ (800420c <HAL_ETH_MspInit+0x12c>)
 80041f0:	f003 fd1e 	bl	8007c30 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80041f4:	bf00      	nop
 80041f6:	3738      	adds	r7, #56	@ 0x38
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40028000 	.word	0x40028000
 8004200:	40023800 	.word	0x40023800
 8004204:	40021800 	.word	0x40021800
 8004208:	40020800 	.word	0x40020800
 800420c:	40020000 	.word	0x40020000

08004210 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b0ac      	sub	sp, #176	@ 0xb0
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004218:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004228:	f107 0318 	add.w	r3, r7, #24
 800422c:	2284      	movs	r2, #132	@ 0x84
 800422e:	2100      	movs	r1, #0
 8004230:	4618      	mov	r0, r3
 8004232:	f013 fa11 	bl	8017658 <memset>
  if(hi2c->Instance==I2C1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a44      	ldr	r2, [pc, #272]	@ (800434c <HAL_I2C_MspInit+0x13c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d13d      	bne.n	80042bc <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004240:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004244:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004246:	2300      	movs	r3, #0
 8004248:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800424a:	f107 0318 	add.w	r3, r7, #24
 800424e:	4618      	mov	r0, r3
 8004250:	f006 fe96 	bl	800af80 <HAL_RCCEx_PeriphCLKConfig>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800425a:	f7ff fd49 	bl	8003cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	4b3c      	ldr	r3, [pc, #240]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	4a3b      	ldr	r2, [pc, #236]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	6313      	str	r3, [r2, #48]	@ 0x30
 800426a:	4b39      	ldr	r3, [pc, #228]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004276:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800427a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800427e:	2312      	movs	r3, #18
 8004280:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004284:	2301      	movs	r3, #1
 8004286:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428a:	2300      	movs	r3, #0
 800428c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004290:	2304      	movs	r3, #4
 8004292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004296:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800429a:	4619      	mov	r1, r3
 800429c:	482d      	ldr	r0, [pc, #180]	@ (8004354 <HAL_I2C_MspInit+0x144>)
 800429e:	f003 fcc7 	bl	8007c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 80042a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80042ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80042ae:	4b28      	ldr	r3, [pc, #160]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042b6:	613b      	str	r3, [r7, #16]
 80042b8:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80042ba:	e042      	b.n	8004342 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a25      	ldr	r2, [pc, #148]	@ (8004358 <HAL_I2C_MspInit+0x148>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d13d      	bne.n	8004342 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80042c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80042ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042d2:	f107 0318 	add.w	r3, r7, #24
 80042d6:	4618      	mov	r0, r3
 80042d8:	f006 fe52 	bl	800af80 <HAL_RCCEx_PeriphCLKConfig>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80042e2:	f7ff fd05 	bl	8003cf0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80042e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	4a19      	ldr	r2, [pc, #100]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 80042ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f2:	4b17      	ldr	r3, [pc, #92]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80042fe:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004302:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004306:	2312      	movs	r3, #18
 8004308:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800430c:	2301      	movs	r3, #1
 800430e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004312:	2303      	movs	r3, #3
 8004314:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004318:	2304      	movs	r3, #4
 800431a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800431e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004322:	4619      	mov	r1, r3
 8004324:	480d      	ldr	r0, [pc, #52]	@ (800435c <HAL_I2C_MspInit+0x14c>)
 8004326:	f003 fc83 	bl	8007c30 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800432a:	4b09      	ldr	r3, [pc, #36]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	4a08      	ldr	r2, [pc, #32]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 8004330:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004334:	6413      	str	r3, [r2, #64]	@ 0x40
 8004336:	4b06      	ldr	r3, [pc, #24]	@ (8004350 <HAL_I2C_MspInit+0x140>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
}
 8004342:	bf00      	nop
 8004344:	37b0      	adds	r7, #176	@ 0xb0
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40005400 	.word	0x40005400
 8004350:	40023800 	.word	0x40023800
 8004354:	40020400 	.word	0x40020400
 8004358:	40005c00 	.word	0x40005c00
 800435c:	40021c00 	.word	0x40021c00

08004360 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08e      	sub	sp, #56	@ 0x38
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a55      	ldr	r2, [pc, #340]	@ (80044d4 <HAL_LTDC_MspInit+0x174>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f040 80a3 	bne.w	80044ca <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004384:	4b54      	ldr	r3, [pc, #336]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 8004386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004388:	4a53      	ldr	r2, [pc, #332]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 800438a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800438e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004390:	4b51      	ldr	r3, [pc, #324]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 8004392:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004394:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004398:	623b      	str	r3, [r7, #32]
 800439a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800439c:	4b4e      	ldr	r3, [pc, #312]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a0:	4a4d      	ldr	r2, [pc, #308]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043a2:	f043 0310 	orr.w	r3, r3, #16
 80043a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a8:	4b4b      	ldr	r3, [pc, #300]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80043b4:	4b48      	ldr	r3, [pc, #288]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b8:	4a47      	ldr	r2, [pc, #284]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043be:	6313      	str	r3, [r2, #48]	@ 0x30
 80043c0:	4b45      	ldr	r3, [pc, #276]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c8:	61bb      	str	r3, [r7, #24]
 80043ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80043cc:	4b42      	ldr	r3, [pc, #264]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d0:	4a41      	ldr	r2, [pc, #260]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d8:	4b3f      	ldr	r3, [pc, #252]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80043e4:	4b3c      	ldr	r3, [pc, #240]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043e8:	4a3b      	ldr	r2, [pc, #236]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80043f0:	4b39      	ldr	r3, [pc, #228]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043fc:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 80043fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004400:	4a35      	ldr	r2, [pc, #212]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 8004402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004406:	6313      	str	r3, [r2, #48]	@ 0x30
 8004408:	4b33      	ldr	r3, [pc, #204]	@ (80044d8 <HAL_LTDC_MspInit+0x178>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004414:	2310      	movs	r3, #16
 8004416:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004418:	2302      	movs	r3, #2
 800441a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441c:	2300      	movs	r3, #0
 800441e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004420:	2300      	movs	r3, #0
 8004422:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004424:	230e      	movs	r3, #14
 8004426:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004428:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800442c:	4619      	mov	r1, r3
 800442e:	482b      	ldr	r0, [pc, #172]	@ (80044dc <HAL_LTDC_MspInit+0x17c>)
 8004430:	f003 fbfe 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004434:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004442:	2300      	movs	r3, #0
 8004444:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004446:	230e      	movs	r3, #14
 8004448:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800444a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800444e:	4619      	mov	r1, r3
 8004450:	4823      	ldr	r0, [pc, #140]	@ (80044e0 <HAL_LTDC_MspInit+0x180>)
 8004452:	f003 fbed 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004456:	23f7      	movs	r3, #247	@ 0xf7
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445a:	2302      	movs	r3, #2
 800445c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	2300      	movs	r3, #0
 8004460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004462:	2300      	movs	r3, #0
 8004464:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004466:	230e      	movs	r3, #14
 8004468:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800446a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800446e:	4619      	mov	r1, r3
 8004470:	481c      	ldr	r0, [pc, #112]	@ (80044e4 <HAL_LTDC_MspInit+0x184>)
 8004472:	f003 fbdd 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800447a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447c:	2302      	movs	r3, #2
 800447e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004484:	2300      	movs	r3, #0
 8004486:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004488:	2309      	movs	r3, #9
 800448a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800448c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004490:	4619      	mov	r1, r3
 8004492:	4815      	ldr	r0, [pc, #84]	@ (80044e8 <HAL_LTDC_MspInit+0x188>)
 8004494:	f003 fbcc 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004498:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800449e:	2302      	movs	r3, #2
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a6:	2300      	movs	r3, #0
 80044a8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044aa:	230e      	movs	r3, #14
 80044ac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80044ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044b2:	4619      	mov	r1, r3
 80044b4:	480d      	ldr	r0, [pc, #52]	@ (80044ec <HAL_LTDC_MspInit+0x18c>)
 80044b6:	f003 fbbb 	bl	8007c30 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80044ba:	2200      	movs	r2, #0
 80044bc:	2105      	movs	r1, #5
 80044be:	2058      	movs	r0, #88	@ 0x58
 80044c0:	f002 f872 	bl	80065a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80044c4:	2058      	movs	r0, #88	@ 0x58
 80044c6:	f002 f88b 	bl	80065e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80044ca:	bf00      	nop
 80044cc:	3738      	adds	r7, #56	@ 0x38
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40016800 	.word	0x40016800
 80044d8:	40023800 	.word	0x40023800
 80044dc:	40021000 	.word	0x40021000
 80044e0:	40022400 	.word	0x40022400
 80044e4:	40022800 	.word	0x40022800
 80044e8:	40021800 	.word	0x40021800
 80044ec:	40022000 	.word	0x40022000

080044f0 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08c      	sub	sp, #48	@ 0x30
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f8:	f107 031c 	add.w	r3, r7, #28
 80044fc:	2200      	movs	r2, #0
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	605a      	str	r2, [r3, #4]
 8004502:	609a      	str	r2, [r3, #8]
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3b      	ldr	r2, [pc, #236]	@ (80045fc <HAL_QSPI_MspInit+0x10c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d170      	bne.n	80045f4 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004512:	4b3b      	ldr	r3, [pc, #236]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004516:	4a3a      	ldr	r2, [pc, #232]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004518:	f043 0302 	orr.w	r3, r3, #2
 800451c:	6393      	str	r3, [r2, #56]	@ 0x38
 800451e:	4b38      	ldr	r3, [pc, #224]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	61bb      	str	r3, [r7, #24]
 8004528:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800452a:	4b35      	ldr	r3, [pc, #212]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	4a34      	ldr	r2, [pc, #208]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004530:	f043 0310 	orr.w	r3, r3, #16
 8004534:	6313      	str	r3, [r2, #48]	@ 0x30
 8004536:	4b32      	ldr	r3, [pc, #200]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004542:	4b2f      	ldr	r3, [pc, #188]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004546:	4a2e      	ldr	r2, [pc, #184]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004548:	f043 0302 	orr.w	r3, r3, #2
 800454c:	6313      	str	r3, [r2, #48]	@ 0x30
 800454e:	4b2c      	ldr	r3, [pc, #176]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800455a:	4b29      	ldr	r3, [pc, #164]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 800455c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455e:	4a28      	ldr	r2, [pc, #160]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	6313      	str	r3, [r2, #48]	@ 0x30
 8004566:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <HAL_QSPI_MspInit+0x110>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004572:	2304      	movs	r3, #4
 8004574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004576:	2302      	movs	r3, #2
 8004578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457e:	2303      	movs	r3, #3
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004582:	2309      	movs	r3, #9
 8004584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8004586:	f107 031c 	add.w	r3, r7, #28
 800458a:	4619      	mov	r1, r3
 800458c:	481d      	ldr	r0, [pc, #116]	@ (8004604 <HAL_QSPI_MspInit+0x114>)
 800458e:	f003 fb4f 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8004592:	2340      	movs	r3, #64	@ 0x40
 8004594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004596:	2302      	movs	r3, #2
 8004598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459a:	2300      	movs	r3, #0
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800459e:	2303      	movs	r3, #3
 80045a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80045a2:	230a      	movs	r3, #10
 80045a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80045a6:	f107 031c 	add.w	r3, r7, #28
 80045aa:	4619      	mov	r1, r3
 80045ac:	4816      	ldr	r0, [pc, #88]	@ (8004608 <HAL_QSPI_MspInit+0x118>)
 80045ae:	f003 fb3f 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045b2:	2304      	movs	r3, #4
 80045b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b6:	2302      	movs	r3, #2
 80045b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045be:	2303      	movs	r3, #3
 80045c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80045c2:	2309      	movs	r3, #9
 80045c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045c6:	f107 031c 	add.w	r3, r7, #28
 80045ca:	4619      	mov	r1, r3
 80045cc:	480e      	ldr	r0, [pc, #56]	@ (8004608 <HAL_QSPI_MspInit+0x118>)
 80045ce:	f003 fb2f 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80045d2:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80045d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045d8:	2302      	movs	r3, #2
 80045da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045e0:	2303      	movs	r3, #3
 80045e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80045e4:	2309      	movs	r3, #9
 80045e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045e8:	f107 031c 	add.w	r3, r7, #28
 80045ec:	4619      	mov	r1, r3
 80045ee:	4807      	ldr	r0, [pc, #28]	@ (800460c <HAL_QSPI_MspInit+0x11c>)
 80045f0:	f003 fb1e 	bl	8007c30 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80045f4:	bf00      	nop
 80045f6:	3730      	adds	r7, #48	@ 0x30
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	a0001000 	.word	0xa0001000
 8004600:	40023800 	.word	0x40023800
 8004604:	40021000 	.word	0x40021000
 8004608:	40020400 	.word	0x40020400
 800460c:	40020c00 	.word	0x40020c00

08004610 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b0a4      	sub	sp, #144	@ 0x90
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004618:	f107 030c 	add.w	r3, r7, #12
 800461c:	2284      	movs	r2, #132	@ 0x84
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f013 f819 	bl	8017658 <memset>
  if(hrtc->Instance==RTC)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a0e      	ldr	r2, [pc, #56]	@ (8004664 <HAL_RTC_MspInit+0x54>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d114      	bne.n	800465a <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004630:	2320      	movs	r3, #32
 8004632:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004638:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	4618      	mov	r0, r3
 8004640:	f006 fc9e 	bl	800af80 <HAL_RCCEx_PeriphCLKConfig>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800464a:	f7ff fb51 	bl	8003cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800464e:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <HAL_RTC_MspInit+0x58>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	4a05      	ldr	r2, [pc, #20]	@ (8004668 <HAL_RTC_MspInit+0x58>)
 8004654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004658:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 800465a:	bf00      	nop
 800465c:	3790      	adds	r7, #144	@ 0x90
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40002800 	.word	0x40002800
 8004668:	40023800 	.word	0x40023800

0800466c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	@ 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	f107 0314 	add.w	r3, r7, #20
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a25      	ldr	r2, [pc, #148]	@ (8004720 <HAL_SD_MspInit+0xb4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d144      	bne.n	8004718 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800468e:	4b25      	ldr	r3, [pc, #148]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	4a24      	ldr	r2, [pc, #144]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 8004694:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004698:	6453      	str	r3, [r2, #68]	@ 0x44
 800469a:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 800469c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800469e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 80046ac:	f043 0304 	orr.w	r3, r3, #4
 80046b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80046b2:	4b1c      	ldr	r3, [pc, #112]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046be:	4b19      	ldr	r3, [pc, #100]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	4a18      	ldr	r2, [pc, #96]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 80046c4:	f043 0308 	orr.w	r3, r3, #8
 80046c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ca:	4b16      	ldr	r3, [pc, #88]	@ (8004724 <HAL_SD_MspInit+0xb8>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	60bb      	str	r3, [r7, #8]
 80046d4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80046d6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80046da:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046dc:	2302      	movs	r3, #2
 80046de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e4:	2303      	movs	r3, #3
 80046e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80046e8:	230c      	movs	r3, #12
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046ec:	f107 0314 	add.w	r3, r7, #20
 80046f0:	4619      	mov	r1, r3
 80046f2:	480d      	ldr	r0, [pc, #52]	@ (8004728 <HAL_SD_MspInit+0xbc>)
 80046f4:	f003 fa9c 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80046f8:	2304      	movs	r3, #4
 80046fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fc:	2302      	movs	r3, #2
 80046fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004700:	2300      	movs	r3, #0
 8004702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004704:	2303      	movs	r3, #3
 8004706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004708:	230c      	movs	r3, #12
 800470a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	4619      	mov	r1, r3
 8004712:	4806      	ldr	r0, [pc, #24]	@ (800472c <HAL_SD_MspInit+0xc0>)
 8004714:	f003 fa8c 	bl	8007c30 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004718:	bf00      	nop
 800471a:	3728      	adds	r7, #40	@ 0x28
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40023800 	.word	0x40023800
 8004728:	40020800 	.word	0x40020800
 800472c:	40020c00 	.word	0x40020c00

08004730 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b0aa      	sub	sp, #168	@ 0xa8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004738:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	609a      	str	r2, [r3, #8]
 8004744:	60da      	str	r2, [r3, #12]
 8004746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004748:	f107 0310 	add.w	r3, r7, #16
 800474c:	2284      	movs	r2, #132	@ 0x84
 800474e:	2100      	movs	r1, #0
 8004750:	4618      	mov	r0, r3
 8004752:	f012 ff81 	bl	8017658 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 800475e:	d143      	bne.n	80047e8 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004760:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004764:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004766:	2364      	movs	r3, #100	@ 0x64
 8004768:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800476a:	2302      	movs	r3, #2
 800476c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800476e:	2302      	movs	r3, #2
 8004770:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004772:	2302      	movs	r3, #2
 8004774:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800477a:	f107 0310 	add.w	r3, r7, #16
 800477e:	4618      	mov	r0, r3
 8004780:	f006 fbfe 	bl	800af80 <HAL_RCCEx_PeriphCLKConfig>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 800478a:	f7ff fab1 	bl	8003cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800478e:	4b18      	ldr	r3, [pc, #96]	@ (80047f0 <HAL_SPDIFRX_MspInit+0xc0>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	4a17      	ldr	r2, [pc, #92]	@ (80047f0 <HAL_SPDIFRX_MspInit+0xc0>)
 8004794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004798:	6413      	str	r3, [r2, #64]	@ 0x40
 800479a:	4b15      	ldr	r3, [pc, #84]	@ (80047f0 <HAL_SPDIFRX_MspInit+0xc0>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047a6:	4b12      	ldr	r3, [pc, #72]	@ (80047f0 <HAL_SPDIFRX_MspInit+0xc0>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047aa:	4a11      	ldr	r2, [pc, #68]	@ (80047f0 <HAL_SPDIFRX_MspInit+0xc0>)
 80047ac:	f043 0308 	orr.w	r3, r3, #8
 80047b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80047b2:	4b0f      	ldr	r3, [pc, #60]	@ (80047f0 <HAL_SPDIFRX_MspInit+0xc0>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80047be:	2380      	movs	r3, #128	@ 0x80
 80047c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c4:	2302      	movs	r3, #2
 80047c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80047d6:	2308      	movs	r3, #8
 80047d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80047dc:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80047e0:	4619      	mov	r1, r3
 80047e2:	4804      	ldr	r0, [pc, #16]	@ (80047f4 <HAL_SPDIFRX_MspInit+0xc4>)
 80047e4:	f003 fa24 	bl	8007c30 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 80047e8:	bf00      	nop
 80047ea:	37a8      	adds	r7, #168	@ 0xa8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40020c00 	.word	0x40020c00

080047f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	@ 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_SPI_MspInit+0xb4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d144      	bne.n	80048a4 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800481a:	4b25      	ldr	r3, [pc, #148]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	4a24      	ldr	r2, [pc, #144]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 8004820:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004824:	6413      	str	r3, [r2, #64]	@ 0x40
 8004826:	4b22      	ldr	r3, [pc, #136]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004832:	4b1f      	ldr	r3, [pc, #124]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	4a1e      	ldr	r2, [pc, #120]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800483c:	6313      	str	r3, [r2, #48]	@ 0x30
 800483e:	4b1c      	ldr	r3, [pc, #112]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800484a:	4b19      	ldr	r3, [pc, #100]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	4a18      	ldr	r2, [pc, #96]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 8004850:	f043 0302 	orr.w	r3, r3, #2
 8004854:	6313      	str	r3, [r2, #48]	@ 0x30
 8004856:	4b16      	ldr	r3, [pc, #88]	@ (80048b0 <HAL_SPI_MspInit+0xb8>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004862:	2302      	movs	r3, #2
 8004864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004866:	2302      	movs	r3, #2
 8004868:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800486a:	2300      	movs	r3, #0
 800486c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486e:	2300      	movs	r3, #0
 8004870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004872:	2305      	movs	r3, #5
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004876:	f107 0314 	add.w	r3, r7, #20
 800487a:	4619      	mov	r1, r3
 800487c:	480d      	ldr	r0, [pc, #52]	@ (80048b4 <HAL_SPI_MspInit+0xbc>)
 800487e:	f003 f9d7 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004882:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004888:	2302      	movs	r3, #2
 800488a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004894:	2305      	movs	r3, #5
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004898:	f107 0314 	add.w	r3, r7, #20
 800489c:	4619      	mov	r1, r3
 800489e:	4806      	ldr	r0, [pc, #24]	@ (80048b8 <HAL_SPI_MspInit+0xc0>)
 80048a0:	f003 f9c6 	bl	8007c30 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80048a4:	bf00      	nop
 80048a6:	3728      	adds	r7, #40	@ 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40003800 	.word	0x40003800
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40022000 	.word	0x40022000
 80048b8:	40020400 	.word	0x40020400

080048bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	@ 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004984 <HAL_TIM_Base_MspInit+0xc8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10c      	bne.n	80048e8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80048da:	4b2b      	ldr	r3, [pc, #172]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80048e6:	e046      	b.n	8004976 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f0:	d10c      	bne.n	800490c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048f2:	4b25      	ldr	r3, [pc, #148]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f6:	4a24      	ldr	r2, [pc, #144]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 80048f8:	f043 0301 	orr.w	r3, r3, #1
 80048fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80048fe:	4b22      	ldr	r3, [pc, #136]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 8004900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	69bb      	ldr	r3, [r7, #24]
}
 800490a:	e034      	b.n	8004976 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1e      	ldr	r2, [pc, #120]	@ (800498c <HAL_TIM_Base_MspInit+0xd0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10c      	bne.n	8004930 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004916:	4b1c      	ldr	r3, [pc, #112]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 8004918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491a:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 800491c:	f043 0302 	orr.w	r3, r3, #2
 8004920:	6413      	str	r3, [r2, #64]	@ 0x40
 8004922:	4b19      	ldr	r3, [pc, #100]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 8004924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	697b      	ldr	r3, [r7, #20]
}
 800492e:	e022      	b.n	8004976 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a16      	ldr	r2, [pc, #88]	@ (8004990 <HAL_TIM_Base_MspInit+0xd4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d10c      	bne.n	8004954 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800493a:	4b13      	ldr	r3, [pc, #76]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493e:	4a12      	ldr	r2, [pc, #72]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	6413      	str	r3, [r2, #64]	@ 0x40
 8004946:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	693b      	ldr	r3, [r7, #16]
}
 8004952:	e010      	b.n	8004976 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a0e      	ldr	r2, [pc, #56]	@ (8004994 <HAL_TIM_Base_MspInit+0xd8>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d10b      	bne.n	8004976 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800495e:	4b0a      	ldr	r3, [pc, #40]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	4a09      	ldr	r2, [pc, #36]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 8004964:	f043 0302 	orr.w	r3, r3, #2
 8004968:	6453      	str	r3, [r2, #68]	@ 0x44
 800496a:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <HAL_TIM_Base_MspInit+0xcc>)
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
}
 8004976:	bf00      	nop
 8004978:	3724      	adds	r7, #36	@ 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40010000 	.word	0x40010000
 8004988:	40023800 	.word	0x40023800
 800498c:	40000400 	.word	0x40000400
 8004990:	40000c00 	.word	0x40000c00
 8004994:	40010400 	.word	0x40010400

08004998 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a0a      	ldr	r2, [pc, #40]	@ (80049d0 <HAL_TIM_PWM_MspInit+0x38>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d10b      	bne.n	80049c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80049aa:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	4a09      	ldr	r2, [pc, #36]	@ (80049d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80049b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80049b6:	4b07      	ldr	r3, [pc, #28]	@ (80049d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40001800 	.word	0x40001800
 80049d4:	40023800 	.word	0x40023800

080049d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08c      	sub	sp, #48	@ 0x30
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049e0:	f107 031c 	add.w	r3, r7, #28
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
 80049ea:	609a      	str	r2, [r3, #8]
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a56      	ldr	r2, [pc, #344]	@ (8004b50 <HAL_TIM_MspPostInit+0x178>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d11d      	bne.n	8004a36 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fa:	4b56      	ldr	r3, [pc, #344]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fe:	4a55      	ldr	r2, [pc, #340]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a06:	4b53      	ldr	r3, [pc, #332]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	61bb      	str	r3, [r7, #24]
 8004a10:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004a12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a20:	2300      	movs	r3, #0
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004a28:	f107 031c 	add.w	r3, r7, #28
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	484a      	ldr	r0, [pc, #296]	@ (8004b58 <HAL_TIM_MspPostInit+0x180>)
 8004a30:	f003 f8fe 	bl	8007c30 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004a34:	e087      	b.n	8004b46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3e:	d11d      	bne.n	8004a7c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a40:	4b44      	ldr	r3, [pc, #272]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a44:	4a43      	ldr	r2, [pc, #268]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004a46:	f043 0301 	orr.w	r3, r3, #1
 8004a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a4c:	4b41      	ldr	r3, [pc, #260]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004a58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a5e:	2302      	movs	r3, #2
 8004a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a66:	2300      	movs	r3, #0
 8004a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004a6e:	f107 031c 	add.w	r3, r7, #28
 8004a72:	4619      	mov	r1, r3
 8004a74:	4838      	ldr	r0, [pc, #224]	@ (8004b58 <HAL_TIM_MspPostInit+0x180>)
 8004a76:	f003 f8db 	bl	8007c30 <HAL_GPIO_Init>
}
 8004a7a:	e064      	b.n	8004b46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a36      	ldr	r2, [pc, #216]	@ (8004b5c <HAL_TIM_MspPostInit+0x184>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d11c      	bne.n	8004ac0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a86:	4b33      	ldr	r3, [pc, #204]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8a:	4a32      	ldr	r2, [pc, #200]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004a8c:	f043 0302 	orr.w	r3, r3, #2
 8004a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a92:	4b30      	ldr	r3, [pc, #192]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004aae:	2302      	movs	r3, #2
 8004ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004ab2:	f107 031c 	add.w	r3, r7, #28
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	4829      	ldr	r0, [pc, #164]	@ (8004b60 <HAL_TIM_MspPostInit+0x188>)
 8004aba:	f003 f8b9 	bl	8007c30 <HAL_GPIO_Init>
}
 8004abe:	e042      	b.n	8004b46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a27      	ldr	r2, [pc, #156]	@ (8004b64 <HAL_TIM_MspPostInit+0x18c>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d11c      	bne.n	8004b04 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004aca:	4b22      	ldr	r3, [pc, #136]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	4a21      	ldr	r2, [pc, #132]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae6:	2302      	movs	r3, #2
 8004ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aee:	2300      	movs	r3, #0
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004af2:	2302      	movs	r3, #2
 8004af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004af6:	f107 031c 	add.w	r3, r7, #28
 8004afa:	4619      	mov	r1, r3
 8004afc:	481a      	ldr	r0, [pc, #104]	@ (8004b68 <HAL_TIM_MspPostInit+0x190>)
 8004afe:	f003 f897 	bl	8007c30 <HAL_GPIO_Init>
}
 8004b02:	e020      	b.n	8004b46 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a18      	ldr	r2, [pc, #96]	@ (8004b6c <HAL_TIM_MspPostInit+0x194>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d11b      	bne.n	8004b46 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b0e:	4b11      	ldr	r3, [pc, #68]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	4a10      	ldr	r2, [pc, #64]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004b54 <HAL_TIM_MspPostInit+0x17c>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004b26:	2340      	movs	r3, #64	@ 0x40
 8004b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b32:	2300      	movs	r3, #0
 8004b34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004b36:	2309      	movs	r3, #9
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004b3a:	f107 031c 	add.w	r3, r7, #28
 8004b3e:	4619      	mov	r1, r3
 8004b40:	480b      	ldr	r0, [pc, #44]	@ (8004b70 <HAL_TIM_MspPostInit+0x198>)
 8004b42:	f003 f875 	bl	8007c30 <HAL_GPIO_Init>
}
 8004b46:	bf00      	nop
 8004b48:	3730      	adds	r7, #48	@ 0x30
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40023800 	.word	0x40023800
 8004b58:	40020000 	.word	0x40020000
 8004b5c:	40000400 	.word	0x40000400
 8004b60:	40020400 	.word	0x40020400
 8004b64:	40000c00 	.word	0x40000c00
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	40001800 	.word	0x40001800
 8004b70:	40021c00 	.word	0x40021c00

08004b74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b0ae      	sub	sp, #184	@ 0xb8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b7c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004b80:	2200      	movs	r2, #0
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	605a      	str	r2, [r3, #4]
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	60da      	str	r2, [r3, #12]
 8004b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b8c:	f107 0320 	add.w	r3, r7, #32
 8004b90:	2284      	movs	r2, #132	@ 0x84
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f012 fd5f 	bl	8017658 <memset>
  if(huart->Instance==USART1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a53      	ldr	r2, [pc, #332]	@ (8004cec <HAL_UART_MspInit+0x178>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d15d      	bne.n	8004c60 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004ba4:	2340      	movs	r3, #64	@ 0x40
 8004ba6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bac:	f107 0320 	add.w	r3, r7, #32
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f006 f9e5 	bl	800af80 <HAL_RCCEx_PeriphCLKConfig>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004bbc:	f7ff f898 	bl	8003cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc4:	4a4a      	ldr	r2, [pc, #296]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004bc6:	f043 0310 	orr.w	r3, r3, #16
 8004bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bcc:	4b48      	ldr	r3, [pc, #288]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bd8:	4b45      	ldr	r3, [pc, #276]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bdc:	4a44      	ldr	r2, [pc, #272]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004bde:	f043 0302 	orr.w	r3, r3, #2
 8004be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004be4:	4b42      	ldr	r3, [pc, #264]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004bf6:	f043 0301 	orr.w	r3, r3, #1
 8004bfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8004c08:	2380      	movs	r3, #128	@ 0x80
 8004c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c20:	2307      	movs	r3, #7
 8004c22:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004c26:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4831      	ldr	r0, [pc, #196]	@ (8004cf4 <HAL_UART_MspInit+0x180>)
 8004c2e:	f002 ffff 	bl	8007c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004c32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c4c:	2307      	movs	r3, #7
 8004c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004c52:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004c56:	4619      	mov	r1, r3
 8004c58:	4827      	ldr	r0, [pc, #156]	@ (8004cf8 <HAL_UART_MspInit+0x184>)
 8004c5a:	f002 ffe9 	bl	8007c30 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004c5e:	e040      	b.n	8004ce2 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a25      	ldr	r2, [pc, #148]	@ (8004cfc <HAL_UART_MspInit+0x188>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d13b      	bne.n	8004ce2 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004c6a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c6e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004c70:	2300      	movs	r3, #0
 8004c72:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c74:	f107 0320 	add.w	r3, r7, #32
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f006 f981 	bl	800af80 <HAL_RCCEx_PeriphCLKConfig>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004c84:	f7ff f834 	bl	8003cf0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c88:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8c:	4a18      	ldr	r2, [pc, #96]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004c8e:	f043 0320 	orr.w	r3, r3, #32
 8004c92:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c94:	4b16      	ldr	r3, [pc, #88]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ca0:	4b13      	ldr	r3, [pc, #76]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca4:	4a12      	ldr	r2, [pc, #72]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004ca6:	f043 0304 	orr.w	r3, r3, #4
 8004caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cac:	4b10      	ldr	r3, [pc, #64]	@ (8004cf0 <HAL_UART_MspInit+0x17c>)
 8004cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004cb8:	23c0      	movs	r3, #192	@ 0xc0
 8004cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cd6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4808      	ldr	r0, [pc, #32]	@ (8004d00 <HAL_UART_MspInit+0x18c>)
 8004cde:	f002 ffa7 	bl	8007c30 <HAL_GPIO_Init>
}
 8004ce2:	bf00      	nop
 8004ce4:	37b8      	adds	r7, #184	@ 0xb8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40011000 	.word	0x40011000
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40020400 	.word	0x40020400
 8004cf8:	40020000 	.word	0x40020000
 8004cfc:	40011400 	.word	0x40011400
 8004d00:	40020800 	.word	0x40020800

08004d04 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004d0a:	1d3b      	adds	r3, r7, #4
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	60da      	str	r2, [r3, #12]
 8004d16:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004d18:	4b3a      	ldr	r3, [pc, #232]	@ (8004e04 <HAL_FMC_MspInit+0x100>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d16d      	bne.n	8004dfc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004d20:	4b38      	ldr	r3, [pc, #224]	@ (8004e04 <HAL_FMC_MspInit+0x100>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004d26:	4b38      	ldr	r3, [pc, #224]	@ (8004e08 <HAL_FMC_MspInit+0x104>)
 8004d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d2a:	4a37      	ldr	r2, [pc, #220]	@ (8004e08 <HAL_FMC_MspInit+0x104>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	6393      	str	r3, [r2, #56]	@ 0x38
 8004d32:	4b35      	ldr	r3, [pc, #212]	@ (8004e08 <HAL_FMC_MspInit+0x104>)
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8004d3e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004d42:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d44:	2302      	movs	r3, #2
 8004d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d50:	230c      	movs	r3, #12
 8004d52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d54:	1d3b      	adds	r3, r7, #4
 8004d56:	4619      	mov	r1, r3
 8004d58:	482c      	ldr	r0, [pc, #176]	@ (8004e0c <HAL_FMC_MspInit+0x108>)
 8004d5a:	f002 ff69 	bl	8007c30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8004d5e:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004d62:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	2302      	movs	r3, #2
 8004d66:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d70:	230c      	movs	r3, #12
 8004d72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4825      	ldr	r0, [pc, #148]	@ (8004e10 <HAL_FMC_MspInit+0x10c>)
 8004d7a:	f002 ff59 	bl	8007c30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8004d7e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004d82:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d84:	2302      	movs	r3, #2
 8004d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004d90:	230c      	movs	r3, #12
 8004d92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d94:	1d3b      	adds	r3, r7, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	481e      	ldr	r0, [pc, #120]	@ (8004e14 <HAL_FMC_MspInit+0x110>)
 8004d9a:	f002 ff49 	bl	8007c30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8004d9e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004da2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da4:	2302      	movs	r3, #2
 8004da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dac:	2303      	movs	r3, #3
 8004dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004db0:	230c      	movs	r3, #12
 8004db2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004db4:	1d3b      	adds	r3, r7, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	4817      	ldr	r0, [pc, #92]	@ (8004e18 <HAL_FMC_MspInit+0x114>)
 8004dba:	f002 ff39 	bl	8007c30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8004dbe:	2328      	movs	r3, #40	@ 0x28
 8004dc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004dce:	230c      	movs	r3, #12
 8004dd0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004dd2:	1d3b      	adds	r3, r7, #4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4811      	ldr	r0, [pc, #68]	@ (8004e1c <HAL_FMC_MspInit+0x118>)
 8004dd8:	f002 ff2a 	bl	8007c30 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004ddc:	2308      	movs	r3, #8
 8004dde:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de0:	2302      	movs	r3, #2
 8004de2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de8:	2303      	movs	r3, #3
 8004dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004dec:	230c      	movs	r3, #12
 8004dee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004df0:	1d3b      	adds	r3, r7, #4
 8004df2:	4619      	mov	r1, r3
 8004df4:	480a      	ldr	r0, [pc, #40]	@ (8004e20 <HAL_FMC_MspInit+0x11c>)
 8004df6:	f002 ff1b 	bl	8007c30 <HAL_GPIO_Init>
 8004dfa:	e000      	b.n	8004dfe <HAL_FMC_MspInit+0xfa>
    return;
 8004dfc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20002420 	.word	0x20002420
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40021800 	.word	0x40021800
 8004e14:	40020c00 	.word	0x40020c00
 8004e18:	40021400 	.word	0x40021400
 8004e1c:	40021c00 	.word	0x40021c00
 8004e20:	40020800 	.word	0x40020800

08004e24 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004e2c:	f7ff ff6a 	bl	8004d04 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b08a      	sub	sp, #40	@ 0x28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a2b      	ldr	r2, [pc, #172]	@ (8004ef4 <HAL_SAI_MspInit+0xbc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d124      	bne.n	8004e94 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004e4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef8 <HAL_SAI_MspInit+0xc0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004e52:	4b2a      	ldr	r3, [pc, #168]	@ (8004efc <HAL_SAI_MspInit+0xc4>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	4a29      	ldr	r2, [pc, #164]	@ (8004efc <HAL_SAI_MspInit+0xc4>)
 8004e58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e5e:	4b27      	ldr	r3, [pc, #156]	@ (8004efc <HAL_SAI_MspInit+0xc4>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e66:	613b      	str	r3, [r7, #16]
 8004e68:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004e6a:	4b23      	ldr	r3, [pc, #140]	@ (8004ef8 <HAL_SAI_MspInit+0xc0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	4a21      	ldr	r2, [pc, #132]	@ (8004ef8 <HAL_SAI_MspInit+0xc0>)
 8004e72:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004e74:	23f0      	movs	r3, #240	@ 0xf0
 8004e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e80:	2300      	movs	r3, #0
 8004e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004e84:	230a      	movs	r3, #10
 8004e86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004e88:	f107 0314 	add.w	r3, r7, #20
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	481c      	ldr	r0, [pc, #112]	@ (8004f00 <HAL_SAI_MspInit+0xc8>)
 8004e90:	f002 fece 	bl	8007c30 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a1a      	ldr	r2, [pc, #104]	@ (8004f04 <HAL_SAI_MspInit+0xcc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d125      	bne.n	8004eea <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8004e9e:	4b16      	ldr	r3, [pc, #88]	@ (8004ef8 <HAL_SAI_MspInit+0xc0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10b      	bne.n	8004ebe <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004ea6:	4b15      	ldr	r3, [pc, #84]	@ (8004efc <HAL_SAI_MspInit+0xc4>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <HAL_SAI_MspInit+0xc4>)
 8004eac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004eb2:	4b12      	ldr	r3, [pc, #72]	@ (8004efc <HAL_SAI_MspInit+0xc4>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8004ef8 <HAL_SAI_MspInit+0xc0>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ef8 <HAL_SAI_MspInit+0xc0>)
 8004ec6:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004ec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004eda:	230a      	movs	r3, #10
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8004ede:	f107 0314 	add.w	r3, r7, #20
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4808      	ldr	r0, [pc, #32]	@ (8004f08 <HAL_SAI_MspInit+0xd0>)
 8004ee6:	f002 fea3 	bl	8007c30 <HAL_GPIO_Init>

    }
}
 8004eea:	bf00      	nop
 8004eec:	3728      	adds	r7, #40	@ 0x28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40015c04 	.word	0x40015c04
 8004ef8:	20002424 	.word	0x20002424
 8004efc:	40023800 	.word	0x40023800
 8004f00:	40022000 	.word	0x40022000
 8004f04:	40015c24 	.word	0x40015c24
 8004f08:	40021800 	.word	0x40021800

08004f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08e      	sub	sp, #56	@ 0x38
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004f1c:	4b33      	ldr	r3, [pc, #204]	@ (8004fec <HAL_InitTick+0xe0>)
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	4a32      	ldr	r2, [pc, #200]	@ (8004fec <HAL_InitTick+0xe0>)
 8004f22:	f043 0310 	orr.w	r3, r3, #16
 8004f26:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f28:	4b30      	ldr	r3, [pc, #192]	@ (8004fec <HAL_InitTick+0xe0>)
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f34:	f107 0210 	add.w	r2, r7, #16
 8004f38:	f107 0314 	add.w	r3, r7, #20
 8004f3c:	4611      	mov	r1, r2
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f005 ffec 	bl	800af1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004f4e:	f005 ffbd 	bl	800aecc <HAL_RCC_GetPCLK1Freq>
 8004f52:	6378      	str	r0, [r7, #52]	@ 0x34
 8004f54:	e004      	b.n	8004f60 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004f56:	f005 ffb9 	bl	800aecc <HAL_RCC_GetPCLK1Freq>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f62:	4a23      	ldr	r2, [pc, #140]	@ (8004ff0 <HAL_InitTick+0xe4>)
 8004f64:	fba2 2303 	umull	r2, r3, r2, r3
 8004f68:	0c9b      	lsrs	r3, r3, #18
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004f6e:	4b21      	ldr	r3, [pc, #132]	@ (8004ff4 <HAL_InitTick+0xe8>)
 8004f70:	4a21      	ldr	r2, [pc, #132]	@ (8004ff8 <HAL_InitTick+0xec>)
 8004f72:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004f74:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff4 <HAL_InitTick+0xe8>)
 8004f76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004f7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ff4 <HAL_InitTick+0xe8>)
 8004f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004f82:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff4 <HAL_InitTick+0xe8>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f88:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <HAL_InitTick+0xe8>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f8e:	4b19      	ldr	r3, [pc, #100]	@ (8004ff4 <HAL_InitTick+0xe8>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004f94:	4817      	ldr	r0, [pc, #92]	@ (8004ff4 <HAL_InitTick+0xe8>)
 8004f96:	f008 fd72 	bl	800da7e <HAL_TIM_Base_Init>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004fa8:	4812      	ldr	r0, [pc, #72]	@ (8004ff4 <HAL_InitTick+0xe8>)
 8004faa:	f008 fdbf 	bl	800db2c <HAL_TIM_Base_Start_IT>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004fb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d111      	bne.n	8004fe0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004fbc:	2036      	movs	r0, #54	@ 0x36
 8004fbe:	f001 fb0f 	bl	80065e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b0f      	cmp	r3, #15
 8004fc6:	d808      	bhi.n	8004fda <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004fc8:	2200      	movs	r2, #0
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	2036      	movs	r0, #54	@ 0x36
 8004fce:	f001 faeb 	bl	80065a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ffc <HAL_InitTick+0xf0>)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e002      	b.n	8004fe0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3738      	adds	r7, #56	@ 0x38
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	431bde83 	.word	0x431bde83
 8004ff4:	20002428 	.word	0x20002428
 8004ff8:	40001000 	.word	0x40001000
 8004ffc:	20000068 	.word	0x20000068

08005000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005004:	bf00      	nop
 8005006:	e7fd      	b.n	8005004 <NMI_Handler+0x4>

08005008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800500c:	bf00      	nop
 800500e:	e7fd      	b.n	800500c <HardFault_Handler+0x4>

08005010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <MemManage_Handler+0x4>

08005018 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800501c:	bf00      	nop
 800501e:	e7fd      	b.n	800501c <BusFault_Handler+0x4>

08005020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <UsageFault_Handler+0x4>

08005028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800502c:	bf00      	nop
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800503c:	4802      	ldr	r0, [pc, #8]	@ (8005048 <TIM6_DAC_IRQHandler+0x10>)
 800503e:	f008 fe44 	bl	800dcca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005042:	bf00      	nop
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20002428 	.word	0x20002428

0800504c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005050:	4802      	ldr	r0, [pc, #8]	@ (800505c <OTG_FS_IRQHandler+0x10>)
 8005052:	f002 ffca 	bl	8007fea <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20012c24 	.word	0x20012c24

08005060 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005064:	4802      	ldr	r0, [pc, #8]	@ (8005070 <LTDC_IRQHandler+0x10>)
 8005066:	f004 ff37 	bl	8009ed8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20001b34 	.word	0x20001b34

08005074 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8005078:	4802      	ldr	r0, [pc, #8]	@ (8005084 <DMA2D_IRQHandler+0x10>)
 800507a:	f002 f8e9 	bl	8007250 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	2000199c 	.word	0x2000199c

08005088 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800508c:	4802      	ldr	r0, [pc, #8]	@ (8005098 <DMA2_Stream1_IRQHandler+0x10>)
 800508e:	f001 fe1f 	bl	8006cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	200023ac 	.word	0x200023ac

0800509c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 80050a0:	4b09      	ldr	r3, [pc, #36]	@ (80050c8 <USART6_IRQHandler+0x2c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	f003 0310 	and.w	r3, r3, #16
 80050aa:	2b10      	cmp	r3, #16
 80050ac:	d106      	bne.n	80050bc <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 80050ae:	4b06      	ldr	r3, [pc, #24]	@ (80050c8 <USART6_IRQHandler+0x2c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2210      	movs	r2, #16
 80050b4:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 80050b6:	4804      	ldr	r0, [pc, #16]	@ (80050c8 <USART6_IRQHandler+0x2c>)
 80050b8:	f000 fe18 	bl	8005cec <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80050bc:	4802      	ldr	r0, [pc, #8]	@ (80050c8 <USART6_IRQHandler+0x2c>)
 80050be:	f00a f84f 	bl	800f160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200020d4 	.word	0x200020d4

080050cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e00a      	b.n	80050f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80050de:	f3af 8000 	nop.w
 80050e2:	4601      	mov	r1, r0
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	60ba      	str	r2, [r7, #8]
 80050ea:	b2ca      	uxtb	r2, r1
 80050ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	3301      	adds	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	dbf0      	blt.n	80050de <_read+0x12>
  }

  return len;
 80050fc:	687b      	ldr	r3, [r7, #4]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	e009      	b.n	800512c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	60ba      	str	r2, [r7, #8]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	3301      	adds	r3, #1
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	dbf1      	blt.n	8005118 <_write+0x12>
  }
  return len;
 8005134:	687b      	ldr	r3, [r7, #4]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3718      	adds	r7, #24
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <_close>:

int _close(int file)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005146:	f04f 33ff 	mov.w	r3, #4294967295
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005166:	605a      	str	r2, [r3, #4]
  return 0;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <_isatty>:

int _isatty(int file)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800517e:	2301      	movs	r3, #1
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051b0:	4a14      	ldr	r2, [pc, #80]	@ (8005204 <_sbrk+0x5c>)
 80051b2:	4b15      	ldr	r3, [pc, #84]	@ (8005208 <_sbrk+0x60>)
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051bc:	4b13      	ldr	r3, [pc, #76]	@ (800520c <_sbrk+0x64>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051c4:	4b11      	ldr	r3, [pc, #68]	@ (800520c <_sbrk+0x64>)
 80051c6:	4a12      	ldr	r2, [pc, #72]	@ (8005210 <_sbrk+0x68>)
 80051c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ca:	4b10      	ldr	r3, [pc, #64]	@ (800520c <_sbrk+0x64>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d207      	bcs.n	80051e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051d8:	f012 fac6 	bl	8017768 <__errno>
 80051dc:	4603      	mov	r3, r0
 80051de:	220c      	movs	r2, #12
 80051e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	e009      	b.n	80051fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051e8:	4b08      	ldr	r3, [pc, #32]	@ (800520c <_sbrk+0x64>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ee:	4b07      	ldr	r3, [pc, #28]	@ (800520c <_sbrk+0x64>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	4a05      	ldr	r2, [pc, #20]	@ (800520c <_sbrk+0x64>)
 80051f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20050000 	.word	0x20050000
 8005208:	00000400 	.word	0x00000400
 800520c:	20002474 	.word	0x20002474
 8005210:	20013150 	.word	0x20013150

08005214 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005218:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <SystemInit+0x20>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	4a05      	ldr	r2, [pc, #20]	@ (8005234 <SystemInit+0x20>)
 8005220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005228:	bf00      	nop
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	e000ed00 	.word	0xe000ed00

08005238 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 800523c:	f000 f803 	bl	8005246 <TIME_Platform_GetCurrentMs>
 8005240:	4603      	mov	r3, r0
}
 8005242:	4618      	mov	r0, r3
 8005244:	bd80      	pop	{r7, pc}

08005246 <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 800524a:	f000 fe2d 	bl	8005ea8 <HAL_GetTick>
 800524e:	4603      	mov	r3, r0
}
 8005250:	4618      	mov	r0, r3
 8005252:	bd80      	pop	{r7, pc}

08005254 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d102      	bne.n	800526a <LOGGER_Connect+0x16>
 8005264:	f04f 33ff 	mov.w	r3, #4294967295
 8005268:	e016      	b.n	8005298 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 800526a:	223f      	movs	r2, #63	@ 0x3f
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	480c      	ldr	r0, [pc, #48]	@ (80052a0 <LOGGER_Connect+0x4c>)
 8005270:	f012 f9fa 	bl	8017668 <strncpy>
    current_config.server_port = port;
 8005274:	4a0b      	ldr	r2, [pc, #44]	@ (80052a4 <LOGGER_Connect+0x50>)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 800527a:	6839      	ldr	r1, [r7, #0]
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8ef 	bl	8005460 <LOGGER_Platform_Connect>
 8005282:	4603      	mov	r3, r0
 8005284:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8005286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d102      	bne.n	8005294 <LOGGER_Connect+0x40>
        logger_connected = true;
 800528e:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <LOGGER_Connect+0x54>)
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8005294:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000023 	.word	0x20000023
 80052a4:	20000020 	.word	0x20000020
 80052a8:	20002478 	.word	0x20002478

080052ac <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 80052b6:	4a04      	ldr	r2, [pc, #16]	@ (80052c8 <LOGGER_SetFilterLevel+0x1c>)
 80052b8:	79fb      	ldrb	r3, [r7, #7]
 80052ba:	7013      	strb	r3, [r2, #0]
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	2000247a 	.word	0x2000247a

080052cc <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 80052d6:	4a0d      	ldr	r2, [pc, #52]	@ (800530c <LOGGER_SetMode+0x40>)
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d103      	bne.n	80052ea <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 80052e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <LOGGER_SetMode+0x44>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 80052e8:	e00b      	b.n	8005302 <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d002      	beq.n	80052f6 <LOGGER_SetMode+0x2a>
 80052f0:	79fb      	ldrb	r3, [r7, #7]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d105      	bne.n	8005302 <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 80052f6:	f7fc fb6b 	bl	80019d0 <SDStorage_IsReady>
 80052fa:	4603      	mov	r3, r0
 80052fc:	461a      	mov	r2, r3
 80052fe:	4b04      	ldr	r3, [pc, #16]	@ (8005310 <LOGGER_SetMode+0x44>)
 8005300:	701a      	strb	r2, [r3, #0]
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20002479 	.word	0x20002479
 8005310:	20002478 	.word	0x20002478

08005314 <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8005314:	b40e      	push	{r1, r2, r3}
 8005316:	b590      	push	{r4, r7, lr}
 8005318:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 800531c:	af00      	add	r7, sp, #0
 800531e:	4602      	mov	r2, r0
 8005320:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005324:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8005328:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 800532a:	4b48      	ldr	r3, [pc, #288]	@ (800544c <LOGGER_SendFormatted+0x138>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005332:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8005336:	7812      	ldrb	r2, [r2, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d379      	bcc.n	8005430 <LOGGER_SendFormatted+0x11c>
    if (level < current_config.level) return;
 800533c:	4b44      	ldr	r3, [pc, #272]	@ (8005450 <LOGGER_SendFormatted+0x13c>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8005344:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d372      	bcc.n	8005434 <LOGGER_SendFormatted+0x120>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 800534e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005352:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005356:	4a3f      	ldr	r2, [pc, #252]	@ (8005454 <LOGGER_SendFormatted+0x140>)
 8005358:	461c      	mov	r4, r3
 800535a:	4613      	mov	r3, r2
 800535c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800535e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8005362:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005366:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005370:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8005374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005378:	f107 001c 	add.w	r0, r7, #28
 800537c:	4a36      	ldr	r2, [pc, #216]	@ (8005458 <LOGGER_SendFormatted+0x144>)
 800537e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005382:	f012 f891 	bl	80174a8 <sniprintf>
 8005386:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 800538a:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 800538e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8005392:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8005396:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 8005398:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800539c:	f107 021c 	add.w	r2, r7, #28
 80053a0:	18d0      	adds	r0, r2, r3
 80053a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 80053a6:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 80053aa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80053ae:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 80053b8:	f012 f940 	bl	801763c <vsniprintf>
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 80053bc:	4b27      	ldr	r3, [pc, #156]	@ (800545c <LOGGER_SendFormatted+0x148>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d01e      	beq.n	8005402 <LOGGER_SendFormatted+0xee>
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	dc3a      	bgt.n	800543e <LOGGER_SendFormatted+0x12a>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <LOGGER_SendFormatted+0xbe>
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d006      	beq.n	80053de <LOGGER_SendFormatted+0xca>
 80053d0:	e035      	b.n	800543e <LOGGER_SendFormatted+0x12a>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 80053d2:	f107 031c 	add.w	r3, r7, #28
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 f84e 	bl	8005478 <LOGGER_Platform_Send>
            break;
 80053dc:	e02f      	b.n	800543e <LOGGER_SendFormatted+0x12a>
            
        case LOGGER_MODE_SD_ONLY:
            if (SDStorage_IsReady()) {
 80053de:	f7fc faf7 	bl	80019d0 <SDStorage_IsReady>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d027      	beq.n	8005438 <LOGGER_SendFormatted+0x124>
                SDStorage_WriteLog(buffer, strlen(buffer));
 80053e8:	f107 031c 	add.w	r3, r7, #28
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fa ff19 	bl	8000224 <strlen>
 80053f2:	4602      	mov	r2, r0
 80053f4:	f107 031c 	add.w	r3, r7, #28
 80053f8:	4611      	mov	r1, r2
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fc f8b0 	bl	8001560 <SDStorage_WriteLog>
            }
            break;
 8005400:	e01a      	b.n	8005438 <LOGGER_SendFormatted+0x124>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 8005402:	f107 031c 	add.w	r3, r7, #28
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f836 	bl	8005478 <LOGGER_Platform_Send>
            // SD 출력 (에러 무시)
            if (SDStorage_IsReady()) {
 800540c:	f7fc fae0 	bl	80019d0 <SDStorage_IsReady>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d012      	beq.n	800543c <LOGGER_SendFormatted+0x128>
                SDStorage_WriteLog(buffer, strlen(buffer));
 8005416:	f107 031c 	add.w	r3, r7, #28
 800541a:	4618      	mov	r0, r3
 800541c:	f7fa ff02 	bl	8000224 <strlen>
 8005420:	4602      	mov	r2, r0
 8005422:	f107 031c 	add.w	r3, r7, #28
 8005426:	4611      	mov	r1, r2
 8005428:	4618      	mov	r0, r3
 800542a:	f7fc f899 	bl	8001560 <SDStorage_WriteLog>
            }
            break;
 800542e:	e005      	b.n	800543c <LOGGER_SendFormatted+0x128>
    if (level < filter_level) return;
 8005430:	bf00      	nop
 8005432:	e004      	b.n	800543e <LOGGER_SendFormatted+0x12a>
    if (level < current_config.level) return;
 8005434:	bf00      	nop
 8005436:	e002      	b.n	800543e <LOGGER_SendFormatted+0x12a>
            break;
 8005438:	bf00      	nop
 800543a:	e000      	b.n	800543e <LOGGER_SendFormatted+0x12a>
            break;
 800543c:	bf00      	nop
    }
}
 800543e:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8005442:	46bd      	mov	sp, r7
 8005444:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005448:	b003      	add	sp, #12
 800544a:	4770      	bx	lr
 800544c:	2000247a 	.word	0x2000247a
 8005450:	20000020 	.word	0x20000020
 8005454:	0801ae0c 	.word	0x0801ae0c
 8005458:	0801ae1c 	.word	0x0801ae1c
 800545c:	20002479 	.word	0x20002479

08005460 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <LOGGER_Platform_Send+0x14>
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	e01c      	b.n	80054c6 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7fa fec9 	bl	8000224 <strlen>
 8005492:	4603      	mov	r3, r0
 8005494:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dd12      	ble.n	80054c2 <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	b29a      	uxth	r2, r3
 80054a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	480a      	ldr	r0, [pc, #40]	@ (80054d0 <LOGGER_Platform_Send+0x58>)
 80054a8:	f009 fc32 	bl	800ed10 <HAL_UART_Transmit>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80054b2:	2364      	movs	r3, #100	@ 0x64
 80054b4:	2202      	movs	r2, #2
 80054b6:	4907      	ldr	r1, [pc, #28]	@ (80054d4 <LOGGER_Platform_Send+0x5c>)
 80054b8:	4805      	ldr	r0, [pc, #20]	@ (80054d0 <LOGGER_Platform_Send+0x58>)
 80054ba:	f009 fc29 	bl	800ed10 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	e001      	b.n	80054c6 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 80054c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	2000204c 	.word	0x2000204c
 80054d4:	0801ae20 	.word	0x0801ae20

080054d8 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 80054e6:	4913      	ldr	r1, [pc, #76]	@ (8005534 <UART_Connect+0x5c>)
 80054e8:	2003      	movs	r0, #3
 80054ea:	f7ff ff13 	bl	8005314 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e01c      	b.n	800552c <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	4910      	ldr	r1, [pc, #64]	@ (8005538 <UART_Connect+0x60>)
 80054f6:	2001      	movs	r0, #1
 80054f8:	f7ff ff0c 	bl	8005314 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f8ef 	bl	80056e0 <UART_Platform_Connect>
 8005502:	4603      	mov	r3, r0
 8005504:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <UART_Connect+0x46>
        uart_connected = true;
 800550c:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <UART_Connect+0x64>)
 800550e:	2201      	movs	r2, #1
 8005510:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	490a      	ldr	r1, [pc, #40]	@ (8005540 <UART_Connect+0x68>)
 8005516:	2001      	movs	r0, #1
 8005518:	f7ff fefc 	bl	8005314 <LOGGER_SendFormatted>
 800551c:	e005      	b.n	800552a <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 800551e:	7bfb      	ldrb	r3, [r7, #15]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	4908      	ldr	r1, [pc, #32]	@ (8005544 <UART_Connect+0x6c>)
 8005524:	2003      	movs	r0, #3
 8005526:	f7ff fef5 	bl	8005314 <LOGGER_SendFormatted>
    }

    return status;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	0801ae24 	.word	0x0801ae24
 8005538:	0801ae48 	.word	0x0801ae48
 800553c:	2000247b 	.word	0x2000247b
 8005540:	0801ae60 	.word	0x0801ae60
 8005544:	0801ae84 	.word	0x0801ae84

08005548 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8005550:	4b19      	ldr	r3, [pc, #100]	@ (80055b8 <UART_Send+0x70>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f083 0301 	eor.w	r3, r3, #1
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d005      	beq.n	800556a <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 800555e:	4917      	ldr	r1, [pc, #92]	@ (80055bc <UART_Send+0x74>)
 8005560:	2003      	movs	r0, #3
 8005562:	f7ff fed7 	bl	8005314 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e022      	b.n	80055b0 <UART_Send+0x68>
    }

    if (data == NULL) {
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d105      	bne.n	800557c <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8005570:	4913      	ldr	r1, [pc, #76]	@ (80055c0 <UART_Send+0x78>)
 8005572:	2003      	movs	r0, #3
 8005574:	f7ff fece 	bl	8005314 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e019      	b.n	80055b0 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4911      	ldr	r1, [pc, #68]	@ (80055c4 <UART_Send+0x7c>)
 8005580:	2000      	movs	r0, #0
 8005582:	f7ff fec7 	bl	8005314 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f992 	bl	80058b0 <UART_Platform_Send>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d105      	bne.n	80055a2 <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	490b      	ldr	r1, [pc, #44]	@ (80055c8 <UART_Send+0x80>)
 800559a:	2000      	movs	r0, #0
 800559c:	f7ff feba 	bl	8005314 <LOGGER_SendFormatted>
 80055a0:	e005      	b.n	80055ae <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	4909      	ldr	r1, [pc, #36]	@ (80055cc <UART_Send+0x84>)
 80055a8:	2003      	movs	r0, #3
 80055aa:	f7ff feb3 	bl	8005314 <LOGGER_SendFormatted>
    }

    return status;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	2000247b 	.word	0x2000247b
 80055bc:	0801aeb0 	.word	0x0801aeb0
 80055c0:	0801aed4 	.word	0x0801aed4
 80055c4:	0801aef4 	.word	0x0801aef4
 80055c8:	0801af0c 	.word	0x0801af0c
 80055cc:	0801af28 	.word	0x0801af28

080055d0 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 80055dc:	4b22      	ldr	r3, [pc, #136]	@ (8005668 <UART_Receive+0x98>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f083 0301 	eor.w	r3, r3, #1
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 80055ea:	4920      	ldr	r1, [pc, #128]	@ (800566c <UART_Receive+0x9c>)
 80055ec:	2003      	movs	r0, #3
 80055ee:	f7ff fe91 	bl	8005314 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e034      	b.n	8005660 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <UART_Receive+0x38>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	dd02      	ble.n	8005608 <UART_Receive+0x38>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005608:	4919      	ldr	r1, [pc, #100]	@ (8005670 <UART_Receive+0xa0>)
 800560a:	2003      	movs	r0, #3
 800560c:	f7ff fe82 	bl	8005314 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e025      	b.n	8005660 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	4917      	ldr	r1, [pc, #92]	@ (8005674 <UART_Receive+0xa4>)
 8005618:	2000      	movs	r0, #0
 800561a:	f7ff fe7b 	bl	8005314 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f980 	bl	8005928 <UART_Platform_Receive>
 8005628:	4603      	mov	r3, r0
 800562a:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d107      	bne.n	8005642 <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	490f      	ldr	r1, [pc, #60]	@ (8005678 <UART_Receive+0xa8>)
 800563a:	2000      	movs	r0, #0
 800563c:	f7ff fe6a 	bl	8005314 <LOGGER_SendFormatted>
 8005640:	e00d      	b.n	800565e <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8005642:	7dfb      	ldrb	r3, [r7, #23]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d104      	bne.n	8005652 <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8005648:	490c      	ldr	r1, [pc, #48]	@ (800567c <UART_Receive+0xac>)
 800564a:	2000      	movs	r0, #0
 800564c:	f7ff fe62 	bl	8005314 <LOGGER_SendFormatted>
 8005650:	e005      	b.n	800565e <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	461a      	mov	r2, r3
 8005656:	490a      	ldr	r1, [pc, #40]	@ (8005680 <UART_Receive+0xb0>)
 8005658:	2003      	movs	r0, #3
 800565a:	f7ff fe5b 	bl	8005314 <LOGGER_SendFormatted>
    }

    return status;
 800565e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	2000247b 	.word	0x2000247b
 800566c:	0801af4c 	.word	0x0801af4c
 8005670:	0801af74 	.word	0x0801af74
 8005674:	0801afa0 	.word	0x0801afa0
 8005678:	0801afc8 	.word	0x0801afc8
 800567c:	0801afe8 	.word	0x0801afe8
 8005680:	0801b000 	.word	0x0801b000

08005684 <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 800568e:	e007      	b.n	80056a0 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8005690:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <flush_rx_buffer+0x58>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	b2db      	uxtb	r3, r3
 8005698:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3301      	adds	r3, #1
 800569e:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80056a0:	4b0e      	ldr	r3, [pc, #56]	@ (80056dc <flush_rx_buffer+0x58>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d106      	bne.n	80056bc <flush_rx_buffer+0x38>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b63      	cmp	r3, #99	@ 0x63
 80056b2:	dded      	ble.n	8005690 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80056b4:	e002      	b.n	80056bc <flush_rx_buffer+0x38>
        flush_count++;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3301      	adds	r3, #1
 80056ba:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 80056bc:	1cf9      	adds	r1, r7, #3
 80056be:	2301      	movs	r3, #1
 80056c0:	2201      	movs	r2, #1
 80056c2:	4806      	ldr	r0, [pc, #24]	@ (80056dc <flush_rx_buffer+0x58>)
 80056c4:	f009 fbad 	bl	800ee22 <HAL_UART_Receive>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <flush_rx_buffer+0x50>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b63      	cmp	r3, #99	@ 0x63
 80056d2:	ddf0      	ble.n	80056b6 <flush_rx_buffer+0x32>
    }
}
 80056d4:	bf00      	nop
 80056d6:	3708      	adds	r7, #8
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	200020d4 	.word	0x200020d4

080056e0 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 80056e8:	4b5b      	ldr	r3, [pc, #364]	@ (8005858 <UART_Platform_Connect+0x178>)
 80056ea:	2201      	movs	r2, #1
 80056ec:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 80056ee:	4b5b      	ldr	r3, [pc, #364]	@ (800585c <UART_Platform_Connect+0x17c>)
 80056f0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80056f2:	4b5a      	ldr	r3, [pc, #360]	@ (800585c <UART_Platform_Connect+0x17c>)
 80056f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056f8:	4959      	ldr	r1, [pc, #356]	@ (8005860 <UART_Platform_Connect+0x180>)
 80056fa:	2001      	movs	r0, #1
 80056fc:	f7ff fe0a 	bl	8005314 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8005700:	4b56      	ldr	r3, [pc, #344]	@ (800585c <UART_Platform_Connect+0x17c>)
 8005702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00e      	beq.n	8005726 <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005708:	4956      	ldr	r1, [pc, #344]	@ (8005864 <UART_Platform_Connect+0x184>)
 800570a:	2001      	movs	r0, #1
 800570c:	f7ff fe02 	bl	8005314 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005710:	4b52      	ldr	r3, [pc, #328]	@ (800585c <UART_Platform_Connect+0x17c>)
 8005712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005714:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	4952      	ldr	r1, [pc, #328]	@ (8005868 <UART_Platform_Connect+0x188>)
 800571e:	2001      	movs	r0, #1
 8005720:	f7ff fdf8 	bl	8005314 <LOGGER_SendFormatted>
 8005724:	e018      	b.n	8005758 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8005726:	4951      	ldr	r1, [pc, #324]	@ (800586c <UART_Platform_Connect+0x18c>)
 8005728:	2003      	movs	r0, #3
 800572a:	f7ff fdf3 	bl	8005314 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 800572e:	4b4b      	ldr	r3, [pc, #300]	@ (800585c <UART_Platform_Connect+0x17c>)
 8005730:	4a4f      	ldr	r2, [pc, #316]	@ (8005870 <UART_Platform_Connect+0x190>)
 8005732:	675a      	str	r2, [r3, #116]	@ 0x74
 8005734:	4b4e      	ldr	r3, [pc, #312]	@ (8005870 <UART_Platform_Connect+0x190>)
 8005736:	4a49      	ldr	r2, [pc, #292]	@ (800585c <UART_Platform_Connect+0x17c>)
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 800573a:	4b48      	ldr	r3, [pc, #288]	@ (800585c <UART_Platform_Connect+0x17c>)
 800573c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800573e:	2b00      	cmp	r3, #0
 8005740:	d004      	beq.n	800574c <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8005742:	494c      	ldr	r1, [pc, #304]	@ (8005874 <UART_Platform_Connect+0x194>)
 8005744:	2001      	movs	r0, #1
 8005746:	f7ff fde5 	bl	8005314 <LOGGER_SendFormatted>
 800574a:	e005      	b.n	8005758 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 800574c:	494a      	ldr	r1, [pc, #296]	@ (8005878 <UART_Platform_Connect+0x198>)
 800574e:	2003      	movs	r0, #3
 8005750:	f7ff fde0 	bl	8005314 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e07a      	b.n	800584e <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005758:	4b48      	ldr	r3, [pc, #288]	@ (800587c <UART_Platform_Connect+0x19c>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8005760:	483e      	ldr	r0, [pc, #248]	@ (800585c <UART_Platform_Connect+0x17c>)
 8005762:	f009 fc6a 	bl	800f03a <HAL_UART_DMAStop>
        dma_receiving = false;
 8005766:	4b45      	ldr	r3, [pc, #276]	@ (800587c <UART_Platform_Connect+0x19c>)
 8005768:	2200      	movs	r2, #0
 800576a:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 800576c:	4944      	ldr	r1, [pc, #272]	@ (8005880 <UART_Platform_Connect+0x1a0>)
 800576e:	2001      	movs	r0, #1
 8005770:	f7ff fdd0 	bl	8005314 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8005774:	4b39      	ldr	r3, [pc, #228]	@ (800585c <UART_Platform_Connect+0x17c>)
 8005776:	2220      	movs	r2, #32
 8005778:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 800577a:	4b38      	ldr	r3, [pc, #224]	@ (800585c <UART_Platform_Connect+0x17c>)
 800577c:	2220      	movs	r2, #32
 800577e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8005782:	4b36      	ldr	r3, [pc, #216]	@ (800585c <UART_Platform_Connect+0x17c>)
 8005784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005786:	2b00      	cmp	r3, #0
 8005788:	d026      	beq.n	80057d8 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 800578a:	4b34      	ldr	r3, [pc, #208]	@ (800585c <UART_Platform_Connect+0x17c>)
 800578c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800578e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b01      	cmp	r3, #1
 8005796:	d01a      	beq.n	80057ce <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8005798:	493a      	ldr	r1, [pc, #232]	@ (8005884 <UART_Platform_Connect+0x1a4>)
 800579a:	2001      	movs	r0, #1
 800579c:	f7ff fdba 	bl	8005314 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 80057a0:	4b2e      	ldr	r3, [pc, #184]	@ (800585c <UART_Platform_Connect+0x17c>)
 80057a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 f943 	bl	8006a30 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 80057aa:	4b2c      	ldr	r3, [pc, #176]	@ (800585c <UART_Platform_Connect+0x17c>)
 80057ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f890 	bl	80068d4 <HAL_DMA_Init>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d005      	beq.n	80057c6 <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 80057ba:	4933      	ldr	r1, [pc, #204]	@ (8005888 <UART_Platform_Connect+0x1a8>)
 80057bc:	2003      	movs	r0, #3
 80057be:	f7ff fda9 	bl	8005314 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e043      	b.n	800584e <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 80057c6:	4931      	ldr	r1, [pc, #196]	@ (800588c <UART_Platform_Connect+0x1ac>)
 80057c8:	2001      	movs	r0, #1
 80057ca:	f7ff fda3 	bl	8005314 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80057ce:	4b23      	ldr	r3, [pc, #140]	@ (800585c <UART_Platform_Connect+0x17c>)
 80057d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 80057d8:	f7ff ff54 	bl	8005684 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 80057dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005890 <UART_Platform_Connect+0x1b0>)
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 80057e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005894 <UART_Platform_Connect+0x1b4>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 80057e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005898 <UART_Platform_Connect+0x1b8>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80057ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057f2:	2100      	movs	r1, #0
 80057f4:	4829      	ldr	r0, [pc, #164]	@ (800589c <UART_Platform_Connect+0x1bc>)
 80057f6:	f011 ff2f 	bl	8017658 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 80057fa:	4929      	ldr	r1, [pc, #164]	@ (80058a0 <UART_Platform_Connect+0x1c0>)
 80057fc:	2001      	movs	r0, #1
 80057fe:	f7ff fd89 	bl	8005314 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005802:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005806:	4925      	ldr	r1, [pc, #148]	@ (800589c <UART_Platform_Connect+0x1bc>)
 8005808:	4814      	ldr	r0, [pc, #80]	@ (800585c <UART_Platform_Connect+0x17c>)
 800580a:	f009 fbd2 	bl	800efb2 <HAL_UART_Receive_DMA>
 800580e:	4603      	mov	r3, r0
 8005810:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005812:	7bfb      	ldrb	r3, [r7, #15]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005818:	4b18      	ldr	r3, [pc, #96]	@ (800587c <UART_Platform_Connect+0x19c>)
 800581a:	2201      	movs	r2, #1
 800581c:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 800581e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005822:	4920      	ldr	r1, [pc, #128]	@ (80058a4 <UART_Platform_Connect+0x1c4>)
 8005824:	2001      	movs	r0, #1
 8005826:	f7ff fd75 	bl	8005314 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	e00f      	b.n	800584e <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 800582e:	7bfb      	ldrb	r3, [r7, #15]
 8005830:	461a      	mov	r2, r3
 8005832:	491d      	ldr	r1, [pc, #116]	@ (80058a8 <UART_Platform_Connect+0x1c8>)
 8005834:	2003      	movs	r0, #3
 8005836:	f7ff fd6d 	bl	8005314 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 800583a:	4b08      	ldr	r3, [pc, #32]	@ (800585c <UART_Platform_Connect+0x17c>)
 800583c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800583e:	4b07      	ldr	r3, [pc, #28]	@ (800585c <UART_Platform_Connect+0x17c>)
 8005840:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005844:	4919      	ldr	r1, [pc, #100]	@ (80058ac <UART_Platform_Connect+0x1cc>)
 8005846:	2003      	movs	r0, #3
 8005848:	f7ff fd64 	bl	8005314 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800584c:	2301      	movs	r3, #1
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20002680 	.word	0x20002680
 800585c:	200020d4 	.word	0x200020d4
 8005860:	0801b1fc 	.word	0x0801b1fc
 8005864:	0801b228 	.word	0x0801b228
 8005868:	0801b250 	.word	0x0801b250
 800586c:	0801b26c 	.word	0x0801b26c
 8005870:	200023ac 	.word	0x200023ac
 8005874:	0801b2a8 	.word	0x0801b2a8
 8005878:	0801b2d4 	.word	0x0801b2d4
 800587c:	20002681 	.word	0x20002681
 8005880:	0801b300 	.word	0x0801b300
 8005884:	0801b32c 	.word	0x0801b32c
 8005888:	0801b35c 	.word	0x0801b35c
 800588c:	0801b388 	.word	0x0801b388
 8005890:	2000247c 	.word	0x2000247c
 8005894:	2000247d 	.word	0x2000247d
 8005898:	2000247e 	.word	0x2000247e
 800589c:	20002480 	.word	0x20002480
 80058a0:	0801b3b4 	.word	0x0801b3b4
 80058a4:	0801b3dc 	.word	0x0801b3dc
 80058a8:	0801b420 	.word	0x0801b420
 80058ac:	0801b45c 	.word	0x0801b45c

080058b0 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <UART_Platform_Send+0x1c>
 80058be:	4b17      	ldr	r3, [pc, #92]	@ (800591c <UART_Platform_Send+0x6c>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	f083 0301 	eor.w	r3, r3, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <UART_Platform_Send+0x20>
 80058cc:	2301      	movs	r3, #1
 80058ce:	e021      	b.n	8005914 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7fa fca7 	bl	8000224 <strlen>
 80058d6:	4603      	mov	r3, r0
 80058d8:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <UART_Platform_Send+0x34>
 80058e0:	2300      	movs	r3, #0
 80058e2:	e017      	b.n	8005914 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 80058e4:	f7ff fece 	bl	8005684 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	480b      	ldr	r0, [pc, #44]	@ (8005920 <UART_Platform_Send+0x70>)
 80058f4:	f009 fa0c 	bl	800ed10 <HAL_UART_Transmit>
 80058f8:	4603      	mov	r3, r0
 80058fa:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 80058fc:	7afb      	ldrb	r3, [r7, #11]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e006      	b.n	8005914 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005906:	7afb      	ldrb	r3, [r7, #11]
 8005908:	461a      	mov	r2, r3
 800590a:	4906      	ldr	r1, [pc, #24]	@ (8005924 <UART_Platform_Send+0x74>)
 800590c:	2003      	movs	r0, #3
 800590e:	f7ff fd01 	bl	8005314 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005912:	2301      	movs	r3, #1
    }
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	20002680 	.word	0x20002680
 8005920:	200020d4 	.word	0x200020d4
 8005924:	0801b4bc 	.word	0x0801b4bc

08005928 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	@ 0x28
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <UART_Platform_Receive+0x26>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d006      	beq.n	800594e <UART_Platform_Receive+0x26>
 8005940:	4b74      	ldr	r3, [pc, #464]	@ (8005b14 <UART_Platform_Receive+0x1ec>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f083 0301 	eor.w	r3, r3, #1
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d001      	beq.n	8005952 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e0dc      	b.n	8005b0c <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	dc04      	bgt.n	8005962 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e0d4      	b.n	8005b0c <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8005968:	4b6b      	ldr	r3, [pc, #428]	@ (8005b18 <UART_Platform_Receive+0x1f0>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f083 0301 	eor.w	r3, r3, #1
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e0c8      	b.n	8005b0c <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 800597a:	4b68      	ldr	r3, [pc, #416]	@ (8005b1c <UART_Platform_Receive+0x1f4>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8005984:	4b65      	ldr	r3, [pc, #404]	@ (8005b1c <UART_Platform_Receive+0x1f4>)
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 800598a:	4965      	ldr	r1, [pc, #404]	@ (8005b20 <UART_Platform_Receive+0x1f8>)
 800598c:	2002      	movs	r0, #2
 800598e:	f7ff fcc1 	bl	8005314 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e0ba      	b.n	8005b0c <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8005996:	4b63      	ldr	r3, [pc, #396]	@ (8005b24 <UART_Platform_Receive+0x1fc>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80b4 	beq.w	8005b0a <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 80059a2:	4b60      	ldr	r3, [pc, #384]	@ (8005b24 <UART_Platform_Receive+0x1fc>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 80059a8:	4b5f      	ldr	r3, [pc, #380]	@ (8005b28 <UART_Platform_Receive+0x200>)
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 80059ae:	8b7b      	ldrh	r3, [r7, #26]
 80059b0:	461a      	mov	r2, r3
 80059b2:	495e      	ldr	r1, [pc, #376]	@ (8005b2c <UART_Platform_Receive+0x204>)
 80059b4:	2000      	movs	r0, #0
 80059b6:	f7ff fcad 	bl	8005314 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 80059ba:	8b7b      	ldrh	r3, [r7, #26]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 809e 	beq.w	8005afe <UART_Platform_Receive+0x1d6>
 80059c2:	8b7b      	ldrh	r3, [r7, #26]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	f340 8099 	ble.w	8005afe <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 80059cc:	8b7b      	ldrh	r3, [r7, #26]
 80059ce:	461a      	mov	r2, r3
 80059d0:	4957      	ldr	r1, [pc, #348]	@ (8005b30 <UART_Platform_Receive+0x208>)
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f011 fef5 	bl	80177c2 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 80059d8:	8b7b      	ldrh	r3, [r7, #26]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	2200      	movs	r2, #0
 80059e0:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 80059e2:	8b7a      	ldrh	r2, [r7, #26]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 80059e8:	8b7a      	ldrh	r2, [r7, #26]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4951      	ldr	r1, [pc, #324]	@ (8005b34 <UART_Platform_Receive+0x20c>)
 80059ee:	2000      	movs	r0, #0
 80059f0:	f7ff fc90 	bl	8005314 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 80059f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059f8:	2100      	movs	r1, #0
 80059fa:	484d      	ldr	r0, [pc, #308]	@ (8005b30 <UART_Platform_Receive+0x208>)
 80059fc:	f011 fe2c 	bl	8017658 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8005a00:	484d      	ldr	r0, [pc, #308]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a02:	f009 fb1a 	bl	800f03a <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8005a06:	4b4c      	ldr	r3, [pc, #304]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8005a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2202      	movs	r2, #2
 8005a14:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8005a16:	4b48      	ldr	r3, [pc, #288]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8005a1e:	4b46      	ldr	r3, [pc, #280]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2208      	movs	r2, #8
 8005a24:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8005a26:	4b44      	ldr	r3, [pc, #272]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2210      	movs	r2, #16
 8005a2c:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8005a2e:	4b42      	ldr	r3, [pc, #264]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d025      	beq.n	8005a82 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8005a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005a3a:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005a3c:	e00b      	b.n	8005a56 <UART_Platform_Receive+0x12e>
                    timeout--;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8005a44:	2300      	movs	r3, #0
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	e002      	b.n	8005a50 <UART_Platform_Receive+0x128>
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b63      	cmp	r3, #99	@ 0x63
 8005a54:	ddf9      	ble.n	8005a4a <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8005a56:	4b38      	ldr	r3, [pc, #224]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d002      	beq.n	8005a6a <UART_Platform_Receive+0x142>
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	dce9      	bgt.n	8005a3e <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d108      	bne.n	8005a82 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8005a70:	4932      	ldr	r1, [pc, #200]	@ (8005b3c <UART_Platform_Receive+0x214>)
 8005a72:	2002      	movs	r0, #2
 8005a74:	f7ff fc4e 	bl	8005314 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005a78:	4b2f      	ldr	r3, [pc, #188]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8005a82:	4b2d      	ldr	r3, [pc, #180]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a84:	2220      	movs	r2, #32
 8005a86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005a8c:	2220      	movs	r2, #32
 8005a8e:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	e002      	b.n	8005a9c <UART_Platform_Receive+0x174>
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	613b      	str	r3, [r7, #16]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	ddf7      	ble.n	8005a96 <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005aa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005aaa:	4921      	ldr	r1, [pc, #132]	@ (8005b30 <UART_Platform_Receive+0x208>)
 8005aac:	4822      	ldr	r0, [pc, #136]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005aae:	f009 fa80 	bl	800efb2 <HAL_UART_Receive_DMA>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8005ab6:	7e7b      	ldrb	r3, [r7, #25]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8005abc:	4920      	ldr	r1, [pc, #128]	@ (8005b40 <UART_Platform_Receive+0x218>)
 8005abe:	2000      	movs	r0, #0
 8005ac0:	f7ff fc28 	bl	8005314 <LOGGER_SendFormatted>
 8005ac4:	e019      	b.n	8005afa <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8005ac6:	7e7a      	ldrb	r2, [r7, #25]
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005aca:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8005acc:	4b1a      	ldr	r3, [pc, #104]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	491b      	ldr	r1, [pc, #108]	@ (8005b44 <UART_Platform_Receive+0x21c>)
 8005ad8:	2002      	movs	r0, #2
 8005ada:	f7ff fc1b 	bl	8005314 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8005ade:	4b16      	ldr	r3, [pc, #88]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8005ae6:	4b14      	ldr	r3, [pc, #80]	@ (8005b38 <UART_Platform_Receive+0x210>)
 8005ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	4915      	ldr	r1, [pc, #84]	@ (8005b48 <UART_Platform_Receive+0x220>)
 8005af4:	2002      	movs	r0, #2
 8005af6:	f7ff fc0d 	bl	8005314 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e006      	b.n	8005b0c <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8005afe:	8b7a      	ldrh	r2, [r7, #26]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4912      	ldr	r1, [pc, #72]	@ (8005b4c <UART_Platform_Receive+0x224>)
 8005b04:	2002      	movs	r0, #2
 8005b06:	f7ff fc05 	bl	8005314 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8005b0a:	2302      	movs	r3, #2
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20002680 	.word	0x20002680
 8005b18:	20002681 	.word	0x20002681
 8005b1c:	2000247d 	.word	0x2000247d
 8005b20:	0801b4f4 	.word	0x0801b4f4
 8005b24:	2000247c 	.word	0x2000247c
 8005b28:	2000247e 	.word	0x2000247e
 8005b2c:	0801b524 	.word	0x0801b524
 8005b30:	20002480 	.word	0x20002480
 8005b34:	0801b548 	.word	0x0801b548
 8005b38:	200020d4 	.word	0x200020d4
 8005b3c:	0801b574 	.word	0x0801b574
 8005b40:	0801b5b0 	.word	0x0801b5b0
 8005b44:	0801b5e0 	.word	0x0801b5e0
 8005b48:	0801b628 	.word	0x0801b628
 8005b4c:	0801b644 	.word	0x0801b644

08005b50 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b88 <HAL_UART_RxCpltCallback+0x38>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d10e      	bne.n	8005b80 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8005b62:	4b0a      	ldr	r3, [pc, #40]	@ (8005b8c <HAL_UART_RxCpltCallback+0x3c>)
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8005b68:	4b09      	ldr	r3, [pc, #36]	@ (8005b90 <HAL_UART_RxCpltCallback+0x40>)
 8005b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b6e:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8005b70:	4b07      	ldr	r3, [pc, #28]	@ (8005b90 <HAL_UART_RxCpltCallback+0x40>)
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	4906      	ldr	r1, [pc, #24]	@ (8005b94 <HAL_UART_RxCpltCallback+0x44>)
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	f7ff fbca 	bl	8005314 <LOGGER_SendFormatted>
  }
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40011400 	.word	0x40011400
 8005b8c:	2000247c 	.word	0x2000247c
 8005b90:	2000247e 	.word	0x2000247e
 8005b94:	0801b680 	.word	0x0801b680

08005b98 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a05      	ldr	r2, [pc, #20]	@ (8005bbc <HAL_UART_RxHalfCpltCallback+0x24>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d103      	bne.n	8005bb2 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 8005baa:	4905      	ldr	r1, [pc, #20]	@ (8005bc0 <HAL_UART_RxHalfCpltCallback+0x28>)
 8005bac:	2002      	movs	r0, #2
 8005bae:	f7ff fbb1 	bl	8005314 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	40011400 	.word	0x40011400
 8005bc0:	0801b6b8 	.word	0x0801b6b8

08005bc4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a3c      	ldr	r2, [pc, #240]	@ (8005cc4 <HAL_UART_ErrorCallback+0x100>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d171      	bne.n	8005cba <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 8005bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8005cc8 <HAL_UART_ErrorCallback+0x104>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8005bdc:	493b      	ldr	r1, [pc, #236]	@ (8005ccc <HAL_UART_ErrorCallback+0x108>)
 8005bde:	2002      	movs	r0, #2
 8005be0:	f7ff fb98 	bl	8005314 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d107      	bne.n	8005c02 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8005bfa:	4935      	ldr	r1, [pc, #212]	@ (8005cd0 <HAL_UART_ErrorCallback+0x10c>)
 8005bfc:	2002      	movs	r0, #2
 8005bfe:	f7ff fb89 	bl	8005314 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b04      	cmp	r3, #4
 8005c0e:	d107      	bne.n	8005c20 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2204      	movs	r2, #4
 8005c16:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8005c18:	492e      	ldr	r1, [pc, #184]	@ (8005cd4 <HAL_UART_ErrorCallback+0x110>)
 8005c1a:	2002      	movs	r0, #2
 8005c1c:	f7ff fb7a 	bl	8005314 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d107      	bne.n	8005c3e <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2202      	movs	r2, #2
 8005c34:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 8005c36:	4928      	ldr	r1, [pc, #160]	@ (8005cd8 <HAL_UART_ErrorCallback+0x114>)
 8005c38:	2002      	movs	r0, #2
 8005c3a:	f7ff fb6b 	bl	8005314 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2201      	movs	r2, #1
 8005c52:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8005c54:	4921      	ldr	r1, [pc, #132]	@ (8005cdc <HAL_UART_ErrorCallback+0x118>)
 8005c56:	2002      	movs	r0, #2
 8005c58:	f7ff fb5c 	bl	8005314 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f009 f9ec 	bl	800f03a <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2220      	movs	r2, #32
 8005c66:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005c82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c86:	2100      	movs	r1, #0
 8005c88:	4815      	ldr	r0, [pc, #84]	@ (8005ce0 <HAL_UART_ErrorCallback+0x11c>)
 8005c8a:	f011 fce5 	bl	8017658 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c92:	4913      	ldr	r1, [pc, #76]	@ (8005ce0 <HAL_UART_ErrorCallback+0x11c>)
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f009 f98c 	bl	800efb2 <HAL_UART_Receive_DMA>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d104      	bne.n	8005cae <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8005ca4:	490f      	ldr	r1, [pc, #60]	@ (8005ce4 <HAL_UART_ErrorCallback+0x120>)
 8005ca6:	2001      	movs	r0, #1
 8005ca8:	f7ff fb34 	bl	8005314 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8005cac:	e005      	b.n	8005cba <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	490d      	ldr	r1, [pc, #52]	@ (8005ce8 <HAL_UART_ErrorCallback+0x124>)
 8005cb4:	2003      	movs	r0, #3
 8005cb6:	f7ff fb2d 	bl	8005314 <LOGGER_SendFormatted>
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40011400 	.word	0x40011400
 8005cc8:	2000247d 	.word	0x2000247d
 8005ccc:	0801b704 	.word	0x0801b704
 8005cd0:	0801b730 	.word	0x0801b730
 8005cd4:	0801b74c 	.word	0x0801b74c
 8005cd8:	0801b768 	.word	0x0801b768
 8005cdc:	0801b784 	.word	0x0801b784
 8005ce0:	20002480 	.word	0x20002480
 8005ce4:	0801b7a0 	.word	0x0801b7a0
 8005ce8:	0801b7d4 	.word	0x0801b7d4

08005cec <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b086      	sub	sp, #24
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8005df4 <USER_UART_IDLECallback+0x108>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d175      	bne.n	8005dea <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	f003 0308 	and.w	r3, r3, #8
 8005d0c:	2b08      	cmp	r3, #8
 8005d0e:	d103      	bne.n	8005d18 <USER_UART_IDLECallback+0x2c>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d103      	bne.n	8005d2e <USER_UART_IDLECallback+0x42>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f043 0302 	orr.w	r3, r3, #2
 8005d2c:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b04      	cmp	r3, #4
 8005d3a:	d103      	bne.n	8005d44 <USER_UART_IDLECallback+0x58>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f043 0304 	orr.w	r3, r3, #4
 8005d42:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d103      	bne.n	8005d5a <USER_UART_IDLECallback+0x6e>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f043 0308 	orr.w	r3, r3, #8
 8005d58:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8005d64:	897b      	ldrh	r3, [r7, #10]
 8005d66:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	4b22      	ldr	r3, [pc, #136]	@ (8005df8 <USER_UART_IDLECallback+0x10c>)
 8005d6e:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8005d70:	4b21      	ldr	r3, [pc, #132]	@ (8005df8 <USER_UART_IDLECallback+0x10c>)
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d033      	beq.n	8005de2 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 8005d7a:	4b20      	ldr	r3, [pc, #128]	@ (8005dfc <USER_UART_IDLECallback+0x110>)
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 8005d86:	4b1c      	ldr	r3, [pc, #112]	@ (8005df8 <USER_UART_IDLECallback+0x10c>)
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	491b      	ldr	r1, [pc, #108]	@ (8005e00 <USER_UART_IDLECallback+0x114>)
 8005d92:	2002      	movs	r0, #2
 8005d94:	f7ff fabe 	bl	8005314 <LOGGER_SendFormatted>
 8005d98:	e007      	b.n	8005daa <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 8005d9a:	4b17      	ldr	r3, [pc, #92]	@ (8005df8 <USER_UART_IDLECallback+0x10c>)
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	4918      	ldr	r1, [pc, #96]	@ (8005e04 <USER_UART_IDLECallback+0x118>)
 8005da4:	2000      	movs	r0, #0
 8005da6:	f7ff fab5 	bl	8005314 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 8005daa:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <USER_UART_IDLECallback+0x10c>)
 8005dac:	881b      	ldrh	r3, [r3, #0]
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d912      	bls.n	8005dda <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8005db4:	4b14      	ldr	r3, [pc, #80]	@ (8005e08 <USER_UART_IDLECallback+0x11c>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	4619      	mov	r1, r3
 8005dba:	4b13      	ldr	r3, [pc, #76]	@ (8005e08 <USER_UART_IDLECallback+0x11c>)
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	4b11      	ldr	r3, [pc, #68]	@ (8005e08 <USER_UART_IDLECallback+0x11c>)
 8005dc2:	789b      	ldrb	r3, [r3, #2]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4b10      	ldr	r3, [pc, #64]	@ (8005e08 <USER_UART_IDLECallback+0x11c>)
 8005dc8:	78db      	ldrb	r3, [r3, #3]
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	9200      	str	r2, [sp, #0]
 8005dce:	4603      	mov	r3, r0
 8005dd0:	460a      	mov	r2, r1
 8005dd2:	490e      	ldr	r1, [pc, #56]	@ (8005e0c <USER_UART_IDLECallback+0x120>)
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	f7ff fa9d 	bl	8005314 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f009 f92d 	bl	800f03a <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8005de0:	e003      	b.n	8005dea <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 8005de2:	490b      	ldr	r1, [pc, #44]	@ (8005e10 <USER_UART_IDLECallback+0x124>)
 8005de4:	2000      	movs	r0, #0
 8005de6:	f7ff fa95 	bl	8005314 <LOGGER_SendFormatted>
}
 8005dea:	bf00      	nop
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40011400 	.word	0x40011400
 8005df8:	2000247e 	.word	0x2000247e
 8005dfc:	2000247c 	.word	0x2000247c
 8005e00:	0801b80c 	.word	0x0801b80c
 8005e04:	0801b84c 	.word	0x0801b84c
 8005e08:	20002480 	.word	0x20002480
 8005e0c:	0801b874 	.word	0x0801b874
 8005e10:	0801b8a0 	.word	0x0801b8a0

08005e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005e4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005e18:	f7ff f9fc 	bl	8005214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e1c:	480c      	ldr	r0, [pc, #48]	@ (8005e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005e1e:	490d      	ldr	r1, [pc, #52]	@ (8005e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005e20:	4a0d      	ldr	r2, [pc, #52]	@ (8005e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e24:	e002      	b.n	8005e2c <LoopCopyDataInit>

08005e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e2a:	3304      	adds	r3, #4

08005e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e30:	d3f9      	bcc.n	8005e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e32:	4a0a      	ldr	r2, [pc, #40]	@ (8005e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005e34:	4c0a      	ldr	r4, [pc, #40]	@ (8005e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e38:	e001      	b.n	8005e3e <LoopFillZerobss>

08005e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e3c:	3204      	adds	r2, #4

08005e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e40:	d3fb      	bcc.n	8005e3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005e42:	f011 fc97 	bl	8017774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e46:	f7fb ffb5 	bl	8001db4 <main>
  bx  lr    
 8005e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005e4c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e54:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8005e58:	0801ba34 	.word	0x0801ba34
  ldr r2, =_sbss
 8005e5c:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8005e60:	20013150 	.word	0x20013150

08005e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e64:	e7fe      	b.n	8005e64 <ADC_IRQHandler>

08005e66 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e6a:	2003      	movs	r0, #3
 8005e6c:	f000 fb91 	bl	8006592 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e70:	2000      	movs	r0, #0
 8005e72:	f7ff f84b 	bl	8004f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e76:	f7fd ffad 	bl	8003dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005e84:	4b06      	ldr	r3, [pc, #24]	@ (8005ea0 <HAL_IncTick+0x20>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <HAL_IncTick+0x24>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4413      	add	r3, r2
 8005e90:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <HAL_IncTick+0x24>)
 8005e92:	6013      	str	r3, [r2, #0]
}
 8005e94:	bf00      	nop
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	2000006c 	.word	0x2000006c
 8005ea4:	20002684 	.word	0x20002684

08005ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8005eac:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <HAL_GetTick+0x14>)
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	20002684 	.word	0x20002684

08005ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ec8:	f7ff ffee 	bl	8005ea8 <HAL_GetTick>
 8005ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed8:	d005      	beq.n	8005ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005eda:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <HAL_Delay+0x44>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ee6:	bf00      	nop
 8005ee8:	f7ff ffde 	bl	8005ea8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d8f7      	bhi.n	8005ee8 <HAL_Delay+0x28>
  {
  }
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	2000006c 	.word	0x2000006c

08005f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e031      	b.n	8005f82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fd ff7c 	bl	8003e24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d116      	bne.n	8005f74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f4a:	4b10      	ldr	r3, [pc, #64]	@ (8005f8c <HAL_ADC_Init+0x84>)
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	f043 0202 	orr.w	r2, r3, #2
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f974 	bl	8006244 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f66:	f023 0303 	bic.w	r3, r3, #3
 8005f6a:	f043 0201 	orr.w	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f72:	e001      	b.n	8005f78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	ffffeefd 	.word	0xffffeefd

08005f90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_ADC_ConfigChannel+0x1c>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e13a      	b.n	8006222 <HAL_ADC_ConfigChannel+0x292>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b09      	cmp	r3, #9
 8005fba:	d93a      	bls.n	8006032 <HAL_ADC_ConfigChannel+0xa2>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fc4:	d035      	beq.n	8006032 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68d9      	ldr	r1, [r3, #12]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	4413      	add	r3, r2
 8005fda:	3b1e      	subs	r3, #30
 8005fdc:	2207      	movs	r2, #7
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43da      	mvns	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	400a      	ands	r2, r1
 8005fea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a8f      	ldr	r2, [pc, #572]	@ (8006230 <HAL_ADC_ConfigChannel+0x2a0>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d10a      	bne.n	800600c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68d9      	ldr	r1, [r3, #12]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	061a      	lsls	r2, r3, #24
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800600a:	e039      	b.n	8006080 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68d9      	ldr	r1, [r3, #12]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	4618      	mov	r0, r3
 800601e:	4603      	mov	r3, r0
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	4403      	add	r3, r0
 8006024:	3b1e      	subs	r3, #30
 8006026:	409a      	lsls	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006030:	e026      	b.n	8006080 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6919      	ldr	r1, [r3, #16]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	461a      	mov	r2, r3
 8006040:	4613      	mov	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	4413      	add	r3, r2
 8006046:	f003 031f 	and.w	r3, r3, #31
 800604a:	2207      	movs	r2, #7
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	43da      	mvns	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	400a      	ands	r2, r1
 8006058:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6919      	ldr	r1, [r3, #16]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	4618      	mov	r0, r3
 800606c:	4603      	mov	r3, r0
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	4403      	add	r3, r0
 8006072:	f003 031f 	and.w	r3, r3, #31
 8006076:	409a      	lsls	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b06      	cmp	r3, #6
 8006086:	d824      	bhi.n	80060d2 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	3b05      	subs	r3, #5
 800609a:	221f      	movs	r2, #31
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43da      	mvns	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	400a      	ands	r2, r1
 80060a8:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	4618      	mov	r0, r3
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	3b05      	subs	r3, #5
 80060c4:	fa00 f203 	lsl.w	r2, r0, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	430a      	orrs	r2, r1
 80060ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80060d0:	e04c      	b.n	800616c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b0c      	cmp	r3, #12
 80060d8:	d824      	bhi.n	8006124 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	3b23      	subs	r3, #35	@ 0x23
 80060ec:	221f      	movs	r2, #31
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43da      	mvns	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	400a      	ands	r2, r1
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	b29b      	uxth	r3, r3
 8006108:	4618      	mov	r0, r3
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	4613      	mov	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	3b23      	subs	r3, #35	@ 0x23
 8006116:	fa00 f203 	lsl.w	r2, r0, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	631a      	str	r2, [r3, #48]	@ 0x30
 8006122:	e023      	b.n	800616c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	3b41      	subs	r3, #65	@ 0x41
 8006136:	221f      	movs	r2, #31
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	43da      	mvns	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	400a      	ands	r2, r1
 8006144:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	4618      	mov	r0, r3
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	3b41      	subs	r3, #65	@ 0x41
 8006160:	fa00 f203 	lsl.w	r2, r0, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	430a      	orrs	r2, r1
 800616a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a30      	ldr	r2, [pc, #192]	@ (8006234 <HAL_ADC_ConfigChannel+0x2a4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10a      	bne.n	800618c <HAL_ADC_ConfigChannel+0x1fc>
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800617e:	d105      	bne.n	800618c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8006180:	4b2d      	ldr	r3, [pc, #180]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	4a2c      	ldr	r2, [pc, #176]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 8006186:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800618a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a28      	ldr	r2, [pc, #160]	@ (8006234 <HAL_ADC_ConfigChannel+0x2a4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10f      	bne.n	80061b6 <HAL_ADC_ConfigChannel+0x226>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b12      	cmp	r3, #18
 800619c:	d10b      	bne.n	80061b6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800619e:	4b26      	ldr	r3, [pc, #152]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4a25      	ldr	r2, [pc, #148]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 80061a4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80061a8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80061aa:	4b23      	ldr	r3, [pc, #140]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	4a22      	ldr	r2, [pc, #136]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 80061b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80061b4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006234 <HAL_ADC_ConfigChannel+0x2a4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d12b      	bne.n	8006218 <HAL_ADC_ConfigChannel+0x288>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <HAL_ADC_ConfigChannel+0x2a0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <HAL_ADC_ConfigChannel+0x242>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b11      	cmp	r3, #17
 80061d0:	d122      	bne.n	8006218 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80061d2:	4b19      	ldr	r3, [pc, #100]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 80061d8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80061dc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80061de:	4b16      	ldr	r3, [pc, #88]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	4a15      	ldr	r2, [pc, #84]	@ (8006238 <HAL_ADC_ConfigChannel+0x2a8>)
 80061e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80061e8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a10      	ldr	r2, [pc, #64]	@ (8006230 <HAL_ADC_ConfigChannel+0x2a0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d111      	bne.n	8006218 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80061f4:	4b11      	ldr	r3, [pc, #68]	@ (800623c <HAL_ADC_ConfigChannel+0x2ac>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a11      	ldr	r2, [pc, #68]	@ (8006240 <HAL_ADC_ConfigChannel+0x2b0>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	0c9a      	lsrs	r2, r3, #18
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800620a:	e002      	b.n	8006212 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3b01      	subs	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d1f9      	bne.n	800620c <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	10000012 	.word	0x10000012
 8006234:	40012000 	.word	0x40012000
 8006238:	40012300 	.word	0x40012300
 800623c:	2000001c 	.word	0x2000001c
 8006240:	431bde83 	.word	0x431bde83

08006244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800624c:	4b78      	ldr	r3, [pc, #480]	@ (8006430 <ADC_Init+0x1ec>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4a77      	ldr	r2, [pc, #476]	@ (8006430 <ADC_Init+0x1ec>)
 8006252:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8006256:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006258:	4b75      	ldr	r3, [pc, #468]	@ (8006430 <ADC_Init+0x1ec>)
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4973      	ldr	r1, [pc, #460]	@ (8006430 <ADC_Init+0x1ec>)
 8006262:	4313      	orrs	r3, r2
 8006264:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006274:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6859      	ldr	r1, [r3, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	021a      	lsls	r2, r3, #8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006298:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6899      	ldr	r1, [r3, #8]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d2:	4a58      	ldr	r2, [pc, #352]	@ (8006434 <ADC_Init+0x1f0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d022      	beq.n	800631e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80062e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6899      	ldr	r1, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006308:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6899      	ldr	r1, [r3, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	e00f      	b.n	800633e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800632c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800633c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0202 	bic.w	r2, r2, #2
 800634c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6899      	ldr	r1, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	005a      	lsls	r2, r3, #1
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d01b      	beq.n	80063a4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685a      	ldr	r2, [r3, #4]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800637a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800638a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	3b01      	subs	r3, #1
 8006398:	035a      	lsls	r2, r3, #13
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	e007      	b.n	80063b4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80063c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	051a      	lsls	r2, r3, #20
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80063e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	6899      	ldr	r1, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80063f6:	025a      	lsls	r2, r3, #9
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800640e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6899      	ldr	r1, [r3, #8]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	029a      	lsls	r2, r3, #10
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	430a      	orrs	r2, r1
 8006422:	609a      	str	r2, [r3, #8]
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr
 8006430:	40012300 	.word	0x40012300
 8006434:	0f000001 	.word	0x0f000001

08006438 <__NVIC_SetPriorityGrouping>:
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006448:	4b0b      	ldr	r3, [pc, #44]	@ (8006478 <__NVIC_SetPriorityGrouping+0x40>)
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006454:	4013      	ands	r3, r2
 8006456:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006460:	4b06      	ldr	r3, [pc, #24]	@ (800647c <__NVIC_SetPriorityGrouping+0x44>)
 8006462:	4313      	orrs	r3, r2
 8006464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006466:	4a04      	ldr	r2, [pc, #16]	@ (8006478 <__NVIC_SetPriorityGrouping+0x40>)
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	60d3      	str	r3, [r2, #12]
}
 800646c:	bf00      	nop
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	e000ed00 	.word	0xe000ed00
 800647c:	05fa0000 	.word	0x05fa0000

08006480 <__NVIC_GetPriorityGrouping>:
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006484:	4b04      	ldr	r3, [pc, #16]	@ (8006498 <__NVIC_GetPriorityGrouping+0x18>)
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	f003 0307 	and.w	r3, r3, #7
}
 800648e:	4618      	mov	r0, r3
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	e000ed00 	.word	0xe000ed00

0800649c <__NVIC_EnableIRQ>:
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	db0b      	blt.n	80064c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064ae:	79fb      	ldrb	r3, [r7, #7]
 80064b0:	f003 021f 	and.w	r2, r3, #31
 80064b4:	4907      	ldr	r1, [pc, #28]	@ (80064d4 <__NVIC_EnableIRQ+0x38>)
 80064b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	2001      	movs	r0, #1
 80064be:	fa00 f202 	lsl.w	r2, r0, r2
 80064c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	e000e100 	.word	0xe000e100

080064d8 <__NVIC_SetPriority>:
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	4603      	mov	r3, r0
 80064e0:	6039      	str	r1, [r7, #0]
 80064e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	db0a      	blt.n	8006502 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	490c      	ldr	r1, [pc, #48]	@ (8006524 <__NVIC_SetPriority+0x4c>)
 80064f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f6:	0112      	lsls	r2, r2, #4
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	440b      	add	r3, r1
 80064fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006500:	e00a      	b.n	8006518 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	4908      	ldr	r1, [pc, #32]	@ (8006528 <__NVIC_SetPriority+0x50>)
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	3b04      	subs	r3, #4
 8006510:	0112      	lsls	r2, r2, #4
 8006512:	b2d2      	uxtb	r2, r2
 8006514:	440b      	add	r3, r1
 8006516:	761a      	strb	r2, [r3, #24]
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	e000e100 	.word	0xe000e100
 8006528:	e000ed00 	.word	0xe000ed00

0800652c <NVIC_EncodePriority>:
{
 800652c:	b480      	push	{r7}
 800652e:	b089      	sub	sp, #36	@ 0x24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f1c3 0307 	rsb	r3, r3, #7
 8006546:	2b04      	cmp	r3, #4
 8006548:	bf28      	it	cs
 800654a:	2304      	movcs	r3, #4
 800654c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	3304      	adds	r3, #4
 8006552:	2b06      	cmp	r3, #6
 8006554:	d902      	bls.n	800655c <NVIC_EncodePriority+0x30>
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3b03      	subs	r3, #3
 800655a:	e000      	b.n	800655e <NVIC_EncodePriority+0x32>
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006560:	f04f 32ff 	mov.w	r2, #4294967295
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	43da      	mvns	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	401a      	ands	r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006574:	f04f 31ff 	mov.w	r1, #4294967295
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	fa01 f303 	lsl.w	r3, r1, r3
 800657e:	43d9      	mvns	r1, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006584:	4313      	orrs	r3, r2
}
 8006586:	4618      	mov	r0, r3
 8006588:	3724      	adds	r7, #36	@ 0x24
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b082      	sub	sp, #8
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff ff4c 	bl	8006438 <__NVIC_SetPriorityGrouping>
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4603      	mov	r3, r0
 80065b0:	60b9      	str	r1, [r7, #8]
 80065b2:	607a      	str	r2, [r7, #4]
 80065b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80065ba:	f7ff ff61 	bl	8006480 <__NVIC_GetPriorityGrouping>
 80065be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	6978      	ldr	r0, [r7, #20]
 80065c6:	f7ff ffb1 	bl	800652c <NVIC_EncodePriority>
 80065ca:	4602      	mov	r2, r0
 80065cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d0:	4611      	mov	r1, r2
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff ff80 	bl	80064d8 <__NVIC_SetPriority>
}
 80065d8:	bf00      	nop
 80065da:	3718      	adds	r7, #24
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff ff54 	bl	800649c <__NVIC_EnableIRQ>
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e054      	b.n	80066b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7f5b      	ldrb	r3, [r3, #29]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fd fc5a 	bl	8003ed8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	791b      	ldrb	r3, [r3, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10c      	bne.n	800664c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a22      	ldr	r2, [pc, #136]	@ (80066c0 <HAL_CRC_Init+0xc4>)
 8006638:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0218 	bic.w	r2, r2, #24
 8006648:	609a      	str	r2, [r3, #8]
 800664a:	e00c      	b.n	8006666 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6899      	ldr	r1, [r3, #8]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	461a      	mov	r2, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f834 	bl	80066c4 <HAL_CRCEx_Polynomial_Set>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e028      	b.n	80066b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	795b      	ldrb	r3, [r3, #5]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d105      	bne.n	800667a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f04f 32ff 	mov.w	r2, #4294967295
 8006676:	611a      	str	r2, [r3, #16]
 8006678:	e004      	b.n	8006684 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6912      	ldr	r2, [r2, #16]
 8006682:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	695a      	ldr	r2, [r3, #20]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699a      	ldr	r2, [r3, #24]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3708      	adds	r7, #8
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	04c11db7 	.word	0x04c11db7

080066c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80066d4:	231f      	movs	r3, #31
 80066d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d102      	bne.n	80066e8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	75fb      	strb	r3, [r7, #23]
 80066e6:	e063      	b.n	80067b0 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80066e8:	bf00      	nop
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	1e5a      	subs	r2, r3, #1
 80066ee:	613a      	str	r2, [r7, #16]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d009      	beq.n	8006708 <HAL_CRCEx_Polynomial_Set+0x44>
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b18      	cmp	r3, #24
 800670c:	d846      	bhi.n	800679c <HAL_CRCEx_Polynomial_Set+0xd8>
 800670e:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <HAL_CRCEx_Polynomial_Set+0x50>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	080067a3 	.word	0x080067a3
 8006718:	0800679d 	.word	0x0800679d
 800671c:	0800679d 	.word	0x0800679d
 8006720:	0800679d 	.word	0x0800679d
 8006724:	0800679d 	.word	0x0800679d
 8006728:	0800679d 	.word	0x0800679d
 800672c:	0800679d 	.word	0x0800679d
 8006730:	0800679d 	.word	0x0800679d
 8006734:	08006791 	.word	0x08006791
 8006738:	0800679d 	.word	0x0800679d
 800673c:	0800679d 	.word	0x0800679d
 8006740:	0800679d 	.word	0x0800679d
 8006744:	0800679d 	.word	0x0800679d
 8006748:	0800679d 	.word	0x0800679d
 800674c:	0800679d 	.word	0x0800679d
 8006750:	0800679d 	.word	0x0800679d
 8006754:	08006785 	.word	0x08006785
 8006758:	0800679d 	.word	0x0800679d
 800675c:	0800679d 	.word	0x0800679d
 8006760:	0800679d 	.word	0x0800679d
 8006764:	0800679d 	.word	0x0800679d
 8006768:	0800679d 	.word	0x0800679d
 800676c:	0800679d 	.word	0x0800679d
 8006770:	0800679d 	.word	0x0800679d
 8006774:	08006779 	.word	0x08006779
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	2b06      	cmp	r3, #6
 800677c:	d913      	bls.n	80067a6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006782:	e010      	b.n	80067a6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b07      	cmp	r3, #7
 8006788:	d90f      	bls.n	80067aa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800678e:	e00c      	b.n	80067aa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b0f      	cmp	r3, #15
 8006794:	d90b      	bls.n	80067ae <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800679a:	e008      	b.n	80067ae <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	75fb      	strb	r3, [r7, #23]
        break;
 80067a0:	e006      	b.n	80067b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80067a2:	bf00      	nop
 80067a4:	e004      	b.n	80067b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80067a6:	bf00      	nop
 80067a8:	e002      	b.n	80067b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80067aa:	bf00      	nop
 80067ac:	e000      	b.n	80067b0 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80067ae:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10d      	bne.n	80067d2 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f023 0118 	bic.w	r1, r3, #24
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b082      	sub	sp, #8
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e069      	b.n	80068c6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fd fb8a 	bl	8003f18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6819      	ldr	r1, [r3, #0]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b2a      	ldr	r3, [pc, #168]	@ (80068d0 <HAL_DCMI_Init+0xf0>)
 8006826:	400b      	ands	r3, r1
 8006828:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6819      	ldr	r1, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800683e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800684a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006856:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006862:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006868:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800686e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	2b10      	cmp	r3, #16
 800687e:	d112      	bne.n	80068a6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7f1b      	ldrb	r3, [r3, #28]
 8006884:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	7f5b      	ldrb	r3, [r3, #29]
 800688a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800688c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	7f9b      	ldrb	r3, [r3, #30]
 8006892:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006894:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	7fdb      	ldrb	r3, [r3, #31]
 800689c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80068a2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80068a4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 021e 	orr.w	r2, r2, #30
 80068b4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	ffe0f007 	.word	0xffe0f007

080068d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80068e0:	f7ff fae2 	bl	8005ea8 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e099      	b.n	8006a24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006910:	e00f      	b.n	8006932 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006912:	f7ff fac9 	bl	8005ea8 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b05      	cmp	r3, #5
 800691e:	d908      	bls.n	8006932 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2203      	movs	r2, #3
 800692a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e078      	b.n	8006a24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e8      	bne.n	8006912 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4b38      	ldr	r3, [pc, #224]	@ (8006a2c <HAL_DMA_Init+0x158>)
 800694c:	4013      	ands	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800695e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800696a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	2b04      	cmp	r3, #4
 800698a:	d107      	bne.n	800699c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	4313      	orrs	r3, r2
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0307 	bic.w	r3, r3, #7
 80069b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d117      	bne.n	80069f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00e      	beq.n	80069f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fb73 	bl	80070c4 <DMA_CheckFifoParam>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2240      	movs	r2, #64	@ 0x40
 80069e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80069f2:	2301      	movs	r3, #1
 80069f4:	e016      	b.n	8006a24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fb2a 	bl	8007058 <DMA_CalcBaseAndBitshift>
 8006a04:	4603      	mov	r3, r0
 8006a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0c:	223f      	movs	r2, #63	@ 0x3f
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	f010803f 	.word	0xf010803f

08006a30 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e050      	b.n	8006ae4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d101      	bne.n	8006a52 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e048      	b.n	8006ae4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2200      	movs	r2, #0
 8006a88:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2221      	movs	r2, #33	@ 0x21
 8006a90:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fae0 	bl	8007058 <DMA_CalcBaseAndBitshift>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aa0:	223f      	movs	r2, #63	@ 0x3f
 8006aa2:	409a      	lsls	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_DMA_Start_IT+0x26>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e048      	b.n	8006ba4 <HAL_DMA_Start_IT+0xb8>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2201      	movs	r2, #1
 8006b16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d137      	bne.n	8006b96 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fa5e 	bl	8006ffc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b44:	223f      	movs	r2, #63	@ 0x3f
 8006b46:	409a      	lsls	r2, r3
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f042 0216 	orr.w	r2, r2, #22
 8006b5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695a      	ldr	r2, [r3, #20]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006b6a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0208 	orr.w	r2, r2, #8
 8006b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e005      	b.n	8006ba2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006bba:	f7ff f975 	bl	8005ea8 <HAL_GetTick>
 8006bbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b02      	cmp	r3, #2
 8006bca:	d008      	beq.n	8006bde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2280      	movs	r2, #128	@ 0x80
 8006bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e052      	b.n	8006c84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0216 	bic.w	r2, r2, #22
 8006bec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695a      	ldr	r2, [r3, #20]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <HAL_DMA_Abort+0x62>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d007      	beq.n	8006c1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0208 	bic.w	r2, r2, #8
 8006c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c2e:	e013      	b.n	8006c58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c30:	f7ff f93a 	bl	8005ea8 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	d90c      	bls.n	8006c58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2220      	movs	r2, #32
 8006c42:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2203      	movs	r2, #3
 8006c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e015      	b.n	8006c84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e4      	bne.n	8006c30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6a:	223f      	movs	r2, #63	@ 0x3f
 8006c6c:	409a      	lsls	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d004      	beq.n	8006caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2280      	movs	r2, #128	@ 0x80
 8006ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e00c      	b.n	8006cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2205      	movs	r2, #5
 8006cae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8006f18 <HAL_DMA_IRQHandler+0x248>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a8e      	ldr	r2, [pc, #568]	@ (8006f1c <HAL_DMA_IRQHandler+0x24c>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	0a9b      	lsrs	r3, r3, #10
 8006ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	409a      	lsls	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4013      	ands	r3, r2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d01a      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d013      	beq.n	8006d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0204 	bic.w	r2, r2, #4
 8006d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d28:	2208      	movs	r2, #8
 8006d2a:	409a      	lsls	r2, r3
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d34:	f043 0201 	orr.w	r2, r3, #1
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d40:	2201      	movs	r2, #1
 8006d42:	409a      	lsls	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	4013      	ands	r3, r2
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d012      	beq.n	8006d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d00b      	beq.n	8006d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d5e:	2201      	movs	r2, #1
 8006d60:	409a      	lsls	r2, r3
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6a:	f043 0202 	orr.w	r2, r3, #2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d76:	2204      	movs	r2, #4
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d012      	beq.n	8006da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00b      	beq.n	8006da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d94:	2204      	movs	r2, #4
 8006d96:	409a      	lsls	r2, r3
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da0:	f043 0204 	orr.w	r2, r3, #4
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dac:	2210      	movs	r2, #16
 8006dae:	409a      	lsls	r2, r3
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4013      	ands	r3, r2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d043      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d03c      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dca:	2210      	movs	r2, #16
 8006dcc:	409a      	lsls	r2, r3
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d018      	beq.n	8006e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d108      	bne.n	8006e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d024      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
 8006dfe:	e01f      	b.n	8006e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01b      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
 8006e10:	e016      	b.n	8006e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 0208 	bic.w	r2, r2, #8
 8006e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e44:	2220      	movs	r2, #32
 8006e46:	409a      	lsls	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 808f 	beq.w	8006f70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 0310 	and.w	r3, r3, #16
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f000 8087 	beq.w	8006f70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e66:	2220      	movs	r2, #32
 8006e68:	409a      	lsls	r2, r3
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d136      	bne.n	8006ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0216 	bic.w	r2, r2, #22
 8006e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d103      	bne.n	8006eaa <HAL_DMA_IRQHandler+0x1da>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0208 	bic.w	r2, r2, #8
 8006eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ebe:	223f      	movs	r2, #63	@ 0x3f
 8006ec0:	409a      	lsls	r2, r3
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d07e      	beq.n	8006fdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	4798      	blx	r3
        }
        return;
 8006ee6:	e079      	b.n	8006fdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d01d      	beq.n	8006f32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d10d      	bne.n	8006f20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d031      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	4798      	blx	r3
 8006f14:	e02c      	b.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
 8006f16:	bf00      	nop
 8006f18:	2000001c 	.word	0x2000001c
 8006f1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d023      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4798      	blx	r3
 8006f30:	e01e      	b.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10f      	bne.n	8006f60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f022 0210 	bic.w	r2, r2, #16
 8006f4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d032      	beq.n	8006fde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d022      	beq.n	8006fca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2205      	movs	r2, #5
 8006f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d307      	bcc.n	8006fb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f2      	bne.n	8006f9c <HAL_DMA_IRQHandler+0x2cc>
 8006fb6:	e000      	b.n	8006fba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006fb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	4798      	blx	r3
 8006fda:	e000      	b.n	8006fde <HAL_DMA_IRQHandler+0x30e>
        return;
 8006fdc:	bf00      	nop
    }
  }
}
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007018:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	2b40      	cmp	r3, #64	@ 0x40
 8007028:	d108      	bne.n	800703c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800703a:	e007      	b.n	800704c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	60da      	str	r2, [r3, #12]
}
 800704c:	bf00      	nop
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	b2db      	uxtb	r3, r3
 8007066:	3b10      	subs	r3, #16
 8007068:	4a13      	ldr	r2, [pc, #76]	@ (80070b8 <DMA_CalcBaseAndBitshift+0x60>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	091b      	lsrs	r3, r3, #4
 8007070:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007072:	4a12      	ldr	r2, [pc, #72]	@ (80070bc <DMA_CalcBaseAndBitshift+0x64>)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b03      	cmp	r3, #3
 8007084:	d908      	bls.n	8007098 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	4b0c      	ldr	r3, [pc, #48]	@ (80070c0 <DMA_CalcBaseAndBitshift+0x68>)
 800708e:	4013      	ands	r3, r2
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	659a      	str	r2, [r3, #88]	@ 0x58
 8007096:	e006      	b.n	80070a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	4b08      	ldr	r3, [pc, #32]	@ (80070c0 <DMA_CalcBaseAndBitshift+0x68>)
 80070a0:	4013      	ands	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3714      	adds	r7, #20
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	aaaaaaab 	.word	0xaaaaaaab
 80070bc:	0801b934 	.word	0x0801b934
 80070c0:	fffffc00 	.word	0xfffffc00

080070c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d11f      	bne.n	800711e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d856      	bhi.n	8007192 <DMA_CheckFifoParam+0xce>
 80070e4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <DMA_CheckFifoParam+0x28>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	080070fd 	.word	0x080070fd
 80070f0:	0800710f 	.word	0x0800710f
 80070f4:	080070fd 	.word	0x080070fd
 80070f8:	08007193 	.word	0x08007193
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d046      	beq.n	8007196 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800710c:	e043      	b.n	8007196 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007112:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007116:	d140      	bne.n	800719a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800711c:	e03d      	b.n	800719a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007126:	d121      	bne.n	800716c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	2b03      	cmp	r3, #3
 800712c:	d837      	bhi.n	800719e <DMA_CheckFifoParam+0xda>
 800712e:	a201      	add	r2, pc, #4	@ (adr r2, 8007134 <DMA_CheckFifoParam+0x70>)
 8007130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007134:	08007145 	.word	0x08007145
 8007138:	0800714b 	.word	0x0800714b
 800713c:	08007145 	.word	0x08007145
 8007140:	0800715d 	.word	0x0800715d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
      break;
 8007148:	e030      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800714e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d025      	beq.n	80071a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800715a:	e022      	b.n	80071a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007164:	d11f      	bne.n	80071a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800716a:	e01c      	b.n	80071a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d903      	bls.n	800717a <DMA_CheckFifoParam+0xb6>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b03      	cmp	r3, #3
 8007176:	d003      	beq.n	8007180 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007178:	e018      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	73fb      	strb	r3, [r7, #15]
      break;
 800717e:	e015      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00e      	beq.n	80071aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	73fb      	strb	r3, [r7, #15]
      break;
 8007190:	e00b      	b.n	80071aa <DMA_CheckFifoParam+0xe6>
      break;
 8007192:	bf00      	nop
 8007194:	e00a      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
      break;
 8007196:	bf00      	nop
 8007198:	e008      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
      break;
 800719a:	bf00      	nop
 800719c:	e006      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
      break;
 800719e:	bf00      	nop
 80071a0:	e004      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
      break;
 80071a2:	bf00      	nop
 80071a4:	e002      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
      break;   
 80071a6:	bf00      	nop
 80071a8:	e000      	b.n	80071ac <DMA_CheckFifoParam+0xe8>
      break;
 80071aa:	bf00      	nop
    }
  } 
  
  return status; 
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop

080071bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e039      	b.n	8007242 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f7fc ff56 	bl	8004094 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800720c:	f023 0107 	bic.w	r1, r3, #7
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007222:	4b0a      	ldr	r3, [pc, #40]	@ (800724c <HAL_DMA2D_Init+0x90>)
 8007224:	4013      	ands	r3, r2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	68d1      	ldr	r1, [r2, #12]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6812      	ldr	r2, [r2, #0]
 800722e:	430b      	orrs	r3, r1
 8007230:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	ffffc000 	.word	0xffffc000

08007250 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d026      	beq.n	80072c0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d021      	beq.n	80072c0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800728a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007290:	f043 0201 	orr.w	r2, r3, #1
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2201      	movs	r2, #1
 800729e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2204      	movs	r2, #4
 80072a4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	695b      	ldr	r3, [r3, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d003      	beq.n	80072c0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 0320 	and.w	r3, r3, #32
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d026      	beq.n	8007318 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d021      	beq.n	8007318 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072e2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2220      	movs	r2, #32
 80072ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f0:	f043 0202 	orr.w	r2, r3, #2
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2204      	movs	r2, #4
 80072fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d026      	beq.n	8007370 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007328:	2b00      	cmp	r3, #0
 800732a:	d021      	beq.n	8007370 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800733a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2208      	movs	r2, #8
 8007342:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007348:	f043 0204 	orr.w	r2, r3, #4
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2204      	movs	r2, #4
 8007354:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 0304 	and.w	r3, r3, #4
 8007376:	2b00      	cmp	r3, #0
 8007378:	d013      	beq.n	80073a2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00e      	beq.n	80073a2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007392:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2204      	movs	r2, #4
 800739a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f853 	bl	8007448 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d024      	beq.n	80073f6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01f      	beq.n	80073f6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80073c4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2202      	movs	r2, #2
 80073cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 0310 	and.w	r3, r3, #16
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01f      	beq.n	8007440 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01a      	beq.n	8007440 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007418:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2210      	movs	r2, #16
 8007420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f80e 	bl	800745c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007440:	bf00      	nop
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_DMA2D_ConfigLayer+0x20>
 800748c:	2302      	movs	r3, #2
 800748e:	e079      	b.n	8007584 <HAL_DMA2D_ConfigLayer+0x114>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	3318      	adds	r3, #24
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	4413      	add	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	041b      	lsls	r3, r3, #16
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80074ba:	4b35      	ldr	r3, [pc, #212]	@ (8007590 <HAL_DMA2D_ConfigLayer+0x120>)
 80074bc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b0a      	cmp	r3, #10
 80074c4:	d003      	beq.n	80074ce <HAL_DMA2D_ConfigLayer+0x5e>
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2b09      	cmp	r3, #9
 80074cc:	d107      	bne.n	80074de <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	e005      	b.n	80074ea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	061b      	lsls	r3, r3, #24
 80074e4:	697a      	ldr	r2, [r7, #20]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d120      	bne.n	8007532 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	43db      	mvns	r3, r3
 80074fa:	ea02 0103 	and.w	r1, r2, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	430a      	orrs	r2, r1
 8007506:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	6812      	ldr	r2, [r2, #0]
 8007510:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b0a      	cmp	r3, #10
 8007518:	d003      	beq.n	8007522 <HAL_DMA2D_ConfigLayer+0xb2>
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	2b09      	cmp	r3, #9
 8007520:	d127      	bne.n	8007572 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800752e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007530:	e01f      	b.n	8007572 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69da      	ldr	r2, [r3, #28]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	43db      	mvns	r3, r3
 800753c:	ea02 0103 	and.w	r1, r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	430a      	orrs	r2, r1
 8007548:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2b0a      	cmp	r3, #10
 800755a:	d003      	beq.n	8007564 <HAL_DMA2D_ConfigLayer+0xf4>
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b09      	cmp	r3, #9
 8007562:	d106      	bne.n	8007572 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007570:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	371c      	adds	r7, #28
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	ff03000f 	.word	0xff03000f

08007594 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e086      	b.n	80076b4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d106      	bne.n	80075be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f7fc fd91 	bl	80040e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075be:	4b3f      	ldr	r3, [pc, #252]	@ (80076bc <HAL_ETH_Init+0x128>)
 80075c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075c2:	4a3e      	ldr	r2, [pc, #248]	@ (80076bc <HAL_ETH_Init+0x128>)
 80075c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80075ca:	4b3c      	ldr	r3, [pc, #240]	@ (80076bc <HAL_ETH_Init+0x128>)
 80075cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075d2:	60bb      	str	r3, [r7, #8]
 80075d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80075d6:	4b3a      	ldr	r3, [pc, #232]	@ (80076c0 <HAL_ETH_Init+0x12c>)
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4a39      	ldr	r2, [pc, #228]	@ (80076c0 <HAL_ETH_Init+0x12c>)
 80075dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80075e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80075e2:	4b37      	ldr	r3, [pc, #220]	@ (80076c0 <HAL_ETH_Init+0x12c>)
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	4935      	ldr	r1, [pc, #212]	@ (80076c0 <HAL_ETH_Init+0x12c>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80075f0:	4b33      	ldr	r3, [pc, #204]	@ (80076c0 <HAL_ETH_Init+0x12c>)
 80075f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	6812      	ldr	r2, [r2, #0]
 8007602:	f043 0301 	orr.w	r3, r3, #1
 8007606:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800760a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800760c:	f7fe fc4c 	bl	8005ea8 <HAL_GetTick>
 8007610:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007612:	e011      	b.n	8007638 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007614:	f7fe fc48 	bl	8005ea8 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007622:	d909      	bls.n	8007638 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2204      	movs	r2, #4
 8007628:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	22e0      	movs	r2, #224	@ 0xe0
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e03d      	b.n	80076b4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e4      	bne.n	8007614 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 f97a 	bl	8007944 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fa25 	bl	8007aa0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fa7b 	bl	8007b52 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	461a      	mov	r2, r3
 8007662:	2100      	movs	r1, #0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f9e3 	bl	8007a30 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007678:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	4b0f      	ldr	r3, [pc, #60]	@ (80076c4 <HAL_ETH_Init+0x130>)
 8007688:	430b      	orrs	r3, r1
 800768a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800769e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2210      	movs	r2, #16
 80076ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40023800 	.word	0x40023800
 80076c0:	40013800 	.word	0x40013800
 80076c4:	00020060 	.word	0x00020060

080076c8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	4b53      	ldr	r3, [pc, #332]	@ (800782c <ETH_SetMACConfig+0x164>)
 80076de:	4013      	ands	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	7b9b      	ldrb	r3, [r3, #14]
 80076e6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	7c12      	ldrb	r2, [r2, #16]
 80076ec:	2a00      	cmp	r2, #0
 80076ee:	d102      	bne.n	80076f6 <ETH_SetMACConfig+0x2e>
 80076f0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80076f4:	e000      	b.n	80076f8 <ETH_SetMACConfig+0x30>
 80076f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80076f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	7c52      	ldrb	r2, [r2, #17]
 80076fe:	2a00      	cmp	r2, #0
 8007700:	d102      	bne.n	8007708 <ETH_SetMACConfig+0x40>
 8007702:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007706:	e000      	b.n	800770a <ETH_SetMACConfig+0x42>
 8007708:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800770a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007710:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	7fdb      	ldrb	r3, [r3, #31]
 8007716:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007718:	431a      	orrs	r2, r3
                        macconf->Speed |
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800771e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007720:	683a      	ldr	r2, [r7, #0]
 8007722:	7f92      	ldrb	r2, [r2, #30]
 8007724:	2a00      	cmp	r2, #0
 8007726:	d102      	bne.n	800772e <ETH_SetMACConfig+0x66>
 8007728:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800772c:	e000      	b.n	8007730 <ETH_SetMACConfig+0x68>
 800772e:	2200      	movs	r2, #0
                        macconf->Speed |
 8007730:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	7f1b      	ldrb	r3, [r3, #28]
 8007736:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007738:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800773e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	791b      	ldrb	r3, [r3, #4]
 8007744:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007746:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800774e:	2a00      	cmp	r2, #0
 8007750:	d102      	bne.n	8007758 <ETH_SetMACConfig+0x90>
 8007752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007756:	e000      	b.n	800775a <ETH_SetMACConfig+0x92>
 8007758:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800775a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	7bdb      	ldrb	r3, [r3, #15]
 8007760:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007762:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007768:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007770:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007772:	4313      	orrs	r3, r2
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800778a:	2001      	movs	r0, #1
 800778c:	f7fe fb98 	bl	8005ec0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80077a6:	4013      	ands	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80077b6:	2a00      	cmp	r2, #0
 80077b8:	d101      	bne.n	80077be <ETH_SetMACConfig+0xf6>
 80077ba:	2280      	movs	r2, #128	@ 0x80
 80077bc:	e000      	b.n	80077c0 <ETH_SetMACConfig+0xf8>
 80077be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80077c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80077c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80077ce:	2a01      	cmp	r2, #1
 80077d0:	d101      	bne.n	80077d6 <ETH_SetMACConfig+0x10e>
 80077d2:	2208      	movs	r2, #8
 80077d4:	e000      	b.n	80077d8 <ETH_SetMACConfig+0x110>
 80077d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80077d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80077e0:	2a01      	cmp	r2, #1
 80077e2:	d101      	bne.n	80077e8 <ETH_SetMACConfig+0x120>
 80077e4:	2204      	movs	r2, #4
 80077e6:	e000      	b.n	80077ea <ETH_SetMACConfig+0x122>
 80077e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80077ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80077f2:	2a01      	cmp	r2, #1
 80077f4:	d101      	bne.n	80077fa <ETH_SetMACConfig+0x132>
 80077f6:	2202      	movs	r2, #2
 80077f8:	e000      	b.n	80077fc <ETH_SetMACConfig+0x134>
 80077fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80077fc:	4313      	orrs	r3, r2
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4313      	orrs	r3, r2
 8007802:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007814:	2001      	movs	r0, #1
 8007816:	f7fe fb53 	bl	8005ec0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	619a      	str	r2, [r3, #24]
}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	fd20810f 	.word	0xfd20810f

08007830 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	4b3d      	ldr	r3, [pc, #244]	@ (8007940 <ETH_SetDMAConfig+0x110>)
 800784a:	4013      	ands	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	7b1b      	ldrb	r3, [r3, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d102      	bne.n	800785c <ETH_SetDMAConfig+0x2c>
 8007856:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800785a:	e000      	b.n	800785e <ETH_SetDMAConfig+0x2e>
 800785c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	7b5b      	ldrb	r3, [r3, #13]
 8007862:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007864:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007866:	683a      	ldr	r2, [r7, #0]
 8007868:	7f52      	ldrb	r2, [r2, #29]
 800786a:	2a00      	cmp	r2, #0
 800786c:	d102      	bne.n	8007874 <ETH_SetDMAConfig+0x44>
 800786e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007872:	e000      	b.n	8007876 <ETH_SetDMAConfig+0x46>
 8007874:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007876:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	7b9b      	ldrb	r3, [r3, #14]
 800787c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800787e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007884:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	7f1b      	ldrb	r3, [r3, #28]
 800788a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800788c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	7f9b      	ldrb	r3, [r3, #30]
 8007892:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007894:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800789a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80078a4:	4313      	orrs	r3, r2
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078b4:	461a      	mov	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80078c6:	2001      	movs	r0, #1
 80078c8:	f7fe fafa 	bl	8005ec0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078d4:	461a      	mov	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80078e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80078ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80078f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80078f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80078fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007900:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007902:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007908:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007912:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007916:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007924:	2001      	movs	r0, #1
 8007926:	f7fe facb 	bl	8005ec0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007932:	461a      	mov	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6013      	str	r3, [r2, #0]
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	f8de3f23 	.word	0xf8de3f23

08007944 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b0a6      	sub	sp, #152	@ 0x98
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800794c:	2301      	movs	r3, #1
 800794e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007952:	2301      	movs	r3, #1
 8007954:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007958:	2300      	movs	r3, #0
 800795a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800795c:	2300      	movs	r3, #0
 800795e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007962:	2301      	movs	r3, #1
 8007964:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007968:	2300      	movs	r3, #0
 800796a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800796e:	2301      	movs	r3, #1
 8007970:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8007974:	2301      	movs	r3, #1
 8007976:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800797a:	2300      	movs	r3, #0
 800797c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007980:	2300      	movs	r3, #0
 8007982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007986:	2300      	movs	r3, #0
 8007988:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800798a:	2300      	movs	r3, #0
 800798c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007990:	2300      	movs	r3, #0
 8007992:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007994:	2300      	movs	r3, #0
 8007996:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800799a:	2300      	movs	r3, #0
 800799c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80079a6:	2300      	movs	r3, #0
 80079a8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80079ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80079b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80079b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80079b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80079be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80079c2:	4619      	mov	r1, r3
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7ff fe7f 	bl	80076c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80079ca:	2301      	movs	r3, #1
 80079cc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80079ce:	2301      	movs	r3, #1
 80079d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80079d2:	2301      	movs	r3, #1
 80079d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80079d8:	2301      	movs	r3, #1
 80079da:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80079dc:	2300      	movs	r3, #0
 80079de:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80079e6:	2300      	movs	r3, #0
 80079e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80079ec:	2300      	movs	r3, #0
 80079ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80079fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80079fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007a00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8007a04:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007a06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a0a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8007a1a:	f107 0308 	add.w	r3, r7, #8
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7ff ff05 	bl	8007830 <ETH_SetDMAConfig>
}
 8007a26:	bf00      	nop
 8007a28:	3798      	adds	r7, #152	@ 0x98
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3305      	adds	r3, #5
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	3204      	adds	r2, #4
 8007a48:	7812      	ldrb	r2, [r2, #0]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	4b11      	ldr	r3, [pc, #68]	@ (8007a98 <ETH_MACAddressConfig+0x68>)
 8007a52:	4413      	add	r3, r2
 8007a54:	461a      	mov	r2, r3
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3303      	adds	r3, #3
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	061a      	lsls	r2, r3, #24
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	3302      	adds	r3, #2
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	041b      	lsls	r3, r3, #16
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	4313      	orrs	r3, r2
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4b06      	ldr	r3, [pc, #24]	@ (8007a9c <ETH_MACAddressConfig+0x6c>)
 8007a82:	4413      	add	r3, r2
 8007a84:	461a      	mov	r2, r3
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	6013      	str	r3, [r2, #0]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40028040 	.word	0x40028040
 8007a9c:	40028044 	.word	0x40028044

08007aa0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	e03e      	b.n	8007b2c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68d9      	ldr	r1, [r3, #12]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	440b      	add	r3, r1
 8007abe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	3206      	adds	r2, #6
 8007ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d80c      	bhi.n	8007b10 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68d9      	ldr	r1, [r3, #12]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	440b      	add	r3, r1
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	60da      	str	r2, [r3, #12]
 8007b0e:	e004      	b.n	8007b1a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	461a      	mov	r2, r3
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	d9bd      	bls.n	8007aae <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68da      	ldr	r2, [r3, #12]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b44:	611a      	str	r2, [r3, #16]
}
 8007b46:	bf00      	nop
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b085      	sub	sp, #20
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	e048      	b.n	8007bf2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6919      	ldr	r1, [r3, #16]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	440b      	add	r3, r1
 8007b70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2200      	movs	r2, #0
 8007b82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2200      	movs	r2, #0
 8007b94:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b9c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007bb6:	68b9      	ldr	r1, [r7, #8]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	3212      	adds	r2, #18
 8007bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d80c      	bhi.n	8007be2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6919      	ldr	r1, [r3, #16]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	1c5a      	adds	r2, r3, #1
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	440b      	add	r3, r1
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	60da      	str	r2, [r3, #12]
 8007be0:	e004      	b.n	8007bec <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	461a      	mov	r2, r3
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d9b3      	bls.n	8007b60 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691a      	ldr	r2, [r3, #16]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c22:	60da      	str	r2, [r3, #12]
}
 8007c24:	bf00      	nop
 8007c26:	3714      	adds	r7, #20
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b089      	sub	sp, #36	@ 0x24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007c42:	2300      	movs	r3, #0
 8007c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007c46:	2300      	movs	r3, #0
 8007c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	e175      	b.n	8007f3c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007c50:	2201      	movs	r2, #1
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	fa02 f303 	lsl.w	r3, r2, r3
 8007c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	4013      	ands	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	f040 8164 	bne.w	8007f36 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d005      	beq.n	8007c86 <HAL_GPIO_Init+0x56>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f003 0303 	and.w	r3, r3, #3
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d130      	bne.n	8007ce8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	2203      	movs	r2, #3
 8007c92:	fa02 f303 	lsl.w	r3, r2, r3
 8007c96:	43db      	mvns	r3, r3
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	68da      	ldr	r2, [r3, #12]
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc4:	43db      	mvns	r3, r3
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	091b      	lsrs	r3, r3, #4
 8007cd2:	f003 0201 	and.w	r2, r3, #1
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f003 0303 	and.w	r3, r3, #3
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d017      	beq.n	8007d24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	2203      	movs	r2, #3
 8007d00:	fa02 f303 	lsl.w	r3, r2, r3
 8007d04:	43db      	mvns	r3, r3
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	4013      	ands	r3, r2
 8007d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	005b      	lsls	r3, r3, #1
 8007d14:	fa02 f303 	lsl.w	r3, r2, r3
 8007d18:	69ba      	ldr	r2, [r7, #24]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f003 0303 	and.w	r3, r3, #3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d123      	bne.n	8007d78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	08da      	lsrs	r2, r3, #3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3208      	adds	r2, #8
 8007d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	220f      	movs	r2, #15
 8007d48:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4c:	43db      	mvns	r3, r3
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	4013      	ands	r3, r2
 8007d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	691a      	ldr	r2, [r3, #16]
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	08da      	lsrs	r2, r3, #3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	3208      	adds	r2, #8
 8007d72:	69b9      	ldr	r1, [r7, #24]
 8007d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	2203      	movs	r2, #3
 8007d84:	fa02 f303 	lsl.w	r3, r2, r3
 8007d88:	43db      	mvns	r3, r3
 8007d8a:	69ba      	ldr	r2, [r7, #24]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f003 0203 	and.w	r2, r3, #3
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80be 	beq.w	8007f36 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dba:	4b66      	ldr	r3, [pc, #408]	@ (8007f54 <HAL_GPIO_Init+0x324>)
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dbe:	4a65      	ldr	r2, [pc, #404]	@ (8007f54 <HAL_GPIO_Init+0x324>)
 8007dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007dc6:	4b63      	ldr	r3, [pc, #396]	@ (8007f54 <HAL_GPIO_Init+0x324>)
 8007dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007dd2:	4a61      	ldr	r2, [pc, #388]	@ (8007f58 <HAL_GPIO_Init+0x328>)
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	089b      	lsrs	r3, r3, #2
 8007dd8:	3302      	adds	r3, #2
 8007dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	f003 0303 	and.w	r3, r3, #3
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	220f      	movs	r2, #15
 8007dea:	fa02 f303 	lsl.w	r3, r2, r3
 8007dee:	43db      	mvns	r3, r3
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	4013      	ands	r3, r2
 8007df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a58      	ldr	r2, [pc, #352]	@ (8007f5c <HAL_GPIO_Init+0x32c>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d037      	beq.n	8007e6e <HAL_GPIO_Init+0x23e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a57      	ldr	r2, [pc, #348]	@ (8007f60 <HAL_GPIO_Init+0x330>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d031      	beq.n	8007e6a <HAL_GPIO_Init+0x23a>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a56      	ldr	r2, [pc, #344]	@ (8007f64 <HAL_GPIO_Init+0x334>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d02b      	beq.n	8007e66 <HAL_GPIO_Init+0x236>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a55      	ldr	r2, [pc, #340]	@ (8007f68 <HAL_GPIO_Init+0x338>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d025      	beq.n	8007e62 <HAL_GPIO_Init+0x232>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a54      	ldr	r2, [pc, #336]	@ (8007f6c <HAL_GPIO_Init+0x33c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d01f      	beq.n	8007e5e <HAL_GPIO_Init+0x22e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a53      	ldr	r2, [pc, #332]	@ (8007f70 <HAL_GPIO_Init+0x340>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d019      	beq.n	8007e5a <HAL_GPIO_Init+0x22a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a52      	ldr	r2, [pc, #328]	@ (8007f74 <HAL_GPIO_Init+0x344>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d013      	beq.n	8007e56 <HAL_GPIO_Init+0x226>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a51      	ldr	r2, [pc, #324]	@ (8007f78 <HAL_GPIO_Init+0x348>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00d      	beq.n	8007e52 <HAL_GPIO_Init+0x222>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a50      	ldr	r2, [pc, #320]	@ (8007f7c <HAL_GPIO_Init+0x34c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d007      	beq.n	8007e4e <HAL_GPIO_Init+0x21e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a4f      	ldr	r2, [pc, #316]	@ (8007f80 <HAL_GPIO_Init+0x350>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d101      	bne.n	8007e4a <HAL_GPIO_Init+0x21a>
 8007e46:	2309      	movs	r3, #9
 8007e48:	e012      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e4a:	230a      	movs	r3, #10
 8007e4c:	e010      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e4e:	2308      	movs	r3, #8
 8007e50:	e00e      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e52:	2307      	movs	r3, #7
 8007e54:	e00c      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e56:	2306      	movs	r3, #6
 8007e58:	e00a      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e5a:	2305      	movs	r3, #5
 8007e5c:	e008      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e5e:	2304      	movs	r3, #4
 8007e60:	e006      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e62:	2303      	movs	r3, #3
 8007e64:	e004      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e002      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <HAL_GPIO_Init+0x240>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	f002 0203 	and.w	r2, r2, #3
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	4093      	lsls	r3, r2
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007e80:	4935      	ldr	r1, [pc, #212]	@ (8007f58 <HAL_GPIO_Init+0x328>)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	089b      	lsrs	r3, r3, #2
 8007e86:	3302      	adds	r3, #2
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8007f84 <HAL_GPIO_Init+0x354>)
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	43db      	mvns	r3, r3
 8007e98:	69ba      	ldr	r2, [r7, #24]
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007eb2:	4a34      	ldr	r2, [pc, #208]	@ (8007f84 <HAL_GPIO_Init+0x354>)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007eb8:	4b32      	ldr	r3, [pc, #200]	@ (8007f84 <HAL_GPIO_Init+0x354>)
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d003      	beq.n	8007edc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007edc:	4a29      	ldr	r2, [pc, #164]	@ (8007f84 <HAL_GPIO_Init+0x354>)
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007ee2:	4b28      	ldr	r3, [pc, #160]	@ (8007f84 <HAL_GPIO_Init+0x354>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	43db      	mvns	r3, r3
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d003      	beq.n	8007f06 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007f06:	4a1f      	ldr	r2, [pc, #124]	@ (8007f84 <HAL_GPIO_Init+0x354>)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007f84 <HAL_GPIO_Init+0x354>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	69ba      	ldr	r2, [r7, #24]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007f30:	4a14      	ldr	r2, [pc, #80]	@ (8007f84 <HAL_GPIO_Init+0x354>)
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	2b0f      	cmp	r3, #15
 8007f40:	f67f ae86 	bls.w	8007c50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007f44:	bf00      	nop
 8007f46:	bf00      	nop
 8007f48:	3724      	adds	r7, #36	@ 0x24
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40023800 	.word	0x40023800
 8007f58:	40013800 	.word	0x40013800
 8007f5c:	40020000 	.word	0x40020000
 8007f60:	40020400 	.word	0x40020400
 8007f64:	40020800 	.word	0x40020800
 8007f68:	40020c00 	.word	0x40020c00
 8007f6c:	40021000 	.word	0x40021000
 8007f70:	40021400 	.word	0x40021400
 8007f74:	40021800 	.word	0x40021800
 8007f78:	40021c00 	.word	0x40021c00
 8007f7c:	40022000 	.word	0x40022000
 8007f80:	40022400 	.word	0x40022400
 8007f84:	40013c00 	.word	0x40013c00

08007f88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	691a      	ldr	r2, [r3, #16]
 8007f98:	887b      	ldrh	r3, [r7, #2]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	73fb      	strb	r3, [r7, #15]
 8007fa4:	e001      	b.n	8007faa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	807b      	strh	r3, [r7, #2]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fc8:	787b      	ldrb	r3, [r7, #1]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d003      	beq.n	8007fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fce:	887a      	ldrh	r2, [r7, #2]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007fd4:	e003      	b.n	8007fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007fd6:	887b      	ldrh	r3, [r7, #2]
 8007fd8:	041a      	lsls	r2, r3, #16
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	619a      	str	r2, [r3, #24]
}
 8007fde:	bf00      	nop
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b086      	sub	sp, #24
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4618      	mov	r0, r3
 8008002:	f009 f951 	bl	80112a8 <USB_GetMode>
 8008006:	4603      	mov	r3, r0
 8008008:	2b01      	cmp	r3, #1
 800800a:	f040 80fb 	bne.w	8008204 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4618      	mov	r0, r3
 8008014:	f009 f914 	bl	8011240 <USB_ReadInterrupts>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	f000 80f1 	beq.w	8008202 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4618      	mov	r0, r3
 8008026:	f009 f90b 	bl	8011240 <USB_ReadInterrupts>
 800802a:	4603      	mov	r3, r0
 800802c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008030:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008034:	d104      	bne.n	8008040 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800803e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4618      	mov	r0, r3
 8008046:	f009 f8fb 	bl	8011240 <USB_ReadInterrupts>
 800804a:	4603      	mov	r3, r0
 800804c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008050:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008054:	d104      	bne.n	8008060 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800805e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4618      	mov	r0, r3
 8008066:	f009 f8eb 	bl	8011240 <USB_ReadInterrupts>
 800806a:	4603      	mov	r3, r0
 800806c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008070:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008074:	d104      	bne.n	8008080 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800807e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f009 f8db 	bl	8011240 <USB_ReadInterrupts>
 800808a:	4603      	mov	r3, r0
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b02      	cmp	r3, #2
 8008092:	d103      	bne.n	800809c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	2202      	movs	r2, #2
 800809a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f009 f8cd 	bl	8011240 <USB_ReadInterrupts>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080b0:	d120      	bne.n	80080f4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80080ba:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d113      	bne.n	80080f4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80080cc:	2110      	movs	r1, #16
 80080ce:	6938      	ldr	r0, [r7, #16]
 80080d0:	f008 fffe 	bl	80110d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80080d4:	6938      	ldr	r0, [r7, #16]
 80080d6:	f009 f82d 	bl	8011134 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	7a5b      	ldrb	r3, [r3, #9]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d105      	bne.n	80080ee <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2101      	movs	r1, #1
 80080e8:	4618      	mov	r0, r3
 80080ea:	f009 f8eb 	bl	80112c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f00e ffd4 	bl	801709c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f009 f8a1 	bl	8011240 <USB_ReadInterrupts>
 80080fe:	4603      	mov	r3, r0
 8008100:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008108:	d102      	bne.n	8008110 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fca1 	bl	8009a52 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4618      	mov	r0, r3
 8008116:	f009 f893 	bl	8011240 <USB_ReadInterrupts>
 800811a:	4603      	mov	r3, r0
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b08      	cmp	r3, #8
 8008122:	d106      	bne.n	8008132 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f00e ff9d 	bl	8017064 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2208      	movs	r2, #8
 8008130:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f009 f882 	bl	8011240 <USB_ReadInterrupts>
 800813c:	4603      	mov	r3, r0
 800813e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008142:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008146:	d139      	bne.n	80081bc <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4618      	mov	r0, r3
 800814e:	f009 f8f6 	bl	801133e <USB_HC_ReadInterrupt>
 8008152:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e025      	b.n	80081a6 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d018      	beq.n	80081a0 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4413      	add	r3, r2
 8008176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008180:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008184:	d106      	bne.n	8008194 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	b2db      	uxtb	r3, r3
 800818a:	4619      	mov	r1, r3
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f859 	bl	8008244 <HCD_HC_IN_IRQHandler>
 8008192:	e005      	b.n	80081a0 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	b2db      	uxtb	r3, r3
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 febb 	bl	8008f16 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	3301      	adds	r3, #1
 80081a4:	617b      	str	r3, [r7, #20]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	795b      	ldrb	r3, [r3, #5]
 80081aa:	461a      	mov	r2, r3
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d3d3      	bcc.n	800815a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80081ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f009 f83d 	bl	8011240 <USB_ReadInterrupts>
 80081c6:	4603      	mov	r3, r0
 80081c8:	f003 0310 	and.w	r3, r3, #16
 80081cc:	2b10      	cmp	r3, #16
 80081ce:	d101      	bne.n	80081d4 <HAL_HCD_IRQHandler+0x1ea>
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <HAL_HCD_IRQHandler+0x1ec>
 80081d4:	2300      	movs	r3, #0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d014      	beq.n	8008204 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0210 	bic.w	r2, r2, #16
 80081e8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 fb52 	bl	8009894 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f042 0210 	orr.w	r2, r2, #16
 80081fe:	619a      	str	r2, [r3, #24]
 8008200:	e000      	b.n	8008204 <HAL_HCD_IRQHandler+0x21a>
      return;
 8008202:	bf00      	nop
    }
  }
}
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8008218:	2b01      	cmp	r3, #1
 800821a:	d101      	bne.n	8008220 <HAL_HCD_Stop+0x16>
 800821c:	2302      	movs	r3, #2
 800821e:	e00d      	b.n	800823c <HAL_HCD_Stop+0x32>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4618      	mov	r0, r3
 800822e:	f009 f9b7 	bl	80115a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800823a:	2300      	movs	r3, #0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	78fa      	ldrb	r2, [r7, #3]
 8008260:	4611      	mov	r1, r2
 8008262:	4618      	mov	r0, r3
 8008264:	f008 ffff 	bl	8011266 <USB_ReadChInterrupts>
 8008268:	4603      	mov	r3, r0
 800826a:	f003 0304 	and.w	r3, r3, #4
 800826e:	2b04      	cmp	r3, #4
 8008270:	d11a      	bne.n	80082a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008272:	78fb      	ldrb	r3, [r7, #3]
 8008274:	015a      	lsls	r2, r3, #5
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	4413      	add	r3, r2
 800827a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800827e:	461a      	mov	r2, r3
 8008280:	2304      	movs	r3, #4
 8008282:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008284:	78fa      	ldrb	r2, [r7, #3]
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4613      	mov	r3, r2
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	334d      	adds	r3, #77	@ 0x4d
 8008294:	2207      	movs	r2, #7
 8008296:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	78fa      	ldrb	r2, [r7, #3]
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f009 f85d 	bl	8011360 <USB_HC_Halt>
 80082a6:	e09e      	b.n	80083e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	4611      	mov	r1, r2
 80082b0:	4618      	mov	r0, r3
 80082b2:	f008 ffd8 	bl	8011266 <USB_ReadChInterrupts>
 80082b6:	4603      	mov	r3, r0
 80082b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082c0:	d11b      	bne.n	80082fa <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ce:	461a      	mov	r2, r3
 80082d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80082d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80082d6:	78fa      	ldrb	r2, [r7, #3]
 80082d8:	6879      	ldr	r1, [r7, #4]
 80082da:	4613      	mov	r3, r2
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	1a9b      	subs	r3, r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	440b      	add	r3, r1
 80082e4:	334d      	adds	r3, #77	@ 0x4d
 80082e6:	2208      	movs	r2, #8
 80082e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	78fa      	ldrb	r2, [r7, #3]
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f009 f834 	bl	8011360 <USB_HC_Halt>
 80082f8:	e075      	b.n	80083e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	78fa      	ldrb	r2, [r7, #3]
 8008300:	4611      	mov	r1, r2
 8008302:	4618      	mov	r0, r3
 8008304:	f008 ffaf 	bl	8011266 <USB_ReadChInterrupts>
 8008308:	4603      	mov	r3, r0
 800830a:	f003 0308 	and.w	r3, r3, #8
 800830e:	2b08      	cmp	r3, #8
 8008310:	d11a      	bne.n	8008348 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008312:	78fb      	ldrb	r3, [r7, #3]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	4413      	add	r3, r2
 800831a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831e:	461a      	mov	r2, r3
 8008320:	2308      	movs	r3, #8
 8008322:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008324:	78fa      	ldrb	r2, [r7, #3]
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4613      	mov	r3, r2
 800832a:	011b      	lsls	r3, r3, #4
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	440b      	add	r3, r1
 8008332:	334d      	adds	r3, #77	@ 0x4d
 8008334:	2206      	movs	r2, #6
 8008336:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f009 f80d 	bl	8011360 <USB_HC_Halt>
 8008346:	e04e      	b.n	80083e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f008 ff88 	bl	8011266 <USB_ReadChInterrupts>
 8008356:	4603      	mov	r3, r0
 8008358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800835c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008360:	d11b      	bne.n	800839a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008362:	78fb      	ldrb	r3, [r7, #3]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	4413      	add	r3, r2
 800836a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800836e:	461a      	mov	r2, r3
 8008370:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008374:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	334d      	adds	r3, #77	@ 0x4d
 8008386:	2209      	movs	r2, #9
 8008388:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	78fa      	ldrb	r2, [r7, #3]
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f008 ffe4 	bl	8011360 <USB_HC_Halt>
 8008398:	e025      	b.n	80083e6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	4611      	mov	r1, r2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f008 ff5f 	bl	8011266 <USB_ReadChInterrupts>
 80083a8:	4603      	mov	r3, r0
 80083aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ae:	2b80      	cmp	r3, #128	@ 0x80
 80083b0:	d119      	bne.n	80083e6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083be:	461a      	mov	r2, r3
 80083c0:	2380      	movs	r3, #128	@ 0x80
 80083c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	4613      	mov	r3, r2
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	334d      	adds	r3, #77	@ 0x4d
 80083d4:	2207      	movs	r2, #7
 80083d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f008 ffbd 	bl	8011360 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	78fa      	ldrb	r2, [r7, #3]
 80083ec:	4611      	mov	r1, r2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f008 ff39 	bl	8011266 <USB_ReadChInterrupts>
 80083f4:	4603      	mov	r3, r0
 80083f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083fe:	d112      	bne.n	8008426 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	78fa      	ldrb	r2, [r7, #3]
 8008406:	4611      	mov	r1, r2
 8008408:	4618      	mov	r0, r3
 800840a:	f008 ffa9 	bl	8011360 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4413      	add	r3, r2
 8008416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841a:	461a      	mov	r2, r3
 800841c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008420:	6093      	str	r3, [r2, #8]
 8008422:	f000 bd75 	b.w	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f008 ff19 	bl	8011266 <USB_ReadChInterrupts>
 8008434:	4603      	mov	r3, r0
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b01      	cmp	r3, #1
 800843c:	f040 8128 	bne.w	8008690 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008440:	78fb      	ldrb	r3, [r7, #3]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800844c:	461a      	mov	r2, r3
 800844e:	2320      	movs	r3, #32
 8008450:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008452:	78fa      	ldrb	r2, [r7, #3]
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	4613      	mov	r3, r2
 8008458:	011b      	lsls	r3, r3, #4
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	440b      	add	r3, r1
 8008460:	331b      	adds	r3, #27
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d119      	bne.n	800849c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008468:	78fa      	ldrb	r2, [r7, #3]
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4613      	mov	r3, r2
 800846e:	011b      	lsls	r3, r3, #4
 8008470:	1a9b      	subs	r3, r3, r2
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	440b      	add	r3, r1
 8008476:	331b      	adds	r3, #27
 8008478:	2200      	movs	r2, #0
 800847a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	4413      	add	r3, r2
 8008484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	78fa      	ldrb	r2, [r7, #3]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	440a      	add	r2, r1
 8008492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800849a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	799b      	ldrb	r3, [r3, #6]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d01b      	beq.n	80084dc <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80084a4:	78fa      	ldrb	r2, [r7, #3]
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	1a9b      	subs	r3, r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	3330      	adds	r3, #48	@ 0x30
 80084b4:	6819      	ldr	r1, [r3, #0]
 80084b6:	78fb      	ldrb	r3, [r7, #3]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	1ac9      	subs	r1, r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4613      	mov	r3, r2
 80084d0:	011b      	lsls	r3, r3, #4
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4403      	add	r3, r0
 80084d8:	3338      	adds	r3, #56	@ 0x38
 80084da:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4613      	mov	r3, r2
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	440b      	add	r3, r1
 80084ea:	334d      	adds	r3, #77	@ 0x4d
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	4613      	mov	r3, r2
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	1a9b      	subs	r3, r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	440b      	add	r3, r1
 80084fe:	3344      	adds	r3, #68	@ 0x44
 8008500:	2200      	movs	r2, #0
 8008502:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008504:	78fb      	ldrb	r3, [r7, #3]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	4413      	add	r3, r2
 800850c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008510:	461a      	mov	r2, r3
 8008512:	2301      	movs	r3, #1
 8008514:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008516:	78fa      	ldrb	r2, [r7, #3]
 8008518:	6879      	ldr	r1, [r7, #4]
 800851a:	4613      	mov	r3, r2
 800851c:	011b      	lsls	r3, r3, #4
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	440b      	add	r3, r1
 8008524:	3326      	adds	r3, #38	@ 0x26
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800852c:	78fa      	ldrb	r2, [r7, #3]
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	1a9b      	subs	r3, r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	3326      	adds	r3, #38	@ 0x26
 800853c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800853e:	2b02      	cmp	r3, #2
 8008540:	d110      	bne.n	8008564 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	4611      	mov	r1, r2
 800854a:	4618      	mov	r0, r3
 800854c:	f008 ff08 	bl	8011360 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855c:	461a      	mov	r2, r3
 800855e:	2310      	movs	r3, #16
 8008560:	6093      	str	r3, [r2, #8]
 8008562:	e03d      	b.n	80085e0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	6879      	ldr	r1, [r7, #4]
 8008568:	4613      	mov	r3, r2
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	1a9b      	subs	r3, r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	440b      	add	r3, r1
 8008572:	3326      	adds	r3, #38	@ 0x26
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b03      	cmp	r3, #3
 8008578:	d00a      	beq.n	8008590 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800857a:	78fa      	ldrb	r2, [r7, #3]
 800857c:	6879      	ldr	r1, [r7, #4]
 800857e:	4613      	mov	r3, r2
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	440b      	add	r3, r1
 8008588:	3326      	adds	r3, #38	@ 0x26
 800858a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800858c:	2b01      	cmp	r3, #1
 800858e:	d127      	bne.n	80085e0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	78fa      	ldrb	r2, [r7, #3]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085ae:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80085b0:	78fa      	ldrb	r2, [r7, #3]
 80085b2:	6879      	ldr	r1, [r7, #4]
 80085b4:	4613      	mov	r3, r2
 80085b6:	011b      	lsls	r3, r3, #4
 80085b8:	1a9b      	subs	r3, r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	334c      	adds	r3, #76	@ 0x4c
 80085c0:	2201      	movs	r2, #1
 80085c2:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80085c4:	78fa      	ldrb	r2, [r7, #3]
 80085c6:	6879      	ldr	r1, [r7, #4]
 80085c8:	4613      	mov	r3, r2
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	440b      	add	r3, r1
 80085d2:	334c      	adds	r3, #76	@ 0x4c
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f00e fd6c 	bl	80170b8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	799b      	ldrb	r3, [r3, #6]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d13b      	bne.n	8008660 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80085e8:	78fa      	ldrb	r2, [r7, #3]
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	011b      	lsls	r3, r3, #4
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	3338      	adds	r3, #56	@ 0x38
 80085f8:	6819      	ldr	r1, [r3, #0]
 80085fa:	78fa      	ldrb	r2, [r7, #3]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4403      	add	r3, r0
 8008608:	3328      	adds	r3, #40	@ 0x28
 800860a:	881b      	ldrh	r3, [r3, #0]
 800860c:	440b      	add	r3, r1
 800860e:	1e59      	subs	r1, r3, #1
 8008610:	78fa      	ldrb	r2, [r7, #3]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4613      	mov	r3, r2
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	1a9b      	subs	r3, r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4403      	add	r3, r0
 800861e:	3328      	adds	r3, #40	@ 0x28
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	fbb1 f3f3 	udiv	r3, r1, r3
 8008626:	f003 0301 	and.w	r3, r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8470 	beq.w	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	6879      	ldr	r1, [r7, #4]
 8008634:	4613      	mov	r3, r2
 8008636:	011b      	lsls	r3, r3, #4
 8008638:	1a9b      	subs	r3, r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	440b      	add	r3, r1
 800863e:	333c      	adds	r3, #60	@ 0x3c
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	78fa      	ldrb	r2, [r7, #3]
 8008644:	f083 0301 	eor.w	r3, r3, #1
 8008648:	b2d8      	uxtb	r0, r3
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4613      	mov	r3, r2
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	333c      	adds	r3, #60	@ 0x3c
 8008658:	4602      	mov	r2, r0
 800865a:	701a      	strb	r2, [r3, #0]
 800865c:	f000 bc58 	b.w	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	011b      	lsls	r3, r3, #4
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	333c      	adds	r3, #60	@ 0x3c
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	78fa      	ldrb	r2, [r7, #3]
 8008674:	f083 0301 	eor.w	r3, r3, #1
 8008678:	b2d8      	uxtb	r0, r3
 800867a:	6879      	ldr	r1, [r7, #4]
 800867c:	4613      	mov	r3, r2
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	1a9b      	subs	r3, r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	440b      	add	r3, r1
 8008686:	333c      	adds	r3, #60	@ 0x3c
 8008688:	4602      	mov	r2, r0
 800868a:	701a      	strb	r2, [r3, #0]
 800868c:	f000 bc40 	b.w	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	78fa      	ldrb	r2, [r7, #3]
 8008696:	4611      	mov	r1, r2
 8008698:	4618      	mov	r0, r3
 800869a:	f008 fde4 	bl	8011266 <USB_ReadChInterrupts>
 800869e:	4603      	mov	r3, r0
 80086a0:	f003 0320 	and.w	r3, r3, #32
 80086a4:	2b20      	cmp	r3, #32
 80086a6:	d131      	bne.n	800870c <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086b4:	461a      	mov	r2, r3
 80086b6:	2320      	movs	r3, #32
 80086b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	4613      	mov	r3, r2
 80086c0:	011b      	lsls	r3, r3, #4
 80086c2:	1a9b      	subs	r3, r3, r2
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	440b      	add	r3, r1
 80086c8:	331a      	adds	r3, #26
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	f040 841f 	bne.w	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80086d2:	78fa      	ldrb	r2, [r7, #3]
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4613      	mov	r3, r2
 80086d8:	011b      	lsls	r3, r3, #4
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	440b      	add	r3, r1
 80086e0:	331b      	adds	r3, #27
 80086e2:	2201      	movs	r2, #1
 80086e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80086e6:	78fa      	ldrb	r2, [r7, #3]
 80086e8:	6879      	ldr	r1, [r7, #4]
 80086ea:	4613      	mov	r3, r2
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	440b      	add	r3, r1
 80086f4:	334d      	adds	r3, #77	@ 0x4d
 80086f6:	2203      	movs	r2, #3
 80086f8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	78fa      	ldrb	r2, [r7, #3]
 8008700:	4611      	mov	r1, r2
 8008702:	4618      	mov	r0, r3
 8008704:	f008 fe2c 	bl	8011360 <USB_HC_Halt>
 8008708:	f000 bc02 	b.w	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f008 fda6 	bl	8011266 <USB_ReadChInterrupts>
 800871a:	4603      	mov	r3, r0
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b02      	cmp	r3, #2
 8008722:	f040 8305 	bne.w	8008d30 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008732:	461a      	mov	r2, r3
 8008734:	2302      	movs	r3, #2
 8008736:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008738:	78fa      	ldrb	r2, [r7, #3]
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	4613      	mov	r3, r2
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	1a9b      	subs	r3, r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	440b      	add	r3, r1
 8008746:	334d      	adds	r3, #77	@ 0x4d
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d114      	bne.n	8008778 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800874e:	78fa      	ldrb	r2, [r7, #3]
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	011b      	lsls	r3, r3, #4
 8008756:	1a9b      	subs	r3, r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	334d      	adds	r3, #77	@ 0x4d
 800875e:	2202      	movs	r2, #2
 8008760:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	334c      	adds	r3, #76	@ 0x4c
 8008772:	2201      	movs	r2, #1
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	e2cc      	b.n	8008d12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	334d      	adds	r3, #77	@ 0x4d
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	2b06      	cmp	r3, #6
 800878c:	d114      	bne.n	80087b8 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	011b      	lsls	r3, r3, #4
 8008796:	1a9b      	subs	r3, r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	334d      	adds	r3, #77	@ 0x4d
 800879e:	2202      	movs	r2, #2
 80087a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	6879      	ldr	r1, [r7, #4]
 80087a6:	4613      	mov	r3, r2
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	1a9b      	subs	r3, r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	440b      	add	r3, r1
 80087b0:	334c      	adds	r3, #76	@ 0x4c
 80087b2:	2205      	movs	r2, #5
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	e2ac      	b.n	8008d12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	4613      	mov	r3, r2
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	1a9b      	subs	r3, r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	334d      	adds	r3, #77	@ 0x4d
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b07      	cmp	r3, #7
 80087cc:	d00b      	beq.n	80087e6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	6879      	ldr	r1, [r7, #4]
 80087d2:	4613      	mov	r3, r2
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	440b      	add	r3, r1
 80087dc:	334d      	adds	r3, #77	@ 0x4d
 80087de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80087e0:	2b09      	cmp	r3, #9
 80087e2:	f040 80a6 	bne.w	8008932 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80087e6:	78fa      	ldrb	r2, [r7, #3]
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	011b      	lsls	r3, r3, #4
 80087ee:	1a9b      	subs	r3, r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	334d      	adds	r3, #77	@ 0x4d
 80087f6:	2202      	movs	r2, #2
 80087f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80087fa:	78fa      	ldrb	r2, [r7, #3]
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	4613      	mov	r3, r2
 8008800:	011b      	lsls	r3, r3, #4
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	440b      	add	r3, r1
 8008808:	3344      	adds	r3, #68	@ 0x44
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	1c59      	adds	r1, r3, #1
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	011b      	lsls	r3, r3, #4
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4403      	add	r3, r0
 800881a:	3344      	adds	r3, #68	@ 0x44
 800881c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	011b      	lsls	r3, r3, #4
 8008826:	1a9b      	subs	r3, r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	3344      	adds	r3, #68	@ 0x44
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b02      	cmp	r3, #2
 8008832:	d943      	bls.n	80088bc <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	4613      	mov	r3, r2
 800883a:	011b      	lsls	r3, r3, #4
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	440b      	add	r3, r1
 8008842:	3344      	adds	r3, #68	@ 0x44
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008848:	78fa      	ldrb	r2, [r7, #3]
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	331a      	adds	r3, #26
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2b01      	cmp	r3, #1
 800885c:	d123      	bne.n	80088a6 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800885e:	78fa      	ldrb	r2, [r7, #3]
 8008860:	6879      	ldr	r1, [r7, #4]
 8008862:	4613      	mov	r3, r2
 8008864:	011b      	lsls	r3, r3, #4
 8008866:	1a9b      	subs	r3, r3, r2
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	440b      	add	r3, r1
 800886c:	331b      	adds	r3, #27
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008872:	78fa      	ldrb	r2, [r7, #3]
 8008874:	6879      	ldr	r1, [r7, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	331c      	adds	r3, #28
 8008882:	2200      	movs	r2, #0
 8008884:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008886:	78fb      	ldrb	r3, [r7, #3]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	4413      	add	r3, r2
 800888e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	440a      	add	r2, r1
 800889c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088a4:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80088a6:	78fa      	ldrb	r2, [r7, #3]
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	011b      	lsls	r3, r3, #4
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	334c      	adds	r3, #76	@ 0x4c
 80088b6:	2204      	movs	r2, #4
 80088b8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80088ba:	e229      	b.n	8008d10 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	6879      	ldr	r1, [r7, #4]
 80088c0:	4613      	mov	r3, r2
 80088c2:	011b      	lsls	r3, r3, #4
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	334c      	adds	r3, #76	@ 0x4c
 80088cc:	2202      	movs	r2, #2
 80088ce:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	6879      	ldr	r1, [r7, #4]
 80088d4:	4613      	mov	r3, r2
 80088d6:	011b      	lsls	r3, r3, #4
 80088d8:	1a9b      	subs	r3, r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	440b      	add	r3, r1
 80088de:	3326      	adds	r3, #38	@ 0x26
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00b      	beq.n	80088fe <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	4613      	mov	r3, r2
 80088ec:	011b      	lsls	r3, r3, #4
 80088ee:	1a9b      	subs	r3, r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	440b      	add	r3, r1
 80088f4:	3326      	adds	r3, #38	@ 0x26
 80088f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	f040 8209 	bne.w	8008d10 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	4413      	add	r3, r2
 8008906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008914:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800891c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800891e:	78fb      	ldrb	r3, [r7, #3]
 8008920:	015a      	lsls	r2, r3, #5
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	4413      	add	r3, r2
 8008926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892a:	461a      	mov	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008930:	e1ee      	b.n	8008d10 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008932:	78fa      	ldrb	r2, [r7, #3]
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	4613      	mov	r3, r2
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	1a9b      	subs	r3, r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	440b      	add	r3, r1
 8008940:	334d      	adds	r3, #77	@ 0x4d
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b05      	cmp	r3, #5
 8008946:	f040 80c8 	bne.w	8008ada <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	4613      	mov	r3, r2
 8008950:	011b      	lsls	r3, r3, #4
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	440b      	add	r3, r1
 8008958:	334d      	adds	r3, #77	@ 0x4d
 800895a:	2202      	movs	r2, #2
 800895c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800895e:	78fa      	ldrb	r2, [r7, #3]
 8008960:	6879      	ldr	r1, [r7, #4]
 8008962:	4613      	mov	r3, r2
 8008964:	011b      	lsls	r3, r3, #4
 8008966:	1a9b      	subs	r3, r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	440b      	add	r3, r1
 800896c:	331b      	adds	r3, #27
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b01      	cmp	r3, #1
 8008972:	f040 81ce 	bne.w	8008d12 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	4613      	mov	r3, r2
 800897c:	011b      	lsls	r3, r3, #4
 800897e:	1a9b      	subs	r3, r3, r2
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	440b      	add	r3, r1
 8008984:	3326      	adds	r3, #38	@ 0x26
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b03      	cmp	r3, #3
 800898a:	d16b      	bne.n	8008a64 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800898c:	78fa      	ldrb	r2, [r7, #3]
 800898e:	6879      	ldr	r1, [r7, #4]
 8008990:	4613      	mov	r3, r2
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	1a9b      	subs	r3, r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	440b      	add	r3, r1
 800899a:	3348      	adds	r3, #72	@ 0x48
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	1c59      	adds	r1, r3, #1
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	011b      	lsls	r3, r3, #4
 80089a6:	1a9b      	subs	r3, r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4403      	add	r3, r0
 80089ac:	3348      	adds	r3, #72	@ 0x48
 80089ae:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80089b0:	78fa      	ldrb	r2, [r7, #3]
 80089b2:	6879      	ldr	r1, [r7, #4]
 80089b4:	4613      	mov	r3, r2
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	1a9b      	subs	r3, r3, r2
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	440b      	add	r3, r1
 80089be:	3348      	adds	r3, #72	@ 0x48
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d943      	bls.n	8008a4e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	1a9b      	subs	r3, r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	3348      	adds	r3, #72	@ 0x48
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	6879      	ldr	r1, [r7, #4]
 80089de:	4613      	mov	r3, r2
 80089e0:	011b      	lsls	r3, r3, #4
 80089e2:	1a9b      	subs	r3, r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	440b      	add	r3, r1
 80089e8:	331b      	adds	r3, #27
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80089ee:	78fa      	ldrb	r2, [r7, #3]
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	1a9b      	subs	r3, r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	3344      	adds	r3, #68	@ 0x44
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d809      	bhi.n	8008a18 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	6879      	ldr	r1, [r7, #4]
 8008a08:	4613      	mov	r3, r2
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	1a9b      	subs	r3, r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	331c      	adds	r3, #28
 8008a14:	2201      	movs	r2, #1
 8008a16:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008a18:	78fb      	ldrb	r3, [r7, #3]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	78fa      	ldrb	r2, [r7, #3]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a36:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	6879      	ldr	r1, [r7, #4]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	011b      	lsls	r3, r3, #4
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	440b      	add	r3, r1
 8008a46:	334c      	adds	r3, #76	@ 0x4c
 8008a48:	2204      	movs	r2, #4
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	e014      	b.n	8008a78 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008a4e:	78fa      	ldrb	r2, [r7, #3]
 8008a50:	6879      	ldr	r1, [r7, #4]
 8008a52:	4613      	mov	r3, r2
 8008a54:	011b      	lsls	r3, r3, #4
 8008a56:	1a9b      	subs	r3, r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	440b      	add	r3, r1
 8008a5c:	334c      	adds	r3, #76	@ 0x4c
 8008a5e:	2202      	movs	r2, #2
 8008a60:	701a      	strb	r2, [r3, #0]
 8008a62:	e009      	b.n	8008a78 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	6879      	ldr	r1, [r7, #4]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	1a9b      	subs	r3, r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	440b      	add	r3, r1
 8008a72:	334c      	adds	r3, #76	@ 0x4c
 8008a74:	2202      	movs	r2, #2
 8008a76:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008a78:	78fa      	ldrb	r2, [r7, #3]
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	1a9b      	subs	r3, r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	3326      	adds	r3, #38	@ 0x26
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00b      	beq.n	8008aa6 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008a8e:	78fa      	ldrb	r2, [r7, #3]
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	4613      	mov	r3, r2
 8008a94:	011b      	lsls	r3, r3, #4
 8008a96:	1a9b      	subs	r3, r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	440b      	add	r3, r1
 8008a9c:	3326      	adds	r3, #38	@ 0x26
 8008a9e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	f040 8136 	bne.w	8008d12 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008abc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ac4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	e11b      	b.n	8008d12 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4613      	mov	r3, r2
 8008ae0:	011b      	lsls	r3, r3, #4
 8008ae2:	1a9b      	subs	r3, r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	440b      	add	r3, r1
 8008ae8:	334d      	adds	r3, #77	@ 0x4d
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b03      	cmp	r3, #3
 8008aee:	f040 8081 	bne.w	8008bf4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008af2:	78fa      	ldrb	r2, [r7, #3]
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	440b      	add	r3, r1
 8008b00:	334d      	adds	r3, #77	@ 0x4d
 8008b02:	2202      	movs	r2, #2
 8008b04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	1a9b      	subs	r3, r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	331b      	adds	r3, #27
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	f040 80fa 	bne.w	8008d12 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008b1e:	78fa      	ldrb	r2, [r7, #3]
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	4613      	mov	r3, r2
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	1a9b      	subs	r3, r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	440b      	add	r3, r1
 8008b2c:	334c      	adds	r3, #76	@ 0x4c
 8008b2e:	2202      	movs	r2, #2
 8008b30:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	78fa      	ldrb	r2, [r7, #3]
 8008b42:	0151      	lsls	r1, r2, #5
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	440a      	add	r2, r1
 8008b48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b50:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008b52:	78fb      	ldrb	r3, [r7, #3]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	78fa      	ldrb	r2, [r7, #3]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b70:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8008b72:	78fb      	ldrb	r3, [r7, #3]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	78fa      	ldrb	r2, [r7, #3]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b8c:	f023 0320 	bic.w	r3, r3, #32
 8008b90:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	4613      	mov	r3, r2
 8008b98:	011b      	lsls	r3, r3, #4
 8008b9a:	1a9b      	subs	r3, r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	3326      	adds	r3, #38	@ 0x26
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00b      	beq.n	8008bc0 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	6879      	ldr	r1, [r7, #4]
 8008bac:	4613      	mov	r3, r2
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	1a9b      	subs	r3, r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	3326      	adds	r3, #38	@ 0x26
 8008bb8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	f040 80a9 	bne.w	8008d12 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bd6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bde:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	015a      	lsls	r2, r3, #5
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	4413      	add	r3, r2
 8008be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bec:	461a      	mov	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	e08e      	b.n	8008d12 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008bf4:	78fa      	ldrb	r2, [r7, #3]
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	440b      	add	r3, r1
 8008c02:	334d      	adds	r3, #77	@ 0x4d
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d143      	bne.n	8008c92 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008c0a:	78fa      	ldrb	r2, [r7, #3]
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	1a9b      	subs	r3, r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	334d      	adds	r3, #77	@ 0x4d
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	4613      	mov	r3, r2
 8008c24:	011b      	lsls	r3, r3, #4
 8008c26:	1a9b      	subs	r3, r3, r2
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	440b      	add	r3, r1
 8008c2c:	334c      	adds	r3, #76	@ 0x4c
 8008c2e:	2202      	movs	r2, #2
 8008c30:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	3326      	adds	r3, #38	@ 0x26
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d00a      	beq.n	8008c5e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	1a9b      	subs	r3, r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	3326      	adds	r3, #38	@ 0x26
 8008c58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d159      	bne.n	8008d12 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008c5e:	78fb      	ldrb	r3, [r7, #3]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c74:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008c7c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	e03f      	b.n	8008d12 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	334d      	adds	r3, #77	@ 0x4d
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b08      	cmp	r3, #8
 8008ca6:	d126      	bne.n	8008cf6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	4613      	mov	r3, r2
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	334d      	adds	r3, #77	@ 0x4d
 8008cb8:	2202      	movs	r2, #2
 8008cba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	011b      	lsls	r3, r3, #4
 8008cc4:	1a9b      	subs	r3, r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	3344      	adds	r3, #68	@ 0x44
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	1c59      	adds	r1, r3, #1
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	011b      	lsls	r3, r3, #4
 8008cd6:	1a9b      	subs	r3, r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4403      	add	r3, r0
 8008cdc:	3344      	adds	r3, #68	@ 0x44
 8008cde:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	1a9b      	subs	r3, r3, r2
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	440b      	add	r3, r1
 8008cee:	334c      	adds	r3, #76	@ 0x4c
 8008cf0:	2204      	movs	r2, #4
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	e00d      	b.n	8008d12 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8008cf6:	78fa      	ldrb	r2, [r7, #3]
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	1a9b      	subs	r3, r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	440b      	add	r3, r1
 8008d04:	334d      	adds	r3, #77	@ 0x4d
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	f000 8100 	beq.w	8008f0e <HCD_HC_IN_IRQHandler+0xcca>
 8008d0e:	e000      	b.n	8008d12 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008d10:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008d12:	78fa      	ldrb	r2, [r7, #3]
 8008d14:	6879      	ldr	r1, [r7, #4]
 8008d16:	4613      	mov	r3, r2
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	1a9b      	subs	r3, r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	440b      	add	r3, r1
 8008d20:	334c      	adds	r3, #76	@ 0x4c
 8008d22:	781a      	ldrb	r2, [r3, #0]
 8008d24:	78fb      	ldrb	r3, [r7, #3]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f00e f9c5 	bl	80170b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8008d2e:	e0ef      	b.n	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	4611      	mov	r1, r2
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f008 fa94 	bl	8011266 <USB_ReadChInterrupts>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d44:	2b40      	cmp	r3, #64	@ 0x40
 8008d46:	d12f      	bne.n	8008da8 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	015a      	lsls	r2, r3, #5
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	4413      	add	r3, r2
 8008d50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d54:	461a      	mov	r2, r3
 8008d56:	2340      	movs	r3, #64	@ 0x40
 8008d58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	011b      	lsls	r3, r3, #4
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	334d      	adds	r3, #77	@ 0x4d
 8008d6a:	2205      	movs	r2, #5
 8008d6c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008d6e:	78fa      	ldrb	r2, [r7, #3]
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	4613      	mov	r3, r2
 8008d74:	011b      	lsls	r3, r3, #4
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	440b      	add	r3, r1
 8008d7c:	331a      	adds	r3, #26
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d109      	bne.n	8008d98 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008d84:	78fa      	ldrb	r2, [r7, #3]
 8008d86:	6879      	ldr	r1, [r7, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	1a9b      	subs	r3, r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	3344      	adds	r3, #68	@ 0x44
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	78fa      	ldrb	r2, [r7, #3]
 8008d9e:	4611      	mov	r1, r2
 8008da0:	4618      	mov	r0, r3
 8008da2:	f008 fadd 	bl	8011360 <USB_HC_Halt>
 8008da6:	e0b3      	b.n	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f008 fa58 	bl	8011266 <USB_ReadChInterrupts>
 8008db6:	4603      	mov	r3, r0
 8008db8:	f003 0310 	and.w	r3, r3, #16
 8008dbc:	2b10      	cmp	r3, #16
 8008dbe:	f040 80a7 	bne.w	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008dc2:	78fa      	ldrb	r2, [r7, #3]
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	011b      	lsls	r3, r3, #4
 8008dca:	1a9b      	subs	r3, r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	3326      	adds	r3, #38	@ 0x26
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d11b      	bne.n	8008e10 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	6879      	ldr	r1, [r7, #4]
 8008ddc:	4613      	mov	r3, r2
 8008dde:	011b      	lsls	r3, r3, #4
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	3344      	adds	r3, #68	@ 0x44
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8008dec:	78fa      	ldrb	r2, [r7, #3]
 8008dee:	6879      	ldr	r1, [r7, #4]
 8008df0:	4613      	mov	r3, r2
 8008df2:	011b      	lsls	r3, r3, #4
 8008df4:	1a9b      	subs	r3, r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	334d      	adds	r3, #77	@ 0x4d
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	4611      	mov	r1, r2
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f008 faa9 	bl	8011360 <USB_HC_Halt>
 8008e0e:	e03f      	b.n	8008e90 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008e10:	78fa      	ldrb	r2, [r7, #3]
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	011b      	lsls	r3, r3, #4
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	3326      	adds	r3, #38	@ 0x26
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008e26:	78fa      	ldrb	r2, [r7, #3]
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	011b      	lsls	r3, r3, #4
 8008e2e:	1a9b      	subs	r3, r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	440b      	add	r3, r1
 8008e34:	3326      	adds	r3, #38	@ 0x26
 8008e36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d129      	bne.n	8008e90 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	6879      	ldr	r1, [r7, #4]
 8008e40:	4613      	mov	r3, r2
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	1a9b      	subs	r3, r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	440b      	add	r3, r1
 8008e4a:	3344      	adds	r3, #68	@ 0x44
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	799b      	ldrb	r3, [r3, #6]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00a      	beq.n	8008e6e <HCD_HC_IN_IRQHandler+0xc2a>
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	6879      	ldr	r1, [r7, #4]
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	011b      	lsls	r3, r3, #4
 8008e60:	1a9b      	subs	r3, r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	440b      	add	r3, r1
 8008e66:	331b      	adds	r3, #27
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d110      	bne.n	8008e90 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008e6e:	78fa      	ldrb	r2, [r7, #3]
 8008e70:	6879      	ldr	r1, [r7, #4]
 8008e72:	4613      	mov	r3, r2
 8008e74:	011b      	lsls	r3, r3, #4
 8008e76:	1a9b      	subs	r3, r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	440b      	add	r3, r1
 8008e7c:	334d      	adds	r3, #77	@ 0x4d
 8008e7e:	2204      	movs	r2, #4
 8008e80:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f008 fa68 	bl	8011360 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	6879      	ldr	r1, [r7, #4]
 8008e94:	4613      	mov	r3, r2
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	1a9b      	subs	r3, r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	440b      	add	r3, r1
 8008e9e:	331b      	adds	r3, #27
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d129      	bne.n	8008efa <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	6879      	ldr	r1, [r7, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	011b      	lsls	r3, r3, #4
 8008eae:	1a9b      	subs	r3, r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	440b      	add	r3, r1
 8008eb4:	331b      	adds	r3, #27
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	015a      	lsls	r2, r3, #5
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	78fa      	ldrb	r2, [r7, #3]
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ed4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ed8:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008eda:	78fb      	ldrb	r3, [r7, #3]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ee6:	68db      	ldr	r3, [r3, #12]
 8008ee8:	78fa      	ldrb	r2, [r7, #3]
 8008eea:	0151      	lsls	r1, r2, #5
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	440a      	add	r2, r1
 8008ef0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ef4:	f043 0320 	orr.w	r3, r3, #32
 8008ef8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008efa:	78fb      	ldrb	r3, [r7, #3]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f06:	461a      	mov	r2, r3
 8008f08:	2310      	movs	r3, #16
 8008f0a:	6093      	str	r3, [r2, #8]
 8008f0c:	e000      	b.n	8008f10 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8008f0e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b086      	sub	sp, #24
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f008 f996 	bl	8011266 <USB_ReadChInterrupts>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f003 0304 	and.w	r3, r3, #4
 8008f40:	2b04      	cmp	r3, #4
 8008f42:	d11b      	bne.n	8008f7c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f50:	461a      	mov	r2, r3
 8008f52:	2304      	movs	r3, #4
 8008f54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	6879      	ldr	r1, [r7, #4]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	011b      	lsls	r3, r3, #4
 8008f5e:	1a9b      	subs	r3, r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	334d      	adds	r3, #77	@ 0x4d
 8008f66:	2207      	movs	r2, #7
 8008f68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f008 f9f4 	bl	8011360 <USB_HC_Halt>
 8008f78:	f000 bc89 	b.w	800988e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	4611      	mov	r1, r2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f008 f96e 	bl	8011266 <USB_ReadChInterrupts>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b20      	cmp	r3, #32
 8008f92:	f040 8082 	bne.w	800909a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008fa8:	78fa      	ldrb	r2, [r7, #3]
 8008faa:	6879      	ldr	r1, [r7, #4]
 8008fac:	4613      	mov	r3, r2
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	1a9b      	subs	r3, r3, r2
 8008fb2:	009b      	lsls	r3, r3, #2
 8008fb4:	440b      	add	r3, r1
 8008fb6:	3319      	adds	r3, #25
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d124      	bne.n	8009008 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	6879      	ldr	r1, [r7, #4]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	1a9b      	subs	r3, r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	440b      	add	r3, r1
 8008fcc:	3319      	adds	r3, #25
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	011b      	lsls	r3, r3, #4
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	334c      	adds	r3, #76	@ 0x4c
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008fe6:	78fa      	ldrb	r2, [r7, #3]
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	4613      	mov	r3, r2
 8008fec:	011b      	lsls	r3, r3, #4
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	334d      	adds	r3, #77	@ 0x4d
 8008ff6:	2203      	movs	r2, #3
 8008ff8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	4611      	mov	r1, r2
 8009002:	4618      	mov	r0, r3
 8009004:	f008 f9ac 	bl	8011360 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009008:	78fa      	ldrb	r2, [r7, #3]
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	4613      	mov	r3, r2
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	331a      	adds	r3, #26
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b01      	cmp	r3, #1
 800901c:	f040 8437 	bne.w	800988e <HCD_HC_OUT_IRQHandler+0x978>
 8009020:	78fa      	ldrb	r2, [r7, #3]
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	4613      	mov	r3, r2
 8009026:	011b      	lsls	r3, r3, #4
 8009028:	1a9b      	subs	r3, r3, r2
 800902a:	009b      	lsls	r3, r3, #2
 800902c:	440b      	add	r3, r1
 800902e:	331b      	adds	r3, #27
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	2b00      	cmp	r3, #0
 8009034:	f040 842b 	bne.w	800988e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8009038:	78fa      	ldrb	r2, [r7, #3]
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	4613      	mov	r3, r2
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	440b      	add	r3, r1
 8009046:	3326      	adds	r3, #38	@ 0x26
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d009      	beq.n	8009062 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	6879      	ldr	r1, [r7, #4]
 8009052:	4613      	mov	r3, r2
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	1a9b      	subs	r3, r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	440b      	add	r3, r1
 800905c:	331b      	adds	r3, #27
 800905e:	2201      	movs	r2, #1
 8009060:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8009062:	78fa      	ldrb	r2, [r7, #3]
 8009064:	6879      	ldr	r1, [r7, #4]
 8009066:	4613      	mov	r3, r2
 8009068:	011b      	lsls	r3, r3, #4
 800906a:	1a9b      	subs	r3, r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	334d      	adds	r3, #77	@ 0x4d
 8009072:	2203      	movs	r2, #3
 8009074:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	78fa      	ldrb	r2, [r7, #3]
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f008 f96e 	bl	8011360 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8009084:	78fa      	ldrb	r2, [r7, #3]
 8009086:	6879      	ldr	r1, [r7, #4]
 8009088:	4613      	mov	r3, r2
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	1a9b      	subs	r3, r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	440b      	add	r3, r1
 8009092:	3344      	adds	r3, #68	@ 0x44
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	e3f9      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	78fa      	ldrb	r2, [r7, #3]
 80090a0:	4611      	mov	r1, r2
 80090a2:	4618      	mov	r0, r3
 80090a4:	f008 f8df 	bl	8011266 <USB_ReadChInterrupts>
 80090a8:	4603      	mov	r3, r0
 80090aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090b2:	d111      	bne.n	80090d8 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c0:	461a      	mov	r2, r3
 80090c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090c6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	78fa      	ldrb	r2, [r7, #3]
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f008 f945 	bl	8011360 <USB_HC_Halt>
 80090d6:	e3da      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	4611      	mov	r1, r2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f008 f8c0 	bl	8011266 <USB_ReadChInterrupts>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d168      	bne.n	80091c2 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80090f0:	78fa      	ldrb	r2, [r7, #3]
 80090f2:	6879      	ldr	r1, [r7, #4]
 80090f4:	4613      	mov	r3, r2
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	1a9b      	subs	r3, r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	440b      	add	r3, r1
 80090fe:	3344      	adds	r3, #68	@ 0x44
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	78fa      	ldrb	r2, [r7, #3]
 800910a:	4611      	mov	r1, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f008 f8aa 	bl	8011266 <USB_ReadChInterrupts>
 8009112:	4603      	mov	r3, r0
 8009114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009118:	2b40      	cmp	r3, #64	@ 0x40
 800911a:	d112      	bne.n	8009142 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800911c:	78fa      	ldrb	r2, [r7, #3]
 800911e:	6879      	ldr	r1, [r7, #4]
 8009120:	4613      	mov	r3, r2
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	1a9b      	subs	r3, r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	440b      	add	r3, r1
 800912a:	3319      	adds	r3, #25
 800912c:	2201      	movs	r2, #1
 800912e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	4413      	add	r3, r2
 8009138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913c:	461a      	mov	r2, r3
 800913e:	2340      	movs	r3, #64	@ 0x40
 8009140:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	6879      	ldr	r1, [r7, #4]
 8009146:	4613      	mov	r3, r2
 8009148:	011b      	lsls	r3, r3, #4
 800914a:	1a9b      	subs	r3, r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	440b      	add	r3, r1
 8009150:	331b      	adds	r3, #27
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d019      	beq.n	800918c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	6879      	ldr	r1, [r7, #4]
 800915c:	4613      	mov	r3, r2
 800915e:	011b      	lsls	r3, r3, #4
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	331b      	adds	r3, #27
 8009168:	2200      	movs	r2, #0
 800916a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	4413      	add	r3, r2
 8009174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	78fa      	ldrb	r2, [r7, #3]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	440a      	add	r2, r1
 8009182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800918a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800918c:	78fb      	ldrb	r3, [r7, #3]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	4413      	add	r3, r2
 8009194:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009198:	461a      	mov	r2, r3
 800919a:	2301      	movs	r3, #1
 800919c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	6879      	ldr	r1, [r7, #4]
 80091a2:	4613      	mov	r3, r2
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	1a9b      	subs	r3, r3, r2
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	440b      	add	r3, r1
 80091ac:	334d      	adds	r3, #77	@ 0x4d
 80091ae:	2201      	movs	r2, #1
 80091b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	78fa      	ldrb	r2, [r7, #3]
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f008 f8d0 	bl	8011360 <USB_HC_Halt>
 80091c0:	e365      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	78fa      	ldrb	r2, [r7, #3]
 80091c8:	4611      	mov	r1, r2
 80091ca:	4618      	mov	r0, r3
 80091cc:	f008 f84b 	bl	8011266 <USB_ReadChInterrupts>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d6:	2b40      	cmp	r3, #64	@ 0x40
 80091d8:	d139      	bne.n	800924e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	6879      	ldr	r1, [r7, #4]
 80091de:	4613      	mov	r3, r2
 80091e0:	011b      	lsls	r3, r3, #4
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	334d      	adds	r3, #77	@ 0x4d
 80091ea:	2205      	movs	r2, #5
 80091ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80091ee:	78fa      	ldrb	r2, [r7, #3]
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	011b      	lsls	r3, r3, #4
 80091f6:	1a9b      	subs	r3, r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	331a      	adds	r3, #26
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d109      	bne.n	8009218 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	3319      	adds	r3, #25
 8009214:	2201      	movs	r2, #1
 8009216:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	3344      	adds	r3, #68	@ 0x44
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	4611      	mov	r1, r2
 8009234:	4618      	mov	r0, r3
 8009236:	f008 f893 	bl	8011360 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	4413      	add	r3, r2
 8009242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009246:	461a      	mov	r2, r3
 8009248:	2340      	movs	r3, #64	@ 0x40
 800924a:	6093      	str	r3, [r2, #8]
 800924c:	e31f      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	78fa      	ldrb	r2, [r7, #3]
 8009254:	4611      	mov	r1, r2
 8009256:	4618      	mov	r0, r3
 8009258:	f008 f805 	bl	8011266 <USB_ReadChInterrupts>
 800925c:	4603      	mov	r3, r0
 800925e:	f003 0308 	and.w	r3, r3, #8
 8009262:	2b08      	cmp	r3, #8
 8009264:	d11a      	bne.n	800929c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009266:	78fb      	ldrb	r3, [r7, #3]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	4413      	add	r3, r2
 800926e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009272:	461a      	mov	r2, r3
 8009274:	2308      	movs	r3, #8
 8009276:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	6879      	ldr	r1, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	1a9b      	subs	r3, r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	440b      	add	r3, r1
 8009286:	334d      	adds	r3, #77	@ 0x4d
 8009288:	2206      	movs	r2, #6
 800928a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	78fa      	ldrb	r2, [r7, #3]
 8009292:	4611      	mov	r1, r2
 8009294:	4618      	mov	r0, r3
 8009296:	f008 f863 	bl	8011360 <USB_HC_Halt>
 800929a:	e2f8      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f007 ffde 	bl	8011266 <USB_ReadChInterrupts>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b10      	cmp	r3, #16
 80092b2:	d144      	bne.n	800933e <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80092b4:	78fa      	ldrb	r2, [r7, #3]
 80092b6:	6879      	ldr	r1, [r7, #4]
 80092b8:	4613      	mov	r3, r2
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	1a9b      	subs	r3, r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	440b      	add	r3, r1
 80092c2:	3344      	adds	r3, #68	@ 0x44
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80092c8:	78fa      	ldrb	r2, [r7, #3]
 80092ca:	6879      	ldr	r1, [r7, #4]
 80092cc:	4613      	mov	r3, r2
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	440b      	add	r3, r1
 80092d6:	334d      	adds	r3, #77	@ 0x4d
 80092d8:	2204      	movs	r2, #4
 80092da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80092dc:	78fa      	ldrb	r2, [r7, #3]
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	4613      	mov	r3, r2
 80092e2:	011b      	lsls	r3, r3, #4
 80092e4:	1a9b      	subs	r3, r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	440b      	add	r3, r1
 80092ea:	3319      	adds	r3, #25
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d114      	bne.n	800931c <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80092f2:	78fa      	ldrb	r2, [r7, #3]
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	1a9b      	subs	r3, r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	3318      	adds	r3, #24
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d109      	bne.n	800931c <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	011b      	lsls	r3, r3, #4
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	3319      	adds	r3, #25
 8009318:	2201      	movs	r2, #1
 800931a:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	78fa      	ldrb	r2, [r7, #3]
 8009322:	4611      	mov	r1, r2
 8009324:	4618      	mov	r0, r3
 8009326:	f008 f81b 	bl	8011360 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	4413      	add	r3, r2
 8009332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009336:	461a      	mov	r2, r3
 8009338:	2310      	movs	r3, #16
 800933a:	6093      	str	r3, [r2, #8]
 800933c:	e2a7      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	78fa      	ldrb	r2, [r7, #3]
 8009344:	4611      	mov	r1, r2
 8009346:	4618      	mov	r0, r3
 8009348:	f007 ff8d 	bl	8011266 <USB_ReadChInterrupts>
 800934c:	4603      	mov	r3, r0
 800934e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009352:	2b80      	cmp	r3, #128	@ 0x80
 8009354:	f040 8083 	bne.w	800945e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	799b      	ldrb	r3, [r3, #6]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d111      	bne.n	8009384 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	011b      	lsls	r3, r3, #4
 8009368:	1a9b      	subs	r3, r3, r2
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	440b      	add	r3, r1
 800936e:	334d      	adds	r3, #77	@ 0x4d
 8009370:	2207      	movs	r2, #7
 8009372:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f007 ffef 	bl	8011360 <USB_HC_Halt>
 8009382:	e062      	b.n	800944a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009384:	78fa      	ldrb	r2, [r7, #3]
 8009386:	6879      	ldr	r1, [r7, #4]
 8009388:	4613      	mov	r3, r2
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	1a9b      	subs	r3, r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	440b      	add	r3, r1
 8009392:	3344      	adds	r3, #68	@ 0x44
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	1c59      	adds	r1, r3, #1
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4403      	add	r3, r0
 80093a4:	3344      	adds	r3, #68	@ 0x44
 80093a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	1a9b      	subs	r3, r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	3344      	adds	r3, #68	@ 0x44
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d922      	bls.n	8009404 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80093be:	78fa      	ldrb	r2, [r7, #3]
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	440b      	add	r3, r1
 80093cc:	3344      	adds	r3, #68	@ 0x44
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80093d2:	78fa      	ldrb	r2, [r7, #3]
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	1a9b      	subs	r3, r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	334c      	adds	r3, #76	@ 0x4c
 80093e2:	2204      	movs	r2, #4
 80093e4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80093e6:	78fa      	ldrb	r2, [r7, #3]
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	4613      	mov	r3, r2
 80093ec:	011b      	lsls	r3, r3, #4
 80093ee:	1a9b      	subs	r3, r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	334c      	adds	r3, #76	@ 0x4c
 80093f6:	781a      	ldrb	r2, [r3, #0]
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f00d fe5b 	bl	80170b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009402:	e022      	b.n	800944a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009404:	78fa      	ldrb	r2, [r7, #3]
 8009406:	6879      	ldr	r1, [r7, #4]
 8009408:	4613      	mov	r3, r2
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	334c      	adds	r3, #76	@ 0x4c
 8009414:	2202      	movs	r2, #2
 8009416:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	015a      	lsls	r2, r3, #5
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	4413      	add	r3, r2
 8009420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800942e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009436:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	4413      	add	r3, r2
 8009440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009444:	461a      	mov	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	4413      	add	r3, r2
 8009452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009456:	461a      	mov	r2, r3
 8009458:	2380      	movs	r3, #128	@ 0x80
 800945a:	6093      	str	r3, [r2, #8]
 800945c:	e217      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	4611      	mov	r1, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f007 fefd 	bl	8011266 <USB_ReadChInterrupts>
 800946c:	4603      	mov	r3, r0
 800946e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009476:	d11b      	bne.n	80094b0 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009478:	78fa      	ldrb	r2, [r7, #3]
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	4613      	mov	r3, r2
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	1a9b      	subs	r3, r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	440b      	add	r3, r1
 8009486:	334d      	adds	r3, #77	@ 0x4d
 8009488:	2209      	movs	r2, #9
 800948a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	78fa      	ldrb	r2, [r7, #3]
 8009492:	4611      	mov	r1, r2
 8009494:	4618      	mov	r0, r3
 8009496:	f007 ff63 	bl	8011360 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094a6:	461a      	mov	r2, r3
 80094a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094ac:	6093      	str	r3, [r2, #8]
 80094ae:	e1ee      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	78fa      	ldrb	r2, [r7, #3]
 80094b6:	4611      	mov	r1, r2
 80094b8:	4618      	mov	r0, r3
 80094ba:	f007 fed4 	bl	8011266 <USB_ReadChInterrupts>
 80094be:	4603      	mov	r3, r0
 80094c0:	f003 0302 	and.w	r3, r3, #2
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	f040 81df 	bne.w	8009888 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	015a      	lsls	r2, r3, #5
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	4413      	add	r3, r2
 80094d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094d6:	461a      	mov	r2, r3
 80094d8:	2302      	movs	r3, #2
 80094da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80094dc:	78fa      	ldrb	r2, [r7, #3]
 80094de:	6879      	ldr	r1, [r7, #4]
 80094e0:	4613      	mov	r3, r2
 80094e2:	011b      	lsls	r3, r3, #4
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	440b      	add	r3, r1
 80094ea:	334d      	adds	r3, #77	@ 0x4d
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	f040 8093 	bne.w	800961a <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80094f4:	78fa      	ldrb	r2, [r7, #3]
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4613      	mov	r3, r2
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	1a9b      	subs	r3, r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	440b      	add	r3, r1
 8009502:	334d      	adds	r3, #77	@ 0x4d
 8009504:	2202      	movs	r2, #2
 8009506:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009508:	78fa      	ldrb	r2, [r7, #3]
 800950a:	6879      	ldr	r1, [r7, #4]
 800950c:	4613      	mov	r3, r2
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	1a9b      	subs	r3, r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	440b      	add	r3, r1
 8009516:	334c      	adds	r3, #76	@ 0x4c
 8009518:	2201      	movs	r2, #1
 800951a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800951c:	78fa      	ldrb	r2, [r7, #3]
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	4613      	mov	r3, r2
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	1a9b      	subs	r3, r3, r2
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	440b      	add	r3, r1
 800952a:	3326      	adds	r3, #38	@ 0x26
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	2b02      	cmp	r3, #2
 8009530:	d00b      	beq.n	800954a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009532:	78fa      	ldrb	r2, [r7, #3]
 8009534:	6879      	ldr	r1, [r7, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	1a9b      	subs	r3, r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	3326      	adds	r3, #38	@ 0x26
 8009542:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009544:	2b03      	cmp	r3, #3
 8009546:	f040 8190 	bne.w	800986a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	799b      	ldrb	r3, [r3, #6]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d115      	bne.n	800957e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009552:	78fa      	ldrb	r2, [r7, #3]
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	4613      	mov	r3, r2
 8009558:	011b      	lsls	r3, r3, #4
 800955a:	1a9b      	subs	r3, r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	440b      	add	r3, r1
 8009560:	333d      	adds	r3, #61	@ 0x3d
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	78fa      	ldrb	r2, [r7, #3]
 8009566:	f083 0301 	eor.w	r3, r3, #1
 800956a:	b2d8      	uxtb	r0, r3
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	4613      	mov	r3, r2
 8009570:	011b      	lsls	r3, r3, #4
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	440b      	add	r3, r1
 8009578:	333d      	adds	r3, #61	@ 0x3d
 800957a:	4602      	mov	r2, r0
 800957c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	799b      	ldrb	r3, [r3, #6]
 8009582:	2b01      	cmp	r3, #1
 8009584:	f040 8171 	bne.w	800986a <HCD_HC_OUT_IRQHandler+0x954>
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	6879      	ldr	r1, [r7, #4]
 800958c:	4613      	mov	r3, r2
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	440b      	add	r3, r1
 8009596:	3334      	adds	r3, #52	@ 0x34
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 8165 	beq.w	800986a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80095a0:	78fa      	ldrb	r2, [r7, #3]
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	4613      	mov	r3, r2
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	1a9b      	subs	r3, r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	3334      	adds	r3, #52	@ 0x34
 80095b0:	6819      	ldr	r1, [r3, #0]
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4613      	mov	r3, r2
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4403      	add	r3, r0
 80095c0:	3328      	adds	r3, #40	@ 0x28
 80095c2:	881b      	ldrh	r3, [r3, #0]
 80095c4:	440b      	add	r3, r1
 80095c6:	1e59      	subs	r1, r3, #1
 80095c8:	78fa      	ldrb	r2, [r7, #3]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4613      	mov	r3, r2
 80095ce:	011b      	lsls	r3, r3, #4
 80095d0:	1a9b      	subs	r3, r3, r2
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4403      	add	r3, r0
 80095d6:	3328      	adds	r3, #40	@ 0x28
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	fbb1 f3f3 	udiv	r3, r1, r3
 80095de:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 813f 	beq.w	800986a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80095ec:	78fa      	ldrb	r2, [r7, #3]
 80095ee:	6879      	ldr	r1, [r7, #4]
 80095f0:	4613      	mov	r3, r2
 80095f2:	011b      	lsls	r3, r3, #4
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	440b      	add	r3, r1
 80095fa:	333d      	adds	r3, #61	@ 0x3d
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	78fa      	ldrb	r2, [r7, #3]
 8009600:	f083 0301 	eor.w	r3, r3, #1
 8009604:	b2d8      	uxtb	r0, r3
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4613      	mov	r3, r2
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	333d      	adds	r3, #61	@ 0x3d
 8009614:	4602      	mov	r2, r0
 8009616:	701a      	strb	r2, [r3, #0]
 8009618:	e127      	b.n	800986a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800961a:	78fa      	ldrb	r2, [r7, #3]
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	4613      	mov	r3, r2
 8009620:	011b      	lsls	r3, r3, #4
 8009622:	1a9b      	subs	r3, r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	440b      	add	r3, r1
 8009628:	334d      	adds	r3, #77	@ 0x4d
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	2b03      	cmp	r3, #3
 800962e:	d120      	bne.n	8009672 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009630:	78fa      	ldrb	r2, [r7, #3]
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	4613      	mov	r3, r2
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	1a9b      	subs	r3, r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	440b      	add	r3, r1
 800963e:	334d      	adds	r3, #77	@ 0x4d
 8009640:	2202      	movs	r2, #2
 8009642:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009644:	78fa      	ldrb	r2, [r7, #3]
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	4613      	mov	r3, r2
 800964a:	011b      	lsls	r3, r3, #4
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	440b      	add	r3, r1
 8009652:	331b      	adds	r3, #27
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	2b01      	cmp	r3, #1
 8009658:	f040 8107 	bne.w	800986a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	6879      	ldr	r1, [r7, #4]
 8009660:	4613      	mov	r3, r2
 8009662:	011b      	lsls	r3, r3, #4
 8009664:	1a9b      	subs	r3, r3, r2
 8009666:	009b      	lsls	r3, r3, #2
 8009668:	440b      	add	r3, r1
 800966a:	334c      	adds	r3, #76	@ 0x4c
 800966c:	2202      	movs	r2, #2
 800966e:	701a      	strb	r2, [r3, #0]
 8009670:	e0fb      	b.n	800986a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	4613      	mov	r3, r2
 8009678:	011b      	lsls	r3, r3, #4
 800967a:	1a9b      	subs	r3, r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	440b      	add	r3, r1
 8009680:	334d      	adds	r3, #77	@ 0x4d
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	2b04      	cmp	r3, #4
 8009686:	d13a      	bne.n	80096fe <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009688:	78fa      	ldrb	r2, [r7, #3]
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	4613      	mov	r3, r2
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	1a9b      	subs	r3, r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	334d      	adds	r3, #77	@ 0x4d
 8009698:	2202      	movs	r2, #2
 800969a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800969c:	78fa      	ldrb	r2, [r7, #3]
 800969e:	6879      	ldr	r1, [r7, #4]
 80096a0:	4613      	mov	r3, r2
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	1a9b      	subs	r3, r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	440b      	add	r3, r1
 80096aa:	334c      	adds	r3, #76	@ 0x4c
 80096ac:	2202      	movs	r2, #2
 80096ae:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80096b0:	78fa      	ldrb	r2, [r7, #3]
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4613      	mov	r3, r2
 80096b6:	011b      	lsls	r3, r3, #4
 80096b8:	1a9b      	subs	r3, r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	331b      	adds	r3, #27
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	f040 80d1 	bne.w	800986a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80096c8:	78fa      	ldrb	r2, [r7, #3]
 80096ca:	6879      	ldr	r1, [r7, #4]
 80096cc:	4613      	mov	r3, r2
 80096ce:	011b      	lsls	r3, r3, #4
 80096d0:	1a9b      	subs	r3, r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	440b      	add	r3, r1
 80096d6:	331b      	adds	r3, #27
 80096d8:	2200      	movs	r2, #0
 80096da:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	78fa      	ldrb	r2, [r7, #3]
 80096ec:	0151      	lsls	r1, r2, #5
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	440a      	add	r2, r1
 80096f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096fa:	6053      	str	r3, [r2, #4]
 80096fc:	e0b5      	b.n	800986a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80096fe:	78fa      	ldrb	r2, [r7, #3]
 8009700:	6879      	ldr	r1, [r7, #4]
 8009702:	4613      	mov	r3, r2
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	1a9b      	subs	r3, r3, r2
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	440b      	add	r3, r1
 800970c:	334d      	adds	r3, #77	@ 0x4d
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b05      	cmp	r3, #5
 8009712:	d114      	bne.n	800973e <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009714:	78fa      	ldrb	r2, [r7, #3]
 8009716:	6879      	ldr	r1, [r7, #4]
 8009718:	4613      	mov	r3, r2
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	1a9b      	subs	r3, r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	334d      	adds	r3, #77	@ 0x4d
 8009724:	2202      	movs	r2, #2
 8009726:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	1a9b      	subs	r3, r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	334c      	adds	r3, #76	@ 0x4c
 8009738:	2202      	movs	r2, #2
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	e095      	b.n	800986a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800973e:	78fa      	ldrb	r2, [r7, #3]
 8009740:	6879      	ldr	r1, [r7, #4]
 8009742:	4613      	mov	r3, r2
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	440b      	add	r3, r1
 800974c:	334d      	adds	r3, #77	@ 0x4d
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b06      	cmp	r3, #6
 8009752:	d114      	bne.n	800977e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009754:	78fa      	ldrb	r2, [r7, #3]
 8009756:	6879      	ldr	r1, [r7, #4]
 8009758:	4613      	mov	r3, r2
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	1a9b      	subs	r3, r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	440b      	add	r3, r1
 8009762:	334d      	adds	r3, #77	@ 0x4d
 8009764:	2202      	movs	r2, #2
 8009766:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	4613      	mov	r3, r2
 800976e:	011b      	lsls	r3, r3, #4
 8009770:	1a9b      	subs	r3, r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	334c      	adds	r3, #76	@ 0x4c
 8009778:	2205      	movs	r2, #5
 800977a:	701a      	strb	r2, [r3, #0]
 800977c:	e075      	b.n	800986a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800977e:	78fa      	ldrb	r2, [r7, #3]
 8009780:	6879      	ldr	r1, [r7, #4]
 8009782:	4613      	mov	r3, r2
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	1a9b      	subs	r3, r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	440b      	add	r3, r1
 800978c:	334d      	adds	r3, #77	@ 0x4d
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	2b07      	cmp	r3, #7
 8009792:	d00a      	beq.n	80097aa <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009794:	78fa      	ldrb	r2, [r7, #3]
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	4613      	mov	r3, r2
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	1a9b      	subs	r3, r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	440b      	add	r3, r1
 80097a2:	334d      	adds	r3, #77	@ 0x4d
 80097a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80097a6:	2b09      	cmp	r3, #9
 80097a8:	d170      	bne.n	800988c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80097aa:	78fa      	ldrb	r2, [r7, #3]
 80097ac:	6879      	ldr	r1, [r7, #4]
 80097ae:	4613      	mov	r3, r2
 80097b0:	011b      	lsls	r3, r3, #4
 80097b2:	1a9b      	subs	r3, r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	440b      	add	r3, r1
 80097b8:	334d      	adds	r3, #77	@ 0x4d
 80097ba:	2202      	movs	r2, #2
 80097bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80097be:	78fa      	ldrb	r2, [r7, #3]
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	4613      	mov	r3, r2
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	440b      	add	r3, r1
 80097cc:	3344      	adds	r3, #68	@ 0x44
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	1c59      	adds	r1, r3, #1
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4613      	mov	r3, r2
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	1a9b      	subs	r3, r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4403      	add	r3, r0
 80097de:	3344      	adds	r3, #68	@ 0x44
 80097e0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80097e2:	78fa      	ldrb	r2, [r7, #3]
 80097e4:	6879      	ldr	r1, [r7, #4]
 80097e6:	4613      	mov	r3, r2
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	1a9b      	subs	r3, r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	440b      	add	r3, r1
 80097f0:	3344      	adds	r3, #68	@ 0x44
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d914      	bls.n	8009822 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	6879      	ldr	r1, [r7, #4]
 80097fc:	4613      	mov	r3, r2
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	1a9b      	subs	r3, r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	440b      	add	r3, r1
 8009806:	3344      	adds	r3, #68	@ 0x44
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	6879      	ldr	r1, [r7, #4]
 8009810:	4613      	mov	r3, r2
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	1a9b      	subs	r3, r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	440b      	add	r3, r1
 800981a:	334c      	adds	r3, #76	@ 0x4c
 800981c:	2204      	movs	r2, #4
 800981e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009820:	e022      	b.n	8009868 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	6879      	ldr	r1, [r7, #4]
 8009826:	4613      	mov	r3, r2
 8009828:	011b      	lsls	r3, r3, #4
 800982a:	1a9b      	subs	r3, r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	334c      	adds	r3, #76	@ 0x4c
 8009832:	2202      	movs	r2, #2
 8009834:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	4413      	add	r3, r2
 800983e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800984c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009854:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	015a      	lsls	r2, r3, #5
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	4413      	add	r3, r2
 800985e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009862:	461a      	mov	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009868:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800986a:	78fa      	ldrb	r2, [r7, #3]
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	4613      	mov	r3, r2
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	1a9b      	subs	r3, r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	440b      	add	r3, r1
 8009878:	334c      	adds	r3, #76	@ 0x4c
 800987a:	781a      	ldrb	r2, [r3, #0]
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f00d fc19 	bl	80170b8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009886:	e002      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009888:	bf00      	nop
 800988a:	e000      	b.n	800988e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800988c:	bf00      	nop
  }
}
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08a      	sub	sp, #40	@ 0x28
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a4:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	6a1b      	ldr	r3, [r3, #32]
 80098ac:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80098ae:	69fb      	ldr	r3, [r7, #28]
 80098b0:	f003 030f 	and.w	r3, r3, #15
 80098b4:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	0c5b      	lsrs	r3, r3, #17
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	091b      	lsrs	r3, r3, #4
 80098c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80098c8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	d004      	beq.n	80098da <HCD_RXQLVL_IRQHandler+0x46>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2b05      	cmp	r3, #5
 80098d4:	f000 80b6 	beq.w	8009a44 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80098d8:	e0b7      	b.n	8009a4a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	f000 80b3 	beq.w	8009a48 <HCD_RXQLVL_IRQHandler+0x1b4>
 80098e2:	6879      	ldr	r1, [r7, #4]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	4613      	mov	r3, r2
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	1a9b      	subs	r3, r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	440b      	add	r3, r1
 80098f0:	332c      	adds	r3, #44	@ 0x2c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 80a7 	beq.w	8009a48 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	69ba      	ldr	r2, [r7, #24]
 80098fe:	4613      	mov	r3, r2
 8009900:	011b      	lsls	r3, r3, #4
 8009902:	1a9b      	subs	r3, r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	3338      	adds	r3, #56	@ 0x38
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	18d1      	adds	r1, r2, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	4613      	mov	r3, r2
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	1a9b      	subs	r3, r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4403      	add	r3, r0
 800991e:	3334      	adds	r3, #52	@ 0x34
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4299      	cmp	r1, r3
 8009924:	f200 8083 	bhi.w	8009a2e <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	6879      	ldr	r1, [r7, #4]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	4613      	mov	r3, r2
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	332c      	adds	r3, #44	@ 0x2c
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	b292      	uxth	r2, r2
 8009942:	4619      	mov	r1, r3
 8009944:	f007 fc24 	bl	8011190 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	69ba      	ldr	r2, [r7, #24]
 800994c:	4613      	mov	r3, r2
 800994e:	011b      	lsls	r3, r3, #4
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	440b      	add	r3, r1
 8009956:	332c      	adds	r3, #44	@ 0x2c
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	18d1      	adds	r1, r2, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	4613      	mov	r3, r2
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	1a9b      	subs	r3, r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4403      	add	r3, r0
 800996c:	332c      	adds	r3, #44	@ 0x2c
 800996e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	69ba      	ldr	r2, [r7, #24]
 8009974:	4613      	mov	r3, r2
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	3338      	adds	r3, #56	@ 0x38
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	18d1      	adds	r1, r2, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	4613      	mov	r3, r2
 800998c:	011b      	lsls	r3, r3, #4
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4403      	add	r3, r0
 8009994:	3338      	adds	r3, #56	@ 0x38
 8009996:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	0cdb      	lsrs	r3, r3, #19
 80099a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	69ba      	ldr	r2, [r7, #24]
 80099b2:	4613      	mov	r3, r2
 80099b4:	011b      	lsls	r3, r3, #4
 80099b6:	1a9b      	subs	r3, r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	440b      	add	r3, r1
 80099bc:	3328      	adds	r3, #40	@ 0x28
 80099be:	881b      	ldrh	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d13f      	bne.n	8009a48 <HCD_RXQLVL_IRQHandler+0x1b4>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d03c      	beq.n	8009a48 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	015a      	lsls	r2, r3, #5
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	4413      	add	r3, r2
 80099d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80099e4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80099ec:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80099ee:	69bb      	ldr	r3, [r7, #24]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099fa:	461a      	mov	r2, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	4613      	mov	r3, r2
 8009a06:	011b      	lsls	r3, r3, #4
 8009a08:	1a9b      	subs	r3, r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	440b      	add	r3, r1
 8009a0e:	333c      	adds	r3, #60	@ 0x3c
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	f083 0301 	eor.w	r3, r3, #1
 8009a16:	b2d8      	uxtb	r0, r3
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	69ba      	ldr	r2, [r7, #24]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	011b      	lsls	r3, r3, #4
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	440b      	add	r3, r1
 8009a26:	333c      	adds	r3, #60	@ 0x3c
 8009a28:	4602      	mov	r2, r0
 8009a2a:	701a      	strb	r2, [r3, #0]
      break;
 8009a2c:	e00c      	b.n	8009a48 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	4613      	mov	r3, r2
 8009a34:	011b      	lsls	r3, r3, #4
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	440b      	add	r3, r1
 8009a3c:	334c      	adds	r3, #76	@ 0x4c
 8009a3e:	2204      	movs	r2, #4
 8009a40:	701a      	strb	r2, [r3, #0]
      break;
 8009a42:	e001      	b.n	8009a48 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8009a44:	bf00      	nop
 8009a46:	e000      	b.n	8009a4a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009a48:	bf00      	nop
  }
}
 8009a4a:	bf00      	nop
 8009a4c:	3728      	adds	r7, #40	@ 0x28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b086      	sub	sp, #24
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009a7e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f003 0302 	and.w	r3, r3, #2
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d10b      	bne.n	8009aa2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d102      	bne.n	8009a9a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f00d faf3 	bl	8017080 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	f043 0302 	orr.w	r3, r3, #2
 8009aa0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d132      	bne.n	8009b12 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f043 0308 	orr.w	r3, r3, #8
 8009ab2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f003 0304 	and.w	r3, r3, #4
 8009aba:	2b04      	cmp	r3, #4
 8009abc:	d126      	bne.n	8009b0c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	7a5b      	ldrb	r3, [r3, #9]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d113      	bne.n	8009aee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009acc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009ad0:	d106      	bne.n	8009ae0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2102      	movs	r1, #2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f007 fbf3 	bl	80112c4 <USB_InitFSLSPClkSel>
 8009ade:	e011      	b.n	8009b04 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2101      	movs	r1, #1
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f007 fbec 	bl	80112c4 <USB_InitFSLSPClkSel>
 8009aec:	e00a      	b.n	8009b04 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	79db      	ldrb	r3, [r3, #7]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d106      	bne.n	8009b04 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009afc:	461a      	mov	r2, r3
 8009afe:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009b02:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f00d fae9 	bl	80170dc <HAL_HCD_PortEnabled_Callback>
 8009b0a:	e002      	b.n	8009b12 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f00d faf3 	bl	80170f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f003 0320 	and.w	r3, r3, #32
 8009b18:	2b20      	cmp	r3, #32
 8009b1a:	d103      	bne.n	8009b24 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	f043 0320 	orr.w	r3, r3, #32
 8009b22:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	6013      	str	r3, [r2, #0]
}
 8009b30:	bf00      	nop
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d101      	bne.n	8009b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e08b      	b.n	8009c62 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d106      	bne.n	8009b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7fa fb56 	bl	8004210 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2224      	movs	r2, #36	@ 0x24
 8009b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0201 	bic.w	r2, r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	689a      	ldr	r2, [r3, #8]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d107      	bne.n	8009bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	689a      	ldr	r2, [r3, #8]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bae:	609a      	str	r2, [r3, #8]
 8009bb0:	e006      	b.n	8009bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	689a      	ldr	r2, [r3, #8]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	2b02      	cmp	r3, #2
 8009bc6:	d108      	bne.n	8009bda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009bd6:	605a      	str	r2, [r3, #4]
 8009bd8:	e007      	b.n	8009bea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	685a      	ldr	r2, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009be8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6859      	ldr	r1, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c6c <HAL_I2C_Init+0x134>)
 8009bf6:	430b      	orrs	r3, r1
 8009bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691a      	ldr	r2, [r3, #16]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	430a      	orrs	r2, r1
 8009c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	69d9      	ldr	r1, [r3, #28]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a1a      	ldr	r2, [r3, #32]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	430a      	orrs	r2, r1
 8009c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f042 0201 	orr.w	r2, r2, #1
 8009c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2220      	movs	r2, #32
 8009c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	02008000 	.word	0x02008000

08009c70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	d138      	bne.n	8009cf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d101      	bne.n	8009c94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c90:	2302      	movs	r3, #2
 8009c92:	e032      	b.n	8009cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2224      	movs	r2, #36	@ 0x24
 8009ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0201 	bic.w	r2, r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009cc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6819      	ldr	r1, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	430a      	orrs	r2, r1
 8009cd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0201 	orr.w	r2, r2, #1
 8009ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	e000      	b.n	8009cfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cf8:	2302      	movs	r3, #2
  }
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d139      	bne.n	8009d90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d101      	bne.n	8009d2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d26:	2302      	movs	r3, #2
 8009d28:	e033      	b.n	8009d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2224      	movs	r2, #36	@ 0x24
 8009d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0201 	bic.w	r2, r2, #1
 8009d48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009d58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	021b      	lsls	r3, r3, #8
 8009d5e:	68fa      	ldr	r2, [r7, #12]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681a      	ldr	r2, [r3, #0]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f042 0201 	orr.w	r2, r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	e000      	b.n	8009d92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d90:	2302      	movs	r3, #2
  }
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d101      	bne.n	8009db0 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e08f      	b.n	8009ed0 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d106      	bne.n	8009dca <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f7fa facb 	bl	8004360 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	699a      	ldr	r2, [r3, #24]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009de0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6999      	ldr	r1, [r3, #24]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009df6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	041b      	lsls	r3, r3, #16
 8009e0c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6999      	ldr	r1, [r3, #24]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	430a      	orrs	r2, r1
 8009e1a:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a19      	ldr	r1, [r3, #32]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e36:	041b      	lsls	r3, r3, #16
 8009e38:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	430a      	orrs	r2, r1
 8009e46:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e4c:	041b      	lsls	r3, r3, #16
 8009e4e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009e64:	021b      	lsls	r3, r3, #8
 8009e66:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009e6e:	041b      	lsls	r3, r3, #16
 8009e70:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009e94:	431a      	orrs	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f042 0206 	orr.w	r2, r2, #6
 8009eac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	699a      	ldr	r2, [r3, #24]
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f042 0201 	orr.w	r2, r2, #1
 8009ebc:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009eee:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f003 0304 	and.w	r3, r3, #4
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d023      	beq.n	8009f42 <HAL_LTDC_IRQHandler+0x6a>
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01e      	beq.n	8009f42 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f022 0204 	bic.w	r2, r2, #4
 8009f12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2204      	movs	r2, #4
 8009f1a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f22:	f043 0201 	orr.w	r2, r3, #1
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2204      	movs	r2, #4
 8009f30:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f86f 	bl	800a020 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f003 0302 	and.w	r3, r3, #2
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d023      	beq.n	8009f94 <HAL_LTDC_IRQHandler+0xbc>
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01e      	beq.n	8009f94 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 0202 	bic.w	r2, r2, #2
 8009f64:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2202      	movs	r2, #2
 8009f6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009f74:	f043 0202 	orr.w	r2, r3, #2
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2204      	movs	r2, #4
 8009f82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 f846 	bl	800a020 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d01b      	beq.n	8009fd6 <HAL_LTDC_IRQHandler+0xfe>
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d016      	beq.n	8009fd6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f022 0201 	bic.w	r2, r2, #1
 8009fb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f82f 	bl	800a034 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f003 0308 	and.w	r3, r3, #8
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d01b      	beq.n	800a018 <HAL_LTDC_IRQHandler+0x140>
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f003 0308 	and.w	r3, r3, #8
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d016      	beq.n	800a018 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f022 0208 	bic.w	r2, r2, #8
 8009ff8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2208      	movs	r2, #8
 800a000:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 f818 	bl	800a048 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a018:	bf00      	nop
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a028:	bf00      	nop
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a05c:	b5b0      	push	{r4, r5, r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d101      	bne.n	800a076 <HAL_LTDC_ConfigLayer+0x1a>
 800a072:	2302      	movs	r3, #2
 800a074:	e02c      	b.n	800a0d0 <HAL_LTDC_ConfigLayer+0x74>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2202      	movs	r2, #2
 800a082:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2134      	movs	r1, #52	@ 0x34
 800a08c:	fb01 f303 	mul.w	r3, r1, r3
 800a090:	4413      	add	r3, r2
 800a092:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	4614      	mov	r4, r2
 800a09a:	461d      	mov	r5, r3
 800a09c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a09e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0a8:	682b      	ldr	r3, [r5, #0]
 800a0aa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f811 	bl	800a0d8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bdb0      	pop	{r4, r5, r7, pc}

0800a0d8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b089      	sub	sp, #36	@ 0x24
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	0c1b      	lsrs	r3, r3, #16
 800a0f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0f4:	4413      	add	r3, r2
 800a0f6:	041b      	lsls	r3, r3, #16
 800a0f8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	01db      	lsls	r3, r3, #7
 800a104:	4413      	add	r3, r2
 800a106:	3384      	adds	r3, #132	@ 0x84
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	6812      	ldr	r2, [r2, #0]
 800a10e:	4611      	mov	r1, r2
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	01d2      	lsls	r2, r2, #7
 800a114:	440a      	add	r2, r1
 800a116:	3284      	adds	r2, #132	@ 0x84
 800a118:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a11c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	0c1b      	lsrs	r3, r3, #16
 800a12a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a12e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a130:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4619      	mov	r1, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	01db      	lsls	r3, r3, #7
 800a13c:	440b      	add	r3, r1
 800a13e:	3384      	adds	r3, #132	@ 0x84
 800a140:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a146:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	68da      	ldr	r2, [r3, #12]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a156:	4413      	add	r3, r2
 800a158:	041b      	lsls	r3, r3, #16
 800a15a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	461a      	mov	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	01db      	lsls	r3, r3, #7
 800a166:	4413      	add	r3, r2
 800a168:	3384      	adds	r3, #132	@ 0x84
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	6812      	ldr	r2, [r2, #0]
 800a170:	4611      	mov	r1, r2
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	01d2      	lsls	r2, r2, #7
 800a176:	440a      	add	r2, r1
 800a178:	3284      	adds	r2, #132	@ 0x84
 800a17a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a17e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	689a      	ldr	r2, [r3, #8]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a18e:	4413      	add	r3, r2
 800a190:	1c5a      	adds	r2, r3, #1
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	01db      	lsls	r3, r3, #7
 800a19c:	440b      	add	r3, r1
 800a19e:	3384      	adds	r3, #132	@ 0x84
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	01db      	lsls	r3, r3, #7
 800a1b2:	4413      	add	r3, r2
 800a1b4:	3384      	adds	r3, #132	@ 0x84
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	6812      	ldr	r2, [r2, #0]
 800a1bc:	4611      	mov	r1, r2
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	01d2      	lsls	r2, r2, #7
 800a1c2:	440a      	add	r2, r1
 800a1c4:	3284      	adds	r2, #132	@ 0x84
 800a1c6:	f023 0307 	bic.w	r3, r3, #7
 800a1ca:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	01db      	lsls	r3, r3, #7
 800a1d6:	4413      	add	r3, r2
 800a1d8:	3384      	adds	r3, #132	@ 0x84
 800a1da:	461a      	mov	r2, r3
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a1e8:	021b      	lsls	r3, r3, #8
 800a1ea:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a1f2:	041b      	lsls	r3, r3, #16
 800a1f4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	061b      	lsls	r3, r3, #24
 800a1fc:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a204:	461a      	mov	r2, r3
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	431a      	orrs	r2, r3
 800a20a:	69bb      	ldr	r3, [r7, #24]
 800a20c:	431a      	orrs	r2, r3
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4619      	mov	r1, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	01db      	lsls	r3, r3, #7
 800a218:	440b      	add	r3, r1
 800a21a:	3384      	adds	r3, #132	@ 0x84
 800a21c:	4619      	mov	r1, r3
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	4313      	orrs	r3, r2
 800a222:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	461a      	mov	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	01db      	lsls	r3, r3, #7
 800a22e:	4413      	add	r3, r2
 800a230:	3384      	adds	r3, #132	@ 0x84
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	4611      	mov	r1, r2
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	01d2      	lsls	r2, r2, #7
 800a23e:	440a      	add	r2, r1
 800a240:	3284      	adds	r2, #132	@ 0x84
 800a242:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a246:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	461a      	mov	r2, r3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	01db      	lsls	r3, r3, #7
 800a252:	4413      	add	r3, r2
 800a254:	3384      	adds	r3, #132	@ 0x84
 800a256:	461a      	mov	r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	01db      	lsls	r3, r3, #7
 800a268:	4413      	add	r3, r2
 800a26a:	3384      	adds	r3, #132	@ 0x84
 800a26c:	69da      	ldr	r2, [r3, #28]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4619      	mov	r1, r3
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	01db      	lsls	r3, r3, #7
 800a278:	440b      	add	r3, r1
 800a27a:	3384      	adds	r3, #132	@ 0x84
 800a27c:	4619      	mov	r1, r3
 800a27e:	4b4f      	ldr	r3, [pc, #316]	@ (800a3bc <LTDC_SetConfig+0x2e4>)
 800a280:	4013      	ands	r3, r2
 800a282:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	69da      	ldr	r2, [r3, #28]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	68f9      	ldr	r1, [r7, #12]
 800a28e:	6809      	ldr	r1, [r1, #0]
 800a290:	4608      	mov	r0, r1
 800a292:	6879      	ldr	r1, [r7, #4]
 800a294:	01c9      	lsls	r1, r1, #7
 800a296:	4401      	add	r1, r0
 800a298:	3184      	adds	r1, #132	@ 0x84
 800a29a:	4313      	orrs	r3, r2
 800a29c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	01db      	lsls	r3, r3, #7
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3384      	adds	r3, #132	@ 0x84
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d102      	bne.n	800a2c2 <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a2bc:	2304      	movs	r3, #4
 800a2be:	61fb      	str	r3, [r7, #28]
 800a2c0:	e01b      	b.n	800a2fa <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	691b      	ldr	r3, [r3, #16]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d102      	bne.n	800a2d0 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a2ca:	2303      	movs	r3, #3
 800a2cc:	61fb      	str	r3, [r7, #28]
 800a2ce:	e014      	b.n	800a2fa <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d00b      	beq.n	800a2f0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	d007      	beq.n	800a2f0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	d003      	beq.n	800a2f0 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a2ec:	2b07      	cmp	r3, #7
 800a2ee:	d102      	bne.n	800a2f6 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	61fb      	str	r3, [r7, #28]
 800a2f4:	e001      	b.n	800a2fa <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	01db      	lsls	r3, r3, #7
 800a304:	4413      	add	r3, r2
 800a306:	3384      	adds	r3, #132	@ 0x84
 800a308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	6812      	ldr	r2, [r2, #0]
 800a30e:	4611      	mov	r1, r2
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	01d2      	lsls	r2, r2, #7
 800a314:	440a      	add	r2, r1
 800a316:	3284      	adds	r2, #132	@ 0x84
 800a318:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a31c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a322:	69fa      	ldr	r2, [r7, #28]
 800a324:	fb02 f303 	mul.w	r3, r2, r3
 800a328:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	6859      	ldr	r1, [r3, #4]
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	1acb      	subs	r3, r1, r3
 800a334:	69f9      	ldr	r1, [r7, #28]
 800a336:	fb01 f303 	mul.w	r3, r1, r3
 800a33a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a33c:	68f9      	ldr	r1, [r7, #12]
 800a33e:	6809      	ldr	r1, [r1, #0]
 800a340:	4608      	mov	r0, r1
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	01c9      	lsls	r1, r1, #7
 800a346:	4401      	add	r1, r0
 800a348:	3184      	adds	r1, #132	@ 0x84
 800a34a:	4313      	orrs	r3, r2
 800a34c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	461a      	mov	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	01db      	lsls	r3, r3, #7
 800a358:	4413      	add	r3, r2
 800a35a:	3384      	adds	r3, #132	@ 0x84
 800a35c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4619      	mov	r1, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	01db      	lsls	r3, r3, #7
 800a368:	440b      	add	r3, r1
 800a36a:	3384      	adds	r3, #132	@ 0x84
 800a36c:	4619      	mov	r1, r3
 800a36e:	4b14      	ldr	r3, [pc, #80]	@ (800a3c0 <LTDC_SetConfig+0x2e8>)
 800a370:	4013      	ands	r3, r2
 800a372:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	01db      	lsls	r3, r3, #7
 800a37e:	4413      	add	r3, r2
 800a380:	3384      	adds	r3, #132	@ 0x84
 800a382:	461a      	mov	r2, r3
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a388:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	461a      	mov	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	01db      	lsls	r3, r3, #7
 800a394:	4413      	add	r3, r2
 800a396:	3384      	adds	r3, #132	@ 0x84
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	6812      	ldr	r2, [r2, #0]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	01d2      	lsls	r2, r2, #7
 800a3a4:	440a      	add	r2, r1
 800a3a6:	3284      	adds	r2, #132	@ 0x84
 800a3a8:	f043 0301 	orr.w	r3, r3, #1
 800a3ac:	6013      	str	r3, [r2, #0]
}
 800a3ae:	bf00      	nop
 800a3b0:	3724      	adds	r7, #36	@ 0x24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	fffff8f8 	.word	0xfffff8f8
 800a3c0:	fffff800 	.word	0xfffff800

0800a3c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3c8:	4b05      	ldr	r3, [pc, #20]	@ (800a3e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a04      	ldr	r2, [pc, #16]	@ (800a3e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a3ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3d2:	6013      	str	r3, [r2, #0]
}
 800a3d4:	bf00      	nop
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	40007000 	.word	0x40007000

0800a3e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a3ee:	4b23      	ldr	r3, [pc, #140]	@ (800a47c <HAL_PWREx_EnableOverDrive+0x98>)
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f2:	4a22      	ldr	r2, [pc, #136]	@ (800a47c <HAL_PWREx_EnableOverDrive+0x98>)
 800a3f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3f8:	6413      	str	r3, [r2, #64]	@ 0x40
 800a3fa:	4b20      	ldr	r3, [pc, #128]	@ (800a47c <HAL_PWREx_EnableOverDrive+0x98>)
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a402:	603b      	str	r3, [r7, #0]
 800a404:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a406:	4b1e      	ldr	r3, [pc, #120]	@ (800a480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a1d      	ldr	r2, [pc, #116]	@ (800a480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a40c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a410:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a412:	f7fb fd49 	bl	8005ea8 <HAL_GetTick>
 800a416:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a418:	e009      	b.n	800a42e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a41a:	f7fb fd45 	bl	8005ea8 <HAL_GetTick>
 800a41e:	4602      	mov	r2, r0
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	1ad3      	subs	r3, r2, r3
 800a424:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a428:	d901      	bls.n	800a42e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a42a:	2303      	movs	r3, #3
 800a42c:	e022      	b.n	800a474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a42e:	4b14      	ldr	r3, [pc, #80]	@ (800a480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a43a:	d1ee      	bne.n	800a41a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a43c:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a0f      	ldr	r2, [pc, #60]	@ (800a480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a446:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a448:	f7fb fd2e 	bl	8005ea8 <HAL_GetTick>
 800a44c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a44e:	e009      	b.n	800a464 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a450:	f7fb fd2a 	bl	8005ea8 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a45e:	d901      	bls.n	800a464 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a460:	2303      	movs	r3, #3
 800a462:	e007      	b.n	800a474 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a464:	4b06      	ldr	r3, [pc, #24]	@ (800a480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a46c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a470:	d1ee      	bne.n	800a450 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	40023800 	.word	0x40023800
 800a480:	40007000 	.word	0x40007000

0800a484 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af02      	add	r7, sp, #8
 800a48a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800a48c:	f7fb fd0c 	bl	8005ea8 <HAL_GetTick>
 800a490:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e067      	b.n	800a56c <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10b      	bne.n	800a4c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	f7fa f81d 	bl	80044f0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800a4b6:	f241 3188 	movw	r1, #5000	@ 0x1388
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f85e 	bl	800a57c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	689b      	ldr	r3, [r3, #8]
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	021a      	lsls	r2, r3, #8
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	430a      	orrs	r2, r1
 800a4d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	2120      	movs	r1, #32
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f856 	bl	800a598 <QSPI_WaitFlagStateUntilTimeout>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800a4f0:	7afb      	ldrb	r3, [r7, #11]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d135      	bne.n	800a562 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800a574 <HAL_QSPI_Init+0xf0>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	6852      	ldr	r2, [r2, #4]
 800a504:	0611      	lsls	r1, r2, #24
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	68d2      	ldr	r2, [r2, #12]
 800a50a:	4311      	orrs	r1, r2
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	69d2      	ldr	r2, [r2, #28]
 800a510:	4311      	orrs	r1, r2
 800a512:	687a      	ldr	r2, [r7, #4]
 800a514:	6a12      	ldr	r2, [r2, #32]
 800a516:	4311      	orrs	r1, r2
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	6812      	ldr	r2, [r2, #0]
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	4b14      	ldr	r3, [pc, #80]	@ (800a578 <HAL_QSPI_Init+0xf4>)
 800a528:	4013      	ands	r3, r2
 800a52a:	687a      	ldr	r2, [r7, #4]
 800a52c:	6912      	ldr	r2, [r2, #16]
 800a52e:	0411      	lsls	r1, r2, #16
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	6952      	ldr	r2, [r2, #20]
 800a534:	4311      	orrs	r1, r2
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	6992      	ldr	r2, [r2, #24]
 800a53a:	4311      	orrs	r1, r2
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	6812      	ldr	r2, [r2, #0]
 800a540:	430b      	orrs	r3, r1
 800a542:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f042 0201 	orr.w	r2, r2, #1
 800a552:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800a56a:	7afb      	ldrb	r3, [r7, #11]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	00ffff2f 	.word	0x00ffff2f
 800a578:	ffe0f8fe 	.word	0xffe0f8fe

0800a57c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	683a      	ldr	r2, [r7, #0]
 800a58a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800a58c:	bf00      	nop
 800a58e:	370c      	adds	r7, #12
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a5a8:	e01a      	b.n	800a5e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b0:	d016      	beq.n	800a5e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5b2:	f7fb fc79 	bl	8005ea8 <HAL_GetTick>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	1ad3      	subs	r3, r2, r3
 800a5bc:	69ba      	ldr	r2, [r7, #24]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d302      	bcc.n	800a5c8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10b      	bne.n	800a5e0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5d4:	f043 0201 	orr.w	r2, r3, #1
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e00e      	b.n	800a5fe <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689a      	ldr	r2, [r3, #8]
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	bf14      	ite	ne
 800a5ee:	2301      	movne	r3, #1
 800a5f0:	2300      	moveq	r3, #0
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	79fb      	ldrb	r3, [r7, #7]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	d1d6      	bne.n	800a5aa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a5fc:	2300      	movs	r3, #0
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
	...

0800a608 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a610:	2300      	movs	r3, #0
 800a612:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e291      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0301 	and.w	r3, r3, #1
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 8087 	beq.w	800a73a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a62c:	4b96      	ldr	r3, [pc, #600]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f003 030c 	and.w	r3, r3, #12
 800a634:	2b04      	cmp	r3, #4
 800a636:	d00c      	beq.n	800a652 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a638:	4b93      	ldr	r3, [pc, #588]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f003 030c 	and.w	r3, r3, #12
 800a640:	2b08      	cmp	r3, #8
 800a642:	d112      	bne.n	800a66a <HAL_RCC_OscConfig+0x62>
 800a644:	4b90      	ldr	r3, [pc, #576]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a64c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a650:	d10b      	bne.n	800a66a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a652:	4b8d      	ldr	r3, [pc, #564]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d06c      	beq.n	800a738 <HAL_RCC_OscConfig+0x130>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	685b      	ldr	r3, [r3, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d168      	bne.n	800a738 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	e26b      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a672:	d106      	bne.n	800a682 <HAL_RCC_OscConfig+0x7a>
 800a674:	4b84      	ldr	r3, [pc, #528]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a83      	ldr	r2, [pc, #524]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a67a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	e02e      	b.n	800a6e0 <HAL_RCC_OscConfig+0xd8>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10c      	bne.n	800a6a4 <HAL_RCC_OscConfig+0x9c>
 800a68a:	4b7f      	ldr	r3, [pc, #508]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a7e      	ldr	r2, [pc, #504]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a690:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	4b7c      	ldr	r3, [pc, #496]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a7b      	ldr	r2, [pc, #492]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a69c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	e01d      	b.n	800a6e0 <HAL_RCC_OscConfig+0xd8>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a6ac:	d10c      	bne.n	800a6c8 <HAL_RCC_OscConfig+0xc0>
 800a6ae:	4b76      	ldr	r3, [pc, #472]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a75      	ldr	r2, [pc, #468]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a6b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a6b8:	6013      	str	r3, [r2, #0]
 800a6ba:	4b73      	ldr	r3, [pc, #460]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a72      	ldr	r2, [pc, #456]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a6c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	e00b      	b.n	800a6e0 <HAL_RCC_OscConfig+0xd8>
 800a6c8:	4b6f      	ldr	r3, [pc, #444]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a6e      	ldr	r2, [pc, #440]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a6ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a6d2:	6013      	str	r3, [r2, #0]
 800a6d4:	4b6c      	ldr	r3, [pc, #432]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a6b      	ldr	r2, [pc, #428]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a6da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a6de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d013      	beq.n	800a710 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e8:	f7fb fbde 	bl	8005ea8 <HAL_GetTick>
 800a6ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ee:	e008      	b.n	800a702 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6f0:	f7fb fbda 	bl	8005ea8 <HAL_GetTick>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	1ad3      	subs	r3, r2, r3
 800a6fa:	2b64      	cmp	r3, #100	@ 0x64
 800a6fc:	d901      	bls.n	800a702 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e21f      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a702:	4b61      	ldr	r3, [pc, #388]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0f0      	beq.n	800a6f0 <HAL_RCC_OscConfig+0xe8>
 800a70e:	e014      	b.n	800a73a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a710:	f7fb fbca 	bl	8005ea8 <HAL_GetTick>
 800a714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a716:	e008      	b.n	800a72a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a718:	f7fb fbc6 	bl	8005ea8 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	1ad3      	subs	r3, r2, r3
 800a722:	2b64      	cmp	r3, #100	@ 0x64
 800a724:	d901      	bls.n	800a72a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a726:	2303      	movs	r3, #3
 800a728:	e20b      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a72a:	4b57      	ldr	r3, [pc, #348]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1f0      	bne.n	800a718 <HAL_RCC_OscConfig+0x110>
 800a736:	e000      	b.n	800a73a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d069      	beq.n	800a81a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a746:	4b50      	ldr	r3, [pc, #320]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f003 030c 	and.w	r3, r3, #12
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00b      	beq.n	800a76a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a752:	4b4d      	ldr	r3, [pc, #308]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	f003 030c 	and.w	r3, r3, #12
 800a75a:	2b08      	cmp	r3, #8
 800a75c:	d11c      	bne.n	800a798 <HAL_RCC_OscConfig+0x190>
 800a75e:	4b4a      	ldr	r3, [pc, #296]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d116      	bne.n	800a798 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a76a:	4b47      	ldr	r3, [pc, #284]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f003 0302 	and.w	r3, r3, #2
 800a772:	2b00      	cmp	r3, #0
 800a774:	d005      	beq.n	800a782 <HAL_RCC_OscConfig+0x17a>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d001      	beq.n	800a782 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e1df      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a782:	4b41      	ldr	r3, [pc, #260]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	00db      	lsls	r3, r3, #3
 800a790:	493d      	ldr	r1, [pc, #244]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a792:	4313      	orrs	r3, r2
 800a794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a796:	e040      	b.n	800a81a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68db      	ldr	r3, [r3, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d023      	beq.n	800a7e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a7a0:	4b39      	ldr	r3, [pc, #228]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a38      	ldr	r2, [pc, #224]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ac:	f7fb fb7c 	bl	8005ea8 <HAL_GetTick>
 800a7b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7b2:	e008      	b.n	800a7c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7b4:	f7fb fb78 	bl	8005ea8 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e1bd      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7c6:	4b30      	ldr	r3, [pc, #192]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d0f0      	beq.n	800a7b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7d2:	4b2d      	ldr	r3, [pc, #180]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	00db      	lsls	r3, r3, #3
 800a7e0:	4929      	ldr	r1, [pc, #164]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	600b      	str	r3, [r1, #0]
 800a7e6:	e018      	b.n	800a81a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7e8:	4b27      	ldr	r3, [pc, #156]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a26      	ldr	r2, [pc, #152]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a7ee:	f023 0301 	bic.w	r3, r3, #1
 800a7f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7f4:	f7fb fb58 	bl	8005ea8 <HAL_GetTick>
 800a7f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7fa:	e008      	b.n	800a80e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7fc:	f7fb fb54 	bl	8005ea8 <HAL_GetTick>
 800a800:	4602      	mov	r2, r0
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	2b02      	cmp	r3, #2
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e199      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a80e:	4b1e      	ldr	r3, [pc, #120]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1f0      	bne.n	800a7fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0308 	and.w	r3, r3, #8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d038      	beq.n	800a898 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d019      	beq.n	800a862 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a82e:	4b16      	ldr	r3, [pc, #88]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a832:	4a15      	ldr	r2, [pc, #84]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a834:	f043 0301 	orr.w	r3, r3, #1
 800a838:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a83a:	f7fb fb35 	bl	8005ea8 <HAL_GetTick>
 800a83e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a840:	e008      	b.n	800a854 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a842:	f7fb fb31 	bl	8005ea8 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d901      	bls.n	800a854 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e176      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a854:	4b0c      	ldr	r3, [pc, #48]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0f0      	beq.n	800a842 <HAL_RCC_OscConfig+0x23a>
 800a860:	e01a      	b.n	800a898 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a862:	4b09      	ldr	r3, [pc, #36]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a866:	4a08      	ldr	r2, [pc, #32]	@ (800a888 <HAL_RCC_OscConfig+0x280>)
 800a868:	f023 0301 	bic.w	r3, r3, #1
 800a86c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a86e:	f7fb fb1b 	bl	8005ea8 <HAL_GetTick>
 800a872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a874:	e00a      	b.n	800a88c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a876:	f7fb fb17 	bl	8005ea8 <HAL_GetTick>
 800a87a:	4602      	mov	r2, r0
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	2b02      	cmp	r3, #2
 800a882:	d903      	bls.n	800a88c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e15c      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
 800a888:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a88c:	4b91      	ldr	r3, [pc, #580]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a88e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1ee      	bne.n	800a876 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0304 	and.w	r3, r3, #4
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	f000 80a4 	beq.w	800a9ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8a6:	4b8b      	ldr	r3, [pc, #556]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a8a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d10d      	bne.n	800a8ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8b2:	4b88      	ldr	r3, [pc, #544]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8b6:	4a87      	ldr	r2, [pc, #540]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a8b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8bc:	6413      	str	r3, [r2, #64]	@ 0x40
 800a8be:	4b85      	ldr	r3, [pc, #532]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8c6:	60bb      	str	r3, [r7, #8]
 800a8c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8ce:	4b82      	ldr	r3, [pc, #520]	@ (800aad8 <HAL_RCC_OscConfig+0x4d0>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d118      	bne.n	800a90c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a8da:	4b7f      	ldr	r3, [pc, #508]	@ (800aad8 <HAL_RCC_OscConfig+0x4d0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a7e      	ldr	r2, [pc, #504]	@ (800aad8 <HAL_RCC_OscConfig+0x4d0>)
 800a8e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8e6:	f7fb fadf 	bl	8005ea8 <HAL_GetTick>
 800a8ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a8ec:	e008      	b.n	800a900 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8ee:	f7fb fadb 	bl	8005ea8 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	2b64      	cmp	r3, #100	@ 0x64
 800a8fa:	d901      	bls.n	800a900 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a8fc:	2303      	movs	r3, #3
 800a8fe:	e120      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a900:	4b75      	ldr	r3, [pc, #468]	@ (800aad8 <HAL_RCC_OscConfig+0x4d0>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d0f0      	beq.n	800a8ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	2b01      	cmp	r3, #1
 800a912:	d106      	bne.n	800a922 <HAL_RCC_OscConfig+0x31a>
 800a914:	4b6f      	ldr	r3, [pc, #444]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a918:	4a6e      	ldr	r2, [pc, #440]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a920:	e02d      	b.n	800a97e <HAL_RCC_OscConfig+0x376>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d10c      	bne.n	800a944 <HAL_RCC_OscConfig+0x33c>
 800a92a:	4b6a      	ldr	r3, [pc, #424]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a92c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a92e:	4a69      	ldr	r2, [pc, #420]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a930:	f023 0301 	bic.w	r3, r3, #1
 800a934:	6713      	str	r3, [r2, #112]	@ 0x70
 800a936:	4b67      	ldr	r3, [pc, #412]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a93a:	4a66      	ldr	r2, [pc, #408]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a93c:	f023 0304 	bic.w	r3, r3, #4
 800a940:	6713      	str	r3, [r2, #112]	@ 0x70
 800a942:	e01c      	b.n	800a97e <HAL_RCC_OscConfig+0x376>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	2b05      	cmp	r3, #5
 800a94a:	d10c      	bne.n	800a966 <HAL_RCC_OscConfig+0x35e>
 800a94c:	4b61      	ldr	r3, [pc, #388]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a94e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a950:	4a60      	ldr	r2, [pc, #384]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a952:	f043 0304 	orr.w	r3, r3, #4
 800a956:	6713      	str	r3, [r2, #112]	@ 0x70
 800a958:	4b5e      	ldr	r3, [pc, #376]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a95a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a95c:	4a5d      	ldr	r2, [pc, #372]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a95e:	f043 0301 	orr.w	r3, r3, #1
 800a962:	6713      	str	r3, [r2, #112]	@ 0x70
 800a964:	e00b      	b.n	800a97e <HAL_RCC_OscConfig+0x376>
 800a966:	4b5b      	ldr	r3, [pc, #364]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a96a:	4a5a      	ldr	r2, [pc, #360]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a96c:	f023 0301 	bic.w	r3, r3, #1
 800a970:	6713      	str	r3, [r2, #112]	@ 0x70
 800a972:	4b58      	ldr	r3, [pc, #352]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a976:	4a57      	ldr	r2, [pc, #348]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a978:	f023 0304 	bic.w	r3, r3, #4
 800a97c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d015      	beq.n	800a9b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a986:	f7fb fa8f 	bl	8005ea8 <HAL_GetTick>
 800a98a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a98c:	e00a      	b.n	800a9a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a98e:	f7fb fa8b 	bl	8005ea8 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d901      	bls.n	800a9a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a9a0:	2303      	movs	r3, #3
 800a9a2:	e0ce      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9a4:	4b4b      	ldr	r3, [pc, #300]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a9a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9a8:	f003 0302 	and.w	r3, r3, #2
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0ee      	beq.n	800a98e <HAL_RCC_OscConfig+0x386>
 800a9b0:	e014      	b.n	800a9dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9b2:	f7fb fa79 	bl	8005ea8 <HAL_GetTick>
 800a9b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9b8:	e00a      	b.n	800a9d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9ba:	f7fb fa75 	bl	8005ea8 <HAL_GetTick>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d901      	bls.n	800a9d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e0b8      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9d0:	4b40      	ldr	r3, [pc, #256]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a9d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9d4:	f003 0302 	and.w	r3, r3, #2
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1ee      	bne.n	800a9ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d105      	bne.n	800a9ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9e2:	4b3c      	ldr	r3, [pc, #240]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9e6:	4a3b      	ldr	r2, [pc, #236]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a9e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a9ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f000 80a4 	beq.w	800ab40 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a9f8:	4b36      	ldr	r3, [pc, #216]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f003 030c 	and.w	r3, r3, #12
 800aa00:	2b08      	cmp	r3, #8
 800aa02:	d06b      	beq.n	800aadc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d149      	bne.n	800aaa0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa0c:	4b31      	ldr	r3, [pc, #196]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a30      	ldr	r2, [pc, #192]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aa12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa18:	f7fb fa46 	bl	8005ea8 <HAL_GetTick>
 800aa1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa1e:	e008      	b.n	800aa32 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa20:	f7fb fa42 	bl	8005ea8 <HAL_GetTick>
 800aa24:	4602      	mov	r2, r0
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d901      	bls.n	800aa32 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e087      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aa32:	4b28      	ldr	r3, [pc, #160]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1f0      	bne.n	800aa20 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	69da      	ldr	r2, [r3, #28]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	431a      	orrs	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4c:	019b      	lsls	r3, r3, #6
 800aa4e:	431a      	orrs	r2, r3
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa54:	085b      	lsrs	r3, r3, #1
 800aa56:	3b01      	subs	r3, #1
 800aa58:	041b      	lsls	r3, r3, #16
 800aa5a:	431a      	orrs	r2, r3
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa60:	061b      	lsls	r3, r3, #24
 800aa62:	4313      	orrs	r3, r2
 800aa64:	4a1b      	ldr	r2, [pc, #108]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aa66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aa6a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa6c:	4b19      	ldr	r3, [pc, #100]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a18      	ldr	r2, [pc, #96]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aa72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aa76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa78:	f7fb fa16 	bl	8005ea8 <HAL_GetTick>
 800aa7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa7e:	e008      	b.n	800aa92 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa80:	f7fb fa12 	bl	8005ea8 <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d901      	bls.n	800aa92 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e057      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aa92:	4b10      	ldr	r3, [pc, #64]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0f0      	beq.n	800aa80 <HAL_RCC_OscConfig+0x478>
 800aa9e:	e04f      	b.n	800ab40 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaa0:	4b0c      	ldr	r3, [pc, #48]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a0b      	ldr	r2, [pc, #44]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aaa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aaaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaac:	f7fb f9fc 	bl	8005ea8 <HAL_GetTick>
 800aab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aab2:	e008      	b.n	800aac6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aab4:	f7fb f9f8 	bl	8005ea8 <HAL_GetTick>
 800aab8:	4602      	mov	r2, r0
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d901      	bls.n	800aac6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800aac2:	2303      	movs	r3, #3
 800aac4:	e03d      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aac6:	4b03      	ldr	r3, [pc, #12]	@ (800aad4 <HAL_RCC_OscConfig+0x4cc>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1f0      	bne.n	800aab4 <HAL_RCC_OscConfig+0x4ac>
 800aad2:	e035      	b.n	800ab40 <HAL_RCC_OscConfig+0x538>
 800aad4:	40023800 	.word	0x40023800
 800aad8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800aadc:	4b1b      	ldr	r3, [pc, #108]	@ (800ab4c <HAL_RCC_OscConfig+0x544>)
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d028      	beq.n	800ab3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d121      	bne.n	800ab3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d11a      	bne.n	800ab3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800ab0c:	4013      	ands	r3, r2
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ab12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d111      	bne.n	800ab3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab22:	085b      	lsrs	r3, r3, #1
 800ab24:	3b01      	subs	r3, #1
 800ab26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d107      	bne.n	800ab3c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d001      	beq.n	800ab40 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	e000      	b.n	800ab42 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	40023800 	.word	0x40023800

0800ab50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e0d0      	b.n	800ad0a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab68:	4b6a      	ldr	r3, [pc, #424]	@ (800ad14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 030f 	and.w	r3, r3, #15
 800ab70:	683a      	ldr	r2, [r7, #0]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d910      	bls.n	800ab98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab76:	4b67      	ldr	r3, [pc, #412]	@ (800ad14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f023 020f 	bic.w	r2, r3, #15
 800ab7e:	4965      	ldr	r1, [pc, #404]	@ (800ad14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab86:	4b63      	ldr	r3, [pc, #396]	@ (800ad14 <HAL_RCC_ClockConfig+0x1c4>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 030f 	and.w	r3, r3, #15
 800ab8e:	683a      	ldr	r2, [r7, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d001      	beq.n	800ab98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e0b8      	b.n	800ad0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 0302 	and.w	r3, r3, #2
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d020      	beq.n	800abe6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0304 	and.w	r3, r3, #4
 800abac:	2b00      	cmp	r3, #0
 800abae:	d005      	beq.n	800abbc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abb0:	4b59      	ldr	r3, [pc, #356]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	4a58      	ldr	r2, [pc, #352]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800abb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800abba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f003 0308 	and.w	r3, r3, #8
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d005      	beq.n	800abd4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800abc8:	4b53      	ldr	r3, [pc, #332]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800abca:	689b      	ldr	r3, [r3, #8]
 800abcc:	4a52      	ldr	r2, [pc, #328]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800abce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800abd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abd4:	4b50      	ldr	r3, [pc, #320]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	494d      	ldr	r1, [pc, #308]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d040      	beq.n	800ac74 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d107      	bne.n	800ac0a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abfa:	4b47      	ldr	r3, [pc, #284]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d115      	bne.n	800ac32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e07f      	b.n	800ad0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d107      	bne.n	800ac22 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ac12:	4b41      	ldr	r3, [pc, #260]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d109      	bne.n	800ac32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e073      	b.n	800ad0a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac22:	4b3d      	ldr	r3, [pc, #244]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 0302 	and.w	r3, r3, #2
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e06b      	b.n	800ad0a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ac32:	4b39      	ldr	r3, [pc, #228]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f023 0203 	bic.w	r2, r3, #3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	4936      	ldr	r1, [pc, #216]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac44:	f7fb f930 	bl	8005ea8 <HAL_GetTick>
 800ac48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac4a:	e00a      	b.n	800ac62 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac4c:	f7fb f92c 	bl	8005ea8 <HAL_GetTick>
 800ac50:	4602      	mov	r2, r0
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d901      	bls.n	800ac62 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e053      	b.n	800ad0a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac62:	4b2d      	ldr	r3, [pc, #180]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	f003 020c 	and.w	r2, r3, #12
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d1eb      	bne.n	800ac4c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac74:	4b27      	ldr	r3, [pc, #156]	@ (800ad14 <HAL_RCC_ClockConfig+0x1c4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 030f 	and.w	r3, r3, #15
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d210      	bcs.n	800aca4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac82:	4b24      	ldr	r3, [pc, #144]	@ (800ad14 <HAL_RCC_ClockConfig+0x1c4>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f023 020f 	bic.w	r2, r3, #15
 800ac8a:	4922      	ldr	r1, [pc, #136]	@ (800ad14 <HAL_RCC_ClockConfig+0x1c4>)
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac92:	4b20      	ldr	r3, [pc, #128]	@ (800ad14 <HAL_RCC_ClockConfig+0x1c4>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 030f 	and.w	r3, r3, #15
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d001      	beq.n	800aca4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e032      	b.n	800ad0a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 0304 	and.w	r3, r3, #4
 800acac:	2b00      	cmp	r3, #0
 800acae:	d008      	beq.n	800acc2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800acb0:	4b19      	ldr	r3, [pc, #100]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	4916      	ldr	r1, [pc, #88]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800acbe:	4313      	orrs	r3, r2
 800acc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0308 	and.w	r3, r3, #8
 800acca:	2b00      	cmp	r3, #0
 800accc:	d009      	beq.n	800ace2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800acce:	4b12      	ldr	r3, [pc, #72]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800acd0:	689b      	ldr	r3, [r3, #8]
 800acd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	691b      	ldr	r3, [r3, #16]
 800acda:	00db      	lsls	r3, r3, #3
 800acdc:	490e      	ldr	r1, [pc, #56]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800acde:	4313      	orrs	r3, r2
 800ace0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ace2:	f000 f821 	bl	800ad28 <HAL_RCC_GetSysClockFreq>
 800ace6:	4602      	mov	r2, r0
 800ace8:	4b0b      	ldr	r3, [pc, #44]	@ (800ad18 <HAL_RCC_ClockConfig+0x1c8>)
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	091b      	lsrs	r3, r3, #4
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	490a      	ldr	r1, [pc, #40]	@ (800ad1c <HAL_RCC_ClockConfig+0x1cc>)
 800acf4:	5ccb      	ldrb	r3, [r1, r3]
 800acf6:	fa22 f303 	lsr.w	r3, r2, r3
 800acfa:	4a09      	ldr	r2, [pc, #36]	@ (800ad20 <HAL_RCC_ClockConfig+0x1d0>)
 800acfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800acfe:	4b09      	ldr	r3, [pc, #36]	@ (800ad24 <HAL_RCC_ClockConfig+0x1d4>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fa f902 	bl	8004f0c <HAL_InitTick>

  return HAL_OK;
 800ad08:	2300      	movs	r3, #0
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	40023c00 	.word	0x40023c00
 800ad18:	40023800 	.word	0x40023800
 800ad1c:	0801b91c 	.word	0x0801b91c
 800ad20:	2000001c 	.word	0x2000001c
 800ad24:	20000068 	.word	0x20000068

0800ad28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ad28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad2c:	b090      	sub	sp, #64	@ 0x40
 800ad2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad34:	2300      	movs	r3, #0
 800ad36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad38:	2300      	movs	r3, #0
 800ad3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ad40:	4b59      	ldr	r3, [pc, #356]	@ (800aea8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f003 030c 	and.w	r3, r3, #12
 800ad48:	2b08      	cmp	r3, #8
 800ad4a:	d00d      	beq.n	800ad68 <HAL_RCC_GetSysClockFreq+0x40>
 800ad4c:	2b08      	cmp	r3, #8
 800ad4e:	f200 80a1 	bhi.w	800ae94 <HAL_RCC_GetSysClockFreq+0x16c>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d002      	beq.n	800ad5c <HAL_RCC_GetSysClockFreq+0x34>
 800ad56:	2b04      	cmp	r3, #4
 800ad58:	d003      	beq.n	800ad62 <HAL_RCC_GetSysClockFreq+0x3a>
 800ad5a:	e09b      	b.n	800ae94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ad5c:	4b53      	ldr	r3, [pc, #332]	@ (800aeac <HAL_RCC_GetSysClockFreq+0x184>)
 800ad5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ad60:	e09b      	b.n	800ae9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ad62:	4b53      	ldr	r3, [pc, #332]	@ (800aeb0 <HAL_RCC_GetSysClockFreq+0x188>)
 800ad64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ad66:	e098      	b.n	800ae9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ad68:	4b4f      	ldr	r3, [pc, #316]	@ (800aea8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ad70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ad72:	4b4d      	ldr	r3, [pc, #308]	@ (800aea8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d028      	beq.n	800add0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ad7e:	4b4a      	ldr	r3, [pc, #296]	@ (800aea8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ad80:	685b      	ldr	r3, [r3, #4]
 800ad82:	099b      	lsrs	r3, r3, #6
 800ad84:	2200      	movs	r2, #0
 800ad86:	623b      	str	r3, [r7, #32]
 800ad88:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad8a:	6a3b      	ldr	r3, [r7, #32]
 800ad8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800ad90:	2100      	movs	r1, #0
 800ad92:	4b47      	ldr	r3, [pc, #284]	@ (800aeb0 <HAL_RCC_GetSysClockFreq+0x188>)
 800ad94:	fb03 f201 	mul.w	r2, r3, r1
 800ad98:	2300      	movs	r3, #0
 800ad9a:	fb00 f303 	mul.w	r3, r0, r3
 800ad9e:	4413      	add	r3, r2
 800ada0:	4a43      	ldr	r2, [pc, #268]	@ (800aeb0 <HAL_RCC_GetSysClockFreq+0x188>)
 800ada2:	fba0 1202 	umull	r1, r2, r0, r2
 800ada6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ada8:	460a      	mov	r2, r1
 800adaa:	62ba      	str	r2, [r7, #40]	@ 0x28
 800adac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adae:	4413      	add	r3, r2
 800adb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adb4:	2200      	movs	r2, #0
 800adb6:	61bb      	str	r3, [r7, #24]
 800adb8:	61fa      	str	r2, [r7, #28]
 800adba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800adbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800adc2:	f7f5 fa8d 	bl	80002e0 <__aeabi_uldivmod>
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4613      	mov	r3, r2
 800adcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adce:	e053      	b.n	800ae78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800add0:	4b35      	ldr	r3, [pc, #212]	@ (800aea8 <HAL_RCC_GetSysClockFreq+0x180>)
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	099b      	lsrs	r3, r3, #6
 800add6:	2200      	movs	r2, #0
 800add8:	613b      	str	r3, [r7, #16]
 800adda:	617a      	str	r2, [r7, #20]
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ade2:	f04f 0b00 	mov.w	fp, #0
 800ade6:	4652      	mov	r2, sl
 800ade8:	465b      	mov	r3, fp
 800adea:	f04f 0000 	mov.w	r0, #0
 800adee:	f04f 0100 	mov.w	r1, #0
 800adf2:	0159      	lsls	r1, r3, #5
 800adf4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800adf8:	0150      	lsls	r0, r2, #5
 800adfa:	4602      	mov	r2, r0
 800adfc:	460b      	mov	r3, r1
 800adfe:	ebb2 080a 	subs.w	r8, r2, sl
 800ae02:	eb63 090b 	sbc.w	r9, r3, fp
 800ae06:	f04f 0200 	mov.w	r2, #0
 800ae0a:	f04f 0300 	mov.w	r3, #0
 800ae0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ae12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ae16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ae1a:	ebb2 0408 	subs.w	r4, r2, r8
 800ae1e:	eb63 0509 	sbc.w	r5, r3, r9
 800ae22:	f04f 0200 	mov.w	r2, #0
 800ae26:	f04f 0300 	mov.w	r3, #0
 800ae2a:	00eb      	lsls	r3, r5, #3
 800ae2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ae30:	00e2      	lsls	r2, r4, #3
 800ae32:	4614      	mov	r4, r2
 800ae34:	461d      	mov	r5, r3
 800ae36:	eb14 030a 	adds.w	r3, r4, sl
 800ae3a:	603b      	str	r3, [r7, #0]
 800ae3c:	eb45 030b 	adc.w	r3, r5, fp
 800ae40:	607b      	str	r3, [r7, #4]
 800ae42:	f04f 0200 	mov.w	r2, #0
 800ae46:	f04f 0300 	mov.w	r3, #0
 800ae4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ae4e:	4629      	mov	r1, r5
 800ae50:	028b      	lsls	r3, r1, #10
 800ae52:	4621      	mov	r1, r4
 800ae54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ae58:	4621      	mov	r1, r4
 800ae5a:	028a      	lsls	r2, r1, #10
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae62:	2200      	movs	r2, #0
 800ae64:	60bb      	str	r3, [r7, #8]
 800ae66:	60fa      	str	r2, [r7, #12]
 800ae68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae6c:	f7f5 fa38 	bl	80002e0 <__aeabi_uldivmod>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	4613      	mov	r3, r2
 800ae76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800ae78:	4b0b      	ldr	r3, [pc, #44]	@ (800aea8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	0c1b      	lsrs	r3, r3, #16
 800ae7e:	f003 0303 	and.w	r3, r3, #3
 800ae82:	3301      	adds	r3, #1
 800ae84:	005b      	lsls	r3, r3, #1
 800ae86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800ae88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ae92:	e002      	b.n	800ae9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ae94:	4b05      	ldr	r3, [pc, #20]	@ (800aeac <HAL_RCC_GetSysClockFreq+0x184>)
 800ae96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800ae98:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3740      	adds	r7, #64	@ 0x40
 800aea0:	46bd      	mov	sp, r7
 800aea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aea6:	bf00      	nop
 800aea8:	40023800 	.word	0x40023800
 800aeac:	00f42400 	.word	0x00f42400
 800aeb0:	017d7840 	.word	0x017d7840

0800aeb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aeb8:	4b03      	ldr	r3, [pc, #12]	@ (800aec8 <HAL_RCC_GetHCLKFreq+0x14>)
 800aeba:	681b      	ldr	r3, [r3, #0]
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
 800aec6:	bf00      	nop
 800aec8:	2000001c 	.word	0x2000001c

0800aecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aed0:	f7ff fff0 	bl	800aeb4 <HAL_RCC_GetHCLKFreq>
 800aed4:	4602      	mov	r2, r0
 800aed6:	4b05      	ldr	r3, [pc, #20]	@ (800aeec <HAL_RCC_GetPCLK1Freq+0x20>)
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	0a9b      	lsrs	r3, r3, #10
 800aedc:	f003 0307 	and.w	r3, r3, #7
 800aee0:	4903      	ldr	r1, [pc, #12]	@ (800aef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aee2:	5ccb      	ldrb	r3, [r1, r3]
 800aee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	40023800 	.word	0x40023800
 800aef0:	0801b92c 	.word	0x0801b92c

0800aef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aef8:	f7ff ffdc 	bl	800aeb4 <HAL_RCC_GetHCLKFreq>
 800aefc:	4602      	mov	r2, r0
 800aefe:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	0b5b      	lsrs	r3, r3, #13
 800af04:	f003 0307 	and.w	r3, r3, #7
 800af08:	4903      	ldr	r1, [pc, #12]	@ (800af18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af0a:	5ccb      	ldrb	r3, [r1, r3]
 800af0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af10:	4618      	mov	r0, r3
 800af12:	bd80      	pop	{r7, pc}
 800af14:	40023800 	.word	0x40023800
 800af18:	0801b92c 	.word	0x0801b92c

0800af1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	220f      	movs	r2, #15
 800af2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af2c:	4b12      	ldr	r3, [pc, #72]	@ (800af78 <HAL_RCC_GetClockConfig+0x5c>)
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f003 0203 	and.w	r2, r3, #3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800af38:	4b0f      	ldr	r3, [pc, #60]	@ (800af78 <HAL_RCC_GetClockConfig+0x5c>)
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800af44:	4b0c      	ldr	r3, [pc, #48]	@ (800af78 <HAL_RCC_GetClockConfig+0x5c>)
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800af50:	4b09      	ldr	r3, [pc, #36]	@ (800af78 <HAL_RCC_GetClockConfig+0x5c>)
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	08db      	lsrs	r3, r3, #3
 800af56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800af5e:	4b07      	ldr	r3, [pc, #28]	@ (800af7c <HAL_RCC_GetClockConfig+0x60>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 020f 	and.w	r2, r3, #15
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	601a      	str	r2, [r3, #0]
}
 800af6a:	bf00      	nop
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
 800af76:	bf00      	nop
 800af78:	40023800 	.word	0x40023800
 800af7c:	40023c00 	.word	0x40023c00

0800af80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800af88:	2300      	movs	r3, #0
 800af8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800af8c:	2300      	movs	r3, #0
 800af8e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800af94:	2300      	movs	r3, #0
 800af96:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0301 	and.w	r3, r3, #1
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d012      	beq.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800afa8:	4b69      	ldr	r3, [pc, #420]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afaa:	689b      	ldr	r3, [r3, #8]
 800afac:	4a68      	ldr	r2, [pc, #416]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800afb2:	6093      	str	r3, [r2, #8]
 800afb4:	4b66      	ldr	r3, [pc, #408]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afb6:	689a      	ldr	r2, [r3, #8]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afbc:	4964      	ldr	r1, [pc, #400]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afbe:	4313      	orrs	r3, r2
 800afc0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d101      	bne.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800afca:	2301      	movs	r3, #1
 800afcc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d017      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800afda:	4b5d      	ldr	r3, [pc, #372]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afe0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afe8:	4959      	ldr	r1, [pc, #356]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800afea:	4313      	orrs	r3, r2
 800afec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aff8:	d101      	bne.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800affa:	2301      	movs	r3, #1
 800affc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b002:	2b00      	cmp	r3, #0
 800b004:	d101      	bne.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b006:	2301      	movs	r3, #1
 800b008:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d017      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b016:	4b4e      	ldr	r3, [pc, #312]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b01c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b024:	494a      	ldr	r1, [pc, #296]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b026:	4313      	orrs	r3, r2
 800b028:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b030:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b034:	d101      	bne.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b036:	2301      	movs	r3, #1
 800b038:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d101      	bne.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b042:	2301      	movs	r3, #1
 800b044:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b052:	2301      	movs	r3, #1
 800b054:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	f003 0320 	and.w	r3, r3, #32
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f000 808b 	beq.w	800b17a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b064:	4b3a      	ldr	r3, [pc, #232]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b068:	4a39      	ldr	r2, [pc, #228]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b06a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b06e:	6413      	str	r3, [r2, #64]	@ 0x40
 800b070:	4b37      	ldr	r3, [pc, #220]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b078:	60bb      	str	r3, [r7, #8]
 800b07a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b07c:	4b35      	ldr	r3, [pc, #212]	@ (800b154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a34      	ldr	r2, [pc, #208]	@ (800b154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b088:	f7fa ff0e 	bl	8005ea8 <HAL_GetTick>
 800b08c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b090:	f7fa ff0a 	bl	8005ea8 <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b64      	cmp	r3, #100	@ 0x64
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e357      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b0a2:	4b2c      	ldr	r3, [pc, #176]	@ (800b154 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0f0      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b0ae:	4b28      	ldr	r3, [pc, #160]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d035      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0c6:	693a      	ldr	r2, [r7, #16]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d02e      	beq.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b0cc:	4b20      	ldr	r3, [pc, #128]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b0d6:	4b1e      	ldr	r3, [pc, #120]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0da:	4a1d      	ldr	r2, [pc, #116]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b0e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b0e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0e6:	4a1a      	ldr	r2, [pc, #104]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b0ee:	4a18      	ldr	r2, [pc, #96]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b0f4:	4b16      	ldr	r3, [pc, #88]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b0f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d114      	bne.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b100:	f7fa fed2 	bl	8005ea8 <HAL_GetTick>
 800b104:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b106:	e00a      	b.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b108:	f7fa fece 	bl	8005ea8 <HAL_GetTick>
 800b10c:	4602      	mov	r2, r0
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	1ad3      	subs	r3, r2, r3
 800b112:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b116:	4293      	cmp	r3, r2
 800b118:	d901      	bls.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e319      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b11e:	4b0c      	ldr	r3, [pc, #48]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b122:	f003 0302 	and.w	r3, r3, #2
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0ee      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b12e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b136:	d111      	bne.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b138:	4b05      	ldr	r3, [pc, #20]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b144:	4b04      	ldr	r3, [pc, #16]	@ (800b158 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b146:	400b      	ands	r3, r1
 800b148:	4901      	ldr	r1, [pc, #4]	@ (800b150 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	608b      	str	r3, [r1, #8]
 800b14e:	e00b      	b.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b150:	40023800 	.word	0x40023800
 800b154:	40007000 	.word	0x40007000
 800b158:	0ffffcff 	.word	0x0ffffcff
 800b15c:	4baa      	ldr	r3, [pc, #680]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	4aa9      	ldr	r2, [pc, #676]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b162:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b166:	6093      	str	r3, [r2, #8]
 800b168:	4ba7      	ldr	r3, [pc, #668]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b16a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b174:	49a4      	ldr	r1, [pc, #656]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b176:	4313      	orrs	r3, r2
 800b178:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0310 	and.w	r3, r3, #16
 800b182:	2b00      	cmp	r3, #0
 800b184:	d010      	beq.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b186:	4ba0      	ldr	r3, [pc, #640]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b18c:	4a9e      	ldr	r2, [pc, #632]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b18e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b192:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b196:	4b9c      	ldr	r3, [pc, #624]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b198:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1a0:	4999      	ldr	r1, [pc, #612]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00a      	beq.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b1b4:	4b94      	ldr	r3, [pc, #592]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b1c2:	4991      	ldr	r1, [pc, #580]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00a      	beq.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b1d6:	4b8c      	ldr	r3, [pc, #560]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b1e4:	4988      	ldr	r1, [pc, #544]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00a      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b1f8:	4b83      	ldr	r3, [pc, #524]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b1fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b206:	4980      	ldr	r1, [pc, #512]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b208:	4313      	orrs	r3, r2
 800b20a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b21a:	4b7b      	ldr	r3, [pc, #492]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b21c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b220:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b228:	4977      	ldr	r1, [pc, #476]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b22a:	4313      	orrs	r3, r2
 800b22c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00a      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b23c:	4b72      	ldr	r3, [pc, #456]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b23e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b242:	f023 0203 	bic.w	r2, r3, #3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b24a:	496f      	ldr	r1, [pc, #444]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00a      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b25e:	4b6a      	ldr	r3, [pc, #424]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b264:	f023 020c 	bic.w	r2, r3, #12
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b26c:	4966      	ldr	r1, [pc, #408]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00a      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b280:	4b61      	ldr	r3, [pc, #388]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b286:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b28e:	495e      	ldr	r1, [pc, #376]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b290:	4313      	orrs	r3, r2
 800b292:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00a      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b2a2:	4b59      	ldr	r3, [pc, #356]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2b0:	4955      	ldr	r1, [pc, #340]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00a      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b2c4:	4b50      	ldr	r3, [pc, #320]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2d2:	494d      	ldr	r1, [pc, #308]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00a      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b2e6:	4b48      	ldr	r3, [pc, #288]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b2f4:	4944      	ldr	r1, [pc, #272]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d00a      	beq.n	800b31e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b308:	4b3f      	ldr	r3, [pc, #252]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b30e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b316:	493c      	ldr	r1, [pc, #240]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00a      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b32a:	4b37      	ldr	r3, [pc, #220]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b32c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b330:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b338:	4933      	ldr	r1, [pc, #204]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b34c:	4b2e      	ldr	r3, [pc, #184]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b352:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b35a:	492b      	ldr	r1, [pc, #172]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d011      	beq.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b36e:	4b26      	ldr	r3, [pc, #152]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b374:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b37c:	4922      	ldr	r1, [pc, #136]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b37e:	4313      	orrs	r3, r2
 800b380:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b38c:	d101      	bne.n	800b392 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b38e:	2301      	movs	r3, #1
 800b390:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f003 0308 	and.w	r3, r3, #8
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d001      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00a      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3ae:	4b16      	ldr	r3, [pc, #88]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3bc:	4912      	ldr	r1, [pc, #72]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00b      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b3d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e0:	4909      	ldr	r1, [pc, #36]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d006      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 80d9 	beq.w	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b3fc:	4b02      	ldr	r3, [pc, #8]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a01      	ldr	r2, [pc, #4]	@ (800b408 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b406:	e001      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b408:	40023800 	.word	0x40023800
 800b40c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b40e:	f7fa fd4b 	bl	8005ea8 <HAL_GetTick>
 800b412:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b414:	e008      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b416:	f7fa fd47 	bl	8005ea8 <HAL_GetTick>
 800b41a:	4602      	mov	r2, r0
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	2b64      	cmp	r3, #100	@ 0x64
 800b422:	d901      	bls.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b424:	2303      	movs	r3, #3
 800b426:	e194      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b428:	4b6c      	ldr	r3, [pc, #432]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1f0      	bne.n	800b416 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0301 	and.w	r3, r3, #1
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d021      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b444:	2b00      	cmp	r3, #0
 800b446:	d11d      	bne.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b448:	4b64      	ldr	r3, [pc, #400]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b44a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b44e:	0c1b      	lsrs	r3, r3, #16
 800b450:	f003 0303 	and.w	r3, r3, #3
 800b454:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b456:	4b61      	ldr	r3, [pc, #388]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b45c:	0e1b      	lsrs	r3, r3, #24
 800b45e:	f003 030f 	and.w	r3, r3, #15
 800b462:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	019a      	lsls	r2, r3, #6
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	041b      	lsls	r3, r3, #16
 800b46e:	431a      	orrs	r2, r3
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	061b      	lsls	r3, r3, #24
 800b474:	431a      	orrs	r2, r3
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	071b      	lsls	r3, r3, #28
 800b47c:	4957      	ldr	r1, [pc, #348]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d004      	beq.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b498:	d00a      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d02e      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b4ae:	d129      	bne.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b4b0:	4b4a      	ldr	r3, [pc, #296]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4b6:	0c1b      	lsrs	r3, r3, #16
 800b4b8:	f003 0303 	and.w	r3, r3, #3
 800b4bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b4be:	4b47      	ldr	r3, [pc, #284]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4c4:	0f1b      	lsrs	r3, r3, #28
 800b4c6:	f003 0307 	and.w	r3, r3, #7
 800b4ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	019a      	lsls	r2, r3, #6
 800b4d2:	693b      	ldr	r3, [r7, #16]
 800b4d4:	041b      	lsls	r3, r3, #16
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	68db      	ldr	r3, [r3, #12]
 800b4dc:	061b      	lsls	r3, r3, #24
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	071b      	lsls	r3, r3, #28
 800b4e4:	493d      	ldr	r1, [pc, #244]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b4ec:	4b3b      	ldr	r3, [pc, #236]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4f2:	f023 021f 	bic.w	r2, r3, #31
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	4937      	ldr	r1, [pc, #220]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d01d      	beq.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b510:	4b32      	ldr	r3, [pc, #200]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b512:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b516:	0e1b      	lsrs	r3, r3, #24
 800b518:	f003 030f 	and.w	r3, r3, #15
 800b51c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b51e:	4b2f      	ldr	r3, [pc, #188]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b524:	0f1b      	lsrs	r3, r3, #28
 800b526:	f003 0307 	and.w	r3, r3, #7
 800b52a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	019a      	lsls	r2, r3, #6
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	041b      	lsls	r3, r3, #16
 800b538:	431a      	orrs	r2, r3
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	061b      	lsls	r3, r3, #24
 800b53e:	431a      	orrs	r2, r3
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	071b      	lsls	r3, r3, #28
 800b544:	4925      	ldr	r1, [pc, #148]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b546:	4313      	orrs	r3, r2
 800b548:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b554:	2b00      	cmp	r3, #0
 800b556:	d011      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	019a      	lsls	r2, r3, #6
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
 800b562:	041b      	lsls	r3, r3, #16
 800b564:	431a      	orrs	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	061b      	lsls	r3, r3, #24
 800b56c:	431a      	orrs	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	071b      	lsls	r3, r3, #28
 800b574:	4919      	ldr	r1, [pc, #100]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b576:	4313      	orrs	r3, r2
 800b578:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b57c:	4b17      	ldr	r3, [pc, #92]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a16      	ldr	r2, [pc, #88]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b582:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b588:	f7fa fc8e 	bl	8005ea8 <HAL_GetTick>
 800b58c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b58e:	e008      	b.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b590:	f7fa fc8a 	bl	8005ea8 <HAL_GetTick>
 800b594:	4602      	mov	r2, r0
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	1ad3      	subs	r3, r2, r3
 800b59a:	2b64      	cmp	r3, #100	@ 0x64
 800b59c:	d901      	bls.n	800b5a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	e0d7      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b5a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d0f0      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b5ae:	69bb      	ldr	r3, [r7, #24]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	f040 80cd 	bne.w	800b750 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b5b6:	4b09      	ldr	r3, [pc, #36]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a08      	ldr	r2, [pc, #32]	@ (800b5dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b5bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5c2:	f7fa fc71 	bl	8005ea8 <HAL_GetTick>
 800b5c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b5c8:	e00a      	b.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b5ca:	f7fa fc6d 	bl	8005ea8 <HAL_GetTick>
 800b5ce:	4602      	mov	r2, r0
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	1ad3      	subs	r3, r2, r3
 800b5d4:	2b64      	cmp	r3, #100	@ 0x64
 800b5d6:	d903      	bls.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e0ba      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b5dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b5e0:	4b5e      	ldr	r3, [pc, #376]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b5ec:	d0ed      	beq.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d009      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d02e      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b612:	2b00      	cmp	r3, #0
 800b614:	d12a      	bne.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b616:	4b51      	ldr	r3, [pc, #324]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b61c:	0c1b      	lsrs	r3, r3, #16
 800b61e:	f003 0303 	and.w	r3, r3, #3
 800b622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b624:	4b4d      	ldr	r3, [pc, #308]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b62a:	0f1b      	lsrs	r3, r3, #28
 800b62c:	f003 0307 	and.w	r3, r3, #7
 800b630:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	695b      	ldr	r3, [r3, #20]
 800b636:	019a      	lsls	r2, r3, #6
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	041b      	lsls	r3, r3, #16
 800b63c:	431a      	orrs	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	061b      	lsls	r3, r3, #24
 800b644:	431a      	orrs	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	071b      	lsls	r3, r3, #28
 800b64a:	4944      	ldr	r1, [pc, #272]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b64c:	4313      	orrs	r3, r2
 800b64e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b652:	4b42      	ldr	r3, [pc, #264]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b654:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b658:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b660:	3b01      	subs	r3, #1
 800b662:	021b      	lsls	r3, r3, #8
 800b664:	493d      	ldr	r1, [pc, #244]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b666:	4313      	orrs	r3, r2
 800b668:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d022      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b67c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b680:	d11d      	bne.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b682:	4b36      	ldr	r3, [pc, #216]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b688:	0e1b      	lsrs	r3, r3, #24
 800b68a:	f003 030f 	and.w	r3, r3, #15
 800b68e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b690:	4b32      	ldr	r3, [pc, #200]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b696:	0f1b      	lsrs	r3, r3, #28
 800b698:	f003 0307 	and.w	r3, r3, #7
 800b69c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	019a      	lsls	r2, r3, #6
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6a1b      	ldr	r3, [r3, #32]
 800b6a8:	041b      	lsls	r3, r3, #16
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	061b      	lsls	r3, r3, #24
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	071b      	lsls	r3, r3, #28
 800b6b6:	4929      	ldr	r1, [pc, #164]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0308 	and.w	r3, r3, #8
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d028      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b6ca:	4b24      	ldr	r3, [pc, #144]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6d0:	0e1b      	lsrs	r3, r3, #24
 800b6d2:	f003 030f 	and.w	r3, r3, #15
 800b6d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b6d8:	4b20      	ldr	r3, [pc, #128]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b6da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6de:	0c1b      	lsrs	r3, r3, #16
 800b6e0:	f003 0303 	and.w	r3, r3, #3
 800b6e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	019a      	lsls	r2, r3, #6
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	041b      	lsls	r3, r3, #16
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	061b      	lsls	r3, r3, #24
 800b6f6:	431a      	orrs	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	69db      	ldr	r3, [r3, #28]
 800b6fc:	071b      	lsls	r3, r3, #28
 800b6fe:	4917      	ldr	r1, [pc, #92]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b700:	4313      	orrs	r3, r2
 800b702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b706:	4b15      	ldr	r3, [pc, #84]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b70c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b714:	4911      	ldr	r1, [pc, #68]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b716:	4313      	orrs	r3, r2
 800b718:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b71c:	4b0f      	ldr	r3, [pc, #60]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a0e      	ldr	r2, [pc, #56]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b728:	f7fa fbbe 	bl	8005ea8 <HAL_GetTick>
 800b72c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b72e:	e008      	b.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b730:	f7fa fbba 	bl	8005ea8 <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	2b64      	cmp	r3, #100	@ 0x64
 800b73c:	d901      	bls.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e007      	b.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b742:	4b06      	ldr	r3, [pc, #24]	@ (800b75c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b74a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b74e:	d1ef      	bne.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3720      	adds	r7, #32
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	40023800 	.word	0x40023800

0800b760 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b768:	2300      	movs	r3, #0
 800b76a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800b774:	2300      	movs	r3, #0
 800b776:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b77e:	f040 808d 	bne.w	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b782:	4b93      	ldr	r3, [pc, #588]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b788:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b790:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b798:	d07c      	beq.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7a0:	d87b      	bhi.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d004      	beq.n	800b7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7ae:	d039      	beq.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b7b0:	e073      	b.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b7b2:	4b87      	ldr	r3, [pc, #540]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d108      	bne.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b7be:	4b84      	ldr	r3, [pc, #528]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7c6:	4a83      	ldr	r2, [pc, #524]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7cc:	613b      	str	r3, [r7, #16]
 800b7ce:	e007      	b.n	800b7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b7d0:	4b7f      	ldr	r3, [pc, #508]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7d8:	4a7f      	ldr	r2, [pc, #508]	@ (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7de:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b7e0:	4b7b      	ldr	r3, [pc, #492]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7e6:	0e1b      	lsrs	r3, r3, #24
 800b7e8:	f003 030f 	and.w	r3, r3, #15
 800b7ec:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b7ee:	4b78      	ldr	r3, [pc, #480]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b7f4:	099b      	lsrs	r3, r3, #6
 800b7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	fb03 f202 	mul.w	r2, r3, r2
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	fbb2 f3f3 	udiv	r3, r2, r3
 800b806:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b808:	4b71      	ldr	r3, [pc, #452]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b80a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b80e:	0a1b      	lsrs	r3, r3, #8
 800b810:	f003 031f 	and.w	r3, r3, #31
 800b814:	3301      	adds	r3, #1
 800b816:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b820:	617b      	str	r3, [r7, #20]
        break;
 800b822:	e03b      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b824:	4b6a      	ldr	r3, [pc, #424]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d108      	bne.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b830:	4b67      	ldr	r3, [pc, #412]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b838:	4a66      	ldr	r2, [pc, #408]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b83a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b83e:	613b      	str	r3, [r7, #16]
 800b840:	e007      	b.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b842:	4b63      	ldr	r3, [pc, #396]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b84a:	4a63      	ldr	r2, [pc, #396]	@ (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b84c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b850:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b852:	4b5f      	ldr	r3, [pc, #380]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b854:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b858:	0e1b      	lsrs	r3, r3, #24
 800b85a:	f003 030f 	and.w	r3, r3, #15
 800b85e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b860:	4b5b      	ldr	r3, [pc, #364]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b862:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b866:	099b      	lsrs	r3, r3, #6
 800b868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	fb03 f202 	mul.w	r2, r3, r2
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	fbb2 f3f3 	udiv	r3, r2, r3
 800b878:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b87a:	4b55      	ldr	r3, [pc, #340]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b880:	f003 031f 	and.w	r3, r3, #31
 800b884:	3301      	adds	r3, #1
 800b886:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b888:	697a      	ldr	r2, [r7, #20]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b890:	617b      	str	r3, [r7, #20]
        break;
 800b892:	e003      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b894:	4b51      	ldr	r3, [pc, #324]	@ (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b896:	617b      	str	r3, [r7, #20]
        break;
 800b898:	e000      	b.n	800b89c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b89a:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8a2:	f040 808d 	bne.w	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b8a6:	4b4a      	ldr	r3, [pc, #296]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8ac:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b8b4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b8bc:	d07c      	beq.n	800b9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b8c4:	d87b      	bhi.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d004      	beq.n	800b8d6 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b8d2:	d039      	beq.n	800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b8d4:	e073      	b.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b8d6:	4b3e      	ldr	r3, [pc, #248]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d108      	bne.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b8e2:	4b3b      	ldr	r3, [pc, #236]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8ea:	4a3a      	ldr	r2, [pc, #232]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f0:	613b      	str	r3, [r7, #16]
 800b8f2:	e007      	b.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b8f4:	4b36      	ldr	r3, [pc, #216]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b8fc:	4a36      	ldr	r2, [pc, #216]	@ (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b8fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b902:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b904:	4b32      	ldr	r3, [pc, #200]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b90a:	0e1b      	lsrs	r3, r3, #24
 800b90c:	f003 030f 	and.w	r3, r3, #15
 800b910:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b912:	4b2f      	ldr	r3, [pc, #188]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b918:	099b      	lsrs	r3, r3, #6
 800b91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	fb03 f202 	mul.w	r2, r3, r2
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	fbb2 f3f3 	udiv	r3, r2, r3
 800b92a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b92c:	4b28      	ldr	r3, [pc, #160]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b92e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b932:	0a1b      	lsrs	r3, r3, #8
 800b934:	f003 031f 	and.w	r3, r3, #31
 800b938:	3301      	adds	r3, #1
 800b93a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	fbb2 f3f3 	udiv	r3, r2, r3
 800b944:	617b      	str	r3, [r7, #20]
        break;
 800b946:	e03b      	b.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b948:	4b21      	ldr	r3, [pc, #132]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b94a:	685b      	ldr	r3, [r3, #4]
 800b94c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b950:	2b00      	cmp	r3, #0
 800b952:	d108      	bne.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b954:	4b1e      	ldr	r3, [pc, #120]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b95c:	4a1d      	ldr	r2, [pc, #116]	@ (800b9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b962:	613b      	str	r3, [r7, #16]
 800b964:	e007      	b.n	800b976 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b966:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b96e:	4a1a      	ldr	r2, [pc, #104]	@ (800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b970:	fbb2 f3f3 	udiv	r3, r2, r3
 800b974:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b976:	4b16      	ldr	r3, [pc, #88]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b978:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b97c:	0e1b      	lsrs	r3, r3, #24
 800b97e:	f003 030f 	and.w	r3, r3, #15
 800b982:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b984:	4b12      	ldr	r3, [pc, #72]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b986:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b98a:	099b      	lsrs	r3, r3, #6
 800b98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	fb03 f202 	mul.w	r2, r3, r2
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b99e:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b9a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b9a4:	f003 031f 	and.w	r3, r3, #31
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b4:	617b      	str	r3, [r7, #20]
        break;
 800b9b6:	e003      	b.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b9b8:	4b08      	ldr	r3, [pc, #32]	@ (800b9dc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b9ba:	617b      	str	r3, [r7, #20]
        break;
 800b9bc:	e000      	b.n	800b9c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b9be:	bf00      	nop
      }
    }
  }

  return frequency;
 800b9c0:	697b      	ldr	r3, [r7, #20]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	371c      	adds	r7, #28
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop
 800b9d0:	40023800 	.word	0x40023800
 800b9d4:	00f42400 	.word	0x00f42400
 800b9d8:	017d7840 	.word	0x017d7840
 800b9dc:	00bb8000 	.word	0x00bb8000

0800b9e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e071      	b.n	800bad6 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	7f5b      	ldrb	r3, [r3, #29]
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d105      	bne.n	800ba08 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f7f8 fe04 	bl	8004610 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2202      	movs	r2, #2
 800ba0c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	f003 0310 	and.w	r3, r3, #16
 800ba18:	2b10      	cmp	r3, #16
 800ba1a:	d053      	beq.n	800bac4 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	22ca      	movs	r2, #202	@ 0xca
 800ba22:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2253      	movs	r2, #83	@ 0x53
 800ba2a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fac7 	bl	800bfc0 <RTC_EnterInitMode>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d12a      	bne.n	800ba92 <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6899      	ldr	r1, [r3, #8]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	4b26      	ldr	r3, [pc, #152]	@ (800bae0 <HAL_RTC_Init+0x100>)
 800ba48:	400b      	ands	r3, r1
 800ba4a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	6899      	ldr	r1, [r3, #8]
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	685a      	ldr	r2, [r3, #4]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	431a      	orrs	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	430a      	orrs	r2, r1
 800ba68:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	68d2      	ldr	r2, [r2, #12]
 800ba72:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6919      	ldr	r1, [r3, #16]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	041a      	lsls	r2, r3, #16
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	430a      	orrs	r2, r1
 800ba86:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fad0 	bl	800c02e <RTC_ExitInitMode>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d110      	bne.n	800baba <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f022 0208 	bic.w	r2, r2, #8
 800baa6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	430a      	orrs	r2, r1
 800bab8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	22ff      	movs	r2, #255	@ 0xff
 800bac0:	625a      	str	r2, [r3, #36]	@ 0x24
 800bac2:	e001      	b.n	800bac8 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d102      	bne.n	800bad4 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}
 800bade:	bf00      	nop
 800bae0:	ff8fffbf 	.word	0xff8fffbf

0800bae4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bae4:	b590      	push	{r4, r7, lr}
 800bae6:	b087      	sub	sp, #28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800baf0:	2300      	movs	r3, #0
 800baf2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	7f1b      	ldrb	r3, [r3, #28]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_RTC_SetTime+0x1c>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e085      	b.n	800bc0c <HAL_RTC_SetTime+0x128>
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2201      	movs	r2, #1
 800bb04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d126      	bne.n	800bb60 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d102      	bne.n	800bb26 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2200      	movs	r2, #0
 800bb24:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f000 faa4 	bl	800c078 <RTC_ByteToBcd2>
 800bb30:	4603      	mov	r3, r0
 800bb32:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	785b      	ldrb	r3, [r3, #1]
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 fa9d 	bl	800c078 <RTC_ByteToBcd2>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bb42:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	789b      	ldrb	r3, [r3, #2]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fa95 	bl	800c078 <RTC_ByteToBcd2>
 800bb4e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bb50:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	78db      	ldrb	r3, [r3, #3]
 800bb58:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	617b      	str	r3, [r7, #20]
 800bb5e:	e018      	b.n	800bb92 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	689b      	ldr	r3, [r3, #8]
 800bb66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d102      	bne.n	800bb74 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2200      	movs	r2, #0
 800bb72:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	785b      	ldrb	r3, [r3, #1]
 800bb7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bb80:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800bb82:	68ba      	ldr	r2, [r7, #8]
 800bb84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bb86:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	78db      	ldrb	r3, [r3, #3]
 800bb8c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	22ca      	movs	r2, #202	@ 0xca
 800bb98:	625a      	str	r2, [r3, #36]	@ 0x24
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	2253      	movs	r2, #83	@ 0x53
 800bba0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bba2:	68f8      	ldr	r0, [r7, #12]
 800bba4:	f000 fa0c 	bl	800bfc0 <RTC_EnterInitMode>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bbac:	7cfb      	ldrb	r3, [r7, #19]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d11e      	bne.n	800bbf0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	6979      	ldr	r1, [r7, #20]
 800bbb8:	4b16      	ldr	r3, [pc, #88]	@ (800bc14 <HAL_RTC_SetTime+0x130>)
 800bbba:	400b      	ands	r3, r1
 800bbbc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	689a      	ldr	r2, [r3, #8]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bbcc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6899      	ldr	r1, [r3, #8]
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	431a      	orrs	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	430a      	orrs	r2, r1
 800bbe4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f000 fa21 	bl	800c02e <RTC_ExitInitMode>
 800bbec:	4603      	mov	r3, r0
 800bbee:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bbf0:	7cfb      	ldrb	r3, [r7, #19]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d102      	bne.n	800bbfc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	22ff      	movs	r2, #255	@ 0xff
 800bc02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	2200      	movs	r2, #0
 800bc08:	771a      	strb	r2, [r3, #28]

  return status;
 800bc0a:	7cfb      	ldrb	r3, [r7, #19]
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	371c      	adds	r7, #28
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd90      	pop	{r4, r7, pc}
 800bc14:	007f7f7f 	.word	0x007f7f7f

0800bc18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b087      	sub	sp, #28
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bc24:	2300      	movs	r3, #0
 800bc26:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	7f1b      	ldrb	r3, [r3, #28]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d101      	bne.n	800bc34 <HAL_RTC_SetDate+0x1c>
 800bc30:	2302      	movs	r3, #2
 800bc32:	e06f      	b.n	800bd14 <HAL_RTC_SetDate+0xfc>
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2201      	movs	r2, #1
 800bc38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10e      	bne.n	800bc64 <HAL_RTC_SetDate+0x4c>
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	785b      	ldrb	r3, [r3, #1]
 800bc4a:	f003 0310 	and.w	r3, r3, #16
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d008      	beq.n	800bc64 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	785b      	ldrb	r3, [r3, #1]
 800bc56:	f023 0310 	bic.w	r3, r3, #16
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	330a      	adds	r3, #10
 800bc5e:	b2da      	uxtb	r2, r3
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d11c      	bne.n	800bca4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	78db      	ldrb	r3, [r3, #3]
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f000 fa02 	bl	800c078 <RTC_ByteToBcd2>
 800bc74:	4603      	mov	r3, r0
 800bc76:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	785b      	ldrb	r3, [r3, #1]
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f000 f9fb 	bl	800c078 <RTC_ByteToBcd2>
 800bc82:	4603      	mov	r3, r0
 800bc84:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bc86:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	789b      	ldrb	r3, [r3, #2]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 f9f3 	bl	800c078 <RTC_ByteToBcd2>
 800bc92:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bc94:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	617b      	str	r3, [r7, #20]
 800bca2:	e00e      	b.n	800bcc2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	78db      	ldrb	r3, [r3, #3]
 800bca8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	785b      	ldrb	r3, [r3, #1]
 800bcae:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bcb0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800bcb2:	68ba      	ldr	r2, [r7, #8]
 800bcb4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bcb6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	22ca      	movs	r2, #202	@ 0xca
 800bcc8:	625a      	str	r2, [r3, #36]	@ 0x24
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2253      	movs	r2, #83	@ 0x53
 800bcd0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bcd2:	68f8      	ldr	r0, [r7, #12]
 800bcd4:	f000 f974 	bl	800bfc0 <RTC_EnterInitMode>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bcdc:	7cfb      	ldrb	r3, [r7, #19]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	6979      	ldr	r1, [r7, #20]
 800bce8:	4b0c      	ldr	r3, [pc, #48]	@ (800bd1c <HAL_RTC_SetDate+0x104>)
 800bcea:	400b      	ands	r3, r1
 800bcec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 f99d 	bl	800c02e <RTC_ExitInitMode>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bcf8:	7cfb      	ldrb	r3, [r7, #19]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d102      	bne.n	800bd04 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2201      	movs	r2, #1
 800bd02:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	22ff      	movs	r2, #255	@ 0xff
 800bd0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	771a      	strb	r2, [r3, #28]

  return status;
 800bd12:	7cfb      	ldrb	r3, [r7, #19]
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	371c      	adds	r7, #28
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd90      	pop	{r4, r7, pc}
 800bd1c:	00ffff3f 	.word	0x00ffff3f

0800bd20 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800bd20:	b590      	push	{r4, r7, lr}
 800bd22:	b089      	sub	sp, #36	@ 0x24
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800bd30:	2300      	movs	r3, #0
 800bd32:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800bd34:	2300      	movs	r3, #0
 800bd36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	7f1b      	ldrb	r3, [r3, #28]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <HAL_RTC_SetAlarm+0x24>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e113      	b.n	800bf6c <HAL_RTC_SetAlarm+0x24c>
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2201      	movs	r2, #1
 800bd48:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d137      	bne.n	800bdc6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d102      	bne.n	800bd6a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2200      	movs	r2, #0
 800bd68:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f000 f982 	bl	800c078 <RTC_ByteToBcd2>
 800bd74:	4603      	mov	r3, r0
 800bd76:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	785b      	ldrb	r3, [r3, #1]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 f97b 	bl	800c078 <RTC_ByteToBcd2>
 800bd82:	4603      	mov	r3, r0
 800bd84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bd86:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	789b      	ldrb	r3, [r3, #2]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f000 f973 	bl	800c078 <RTC_ByteToBcd2>
 800bd92:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800bd94:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	78db      	ldrb	r3, [r3, #3]
 800bd9c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800bd9e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 f965 	bl	800c078 <RTC_ByteToBcd2>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800bdb2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800bdba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	61fb      	str	r3, [r7, #28]
 800bdc4:	e023      	b.n	800be0e <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d102      	bne.n	800bdda <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	785b      	ldrb	r3, [r3, #1]
 800bde4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800bde6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bde8:	68ba      	ldr	r2, [r7, #8]
 800bdea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800bdec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	78db      	ldrb	r3, [r3, #3]
 800bdf2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800bdf4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bdfc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800bdfe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800be04:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800be0a:	4313      	orrs	r3, r2
 800be0c:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800be16:	4313      	orrs	r3, r2
 800be18:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	22ca      	movs	r2, #202	@ 0xca
 800be20:	625a      	str	r2, [r3, #36]	@ 0x24
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2253      	movs	r2, #83	@ 0x53
 800be28:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be32:	d148      	bne.n	800bec6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	689a      	ldr	r2, [r3, #8]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800be42:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	689a      	ldr	r2, [r3, #8]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800be52:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	b2da      	uxtb	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800be64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be66:	f7fa f81f 	bl	8005ea8 <HAL_GetTick>
 800be6a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800be6c:	e013      	b.n	800be96 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800be6e:	f7fa f81b 	bl	8005ea8 <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	1ad3      	subs	r3, r2, r3
 800be78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be7c:	d90b      	bls.n	800be96 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	22ff      	movs	r2, #255	@ 0xff
 800be84:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	2203      	movs	r2, #3
 800be8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e06a      	b.n	800bf6c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0e4      	beq.n	800be6e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	69fa      	ldr	r2, [r7, #28]
 800beaa:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	697a      	ldr	r2, [r7, #20]
 800beb2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bec2:	609a      	str	r2, [r3, #8]
 800bec4:	e047      	b.n	800bf56 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bed4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bee4:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	b2da      	uxtb	r2, r3
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bef6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bef8:	f7f9 ffd6 	bl	8005ea8 <HAL_GetTick>
 800befc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800befe:	e013      	b.n	800bf28 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf00:	f7f9 ffd2 	bl	8005ea8 <HAL_GetTick>
 800bf04:	4602      	mov	r2, r0
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	1ad3      	subs	r3, r2, r3
 800bf0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf0e:	d90b      	bls.n	800bf28 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	22ff      	movs	r2, #255	@ 0xff
 800bf16:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2203      	movs	r2, #3
 800bf1c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2200      	movs	r2, #0
 800bf22:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bf24:	2303      	movs	r3, #3
 800bf26:	e021      	b.n	800bf6c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	f003 0302 	and.w	r3, r3, #2
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d0e4      	beq.n	800bf00 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	69fa      	ldr	r2, [r7, #28]
 800bf3c:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	689a      	ldr	r2, [r3, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf54:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	22ff      	movs	r2, #255	@ 0xff
 800bf5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2201      	movs	r2, #1
 800bf62:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	3724      	adds	r7, #36	@ 0x24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd90      	pop	{r4, r7, pc}

0800bf74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a0d      	ldr	r2, [pc, #52]	@ (800bfbc <HAL_RTC_WaitForSynchro+0x48>)
 800bf86:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bf88:	f7f9 ff8e 	bl	8005ea8 <HAL_GetTick>
 800bf8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bf8e:	e009      	b.n	800bfa4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf90:	f7f9 ff8a 	bl	8005ea8 <HAL_GetTick>
 800bf94:	4602      	mov	r2, r0
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf9e:	d901      	bls.n	800bfa4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e007      	b.n	800bfb4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	f003 0320 	and.w	r3, r3, #32
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d0ee      	beq.n	800bf90 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800bfb2:	2300      	movs	r3, #0
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	0001ff5f 	.word	0x0001ff5f

0800bfc0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
 800bfd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d122      	bne.n	800c024 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bfec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bfee:	f7f9 ff5b 	bl	8005ea8 <HAL_GetTick>
 800bff2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bff4:	e00c      	b.n	800c010 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bff6:	f7f9 ff57 	bl	8005ea8 <HAL_GetTick>
 800bffa:	4602      	mov	r2, r0
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c004:	d904      	bls.n	800c010 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2204      	movs	r2, #4
 800c00a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <RTC_EnterInitMode+0x64>
 800c01e:	7bfb      	ldrb	r3, [r7, #15]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d1e8      	bne.n	800bff6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c024:	7bfb      	ldrb	r3, [r7, #15]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c036:	2300      	movs	r3, #0
 800c038:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	68da      	ldr	r2, [r3, #12]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c048:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f003 0320 	and.w	r3, r3, #32
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10a      	bne.n	800c06e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7ff ff8b 	bl	800bf74 <HAL_RTC_WaitForSynchro>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2204      	movs	r2, #4
 800c068:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3710      	adds	r7, #16
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	4603      	mov	r3, r0
 800c080:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c082:	2300      	movs	r3, #0
 800c084:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c086:	e005      	b.n	800c094 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3301      	adds	r3, #1
 800c08c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c08e:	79fb      	ldrb	r3, [r7, #7]
 800c090:	3b0a      	subs	r3, #10
 800c092:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c094:	79fb      	ldrb	r3, [r7, #7]
 800c096:	2b09      	cmp	r3, #9
 800c098:	d8f6      	bhi.n	800c088 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	b2db      	uxtb	r3, r3
 800c09e:	011b      	lsls	r3, r3, #4
 800c0a0:	b2da      	uxtb	r2, r3
 800c0a2:	79fb      	ldrb	r3, [r7, #7]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	b2db      	uxtb	r3, r3
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b087      	sub	sp, #28
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	7f1b      	ldrb	r3, [r3, #28]
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d101      	bne.n	800c0d0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	e050      	b.n	800c172 <HAL_RTCEx_SetTimeStamp+0xbe>
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2202      	movs	r2, #2
 800c0da:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 0206 	bic.w	r2, r2, #6
 800c0ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	430a      	orrs	r2, r1
 800c0fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	689a      	ldr	r2, [r3, #8]
 800c102:	4b1f      	ldr	r3, [pc, #124]	@ (800c180 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c104:	4013      	ands	r3, r2
 800c106:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	22ca      	movs	r2, #202	@ 0xca
 800c116:	625a      	str	r2, [r3, #36]	@ 0x24
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2253      	movs	r2, #83	@ 0x53
 800c11e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	697a      	ldr	r2, [r7, #20]
 800c126:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	b2da      	uxtb	r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c138:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	b2da      	uxtb	r2, r3
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c14a:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689a      	ldr	r2, [r3, #8]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c15a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	22ff      	movs	r2, #255	@ 0xff
 800c162:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2201      	movs	r2, #1
 800c168:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2200      	movs	r2, #0
 800c16e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	371c      	adds	r7, #28
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	fffff7f7 	.word	0xfffff7f7

0800c184 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c18c:	2300      	movs	r3, #0
 800c18e:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c190:	2300      	movs	r3, #0
 800c192:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c194:	2300      	movs	r3, #0
 800c196:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e156      	b.n	800c450 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d106      	bne.n	800c1bc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f7f8 fe3e 	bl	8004e38 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f95b 	bl	800c480 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	2b02      	cmp	r3, #2
 800c1d0:	d00c      	beq.n	800c1ec <HAL_SAI_Init+0x68>
 800c1d2:	2b02      	cmp	r3, #2
 800c1d4:	d80d      	bhi.n	800c1f2 <HAL_SAI_Init+0x6e>
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d002      	beq.n	800c1e0 <HAL_SAI_Init+0x5c>
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d003      	beq.n	800c1e6 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c1de:	e008      	b.n	800c1f2 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61fb      	str	r3, [r7, #28]
      break;
 800c1e4:	e006      	b.n	800c1f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c1e6:	2310      	movs	r3, #16
 800c1e8:	61fb      	str	r3, [r7, #28]
      break;
 800c1ea:	e003      	b.n	800c1f4 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c1ec:	2320      	movs	r3, #32
 800c1ee:	61fb      	str	r3, [r7, #28]
      break;
 800c1f0:	e000      	b.n	800c1f4 <HAL_SAI_Init+0x70>
      break;
 800c1f2:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	2b03      	cmp	r3, #3
 800c1fa:	d81e      	bhi.n	800c23a <HAL_SAI_Init+0xb6>
 800c1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c204 <HAL_SAI_Init+0x80>)
 800c1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c202:	bf00      	nop
 800c204:	0800c215 	.word	0x0800c215
 800c208:	0800c21b 	.word	0x0800c21b
 800c20c:	0800c223 	.word	0x0800c223
 800c210:	0800c22b 	.word	0x0800c22b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	617b      	str	r3, [r7, #20]
    }
    break;
 800c218:	e010      	b.n	800c23c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c21a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c21e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c220:	e00c      	b.n	800c23c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c226:	617b      	str	r3, [r7, #20]
    }
    break;
 800c228:	e008      	b.n	800c23c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c22a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c22e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	f043 0301 	orr.w	r3, r3, #1
 800c236:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c238:	e000      	b.n	800c23c <HAL_SAI_Init+0xb8>
    default:
      break;
 800c23a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a85      	ldr	r2, [pc, #532]	@ (800c458 <HAL_SAI_Init+0x2d4>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d004      	beq.n	800c250 <HAL_SAI_Init+0xcc>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a84      	ldr	r2, [pc, #528]	@ (800c45c <HAL_SAI_Init+0x2d8>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d103      	bne.n	800c258 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c250:	4a83      	ldr	r2, [pc, #524]	@ (800c460 <HAL_SAI_Init+0x2dc>)
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	6013      	str	r3, [r2, #0]
 800c256:	e002      	b.n	800c25e <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c258:	4a82      	ldr	r2, [pc, #520]	@ (800c464 <HAL_SAI_Init+0x2e0>)
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	69db      	ldr	r3, [r3, #28]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d04c      	beq.n	800c300 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c266:	2300      	movs	r3, #0
 800c268:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a7a      	ldr	r2, [pc, #488]	@ (800c458 <HAL_SAI_Init+0x2d4>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d004      	beq.n	800c27e <HAL_SAI_Init+0xfa>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a78      	ldr	r2, [pc, #480]	@ (800c45c <HAL_SAI_Init+0x2d8>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d104      	bne.n	800c288 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c27e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c282:	f7ff fa6d 	bl	800b760 <HAL_RCCEx_GetPeriphCLKFreq>
 800c286:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a76      	ldr	r2, [pc, #472]	@ (800c468 <HAL_SAI_Init+0x2e4>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d004      	beq.n	800c29c <HAL_SAI_Init+0x118>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a75      	ldr	r2, [pc, #468]	@ (800c46c <HAL_SAI_Init+0x2e8>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d104      	bne.n	800c2a6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c29c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c2a0:	f7ff fa5e 	bl	800b760 <HAL_RCCEx_GetPeriphCLKFreq>
 800c2a4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c2a6:	693a      	ldr	r2, [r7, #16]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	4413      	add	r3, r2
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	69db      	ldr	r3, [r3, #28]
 800c2b6:	025b      	lsls	r3, r3, #9
 800c2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2bc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	4a6b      	ldr	r2, [pc, #428]	@ (800c470 <HAL_SAI_Init+0x2ec>)
 800c2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c6:	08da      	lsrs	r2, r3, #3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c2cc:	68f9      	ldr	r1, [r7, #12]
 800c2ce:	4b68      	ldr	r3, [pc, #416]	@ (800c470 <HAL_SAI_Init+0x2ec>)
 800c2d0:	fba3 2301 	umull	r2, r3, r3, r1
 800c2d4:	08da      	lsrs	r2, r3, #3
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	4413      	add	r3, r2
 800c2dc:	005b      	lsls	r3, r3, #1
 800c2de:	1aca      	subs	r2, r1, r3
 800c2e0:	2a08      	cmp	r2, #8
 800c2e2:	d904      	bls.n	800c2ee <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6a1b      	ldr	r3, [r3, #32]
 800c2e8:	1c5a      	adds	r2, r3, #1
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2f2:	2b04      	cmp	r3, #4
 800c2f4:	d104      	bne.n	800c300 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	085a      	lsrs	r2, r3, #1
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d003      	beq.n	800c310 <HAL_SAI_Init+0x18c>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d109      	bne.n	800c324 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c314:	2b01      	cmp	r3, #1
 800c316:	d101      	bne.n	800c31c <HAL_SAI_Init+0x198>
 800c318:	2300      	movs	r3, #0
 800c31a:	e001      	b.n	800c320 <HAL_SAI_Init+0x19c>
 800c31c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c320:	61bb      	str	r3, [r7, #24]
 800c322:	e008      	b.n	800c336 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d102      	bne.n	800c332 <HAL_SAI_Init+0x1ae>
 800c32c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c330:	e000      	b.n	800c334 <HAL_SAI_Init+0x1b0>
 800c332:	2300      	movs	r3, #0
 800c334:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	6819      	ldr	r1, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681a      	ldr	r2, [r3, #0]
 800c340:	4b4c      	ldr	r3, [pc, #304]	@ (800c474 <HAL_SAI_Init+0x2f0>)
 800c342:	400b      	ands	r3, r1
 800c344:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	6819      	ldr	r1, [r3, #0]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c354:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c35a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c360:	431a      	orrs	r2, r3
 800c362:	69bb      	ldr	r3, [r7, #24]
 800c364:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c36e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	691b      	ldr	r3, [r3, #16]
 800c374:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c37a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a1b      	ldr	r3, [r3, #32]
 800c380:	051b      	lsls	r3, r3, #20
 800c382:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	430a      	orrs	r2, r1
 800c38a:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	6859      	ldr	r1, [r3, #4]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	4b38      	ldr	r3, [pc, #224]	@ (800c478 <HAL_SAI_Init+0x2f4>)
 800c398:	400b      	ands	r3, r1
 800c39a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	6859      	ldr	r1, [r3, #4]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	699a      	ldr	r2, [r3, #24]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3aa:	431a      	orrs	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	430a      	orrs	r2, r1
 800c3b8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6899      	ldr	r1, [r3, #8]
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	4b2d      	ldr	r3, [pc, #180]	@ (800c47c <HAL_SAI_Init+0x2f8>)
 800c3c6:	400b      	ands	r3, r1
 800c3c8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	6899      	ldr	r1, [r3, #8]
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3d4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c3da:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800c3e0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800c3e6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800c3f0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	430a      	orrs	r2, r1
 800c3f8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68d9      	ldr	r1, [r3, #12]
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800c408:	400b      	ands	r3, r1
 800c40a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	68d9      	ldr	r1, [r3, #12]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c41a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c420:	041b      	lsls	r3, r3, #16
 800c422:	431a      	orrs	r2, r3
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c428:	3b01      	subs	r3, #1
 800c42a:	021b      	lsls	r3, r3, #8
 800c42c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	430a      	orrs	r2, r1
 800c434:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	2200      	movs	r2, #0
 800c43a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3720      	adds	r7, #32
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	40015804 	.word	0x40015804
 800c45c:	40015824 	.word	0x40015824
 800c460:	40015800 	.word	0x40015800
 800c464:	40015c00 	.word	0x40015c00
 800c468:	40015c04 	.word	0x40015c04
 800c46c:	40015c24 	.word	0x40015c24
 800c470:	cccccccd 	.word	0xcccccccd
 800c474:	ff05c010 	.word	0xff05c010
 800c478:	ffff1ff0 	.word	0xffff1ff0
 800c47c:	fff88000 	.word	0xfff88000

0800c480 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800c488:	4b17      	ldr	r3, [pc, #92]	@ (800c4e8 <SAI_Disable+0x68>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a17      	ldr	r2, [pc, #92]	@ (800c4ec <SAI_Disable+0x6c>)
 800c48e:	fba2 2303 	umull	r2, r3, r2, r3
 800c492:	0b1b      	lsrs	r3, r3, #12
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c4aa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	1e5a      	subs	r2, r3, #1
 800c4b0:	60fa      	str	r2, [r7, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d10a      	bne.n	800c4cc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	72fb      	strb	r3, [r7, #11]
      break;
 800c4ca:	e006      	b.n	800c4da <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e8      	bne.n	800c4ac <SAI_Disable+0x2c>

  return status;
 800c4da:	7afb      	ldrb	r3, [r7, #11]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3714      	adds	r7, #20
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	2000001c 	.word	0x2000001c
 800c4ec:	95cbec1b 	.word	0x95cbec1b

0800c4f0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e022      	b.n	800c548 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d105      	bne.n	800c51a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f7f8 f8a9 	bl	800466c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2203      	movs	r2, #3
 800c51e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f814 	bl	800c550 <HAL_SD_InitCard>
 800c528:	4603      	mov	r3, r0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d001      	beq.n	800c532 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	e00a      	b.n	800c548 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2200      	movs	r2, #0
 800c536:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c550:	b5b0      	push	{r4, r5, r7, lr}
 800c552:	b08e      	sub	sp, #56	@ 0x38
 800c554:	af04      	add	r7, sp, #16
 800c556:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c558:	2300      	movs	r3, #0
 800c55a:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c55c:	2300      	movs	r3, #0
 800c55e:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c560:	2300      	movs	r3, #0
 800c562:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c564:	2300      	movs	r3, #0
 800c566:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c568:	2300      	movs	r3, #0
 800c56a:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c56c:	2376      	movs	r3, #118	@ 0x76
 800c56e:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681d      	ldr	r5, [r3, #0]
 800c574:	466c      	mov	r4, sp
 800c576:	f107 0318 	add.w	r3, r7, #24
 800c57a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c57e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c582:	f107 030c 	add.w	r3, r7, #12
 800c586:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c588:	4628      	mov	r0, r5
 800c58a:	f004 f809 	bl	80105a0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	685a      	ldr	r2, [r3, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c59c:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f004 f846 	bl	8010634 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c5b6:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c5b8:	2002      	movs	r0, #2
 800c5ba:	f7f9 fc81 	bl	8005ec0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 ff02 	bl	800d3c8 <SD_PowerON>
 800c5c4:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d00b      	beq.n	800c5e4 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	e02e      	b.n	800c642 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fe21 	bl	800d22c <SD_InitCard>
 800c5ea:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c600:	431a      	orrs	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c606:	2301      	movs	r3, #1
 800c608:	e01b      	b.n	800c642 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c612:	4618      	mov	r0, r3
 800c614:	f004 f8a0 	bl	8010758 <SDMMC_CmdBlockLength>
 800c618:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800c61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00f      	beq.n	800c640 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4a09      	ldr	r2, [pc, #36]	@ (800c64c <HAL_SD_InitCard+0xfc>)
 800c626:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62e:	431a      	orrs	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c63c:	2301      	movs	r3, #1
 800c63e:	e000      	b.n	800c642 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3728      	adds	r7, #40	@ 0x28
 800c646:	46bd      	mov	sp, r7
 800c648:	bdb0      	pop	{r4, r5, r7, pc}
 800c64a:	bf00      	nop
 800c64c:	004005ff 	.word	0x004005ff

0800c650 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b092      	sub	sp, #72	@ 0x48
 800c654:	af00      	add	r7, sp, #0
 800c656:	60f8      	str	r0, [r7, #12]
 800c658:	60b9      	str	r1, [r7, #8]
 800c65a:	607a      	str	r2, [r7, #4]
 800c65c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c65e:	f7f9 fc23 	bl	8005ea8 <HAL_GetTick>
 800c662:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d107      	bne.n	800c682 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c676:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e1bd      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	f040 81b0 	bne.w	800c9f0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c696:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	441a      	add	r2, r3
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d907      	bls.n	800c6b4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6a8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	e1a4      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2203      	movs	r2, #3
 800c6b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d002      	beq.n	800c6d2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ce:	025b      	lsls	r3, r3, #9
 800c6d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	025b      	lsls	r3, r3, #9
 800c6dc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c6de:	2390      	movs	r3, #144	@ 0x90
 800c6e0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f107 0214 	add.w	r2, r7, #20
 800c6f6:	4611      	mov	r1, r2
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f004 f801 	bl	8010700 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d90a      	bls.n	800c71a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2202      	movs	r2, #2
 800c708:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c710:	4618      	mov	r0, r3
 800c712:	f004 f865 	bl	80107e0 <SDMMC_CmdReadMultiBlock>
 800c716:	6478      	str	r0, [r7, #68]	@ 0x44
 800c718:	e009      	b.n	800c72e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2201      	movs	r2, #1
 800c71e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c726:	4618      	mov	r0, r3
 800c728:	f004 f838 	bl	801079c <SDMMC_CmdReadSingleBlock>
 800c72c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c72e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c730:	2b00      	cmp	r3, #0
 800c732:	d012      	beq.n	800c75a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	4a7a      	ldr	r2, [pc, #488]	@ (800c924 <HAL_SD_ReadBlocks+0x2d4>)
 800c73a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c742:	431a      	orrs	r2, r3
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c756:	2301      	movs	r3, #1
 800c758:	e151      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c75e:	e061      	b.n	800c824 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d03c      	beq.n	800c7e8 <HAL_SD_ReadBlocks+0x198>
 800c76e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c770:	2b00      	cmp	r3, #0
 800c772:	d039      	beq.n	800c7e8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c774:	2300      	movs	r3, #0
 800c776:	643b      	str	r3, [r7, #64]	@ 0x40
 800c778:	e033      	b.n	800c7e2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4618      	mov	r0, r3
 800c780:	f003 ff3a 	bl	80105f8 <SDMMC_ReadFIFO>
 800c784:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c78c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c78e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c790:	3301      	adds	r3, #1
 800c792:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c796:	3b01      	subs	r3, #1
 800c798:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c79a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c79c:	0a1b      	lsrs	r3, r3, #8
 800c79e:	b2da      	uxtb	r2, r3
 800c7a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c7a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c7aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b2:	0c1b      	lsrs	r3, r3, #16
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7bc:	3301      	adds	r3, #1
 800c7be:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c7c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c8:	0e1b      	lsrs	r3, r3, #24
 800c7ca:	b2da      	uxtb	r2, r3
 800c7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ce:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c7d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c7d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800c7dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7de:	3301      	adds	r3, #1
 800c7e0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c7e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c7e4:	2b07      	cmp	r3, #7
 800c7e6:	d9c8      	bls.n	800c77a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c7e8:	f7f9 fb5e 	bl	8005ea8 <HAL_GetTick>
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d902      	bls.n	800c7fe <HAL_SD_ReadBlocks+0x1ae>
 800c7f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d112      	bne.n	800c824 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4a48      	ldr	r2, [pc, #288]	@ (800c924 <HAL_SD_ReadBlocks+0x2d4>)
 800c804:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c80a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2201      	movs	r2, #1
 800c816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c820:	2303      	movs	r3, #3
 800c822:	e0ec      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c82a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d096      	beq.n	800c760 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d022      	beq.n	800c886 <HAL_SD_ReadBlocks+0x236>
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	2b01      	cmp	r3, #1
 800c844:	d91f      	bls.n	800c886 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c84a:	2b03      	cmp	r3, #3
 800c84c:	d01b      	beq.n	800c886 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4618      	mov	r0, r3
 800c854:	f004 f82a 	bl	80108ac <SDMMC_CmdStopTransfer>
 800c858:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c85a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d012      	beq.n	800c886 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a2f      	ldr	r2, [pc, #188]	@ (800c924 <HAL_SD_ReadBlocks+0x2d4>)
 800c866:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c86c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c86e:	431a      	orrs	r2, r3
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2201      	movs	r2, #1
 800c878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2200      	movs	r2, #0
 800c880:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e0bb      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c88c:	f003 0308 	and.w	r3, r3, #8
 800c890:	2b00      	cmp	r3, #0
 800c892:	d012      	beq.n	800c8ba <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a22      	ldr	r2, [pc, #136]	@ (800c924 <HAL_SD_ReadBlocks+0x2d4>)
 800c89a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8a0:	f043 0208 	orr.w	r2, r3, #8
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	e0a1      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8c0:	f003 0302 	and.w	r3, r3, #2
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d012      	beq.n	800c8ee <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a15      	ldr	r2, [pc, #84]	@ (800c924 <HAL_SD_ReadBlocks+0x2d4>)
 800c8ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8d4:	f043 0202 	orr.w	r2, r3, #2
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	e087      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8f4:	f003 0320 	and.w	r3, r3, #32
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d064      	beq.n	800c9c6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a08      	ldr	r2, [pc, #32]	@ (800c924 <HAL_SD_ReadBlocks+0x2d4>)
 800c902:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c908:	f043 0220 	orr.w	r2, r3, #32
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	2200      	movs	r2, #0
 800c91c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e06d      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
 800c922:	bf00      	nop
 800c924:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f003 fe63 	bl	80105f8 <SDMMC_ReadFIFO>
 800c932:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800c934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c936:	b2da      	uxtb	r2, r3
 800c938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c93a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c93c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c93e:	3301      	adds	r3, #1
 800c940:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c944:	3b01      	subs	r3, #1
 800c946:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94a:	0a1b      	lsrs	r3, r3, #8
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c950:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c954:	3301      	adds	r3, #1
 800c956:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c95a:	3b01      	subs	r3, #1
 800c95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c960:	0c1b      	lsrs	r3, r3, #16
 800c962:	b2da      	uxtb	r2, r3
 800c964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c966:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c96a:	3301      	adds	r3, #1
 800c96c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c970:	3b01      	subs	r3, #1
 800c972:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c976:	0e1b      	lsrs	r3, r3, #24
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c97c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c980:	3301      	adds	r3, #1
 800c982:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c986:	3b01      	subs	r3, #1
 800c988:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c98a:	f7f9 fa8d 	bl	8005ea8 <HAL_GetTick>
 800c98e:	4602      	mov	r2, r0
 800c990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c992:	1ad3      	subs	r3, r2, r3
 800c994:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c996:	429a      	cmp	r2, r3
 800c998:	d902      	bls.n	800c9a0 <HAL_SD_ReadBlocks+0x350>
 800c99a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d112      	bne.n	800c9c6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	4a18      	ldr	r2, [pc, #96]	@ (800ca08 <HAL_SD_ReadBlocks+0x3b8>)
 800c9a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e01b      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d002      	beq.n	800c9da <HAL_SD_ReadBlocks+0x38a>
 800c9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d1a6      	bne.n	800c928 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c9e2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e006      	b.n	800c9fe <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
  }
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3748      	adds	r7, #72	@ 0x48
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	004005ff 	.word	0x004005ff

0800ca0c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b092      	sub	sp, #72	@ 0x48
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
 800ca18:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ca1a:	f7f9 fa45 	bl	8005ea8 <HAL_GetTick>
 800ca1e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d107      	bne.n	800ca3e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca32:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e165      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	f040 8158 	bne.w	800ccfc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	441a      	add	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d907      	bls.n	800ca70 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca64:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e14c      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2203      	movs	r2, #3
 800ca74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d002      	beq.n	800ca8e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800ca88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca8a:	025b      	lsls	r3, r3, #9
 800ca8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca92:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	025b      	lsls	r3, r3, #9
 800ca98:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ca9a:	2390      	movs	r3, #144	@ 0x90
 800ca9c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800caa6:	2301      	movs	r3, #1
 800caa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f107 0218 	add.w	r2, r7, #24
 800cab2:	4611      	mov	r1, r2
 800cab4:	4618      	mov	r0, r3
 800cab6:	f003 fe23 	bl	8010700 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d90a      	bls.n	800cad6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	2220      	movs	r2, #32
 800cac4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cacc:	4618      	mov	r0, r3
 800cace:	f003 fecb 	bl	8010868 <SDMMC_CmdWriteMultiBlock>
 800cad2:	6478      	str	r0, [r7, #68]	@ 0x44
 800cad4:	e009      	b.n	800caea <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2210      	movs	r2, #16
 800cada:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cae2:	4618      	mov	r0, r3
 800cae4:	f003 fe9e 	bl	8010824 <SDMMC_CmdWriteSingleBlock>
 800cae8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800caea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caec:	2b00      	cmp	r3, #0
 800caee:	d012      	beq.n	800cb16 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	4a87      	ldr	r2, [pc, #540]	@ (800cd14 <HAL_SD_WriteBlocks+0x308>)
 800caf6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cafc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cafe:	431a      	orrs	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e0f9      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cb1a:	e065      	b.n	800cbe8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d040      	beq.n	800cbac <HAL_SD_WriteBlocks+0x1a0>
 800cb2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d03d      	beq.n	800cbac <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cb30:	2300      	movs	r3, #0
 800cb32:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb34:	e037      	b.n	800cba6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cb36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb3e:	3301      	adds	r3, #1
 800cb40:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb44:	3b01      	subs	r3, #1
 800cb46:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	021a      	lsls	r2, r3, #8
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cb54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb56:	3301      	adds	r3, #1
 800cb58:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cb5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	041a      	lsls	r2, r3, #16
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb6e:	3301      	adds	r3, #1
 800cb70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cb72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb74:	3b01      	subs	r3, #1
 800cb76:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	061a      	lsls	r2, r3, #24
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cb84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb86:	3301      	adds	r3, #1
 800cb88:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cb8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f107 0214 	add.w	r2, r7, #20
 800cb98:	4611      	mov	r1, r2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f003 fd39 	bl	8010612 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800cba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cba2:	3301      	adds	r3, #1
 800cba4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cba8:	2b07      	cmp	r3, #7
 800cbaa:	d9c4      	bls.n	800cb36 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cbac:	f7f9 f97c 	bl	8005ea8 <HAL_GetTick>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d902      	bls.n	800cbc2 <HAL_SD_WriteBlocks+0x1b6>
 800cbbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d112      	bne.n	800cbe8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4a53      	ldr	r2, [pc, #332]	@ (800cd14 <HAL_SD_WriteBlocks+0x308>)
 800cbc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbd0:	431a      	orrs	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e090      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbee:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d092      	beq.n	800cb1c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d022      	beq.n	800cc4a <HAL_SD_WriteBlocks+0x23e>
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	2b01      	cmp	r3, #1
 800cc08:	d91f      	bls.n	800cc4a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc0e:	2b03      	cmp	r3, #3
 800cc10:	d01b      	beq.n	800cc4a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f003 fe48 	bl	80108ac <SDMMC_CmdStopTransfer>
 800cc1c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cc1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d012      	beq.n	800cc4a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a3a      	ldr	r2, [pc, #232]	@ (800cd14 <HAL_SD_WriteBlocks+0x308>)
 800cc2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc32:	431a      	orrs	r2, r3
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800cc46:	2301      	movs	r3, #1
 800cc48:	e05f      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d012      	beq.n	800cc7e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	4a2d      	ldr	r2, [pc, #180]	@ (800cd14 <HAL_SD_WriteBlocks+0x308>)
 800cc5e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc64:	f043 0208 	orr.w	r2, r3, #8
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e045      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc84:	f003 0302 	and.w	r3, r3, #2
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d012      	beq.n	800ccb2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	4a20      	ldr	r2, [pc, #128]	@ (800cd14 <HAL_SD_WriteBlocks+0x308>)
 800cc92:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc98:	f043 0202 	orr.w	r2, r3, #2
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	e02b      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccb8:	f003 0310 	and.w	r3, r3, #16
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d012      	beq.n	800cce6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a13      	ldr	r2, [pc, #76]	@ (800cd14 <HAL_SD_WriteBlocks+0x308>)
 800ccc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cccc:	f043 0210 	orr.w	r2, r3, #16
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	e011      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ccee:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	e006      	b.n	800cd0a <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd00:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cd08:	2301      	movs	r3, #1
  }
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3748      	adds	r7, #72	@ 0x48
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	004005ff 	.word	0x004005ff

0800cd18 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd26:	0f9b      	lsrs	r3, r3, #30
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd32:	0e9b      	lsrs	r3, r3, #26
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	f003 030f 	and.w	r3, r3, #15
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd44:	0e1b      	lsrs	r3, r3, #24
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	f003 0303 	and.w	r3, r3, #3
 800cd4c:	b2da      	uxtb	r2, r3
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd56:	0c1b      	lsrs	r3, r3, #16
 800cd58:	b2da      	uxtb	r2, r3
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd62:	0a1b      	lsrs	r3, r3, #8
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd6e:	b2da      	uxtb	r2, r3
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd78:	0d1b      	lsrs	r3, r3, #20
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd84:	0c1b      	lsrs	r3, r3, #16
 800cd86:	b2db      	uxtb	r3, r3
 800cd88:	f003 030f 	and.w	r3, r3, #15
 800cd8c:	b2da      	uxtb	r2, r3
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cd96:	0bdb      	lsrs	r3, r3, #15
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	f003 0301 	and.w	r3, r3, #1
 800cd9e:	b2da      	uxtb	r2, r3
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cda8:	0b9b      	lsrs	r3, r3, #14
 800cdaa:	b2db      	uxtb	r3, r3
 800cdac:	f003 0301 	and.w	r3, r3, #1
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdba:	0b5b      	lsrs	r3, r3, #13
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdcc:	0b1b      	lsrs	r3, r3, #12
 800cdce:	b2db      	uxtb	r3, r3
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	b2da      	uxtb	r2, r3
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	2200      	movs	r2, #0
 800cdde:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d163      	bne.n	800ceb0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cdec:	009a      	lsls	r2, r3, #2
 800cdee:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	687a      	ldr	r2, [r7, #4]
 800cdf6:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800cdf8:	0f92      	lsrs	r2, r2, #30
 800cdfa:	431a      	orrs	r2, r3
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce04:	0edb      	lsrs	r3, r3, #27
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	f003 0307 	and.w	r3, r3, #7
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce16:	0e1b      	lsrs	r3, r3, #24
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	f003 0307 	and.w	r3, r3, #7
 800ce1e:	b2da      	uxtb	r2, r3
 800ce20:	683b      	ldr	r3, [r7, #0]
 800ce22:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce28:	0d5b      	lsrs	r3, r3, #21
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	f003 0307 	and.w	r3, r3, #7
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce3a:	0c9b      	lsrs	r3, r3, #18
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	f003 0307 	and.w	r3, r3, #7
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce4c:	0bdb      	lsrs	r3, r3, #15
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	f003 0307 	and.w	r3, r3, #7
 800ce54:	b2da      	uxtb	r2, r3
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	1c5a      	adds	r2, r3, #1
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	7e1b      	ldrb	r3, [r3, #24]
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	f003 0307 	and.w	r3, r3, #7
 800ce6e:	3302      	adds	r3, #2
 800ce70:	2201      	movs	r2, #1
 800ce72:	fa02 f303 	lsl.w	r3, r2, r3
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800ce7a:	fb03 f202 	mul.w	r2, r3, r2
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	7a1b      	ldrb	r3, [r3, #8]
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	f003 030f 	and.w	r3, r3, #15
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	409a      	lsls	r2, r3
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800ce9c:	0a52      	lsrs	r2, r2, #9
 800ce9e:	fb03 f202 	mul.w	r2, r3, r2
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ceac:	661a      	str	r2, [r3, #96]	@ 0x60
 800ceae:	e031      	b.n	800cf14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d11d      	bne.n	800cef4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cebc:	041b      	lsls	r3, r3, #16
 800cebe:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cec6:	0c1b      	lsrs	r3, r3, #16
 800cec8:	431a      	orrs	r2, r3
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	3301      	adds	r3, #1
 800ced4:	029a      	lsls	r2, r3, #10
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cee8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	661a      	str	r2, [r3, #96]	@ 0x60
 800cef2:	e00f      	b.n	800cf14 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4a58      	ldr	r2, [pc, #352]	@ (800d05c <HAL_SD_GetCardCSD+0x344>)
 800cefa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf00:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e09d      	b.n	800d050 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf18:	0b9b      	lsrs	r3, r3, #14
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf2a:	09db      	lsrs	r3, r3, #7
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf42:	b2da      	uxtb	r2, r3
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf4c:	0fdb      	lsrs	r3, r3, #31
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf58:	0f5b      	lsrs	r3, r3, #29
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	f003 0303 	and.w	r3, r3, #3
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf6a:	0e9b      	lsrs	r3, r3, #26
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	f003 0307 	and.w	r3, r3, #7
 800cf72:	b2da      	uxtb	r2, r3
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf7c:	0d9b      	lsrs	r3, r3, #22
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	f003 030f 	and.w	r3, r3, #15
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf8e:	0d5b      	lsrs	r3, r3, #21
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfaa:	0c1b      	lsrs	r3, r3, #16
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	f003 0301 	and.w	r3, r3, #1
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfbe:	0bdb      	lsrs	r3, r3, #15
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	b2da      	uxtb	r2, r3
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfd2:	0b9b      	lsrs	r3, r3, #14
 800cfd4:	b2db      	uxtb	r3, r3
 800cfd6:	f003 0301 	and.w	r3, r3, #1
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfe6:	0b5b      	lsrs	r3, r3, #13
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	f003 0301 	and.w	r3, r3, #1
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cffa:	0b1b      	lsrs	r3, r3, #12
 800cffc:	b2db      	uxtb	r3, r3
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	b2da      	uxtb	r2, r3
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d00e:	0a9b      	lsrs	r3, r3, #10
 800d010:	b2db      	uxtb	r3, r3
 800d012:	f003 0303 	and.w	r3, r3, #3
 800d016:	b2da      	uxtb	r2, r3
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d022:	0a1b      	lsrs	r3, r3, #8
 800d024:	b2db      	uxtb	r3, r3
 800d026:	f003 0303 	and.w	r3, r3, #3
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d036:	085b      	lsrs	r3, r3, #1
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d03e:	b2da      	uxtb	r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	2201      	movs	r2, #1
 800d04a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	004005ff 	.word	0x004005ff

0800d060 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d0b8:	b5b0      	push	{r4, r5, r7, lr}
 800d0ba:	b08e      	sub	sp, #56	@ 0x38
 800d0bc:	af04      	add	r7, sp, #16
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2203      	movs	r2, #3
 800d0cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d02e      	beq.n	800d136 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0de:	d106      	bne.n	800d0ee <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	639a      	str	r2, [r3, #56]	@ 0x38
 800d0ec:	e029      	b.n	800d142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d0f4:	d10a      	bne.n	800d10c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fa1c 	bl	800d534 <SD_WideBus_Enable>
 800d0fc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d102:	6a3b      	ldr	r3, [r7, #32]
 800d104:	431a      	orrs	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	639a      	str	r2, [r3, #56]	@ 0x38
 800d10a:	e01a      	b.n	800d142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10a      	bne.n	800d128 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d112:	6878      	ldr	r0, [r7, #4]
 800d114:	f000 fa59 	bl	800d5ca <SD_WideBus_Disable>
 800d118:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d11e:	6a3b      	ldr	r3, [r7, #32]
 800d120:	431a      	orrs	r2, r3
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	639a      	str	r2, [r3, #56]	@ 0x38
 800d126:	e00c      	b.n	800d142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d12c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	639a      	str	r2, [r3, #56]	@ 0x38
 800d134:	e005      	b.n	800d142 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d13a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00b      	beq.n	800d162 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	4a26      	ldr	r2, [pc, #152]	@ (800d1e8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d150:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2201      	movs	r2, #1
 800d156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d160:	e01f      	b.n	800d1a2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	68db      	ldr	r3, [r3, #12]
 800d172:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	695b      	ldr	r3, [r3, #20]
 800d17c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	699b      	ldr	r3, [r3, #24]
 800d182:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681d      	ldr	r5, [r3, #0]
 800d188:	466c      	mov	r4, sp
 800d18a:	f107 0314 	add.w	r3, r7, #20
 800d18e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d192:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d196:	f107 0308 	add.w	r3, r7, #8
 800d19a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d19c:	4628      	mov	r0, r5
 800d19e:	f003 f9ff 	bl	80105a0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	f003 fad4 	bl	8010758 <SDMMC_CmdBlockLength>
 800d1b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00c      	beq.n	800d1d2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a0a      	ldr	r2, [pc, #40]	@ (800d1e8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d1be:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1c4:	6a3b      	ldr	r3, [r7, #32]
 800d1c6:	431a      	orrs	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800d1da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3728      	adds	r7, #40	@ 0x28
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bdb0      	pop	{r4, r5, r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	004005ff 	.word	0x004005ff

0800d1ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d1f8:	f107 030c 	add.w	r3, r7, #12
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f970 	bl	800d4e4 <SD_SendStatus>
 800d204:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d005      	beq.n	800d218 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	431a      	orrs	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	0a5b      	lsrs	r3, r3, #9
 800d21c:	f003 030f 	and.w	r3, r3, #15
 800d220:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d222:	693b      	ldr	r3, [r7, #16]
}
 800d224:	4618      	mov	r0, r3
 800d226:	3718      	adds	r7, #24
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d22c:	b5b0      	push	{r4, r5, r7, lr}
 800d22e:	b094      	sub	sp, #80	@ 0x50
 800d230:	af04      	add	r7, sp, #16
 800d232:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d234:	2301      	movs	r3, #1
 800d236:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4618      	mov	r0, r3
 800d23e:	f003 fa07 	bl	8010650 <SDMMC_GetPowerState>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	d102      	bne.n	800d24e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d248:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d24c:	e0b8      	b.n	800d3c0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d252:	2b03      	cmp	r3, #3
 800d254:	d02f      	beq.n	800d2b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4618      	mov	r0, r3
 800d25c:	f003 fc31 	bl	8010ac2 <SDMMC_CmdSendCID>
 800d260:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d262:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d264:	2b00      	cmp	r3, #0
 800d266:	d001      	beq.n	800d26c <SD_InitCard+0x40>
    {
      return errorstate;
 800d268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d26a:	e0a9      	b.n	800d3c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	2100      	movs	r1, #0
 800d272:	4618      	mov	r0, r3
 800d274:	f003 fa31 	bl	80106da <SDMMC_GetResponse>
 800d278:	4602      	mov	r2, r0
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2104      	movs	r1, #4
 800d284:	4618      	mov	r0, r3
 800d286:	f003 fa28 	bl	80106da <SDMMC_GetResponse>
 800d28a:	4602      	mov	r2, r0
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2108      	movs	r1, #8
 800d296:	4618      	mov	r0, r3
 800d298:	f003 fa1f 	bl	80106da <SDMMC_GetResponse>
 800d29c:	4602      	mov	r2, r0
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	210c      	movs	r1, #12
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f003 fa16 	bl	80106da <SDMMC_GetResponse>
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2ba:	2b03      	cmp	r3, #3
 800d2bc:	d00d      	beq.n	800d2da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f107 020e 	add.w	r2, r7, #14
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f003 fc37 	bl	8010b3c <SDMMC_CmdSetRelAdd>
 800d2ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <SD_InitCard+0xae>
    {
      return errorstate;
 800d2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2d8:	e072      	b.n	800d3c0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2de:	2b03      	cmp	r3, #3
 800d2e0:	d036      	beq.n	800d350 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d2e2:	89fb      	ldrh	r3, [r7, #14]
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681a      	ldr	r2, [r3, #0]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2f2:	041b      	lsls	r3, r3, #16
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	f003 fc01 	bl	8010afe <SDMMC_CmdSendCSD>
 800d2fc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d300:	2b00      	cmp	r3, #0
 800d302:	d001      	beq.n	800d308 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d306:	e05b      	b.n	800d3c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2100      	movs	r1, #0
 800d30e:	4618      	mov	r0, r3
 800d310:	f003 f9e3 	bl	80106da <SDMMC_GetResponse>
 800d314:	4602      	mov	r2, r0
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2104      	movs	r1, #4
 800d320:	4618      	mov	r0, r3
 800d322:	f003 f9da 	bl	80106da <SDMMC_GetResponse>
 800d326:	4602      	mov	r2, r0
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	2108      	movs	r1, #8
 800d332:	4618      	mov	r0, r3
 800d334:	f003 f9d1 	bl	80106da <SDMMC_GetResponse>
 800d338:	4602      	mov	r2, r0
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	210c      	movs	r1, #12
 800d344:	4618      	mov	r0, r3
 800d346:	f003 f9c8 	bl	80106da <SDMMC_GetResponse>
 800d34a:	4602      	mov	r2, r0
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2104      	movs	r1, #4
 800d356:	4618      	mov	r0, r3
 800d358:	f003 f9bf 	bl	80106da <SDMMC_GetResponse>
 800d35c:	4603      	mov	r3, r0
 800d35e:	0d1a      	lsrs	r2, r3, #20
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d364:	f107 0310 	add.w	r3, r7, #16
 800d368:	4619      	mov	r1, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff fcd4 	bl	800cd18 <HAL_SD_GetCardCSD>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d002      	beq.n	800d37c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d376:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d37a:	e021      	b.n	800d3c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6819      	ldr	r1, [r3, #0]
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d384:	041b      	lsls	r3, r3, #16
 800d386:	2200      	movs	r2, #0
 800d388:	461c      	mov	r4, r3
 800d38a:	4615      	mov	r5, r2
 800d38c:	4622      	mov	r2, r4
 800d38e:	462b      	mov	r3, r5
 800d390:	4608      	mov	r0, r1
 800d392:	f003 faad 	bl	80108f0 <SDMMC_CmdSelDesel>
 800d396:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d001      	beq.n	800d3a2 <SD_InitCard+0x176>
  {
    return errorstate;
 800d39e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3a0:	e00e      	b.n	800d3c0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681d      	ldr	r5, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	466c      	mov	r4, sp
 800d3aa:	f103 0210 	add.w	r2, r3, #16
 800d3ae:	ca07      	ldmia	r2, {r0, r1, r2}
 800d3b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f003 f8f1 	bl	80105a0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3740      	adds	r7, #64	@ 0x40
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bdb0      	pop	{r4, r5, r7, pc}

0800d3c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	617b      	str	r3, [r7, #20]
 800d3d8:	2300      	movs	r3, #0
 800d3da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f003 faa8 	bl	8010936 <SDMMC_CmdGoIdleState>
 800d3e6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	e072      	b.n	800d4d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f003 fabb 	bl	8010972 <SDMMC_CmdOperCond>
 800d3fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00d      	beq.n	800d420 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2200      	movs	r2, #0
 800d408:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	4618      	mov	r0, r3
 800d410:	f003 fa91 	bl	8010936 <SDMMC_CmdGoIdleState>
 800d414:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d004      	beq.n	800d426 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	e05b      	b.n	800d4d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d137      	bne.n	800d49e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2100      	movs	r1, #0
 800d434:	4618      	mov	r0, r3
 800d436:	f003 fabb 	bl	80109b0 <SDMMC_CmdAppCommand>
 800d43a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d02d      	beq.n	800d49e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d442:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d446:	e047      	b.n	800d4d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2100      	movs	r1, #0
 800d44e:	4618      	mov	r0, r3
 800d450:	f003 faae 	bl	80109b0 <SDMMC_CmdAppCommand>
 800d454:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <SD_PowerON+0x98>
    {
      return errorstate;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	e03b      	b.n	800d4d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	491e      	ldr	r1, [pc, #120]	@ (800d4e0 <SD_PowerON+0x118>)
 800d466:	4618      	mov	r0, r3
 800d468:	f003 fac4 	bl	80109f4 <SDMMC_CmdAppOperCommand>
 800d46c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d002      	beq.n	800d47a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d474:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d478:	e02e      	b.n	800d4d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	2100      	movs	r1, #0
 800d480:	4618      	mov	r0, r3
 800d482:	f003 f92a 	bl	80106da <SDMMC_GetResponse>
 800d486:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	0fdb      	lsrs	r3, r3, #31
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d101      	bne.n	800d494 <SD_PowerON+0xcc>
 800d490:	2301      	movs	r3, #1
 800d492:	e000      	b.n	800d496 <SD_PowerON+0xce>
 800d494:	2300      	movs	r3, #0
 800d496:	613b      	str	r3, [r7, #16]

    count++;
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	3301      	adds	r3, #1
 800d49c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d802      	bhi.n	800d4ae <SD_PowerON+0xe6>
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0cc      	beq.n	800d448 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d902      	bls.n	800d4be <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d4b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800d4bc:	e00c      	b.n	800d4d8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	645a      	str	r2, [r3, #68]	@ 0x44
 800d4ce:	e002      	b.n	800d4d6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	3718      	adds	r7, #24
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	c1100000 	.word	0xc1100000

0800d4e4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d102      	bne.n	800d4fa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d4f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d4f8:	e018      	b.n	800d52c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d502:	041b      	lsls	r3, r3, #16
 800d504:	4619      	mov	r1, r3
 800d506:	4610      	mov	r0, r2
 800d508:	f003 fb39 	bl	8010b7e <SDMMC_CmdSendStatus>
 800d50c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d001      	beq.n	800d518 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	e009      	b.n	800d52c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2100      	movs	r1, #0
 800d51e:	4618      	mov	r0, r3
 800d520:	f003 f8db 	bl	80106da <SDMMC_GetResponse>
 800d524:	4602      	mov	r2, r0
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d53c:	2300      	movs	r3, #0
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	2300      	movs	r3, #0
 800d542:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2100      	movs	r1, #0
 800d54a:	4618      	mov	r0, r3
 800d54c:	f003 f8c5 	bl	80106da <SDMMC_GetResponse>
 800d550:	4603      	mov	r3, r0
 800d552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d55a:	d102      	bne.n	800d562 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d55c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d560:	e02f      	b.n	800d5c2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d562:	f107 030c 	add.w	r3, r7, #12
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f879 	bl	800d660 <SD_FindSCR>
 800d56e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d001      	beq.n	800d57a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	e023      	b.n	800d5c2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d580:	2b00      	cmp	r3, #0
 800d582:	d01c      	beq.n	800d5be <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681a      	ldr	r2, [r3, #0]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d58c:	041b      	lsls	r3, r3, #16
 800d58e:	4619      	mov	r1, r3
 800d590:	4610      	mov	r0, r2
 800d592:	f003 fa0d 	bl	80109b0 <SDMMC_CmdAppCommand>
 800d596:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d001      	beq.n	800d5a2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	e00f      	b.n	800d5c2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2102      	movs	r1, #2
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f003 fa47 	bl	8010a3c <SDMMC_CmdBusWidth>
 800d5ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d001      	beq.n	800d5ba <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	e003      	b.n	800d5c2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e001      	b.n	800d5c2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d5be:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3718      	adds	r7, #24
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b086      	sub	sp, #24
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60fb      	str	r3, [r7, #12]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2100      	movs	r1, #0
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f003 f87a 	bl	80106da <SDMMC_GetResponse>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d5f0:	d102      	bne.n	800d5f8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d5f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d5f6:	e02f      	b.n	800d658 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d5f8:	f107 030c 	add.w	r3, r7, #12
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 f82e 	bl	800d660 <SD_FindSCR>
 800d604:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d001      	beq.n	800d610 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	e023      	b.n	800d658 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d616:	2b00      	cmp	r3, #0
 800d618:	d01c      	beq.n	800d654 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d622:	041b      	lsls	r3, r3, #16
 800d624:	4619      	mov	r1, r3
 800d626:	4610      	mov	r0, r2
 800d628:	f003 f9c2 	bl	80109b0 <SDMMC_CmdAppCommand>
 800d62c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d001      	beq.n	800d638 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	e00f      	b.n	800d658 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	2100      	movs	r1, #0
 800d63e:	4618      	mov	r0, r3
 800d640:	f003 f9fc 	bl	8010a3c <SDMMC_CmdBusWidth>
 800d644:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d001      	beq.n	800d650 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	e003      	b.n	800d658 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d650:	2300      	movs	r3, #0
 800d652:	e001      	b.n	800d658 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d654:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d660:	b590      	push	{r4, r7, lr}
 800d662:	b08f      	sub	sp, #60	@ 0x3c
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d66a:	f7f8 fc1d 	bl	8005ea8 <HAL_GetTick>
 800d66e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800d670:	2300      	movs	r3, #0
 800d672:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d674:	2300      	movs	r3, #0
 800d676:	60bb      	str	r3, [r7, #8]
 800d678:	2300      	movs	r3, #0
 800d67a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2108      	movs	r1, #8
 800d686:	4618      	mov	r0, r3
 800d688:	f003 f866 	bl	8010758 <SDMMC_CmdBlockLength>
 800d68c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d696:	e0b2      	b.n	800d7fe <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681a      	ldr	r2, [r3, #0]
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6a0:	041b      	lsls	r3, r3, #16
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	f003 f983 	bl	80109b0 <SDMMC_CmdAppCommand>
 800d6aa:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d001      	beq.n	800d6b6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b4:	e0a3      	b.n	800d7fe <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d6b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ba:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d6bc:	2308      	movs	r3, #8
 800d6be:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d6c0:	2330      	movs	r3, #48	@ 0x30
 800d6c2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f107 0210 	add.w	r2, r7, #16
 800d6d8:	4611      	mov	r1, r2
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f003 f810 	bl	8010700 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f003 f9cb 	bl	8010a80 <SDMMC_CmdSendSCR>
 800d6ea:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d02a      	beq.n	800d748 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800d6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f4:	e083      	b.n	800d7fe <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00f      	beq.n	800d724 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6819      	ldr	r1, [r3, #0]
 800d708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	f107 0208 	add.w	r2, r7, #8
 800d710:	18d4      	adds	r4, r2, r3
 800d712:	4608      	mov	r0, r1
 800d714:	f002 ff70 	bl	80105f8 <SDMMC_ReadFIFO>
 800d718:	4603      	mov	r3, r0
 800d71a:	6023      	str	r3, [r4, #0]
      index++;
 800d71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d71e:	3301      	adds	r3, #1
 800d720:	637b      	str	r3, [r7, #52]	@ 0x34
 800d722:	e006      	b.n	800d732 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d72a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d012      	beq.n	800d758 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800d732:	f7f8 fbb9 	bl	8005ea8 <HAL_GetTick>
 800d736:	4602      	mov	r2, r0
 800d738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d740:	d102      	bne.n	800d748 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d742:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d746:	e05a      	b.n	800d7fe <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d74e:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800d752:	2b00      	cmp	r3, #0
 800d754:	d0cf      	beq.n	800d6f6 <SD_FindSCR+0x96>
 800d756:	e000      	b.n	800d75a <SD_FindSCR+0xfa>
      break;
 800d758:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d760:	f003 0308 	and.w	r3, r3, #8
 800d764:	2b00      	cmp	r3, #0
 800d766:	d005      	beq.n	800d774 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	2208      	movs	r2, #8
 800d76e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d770:	2308      	movs	r3, #8
 800d772:	e044      	b.n	800d7fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d77a:	f003 0302 	and.w	r3, r3, #2
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d005      	beq.n	800d78e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2202      	movs	r2, #2
 800d788:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d78a:	2302      	movs	r3, #2
 800d78c:	e037      	b.n	800d7fe <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d005      	beq.n	800d7a8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2220      	movs	r2, #32
 800d7a2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d7a4:	2320      	movs	r3, #32
 800d7a6:	e02a      	b.n	800d7fe <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d7b0:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	061a      	lsls	r2, r3, #24
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	021b      	lsls	r3, r3, #8
 800d7ba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d7be:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	0a1b      	lsrs	r3, r3, #8
 800d7c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	0e1b      	lsrs	r3, r3, #24
 800d7ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d2:	601a      	str	r2, [r3, #0]
    scr++;
 800d7d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7d6:	3304      	adds	r3, #4
 800d7d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	061a      	lsls	r2, r3, #24
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	021b      	lsls	r3, r3, #8
 800d7e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d7e6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	0a1b      	lsrs	r3, r3, #8
 800d7ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d7f2:	68bb      	ldr	r3, [r7, #8]
 800d7f4:	0e1b      	lsrs	r3, r3, #24
 800d7f6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d7f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7fa:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d7fc:	2300      	movs	r3, #0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	373c      	adds	r7, #60	@ 0x3c
 800d802:	46bd      	mov	sp, r7
 800d804:	bd90      	pop	{r4, r7, pc}

0800d806 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b082      	sub	sp, #8
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	e025      	b.n	800d866 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800d820:	b2db      	uxtb	r3, r3
 800d822:	2b00      	cmp	r3, #0
 800d824:	d106      	bne.n	800d834 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7f7 faf8 	bl	8004e24 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	3304      	adds	r3, #4
 800d844:	4619      	mov	r1, r3
 800d846:	4610      	mov	r0, r2
 800d848:	f002 fde4 	bl	8010414 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6818      	ldr	r0, [r3, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	461a      	mov	r2, r3
 800d856:	6839      	ldr	r1, [r7, #0]
 800d858:	f002 fe38 	bl	80104cc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2201      	movs	r2, #1
 800d860:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d864:	2300      	movs	r3, #0
}
 800d866:	4618      	mov	r0, r3
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
	...

0800d870 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d101      	bne.n	800d882 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e04c      	b.n	800d91c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7f6 ff4a 	bl	8004730 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f022 0203 	bic.w	r2, r2, #3
 800d8b2:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	4b19      	ldr	r3, [pc, #100]	@ (800d924 <HAL_SPDIFRX_Init+0xb4>)
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d8cc:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d8d2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d8d8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d8de:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d8e4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d8ea:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d8f0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800d8f6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800d8fc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	4313      	orrs	r3, r2
 800d902:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	68fa      	ldr	r2, [r7, #12]
 800d90a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2201      	movs	r2, #1
 800d916:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800d91a:	2300      	movs	r3, #0
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}
 800d924:	fff88407 	.word	0xfff88407

0800d928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d101      	bne.n	800d93a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d936:	2301      	movs	r3, #1
 800d938:	e09d      	b.n	800da76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d108      	bne.n	800d954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d94a:	d009      	beq.n	800d960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	61da      	str	r2, [r3, #28]
 800d952:	e005      	b.n	800d960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2200      	movs	r2, #0
 800d958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	2200      	movs	r2, #0
 800d95e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2200      	movs	r2, #0
 800d964:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d106      	bne.n	800d980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7f6 ff3c 	bl	80047f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2202      	movs	r2, #2
 800d984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681a      	ldr	r2, [r3, #0]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d996:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	68db      	ldr	r3, [r3, #12]
 800d99c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d9a0:	d902      	bls.n	800d9a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	60fb      	str	r3, [r7, #12]
 800d9a6:	e002      	b.n	800d9ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d9a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d9ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d9b6:	d007      	beq.n	800d9c8 <HAL_SPI_Init+0xa0>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d9c0:	d002      	beq.n	800d9c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	689b      	ldr	r3, [r3, #8]
 800d9d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	691b      	ldr	r3, [r3, #16]
 800d9de:	f003 0302 	and.w	r3, r3, #2
 800d9e2:	431a      	orrs	r2, r3
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	695b      	ldr	r3, [r3, #20]
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	431a      	orrs	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	699b      	ldr	r3, [r3, #24]
 800d9f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	69db      	ldr	r3, [r3, #28]
 800d9fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800da00:	431a      	orrs	r2, r3
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da0a:	ea42 0103 	orr.w	r1, r2, r3
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	430a      	orrs	r2, r1
 800da1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	699b      	ldr	r3, [r3, #24]
 800da22:	0c1b      	lsrs	r3, r3, #16
 800da24:	f003 0204 	and.w	r2, r3, #4
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da2c:	f003 0310 	and.w	r3, r3, #16
 800da30:	431a      	orrs	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da36:	f003 0308 	and.w	r3, r3, #8
 800da3a:	431a      	orrs	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800da44:	ea42 0103 	orr.w	r1, r2, r3
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	430a      	orrs	r2, r1
 800da54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	69da      	ldr	r2, [r3, #28]
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800da64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	2200      	movs	r2, #0
 800da6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d101      	bne.n	800da90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e049      	b.n	800db24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da96:	b2db      	uxtb	r3, r3
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d106      	bne.n	800daaa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7f6 ff09 	bl	80048bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2202      	movs	r2, #2
 800daae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	3304      	adds	r3, #4
 800daba:	4619      	mov	r1, r3
 800dabc:	4610      	mov	r0, r2
 800dabe:	f000 fc11 	bl	800e2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2201      	movs	r2, #1
 800dace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2201      	movs	r2, #1
 800dade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2201      	movs	r2, #1
 800dae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2201      	movs	r2, #1
 800daee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2201      	movs	r2, #1
 800daf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2201      	movs	r2, #1
 800db06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2201      	movs	r2, #1
 800db1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db3a:	b2db      	uxtb	r3, r3
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d001      	beq.n	800db44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	e054      	b.n	800dbee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2202      	movs	r2, #2
 800db48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68da      	ldr	r2, [r3, #12]
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	f042 0201 	orr.w	r2, r2, #1
 800db5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a26      	ldr	r2, [pc, #152]	@ (800dbfc <HAL_TIM_Base_Start_IT+0xd0>)
 800db62:	4293      	cmp	r3, r2
 800db64:	d022      	beq.n	800dbac <HAL_TIM_Base_Start_IT+0x80>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db6e:	d01d      	beq.n	800dbac <HAL_TIM_Base_Start_IT+0x80>
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a22      	ldr	r2, [pc, #136]	@ (800dc00 <HAL_TIM_Base_Start_IT+0xd4>)
 800db76:	4293      	cmp	r3, r2
 800db78:	d018      	beq.n	800dbac <HAL_TIM_Base_Start_IT+0x80>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a21      	ldr	r2, [pc, #132]	@ (800dc04 <HAL_TIM_Base_Start_IT+0xd8>)
 800db80:	4293      	cmp	r3, r2
 800db82:	d013      	beq.n	800dbac <HAL_TIM_Base_Start_IT+0x80>
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a1f      	ldr	r2, [pc, #124]	@ (800dc08 <HAL_TIM_Base_Start_IT+0xdc>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d00e      	beq.n	800dbac <HAL_TIM_Base_Start_IT+0x80>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	4a1e      	ldr	r2, [pc, #120]	@ (800dc0c <HAL_TIM_Base_Start_IT+0xe0>)
 800db94:	4293      	cmp	r3, r2
 800db96:	d009      	beq.n	800dbac <HAL_TIM_Base_Start_IT+0x80>
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a1c      	ldr	r2, [pc, #112]	@ (800dc10 <HAL_TIM_Base_Start_IT+0xe4>)
 800db9e:	4293      	cmp	r3, r2
 800dba0:	d004      	beq.n	800dbac <HAL_TIM_Base_Start_IT+0x80>
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4a1b      	ldr	r2, [pc, #108]	@ (800dc14 <HAL_TIM_Base_Start_IT+0xe8>)
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	d115      	bne.n	800dbd8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	689a      	ldr	r2, [r3, #8]
 800dbb2:	4b19      	ldr	r3, [pc, #100]	@ (800dc18 <HAL_TIM_Base_Start_IT+0xec>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b06      	cmp	r3, #6
 800dbbc:	d015      	beq.n	800dbea <HAL_TIM_Base_Start_IT+0xbe>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbc4:	d011      	beq.n	800dbea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	681a      	ldr	r2, [r3, #0]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f042 0201 	orr.w	r2, r2, #1
 800dbd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbd6:	e008      	b.n	800dbea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	681a      	ldr	r2, [r3, #0]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f042 0201 	orr.w	r2, r2, #1
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	e000      	b.n	800dbec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dbec:	2300      	movs	r3, #0
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3714      	adds	r7, #20
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	40010000 	.word	0x40010000
 800dc00:	40000400 	.word	0x40000400
 800dc04:	40000800 	.word	0x40000800
 800dc08:	40000c00 	.word	0x40000c00
 800dc0c:	40010400 	.word	0x40010400
 800dc10:	40014000 	.word	0x40014000
 800dc14:	40001800 	.word	0x40001800
 800dc18:	00010007 	.word	0x00010007

0800dc1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc2a:	2301      	movs	r3, #1
 800dc2c:	e049      	b.n	800dcc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d106      	bne.n	800dc48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f7f6 fea8 	bl	8004998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2202      	movs	r2, #2
 800dc4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681a      	ldr	r2, [r3, #0]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	3304      	adds	r3, #4
 800dc58:	4619      	mov	r1, r3
 800dc5a:	4610      	mov	r0, r2
 800dc5c:	f000 fb42 	bl	800e2e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3708      	adds	r7, #8
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	f003 0302 	and.w	r3, r3, #2
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d020      	beq.n	800dd2e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f003 0302 	and.w	r3, r3, #2
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d01b      	beq.n	800dd2e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f06f 0202 	mvn.w	r2, #2
 800dcfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2201      	movs	r2, #1
 800dd04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	699b      	ldr	r3, [r3, #24]
 800dd0c:	f003 0303 	and.w	r3, r3, #3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d003      	beq.n	800dd1c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 fac7 	bl	800e2a8 <HAL_TIM_IC_CaptureCallback>
 800dd1a:	e005      	b.n	800dd28 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd1c:	6878      	ldr	r0, [r7, #4]
 800dd1e:	f000 fab9 	bl	800e294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 faca 	bl	800e2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dd2e:	68bb      	ldr	r3, [r7, #8]
 800dd30:	f003 0304 	and.w	r3, r3, #4
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d020      	beq.n	800dd7a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f003 0304 	and.w	r3, r3, #4
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d01b      	beq.n	800dd7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f06f 0204 	mvn.w	r2, #4
 800dd4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2202      	movs	r2, #2
 800dd50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	699b      	ldr	r3, [r3, #24]
 800dd58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d003      	beq.n	800dd68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 faa1 	bl	800e2a8 <HAL_TIM_IC_CaptureCallback>
 800dd66:	e005      	b.n	800dd74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fa93 	bl	800e294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 faa4 	bl	800e2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f003 0308 	and.w	r3, r3, #8
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d020      	beq.n	800ddc6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	f003 0308 	and.w	r3, r3, #8
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d01b      	beq.n	800ddc6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	f06f 0208 	mvn.w	r2, #8
 800dd96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2204      	movs	r2, #4
 800dd9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	69db      	ldr	r3, [r3, #28]
 800dda4:	f003 0303 	and.w	r3, r3, #3
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d003      	beq.n	800ddb4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 fa7b 	bl	800e2a8 <HAL_TIM_IC_CaptureCallback>
 800ddb2:	e005      	b.n	800ddc0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 fa6d 	bl	800e294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fa7e 	bl	800e2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	f003 0310 	and.w	r3, r3, #16
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d020      	beq.n	800de12 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f003 0310 	and.w	r3, r3, #16
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d01b      	beq.n	800de12 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f06f 0210 	mvn.w	r2, #16
 800dde2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2208      	movs	r2, #8
 800dde8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	69db      	ldr	r3, [r3, #28]
 800ddf0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d003      	beq.n	800de00 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 fa55 	bl	800e2a8 <HAL_TIM_IC_CaptureCallback>
 800ddfe:	e005      	b.n	800de0c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fa47 	bl	800e294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fa58 	bl	800e2bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	f003 0301 	and.w	r3, r3, #1
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d00c      	beq.n	800de36 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	f003 0301 	and.w	r3, r3, #1
 800de22:	2b00      	cmp	r3, #0
 800de24:	d007      	beq.n	800de36 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f06f 0201 	mvn.w	r2, #1
 800de2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f7f5 ff4b 	bl	8003ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d104      	bne.n	800de4a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00c      	beq.n	800de64 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de50:	2b00      	cmp	r3, #0
 800de52:	d007      	beq.n	800de64 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800de5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f000 fef4 	bl	800ec4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00c      	beq.n	800de88 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de74:	2b00      	cmp	r3, #0
 800de76:	d007      	beq.n	800de88 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800de80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 feec 	bl	800ec60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00c      	beq.n	800deac <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d007      	beq.n	800deac <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f000 fa12 	bl	800e2d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	f003 0320 	and.w	r3, r3, #32
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00c      	beq.n	800ded0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	f003 0320 	and.w	r3, r3, #32
 800debc:	2b00      	cmp	r3, #0
 800debe:	d007      	beq.n	800ded0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f06f 0220 	mvn.w	r2, #32
 800dec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 feb4 	bl	800ec38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ded0:	bf00      	nop
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b086      	sub	sp, #24
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dee4:	2300      	movs	r3, #0
 800dee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800deee:	2b01      	cmp	r3, #1
 800def0:	d101      	bne.n	800def6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800def2:	2302      	movs	r3, #2
 800def4:	e0ff      	b.n	800e0f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	2201      	movs	r2, #1
 800defa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b14      	cmp	r3, #20
 800df02:	f200 80f0 	bhi.w	800e0e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800df06:	a201      	add	r2, pc, #4	@ (adr r2, 800df0c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800df08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0c:	0800df61 	.word	0x0800df61
 800df10:	0800e0e7 	.word	0x0800e0e7
 800df14:	0800e0e7 	.word	0x0800e0e7
 800df18:	0800e0e7 	.word	0x0800e0e7
 800df1c:	0800dfa1 	.word	0x0800dfa1
 800df20:	0800e0e7 	.word	0x0800e0e7
 800df24:	0800e0e7 	.word	0x0800e0e7
 800df28:	0800e0e7 	.word	0x0800e0e7
 800df2c:	0800dfe3 	.word	0x0800dfe3
 800df30:	0800e0e7 	.word	0x0800e0e7
 800df34:	0800e0e7 	.word	0x0800e0e7
 800df38:	0800e0e7 	.word	0x0800e0e7
 800df3c:	0800e023 	.word	0x0800e023
 800df40:	0800e0e7 	.word	0x0800e0e7
 800df44:	0800e0e7 	.word	0x0800e0e7
 800df48:	0800e0e7 	.word	0x0800e0e7
 800df4c:	0800e065 	.word	0x0800e065
 800df50:	0800e0e7 	.word	0x0800e0e7
 800df54:	0800e0e7 	.word	0x0800e0e7
 800df58:	0800e0e7 	.word	0x0800e0e7
 800df5c:	0800e0a5 	.word	0x0800e0a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68b9      	ldr	r1, [r7, #8]
 800df66:	4618      	mov	r0, r3
 800df68:	f000 fa62 	bl	800e430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	699a      	ldr	r2, [r3, #24]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f042 0208 	orr.w	r2, r2, #8
 800df7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	699a      	ldr	r2, [r3, #24]
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f022 0204 	bic.w	r2, r2, #4
 800df8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	6999      	ldr	r1, [r3, #24]
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	691a      	ldr	r2, [r3, #16]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	430a      	orrs	r2, r1
 800df9c:	619a      	str	r2, [r3, #24]
      break;
 800df9e:	e0a5      	b.n	800e0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68b9      	ldr	r1, [r7, #8]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f000 fab4 	bl	800e514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	699a      	ldr	r2, [r3, #24]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dfba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	699a      	ldr	r2, [r3, #24]
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dfca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	6999      	ldr	r1, [r3, #24]
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	021a      	lsls	r2, r3, #8
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	430a      	orrs	r2, r1
 800dfde:	619a      	str	r2, [r3, #24]
      break;
 800dfe0:	e084      	b.n	800e0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	68b9      	ldr	r1, [r7, #8]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f000 fb0b 	bl	800e604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	69da      	ldr	r2, [r3, #28]
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f042 0208 	orr.w	r2, r2, #8
 800dffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	69da      	ldr	r2, [r3, #28]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f022 0204 	bic.w	r2, r2, #4
 800e00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	69d9      	ldr	r1, [r3, #28]
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	691a      	ldr	r2, [r3, #16]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	430a      	orrs	r2, r1
 800e01e:	61da      	str	r2, [r3, #28]
      break;
 800e020:	e064      	b.n	800e0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	68b9      	ldr	r1, [r7, #8]
 800e028:	4618      	mov	r0, r3
 800e02a:	f000 fb61 	bl	800e6f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	69da      	ldr	r2, [r3, #28]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e03c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	69da      	ldr	r2, [r3, #28]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e04c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	69d9      	ldr	r1, [r3, #28]
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	691b      	ldr	r3, [r3, #16]
 800e058:	021a      	lsls	r2, r3, #8
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	430a      	orrs	r2, r1
 800e060:	61da      	str	r2, [r3, #28]
      break;
 800e062:	e043      	b.n	800e0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68b9      	ldr	r1, [r7, #8]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 fb98 	bl	800e7a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f042 0208 	orr.w	r2, r2, #8
 800e07e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	f022 0204 	bic.w	r2, r2, #4
 800e08e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	691a      	ldr	r2, [r3, #16]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	430a      	orrs	r2, r1
 800e0a0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e0a2:	e023      	b.n	800e0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	68b9      	ldr	r1, [r7, #8]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 fbca 	bl	800e844 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e0ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	691b      	ldr	r3, [r3, #16]
 800e0da:	021a      	lsls	r2, r3, #8
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	430a      	orrs	r2, r1
 800e0e2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e0e4:	e002      	b.n	800e0ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	75fb      	strb	r3, [r7, #23]
      break;
 800e0ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e0f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3718      	adds	r7, #24
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop

0800e100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e10a:	2300      	movs	r3, #0
 800e10c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e114:	2b01      	cmp	r3, #1
 800e116:	d101      	bne.n	800e11c <HAL_TIM_ConfigClockSource+0x1c>
 800e118:	2302      	movs	r3, #2
 800e11a:	e0b4      	b.n	800e286 <HAL_TIM_ConfigClockSource+0x186>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2202      	movs	r2, #2
 800e128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	689b      	ldr	r3, [r3, #8]
 800e132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	4b56      	ldr	r3, [pc, #344]	@ (800e290 <HAL_TIM_ConfigClockSource+0x190>)
 800e138:	4013      	ands	r3, r2
 800e13a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e154:	d03e      	beq.n	800e1d4 <HAL_TIM_ConfigClockSource+0xd4>
 800e156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e15a:	f200 8087 	bhi.w	800e26c <HAL_TIM_ConfigClockSource+0x16c>
 800e15e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e162:	f000 8086 	beq.w	800e272 <HAL_TIM_ConfigClockSource+0x172>
 800e166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e16a:	d87f      	bhi.n	800e26c <HAL_TIM_ConfigClockSource+0x16c>
 800e16c:	2b70      	cmp	r3, #112	@ 0x70
 800e16e:	d01a      	beq.n	800e1a6 <HAL_TIM_ConfigClockSource+0xa6>
 800e170:	2b70      	cmp	r3, #112	@ 0x70
 800e172:	d87b      	bhi.n	800e26c <HAL_TIM_ConfigClockSource+0x16c>
 800e174:	2b60      	cmp	r3, #96	@ 0x60
 800e176:	d050      	beq.n	800e21a <HAL_TIM_ConfigClockSource+0x11a>
 800e178:	2b60      	cmp	r3, #96	@ 0x60
 800e17a:	d877      	bhi.n	800e26c <HAL_TIM_ConfigClockSource+0x16c>
 800e17c:	2b50      	cmp	r3, #80	@ 0x50
 800e17e:	d03c      	beq.n	800e1fa <HAL_TIM_ConfigClockSource+0xfa>
 800e180:	2b50      	cmp	r3, #80	@ 0x50
 800e182:	d873      	bhi.n	800e26c <HAL_TIM_ConfigClockSource+0x16c>
 800e184:	2b40      	cmp	r3, #64	@ 0x40
 800e186:	d058      	beq.n	800e23a <HAL_TIM_ConfigClockSource+0x13a>
 800e188:	2b40      	cmp	r3, #64	@ 0x40
 800e18a:	d86f      	bhi.n	800e26c <HAL_TIM_ConfigClockSource+0x16c>
 800e18c:	2b30      	cmp	r3, #48	@ 0x30
 800e18e:	d064      	beq.n	800e25a <HAL_TIM_ConfigClockSource+0x15a>
 800e190:	2b30      	cmp	r3, #48	@ 0x30
 800e192:	d86b      	bhi.n	800e26c <HAL_TIM_ConfigClockSource+0x16c>
 800e194:	2b20      	cmp	r3, #32
 800e196:	d060      	beq.n	800e25a <HAL_TIM_ConfigClockSource+0x15a>
 800e198:	2b20      	cmp	r3, #32
 800e19a:	d867      	bhi.n	800e26c <HAL_TIM_ConfigClockSource+0x16c>
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d05c      	beq.n	800e25a <HAL_TIM_ConfigClockSource+0x15a>
 800e1a0:	2b10      	cmp	r3, #16
 800e1a2:	d05a      	beq.n	800e25a <HAL_TIM_ConfigClockSource+0x15a>
 800e1a4:	e062      	b.n	800e26c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e1b6:	f000 fc13 	bl	800e9e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	689b      	ldr	r3, [r3, #8]
 800e1c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e1c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	609a      	str	r2, [r3, #8]
      break;
 800e1d2:	e04f      	b.n	800e274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e1e4:	f000 fbfc 	bl	800e9e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	689a      	ldr	r2, [r3, #8]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e1f6:	609a      	str	r2, [r3, #8]
      break;
 800e1f8:	e03c      	b.n	800e274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e206:	461a      	mov	r2, r3
 800e208:	f000 fb70 	bl	800e8ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2150      	movs	r1, #80	@ 0x50
 800e212:	4618      	mov	r0, r3
 800e214:	f000 fbc9 	bl	800e9aa <TIM_ITRx_SetConfig>
      break;
 800e218:	e02c      	b.n	800e274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e226:	461a      	mov	r2, r3
 800e228:	f000 fb8f 	bl	800e94a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2160      	movs	r1, #96	@ 0x60
 800e232:	4618      	mov	r0, r3
 800e234:	f000 fbb9 	bl	800e9aa <TIM_ITRx_SetConfig>
      break;
 800e238:	e01c      	b.n	800e274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e246:	461a      	mov	r2, r3
 800e248:	f000 fb50 	bl	800e8ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2140      	movs	r1, #64	@ 0x40
 800e252:	4618      	mov	r0, r3
 800e254:	f000 fba9 	bl	800e9aa <TIM_ITRx_SetConfig>
      break;
 800e258:	e00c      	b.n	800e274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	4619      	mov	r1, r3
 800e264:	4610      	mov	r0, r2
 800e266:	f000 fba0 	bl	800e9aa <TIM_ITRx_SetConfig>
      break;
 800e26a:	e003      	b.n	800e274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e26c:	2301      	movs	r3, #1
 800e26e:	73fb      	strb	r3, [r7, #15]
      break;
 800e270:	e000      	b.n	800e274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e284:	7bfb      	ldrb	r3, [r7, #15]
}
 800e286:	4618      	mov	r0, r3
 800e288:	3710      	adds	r7, #16
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	fffeff88 	.word	0xfffeff88

0800e294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e294:	b480      	push	{r7}
 800e296:	b083      	sub	sp, #12
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e29c:	bf00      	nop
 800e29e:	370c      	adds	r7, #12
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e2c4:	bf00      	nop
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	4a43      	ldr	r2, [pc, #268]	@ (800e404 <TIM_Base_SetConfig+0x120>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d013      	beq.n	800e324 <TIM_Base_SetConfig+0x40>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e302:	d00f      	beq.n	800e324 <TIM_Base_SetConfig+0x40>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a40      	ldr	r2, [pc, #256]	@ (800e408 <TIM_Base_SetConfig+0x124>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d00b      	beq.n	800e324 <TIM_Base_SetConfig+0x40>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4a3f      	ldr	r2, [pc, #252]	@ (800e40c <TIM_Base_SetConfig+0x128>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d007      	beq.n	800e324 <TIM_Base_SetConfig+0x40>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4a3e      	ldr	r2, [pc, #248]	@ (800e410 <TIM_Base_SetConfig+0x12c>)
 800e318:	4293      	cmp	r3, r2
 800e31a:	d003      	beq.n	800e324 <TIM_Base_SetConfig+0x40>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	4a3d      	ldr	r2, [pc, #244]	@ (800e414 <TIM_Base_SetConfig+0x130>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d108      	bne.n	800e336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e32a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	685b      	ldr	r3, [r3, #4]
 800e330:	68fa      	ldr	r2, [r7, #12]
 800e332:	4313      	orrs	r3, r2
 800e334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a32      	ldr	r2, [pc, #200]	@ (800e404 <TIM_Base_SetConfig+0x120>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d02b      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e344:	d027      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4a2f      	ldr	r2, [pc, #188]	@ (800e408 <TIM_Base_SetConfig+0x124>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d023      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4a2e      	ldr	r2, [pc, #184]	@ (800e40c <TIM_Base_SetConfig+0x128>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d01f      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a2d      	ldr	r2, [pc, #180]	@ (800e410 <TIM_Base_SetConfig+0x12c>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d01b      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	4a2c      	ldr	r2, [pc, #176]	@ (800e414 <TIM_Base_SetConfig+0x130>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d017      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	4a2b      	ldr	r2, [pc, #172]	@ (800e418 <TIM_Base_SetConfig+0x134>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d013      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4a2a      	ldr	r2, [pc, #168]	@ (800e41c <TIM_Base_SetConfig+0x138>)
 800e372:	4293      	cmp	r3, r2
 800e374:	d00f      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4a29      	ldr	r2, [pc, #164]	@ (800e420 <TIM_Base_SetConfig+0x13c>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d00b      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	4a28      	ldr	r2, [pc, #160]	@ (800e424 <TIM_Base_SetConfig+0x140>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d007      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a27      	ldr	r2, [pc, #156]	@ (800e428 <TIM_Base_SetConfig+0x144>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d003      	beq.n	800e396 <TIM_Base_SetConfig+0xb2>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4a26      	ldr	r2, [pc, #152]	@ (800e42c <TIM_Base_SetConfig+0x148>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d108      	bne.n	800e3a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e39c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	695b      	ldr	r3, [r3, #20]
 800e3b2:	4313      	orrs	r3, r2
 800e3b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	689a      	ldr	r2, [r3, #8]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	4a0e      	ldr	r2, [pc, #56]	@ (800e404 <TIM_Base_SetConfig+0x120>)
 800e3ca:	4293      	cmp	r3, r2
 800e3cc:	d003      	beq.n	800e3d6 <TIM_Base_SetConfig+0xf2>
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	4a10      	ldr	r2, [pc, #64]	@ (800e414 <TIM_Base_SetConfig+0x130>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d103      	bne.n	800e3de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	691a      	ldr	r2, [r3, #16]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f043 0204 	orr.w	r2, r3, #4
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	68fa      	ldr	r2, [r7, #12]
 800e3f4:	601a      	str	r2, [r3, #0]
}
 800e3f6:	bf00      	nop
 800e3f8:	3714      	adds	r7, #20
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	40010000 	.word	0x40010000
 800e408:	40000400 	.word	0x40000400
 800e40c:	40000800 	.word	0x40000800
 800e410:	40000c00 	.word	0x40000c00
 800e414:	40010400 	.word	0x40010400
 800e418:	40014000 	.word	0x40014000
 800e41c:	40014400 	.word	0x40014400
 800e420:	40014800 	.word	0x40014800
 800e424:	40001800 	.word	0x40001800
 800e428:	40001c00 	.word	0x40001c00
 800e42c:	40002000 	.word	0x40002000

0800e430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e430:	b480      	push	{r7}
 800e432:	b087      	sub	sp, #28
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6a1b      	ldr	r3, [r3, #32]
 800e43e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6a1b      	ldr	r3, [r3, #32]
 800e444:	f023 0201 	bic.w	r2, r3, #1
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e458:	68fa      	ldr	r2, [r7, #12]
 800e45a:	4b2b      	ldr	r3, [pc, #172]	@ (800e508 <TIM_OC1_SetConfig+0xd8>)
 800e45c:	4013      	ands	r3, r2
 800e45e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f023 0303 	bic.w	r3, r3, #3
 800e466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	68fa      	ldr	r2, [r7, #12]
 800e46e:	4313      	orrs	r3, r2
 800e470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	f023 0302 	bic.w	r3, r3, #2
 800e478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	697a      	ldr	r2, [r7, #20]
 800e480:	4313      	orrs	r3, r2
 800e482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4a21      	ldr	r2, [pc, #132]	@ (800e50c <TIM_OC1_SetConfig+0xdc>)
 800e488:	4293      	cmp	r3, r2
 800e48a:	d003      	beq.n	800e494 <TIM_OC1_SetConfig+0x64>
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	4a20      	ldr	r2, [pc, #128]	@ (800e510 <TIM_OC1_SetConfig+0xe0>)
 800e490:	4293      	cmp	r3, r2
 800e492:	d10c      	bne.n	800e4ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	f023 0308 	bic.w	r3, r3, #8
 800e49a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	697a      	ldr	r2, [r7, #20]
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	f023 0304 	bic.w	r3, r3, #4
 800e4ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	4a16      	ldr	r2, [pc, #88]	@ (800e50c <TIM_OC1_SetConfig+0xdc>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d003      	beq.n	800e4be <TIM_OC1_SetConfig+0x8e>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	4a15      	ldr	r2, [pc, #84]	@ (800e510 <TIM_OC1_SetConfig+0xe0>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d111      	bne.n	800e4e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e4c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e4cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	695b      	ldr	r3, [r3, #20]
 800e4d2:	693a      	ldr	r2, [r7, #16]
 800e4d4:	4313      	orrs	r3, r2
 800e4d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	699b      	ldr	r3, [r3, #24]
 800e4dc:	693a      	ldr	r2, [r7, #16]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	693a      	ldr	r2, [r7, #16]
 800e4e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	68fa      	ldr	r2, [r7, #12]
 800e4ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	685a      	ldr	r2, [r3, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	697a      	ldr	r2, [r7, #20]
 800e4fa:	621a      	str	r2, [r3, #32]
}
 800e4fc:	bf00      	nop
 800e4fe:	371c      	adds	r7, #28
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr
 800e508:	fffeff8f 	.word	0xfffeff8f
 800e50c:	40010000 	.word	0x40010000
 800e510:	40010400 	.word	0x40010400

0800e514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e514:	b480      	push	{r7}
 800e516:	b087      	sub	sp, #28
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6a1b      	ldr	r3, [r3, #32]
 800e522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a1b      	ldr	r3, [r3, #32]
 800e528:	f023 0210 	bic.w	r2, r3, #16
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	699b      	ldr	r3, [r3, #24]
 800e53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	4b2e      	ldr	r3, [pc, #184]	@ (800e5f8 <TIM_OC2_SetConfig+0xe4>)
 800e540:	4013      	ands	r3, r2
 800e542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e54a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	021b      	lsls	r3, r3, #8
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	4313      	orrs	r3, r2
 800e556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	f023 0320 	bic.w	r3, r3, #32
 800e55e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	011b      	lsls	r3, r3, #4
 800e566:	697a      	ldr	r2, [r7, #20]
 800e568:	4313      	orrs	r3, r2
 800e56a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	4a23      	ldr	r2, [pc, #140]	@ (800e5fc <TIM_OC2_SetConfig+0xe8>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d003      	beq.n	800e57c <TIM_OC2_SetConfig+0x68>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4a22      	ldr	r2, [pc, #136]	@ (800e600 <TIM_OC2_SetConfig+0xec>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d10d      	bne.n	800e598 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	011b      	lsls	r3, r3, #4
 800e58a:	697a      	ldr	r2, [r7, #20]
 800e58c:	4313      	orrs	r3, r2
 800e58e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e596:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	4a18      	ldr	r2, [pc, #96]	@ (800e5fc <TIM_OC2_SetConfig+0xe8>)
 800e59c:	4293      	cmp	r3, r2
 800e59e:	d003      	beq.n	800e5a8 <TIM_OC2_SetConfig+0x94>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	4a17      	ldr	r2, [pc, #92]	@ (800e600 <TIM_OC2_SetConfig+0xec>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d113      	bne.n	800e5d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e5ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e5b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	695b      	ldr	r3, [r3, #20]
 800e5bc:	009b      	lsls	r3, r3, #2
 800e5be:	693a      	ldr	r2, [r7, #16]
 800e5c0:	4313      	orrs	r3, r2
 800e5c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e5c4:	683b      	ldr	r3, [r7, #0]
 800e5c6:	699b      	ldr	r3, [r3, #24]
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	693a      	ldr	r2, [r7, #16]
 800e5d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	68fa      	ldr	r2, [r7, #12]
 800e5da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	685a      	ldr	r2, [r3, #4]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	697a      	ldr	r2, [r7, #20]
 800e5e8:	621a      	str	r2, [r3, #32]
}
 800e5ea:	bf00      	nop
 800e5ec:	371c      	adds	r7, #28
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	feff8fff 	.word	0xfeff8fff
 800e5fc:	40010000 	.word	0x40010000
 800e600:	40010400 	.word	0x40010400

0800e604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e604:	b480      	push	{r7}
 800e606:	b087      	sub	sp, #28
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6a1b      	ldr	r3, [r3, #32]
 800e618:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	69db      	ldr	r3, [r3, #28]
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e62c:	68fa      	ldr	r2, [r7, #12]
 800e62e:	4b2d      	ldr	r3, [pc, #180]	@ (800e6e4 <TIM_OC3_SetConfig+0xe0>)
 800e630:	4013      	ands	r3, r2
 800e632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f023 0303 	bic.w	r3, r3, #3
 800e63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	4313      	orrs	r3, r2
 800e644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	021b      	lsls	r3, r3, #8
 800e654:	697a      	ldr	r2, [r7, #20]
 800e656:	4313      	orrs	r3, r2
 800e658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	4a22      	ldr	r2, [pc, #136]	@ (800e6e8 <TIM_OC3_SetConfig+0xe4>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d003      	beq.n	800e66a <TIM_OC3_SetConfig+0x66>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	4a21      	ldr	r2, [pc, #132]	@ (800e6ec <TIM_OC3_SetConfig+0xe8>)
 800e666:	4293      	cmp	r3, r2
 800e668:	d10d      	bne.n	800e686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	021b      	lsls	r3, r3, #8
 800e678:	697a      	ldr	r2, [r7, #20]
 800e67a:	4313      	orrs	r3, r2
 800e67c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4a17      	ldr	r2, [pc, #92]	@ (800e6e8 <TIM_OC3_SetConfig+0xe4>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d003      	beq.n	800e696 <TIM_OC3_SetConfig+0x92>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	4a16      	ldr	r2, [pc, #88]	@ (800e6ec <TIM_OC3_SetConfig+0xe8>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d113      	bne.n	800e6be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e69c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e6a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	695b      	ldr	r3, [r3, #20]
 800e6aa:	011b      	lsls	r3, r3, #4
 800e6ac:	693a      	ldr	r2, [r7, #16]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	699b      	ldr	r3, [r3, #24]
 800e6b6:	011b      	lsls	r3, r3, #4
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	693a      	ldr	r2, [r7, #16]
 800e6c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	68fa      	ldr	r2, [r7, #12]
 800e6c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	685a      	ldr	r2, [r3, #4]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	697a      	ldr	r2, [r7, #20]
 800e6d6:	621a      	str	r2, [r3, #32]
}
 800e6d8:	bf00      	nop
 800e6da:	371c      	adds	r7, #28
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e2:	4770      	bx	lr
 800e6e4:	fffeff8f 	.word	0xfffeff8f
 800e6e8:	40010000 	.word	0x40010000
 800e6ec:	40010400 	.word	0x40010400

0800e6f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b087      	sub	sp, #28
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	6a1b      	ldr	r3, [r3, #32]
 800e6fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a1b      	ldr	r3, [r3, #32]
 800e704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e718:	68fa      	ldr	r2, [r7, #12]
 800e71a:	4b1e      	ldr	r3, [pc, #120]	@ (800e794 <TIM_OC4_SetConfig+0xa4>)
 800e71c:	4013      	ands	r3, r2
 800e71e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	021b      	lsls	r3, r3, #8
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	4313      	orrs	r3, r2
 800e732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e73a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	689b      	ldr	r3, [r3, #8]
 800e740:	031b      	lsls	r3, r3, #12
 800e742:	693a      	ldr	r2, [r7, #16]
 800e744:	4313      	orrs	r3, r2
 800e746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4a13      	ldr	r2, [pc, #76]	@ (800e798 <TIM_OC4_SetConfig+0xa8>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d003      	beq.n	800e758 <TIM_OC4_SetConfig+0x68>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4a12      	ldr	r2, [pc, #72]	@ (800e79c <TIM_OC4_SetConfig+0xac>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d109      	bne.n	800e76c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e75e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	695b      	ldr	r3, [r3, #20]
 800e764:	019b      	lsls	r3, r3, #6
 800e766:	697a      	ldr	r2, [r7, #20]
 800e768:	4313      	orrs	r3, r2
 800e76a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	685a      	ldr	r2, [r3, #4]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	693a      	ldr	r2, [r7, #16]
 800e784:	621a      	str	r2, [r3, #32]
}
 800e786:	bf00      	nop
 800e788:	371c      	adds	r7, #28
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	feff8fff 	.word	0xfeff8fff
 800e798:	40010000 	.word	0x40010000
 800e79c:	40010400 	.word	0x40010400

0800e7a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b087      	sub	sp, #28
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6a1b      	ldr	r3, [r3, #32]
 800e7ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6a1b      	ldr	r3, [r3, #32]
 800e7b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	4b1b      	ldr	r3, [pc, #108]	@ (800e838 <TIM_OC5_SetConfig+0x98>)
 800e7cc:	4013      	ands	r3, r2
 800e7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e7e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	689b      	ldr	r3, [r3, #8]
 800e7e6:	041b      	lsls	r3, r3, #16
 800e7e8:	693a      	ldr	r2, [r7, #16]
 800e7ea:	4313      	orrs	r3, r2
 800e7ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a12      	ldr	r2, [pc, #72]	@ (800e83c <TIM_OC5_SetConfig+0x9c>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d003      	beq.n	800e7fe <TIM_OC5_SetConfig+0x5e>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a11      	ldr	r2, [pc, #68]	@ (800e840 <TIM_OC5_SetConfig+0xa0>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d109      	bne.n	800e812 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e804:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	695b      	ldr	r3, [r3, #20]
 800e80a:	021b      	lsls	r3, r3, #8
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	4313      	orrs	r3, r2
 800e810:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	697a      	ldr	r2, [r7, #20]
 800e816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	68fa      	ldr	r2, [r7, #12]
 800e81c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	685a      	ldr	r2, [r3, #4]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	693a      	ldr	r2, [r7, #16]
 800e82a:	621a      	str	r2, [r3, #32]
}
 800e82c:	bf00      	nop
 800e82e:	371c      	adds	r7, #28
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr
 800e838:	fffeff8f 	.word	0xfffeff8f
 800e83c:	40010000 	.word	0x40010000
 800e840:	40010400 	.word	0x40010400

0800e844 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e844:	b480      	push	{r7}
 800e846:	b087      	sub	sp, #28
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6a1b      	ldr	r3, [r3, #32]
 800e852:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e86a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	4b1c      	ldr	r3, [pc, #112]	@ (800e8e0 <TIM_OC6_SetConfig+0x9c>)
 800e870:	4013      	ands	r3, r2
 800e872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	021b      	lsls	r3, r3, #8
 800e87a:	68fa      	ldr	r2, [r7, #12]
 800e87c:	4313      	orrs	r3, r2
 800e87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800e886:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	689b      	ldr	r3, [r3, #8]
 800e88c:	051b      	lsls	r3, r3, #20
 800e88e:	693a      	ldr	r2, [r7, #16]
 800e890:	4313      	orrs	r3, r2
 800e892:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	4a13      	ldr	r2, [pc, #76]	@ (800e8e4 <TIM_OC6_SetConfig+0xa0>)
 800e898:	4293      	cmp	r3, r2
 800e89a:	d003      	beq.n	800e8a4 <TIM_OC6_SetConfig+0x60>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	4a12      	ldr	r2, [pc, #72]	@ (800e8e8 <TIM_OC6_SetConfig+0xa4>)
 800e8a0:	4293      	cmp	r3, r2
 800e8a2:	d109      	bne.n	800e8b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e8aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	695b      	ldr	r3, [r3, #20]
 800e8b0:	029b      	lsls	r3, r3, #10
 800e8b2:	697a      	ldr	r2, [r7, #20]
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	697a      	ldr	r2, [r7, #20]
 800e8bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	685a      	ldr	r2, [r3, #4]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	693a      	ldr	r2, [r7, #16]
 800e8d0:	621a      	str	r2, [r3, #32]
}
 800e8d2:	bf00      	nop
 800e8d4:	371c      	adds	r7, #28
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	feff8fff 	.word	0xfeff8fff
 800e8e4:	40010000 	.word	0x40010000
 800e8e8:	40010400 	.word	0x40010400

0800e8ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b087      	sub	sp, #28
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	6a1b      	ldr	r3, [r3, #32]
 800e8fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	6a1b      	ldr	r3, [r3, #32]
 800e902:	f023 0201 	bic.w	r2, r3, #1
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	699b      	ldr	r3, [r3, #24]
 800e90e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	011b      	lsls	r3, r3, #4
 800e91c:	693a      	ldr	r2, [r7, #16]
 800e91e:	4313      	orrs	r3, r2
 800e920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e922:	697b      	ldr	r3, [r7, #20]
 800e924:	f023 030a 	bic.w	r3, r3, #10
 800e928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e92a:	697a      	ldr	r2, [r7, #20]
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	4313      	orrs	r3, r2
 800e930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	693a      	ldr	r2, [r7, #16]
 800e936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	697a      	ldr	r2, [r7, #20]
 800e93c:	621a      	str	r2, [r3, #32]
}
 800e93e:	bf00      	nop
 800e940:	371c      	adds	r7, #28
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e94a:	b480      	push	{r7}
 800e94c:	b087      	sub	sp, #28
 800e94e:	af00      	add	r7, sp, #0
 800e950:	60f8      	str	r0, [r7, #12]
 800e952:	60b9      	str	r1, [r7, #8]
 800e954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	6a1b      	ldr	r3, [r3, #32]
 800e960:	f023 0210 	bic.w	r2, r3, #16
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	031b      	lsls	r3, r3, #12
 800e97a:	693a      	ldr	r2, [r7, #16]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e986:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	011b      	lsls	r3, r3, #4
 800e98c:	697a      	ldr	r2, [r7, #20]
 800e98e:	4313      	orrs	r3, r2
 800e990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	693a      	ldr	r2, [r7, #16]
 800e996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	697a      	ldr	r2, [r7, #20]
 800e99c:	621a      	str	r2, [r3, #32]
}
 800e99e:	bf00      	nop
 800e9a0:	371c      	adds	r7, #28
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr

0800e9aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e9aa:	b480      	push	{r7}
 800e9ac:	b085      	sub	sp, #20
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
 800e9b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e9c2:	683a      	ldr	r2, [r7, #0]
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	f043 0307 	orr.w	r3, r3, #7
 800e9cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	609a      	str	r2, [r3, #8]
}
 800e9d4:	bf00      	nop
 800e9d6:	3714      	adds	r7, #20
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b087      	sub	sp, #28
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	60f8      	str	r0, [r7, #12]
 800e9e8:	60b9      	str	r1, [r7, #8]
 800e9ea:	607a      	str	r2, [r7, #4]
 800e9ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e9fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	021a      	lsls	r2, r3, #8
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	431a      	orrs	r2, r3
 800ea04:	68bb      	ldr	r3, [r7, #8]
 800ea06:	4313      	orrs	r3, r2
 800ea08:	697a      	ldr	r2, [r7, #20]
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	697a      	ldr	r2, [r7, #20]
 800ea12:	609a      	str	r2, [r3, #8]
}
 800ea14:	bf00      	nop
 800ea16:	371c      	adds	r7, #28
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	d101      	bne.n	800ea38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea34:	2302      	movs	r3, #2
 800ea36:	e06d      	b.n	800eb14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2202      	movs	r2, #2
 800ea44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	689b      	ldr	r3, [r3, #8]
 800ea56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	4a30      	ldr	r2, [pc, #192]	@ (800eb20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d004      	beq.n	800ea6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a2f      	ldr	r2, [pc, #188]	@ (800eb24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d108      	bne.n	800ea7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ea72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	68fa      	ldr	r2, [r7, #12]
 800ea7a:	4313      	orrs	r3, r2
 800ea7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	4a20      	ldr	r2, [pc, #128]	@ (800eb20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d022      	beq.n	800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eaaa:	d01d      	beq.n	800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a1d      	ldr	r2, [pc, #116]	@ (800eb28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d018      	beq.n	800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a1c      	ldr	r2, [pc, #112]	@ (800eb2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d013      	beq.n	800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a1a      	ldr	r2, [pc, #104]	@ (800eb30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d00e      	beq.n	800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4a15      	ldr	r2, [pc, #84]	@ (800eb24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d009      	beq.n	800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a16      	ldr	r2, [pc, #88]	@ (800eb34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d004      	beq.n	800eae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a15      	ldr	r2, [pc, #84]	@ (800eb38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d10c      	bne.n	800eb02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eaee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	68ba      	ldr	r2, [r7, #8]
 800eb00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb12:	2300      	movs	r3, #0
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3714      	adds	r7, #20
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	40010000 	.word	0x40010000
 800eb24:	40010400 	.word	0x40010400
 800eb28:	40000400 	.word	0x40000400
 800eb2c:	40000800 	.word	0x40000800
 800eb30:	40000c00 	.word	0x40000c00
 800eb34:	40014000 	.word	0x40014000
 800eb38:	40001800 	.word	0x40001800

0800eb3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b085      	sub	sp, #20
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb46:	2300      	movs	r3, #0
 800eb48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d101      	bne.n	800eb58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eb54:	2302      	movs	r3, #2
 800eb56:	e065      	b.n	800ec24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	685b      	ldr	r3, [r3, #4]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	4313      	orrs	r3, r2
 800eb96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	691b      	ldr	r3, [r3, #16]
 800eba2:	4313      	orrs	r3, r2
 800eba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	695b      	ldr	r3, [r3, #20]
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	699b      	ldr	r3, [r3, #24]
 800ebcc:	041b      	lsls	r3, r3, #16
 800ebce:	4313      	orrs	r3, r2
 800ebd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a16      	ldr	r2, [pc, #88]	@ (800ec30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d004      	beq.n	800ebe6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a14      	ldr	r2, [pc, #80]	@ (800ec34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d115      	bne.n	800ec12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebf0:	051b      	lsls	r3, r3, #20
 800ebf2:	4313      	orrs	r3, r2
 800ebf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	69db      	ldr	r3, [r3, #28]
 800ec00:	4313      	orrs	r3, r2
 800ec02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	68fa      	ldr	r2, [r7, #12]
 800ec18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr
 800ec30:	40010000 	.word	0x40010000
 800ec34:	40010400 	.word	0x40010400

0800ec38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ec40:	bf00      	nop
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ec68:	bf00      	nop
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d101      	bne.n	800ec86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ec82:	2301      	movs	r3, #1
 800ec84:	e040      	b.n	800ed08 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d106      	bne.n	800ec9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2200      	movs	r2, #0
 800ec92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7f5 ff6c 	bl	8004b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2224      	movs	r2, #36	@ 0x24
 800eca0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f022 0201 	bic.w	r2, r2, #1
 800ecb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d002      	beq.n	800ecc0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 ffb6 	bl	800fc2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 fd4f 	bl	800f764 <UART_SetConfig>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d101      	bne.n	800ecd0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800eccc:	2301      	movs	r3, #1
 800ecce:	e01b      	b.n	800ed08 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	685a      	ldr	r2, [r3, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ecde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	689a      	ldr	r2, [r3, #8]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ecee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681a      	ldr	r2, [r3, #0]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f042 0201 	orr.w	r2, r2, #1
 800ecfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f001 f835 	bl	800fd70 <UART_CheckIdleState>
 800ed06:	4603      	mov	r3, r0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3708      	adds	r7, #8
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b08a      	sub	sp, #40	@ 0x28
 800ed14:	af02      	add	r7, sp, #8
 800ed16:	60f8      	str	r0, [r7, #12]
 800ed18:	60b9      	str	r1, [r7, #8]
 800ed1a:	603b      	str	r3, [r7, #0]
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ed24:	2b20      	cmp	r3, #32
 800ed26:	d177      	bne.n	800ee18 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <HAL_UART_Transmit+0x24>
 800ed2e:	88fb      	ldrh	r3, [r7, #6]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d101      	bne.n	800ed38 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ed34:	2301      	movs	r3, #1
 800ed36:	e070      	b.n	800ee1a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	2221      	movs	r2, #33	@ 0x21
 800ed44:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ed46:	f7f7 f8af 	bl	8005ea8 <HAL_GetTick>
 800ed4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	88fa      	ldrh	r2, [r7, #6]
 800ed50:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	88fa      	ldrh	r2, [r7, #6]
 800ed58:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ed64:	d108      	bne.n	800ed78 <HAL_UART_Transmit+0x68>
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	691b      	ldr	r3, [r3, #16]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d104      	bne.n	800ed78 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ed72:	68bb      	ldr	r3, [r7, #8]
 800ed74:	61bb      	str	r3, [r7, #24]
 800ed76:	e003      	b.n	800ed80 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ed78:	68bb      	ldr	r3, [r7, #8]
 800ed7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ed80:	e02f      	b.n	800ede2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	2180      	movs	r1, #128	@ 0x80
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f001 f846 	bl	800fe1e <UART_WaitOnFlagUntilTimeout>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d004      	beq.n	800eda2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	2220      	movs	r2, #32
 800ed9c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	e03b      	b.n	800ee1a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d10b      	bne.n	800edc0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	461a      	mov	r2, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800edb6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	3302      	adds	r3, #2
 800edbc:	61bb      	str	r3, [r7, #24]
 800edbe:	e007      	b.n	800edd0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	781a      	ldrb	r2, [r3, #0]
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	3301      	adds	r3, #1
 800edce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	3b01      	subs	r3, #1
 800edda:	b29a      	uxth	r2, r3
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ede8:	b29b      	uxth	r3, r3
 800edea:	2b00      	cmp	r3, #0
 800edec:	d1c9      	bne.n	800ed82 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800edee:	683b      	ldr	r3, [r7, #0]
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	2200      	movs	r2, #0
 800edf6:	2140      	movs	r1, #64	@ 0x40
 800edf8:	68f8      	ldr	r0, [r7, #12]
 800edfa:	f001 f810 	bl	800fe1e <UART_WaitOnFlagUntilTimeout>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d004      	beq.n	800ee0e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	2220      	movs	r2, #32
 800ee08:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ee0a:	2303      	movs	r3, #3
 800ee0c:	e005      	b.n	800ee1a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2220      	movs	r2, #32
 800ee12:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ee14:	2300      	movs	r3, #0
 800ee16:	e000      	b.n	800ee1a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ee18:	2302      	movs	r3, #2
  }
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b08a      	sub	sp, #40	@ 0x28
 800ee26:	af02      	add	r7, sp, #8
 800ee28:	60f8      	str	r0, [r7, #12]
 800ee2a:	60b9      	str	r1, [r7, #8]
 800ee2c:	603b      	str	r3, [r7, #0]
 800ee2e:	4613      	mov	r3, r2
 800ee30:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ee38:	2b20      	cmp	r3, #32
 800ee3a:	f040 80b5 	bne.w	800efa8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d002      	beq.n	800ee4a <HAL_UART_Receive+0x28>
 800ee44:	88fb      	ldrh	r3, [r7, #6]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d101      	bne.n	800ee4e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e0ad      	b.n	800efaa <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	2222      	movs	r2, #34	@ 0x22
 800ee5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ee64:	f7f7 f820 	bl	8005ea8 <HAL_GetTick>
 800ee68:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	88fa      	ldrh	r2, [r7, #6]
 800ee6e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	88fa      	ldrh	r2, [r7, #6]
 800ee76:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ee82:	d10e      	bne.n	800eea2 <HAL_UART_Receive+0x80>
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d105      	bne.n	800ee98 <HAL_UART_Receive+0x76>
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800ee92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800ee96:	e02d      	b.n	800eef4 <HAL_UART_Receive+0xd2>
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	22ff      	movs	r2, #255	@ 0xff
 800ee9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eea0:	e028      	b.n	800eef4 <HAL_UART_Receive+0xd2>
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	689b      	ldr	r3, [r3, #8]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10d      	bne.n	800eec6 <HAL_UART_Receive+0xa4>
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	691b      	ldr	r3, [r3, #16]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d104      	bne.n	800eebc <HAL_UART_Receive+0x9a>
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	22ff      	movs	r2, #255	@ 0xff
 800eeb6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eeba:	e01b      	b.n	800eef4 <HAL_UART_Receive+0xd2>
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	227f      	movs	r2, #127	@ 0x7f
 800eec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eec4:	e016      	b.n	800eef4 <HAL_UART_Receive+0xd2>
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eece:	d10d      	bne.n	800eeec <HAL_UART_Receive+0xca>
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d104      	bne.n	800eee2 <HAL_UART_Receive+0xc0>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	227f      	movs	r2, #127	@ 0x7f
 800eedc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eee0:	e008      	b.n	800eef4 <HAL_UART_Receive+0xd2>
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	223f      	movs	r2, #63	@ 0x3f
 800eee6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800eeea:	e003      	b.n	800eef4 <HAL_UART_Receive+0xd2>
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2200      	movs	r2, #0
 800eef0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800eefa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ef04:	d108      	bne.n	800ef18 <HAL_UART_Receive+0xf6>
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d104      	bne.n	800ef18 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	61bb      	str	r3, [r7, #24]
 800ef16:	e003      	b.n	800ef20 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ef20:	e036      	b.n	800ef90 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	9300      	str	r3, [sp, #0]
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	2200      	movs	r2, #0
 800ef2a:	2120      	movs	r1, #32
 800ef2c:	68f8      	ldr	r0, [r7, #12]
 800ef2e:	f000 ff76 	bl	800fe1e <UART_WaitOnFlagUntilTimeout>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d005      	beq.n	800ef44 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2220      	movs	r2, #32
 800ef3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800ef40:	2303      	movs	r3, #3
 800ef42:	e032      	b.n	800efaa <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d10c      	bne.n	800ef64 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	8a7b      	ldrh	r3, [r7, #18]
 800ef54:	4013      	ands	r3, r2
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ef5c:	69bb      	ldr	r3, [r7, #24]
 800ef5e:	3302      	adds	r3, #2
 800ef60:	61bb      	str	r3, [r7, #24]
 800ef62:	e00c      	b.n	800ef7e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	8a7b      	ldrh	r3, [r7, #18]
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	4013      	ands	r3, r2
 800ef72:	b2da      	uxtb	r2, r3
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ef84:	b29b      	uxth	r3, r3
 800ef86:	3b01      	subs	r3, #1
 800ef88:	b29a      	uxth	r2, r3
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d1c2      	bne.n	800ef22 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2220      	movs	r2, #32
 800efa0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	e000      	b.n	800efaa <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800efa8:	2302      	movs	r3, #2
  }
}
 800efaa:	4618      	mov	r0, r3
 800efac:	3720      	adds	r7, #32
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b08a      	sub	sp, #40	@ 0x28
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	60f8      	str	r0, [r7, #12]
 800efba:	60b9      	str	r1, [r7, #8]
 800efbc:	4613      	mov	r3, r2
 800efbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800efc6:	2b20      	cmp	r3, #32
 800efc8:	d132      	bne.n	800f030 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d002      	beq.n	800efd6 <HAL_UART_Receive_DMA+0x24>
 800efd0:	88fb      	ldrh	r3, [r7, #6]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d101      	bne.n	800efda <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800efd6:	2301      	movs	r3, #1
 800efd8:	e02b      	b.n	800f032 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	2200      	movs	r2, #0
 800efde:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800efea:	2b00      	cmp	r3, #0
 800efec:	d018      	beq.n	800f020 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	e853 3f00 	ldrex	r3, [r3]
 800effa:	613b      	str	r3, [r7, #16]
   return(result);
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f002:	627b      	str	r3, [r7, #36]	@ 0x24
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	461a      	mov	r2, r3
 800f00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f00c:	623b      	str	r3, [r7, #32]
 800f00e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f010:	69f9      	ldr	r1, [r7, #28]
 800f012:	6a3a      	ldr	r2, [r7, #32]
 800f014:	e841 2300 	strex	r3, r2, [r1]
 800f018:	61bb      	str	r3, [r7, #24]
   return(result);
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1e6      	bne.n	800efee <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f020:	88fb      	ldrh	r3, [r7, #6]
 800f022:	461a      	mov	r2, r3
 800f024:	68b9      	ldr	r1, [r7, #8]
 800f026:	68f8      	ldr	r0, [r7, #12]
 800f028:	f000 ff66 	bl	800fef8 <UART_Start_Receive_DMA>
 800f02c:	4603      	mov	r3, r0
 800f02e:	e000      	b.n	800f032 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f030:	2302      	movs	r3, #2
  }
}
 800f032:	4618      	mov	r0, r3
 800f034:	3728      	adds	r7, #40	@ 0x28
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b090      	sub	sp, #64	@ 0x40
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f04e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	689b      	ldr	r3, [r3, #8]
 800f056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f05a:	2b80      	cmp	r3, #128	@ 0x80
 800f05c:	d139      	bne.n	800f0d2 <HAL_UART_DMAStop+0x98>
 800f05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f060:	2b21      	cmp	r3, #33	@ 0x21
 800f062:	d136      	bne.n	800f0d2 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	3308      	adds	r3, #8
 800f06a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f06c:	6a3b      	ldr	r3, [r7, #32]
 800f06e:	e853 3f00 	ldrex	r3, [r3]
 800f072:	61fb      	str	r3, [r7, #28]
   return(result);
 800f074:	69fb      	ldr	r3, [r7, #28]
 800f076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f07a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	3308      	adds	r3, #8
 800f082:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f084:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f086:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f08a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f08c:	e841 2300 	strex	r3, r2, [r1]
 800f090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f094:	2b00      	cmp	r3, #0
 800f096:	d1e5      	bne.n	800f064 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d015      	beq.n	800f0cc <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	f7f7 fd81 	bl	8006bac <HAL_DMA_Abort>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00d      	beq.n	800f0cc <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7f7 ff95 	bl	8006fe4 <HAL_DMA_GetError>
 800f0ba:	4603      	mov	r3, r0
 800f0bc:	2b20      	cmp	r3, #32
 800f0be:	d105      	bne.n	800f0cc <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2210      	movs	r2, #16
 800f0c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f0c8:	2303      	movs	r3, #3
 800f0ca:	e044      	b.n	800f156 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	f000 ffb3 	bl	8010038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0dc:	2b40      	cmp	r3, #64	@ 0x40
 800f0de:	d139      	bne.n	800f154 <HAL_UART_DMAStop+0x11a>
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e2:	2b22      	cmp	r3, #34	@ 0x22
 800f0e4:	d136      	bne.n	800f154 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	3308      	adds	r3, #8
 800f0ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	e853 3f00 	ldrex	r3, [r3]
 800f0f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	3308      	adds	r3, #8
 800f104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f106:	61ba      	str	r2, [r7, #24]
 800f108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10a:	6979      	ldr	r1, [r7, #20]
 800f10c:	69ba      	ldr	r2, [r7, #24]
 800f10e:	e841 2300 	strex	r3, r2, [r1]
 800f112:	613b      	str	r3, [r7, #16]
   return(result);
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1e5      	bne.n	800f0e6 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d015      	beq.n	800f14e <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f126:	4618      	mov	r0, r3
 800f128:	f7f7 fd40 	bl	8006bac <HAL_DMA_Abort>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d00d      	beq.n	800f14e <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f136:	4618      	mov	r0, r3
 800f138:	f7f7 ff54 	bl	8006fe4 <HAL_DMA_GetError>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b20      	cmp	r3, #32
 800f140:	d105      	bne.n	800f14e <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2210      	movs	r2, #16
 800f146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f14a:	2303      	movs	r3, #3
 800f14c:	e003      	b.n	800f156 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 ff98 	bl	8010084 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3740      	adds	r7, #64	@ 0x40
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
	...

0800f160 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b0ba      	sub	sp, #232	@ 0xe8
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	69db      	ldr	r3, [r3, #28]
 800f16e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f186:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f18a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f18e:	4013      	ands	r3, r2
 800f190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f194:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d115      	bne.n	800f1c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1a0:	f003 0320 	and.w	r3, r3, #32
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d00f      	beq.n	800f1c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1ac:	f003 0320 	and.w	r3, r3, #32
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d009      	beq.n	800f1c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	f000 82b1 	beq.w	800f720 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	4798      	blx	r3
      }
      return;
 800f1c6:	e2ab      	b.n	800f720 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f1c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f000 8117 	beq.w	800f400 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f1d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f1d6:	f003 0301 	and.w	r3, r3, #1
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d106      	bne.n	800f1ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f1de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f1e2:	4b85      	ldr	r3, [pc, #532]	@ (800f3f8 <HAL_UART_IRQHandler+0x298>)
 800f1e4:	4013      	ands	r3, r2
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f000 810a 	beq.w	800f400 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f1ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1f0:	f003 0301 	and.w	r3, r3, #1
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d011      	beq.n	800f21c <HAL_UART_IRQHandler+0xbc>
 800f1f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f1fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00b      	beq.n	800f21c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2201      	movs	r2, #1
 800f20a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f212:	f043 0201 	orr.w	r2, r3, #1
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f220:	f003 0302 	and.w	r3, r3, #2
 800f224:	2b00      	cmp	r3, #0
 800f226:	d011      	beq.n	800f24c <HAL_UART_IRQHandler+0xec>
 800f228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00b      	beq.n	800f24c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	2202      	movs	r2, #2
 800f23a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f242:	f043 0204 	orr.w	r2, r3, #4
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f24c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f250:	f003 0304 	and.w	r3, r3, #4
 800f254:	2b00      	cmp	r3, #0
 800f256:	d011      	beq.n	800f27c <HAL_UART_IRQHandler+0x11c>
 800f258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f25c:	f003 0301 	and.w	r3, r3, #1
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00b      	beq.n	800f27c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	2204      	movs	r2, #4
 800f26a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f272:	f043 0202 	orr.w	r2, r3, #2
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f280:	f003 0308 	and.w	r3, r3, #8
 800f284:	2b00      	cmp	r3, #0
 800f286:	d017      	beq.n	800f2b8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f28c:	f003 0320 	and.w	r3, r3, #32
 800f290:	2b00      	cmp	r3, #0
 800f292:	d105      	bne.n	800f2a0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f294:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f298:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00b      	beq.n	800f2b8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	2208      	movs	r2, #8
 800f2a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2ae:	f043 0208 	orr.w	r2, r3, #8
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f2b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d012      	beq.n	800f2ea <HAL_UART_IRQHandler+0x18a>
 800f2c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00c      	beq.n	800f2ea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f2d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2e0:	f043 0220 	orr.w	r2, r3, #32
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	f000 8217 	beq.w	800f724 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2fa:	f003 0320 	and.w	r3, r3, #32
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00d      	beq.n	800f31e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f306:	f003 0320 	and.w	r3, r3, #32
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d007      	beq.n	800f31e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f312:	2b00      	cmp	r3, #0
 800f314:	d003      	beq.n	800f31e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f324:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	689b      	ldr	r3, [r3, #8]
 800f32e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f332:	2b40      	cmp	r3, #64	@ 0x40
 800f334:	d005      	beq.n	800f342 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f33a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d04f      	beq.n	800f3e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fe9e 	bl	8010084 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f352:	2b40      	cmp	r3, #64	@ 0x40
 800f354:	d141      	bne.n	800f3da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	3308      	adds	r3, #8
 800f35c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f364:	e853 3f00 	ldrex	r3, [r3]
 800f368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f36c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	3308      	adds	r3, #8
 800f37e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f382:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f38a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f38e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f392:	e841 2300 	strex	r3, r2, [r1]
 800f396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f39a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1d9      	bne.n	800f356 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d013      	beq.n	800f3d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3ae:	4a13      	ldr	r2, [pc, #76]	@ (800f3fc <HAL_UART_IRQHandler+0x29c>)
 800f3b0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f7f7 fc68 	bl	8006c8c <HAL_DMA_Abort_IT>
 800f3bc:	4603      	mov	r3, r0
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d017      	beq.n	800f3f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3d0:	e00f      	b.n	800f3f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f7f6 fbf6 	bl	8005bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3d8:	e00b      	b.n	800f3f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7f6 fbf2 	bl	8005bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3e0:	e007      	b.n	800f3f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f7f6 fbee 	bl	8005bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800f3f0:	e198      	b.n	800f724 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3f2:	bf00      	nop
    return;
 800f3f4:	e196      	b.n	800f724 <HAL_UART_IRQHandler+0x5c4>
 800f3f6:	bf00      	nop
 800f3f8:	04000120 	.word	0x04000120
 800f3fc:	0801039b 	.word	0x0801039b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f404:	2b01      	cmp	r3, #1
 800f406:	f040 8166 	bne.w	800f6d6 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f40a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f40e:	f003 0310 	and.w	r3, r3, #16
 800f412:	2b00      	cmp	r3, #0
 800f414:	f000 815f 	beq.w	800f6d6 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f41c:	f003 0310 	and.w	r3, r3, #16
 800f420:	2b00      	cmp	r3, #0
 800f422:	f000 8158 	beq.w	800f6d6 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2210      	movs	r2, #16
 800f42c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	689b      	ldr	r3, [r3, #8]
 800f434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f438:	2b40      	cmp	r3, #64	@ 0x40
 800f43a:	f040 80d0 	bne.w	800f5de <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f44a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f44e:	2b00      	cmp	r3, #0
 800f450:	f000 80ab 	beq.w	800f5aa <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f45a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f45e:	429a      	cmp	r2, r3
 800f460:	f080 80a3 	bcs.w	800f5aa <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f46a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f472:	69db      	ldr	r3, [r3, #28]
 800f474:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f478:	f000 8086 	beq.w	800f588 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f484:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f488:	e853 3f00 	ldrex	r3, [r3]
 800f48c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f490:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f498:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f4a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f4aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f4b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f4b6:	e841 2300 	strex	r3, r2, [r1]
 800f4ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f4be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1da      	bne.n	800f47c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	3308      	adds	r3, #8
 800f4cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f4d0:	e853 3f00 	ldrex	r3, [r3]
 800f4d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f4d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f4d8:	f023 0301 	bic.w	r3, r3, #1
 800f4dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	3308      	adds	r3, #8
 800f4e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f4ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f4ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f4f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f4f6:	e841 2300 	strex	r3, r2, [r1]
 800f4fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f4fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1e1      	bne.n	800f4c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3308      	adds	r3, #8
 800f508:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f50a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f50c:	e853 3f00 	ldrex	r3, [r3]
 800f510:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f518:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	3308      	adds	r3, #8
 800f522:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f526:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f528:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f52a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f52c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f52e:	e841 2300 	strex	r3, r2, [r1]
 800f532:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f536:	2b00      	cmp	r3, #0
 800f538:	d1e3      	bne.n	800f502 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2220      	movs	r2, #32
 800f53e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	2200      	movs	r2, #0
 800f546:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f54e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f550:	e853 3f00 	ldrex	r3, [r3]
 800f554:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f558:	f023 0310 	bic.w	r3, r3, #16
 800f55c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	461a      	mov	r2, r3
 800f566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f56a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f56c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f56e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f572:	e841 2300 	strex	r3, r2, [r1]
 800f576:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1e4      	bne.n	800f548 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f582:	4618      	mov	r0, r3
 800f584:	f7f7 fb12 	bl	8006bac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	2202      	movs	r2, #2
 800f58c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	1ad3      	subs	r3, r2, r3
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 f8d2 	bl	800f74c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f5a8:	e0be      	b.n	800f728 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f5b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	f040 80b7 	bne.w	800f728 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f5be:	69db      	ldr	r3, [r3, #28]
 800f5c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f5c4:	f040 80b0 	bne.w	800f728 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2202      	movs	r2, #2
 800f5cc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 f8b8 	bl	800f74c <HAL_UARTEx_RxEventCallback>
      return;
 800f5dc:	e0a4      	b.n	800f728 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f000 8096 	beq.w	800f72c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800f600:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f604:	2b00      	cmp	r3, #0
 800f606:	f000 8091 	beq.w	800f72c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f612:	e853 3f00 	ldrex	r3, [r3]
 800f616:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f61a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f61e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	461a      	mov	r2, r3
 800f628:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f62c:	647b      	str	r3, [r7, #68]	@ 0x44
 800f62e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f634:	e841 2300 	strex	r3, r2, [r1]
 800f638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f63a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1e4      	bne.n	800f60a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	3308      	adds	r3, #8
 800f646:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f64a:	e853 3f00 	ldrex	r3, [r3]
 800f64e:	623b      	str	r3, [r7, #32]
   return(result);
 800f650:	6a3b      	ldr	r3, [r7, #32]
 800f652:	f023 0301 	bic.w	r3, r3, #1
 800f656:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	3308      	adds	r3, #8
 800f660:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f664:	633a      	str	r2, [r7, #48]	@ 0x30
 800f666:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f66c:	e841 2300 	strex	r3, r2, [r1]
 800f670:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f674:	2b00      	cmp	r3, #0
 800f676:	d1e3      	bne.n	800f640 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2220      	movs	r2, #32
 800f67c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2200      	movs	r2, #0
 800f68a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	e853 3f00 	ldrex	r3, [r3]
 800f698:	60fb      	str	r3, [r7, #12]
   return(result);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f023 0310 	bic.w	r3, r3, #16
 800f6a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f6ae:	61fb      	str	r3, [r7, #28]
 800f6b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b2:	69b9      	ldr	r1, [r7, #24]
 800f6b4:	69fa      	ldr	r2, [r7, #28]
 800f6b6:	e841 2300 	strex	r3, r2, [r1]
 800f6ba:	617b      	str	r3, [r7, #20]
   return(result);
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1e4      	bne.n	800f68c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2202      	movs	r2, #2
 800f6c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f6c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 f83c 	bl	800f74c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f6d4:	e02a      	b.n	800f72c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d00e      	beq.n	800f700 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f6e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d008      	beq.n	800f700 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d01c      	beq.n	800f730 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	4798      	blx	r3
    }
    return;
 800f6fe:	e017      	b.n	800f730 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d012      	beq.n	800f732 <HAL_UART_IRQHandler+0x5d2>
 800f70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f714:	2b00      	cmp	r3, #0
 800f716:	d00c      	beq.n	800f732 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 fe50 	bl	80103be <UART_EndTransmit_IT>
    return;
 800f71e:	e008      	b.n	800f732 <HAL_UART_IRQHandler+0x5d2>
      return;
 800f720:	bf00      	nop
 800f722:	e006      	b.n	800f732 <HAL_UART_IRQHandler+0x5d2>
    return;
 800f724:	bf00      	nop
 800f726:	e004      	b.n	800f732 <HAL_UART_IRQHandler+0x5d2>
      return;
 800f728:	bf00      	nop
 800f72a:	e002      	b.n	800f732 <HAL_UART_IRQHandler+0x5d2>
      return;
 800f72c:	bf00      	nop
 800f72e:	e000      	b.n	800f732 <HAL_UART_IRQHandler+0x5d2>
    return;
 800f730:	bf00      	nop
  }

}
 800f732:	37e8      	adds	r7, #232	@ 0xe8
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f740:	bf00      	nop
 800f742:	370c      	adds	r7, #12
 800f744:	46bd      	mov	sp, r7
 800f746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74a:	4770      	bx	lr

0800f74c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	460b      	mov	r3, r1
 800f756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f758:	bf00      	nop
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b088      	sub	sp, #32
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f76c:	2300      	movs	r3, #0
 800f76e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	689a      	ldr	r2, [r3, #8]
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	431a      	orrs	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	431a      	orrs	r2, r3
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	69db      	ldr	r3, [r3, #28]
 800f784:	4313      	orrs	r3, r2
 800f786:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	681a      	ldr	r2, [r3, #0]
 800f78e:	4ba6      	ldr	r3, [pc, #664]	@ (800fa28 <UART_SetConfig+0x2c4>)
 800f790:	4013      	ands	r3, r2
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	6812      	ldr	r2, [r2, #0]
 800f796:	6979      	ldr	r1, [r7, #20]
 800f798:	430b      	orrs	r3, r1
 800f79a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	685b      	ldr	r3, [r3, #4]
 800f7a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	68da      	ldr	r2, [r3, #12]
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	430a      	orrs	r2, r1
 800f7b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	699b      	ldr	r3, [r3, #24]
 800f7b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a1b      	ldr	r3, [r3, #32]
 800f7bc:	697a      	ldr	r2, [r7, #20]
 800f7be:	4313      	orrs	r3, r2
 800f7c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	430a      	orrs	r2, r1
 800f7d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	4a94      	ldr	r2, [pc, #592]	@ (800fa2c <UART_SetConfig+0x2c8>)
 800f7dc:	4293      	cmp	r3, r2
 800f7de:	d120      	bne.n	800f822 <UART_SetConfig+0xbe>
 800f7e0:	4b93      	ldr	r3, [pc, #588]	@ (800fa30 <UART_SetConfig+0x2cc>)
 800f7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7e6:	f003 0303 	and.w	r3, r3, #3
 800f7ea:	2b03      	cmp	r3, #3
 800f7ec:	d816      	bhi.n	800f81c <UART_SetConfig+0xb8>
 800f7ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f7f4 <UART_SetConfig+0x90>)
 800f7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7f4:	0800f805 	.word	0x0800f805
 800f7f8:	0800f811 	.word	0x0800f811
 800f7fc:	0800f80b 	.word	0x0800f80b
 800f800:	0800f817 	.word	0x0800f817
 800f804:	2301      	movs	r3, #1
 800f806:	77fb      	strb	r3, [r7, #31]
 800f808:	e150      	b.n	800faac <UART_SetConfig+0x348>
 800f80a:	2302      	movs	r3, #2
 800f80c:	77fb      	strb	r3, [r7, #31]
 800f80e:	e14d      	b.n	800faac <UART_SetConfig+0x348>
 800f810:	2304      	movs	r3, #4
 800f812:	77fb      	strb	r3, [r7, #31]
 800f814:	e14a      	b.n	800faac <UART_SetConfig+0x348>
 800f816:	2308      	movs	r3, #8
 800f818:	77fb      	strb	r3, [r7, #31]
 800f81a:	e147      	b.n	800faac <UART_SetConfig+0x348>
 800f81c:	2310      	movs	r3, #16
 800f81e:	77fb      	strb	r3, [r7, #31]
 800f820:	e144      	b.n	800faac <UART_SetConfig+0x348>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	4a83      	ldr	r2, [pc, #524]	@ (800fa34 <UART_SetConfig+0x2d0>)
 800f828:	4293      	cmp	r3, r2
 800f82a:	d132      	bne.n	800f892 <UART_SetConfig+0x12e>
 800f82c:	4b80      	ldr	r3, [pc, #512]	@ (800fa30 <UART_SetConfig+0x2cc>)
 800f82e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f832:	f003 030c 	and.w	r3, r3, #12
 800f836:	2b0c      	cmp	r3, #12
 800f838:	d828      	bhi.n	800f88c <UART_SetConfig+0x128>
 800f83a:	a201      	add	r2, pc, #4	@ (adr r2, 800f840 <UART_SetConfig+0xdc>)
 800f83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f840:	0800f875 	.word	0x0800f875
 800f844:	0800f88d 	.word	0x0800f88d
 800f848:	0800f88d 	.word	0x0800f88d
 800f84c:	0800f88d 	.word	0x0800f88d
 800f850:	0800f881 	.word	0x0800f881
 800f854:	0800f88d 	.word	0x0800f88d
 800f858:	0800f88d 	.word	0x0800f88d
 800f85c:	0800f88d 	.word	0x0800f88d
 800f860:	0800f87b 	.word	0x0800f87b
 800f864:	0800f88d 	.word	0x0800f88d
 800f868:	0800f88d 	.word	0x0800f88d
 800f86c:	0800f88d 	.word	0x0800f88d
 800f870:	0800f887 	.word	0x0800f887
 800f874:	2300      	movs	r3, #0
 800f876:	77fb      	strb	r3, [r7, #31]
 800f878:	e118      	b.n	800faac <UART_SetConfig+0x348>
 800f87a:	2302      	movs	r3, #2
 800f87c:	77fb      	strb	r3, [r7, #31]
 800f87e:	e115      	b.n	800faac <UART_SetConfig+0x348>
 800f880:	2304      	movs	r3, #4
 800f882:	77fb      	strb	r3, [r7, #31]
 800f884:	e112      	b.n	800faac <UART_SetConfig+0x348>
 800f886:	2308      	movs	r3, #8
 800f888:	77fb      	strb	r3, [r7, #31]
 800f88a:	e10f      	b.n	800faac <UART_SetConfig+0x348>
 800f88c:	2310      	movs	r3, #16
 800f88e:	77fb      	strb	r3, [r7, #31]
 800f890:	e10c      	b.n	800faac <UART_SetConfig+0x348>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4a68      	ldr	r2, [pc, #416]	@ (800fa38 <UART_SetConfig+0x2d4>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d120      	bne.n	800f8de <UART_SetConfig+0x17a>
 800f89c:	4b64      	ldr	r3, [pc, #400]	@ (800fa30 <UART_SetConfig+0x2cc>)
 800f89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8a2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f8a6:	2b30      	cmp	r3, #48	@ 0x30
 800f8a8:	d013      	beq.n	800f8d2 <UART_SetConfig+0x16e>
 800f8aa:	2b30      	cmp	r3, #48	@ 0x30
 800f8ac:	d814      	bhi.n	800f8d8 <UART_SetConfig+0x174>
 800f8ae:	2b20      	cmp	r3, #32
 800f8b0:	d009      	beq.n	800f8c6 <UART_SetConfig+0x162>
 800f8b2:	2b20      	cmp	r3, #32
 800f8b4:	d810      	bhi.n	800f8d8 <UART_SetConfig+0x174>
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <UART_SetConfig+0x15c>
 800f8ba:	2b10      	cmp	r3, #16
 800f8bc:	d006      	beq.n	800f8cc <UART_SetConfig+0x168>
 800f8be:	e00b      	b.n	800f8d8 <UART_SetConfig+0x174>
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	77fb      	strb	r3, [r7, #31]
 800f8c4:	e0f2      	b.n	800faac <UART_SetConfig+0x348>
 800f8c6:	2302      	movs	r3, #2
 800f8c8:	77fb      	strb	r3, [r7, #31]
 800f8ca:	e0ef      	b.n	800faac <UART_SetConfig+0x348>
 800f8cc:	2304      	movs	r3, #4
 800f8ce:	77fb      	strb	r3, [r7, #31]
 800f8d0:	e0ec      	b.n	800faac <UART_SetConfig+0x348>
 800f8d2:	2308      	movs	r3, #8
 800f8d4:	77fb      	strb	r3, [r7, #31]
 800f8d6:	e0e9      	b.n	800faac <UART_SetConfig+0x348>
 800f8d8:	2310      	movs	r3, #16
 800f8da:	77fb      	strb	r3, [r7, #31]
 800f8dc:	e0e6      	b.n	800faac <UART_SetConfig+0x348>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4a56      	ldr	r2, [pc, #344]	@ (800fa3c <UART_SetConfig+0x2d8>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d120      	bne.n	800f92a <UART_SetConfig+0x1c6>
 800f8e8:	4b51      	ldr	r3, [pc, #324]	@ (800fa30 <UART_SetConfig+0x2cc>)
 800f8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f8f2:	2bc0      	cmp	r3, #192	@ 0xc0
 800f8f4:	d013      	beq.n	800f91e <UART_SetConfig+0x1ba>
 800f8f6:	2bc0      	cmp	r3, #192	@ 0xc0
 800f8f8:	d814      	bhi.n	800f924 <UART_SetConfig+0x1c0>
 800f8fa:	2b80      	cmp	r3, #128	@ 0x80
 800f8fc:	d009      	beq.n	800f912 <UART_SetConfig+0x1ae>
 800f8fe:	2b80      	cmp	r3, #128	@ 0x80
 800f900:	d810      	bhi.n	800f924 <UART_SetConfig+0x1c0>
 800f902:	2b00      	cmp	r3, #0
 800f904:	d002      	beq.n	800f90c <UART_SetConfig+0x1a8>
 800f906:	2b40      	cmp	r3, #64	@ 0x40
 800f908:	d006      	beq.n	800f918 <UART_SetConfig+0x1b4>
 800f90a:	e00b      	b.n	800f924 <UART_SetConfig+0x1c0>
 800f90c:	2300      	movs	r3, #0
 800f90e:	77fb      	strb	r3, [r7, #31]
 800f910:	e0cc      	b.n	800faac <UART_SetConfig+0x348>
 800f912:	2302      	movs	r3, #2
 800f914:	77fb      	strb	r3, [r7, #31]
 800f916:	e0c9      	b.n	800faac <UART_SetConfig+0x348>
 800f918:	2304      	movs	r3, #4
 800f91a:	77fb      	strb	r3, [r7, #31]
 800f91c:	e0c6      	b.n	800faac <UART_SetConfig+0x348>
 800f91e:	2308      	movs	r3, #8
 800f920:	77fb      	strb	r3, [r7, #31]
 800f922:	e0c3      	b.n	800faac <UART_SetConfig+0x348>
 800f924:	2310      	movs	r3, #16
 800f926:	77fb      	strb	r3, [r7, #31]
 800f928:	e0c0      	b.n	800faac <UART_SetConfig+0x348>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4a44      	ldr	r2, [pc, #272]	@ (800fa40 <UART_SetConfig+0x2dc>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d125      	bne.n	800f980 <UART_SetConfig+0x21c>
 800f934:	4b3e      	ldr	r3, [pc, #248]	@ (800fa30 <UART_SetConfig+0x2cc>)
 800f936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f93a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f93e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f942:	d017      	beq.n	800f974 <UART_SetConfig+0x210>
 800f944:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f948:	d817      	bhi.n	800f97a <UART_SetConfig+0x216>
 800f94a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f94e:	d00b      	beq.n	800f968 <UART_SetConfig+0x204>
 800f950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f954:	d811      	bhi.n	800f97a <UART_SetConfig+0x216>
 800f956:	2b00      	cmp	r3, #0
 800f958:	d003      	beq.n	800f962 <UART_SetConfig+0x1fe>
 800f95a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f95e:	d006      	beq.n	800f96e <UART_SetConfig+0x20a>
 800f960:	e00b      	b.n	800f97a <UART_SetConfig+0x216>
 800f962:	2300      	movs	r3, #0
 800f964:	77fb      	strb	r3, [r7, #31]
 800f966:	e0a1      	b.n	800faac <UART_SetConfig+0x348>
 800f968:	2302      	movs	r3, #2
 800f96a:	77fb      	strb	r3, [r7, #31]
 800f96c:	e09e      	b.n	800faac <UART_SetConfig+0x348>
 800f96e:	2304      	movs	r3, #4
 800f970:	77fb      	strb	r3, [r7, #31]
 800f972:	e09b      	b.n	800faac <UART_SetConfig+0x348>
 800f974:	2308      	movs	r3, #8
 800f976:	77fb      	strb	r3, [r7, #31]
 800f978:	e098      	b.n	800faac <UART_SetConfig+0x348>
 800f97a:	2310      	movs	r3, #16
 800f97c:	77fb      	strb	r3, [r7, #31]
 800f97e:	e095      	b.n	800faac <UART_SetConfig+0x348>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a2f      	ldr	r2, [pc, #188]	@ (800fa44 <UART_SetConfig+0x2e0>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d125      	bne.n	800f9d6 <UART_SetConfig+0x272>
 800f98a:	4b29      	ldr	r3, [pc, #164]	@ (800fa30 <UART_SetConfig+0x2cc>)
 800f98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f990:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f994:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f998:	d017      	beq.n	800f9ca <UART_SetConfig+0x266>
 800f99a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f99e:	d817      	bhi.n	800f9d0 <UART_SetConfig+0x26c>
 800f9a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f9a4:	d00b      	beq.n	800f9be <UART_SetConfig+0x25a>
 800f9a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f9aa:	d811      	bhi.n	800f9d0 <UART_SetConfig+0x26c>
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d003      	beq.n	800f9b8 <UART_SetConfig+0x254>
 800f9b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f9b4:	d006      	beq.n	800f9c4 <UART_SetConfig+0x260>
 800f9b6:	e00b      	b.n	800f9d0 <UART_SetConfig+0x26c>
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	77fb      	strb	r3, [r7, #31]
 800f9bc:	e076      	b.n	800faac <UART_SetConfig+0x348>
 800f9be:	2302      	movs	r3, #2
 800f9c0:	77fb      	strb	r3, [r7, #31]
 800f9c2:	e073      	b.n	800faac <UART_SetConfig+0x348>
 800f9c4:	2304      	movs	r3, #4
 800f9c6:	77fb      	strb	r3, [r7, #31]
 800f9c8:	e070      	b.n	800faac <UART_SetConfig+0x348>
 800f9ca:	2308      	movs	r3, #8
 800f9cc:	77fb      	strb	r3, [r7, #31]
 800f9ce:	e06d      	b.n	800faac <UART_SetConfig+0x348>
 800f9d0:	2310      	movs	r3, #16
 800f9d2:	77fb      	strb	r3, [r7, #31]
 800f9d4:	e06a      	b.n	800faac <UART_SetConfig+0x348>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	4a1b      	ldr	r2, [pc, #108]	@ (800fa48 <UART_SetConfig+0x2e4>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d138      	bne.n	800fa52 <UART_SetConfig+0x2ee>
 800f9e0:	4b13      	ldr	r3, [pc, #76]	@ (800fa30 <UART_SetConfig+0x2cc>)
 800f9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f9e6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f9ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f9ee:	d017      	beq.n	800fa20 <UART_SetConfig+0x2bc>
 800f9f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f9f4:	d82a      	bhi.n	800fa4c <UART_SetConfig+0x2e8>
 800f9f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f9fa:	d00b      	beq.n	800fa14 <UART_SetConfig+0x2b0>
 800f9fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa00:	d824      	bhi.n	800fa4c <UART_SetConfig+0x2e8>
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <UART_SetConfig+0x2aa>
 800fa06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fa0a:	d006      	beq.n	800fa1a <UART_SetConfig+0x2b6>
 800fa0c:	e01e      	b.n	800fa4c <UART_SetConfig+0x2e8>
 800fa0e:	2300      	movs	r3, #0
 800fa10:	77fb      	strb	r3, [r7, #31]
 800fa12:	e04b      	b.n	800faac <UART_SetConfig+0x348>
 800fa14:	2302      	movs	r3, #2
 800fa16:	77fb      	strb	r3, [r7, #31]
 800fa18:	e048      	b.n	800faac <UART_SetConfig+0x348>
 800fa1a:	2304      	movs	r3, #4
 800fa1c:	77fb      	strb	r3, [r7, #31]
 800fa1e:	e045      	b.n	800faac <UART_SetConfig+0x348>
 800fa20:	2308      	movs	r3, #8
 800fa22:	77fb      	strb	r3, [r7, #31]
 800fa24:	e042      	b.n	800faac <UART_SetConfig+0x348>
 800fa26:	bf00      	nop
 800fa28:	efff69f3 	.word	0xefff69f3
 800fa2c:	40011000 	.word	0x40011000
 800fa30:	40023800 	.word	0x40023800
 800fa34:	40004400 	.word	0x40004400
 800fa38:	40004800 	.word	0x40004800
 800fa3c:	40004c00 	.word	0x40004c00
 800fa40:	40005000 	.word	0x40005000
 800fa44:	40011400 	.word	0x40011400
 800fa48:	40007800 	.word	0x40007800
 800fa4c:	2310      	movs	r3, #16
 800fa4e:	77fb      	strb	r3, [r7, #31]
 800fa50:	e02c      	b.n	800faac <UART_SetConfig+0x348>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a72      	ldr	r2, [pc, #456]	@ (800fc20 <UART_SetConfig+0x4bc>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d125      	bne.n	800faa8 <UART_SetConfig+0x344>
 800fa5c:	4b71      	ldr	r3, [pc, #452]	@ (800fc24 <UART_SetConfig+0x4c0>)
 800fa5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fa62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800fa66:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800fa6a:	d017      	beq.n	800fa9c <UART_SetConfig+0x338>
 800fa6c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800fa70:	d817      	bhi.n	800faa2 <UART_SetConfig+0x33e>
 800fa72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa76:	d00b      	beq.n	800fa90 <UART_SetConfig+0x32c>
 800fa78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fa7c:	d811      	bhi.n	800faa2 <UART_SetConfig+0x33e>
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d003      	beq.n	800fa8a <UART_SetConfig+0x326>
 800fa82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800fa86:	d006      	beq.n	800fa96 <UART_SetConfig+0x332>
 800fa88:	e00b      	b.n	800faa2 <UART_SetConfig+0x33e>
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	77fb      	strb	r3, [r7, #31]
 800fa8e:	e00d      	b.n	800faac <UART_SetConfig+0x348>
 800fa90:	2302      	movs	r3, #2
 800fa92:	77fb      	strb	r3, [r7, #31]
 800fa94:	e00a      	b.n	800faac <UART_SetConfig+0x348>
 800fa96:	2304      	movs	r3, #4
 800fa98:	77fb      	strb	r3, [r7, #31]
 800fa9a:	e007      	b.n	800faac <UART_SetConfig+0x348>
 800fa9c:	2308      	movs	r3, #8
 800fa9e:	77fb      	strb	r3, [r7, #31]
 800faa0:	e004      	b.n	800faac <UART_SetConfig+0x348>
 800faa2:	2310      	movs	r3, #16
 800faa4:	77fb      	strb	r3, [r7, #31]
 800faa6:	e001      	b.n	800faac <UART_SetConfig+0x348>
 800faa8:	2310      	movs	r3, #16
 800faaa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	69db      	ldr	r3, [r3, #28]
 800fab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800fab4:	d15b      	bne.n	800fb6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800fab6:	7ffb      	ldrb	r3, [r7, #31]
 800fab8:	2b08      	cmp	r3, #8
 800faba:	d828      	bhi.n	800fb0e <UART_SetConfig+0x3aa>
 800fabc:	a201      	add	r2, pc, #4	@ (adr r2, 800fac4 <UART_SetConfig+0x360>)
 800fabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fac2:	bf00      	nop
 800fac4:	0800fae9 	.word	0x0800fae9
 800fac8:	0800faf1 	.word	0x0800faf1
 800facc:	0800faf9 	.word	0x0800faf9
 800fad0:	0800fb0f 	.word	0x0800fb0f
 800fad4:	0800faff 	.word	0x0800faff
 800fad8:	0800fb0f 	.word	0x0800fb0f
 800fadc:	0800fb0f 	.word	0x0800fb0f
 800fae0:	0800fb0f 	.word	0x0800fb0f
 800fae4:	0800fb07 	.word	0x0800fb07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fae8:	f7fb f9f0 	bl	800aecc <HAL_RCC_GetPCLK1Freq>
 800faec:	61b8      	str	r0, [r7, #24]
        break;
 800faee:	e013      	b.n	800fb18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800faf0:	f7fb fa00 	bl	800aef4 <HAL_RCC_GetPCLK2Freq>
 800faf4:	61b8      	str	r0, [r7, #24]
        break;
 800faf6:	e00f      	b.n	800fb18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800faf8:	4b4b      	ldr	r3, [pc, #300]	@ (800fc28 <UART_SetConfig+0x4c4>)
 800fafa:	61bb      	str	r3, [r7, #24]
        break;
 800fafc:	e00c      	b.n	800fb18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fafe:	f7fb f913 	bl	800ad28 <HAL_RCC_GetSysClockFreq>
 800fb02:	61b8      	str	r0, [r7, #24]
        break;
 800fb04:	e008      	b.n	800fb18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fb06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fb0a:	61bb      	str	r3, [r7, #24]
        break;
 800fb0c:	e004      	b.n	800fb18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fb12:	2301      	movs	r3, #1
 800fb14:	77bb      	strb	r3, [r7, #30]
        break;
 800fb16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d074      	beq.n	800fc08 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800fb1e:	69bb      	ldr	r3, [r7, #24]
 800fb20:	005a      	lsls	r2, r3, #1
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	685b      	ldr	r3, [r3, #4]
 800fb26:	085b      	lsrs	r3, r3, #1
 800fb28:	441a      	add	r2, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	2b0f      	cmp	r3, #15
 800fb38:	d916      	bls.n	800fb68 <UART_SetConfig+0x404>
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb40:	d212      	bcs.n	800fb68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	b29b      	uxth	r3, r3
 800fb46:	f023 030f 	bic.w	r3, r3, #15
 800fb4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	085b      	lsrs	r3, r3, #1
 800fb50:	b29b      	uxth	r3, r3
 800fb52:	f003 0307 	and.w	r3, r3, #7
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	89fb      	ldrh	r3, [r7, #14]
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	89fa      	ldrh	r2, [r7, #14]
 800fb64:	60da      	str	r2, [r3, #12]
 800fb66:	e04f      	b.n	800fc08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	77bb      	strb	r3, [r7, #30]
 800fb6c:	e04c      	b.n	800fc08 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fb6e:	7ffb      	ldrb	r3, [r7, #31]
 800fb70:	2b08      	cmp	r3, #8
 800fb72:	d828      	bhi.n	800fbc6 <UART_SetConfig+0x462>
 800fb74:	a201      	add	r2, pc, #4	@ (adr r2, 800fb7c <UART_SetConfig+0x418>)
 800fb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb7a:	bf00      	nop
 800fb7c:	0800fba1 	.word	0x0800fba1
 800fb80:	0800fba9 	.word	0x0800fba9
 800fb84:	0800fbb1 	.word	0x0800fbb1
 800fb88:	0800fbc7 	.word	0x0800fbc7
 800fb8c:	0800fbb7 	.word	0x0800fbb7
 800fb90:	0800fbc7 	.word	0x0800fbc7
 800fb94:	0800fbc7 	.word	0x0800fbc7
 800fb98:	0800fbc7 	.word	0x0800fbc7
 800fb9c:	0800fbbf 	.word	0x0800fbbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fba0:	f7fb f994 	bl	800aecc <HAL_RCC_GetPCLK1Freq>
 800fba4:	61b8      	str	r0, [r7, #24]
        break;
 800fba6:	e013      	b.n	800fbd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fba8:	f7fb f9a4 	bl	800aef4 <HAL_RCC_GetPCLK2Freq>
 800fbac:	61b8      	str	r0, [r7, #24]
        break;
 800fbae:	e00f      	b.n	800fbd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fbb0:	4b1d      	ldr	r3, [pc, #116]	@ (800fc28 <UART_SetConfig+0x4c4>)
 800fbb2:	61bb      	str	r3, [r7, #24]
        break;
 800fbb4:	e00c      	b.n	800fbd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fbb6:	f7fb f8b7 	bl	800ad28 <HAL_RCC_GetSysClockFreq>
 800fbba:	61b8      	str	r0, [r7, #24]
        break;
 800fbbc:	e008      	b.n	800fbd0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fbc2:	61bb      	str	r3, [r7, #24]
        break;
 800fbc4:	e004      	b.n	800fbd0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fbca:	2301      	movs	r3, #1
 800fbcc:	77bb      	strb	r3, [r7, #30]
        break;
 800fbce:	bf00      	nop
    }

    if (pclk != 0U)
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d018      	beq.n	800fc08 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	085a      	lsrs	r2, r3, #1
 800fbdc:	69bb      	ldr	r3, [r7, #24]
 800fbde:	441a      	add	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbe8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	2b0f      	cmp	r3, #15
 800fbee:	d909      	bls.n	800fc04 <UART_SetConfig+0x4a0>
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fbf6:	d205      	bcs.n	800fc04 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	60da      	str	r2, [r3, #12]
 800fc02:	e001      	b.n	800fc08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fc04:	2301      	movs	r3, #1
 800fc06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2200      	movs	r2, #0
 800fc12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800fc14:	7fbb      	ldrb	r3, [r7, #30]
}
 800fc16:	4618      	mov	r0, r3
 800fc18:	3720      	adds	r7, #32
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bd80      	pop	{r7, pc}
 800fc1e:	bf00      	nop
 800fc20:	40007c00 	.word	0x40007c00
 800fc24:	40023800 	.word	0x40023800
 800fc28:	00f42400 	.word	0x00f42400

0800fc2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fc2c:	b480      	push	{r7}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc38:	f003 0308 	and.w	r3, r3, #8
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00a      	beq.n	800fc56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	430a      	orrs	r2, r1
 800fc54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc5a:	f003 0301 	and.w	r3, r3, #1
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00a      	beq.n	800fc78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	685b      	ldr	r3, [r3, #4]
 800fc68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	430a      	orrs	r2, r1
 800fc76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc7c:	f003 0302 	and.w	r3, r3, #2
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d00a      	beq.n	800fc9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	430a      	orrs	r2, r1
 800fc98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc9e:	f003 0304 	and.w	r3, r3, #4
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00a      	beq.n	800fcbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	430a      	orrs	r2, r1
 800fcba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcc0:	f003 0310 	and.w	r3, r3, #16
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00a      	beq.n	800fcde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	689b      	ldr	r3, [r3, #8]
 800fcce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	430a      	orrs	r2, r1
 800fcdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fce2:	f003 0320 	and.w	r3, r3, #32
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d00a      	beq.n	800fd00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	689b      	ldr	r3, [r3, #8]
 800fcf0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	430a      	orrs	r2, r1
 800fcfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d01a      	beq.n	800fd42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	685b      	ldr	r3, [r3, #4]
 800fd12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	430a      	orrs	r2, r1
 800fd20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fd2a:	d10a      	bne.n	800fd42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	430a      	orrs	r2, r1
 800fd40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00a      	beq.n	800fd64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	430a      	orrs	r2, r1
 800fd62:	605a      	str	r2, [r3, #4]
  }
}
 800fd64:	bf00      	nop
 800fd66:	370c      	adds	r7, #12
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6e:	4770      	bx	lr

0800fd70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b08c      	sub	sp, #48	@ 0x30
 800fd74:	af02      	add	r7, sp, #8
 800fd76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fd80:	f7f6 f892 	bl	8005ea8 <HAL_GetTick>
 800fd84:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f003 0308 	and.w	r3, r3, #8
 800fd90:	2b08      	cmp	r3, #8
 800fd92:	d12e      	bne.n	800fdf2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fd94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f000 f83b 	bl	800fe1e <UART_WaitOnFlagUntilTimeout>
 800fda8:	4603      	mov	r3, r0
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d021      	beq.n	800fdf2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	e853 3f00 	ldrex	r3, [r3]
 800fdba:	60fb      	str	r3, [r7, #12]
   return(result);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fdc2:	623b      	str	r3, [r7, #32]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	6a3b      	ldr	r3, [r7, #32]
 800fdcc:	61fb      	str	r3, [r7, #28]
 800fdce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdd0:	69b9      	ldr	r1, [r7, #24]
 800fdd2:	69fa      	ldr	r2, [r7, #28]
 800fdd4:	e841 2300 	strex	r3, r2, [r1]
 800fdd8:	617b      	str	r3, [r7, #20]
   return(result);
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d1e6      	bne.n	800fdae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2220      	movs	r2, #32
 800fde4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fdee:	2303      	movs	r3, #3
 800fdf0:	e011      	b.n	800fe16 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2220      	movs	r2, #32
 800fdf6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2220      	movs	r2, #32
 800fdfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	2200      	movs	r2, #0
 800fe04:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800fe14:	2300      	movs	r3, #0
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3728      	adds	r7, #40	@ 0x28
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b084      	sub	sp, #16
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	60f8      	str	r0, [r7, #12]
 800fe26:	60b9      	str	r1, [r7, #8]
 800fe28:	603b      	str	r3, [r7, #0]
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fe2e:	e04f      	b.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fe30:	69bb      	ldr	r3, [r7, #24]
 800fe32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe36:	d04b      	beq.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fe38:	f7f6 f836 	bl	8005ea8 <HAL_GetTick>
 800fe3c:	4602      	mov	r2, r0
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	1ad3      	subs	r3, r2, r3
 800fe42:	69ba      	ldr	r2, [r7, #24]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	d302      	bcc.n	800fe4e <UART_WaitOnFlagUntilTimeout+0x30>
 800fe48:	69bb      	ldr	r3, [r7, #24]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d101      	bne.n	800fe52 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fe4e:	2303      	movs	r3, #3
 800fe50:	e04e      	b.n	800fef0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f003 0304 	and.w	r3, r3, #4
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d037      	beq.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2b80      	cmp	r3, #128	@ 0x80
 800fe64:	d034      	beq.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2b40      	cmp	r3, #64	@ 0x40
 800fe6a:	d031      	beq.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	69db      	ldr	r3, [r3, #28]
 800fe72:	f003 0308 	and.w	r3, r3, #8
 800fe76:	2b08      	cmp	r3, #8
 800fe78:	d110      	bne.n	800fe9c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2208      	movs	r2, #8
 800fe80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fe82:	68f8      	ldr	r0, [r7, #12]
 800fe84:	f000 f8fe 	bl	8010084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	2208      	movs	r2, #8
 800fe8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	2200      	movs	r2, #0
 800fe94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800fe98:	2301      	movs	r3, #1
 800fe9a:	e029      	b.n	800fef0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	69db      	ldr	r3, [r3, #28]
 800fea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fea6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800feaa:	d111      	bne.n	800fed0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800feb4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800feb6:	68f8      	ldr	r0, [r7, #12]
 800feb8:	f000 f8e4 	bl	8010084 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	2220      	movs	r2, #32
 800fec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2200      	movs	r2, #0
 800fec8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800fecc:	2303      	movs	r3, #3
 800fece:	e00f      	b.n	800fef0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	69da      	ldr	r2, [r3, #28]
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	4013      	ands	r3, r2
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	429a      	cmp	r2, r3
 800fede:	bf0c      	ite	eq
 800fee0:	2301      	moveq	r3, #1
 800fee2:	2300      	movne	r3, #0
 800fee4:	b2db      	uxtb	r3, r3
 800fee6:	461a      	mov	r2, r3
 800fee8:	79fb      	ldrb	r3, [r7, #7]
 800feea:	429a      	cmp	r2, r3
 800feec:	d0a0      	beq.n	800fe30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800feee:	2300      	movs	r3, #0
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}

0800fef8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b096      	sub	sp, #88	@ 0x58
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	60f8      	str	r0, [r7, #12]
 800ff00:	60b9      	str	r1, [r7, #8]
 800ff02:	4613      	mov	r3, r2
 800ff04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	88fa      	ldrh	r2, [r7, #6]
 800ff10:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2222      	movs	r2, #34	@ 0x22
 800ff20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d028      	beq.n	800ff7e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff30:	4a3e      	ldr	r2, [pc, #248]	@ (801002c <UART_Start_Receive_DMA+0x134>)
 800ff32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff38:	4a3d      	ldr	r2, [pc, #244]	@ (8010030 <UART_Start_Receive_DMA+0x138>)
 800ff3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff40:	4a3c      	ldr	r2, [pc, #240]	@ (8010034 <UART_Start_Receive_DMA+0x13c>)
 800ff42:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ff48:	2200      	movs	r2, #0
 800ff4a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	3324      	adds	r3, #36	@ 0x24
 800ff56:	4619      	mov	r1, r3
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	88fb      	ldrh	r3, [r7, #6]
 800ff60:	f7f6 fdc4 	bl	8006aec <HAL_DMA_Start_IT>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d009      	beq.n	800ff7e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	2210      	movs	r2, #16
 800ff6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	2220      	movs	r2, #32
 800ff76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	e051      	b.n	8010022 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	691b      	ldr	r3, [r3, #16]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d018      	beq.n	800ffb8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff8e:	e853 3f00 	ldrex	r3, [r3]
 800ff92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ff94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ff9a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffa4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ffa6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ffaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ffac:	e841 2300 	strex	r3, r2, [r1]
 800ffb0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ffb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1e6      	bne.n	800ff86 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	3308      	adds	r3, #8
 800ffbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc2:	e853 3f00 	ldrex	r3, [r3]
 800ffc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ffc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffca:	f043 0301 	orr.w	r3, r3, #1
 800ffce:	653b      	str	r3, [r7, #80]	@ 0x50
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	3308      	adds	r3, #8
 800ffd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ffd8:	637a      	str	r2, [r7, #52]	@ 0x34
 800ffda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ffde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ffe0:	e841 2300 	strex	r3, r2, [r1]
 800ffe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ffe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1e5      	bne.n	800ffb8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	3308      	adds	r3, #8
 800fff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	e853 3f00 	ldrex	r3, [r3]
 800fffa:	613b      	str	r3, [r7, #16]
   return(result);
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	3308      	adds	r3, #8
 801000a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801000c:	623a      	str	r2, [r7, #32]
 801000e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010010:	69f9      	ldr	r1, [r7, #28]
 8010012:	6a3a      	ldr	r2, [r7, #32]
 8010014:	e841 2300 	strex	r3, r2, [r1]
 8010018:	61bb      	str	r3, [r7, #24]
   return(result);
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d1e5      	bne.n	800ffec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8010020:	2300      	movs	r3, #0
}
 8010022:	4618      	mov	r0, r3
 8010024:	3758      	adds	r7, #88	@ 0x58
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	0801014d 	.word	0x0801014d
 8010030:	080102ab 	.word	0x080102ab
 8010034:	0801031d 	.word	0x0801031d

08010038 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010038:	b480      	push	{r7}
 801003a:	b089      	sub	sp, #36	@ 0x24
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	e853 3f00 	ldrex	r3, [r3]
 801004c:	60bb      	str	r3, [r7, #8]
   return(result);
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010054:	61fb      	str	r3, [r7, #28]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	461a      	mov	r2, r3
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	61bb      	str	r3, [r7, #24]
 8010060:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010062:	6979      	ldr	r1, [r7, #20]
 8010064:	69ba      	ldr	r2, [r7, #24]
 8010066:	e841 2300 	strex	r3, r2, [r1]
 801006a:	613b      	str	r3, [r7, #16]
   return(result);
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1e6      	bne.n	8010040 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2220      	movs	r2, #32
 8010076:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8010078:	bf00      	nop
 801007a:	3724      	adds	r7, #36	@ 0x24
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010084:	b480      	push	{r7}
 8010086:	b095      	sub	sp, #84	@ 0x54
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010094:	e853 3f00 	ldrex	r3, [r3]
 8010098:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801009a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801009c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80100a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	461a      	mov	r2, r3
 80100a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80100aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80100ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80100b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80100b2:	e841 2300 	strex	r3, r2, [r1]
 80100b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80100b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d1e6      	bne.n	801008c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	3308      	adds	r3, #8
 80100c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c6:	6a3b      	ldr	r3, [r7, #32]
 80100c8:	e853 3f00 	ldrex	r3, [r3]
 80100cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	f023 0301 	bic.w	r3, r3, #1
 80100d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3308      	adds	r3, #8
 80100dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80100de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80100e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80100e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100e6:	e841 2300 	strex	r3, r2, [r1]
 80100ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80100ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d1e5      	bne.n	80100be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d118      	bne.n	801012c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	e853 3f00 	ldrex	r3, [r3]
 8010106:	60bb      	str	r3, [r7, #8]
   return(result);
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	f023 0310 	bic.w	r3, r3, #16
 801010e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	461a      	mov	r2, r3
 8010116:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010118:	61bb      	str	r3, [r7, #24]
 801011a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801011c:	6979      	ldr	r1, [r7, #20]
 801011e:	69ba      	ldr	r2, [r7, #24]
 8010120:	e841 2300 	strex	r3, r2, [r1]
 8010124:	613b      	str	r3, [r7, #16]
   return(result);
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d1e6      	bne.n	80100fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2220      	movs	r2, #32
 8010130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010140:	bf00      	nop
 8010142:	3754      	adds	r7, #84	@ 0x54
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b09c      	sub	sp, #112	@ 0x70
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010158:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	69db      	ldr	r3, [r3, #28]
 801015e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010162:	d071      	beq.n	8010248 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010166:	2200      	movs	r2, #0
 8010168:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801016c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010174:	e853 3f00 	ldrex	r3, [r3]
 8010178:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801017a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801017c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010180:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	461a      	mov	r2, r3
 8010188:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801018a:	657b      	str	r3, [r7, #84]	@ 0x54
 801018c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801018e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010190:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010192:	e841 2300 	strex	r3, r2, [r1]
 8010196:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801019a:	2b00      	cmp	r3, #0
 801019c:	d1e6      	bne.n	801016c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801019e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	3308      	adds	r3, #8
 80101a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80101a8:	e853 3f00 	ldrex	r3, [r3]
 80101ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80101ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101b0:	f023 0301 	bic.w	r3, r3, #1
 80101b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80101b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3308      	adds	r3, #8
 80101bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80101be:	643a      	str	r2, [r7, #64]	@ 0x40
 80101c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80101c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80101c6:	e841 2300 	strex	r3, r2, [r1]
 80101ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80101cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d1e5      	bne.n	801019e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	3308      	adds	r3, #8
 80101d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101da:	6a3b      	ldr	r3, [r7, #32]
 80101dc:	e853 3f00 	ldrex	r3, [r3]
 80101e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80101e2:	69fb      	ldr	r3, [r7, #28]
 80101e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80101e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80101ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	3308      	adds	r3, #8
 80101f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80101f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80101f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80101f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101fa:	e841 2300 	strex	r3, r2, [r1]
 80101fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1e5      	bne.n	80101d2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010208:	2220      	movs	r2, #32
 801020a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801020e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010212:	2b01      	cmp	r3, #1
 8010214:	d118      	bne.n	8010248 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	e853 3f00 	ldrex	r3, [r3]
 8010222:	60bb      	str	r3, [r7, #8]
   return(result);
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	f023 0310 	bic.w	r3, r3, #16
 801022a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801022c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	461a      	mov	r2, r3
 8010232:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010234:	61bb      	str	r3, [r7, #24]
 8010236:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010238:	6979      	ldr	r1, [r7, #20]
 801023a:	69ba      	ldr	r2, [r7, #24]
 801023c:	e841 2300 	strex	r3, r2, [r1]
 8010240:	613b      	str	r3, [r7, #16]
   return(result);
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d1e6      	bne.n	8010216 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801024a:	2200      	movs	r2, #0
 801024c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801024e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010252:	2b01      	cmp	r3, #1
 8010254:	d122      	bne.n	801029c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 8010256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010258:	2200      	movs	r2, #0
 801025a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801026a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801026e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 8010272:	429a      	cmp	r2, r3
 8010274:	d204      	bcs.n	8010280 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010278:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 801027c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010280:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010282:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 801028c:	b29b      	uxth	r3, r3
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	b29b      	uxth	r3, r3
 8010292:	4619      	mov	r1, r3
 8010294:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010296:	f7ff fa59 	bl	800f74c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801029a:	e002      	b.n	80102a2 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 801029c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801029e:	f7f5 fc57 	bl	8005b50 <HAL_UART_RxCpltCallback>
}
 80102a2:	bf00      	nop
 80102a4:	3770      	adds	r7, #112	@ 0x70
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80102aa:	b580      	push	{r7, lr}
 80102ac:	b084      	sub	sp, #16
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2201      	movs	r2, #1
 80102bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d123      	bne.n	801030e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80102cc:	085b      	lsrs	r3, r3, #1
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80102e4:	897a      	ldrh	r2, [r7, #10]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d803      	bhi.n	80102f2 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	897a      	ldrh	r2, [r7, #10]
 80102ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80102fe:	b29b      	uxth	r3, r3
 8010300:	1ad3      	subs	r3, r2, r3
 8010302:	b29b      	uxth	r3, r3
 8010304:	4619      	mov	r1, r3
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f7ff fa20 	bl	800f74c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801030c:	e002      	b.n	8010314 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f7f5 fc42 	bl	8005b98 <HAL_UART_RxHalfCpltCallback>
}
 8010314:	bf00      	nop
 8010316:	3710      	adds	r7, #16
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b086      	sub	sp, #24
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010328:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801032e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010336:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010338:	697b      	ldr	r3, [r7, #20]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010342:	2b80      	cmp	r3, #128	@ 0x80
 8010344:	d109      	bne.n	801035a <UART_DMAError+0x3e>
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	2b21      	cmp	r3, #33	@ 0x21
 801034a:	d106      	bne.n	801035a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	2200      	movs	r2, #0
 8010350:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8010354:	6978      	ldr	r0, [r7, #20]
 8010356:	f7ff fe6f 	bl	8010038 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	689b      	ldr	r3, [r3, #8]
 8010360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010364:	2b40      	cmp	r3, #64	@ 0x40
 8010366:	d109      	bne.n	801037c <UART_DMAError+0x60>
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	2b22      	cmp	r3, #34	@ 0x22
 801036c:	d106      	bne.n	801037c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	2200      	movs	r2, #0
 8010372:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8010376:	6978      	ldr	r0, [r7, #20]
 8010378:	f7ff fe84 	bl	8010084 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010382:	f043 0210 	orr.w	r2, r3, #16
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801038c:	6978      	ldr	r0, [r7, #20]
 801038e:	f7f5 fc19 	bl	8005bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010392:	bf00      	nop
 8010394:	3718      	adds	r7, #24
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}

0801039a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801039a:	b580      	push	{r7, lr}
 801039c:	b084      	sub	sp, #16
 801039e:	af00      	add	r7, sp, #0
 80103a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f7f5 fc07 	bl	8005bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103b6:	bf00      	nop
 80103b8:	3710      	adds	r7, #16
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80103be:	b580      	push	{r7, lr}
 80103c0:	b088      	sub	sp, #32
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	e853 3f00 	ldrex	r3, [r3]
 80103d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103da:	61fb      	str	r3, [r7, #28]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	461a      	mov	r2, r3
 80103e2:	69fb      	ldr	r3, [r7, #28]
 80103e4:	61bb      	str	r3, [r7, #24]
 80103e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103e8:	6979      	ldr	r1, [r7, #20]
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	e841 2300 	strex	r3, r2, [r1]
 80103f0:	613b      	str	r3, [r7, #16]
   return(result);
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d1e6      	bne.n	80103c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2220      	movs	r2, #32
 80103fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff f997 	bl	800f738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801040a:	bf00      	nop
 801040c:	3720      	adds	r7, #32
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
	...

08010414 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d121      	bne.n	801046a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	4b27      	ldr	r3, [pc, #156]	@ (80104c8 <FMC_SDRAM_Init+0xb4>)
 801042c:	4013      	ands	r3, r2
 801042e:	683a      	ldr	r2, [r7, #0]
 8010430:	6851      	ldr	r1, [r2, #4]
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	6892      	ldr	r2, [r2, #8]
 8010436:	4311      	orrs	r1, r2
 8010438:	683a      	ldr	r2, [r7, #0]
 801043a:	68d2      	ldr	r2, [r2, #12]
 801043c:	4311      	orrs	r1, r2
 801043e:	683a      	ldr	r2, [r7, #0]
 8010440:	6912      	ldr	r2, [r2, #16]
 8010442:	4311      	orrs	r1, r2
 8010444:	683a      	ldr	r2, [r7, #0]
 8010446:	6952      	ldr	r2, [r2, #20]
 8010448:	4311      	orrs	r1, r2
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	6992      	ldr	r2, [r2, #24]
 801044e:	4311      	orrs	r1, r2
 8010450:	683a      	ldr	r2, [r7, #0]
 8010452:	69d2      	ldr	r2, [r2, #28]
 8010454:	4311      	orrs	r1, r2
 8010456:	683a      	ldr	r2, [r7, #0]
 8010458:	6a12      	ldr	r2, [r2, #32]
 801045a:	4311      	orrs	r1, r2
 801045c:	683a      	ldr	r2, [r7, #0]
 801045e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010460:	430a      	orrs	r2, r1
 8010462:	431a      	orrs	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	601a      	str	r2, [r3, #0]
 8010468:	e026      	b.n	80104b8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	69d9      	ldr	r1, [r3, #28]
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	6a1b      	ldr	r3, [r3, #32]
 801047a:	4319      	orrs	r1, r3
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010480:	430b      	orrs	r3, r1
 8010482:	431a      	orrs	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	685a      	ldr	r2, [r3, #4]
 801048c:	4b0e      	ldr	r3, [pc, #56]	@ (80104c8 <FMC_SDRAM_Init+0xb4>)
 801048e:	4013      	ands	r3, r2
 8010490:	683a      	ldr	r2, [r7, #0]
 8010492:	6851      	ldr	r1, [r2, #4]
 8010494:	683a      	ldr	r2, [r7, #0]
 8010496:	6892      	ldr	r2, [r2, #8]
 8010498:	4311      	orrs	r1, r2
 801049a:	683a      	ldr	r2, [r7, #0]
 801049c:	68d2      	ldr	r2, [r2, #12]
 801049e:	4311      	orrs	r1, r2
 80104a0:	683a      	ldr	r2, [r7, #0]
 80104a2:	6912      	ldr	r2, [r2, #16]
 80104a4:	4311      	orrs	r1, r2
 80104a6:	683a      	ldr	r2, [r7, #0]
 80104a8:	6952      	ldr	r2, [r2, #20]
 80104aa:	4311      	orrs	r1, r2
 80104ac:	683a      	ldr	r2, [r7, #0]
 80104ae:	6992      	ldr	r2, [r2, #24]
 80104b0:	430a      	orrs	r2, r1
 80104b2:	431a      	orrs	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80104b8:	2300      	movs	r3, #0
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	370c      	adds	r7, #12
 80104be:	46bd      	mov	sp, r7
 80104c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop
 80104c8:	ffff8000 	.word	0xffff8000

080104cc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b085      	sub	sp, #20
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	60f8      	str	r0, [r7, #12]
 80104d4:	60b9      	str	r1, [r7, #8]
 80104d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d128      	bne.n	8010530 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	1e59      	subs	r1, r3, #1
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	3b01      	subs	r3, #1
 80104f2:	011b      	lsls	r3, r3, #4
 80104f4:	4319      	orrs	r1, r3
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	3b01      	subs	r3, #1
 80104fc:	021b      	lsls	r3, r3, #8
 80104fe:	4319      	orrs	r1, r3
 8010500:	68bb      	ldr	r3, [r7, #8]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	3b01      	subs	r3, #1
 8010506:	031b      	lsls	r3, r3, #12
 8010508:	4319      	orrs	r1, r3
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	691b      	ldr	r3, [r3, #16]
 801050e:	3b01      	subs	r3, #1
 8010510:	041b      	lsls	r3, r3, #16
 8010512:	4319      	orrs	r1, r3
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	695b      	ldr	r3, [r3, #20]
 8010518:	3b01      	subs	r3, #1
 801051a:	051b      	lsls	r3, r3, #20
 801051c:	4319      	orrs	r1, r3
 801051e:	68bb      	ldr	r3, [r7, #8]
 8010520:	699b      	ldr	r3, [r3, #24]
 8010522:	3b01      	subs	r3, #1
 8010524:	061b      	lsls	r3, r3, #24
 8010526:	430b      	orrs	r3, r1
 8010528:	431a      	orrs	r2, r3
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	609a      	str	r2, [r3, #8]
 801052e:	e02d      	b.n	801058c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	689a      	ldr	r2, [r3, #8]
 8010534:	4b19      	ldr	r3, [pc, #100]	@ (801059c <FMC_SDRAM_Timing_Init+0xd0>)
 8010536:	4013      	ands	r3, r2
 8010538:	68ba      	ldr	r2, [r7, #8]
 801053a:	68d2      	ldr	r2, [r2, #12]
 801053c:	3a01      	subs	r2, #1
 801053e:	0311      	lsls	r1, r2, #12
 8010540:	68ba      	ldr	r2, [r7, #8]
 8010542:	6952      	ldr	r2, [r2, #20]
 8010544:	3a01      	subs	r2, #1
 8010546:	0512      	lsls	r2, r2, #20
 8010548:	430a      	orrs	r2, r1
 801054a:	431a      	orrs	r2, r3
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	1e59      	subs	r1, r3, #1
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	685b      	ldr	r3, [r3, #4]
 8010562:	3b01      	subs	r3, #1
 8010564:	011b      	lsls	r3, r3, #4
 8010566:	4319      	orrs	r1, r3
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	689b      	ldr	r3, [r3, #8]
 801056c:	3b01      	subs	r3, #1
 801056e:	021b      	lsls	r3, r3, #8
 8010570:	4319      	orrs	r1, r3
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	691b      	ldr	r3, [r3, #16]
 8010576:	3b01      	subs	r3, #1
 8010578:	041b      	lsls	r3, r3, #16
 801057a:	4319      	orrs	r1, r3
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	699b      	ldr	r3, [r3, #24]
 8010580:	3b01      	subs	r3, #1
 8010582:	061b      	lsls	r3, r3, #24
 8010584:	430b      	orrs	r3, r1
 8010586:	431a      	orrs	r2, r3
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 801058c:	2300      	movs	r3, #0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3714      	adds	r7, #20
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr
 801059a:	bf00      	nop
 801059c:	ff0f0fff 	.word	0xff0f0fff

080105a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80105a0:	b084      	sub	sp, #16
 80105a2:	b480      	push	{r7}
 80105a4:	b085      	sub	sp, #20
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	6078      	str	r0, [r7, #4]
 80105aa:	f107 001c 	add.w	r0, r7, #28
 80105ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80105b2:	2300      	movs	r3, #0
 80105b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80105b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80105b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80105ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80105bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80105be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80105c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80105c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80105c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80105c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80105c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80105ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	4313      	orrs	r3, r2
 80105d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	685a      	ldr	r2, [r3, #4]
 80105d6:	4b07      	ldr	r3, [pc, #28]	@ (80105f4 <SDMMC_Init+0x54>)
 80105d8:	4013      	ands	r3, r2
 80105da:	68fa      	ldr	r2, [r7, #12]
 80105dc:	431a      	orrs	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3714      	adds	r7, #20
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	b004      	add	sp, #16
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	ffff8100 	.word	0xffff8100

080105f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010606:	4618      	mov	r0, r3
 8010608:	370c      	adds	r7, #12
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr

08010612 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010612:	b480      	push	{r7}
 8010614:	b083      	sub	sp, #12
 8010616:	af00      	add	r7, sp, #0
 8010618:	6078      	str	r0, [r7, #4]
 801061a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010626:	2300      	movs	r3, #0
}
 8010628:	4618      	mov	r0, r3
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2203      	movs	r2, #3
 8010640:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	370c      	adds	r7, #12
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010650:	b480      	push	{r7}
 8010652:	b083      	sub	sp, #12
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	f003 0303 	and.w	r3, r3, #3
}
 8010660:	4618      	mov	r0, r3
 8010662:	370c      	adds	r7, #12
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801066c:	b480      	push	{r7}
 801066e:	b085      	sub	sp, #20
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010676:	2300      	movs	r3, #0
 8010678:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	681a      	ldr	r2, [r3, #0]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010686:	683b      	ldr	r3, [r7, #0]
 8010688:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801068a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010690:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010696:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010698:	68fa      	ldr	r2, [r7, #12]
 801069a:	4313      	orrs	r3, r2
 801069c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	68da      	ldr	r2, [r3, #12]
 80106a2:	4b06      	ldr	r3, [pc, #24]	@ (80106bc <SDMMC_SendCommand+0x50>)
 80106a4:	4013      	ands	r3, r2
 80106a6:	68fa      	ldr	r2, [r7, #12]
 80106a8:	431a      	orrs	r2, r3
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr
 80106bc:	fffff000 	.word	0xfffff000

080106c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	691b      	ldr	r3, [r3, #16]
 80106cc:	b2db      	uxtb	r3, r3
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	370c      	adds	r7, #12
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr

080106da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80106da:	b480      	push	{r7}
 80106dc:	b085      	sub	sp, #20
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
 80106e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	3314      	adds	r3, #20
 80106e8:	461a      	mov	r2, r3
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	4413      	add	r3, r2
 80106ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681b      	ldr	r3, [r3, #0]
}  
 80106f4:	4618      	mov	r0, r3
 80106f6:	3714      	adds	r7, #20
 80106f8:	46bd      	mov	sp, r7
 80106fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fe:	4770      	bx	lr

08010700 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010700:	b480      	push	{r7}
 8010702:	b085      	sub	sp, #20
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801070a:	2300      	movs	r3, #0
 801070c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	685a      	ldr	r2, [r3, #4]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010726:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801072c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010732:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010734:	68fa      	ldr	r2, [r7, #12]
 8010736:	4313      	orrs	r3, r2
 8010738:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801073e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	431a      	orrs	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801074a:	2300      	movs	r3, #0

}
 801074c:	4618      	mov	r0, r3
 801074e:	3714      	adds	r7, #20
 8010750:	46bd      	mov	sp, r7
 8010752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010756:	4770      	bx	lr

08010758 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010766:	2310      	movs	r3, #16
 8010768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801076a:	2340      	movs	r3, #64	@ 0x40
 801076c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801076e:	2300      	movs	r3, #0
 8010770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010776:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010778:	f107 0308 	add.w	r3, r7, #8
 801077c:	4619      	mov	r1, r3
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f7ff ff74 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010788:	2110      	movs	r1, #16
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f000 fa1a 	bl	8010bc4 <SDMMC_GetCmdResp1>
 8010790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010792:	69fb      	ldr	r3, [r7, #28]
}
 8010794:	4618      	mov	r0, r3
 8010796:	3720      	adds	r7, #32
 8010798:	46bd      	mov	sp, r7
 801079a:	bd80      	pop	{r7, pc}

0801079c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b088      	sub	sp, #32
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80107aa:	2311      	movs	r3, #17
 80107ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107ae:	2340      	movs	r3, #64	@ 0x40
 80107b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107b2:	2300      	movs	r3, #0
 80107b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80107ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80107bc:	f107 0308 	add.w	r3, r7, #8
 80107c0:	4619      	mov	r1, r3
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f7ff ff52 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80107c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80107cc:	2111      	movs	r1, #17
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f9f8 	bl	8010bc4 <SDMMC_GetCmdResp1>
 80107d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107d6:	69fb      	ldr	r3, [r7, #28]
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3720      	adds	r7, #32
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80107ee:	2312      	movs	r3, #18
 80107f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80107f2:	2340      	movs	r3, #64	@ 0x40
 80107f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80107f6:	2300      	movs	r3, #0
 80107f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80107fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80107fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010800:	f107 0308 	add.w	r3, r7, #8
 8010804:	4619      	mov	r1, r3
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f7ff ff30 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801080c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010810:	2112      	movs	r1, #18
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f000 f9d6 	bl	8010bc4 <SDMMC_GetCmdResp1>
 8010818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801081a:	69fb      	ldr	r3, [r7, #28]
}
 801081c:	4618      	mov	r0, r3
 801081e:	3720      	adds	r7, #32
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b088      	sub	sp, #32
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010832:	2318      	movs	r3, #24
 8010834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010836:	2340      	movs	r3, #64	@ 0x40
 8010838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801083a:	2300      	movs	r3, #0
 801083c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801083e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010842:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010844:	f107 0308 	add.w	r3, r7, #8
 8010848:	4619      	mov	r1, r3
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f7ff ff0e 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010854:	2118      	movs	r1, #24
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f000 f9b4 	bl	8010bc4 <SDMMC_GetCmdResp1>
 801085c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801085e:	69fb      	ldr	r3, [r7, #28]
}
 8010860:	4618      	mov	r0, r3
 8010862:	3720      	adds	r7, #32
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b088      	sub	sp, #32
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010876:	2319      	movs	r3, #25
 8010878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801087a:	2340      	movs	r3, #64	@ 0x40
 801087c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801087e:	2300      	movs	r3, #0
 8010880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010882:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010886:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010888:	f107 0308 	add.w	r3, r7, #8
 801088c:	4619      	mov	r1, r3
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f7ff feec 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010898:	2119      	movs	r1, #25
 801089a:	6878      	ldr	r0, [r7, #4]
 801089c:	f000 f992 	bl	8010bc4 <SDMMC_GetCmdResp1>
 80108a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108a2:	69fb      	ldr	r3, [r7, #28]
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3720      	adds	r7, #32
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}

080108ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80108ac:	b580      	push	{r7, lr}
 80108ae:	b088      	sub	sp, #32
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80108b4:	2300      	movs	r3, #0
 80108b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80108b8:	230c      	movs	r3, #12
 80108ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80108bc:	2340      	movs	r3, #64	@ 0x40
 80108be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80108c0:	2300      	movs	r3, #0
 80108c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80108c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80108c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80108ca:	f107 0308 	add.w	r3, r7, #8
 80108ce:	4619      	mov	r1, r3
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f7ff fecb 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80108d6:	4a05      	ldr	r2, [pc, #20]	@ (80108ec <SDMMC_CmdStopTransfer+0x40>)
 80108d8:	210c      	movs	r1, #12
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 f972 	bl	8010bc4 <SDMMC_GetCmdResp1>
 80108e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108e2:	69fb      	ldr	r3, [r7, #28]
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3720      	adds	r7, #32
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	05f5e100 	.word	0x05f5e100

080108f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b08a      	sub	sp, #40	@ 0x28
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010900:	2307      	movs	r3, #7
 8010902:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010904:	2340      	movs	r3, #64	@ 0x40
 8010906:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010908:	2300      	movs	r3, #0
 801090a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801090c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010910:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010912:	f107 0310 	add.w	r3, r7, #16
 8010916:	4619      	mov	r1, r3
 8010918:	68f8      	ldr	r0, [r7, #12]
 801091a:	f7ff fea7 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801091e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010922:	2107      	movs	r1, #7
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f000 f94d 	bl	8010bc4 <SDMMC_GetCmdResp1>
 801092a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 801092c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801092e:	4618      	mov	r0, r3
 8010930:	3728      	adds	r7, #40	@ 0x28
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}

08010936 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010936:	b580      	push	{r7, lr}
 8010938:	b088      	sub	sp, #32
 801093a:	af00      	add	r7, sp, #0
 801093c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801093e:	2300      	movs	r3, #0
 8010940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010942:	2300      	movs	r3, #0
 8010944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010946:	2300      	movs	r3, #0
 8010948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801094a:	2300      	movs	r3, #0
 801094c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801094e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010954:	f107 0308 	add.w	r3, r7, #8
 8010958:	4619      	mov	r1, r3
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7ff fe86 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f000 fb67 	bl	8011034 <SDMMC_GetCmdError>
 8010966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010968:	69fb      	ldr	r3, [r7, #28]
}
 801096a:	4618      	mov	r0, r3
 801096c:	3720      	adds	r7, #32
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}

08010972 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010972:	b580      	push	{r7, lr}
 8010974:	b088      	sub	sp, #32
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801097a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 801097e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010980:	2308      	movs	r3, #8
 8010982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010984:	2340      	movs	r3, #64	@ 0x40
 8010986:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010988:	2300      	movs	r3, #0
 801098a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801098c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010990:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010992:	f107 0308 	add.w	r3, r7, #8
 8010996:	4619      	mov	r1, r3
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f7ff fe67 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f000 fafa 	bl	8010f98 <SDMMC_GetCmdResp7>
 80109a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a6:	69fb      	ldr	r3, [r7, #28]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3720      	adds	r7, #32
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b088      	sub	sp, #32
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80109be:	2337      	movs	r3, #55	@ 0x37
 80109c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109c2:	2340      	movs	r3, #64	@ 0x40
 80109c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109c6:	2300      	movs	r3, #0
 80109c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109d0:	f107 0308 	add.w	r3, r7, #8
 80109d4:	4619      	mov	r1, r3
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7ff fe48 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80109dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109e0:	2137      	movs	r1, #55	@ 0x37
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f000 f8ee 	bl	8010bc4 <SDMMC_GetCmdResp1>
 80109e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ea:	69fb      	ldr	r3, [r7, #28]
}
 80109ec:	4618      	mov	r0, r3
 80109ee:	3720      	adds	r7, #32
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bd80      	pop	{r7, pc}

080109f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b088      	sub	sp, #32
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80109fe:	683a      	ldr	r2, [r7, #0]
 8010a00:	4b0d      	ldr	r3, [pc, #52]	@ (8010a38 <SDMMC_CmdAppOperCommand+0x44>)
 8010a02:	4313      	orrs	r3, r2
 8010a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010a06:	2329      	movs	r3, #41	@ 0x29
 8010a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a0a:	2340      	movs	r3, #64	@ 0x40
 8010a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a18:	f107 0308 	add.w	r3, r7, #8
 8010a1c:	4619      	mov	r1, r3
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f7ff fe24 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 fa03 	bl	8010e30 <SDMMC_GetCmdResp3>
 8010a2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a2c:	69fb      	ldr	r3, [r7, #28]
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3720      	adds	r7, #32
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	80100000 	.word	0x80100000

08010a3c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010a4a:	2306      	movs	r3, #6
 8010a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a4e:	2340      	movs	r3, #64	@ 0x40
 8010a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a52:	2300      	movs	r3, #0
 8010a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a5c:	f107 0308 	add.w	r3, r7, #8
 8010a60:	4619      	mov	r1, r3
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff fe02 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a6c:	2106      	movs	r1, #6
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f8a8 	bl	8010bc4 <SDMMC_GetCmdResp1>
 8010a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a76:	69fb      	ldr	r3, [r7, #28]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3720      	adds	r7, #32
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b088      	sub	sp, #32
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010a8c:	2333      	movs	r3, #51	@ 0x33
 8010a8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a90:	2340      	movs	r3, #64	@ 0x40
 8010a92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a94:	2300      	movs	r3, #0
 8010a96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a9e:	f107 0308 	add.w	r3, r7, #8
 8010aa2:	4619      	mov	r1, r3
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f7ff fde1 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010aae:	2133      	movs	r1, #51	@ 0x33
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 f887 	bl	8010bc4 <SDMMC_GetCmdResp1>
 8010ab6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ab8:	69fb      	ldr	r3, [r7, #28]
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3720      	adds	r7, #32
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b088      	sub	sp, #32
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010aca:	2300      	movs	r3, #0
 8010acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010ace:	2302      	movs	r3, #2
 8010ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010ad2:	23c0      	movs	r3, #192	@ 0xc0
 8010ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ae0:	f107 0308 	add.w	r3, r7, #8
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f7ff fdc0 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 f957 	bl	8010da0 <SDMMC_GetCmdResp2>
 8010af2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010af4:	69fb      	ldr	r3, [r7, #28]
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3720      	adds	r7, #32
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b088      	sub	sp, #32
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010b0c:	2309      	movs	r3, #9
 8010b0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010b10:	23c0      	movs	r3, #192	@ 0xc0
 8010b12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b14:	2300      	movs	r3, #0
 8010b16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b1e:	f107 0308 	add.w	r3, r7, #8
 8010b22:	4619      	mov	r1, r3
 8010b24:	6878      	ldr	r0, [r7, #4]
 8010b26:	f7ff fda1 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 f938 	bl	8010da0 <SDMMC_GetCmdResp2>
 8010b30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b32:	69fb      	ldr	r3, [r7, #28]
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3720      	adds	r7, #32
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b088      	sub	sp, #32
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
 8010b44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b46:	2300      	movs	r3, #0
 8010b48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010b4a:	2303      	movs	r3, #3
 8010b4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b4e:	2340      	movs	r3, #64	@ 0x40
 8010b50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b52:	2300      	movs	r3, #0
 8010b54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b5c:	f107 0308 	add.w	r3, r7, #8
 8010b60:	4619      	mov	r1, r3
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f7ff fd82 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010b68:	683a      	ldr	r2, [r7, #0]
 8010b6a:	2103      	movs	r1, #3
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f000 f99d 	bl	8010eac <SDMMC_GetCmdResp6>
 8010b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b74:	69fb      	ldr	r3, [r7, #28]
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3720      	adds	r7, #32
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010b7e:	b580      	push	{r7, lr}
 8010b80:	b088      	sub	sp, #32
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
 8010b86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010b8c:	230d      	movs	r3, #13
 8010b8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b90:	2340      	movs	r3, #64	@ 0x40
 8010b92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b94:	2300      	movs	r3, #0
 8010b96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010b9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b9e:	f107 0308 	add.w	r3, r7, #8
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7ff fd61 	bl	801066c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010bae:	210d      	movs	r1, #13
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 f807 	bl	8010bc4 <SDMMC_GetCmdResp1>
 8010bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bb8:	69fb      	ldr	r3, [r7, #28]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3720      	adds	r7, #32
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
	...

08010bc4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b088      	sub	sp, #32
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	460b      	mov	r3, r1
 8010bce:	607a      	str	r2, [r7, #4]
 8010bd0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010bd2:	4b70      	ldr	r3, [pc, #448]	@ (8010d94 <SDMMC_GetCmdResp1+0x1d0>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4a70      	ldr	r2, [pc, #448]	@ (8010d98 <SDMMC_GetCmdResp1+0x1d4>)
 8010bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8010bdc:	0a5a      	lsrs	r2, r3, #9
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	fb02 f303 	mul.w	r3, r2, r3
 8010be4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010be6:	69fb      	ldr	r3, [r7, #28]
 8010be8:	1e5a      	subs	r2, r3, #1
 8010bea:	61fa      	str	r2, [r7, #28]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d102      	bne.n	8010bf6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bf0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010bf4:	e0c9      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010bfa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d0ef      	beq.n	8010be6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010c06:	69bb      	ldr	r3, [r7, #24]
 8010c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d1ea      	bne.n	8010be6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c14:	f003 0304 	and.w	r3, r3, #4
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d004      	beq.n	8010c26 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2204      	movs	r2, #4
 8010c20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c22:	2304      	movs	r3, #4
 8010c24:	e0b1      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010c2a:	f003 0301 	and.w	r3, r3, #1
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d004      	beq.n	8010c3c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2201      	movs	r2, #1
 8010c36:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e0a6      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	22c5      	movs	r2, #197	@ 0xc5
 8010c40:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010c42:	68f8      	ldr	r0, [r7, #12]
 8010c44:	f7ff fd3c 	bl	80106c0 <SDMMC_GetCommandResponse>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	7afb      	ldrb	r3, [r7, #11]
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d001      	beq.n	8010c56 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c52:	2301      	movs	r3, #1
 8010c54:	e099      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010c56:	2100      	movs	r1, #0
 8010c58:	68f8      	ldr	r0, [r7, #12]
 8010c5a:	f7ff fd3e 	bl	80106da <SDMMC_GetResponse>
 8010c5e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	4b4e      	ldr	r3, [pc, #312]	@ (8010d9c <SDMMC_GetCmdResp1+0x1d8>)
 8010c64:	4013      	ands	r3, r2
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d101      	bne.n	8010c6e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	e08d      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	da02      	bge.n	8010c7a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010c74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8010c78:	e087      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d001      	beq.n	8010c88 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010c84:	2340      	movs	r3, #64	@ 0x40
 8010c86:	e080      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d001      	beq.n	8010c96 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010c92:	2380      	movs	r3, #128	@ 0x80
 8010c94:	e079      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d002      	beq.n	8010ca6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010ca0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ca4:	e071      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010cb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010cb4:	e069      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d002      	beq.n	8010cc6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010cc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010cc4:	e061      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d002      	beq.n	8010cd6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010cd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010cd4:	e059      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010ce4:	e051      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d002      	beq.n	8010cf6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010cf0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010cf4:	e049      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010d04:	e041      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d002      	beq.n	8010d16 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010d10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d14:	e039      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010d24:	e031      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010d30:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010d34:	e029      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d002      	beq.n	8010d46 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010d40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010d44:	e021      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010d46:	697b      	ldr	r3, [r7, #20]
 8010d48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d002      	beq.n	8010d56 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010d50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8010d54:	e019      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d002      	beq.n	8010d66 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010d60:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010d64:	e011      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010d70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8010d74:	e009      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	f003 0308 	and.w	r3, r3, #8
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010d80:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8010d84:	e001      	b.n	8010d8a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010d86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	3720      	adds	r7, #32
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	bd80      	pop	{r7, pc}
 8010d92:	bf00      	nop
 8010d94:	2000001c 	.word	0x2000001c
 8010d98:	10624dd3 	.word	0x10624dd3
 8010d9c:	fdffe008 	.word	0xfdffe008

08010da0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b085      	sub	sp, #20
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010da8:	4b1f      	ldr	r3, [pc, #124]	@ (8010e28 <SDMMC_GetCmdResp2+0x88>)
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	4a1f      	ldr	r2, [pc, #124]	@ (8010e2c <SDMMC_GetCmdResp2+0x8c>)
 8010dae:	fba2 2303 	umull	r2, r3, r2, r3
 8010db2:	0a5b      	lsrs	r3, r3, #9
 8010db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010db8:	fb02 f303 	mul.w	r3, r2, r3
 8010dbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	1e5a      	subs	r2, r3, #1
 8010dc2:	60fa      	str	r2, [r7, #12]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d102      	bne.n	8010dce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010dc8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010dcc:	e026      	b.n	8010e1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d0ef      	beq.n	8010dbe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d1ea      	bne.n	8010dbe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010dec:	f003 0304 	and.w	r3, r3, #4
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d004      	beq.n	8010dfe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	2204      	movs	r2, #4
 8010df8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010dfa:	2304      	movs	r3, #4
 8010dfc:	e00e      	b.n	8010e1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e02:	f003 0301 	and.w	r3, r3, #1
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d004      	beq.n	8010e14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e10:	2301      	movs	r3, #1
 8010e12:	e003      	b.n	8010e1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	22c5      	movs	r2, #197	@ 0xc5
 8010e18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010e1a:	2300      	movs	r3, #0
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3714      	adds	r7, #20
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr
 8010e28:	2000001c 	.word	0x2000001c
 8010e2c:	10624dd3 	.word	0x10624dd3

08010e30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e38:	4b1a      	ldr	r3, [pc, #104]	@ (8010ea4 <SDMMC_GetCmdResp3+0x74>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8010ea8 <SDMMC_GetCmdResp3+0x78>)
 8010e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e42:	0a5b      	lsrs	r3, r3, #9
 8010e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e48:	fb02 f303 	mul.w	r3, r2, r3
 8010e4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	1e5a      	subs	r2, r3, #1
 8010e52:	60fa      	str	r2, [r7, #12]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d102      	bne.n	8010e5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010e5c:	e01b      	b.n	8010e96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d0ef      	beq.n	8010e4e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1ea      	bne.n	8010e4e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e7c:	f003 0304 	and.w	r3, r3, #4
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d004      	beq.n	8010e8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2204      	movs	r2, #4
 8010e88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e8a:	2304      	movs	r3, #4
 8010e8c:	e003      	b.n	8010e96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	22c5      	movs	r2, #197	@ 0xc5
 8010e92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010e94:	2300      	movs	r3, #0
}
 8010e96:	4618      	mov	r0, r3
 8010e98:	3714      	adds	r7, #20
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	2000001c 	.word	0x2000001c
 8010ea8:	10624dd3 	.word	0x10624dd3

08010eac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b088      	sub	sp, #32
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	460b      	mov	r3, r1
 8010eb6:	607a      	str	r2, [r7, #4]
 8010eb8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010eba:	4b35      	ldr	r3, [pc, #212]	@ (8010f90 <SDMMC_GetCmdResp6+0xe4>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	4a35      	ldr	r2, [pc, #212]	@ (8010f94 <SDMMC_GetCmdResp6+0xe8>)
 8010ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8010ec4:	0a5b      	lsrs	r3, r3, #9
 8010ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010eca:	fb02 f303 	mul.w	r3, r2, r3
 8010ece:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	1e5a      	subs	r2, r3, #1
 8010ed4:	61fa      	str	r2, [r7, #28]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d102      	bne.n	8010ee0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010eda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010ede:	e052      	b.n	8010f86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ee4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ee6:	69bb      	ldr	r3, [r7, #24]
 8010ee8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d0ef      	beq.n	8010ed0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010ef0:	69bb      	ldr	r3, [r7, #24]
 8010ef2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d1ea      	bne.n	8010ed0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010efe:	f003 0304 	and.w	r3, r3, #4
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d004      	beq.n	8010f10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2204      	movs	r2, #4
 8010f0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f0c:	2304      	movs	r3, #4
 8010f0e:	e03a      	b.n	8010f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010f14:	f003 0301 	and.w	r3, r3, #1
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d004      	beq.n	8010f26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f22:	2301      	movs	r3, #1
 8010f24:	e02f      	b.n	8010f86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f7ff fbca 	bl	80106c0 <SDMMC_GetCommandResponse>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	461a      	mov	r2, r3
 8010f30:	7afb      	ldrb	r3, [r7, #11]
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d001      	beq.n	8010f3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f36:	2301      	movs	r3, #1
 8010f38:	e025      	b.n	8010f86 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	22c5      	movs	r2, #197	@ 0xc5
 8010f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010f40:	2100      	movs	r1, #0
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f7ff fbc9 	bl	80106da <SDMMC_GetResponse>
 8010f48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d106      	bne.n	8010f62 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	0c1b      	lsrs	r3, r3, #16
 8010f58:	b29a      	uxth	r2, r3
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	e011      	b.n	8010f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d002      	beq.n	8010f72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010f70:	e009      	b.n	8010f86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010f72:	697b      	ldr	r3, [r7, #20]
 8010f74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d002      	beq.n	8010f82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010f80:	e001      	b.n	8010f86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010f82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3720      	adds	r7, #32
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd80      	pop	{r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	2000001c 	.word	0x2000001c
 8010f94:	10624dd3 	.word	0x10624dd3

08010f98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fa0:	4b22      	ldr	r3, [pc, #136]	@ (801102c <SDMMC_GetCmdResp7+0x94>)
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	4a22      	ldr	r2, [pc, #136]	@ (8011030 <SDMMC_GetCmdResp7+0x98>)
 8010fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8010faa:	0a5b      	lsrs	r3, r3, #9
 8010fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010fb0:	fb02 f303 	mul.w	r3, r2, r3
 8010fb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	1e5a      	subs	r2, r3, #1
 8010fba:	60fa      	str	r2, [r7, #12]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d102      	bne.n	8010fc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010fc4:	e02c      	b.n	8011020 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d0ef      	beq.n	8010fb6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d1ea      	bne.n	8010fb6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010fe4:	f003 0304 	and.w	r3, r3, #4
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d004      	beq.n	8010ff6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2204      	movs	r2, #4
 8010ff0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ff2:	2304      	movs	r3, #4
 8010ff4:	e014      	b.n	8011020 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ffa:	f003 0301 	and.w	r3, r3, #1
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d004      	beq.n	801100c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2201      	movs	r2, #1
 8011006:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011008:	2301      	movs	r3, #1
 801100a:	e009      	b.n	8011020 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011014:	2b00      	cmp	r3, #0
 8011016:	d002      	beq.n	801101e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2240      	movs	r2, #64	@ 0x40
 801101c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801101e:	2300      	movs	r3, #0
  
}
 8011020:	4618      	mov	r0, r3
 8011022:	3714      	adds	r7, #20
 8011024:	46bd      	mov	sp, r7
 8011026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102a:	4770      	bx	lr
 801102c:	2000001c 	.word	0x2000001c
 8011030:	10624dd3 	.word	0x10624dd3

08011034 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011034:	b480      	push	{r7}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801103c:	4b11      	ldr	r3, [pc, #68]	@ (8011084 <SDMMC_GetCmdError+0x50>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	4a11      	ldr	r2, [pc, #68]	@ (8011088 <SDMMC_GetCmdError+0x54>)
 8011042:	fba2 2303 	umull	r2, r3, r2, r3
 8011046:	0a5b      	lsrs	r3, r3, #9
 8011048:	f241 3288 	movw	r2, #5000	@ 0x1388
 801104c:	fb02 f303 	mul.w	r3, r2, r3
 8011050:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	1e5a      	subs	r2, r3, #1
 8011056:	60fa      	str	r2, [r7, #12]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d102      	bne.n	8011062 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801105c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011060:	e009      	b.n	8011076 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801106a:	2b00      	cmp	r3, #0
 801106c:	d0f1      	beq.n	8011052 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	22c5      	movs	r2, #197	@ 0xc5
 8011072:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3714      	adds	r7, #20
 801107a:	46bd      	mov	sp, r7
 801107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011080:	4770      	bx	lr
 8011082:	bf00      	nop
 8011084:	2000001c 	.word	0x2000001c
 8011088:	10624dd3 	.word	0x10624dd3

0801108c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	f043 0201 	orr.w	r2, r3, #1
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80110a0:	2300      	movs	r3, #0
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	370c      	adds	r7, #12
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80110ae:	b480      	push	{r7}
 80110b0:	b083      	sub	sp, #12
 80110b2:	af00      	add	r7, sp, #0
 80110b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	689b      	ldr	r3, [r3, #8]
 80110ba:	f023 0201 	bic.w	r2, r3, #1
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80110c2:	2300      	movs	r3, #0
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	370c      	adds	r7, #12
 80110c8:	46bd      	mov	sp, r7
 80110ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ce:	4770      	bx	lr

080110d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80110d0:	b480      	push	{r7}
 80110d2:	b085      	sub	sp, #20
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80110da:	2300      	movs	r3, #0
 80110dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	3301      	adds	r3, #1
 80110e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80110ea:	d901      	bls.n	80110f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80110ec:	2303      	movs	r3, #3
 80110ee:	e01b      	b.n	8011128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	691b      	ldr	r3, [r3, #16]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	daf2      	bge.n	80110de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80110f8:	2300      	movs	r3, #0
 80110fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	019b      	lsls	r3, r3, #6
 8011100:	f043 0220 	orr.w	r2, r3, #32
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	3301      	adds	r3, #1
 801110c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011114:	d901      	bls.n	801111a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011116:	2303      	movs	r3, #3
 8011118:	e006      	b.n	8011128 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	691b      	ldr	r3, [r3, #16]
 801111e:	f003 0320 	and.w	r3, r3, #32
 8011122:	2b20      	cmp	r3, #32
 8011124:	d0f0      	beq.n	8011108 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011126:	2300      	movs	r3, #0
}
 8011128:	4618      	mov	r0, r3
 801112a:	3714      	adds	r7, #20
 801112c:	46bd      	mov	sp, r7
 801112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011132:	4770      	bx	lr

08011134 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011134:	b480      	push	{r7}
 8011136:	b085      	sub	sp, #20
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801113c:	2300      	movs	r3, #0
 801113e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	3301      	adds	r3, #1
 8011144:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801114c:	d901      	bls.n	8011152 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801114e:	2303      	movs	r3, #3
 8011150:	e018      	b.n	8011184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	691b      	ldr	r3, [r3, #16]
 8011156:	2b00      	cmp	r3, #0
 8011158:	daf2      	bge.n	8011140 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801115a:	2300      	movs	r3, #0
 801115c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2210      	movs	r2, #16
 8011162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	3301      	adds	r3, #1
 8011168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011170:	d901      	bls.n	8011176 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011172:	2303      	movs	r3, #3
 8011174:	e006      	b.n	8011184 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	691b      	ldr	r3, [r3, #16]
 801117a:	f003 0310 	and.w	r3, r3, #16
 801117e:	2b10      	cmp	r3, #16
 8011180:	d0f0      	beq.n	8011164 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011182:	2300      	movs	r3, #0
}
 8011184:	4618      	mov	r0, r3
 8011186:	3714      	adds	r7, #20
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr

08011190 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011190:	b480      	push	{r7}
 8011192:	b08b      	sub	sp, #44	@ 0x2c
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	4613      	mov	r3, r2
 801119c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80111a2:	68bb      	ldr	r3, [r7, #8]
 80111a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80111a6:	88fb      	ldrh	r3, [r7, #6]
 80111a8:	089b      	lsrs	r3, r3, #2
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80111ae:	88fb      	ldrh	r3, [r7, #6]
 80111b0:	f003 0303 	and.w	r3, r3, #3
 80111b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80111b6:	2300      	movs	r3, #0
 80111b8:	623b      	str	r3, [r7, #32]
 80111ba:	e014      	b.n	80111e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80111bc:	69bb      	ldr	r3, [r7, #24]
 80111be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80111c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ca:	3301      	adds	r3, #1
 80111cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80111ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d0:	3301      	adds	r3, #1
 80111d2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80111d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d6:	3301      	adds	r3, #1
 80111d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80111da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111dc:	3301      	adds	r3, #1
 80111de:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80111e0:	6a3b      	ldr	r3, [r7, #32]
 80111e2:	3301      	adds	r3, #1
 80111e4:	623b      	str	r3, [r7, #32]
 80111e6:	6a3a      	ldr	r2, [r7, #32]
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d3e6      	bcc.n	80111bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80111ee:	8bfb      	ldrh	r3, [r7, #30]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d01e      	beq.n	8011232 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80111f4:	2300      	movs	r3, #0
 80111f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80111f8:	69bb      	ldr	r3, [r7, #24]
 80111fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80111fe:	461a      	mov	r2, r3
 8011200:	f107 0310 	add.w	r3, r7, #16
 8011204:	6812      	ldr	r2, [r2, #0]
 8011206:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011208:	693a      	ldr	r2, [r7, #16]
 801120a:	6a3b      	ldr	r3, [r7, #32]
 801120c:	b2db      	uxtb	r3, r3
 801120e:	00db      	lsls	r3, r3, #3
 8011210:	fa22 f303 	lsr.w	r3, r2, r3
 8011214:	b2da      	uxtb	r2, r3
 8011216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011218:	701a      	strb	r2, [r3, #0]
      i++;
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	3301      	adds	r3, #1
 801121e:	623b      	str	r3, [r7, #32]
      pDest++;
 8011220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011222:	3301      	adds	r3, #1
 8011224:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8011226:	8bfb      	ldrh	r3, [r7, #30]
 8011228:	3b01      	subs	r3, #1
 801122a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801122c:	8bfb      	ldrh	r3, [r7, #30]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d1ea      	bne.n	8011208 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011234:	4618      	mov	r0, r3
 8011236:	372c      	adds	r7, #44	@ 0x2c
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr

08011240 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011240:	b480      	push	{r7}
 8011242:	b085      	sub	sp, #20
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	695b      	ldr	r3, [r3, #20]
 801124c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	699b      	ldr	r3, [r3, #24]
 8011252:	68fa      	ldr	r2, [r7, #12]
 8011254:	4013      	ands	r3, r2
 8011256:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011258:	68fb      	ldr	r3, [r7, #12]
}
 801125a:	4618      	mov	r0, r3
 801125c:	3714      	adds	r7, #20
 801125e:	46bd      	mov	sp, r7
 8011260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011264:	4770      	bx	lr

08011266 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8011266:	b480      	push	{r7}
 8011268:	b085      	sub	sp, #20
 801126a:	af00      	add	r7, sp, #0
 801126c:	6078      	str	r0, [r7, #4]
 801126e:	460b      	mov	r3, r1
 8011270:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8011276:	78fb      	ldrb	r3, [r7, #3]
 8011278:	015a      	lsls	r2, r3, #5
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	4413      	add	r3, r2
 801127e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011282:	689b      	ldr	r3, [r3, #8]
 8011284:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8011286:	78fb      	ldrb	r3, [r7, #3]
 8011288:	015a      	lsls	r2, r3, #5
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	4413      	add	r3, r2
 801128e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	68ba      	ldr	r2, [r7, #8]
 8011296:	4013      	ands	r3, r2
 8011298:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801129a:	68bb      	ldr	r3, [r7, #8]
}
 801129c:	4618      	mov	r0, r3
 801129e:	3714      	adds	r7, #20
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	f003 0301 	and.w	r3, r3, #1
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr

080112c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80112c4:	b480      	push	{r7}
 80112c6:	b085      	sub	sp, #20
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	460b      	mov	r3, r1
 80112ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	68fa      	ldr	r2, [r7, #12]
 80112de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80112e2:	f023 0303 	bic.w	r3, r3, #3
 80112e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	78fb      	ldrb	r3, [r7, #3]
 80112f2:	f003 0303 	and.w	r3, r3, #3
 80112f6:	68f9      	ldr	r1, [r7, #12]
 80112f8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80112fc:	4313      	orrs	r3, r2
 80112fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011300:	78fb      	ldrb	r3, [r7, #3]
 8011302:	2b01      	cmp	r3, #1
 8011304:	d107      	bne.n	8011316 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801130c:	461a      	mov	r2, r3
 801130e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8011312:	6053      	str	r3, [r2, #4]
 8011314:	e00c      	b.n	8011330 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8011316:	78fb      	ldrb	r3, [r7, #3]
 8011318:	2b02      	cmp	r3, #2
 801131a:	d107      	bne.n	801132c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011322:	461a      	mov	r2, r3
 8011324:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011328:	6053      	str	r3, [r2, #4]
 801132a:	e001      	b.n	8011330 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 801132c:	2301      	movs	r3, #1
 801132e:	e000      	b.n	8011332 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011330:	2300      	movs	r3, #0
}
 8011332:	4618      	mov	r0, r3
 8011334:	3714      	adds	r7, #20
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr

0801133e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801133e:	b480      	push	{r7}
 8011340:	b085      	sub	sp, #20
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011350:	695b      	ldr	r3, [r3, #20]
 8011352:	b29b      	uxth	r3, r3
}
 8011354:	4618      	mov	r0, r3
 8011356:	3714      	adds	r7, #20
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr

08011360 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011360:	b480      	push	{r7}
 8011362:	b089      	sub	sp, #36	@ 0x24
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	460b      	mov	r3, r1
 801136a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011370:	78fb      	ldrb	r3, [r7, #3]
 8011372:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8011374:	2300      	movs	r3, #0
 8011376:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	015a      	lsls	r2, r3, #5
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	4413      	add	r3, r2
 8011380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	0c9b      	lsrs	r3, r3, #18
 8011388:	f003 0303 	and.w	r3, r3, #3
 801138c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 801138e:	69bb      	ldr	r3, [r7, #24]
 8011390:	015a      	lsls	r2, r3, #5
 8011392:	69fb      	ldr	r3, [r7, #28]
 8011394:	4413      	add	r3, r2
 8011396:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	0fdb      	lsrs	r3, r3, #31
 801139e:	f003 0301 	and.w	r3, r3, #1
 80113a2:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	015a      	lsls	r2, r3, #5
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	4413      	add	r3, r2
 80113ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	0fdb      	lsrs	r3, r3, #31
 80113b4:	f003 0301 	and.w	r3, r3, #1
 80113b8:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	f003 0320 	and.w	r3, r3, #32
 80113c2:	2b20      	cmp	r3, #32
 80113c4:	d10d      	bne.n	80113e2 <USB_HC_Halt+0x82>
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d10a      	bne.n	80113e2 <USB_HC_Halt+0x82>
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d005      	beq.n	80113de <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d002      	beq.n	80113de <USB_HC_Halt+0x7e>
 80113d8:	697b      	ldr	r3, [r7, #20]
 80113da:	2b03      	cmp	r3, #3
 80113dc:	d101      	bne.n	80113e2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80113de:	2300      	movs	r3, #0
 80113e0:	e0d8      	b.n	8011594 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d002      	beq.n	80113ee <USB_HC_Halt+0x8e>
 80113e8:	697b      	ldr	r3, [r7, #20]
 80113ea:	2b02      	cmp	r3, #2
 80113ec:	d173      	bne.n	80114d6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80113ee:	69bb      	ldr	r3, [r7, #24]
 80113f0:	015a      	lsls	r2, r3, #5
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	4413      	add	r3, r2
 80113f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	69ba      	ldr	r2, [r7, #24]
 80113fe:	0151      	lsls	r1, r2, #5
 8011400:	69fa      	ldr	r2, [r7, #28]
 8011402:	440a      	add	r2, r1
 8011404:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011408:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801140c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	689b      	ldr	r3, [r3, #8]
 8011412:	f003 0320 	and.w	r3, r3, #32
 8011416:	2b00      	cmp	r3, #0
 8011418:	d14a      	bne.n	80114b0 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801141e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011422:	2b00      	cmp	r3, #0
 8011424:	d133      	bne.n	801148e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	015a      	lsls	r2, r3, #5
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	4413      	add	r3, r2
 801142e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	69ba      	ldr	r2, [r7, #24]
 8011436:	0151      	lsls	r1, r2, #5
 8011438:	69fa      	ldr	r2, [r7, #28]
 801143a:	440a      	add	r2, r1
 801143c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011440:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011444:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	015a      	lsls	r2, r3, #5
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	4413      	add	r3, r2
 801144e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	69ba      	ldr	r2, [r7, #24]
 8011456:	0151      	lsls	r1, r2, #5
 8011458:	69fa      	ldr	r2, [r7, #28]
 801145a:	440a      	add	r2, r1
 801145c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011460:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011464:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	3301      	adds	r3, #1
 801146a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011472:	d82e      	bhi.n	80114d2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011474:	69bb      	ldr	r3, [r7, #24]
 8011476:	015a      	lsls	r2, r3, #5
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	4413      	add	r3, r2
 801147c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011486:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801148a:	d0ec      	beq.n	8011466 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801148c:	e081      	b.n	8011592 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	015a      	lsls	r2, r3, #5
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	4413      	add	r3, r2
 8011496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	69ba      	ldr	r2, [r7, #24]
 801149e:	0151      	lsls	r1, r2, #5
 80114a0:	69fa      	ldr	r2, [r7, #28]
 80114a2:	440a      	add	r2, r1
 80114a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80114ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114ae:	e070      	b.n	8011592 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	015a      	lsls	r2, r3, #5
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	4413      	add	r3, r2
 80114b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	69ba      	ldr	r2, [r7, #24]
 80114c0:	0151      	lsls	r1, r2, #5
 80114c2:	69fa      	ldr	r2, [r7, #28]
 80114c4:	440a      	add	r2, r1
 80114c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80114ce:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114d0:	e05f      	b.n	8011592 <USB_HC_Halt+0x232>
            break;
 80114d2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80114d4:	e05d      	b.n	8011592 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	015a      	lsls	r2, r3, #5
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	4413      	add	r3, r2
 80114de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	69ba      	ldr	r2, [r7, #24]
 80114e6:	0151      	lsls	r1, r2, #5
 80114e8:	69fa      	ldr	r2, [r7, #28]
 80114ea:	440a      	add	r2, r1
 80114ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80114f4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011502:	2b00      	cmp	r3, #0
 8011504:	d133      	bne.n	801156e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011506:	69bb      	ldr	r3, [r7, #24]
 8011508:	015a      	lsls	r2, r3, #5
 801150a:	69fb      	ldr	r3, [r7, #28]
 801150c:	4413      	add	r3, r2
 801150e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	69ba      	ldr	r2, [r7, #24]
 8011516:	0151      	lsls	r1, r2, #5
 8011518:	69fa      	ldr	r2, [r7, #28]
 801151a:	440a      	add	r2, r1
 801151c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011520:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011524:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011526:	69bb      	ldr	r3, [r7, #24]
 8011528:	015a      	lsls	r2, r3, #5
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	4413      	add	r3, r2
 801152e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	69ba      	ldr	r2, [r7, #24]
 8011536:	0151      	lsls	r1, r2, #5
 8011538:	69fa      	ldr	r2, [r7, #28]
 801153a:	440a      	add	r2, r1
 801153c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011540:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011544:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	3301      	adds	r3, #1
 801154a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 801154c:	68bb      	ldr	r3, [r7, #8]
 801154e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011552:	d81d      	bhi.n	8011590 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	015a      	lsls	r2, r3, #5
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	4413      	add	r3, r2
 801155c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801156a:	d0ec      	beq.n	8011546 <USB_HC_Halt+0x1e6>
 801156c:	e011      	b.n	8011592 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	015a      	lsls	r2, r3, #5
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	4413      	add	r3, r2
 8011576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	69ba      	ldr	r2, [r7, #24]
 801157e:	0151      	lsls	r1, r2, #5
 8011580:	69fa      	ldr	r2, [r7, #28]
 8011582:	440a      	add	r2, r1
 8011584:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011588:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801158c:	6013      	str	r3, [r2, #0]
 801158e:	e000      	b.n	8011592 <USB_HC_Halt+0x232>
          break;
 8011590:	bf00      	nop
    }
  }

  return HAL_OK;
 8011592:	2300      	movs	r3, #0
}
 8011594:	4618      	mov	r0, r3
 8011596:	3724      	adds	r7, #36	@ 0x24
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b088      	sub	sp, #32
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80115a8:	2300      	movs	r3, #0
 80115aa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80115b0:	2300      	movs	r3, #0
 80115b2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f7ff fd7a 	bl	80110ae <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80115ba:	2110      	movs	r1, #16
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f7ff fd87 	bl	80110d0 <USB_FlushTxFifo>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80115c8:	2301      	movs	r3, #1
 80115ca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80115cc:	6878      	ldr	r0, [r7, #4]
 80115ce:	f7ff fdb1 	bl	8011134 <USB_FlushRxFifo>
 80115d2:	4603      	mov	r3, r0
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d001      	beq.n	80115dc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80115d8:	2301      	movs	r3, #1
 80115da:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80115dc:	2300      	movs	r3, #0
 80115de:	61bb      	str	r3, [r7, #24]
 80115e0:	e01f      	b.n	8011622 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80115e2:	69bb      	ldr	r3, [r7, #24]
 80115e4:	015a      	lsls	r2, r3, #5
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	4413      	add	r3, r2
 80115ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80115f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011600:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011608:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	015a      	lsls	r2, r3, #5
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	4413      	add	r3, r2
 8011612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011616:	461a      	mov	r2, r3
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	3301      	adds	r3, #1
 8011620:	61bb      	str	r3, [r7, #24]
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	2b0f      	cmp	r3, #15
 8011626:	d9dc      	bls.n	80115e2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011628:	2300      	movs	r3, #0
 801162a:	61bb      	str	r3, [r7, #24]
 801162c:	e034      	b.n	8011698 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 801162e:	69bb      	ldr	r3, [r7, #24]
 8011630:	015a      	lsls	r2, r3, #5
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	4413      	add	r3, r2
 8011636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 801163e:	693b      	ldr	r3, [r7, #16]
 8011640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011644:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801164c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011654:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	015a      	lsls	r2, r3, #5
 801165a:	697b      	ldr	r3, [r7, #20]
 801165c:	4413      	add	r3, r2
 801165e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011662:	461a      	mov	r2, r3
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	3301      	adds	r3, #1
 801166c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011674:	d80c      	bhi.n	8011690 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	015a      	lsls	r2, r3, #5
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	4413      	add	r3, r2
 801167e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011688:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801168c:	d0ec      	beq.n	8011668 <USB_StopHost+0xc8>
 801168e:	e000      	b.n	8011692 <USB_StopHost+0xf2>
        break;
 8011690:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011692:	69bb      	ldr	r3, [r7, #24]
 8011694:	3301      	adds	r3, #1
 8011696:	61bb      	str	r3, [r7, #24]
 8011698:	69bb      	ldr	r3, [r7, #24]
 801169a:	2b0f      	cmp	r3, #15
 801169c:	d9c7      	bls.n	801162e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80116a4:	461a      	mov	r2, r3
 80116a6:	f04f 33ff 	mov.w	r3, #4294967295
 80116aa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f04f 32ff 	mov.w	r2, #4294967295
 80116b2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f7ff fce9 	bl	801108c <USB_EnableGlobalInt>

  return ret;
 80116ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3720      	adds	r7, #32
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80116c8:	4904      	ldr	r1, [pc, #16]	@ (80116dc <MX_FATFS_Init+0x18>)
 80116ca:	4805      	ldr	r0, [pc, #20]	@ (80116e0 <MX_FATFS_Init+0x1c>)
 80116cc:	f003 f91e 	bl	801490c <FATFS_LinkDriver>
 80116d0:	4603      	mov	r3, r0
 80116d2:	461a      	mov	r2, r3
 80116d4:	4b03      	ldr	r3, [pc, #12]	@ (80116e4 <MX_FATFS_Init+0x20>)
 80116d6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80116d8:	bf00      	nop
 80116da:	bd80      	pop	{r7, pc}
 80116dc:	2000268c 	.word	0x2000268c
 80116e0:	0801b93c 	.word	0x0801b93c
 80116e4:	20002688 	.word	0x20002688

080116e8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80116e8:	b480      	push	{r7}
 80116ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80116ec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80116fe:	2300      	movs	r3, #0
 8011700:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011702:	f000 f879 	bl	80117f8 <BSP_SD_IsDetected>
 8011706:	4603      	mov	r3, r0
 8011708:	2b01      	cmp	r3, #1
 801170a:	d001      	beq.n	8011710 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801170c:	2302      	movs	r3, #2
 801170e:	e012      	b.n	8011736 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011710:	480b      	ldr	r0, [pc, #44]	@ (8011740 <BSP_SD_Init+0x48>)
 8011712:	f7fa feed 	bl	800c4f0 <HAL_SD_Init>
 8011716:	4603      	mov	r3, r0
 8011718:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801171a:	79fb      	ldrb	r3, [r7, #7]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d109      	bne.n	8011734 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011720:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011724:	4806      	ldr	r0, [pc, #24]	@ (8011740 <BSP_SD_Init+0x48>)
 8011726:	f7fb fcc7 	bl	800d0b8 <HAL_SD_ConfigWideBusOperation>
 801172a:	4603      	mov	r3, r0
 801172c:	2b00      	cmp	r3, #0
 801172e:	d001      	beq.n	8011734 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011730:	2301      	movs	r3, #1
 8011732:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011734:	79fb      	ldrb	r3, [r7, #7]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}
 801173e:	bf00      	nop
 8011740:	20001d50 	.word	0x20001d50

08011744 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af02      	add	r7, sp, #8
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
 8011750:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011752:	2300      	movs	r3, #0
 8011754:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	9300      	str	r3, [sp, #0]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	68ba      	ldr	r2, [r7, #8]
 801175e:	68f9      	ldr	r1, [r7, #12]
 8011760:	4806      	ldr	r0, [pc, #24]	@ (801177c <BSP_SD_ReadBlocks+0x38>)
 8011762:	f7fa ff75 	bl	800c650 <HAL_SD_ReadBlocks>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d001      	beq.n	8011770 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 801176c:	2301      	movs	r3, #1
 801176e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011770:	7dfb      	ldrb	r3, [r7, #23]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3718      	adds	r7, #24
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop
 801177c:	20001d50 	.word	0x20001d50

08011780 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b088      	sub	sp, #32
 8011784:	af02      	add	r7, sp, #8
 8011786:	60f8      	str	r0, [r7, #12]
 8011788:	60b9      	str	r1, [r7, #8]
 801178a:	607a      	str	r2, [r7, #4]
 801178c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801178e:	2300      	movs	r3, #0
 8011790:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	9300      	str	r3, [sp, #0]
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	68ba      	ldr	r2, [r7, #8]
 801179a:	68f9      	ldr	r1, [r7, #12]
 801179c:	4806      	ldr	r0, [pc, #24]	@ (80117b8 <BSP_SD_WriteBlocks+0x38>)
 801179e:	f7fb f935 	bl	800ca0c <HAL_SD_WriteBlocks>
 80117a2:	4603      	mov	r3, r0
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d001      	beq.n	80117ac <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80117a8:	2301      	movs	r3, #1
 80117aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80117ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3718      	adds	r7, #24
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}
 80117b6:	bf00      	nop
 80117b8:	20001d50 	.word	0x20001d50

080117bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80117c0:	4805      	ldr	r0, [pc, #20]	@ (80117d8 <BSP_SD_GetCardState+0x1c>)
 80117c2:	f7fb fd13 	bl	800d1ec <HAL_SD_GetCardState>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b04      	cmp	r3, #4
 80117ca:	bf14      	ite	ne
 80117cc:	2301      	movne	r3, #1
 80117ce:	2300      	moveq	r3, #0
 80117d0:	b2db      	uxtb	r3, r3
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	20001d50 	.word	0x20001d50

080117dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80117e4:	6879      	ldr	r1, [r7, #4]
 80117e6:	4803      	ldr	r0, [pc, #12]	@ (80117f4 <BSP_SD_GetCardInfo+0x18>)
 80117e8:	f7fb fc3a 	bl	800d060 <HAL_SD_GetCardInfo>
}
 80117ec:	bf00      	nop
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}
 80117f4:	20001d50 	.word	0x20001d50

080117f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80117fe:	2301      	movs	r3, #1
 8011800:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011802:	f000 f80b 	bl	801181c <BSP_PlatformIsDetected>
 8011806:	4603      	mov	r3, r0
 8011808:	2b00      	cmp	r3, #0
 801180a:	d101      	bne.n	8011810 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801180c:	2300      	movs	r3, #0
 801180e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011810:	79fb      	ldrb	r3, [r7, #7]
 8011812:	b2db      	uxtb	r3, r3
}
 8011814:	4618      	mov	r0, r3
 8011816:	3708      	adds	r7, #8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011822:	2301      	movs	r3, #1
 8011824:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011826:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801182a:	4806      	ldr	r0, [pc, #24]	@ (8011844 <BSP_PlatformIsDetected+0x28>)
 801182c:	f7f6 fbac 	bl	8007f88 <HAL_GPIO_ReadPin>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d001      	beq.n	801183a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011836:	2300      	movs	r3, #0
 8011838:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801183a:	79fb      	ldrb	r3, [r7, #7]
}
 801183c:	4618      	mov	r0, r3
 801183e:	3708      	adds	r7, #8
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	40020800 	.word	0x40020800

08011848 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011848:	b480      	push	{r7}
 801184a:	b087      	sub	sp, #28
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801185a:	2320      	movs	r3, #32
 801185c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801185e:	f3bf 8f4f 	dsb	sy
}
 8011862:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011864:	e00b      	b.n	801187e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8011866:	4a0d      	ldr	r2, [pc, #52]	@ (801189c <SCB_InvalidateDCache_by_Addr+0x54>)
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	693a      	ldr	r2, [r7, #16]
 8011872:	4413      	add	r3, r2
 8011874:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	2b00      	cmp	r3, #0
 8011882:	dcf0      	bgt.n	8011866 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011884:	f3bf 8f4f 	dsb	sy
}
 8011888:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801188a:	f3bf 8f6f 	isb	sy
}
 801188e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011890:	bf00      	nop
 8011892:	371c      	adds	r7, #28
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr
 801189c:	e000ed00 	.word	0xe000ed00

080118a0 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 80118a0:	b480      	push	{r7}
 80118a2:	b087      	sub	sp, #28
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80118b2:	2320      	movs	r3, #32
 80118b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80118b6:	f3bf 8f4f 	dsb	sy
}
 80118ba:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80118bc:	e00b      	b.n	80118d6 <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 80118be:	4a0d      	ldr	r2, [pc, #52]	@ (80118f4 <SCB_CleanDCache_by_Addr+0x54>)
 80118c0:	693b      	ldr	r3, [r7, #16]
 80118c2:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	693a      	ldr	r2, [r7, #16]
 80118ca:	4413      	add	r3, r2
 80118cc:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80118ce:	697a      	ldr	r2, [r7, #20]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	1ad3      	subs	r3, r2, r3
 80118d4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	dcf0      	bgt.n	80118be <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80118dc:	f3bf 8f4f 	dsb	sy
}
 80118e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80118e2:	f3bf 8f6f 	isb	sy
}
 80118e6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80118e8:	bf00      	nop
 80118ea:	371c      	adds	r7, #28
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr
 80118f4:	e000ed00 	.word	0xe000ed00

080118f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011900:	f003 f850 	bl	80149a4 <osKernelSysTick>
 8011904:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011906:	e006      	b.n	8011916 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011908:	f7ff ff58 	bl	80117bc <BSP_SD_GetCardState>
 801190c:	4603      	mov	r3, r0
 801190e:	2b00      	cmp	r3, #0
 8011910:	d101      	bne.n	8011916 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011912:	2300      	movs	r3, #0
 8011914:	e009      	b.n	801192a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011916:	f003 f845 	bl	80149a4 <osKernelSysTick>
 801191a:	4602      	mov	r2, r0
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	1ad3      	subs	r3, r2, r3
 8011920:	687a      	ldr	r2, [r7, #4]
 8011922:	429a      	cmp	r2, r3
 8011924:	d8f0      	bhi.n	8011908 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011926:	f04f 33ff 	mov.w	r3, #4294967295
}
 801192a:	4618      	mov	r0, r3
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
	...

08011934 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	4603      	mov	r3, r0
 801193c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801193e:	4b0b      	ldr	r3, [pc, #44]	@ (801196c <SD_CheckStatus+0x38>)
 8011940:	2201      	movs	r2, #1
 8011942:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011944:	f7ff ff3a 	bl	80117bc <BSP_SD_GetCardState>
 8011948:	4603      	mov	r3, r0
 801194a:	2b00      	cmp	r3, #0
 801194c:	d107      	bne.n	801195e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801194e:	4b07      	ldr	r3, [pc, #28]	@ (801196c <SD_CheckStatus+0x38>)
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	b2db      	uxtb	r3, r3
 8011954:	f023 0301 	bic.w	r3, r3, #1
 8011958:	b2da      	uxtb	r2, r3
 801195a:	4b04      	ldr	r3, [pc, #16]	@ (801196c <SD_CheckStatus+0x38>)
 801195c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801195e:	4b03      	ldr	r3, [pc, #12]	@ (801196c <SD_CheckStatus+0x38>)
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	b2db      	uxtb	r3, r3
}
 8011964:	4618      	mov	r0, r3
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	2000006d 	.word	0x2000006d

08011970 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011970:	b590      	push	{r4, r7, lr}
 8011972:	b087      	sub	sp, #28
 8011974:	af00      	add	r7, sp, #0
 8011976:	4603      	mov	r3, r0
 8011978:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801197a:	4b1d      	ldr	r3, [pc, #116]	@ (80119f0 <SD_initialize+0x80>)
 801197c:	2201      	movs	r2, #1
 801197e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8011980:	f003 f804 	bl	801498c <osKernelRunning>
 8011984:	4603      	mov	r3, r0
 8011986:	2b00      	cmp	r3, #0
 8011988:	d02b      	beq.n	80119e2 <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 801198a:	79fb      	ldrb	r3, [r7, #7]
 801198c:	4618      	mov	r0, r3
 801198e:	f7ff ffd1 	bl	8011934 <SD_CheckStatus>
 8011992:	4603      	mov	r3, r0
 8011994:	461a      	mov	r2, r3
 8011996:	4b16      	ldr	r3, [pc, #88]	@ (80119f0 <SD_initialize+0x80>)
 8011998:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 801199a:	4b15      	ldr	r3, [pc, #84]	@ (80119f0 <SD_initialize+0x80>)
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d01e      	beq.n	80119e2 <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 80119a4:	4b13      	ldr	r3, [pc, #76]	@ (80119f4 <SD_initialize+0x84>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d10e      	bne.n	80119ca <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80119ac:	4b12      	ldr	r3, [pc, #72]	@ (80119f8 <SD_initialize+0x88>)
 80119ae:	f107 0408 	add.w	r4, r7, #8
 80119b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80119b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80119b8:	f107 0308 	add.w	r3, r7, #8
 80119bc:	2100      	movs	r1, #0
 80119be:	4618      	mov	r0, r3
 80119c0:	f003 f860 	bl	8014a84 <osMessageCreate>
 80119c4:	4603      	mov	r3, r0
 80119c6:	4a0b      	ldr	r2, [pc, #44]	@ (80119f4 <SD_initialize+0x84>)
 80119c8:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80119ca:	4b0a      	ldr	r3, [pc, #40]	@ (80119f4 <SD_initialize+0x84>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d107      	bne.n	80119e2 <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 80119d2:	4b07      	ldr	r3, [pc, #28]	@ (80119f0 <SD_initialize+0x80>)
 80119d4:	781b      	ldrb	r3, [r3, #0]
 80119d6:	b2db      	uxtb	r3, r3
 80119d8:	f043 0301 	orr.w	r3, r3, #1
 80119dc:	b2da      	uxtb	r2, r3
 80119de:	4b04      	ldr	r3, [pc, #16]	@ (80119f0 <SD_initialize+0x80>)
 80119e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80119e2:	4b03      	ldr	r3, [pc, #12]	@ (80119f0 <SD_initialize+0x80>)
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	b2db      	uxtb	r3, r3
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	371c      	adds	r7, #28
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd90      	pop	{r4, r7, pc}
 80119f0:	2000006d 	.word	0x2000006d
 80119f4:	20002ac0 	.word	0x20002ac0
 80119f8:	0801b8c0 	.word	0x0801b8c0

080119fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	4603      	mov	r3, r0
 8011a04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011a06:	79fb      	ldrb	r3, [r7, #7]
 8011a08:	4618      	mov	r0, r3
 8011a0a:	f7ff ff93 	bl	8011934 <SD_CheckStatus>
 8011a0e:	4603      	mov	r3, r0
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3708      	adds	r7, #8
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b08a      	sub	sp, #40	@ 0x28
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60b9      	str	r1, [r7, #8]
 8011a20:	607a      	str	r2, [r7, #4]
 8011a22:	603b      	str	r3, [r7, #0]
 8011a24:	4603      	mov	r3, r0
 8011a26:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011a2e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011a32:	f7ff ff61 	bl	80118f8 <SD_CheckStatusWithTimeout>
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	da02      	bge.n	8011a42 <SD_read+0x2a>
  {
    return res;
 8011a3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011a40:	e051      	b.n	8011ae6 <SD_read+0xce>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	f003 0303 	and.w	r3, r3, #3
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d111      	bne.n	8011a70 <SD_read+0x58>
  {
#endif
    /* Use polling mode instead of DMA to avoid callback issues */
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 8011a4c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011a50:	683a      	ldr	r2, [r7, #0]
 8011a52:	6879      	ldr	r1, [r7, #4]
 8011a54:	68b8      	ldr	r0, [r7, #8]
 8011a56:	f7ff fe75 	bl	8011744 <BSP_SD_ReadBlocks>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ret == MSD_OK) {
 8011a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d13c      	bne.n	8011ae2 <SD_read+0xca>
      /* Polling mode - no need for message queue */
      res = RES_OK;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8011a6e:	e038      	b.n	8011ae2 <SD_read+0xca>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 8011a70:	2300      	movs	r3, #0
 8011a72:	623b      	str	r3, [r7, #32]
 8011a74:	e024      	b.n	8011ac0 <SD_read+0xa8>
      {
        ret = BSP_SD_ReadBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 8011a76:	6879      	ldr	r1, [r7, #4]
 8011a78:	1c4b      	adds	r3, r1, #1
 8011a7a:	607b      	str	r3, [r7, #4]
 8011a7c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011a80:	2201      	movs	r2, #1
 8011a82:	481b      	ldr	r0, [pc, #108]	@ (8011af0 <SD_read+0xd8>)
 8011a84:	f7ff fe5e 	bl	8011744 <BSP_SD_ReadBlocks>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret == MSD_OK )
 8011a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d119      	bne.n	8011aca <SD_read+0xb2>
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
          /*
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8011a96:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011a9a:	4815      	ldr	r0, [pc, #84]	@ (8011af0 <SD_read+0xd8>)
 8011a9c:	f7ff fed4 	bl	8011848 <SCB_InvalidateDCache_by_Addr>
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8011aa0:	68bb      	ldr	r3, [r7, #8]
 8011aa2:	4a13      	ldr	r2, [pc, #76]	@ (8011af0 <SD_read+0xd8>)
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	4611      	mov	r1, r2
 8011aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011aac:	461a      	mov	r2, r3
 8011aae:	f005 fe88 	bl	80177c2 <memcpy>
          buff += BLOCKSIZE;
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8011ab8:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8011aba:	6a3b      	ldr	r3, [r7, #32]
 8011abc:	3301      	adds	r3, #1
 8011abe:	623b      	str	r3, [r7, #32]
 8011ac0:	6a3b      	ldr	r3, [r7, #32]
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	429a      	cmp	r2, r3
 8011ac6:	d8d6      	bhi.n	8011a76 <SD_read+0x5e>
 8011ac8:	e000      	b.n	8011acc <SD_read+0xb4>
        }
        else
        {
          break;
 8011aca:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8011acc:	6a3b      	ldr	r3, [r7, #32]
 8011ace:	683a      	ldr	r2, [r7, #0]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d106      	bne.n	8011ae2 <SD_read+0xca>
 8011ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d102      	bne.n	8011ae2 <SD_read+0xca>
        res = RES_OK;
 8011adc:	2300      	movs	r3, #0
 8011ade:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
#endif
  return res;
 8011ae2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3728      	adds	r7, #40	@ 0x28
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	200028c0 	.word	0x200028c0

08011af4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b08c      	sub	sp, #48	@ 0x30
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	60b9      	str	r1, [r7, #8]
 8011afc:	607a      	str	r2, [r7, #4]
 8011afe:	603b      	str	r3, [r7, #0]
 8011b00:	4603      	mov	r3, r0
 8011b02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011b04:	2301      	movs	r3, #1
 8011b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011b0a:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011b0e:	f7ff fef3 	bl	80118f8 <SD_CheckStatusWithTimeout>
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	da02      	bge.n	8011b1e <SD_write+0x2a>
  {
    return res;
 8011b18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011b1c:	e082      	b.n	8011c24 <SD_write+0x130>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8011b1e:	68bb      	ldr	r3, [r7, #8]
 8011b20:	f003 0303 	and.w	r3, r3, #3
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d17b      	bne.n	8011c20 <SD_write+0x12c>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	f023 031f 	bic.w	r3, r3, #31
 8011b2e:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8011b30:	6a38      	ldr	r0, [r7, #32]
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	025a      	lsls	r2, r3, #9
 8011b36:	68b9      	ldr	r1, [r7, #8]
 8011b38:	6a3b      	ldr	r3, [r7, #32]
 8011b3a:	1acb      	subs	r3, r1, r3
 8011b3c:	4413      	add	r3, r2
 8011b3e:	4619      	mov	r1, r3
 8011b40:	f7ff feae 	bl	80118a0 <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011b44:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011b48:	683a      	ldr	r2, [r7, #0]
 8011b4a:	6879      	ldr	r1, [r7, #4]
 8011b4c:	68b8      	ldr	r0, [r7, #8]
 8011b4e:	f7ff fe17 	bl	8011780 <BSP_SD_WriteBlocks>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d103      	bne.n	8011b60 <SD_write+0x6c>
                        (uint32_t) (sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* Polling mode - no need for message queue */
    res = RES_OK;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011b5e:	e05f      	b.n	8011c20 <SD_write+0x12c>

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8011b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8011b64:	4831      	ldr	r0, [pc, #196]	@ (8011c2c <SD_write+0x138>)
 8011b66:	f7ff fe6f 	bl	8011848 <SCB_InvalidateDCache_by_Addr>
#endif
      for (i = 0; i < count; i++)
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b6e:	e045      	b.n	8011bfc <SD_write+0x108>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 8011b70:	4a2e      	ldr	r2, [pc, #184]	@ (8011c2c <SD_write+0x138>)
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	4610      	mov	r0, r2
 8011b76:	4619      	mov	r1, r3
 8011b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	f005 fe20 	bl	80177c2 <memcpy>
        buff += BLOCKSIZE;
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8011b88:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 8011b8a:	6879      	ldr	r1, [r7, #4]
 8011b8c:	1c4b      	adds	r3, r1, #1
 8011b8e:	607b      	str	r3, [r7, #4]
 8011b90:	f247 5330 	movw	r3, #30000	@ 0x7530
 8011b94:	2201      	movs	r2, #1
 8011b96:	4825      	ldr	r0, [pc, #148]	@ (8011c2c <SD_write+0x138>)
 8011b98:	f7ff fdf2 	bl	8011780 <BSP_SD_WriteBlocks>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ret == MSD_OK )
 8011ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d12f      	bne.n	8011c06 <SD_write+0x112>
        {
          /* Polling mode - operation already completed */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011ba6:	4b22      	ldr	r3, [pc, #136]	@ (8011c30 <SD_write+0x13c>)
 8011ba8:	6819      	ldr	r1, [r3, #0]
 8011baa:	f107 0310 	add.w	r3, r7, #16
 8011bae:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f002 ffce 	bl	8014b54 <osMessageGet>

          if (event.status == osEventMessage)
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	2b10      	cmp	r3, #16
 8011bbc:	d11b      	bne.n	8011bf6 <SD_write+0x102>
          {
            if (event.value.v == READ_CPLT_MSG)
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d118      	bne.n	8011bf6 <SD_write+0x102>
            {
              timer = osKernelSysTick();
 8011bc4:	f002 feee 	bl	80149a4 <osKernelSysTick>
 8011bc8:	61f8      	str	r0, [r7, #28]
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8011bca:	e006      	b.n	8011bda <SD_write+0xe6>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 8011bcc:	f7ff fdf6 	bl	80117bc <BSP_SD_GetCardState>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

                  if (ret == MSD_OK)
 8011bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d009      	beq.n	8011bee <SD_write+0xfa>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8011bda:	f002 fee3 	bl	80149a4 <osKernelSysTick>
 8011bde:	4602      	mov	r2, r0
 8011be0:	69fb      	ldr	r3, [r7, #28]
 8011be2:	1ad3      	subs	r3, r2, r3
 8011be4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d9ef      	bls.n	8011bcc <SD_write+0xd8>
 8011bec:	e000      	b.n	8011bf0 <SD_write+0xfc>
                  {
                    break;
 8011bee:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 8011bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d109      	bne.n	8011c0a <SD_write+0x116>
      for (i = 0; i < count; i++)
 8011bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bf8:	3301      	adds	r3, #1
 8011bfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8011bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bfe:	683a      	ldr	r2, [r7, #0]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d8b5      	bhi.n	8011b70 <SD_write+0x7c>
 8011c04:	e002      	b.n	8011c0c <SD_write+0x118>
          }
#endif
        }
        else
        {
          break;
 8011c06:	bf00      	nop
 8011c08:	e000      	b.n	8011c0c <SD_write+0x118>
                  break;
 8011c0a:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c0e:	683a      	ldr	r2, [r7, #0]
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d105      	bne.n	8011c20 <SD_write+0x12c>
 8011c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d102      	bne.n	8011c20 <SD_write+0x12c>
        res = RES_OK;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

  }
#endif

  return res;
 8011c20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3730      	adds	r7, #48	@ 0x30
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	200028c0 	.word	0x200028c0
 8011c30:	20002ac0 	.word	0x20002ac0

08011c34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b08c      	sub	sp, #48	@ 0x30
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	603a      	str	r2, [r7, #0]
 8011c3e:	71fb      	strb	r3, [r7, #7]
 8011c40:	460b      	mov	r3, r1
 8011c42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011c44:	2301      	movs	r3, #1
 8011c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011c4a:	4b25      	ldr	r3, [pc, #148]	@ (8011ce0 <SD_ioctl+0xac>)
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	b2db      	uxtb	r3, r3
 8011c50:	f003 0301 	and.w	r3, r3, #1
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d001      	beq.n	8011c5c <SD_ioctl+0x28>
 8011c58:	2303      	movs	r3, #3
 8011c5a:	e03c      	b.n	8011cd6 <SD_ioctl+0xa2>

  switch (cmd)
 8011c5c:	79bb      	ldrb	r3, [r7, #6]
 8011c5e:	2b03      	cmp	r3, #3
 8011c60:	d834      	bhi.n	8011ccc <SD_ioctl+0x98>
 8011c62:	a201      	add	r2, pc, #4	@ (adr r2, 8011c68 <SD_ioctl+0x34>)
 8011c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c68:	08011c79 	.word	0x08011c79
 8011c6c:	08011c81 	.word	0x08011c81
 8011c70:	08011c99 	.word	0x08011c99
 8011c74:	08011cb3 	.word	0x08011cb3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011c7e:	e028      	b.n	8011cd2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011c80:	f107 030c 	add.w	r3, r7, #12
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7ff fda9 	bl	80117dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011c90:	2300      	movs	r3, #0
 8011c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011c96:	e01c      	b.n	8011cd2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011c98:	f107 030c 	add.w	r3, r7, #12
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f7ff fd9d 	bl	80117dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ca4:	b29a      	uxth	r2, r3
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011caa:	2300      	movs	r3, #0
 8011cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011cb0:	e00f      	b.n	8011cd2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011cb2:	f107 030c 	add.w	r3, r7, #12
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	f7ff fd90 	bl	80117dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cbe:	0a5a      	lsrs	r2, r3, #9
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011cca:	e002      	b.n	8011cd2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011ccc:	2304      	movs	r3, #4
 8011cce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3730      	adds	r7, #48	@ 0x30
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	2000006d 	.word	0x2000006d

08011ce4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8011cf2:	1c5a      	adds	r2, r3, #1
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 f804 	bl	8011d08 <USBH_HandleSof>
}
 8011d00:	bf00      	nop
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b082      	sub	sp, #8
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	b2db      	uxtb	r3, r3
 8011d16:	2b0b      	cmp	r3, #11
 8011d18:	d10a      	bne.n	8011d30 <USBH_HandleSof+0x28>
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d005      	beq.n	8011d30 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011d2a:	699b      	ldr	r3, [r3, #24]
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	4798      	blx	r3
  }
}
 8011d30:	bf00      	nop
 8011d32:	3708      	adds	r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	b082      	sub	sp, #8
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2201      	movs	r2, #1
 8011d44:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011d48:	2300      	movs	r3, #0
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	2101      	movs	r1, #1
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f000 f85b 	bl	8011e0a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8011d54:	bf00      	nop
}
 8011d56:	3708      	adds	r7, #8
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8011d5c:	b480      	push	{r7}
 8011d5e:	b083      	sub	sp, #12
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2200      	movs	r2, #0
 8011d68:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2201      	movs	r2, #1
 8011d70:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8011d74:	bf00      	nop
}
 8011d76:	370c      	adds	r7, #12
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr

08011d80 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	2201      	movs	r2, #1
 8011d8c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2200      	movs	r2, #0
 8011d94:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011da0:	2300      	movs	r3, #0
 8011da2:	2200      	movs	r2, #0
 8011da4:	2101      	movs	r1, #1
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 f82f 	bl	8011e0a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011dac:	2300      	movs	r3, #0
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3708      	adds	r7, #8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}

08011db6 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8011db6:	b580      	push	{r7, lr}
 8011db8:	b082      	sub	sp, #8
 8011dba:	af00      	add	r7, sp, #0
 8011dbc:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	2201      	movs	r2, #1
 8011dc2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f005 f99c 	bl	8017114 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	791b      	ldrb	r3, [r3, #4]
 8011de0:	4619      	mov	r1, r3
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 f847 	bl	8011e76 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	795b      	ldrb	r3, [r3, #5]
 8011dec:	4619      	mov	r1, r3
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f000 f841 	bl	8011e76 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011df4:	2300      	movs	r3, #0
 8011df6:	2200      	movs	r2, #0
 8011df8:	2101      	movs	r1, #1
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 f805 	bl	8011e0a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011e00:	2300      	movs	r3, #0
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3708      	adds	r7, #8
 8011e06:	46bd      	mov	sp, r7
 8011e08:	bd80      	pop	{r7, pc}

08011e0a <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8011e0a:	b580      	push	{r7, lr}
 8011e0c:	b086      	sub	sp, #24
 8011e0e:	af00      	add	r7, sp, #0
 8011e10:	60f8      	str	r0, [r7, #12]
 8011e12:	607a      	str	r2, [r7, #4]
 8011e14:	603b      	str	r3, [r7, #0]
 8011e16:	460b      	mov	r3, r1
 8011e18:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8011e1a:	7afa      	ldrb	r2, [r7, #11]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f002 ff07 	bl	8014c3c <osMessageWaiting>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	f1c3 0310 	rsb	r3, r3, #16
 8011e34:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d009      	beq.n	8011e50 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	f002 fe42 	bl	8014ad4 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8011e50:	bf00      	nop
 8011e52:	3718      	adds	r7, #24
 8011e54:	46bd      	mov	sp, r7
 8011e56:	bd80      	pop	{r7, pc}

08011e58 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b082      	sub	sp, #8
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8011e60:	2300      	movs	r3, #0
 8011e62:	2200      	movs	r2, #0
 8011e64:	2101      	movs	r1, #1
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff ffcf 	bl	8011e0a <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8011e6c:	2300      	movs	r3, #0
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011e76:	b480      	push	{r7}
 8011e78:	b083      	sub	sp, #12
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
 8011e7e:	460b      	mov	r3, r1
 8011e80:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011e82:	78fb      	ldrb	r3, [r7, #3]
 8011e84:	2b0f      	cmp	r3, #15
 8011e86:	d80d      	bhi.n	8011ea4 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011e88:	78fb      	ldrb	r3, [r7, #3]
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	33e0      	adds	r3, #224	@ 0xe0
 8011e8e:	009b      	lsls	r3, r3, #2
 8011e90:	4413      	add	r3, r2
 8011e92:	685a      	ldr	r2, [r3, #4]
 8011e94:	78fb      	ldrb	r3, [r7, #3]
 8011e96:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011e9a:	6879      	ldr	r1, [r7, #4]
 8011e9c:	33e0      	adds	r3, #224	@ 0xe0
 8011e9e:	009b      	lsls	r3, r3, #2
 8011ea0:	440b      	add	r3, r1
 8011ea2:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011ea4:	2300      	movs	r3, #0
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	370c      	adds	r7, #12
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr
	...

08011eb4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	4603      	mov	r3, r0
 8011ebc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011ebe:	79fb      	ldrb	r3, [r7, #7]
 8011ec0:	4a08      	ldr	r2, [pc, #32]	@ (8011ee4 <disk_status+0x30>)
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	4413      	add	r3, r2
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	79fa      	ldrb	r2, [r7, #7]
 8011ecc:	4905      	ldr	r1, [pc, #20]	@ (8011ee4 <disk_status+0x30>)
 8011ece:	440a      	add	r2, r1
 8011ed0:	7a12      	ldrb	r2, [r2, #8]
 8011ed2:	4610      	mov	r0, r2
 8011ed4:	4798      	blx	r3
 8011ed6:	4603      	mov	r3, r0
 8011ed8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3710      	adds	r7, #16
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	20002acc 	.word	0x20002acc

08011ee8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	4603      	mov	r3, r0
 8011ef0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011ef6:	79fb      	ldrb	r3, [r7, #7]
 8011ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8011f30 <disk_initialize+0x48>)
 8011efa:	5cd3      	ldrb	r3, [r2, r3]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d111      	bne.n	8011f24 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011f00:	79fb      	ldrb	r3, [r7, #7]
 8011f02:	4a0b      	ldr	r2, [pc, #44]	@ (8011f30 <disk_initialize+0x48>)
 8011f04:	2101      	movs	r1, #1
 8011f06:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011f08:	79fb      	ldrb	r3, [r7, #7]
 8011f0a:	4a09      	ldr	r2, [pc, #36]	@ (8011f30 <disk_initialize+0x48>)
 8011f0c:	009b      	lsls	r3, r3, #2
 8011f0e:	4413      	add	r3, r2
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	79fa      	ldrb	r2, [r7, #7]
 8011f16:	4906      	ldr	r1, [pc, #24]	@ (8011f30 <disk_initialize+0x48>)
 8011f18:	440a      	add	r2, r1
 8011f1a:	7a12      	ldrb	r2, [r2, #8]
 8011f1c:	4610      	mov	r0, r2
 8011f1e:	4798      	blx	r3
 8011f20:	4603      	mov	r3, r0
 8011f22:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3710      	adds	r7, #16
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	bd80      	pop	{r7, pc}
 8011f2e:	bf00      	nop
 8011f30:	20002acc 	.word	0x20002acc

08011f34 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011f34:	b590      	push	{r4, r7, lr}
 8011f36:	b087      	sub	sp, #28
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	60b9      	str	r1, [r7, #8]
 8011f3c:	607a      	str	r2, [r7, #4]
 8011f3e:	603b      	str	r3, [r7, #0]
 8011f40:	4603      	mov	r3, r0
 8011f42:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011f44:	7bfb      	ldrb	r3, [r7, #15]
 8011f46:	4a0a      	ldr	r2, [pc, #40]	@ (8011f70 <disk_read+0x3c>)
 8011f48:	009b      	lsls	r3, r3, #2
 8011f4a:	4413      	add	r3, r2
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	689c      	ldr	r4, [r3, #8]
 8011f50:	7bfb      	ldrb	r3, [r7, #15]
 8011f52:	4a07      	ldr	r2, [pc, #28]	@ (8011f70 <disk_read+0x3c>)
 8011f54:	4413      	add	r3, r2
 8011f56:	7a18      	ldrb	r0, [r3, #8]
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	68b9      	ldr	r1, [r7, #8]
 8011f5e:	47a0      	blx	r4
 8011f60:	4603      	mov	r3, r0
 8011f62:	75fb      	strb	r3, [r7, #23]
  return res;
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f66:	4618      	mov	r0, r3
 8011f68:	371c      	adds	r7, #28
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd90      	pop	{r4, r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	20002acc 	.word	0x20002acc

08011f74 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011f74:	b590      	push	{r4, r7, lr}
 8011f76:	b087      	sub	sp, #28
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	60b9      	str	r1, [r7, #8]
 8011f7c:	607a      	str	r2, [r7, #4]
 8011f7e:	603b      	str	r3, [r7, #0]
 8011f80:	4603      	mov	r3, r0
 8011f82:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011f84:	7bfb      	ldrb	r3, [r7, #15]
 8011f86:	4a0a      	ldr	r2, [pc, #40]	@ (8011fb0 <disk_write+0x3c>)
 8011f88:	009b      	lsls	r3, r3, #2
 8011f8a:	4413      	add	r3, r2
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	68dc      	ldr	r4, [r3, #12]
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	4a07      	ldr	r2, [pc, #28]	@ (8011fb0 <disk_write+0x3c>)
 8011f94:	4413      	add	r3, r2
 8011f96:	7a18      	ldrb	r0, [r3, #8]
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	68b9      	ldr	r1, [r7, #8]
 8011f9e:	47a0      	blx	r4
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	75fb      	strb	r3, [r7, #23]
  return res;
 8011fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	371c      	adds	r7, #28
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd90      	pop	{r4, r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	20002acc 	.word	0x20002acc

08011fb4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	4603      	mov	r3, r0
 8011fbc:	603a      	str	r2, [r7, #0]
 8011fbe:	71fb      	strb	r3, [r7, #7]
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011fc4:	79fb      	ldrb	r3, [r7, #7]
 8011fc6:	4a09      	ldr	r2, [pc, #36]	@ (8011fec <disk_ioctl+0x38>)
 8011fc8:	009b      	lsls	r3, r3, #2
 8011fca:	4413      	add	r3, r2
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	691b      	ldr	r3, [r3, #16]
 8011fd0:	79fa      	ldrb	r2, [r7, #7]
 8011fd2:	4906      	ldr	r1, [pc, #24]	@ (8011fec <disk_ioctl+0x38>)
 8011fd4:	440a      	add	r2, r1
 8011fd6:	7a10      	ldrb	r0, [r2, #8]
 8011fd8:	79b9      	ldrb	r1, [r7, #6]
 8011fda:	683a      	ldr	r2, [r7, #0]
 8011fdc:	4798      	blx	r3
 8011fde:	4603      	mov	r3, r0
 8011fe0:	73fb      	strb	r3, [r7, #15]
  return res;
 8011fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3710      	adds	r7, #16
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}
 8011fec:	20002acc 	.word	0x20002acc

08011ff0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b085      	sub	sp, #20
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012000:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012004:	021b      	lsls	r3, r3, #8
 8012006:	b21a      	sxth	r2, r3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	b21b      	sxth	r3, r3
 801200e:	4313      	orrs	r3, r2
 8012010:	b21b      	sxth	r3, r3
 8012012:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012014:	89fb      	ldrh	r3, [r7, #14]
}
 8012016:	4618      	mov	r0, r3
 8012018:	3714      	adds	r7, #20
 801201a:	46bd      	mov	sp, r7
 801201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012020:	4770      	bx	lr

08012022 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012022:	b480      	push	{r7}
 8012024:	b085      	sub	sp, #20
 8012026:	af00      	add	r7, sp, #0
 8012028:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	3303      	adds	r3, #3
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	021b      	lsls	r3, r3, #8
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	3202      	adds	r2, #2
 801203a:	7812      	ldrb	r2, [r2, #0]
 801203c:	4313      	orrs	r3, r2
 801203e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	021b      	lsls	r3, r3, #8
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	3201      	adds	r2, #1
 8012048:	7812      	ldrb	r2, [r2, #0]
 801204a:	4313      	orrs	r3, r2
 801204c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	021b      	lsls	r3, r3, #8
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	7812      	ldrb	r2, [r2, #0]
 8012056:	4313      	orrs	r3, r2
 8012058:	60fb      	str	r3, [r7, #12]
	return rv;
 801205a:	68fb      	ldr	r3, [r7, #12]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3714      	adds	r7, #20
 8012060:	46bd      	mov	sp, r7
 8012062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012066:	4770      	bx	lr

08012068 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
 8012070:	460b      	mov	r3, r1
 8012072:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	1c5a      	adds	r2, r3, #1
 8012078:	607a      	str	r2, [r7, #4]
 801207a:	887a      	ldrh	r2, [r7, #2]
 801207c:	b2d2      	uxtb	r2, r2
 801207e:	701a      	strb	r2, [r3, #0]
 8012080:	887b      	ldrh	r3, [r7, #2]
 8012082:	0a1b      	lsrs	r3, r3, #8
 8012084:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	1c5a      	adds	r2, r3, #1
 801208a:	607a      	str	r2, [r7, #4]
 801208c:	887a      	ldrh	r2, [r7, #2]
 801208e:	b2d2      	uxtb	r2, r2
 8012090:	701a      	strb	r2, [r3, #0]
}
 8012092:	bf00      	nop
 8012094:	370c      	adds	r7, #12
 8012096:	46bd      	mov	sp, r7
 8012098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209c:	4770      	bx	lr

0801209e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801209e:	b480      	push	{r7}
 80120a0:	b083      	sub	sp, #12
 80120a2:	af00      	add	r7, sp, #0
 80120a4:	6078      	str	r0, [r7, #4]
 80120a6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	1c5a      	adds	r2, r3, #1
 80120ac:	607a      	str	r2, [r7, #4]
 80120ae:	683a      	ldr	r2, [r7, #0]
 80120b0:	b2d2      	uxtb	r2, r2
 80120b2:	701a      	strb	r2, [r3, #0]
 80120b4:	683b      	ldr	r3, [r7, #0]
 80120b6:	0a1b      	lsrs	r3, r3, #8
 80120b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	607a      	str	r2, [r7, #4]
 80120c0:	683a      	ldr	r2, [r7, #0]
 80120c2:	b2d2      	uxtb	r2, r2
 80120c4:	701a      	strb	r2, [r3, #0]
 80120c6:	683b      	ldr	r3, [r7, #0]
 80120c8:	0a1b      	lsrs	r3, r3, #8
 80120ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	1c5a      	adds	r2, r3, #1
 80120d0:	607a      	str	r2, [r7, #4]
 80120d2:	683a      	ldr	r2, [r7, #0]
 80120d4:	b2d2      	uxtb	r2, r2
 80120d6:	701a      	strb	r2, [r3, #0]
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	0a1b      	lsrs	r3, r3, #8
 80120dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	1c5a      	adds	r2, r3, #1
 80120e2:	607a      	str	r2, [r7, #4]
 80120e4:	683a      	ldr	r2, [r7, #0]
 80120e6:	b2d2      	uxtb	r2, r2
 80120e8:	701a      	strb	r2, [r3, #0]
}
 80120ea:	bf00      	nop
 80120ec:	370c      	adds	r7, #12
 80120ee:	46bd      	mov	sp, r7
 80120f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f4:	4770      	bx	lr

080120f6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80120f6:	b480      	push	{r7}
 80120f8:	b087      	sub	sp, #28
 80120fa:	af00      	add	r7, sp, #0
 80120fc:	60f8      	str	r0, [r7, #12]
 80120fe:	60b9      	str	r1, [r7, #8]
 8012100:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2b00      	cmp	r3, #0
 801210e:	d00d      	beq.n	801212c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012110:	693a      	ldr	r2, [r7, #16]
 8012112:	1c53      	adds	r3, r2, #1
 8012114:	613b      	str	r3, [r7, #16]
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	1c59      	adds	r1, r3, #1
 801211a:	6179      	str	r1, [r7, #20]
 801211c:	7812      	ldrb	r2, [r2, #0]
 801211e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	3b01      	subs	r3, #1
 8012124:	607b      	str	r3, [r7, #4]
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d1f1      	bne.n	8012110 <mem_cpy+0x1a>
	}
}
 801212c:	bf00      	nop
 801212e:	371c      	adds	r7, #28
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr

08012138 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012138:	b480      	push	{r7}
 801213a:	b087      	sub	sp, #28
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	1c5a      	adds	r2, r3, #1
 801214c:	617a      	str	r2, [r7, #20]
 801214e:	68ba      	ldr	r2, [r7, #8]
 8012150:	b2d2      	uxtb	r2, r2
 8012152:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	3b01      	subs	r3, #1
 8012158:	607b      	str	r3, [r7, #4]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d1f3      	bne.n	8012148 <mem_set+0x10>
}
 8012160:	bf00      	nop
 8012162:	bf00      	nop
 8012164:	371c      	adds	r7, #28
 8012166:	46bd      	mov	sp, r7
 8012168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216c:	4770      	bx	lr

0801216e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801216e:	b480      	push	{r7}
 8012170:	b089      	sub	sp, #36	@ 0x24
 8012172:	af00      	add	r7, sp, #0
 8012174:	60f8      	str	r0, [r7, #12]
 8012176:	60b9      	str	r1, [r7, #8]
 8012178:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	61fb      	str	r3, [r7, #28]
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012182:	2300      	movs	r3, #0
 8012184:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012186:	69fb      	ldr	r3, [r7, #28]
 8012188:	1c5a      	adds	r2, r3, #1
 801218a:	61fa      	str	r2, [r7, #28]
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	4619      	mov	r1, r3
 8012190:	69bb      	ldr	r3, [r7, #24]
 8012192:	1c5a      	adds	r2, r3, #1
 8012194:	61ba      	str	r2, [r7, #24]
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	1acb      	subs	r3, r1, r3
 801219a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	3b01      	subs	r3, #1
 80121a0:	607b      	str	r3, [r7, #4]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d002      	beq.n	80121ae <mem_cmp+0x40>
 80121a8:	697b      	ldr	r3, [r7, #20]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d0eb      	beq.n	8012186 <mem_cmp+0x18>

	return r;
 80121ae:	697b      	ldr	r3, [r7, #20]
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3724      	adds	r7, #36	@ 0x24
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr

080121bc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80121bc:	b480      	push	{r7}
 80121be:	b083      	sub	sp, #12
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80121c6:	e002      	b.n	80121ce <chk_chr+0x12>
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	3301      	adds	r3, #1
 80121cc:	607b      	str	r3, [r7, #4]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d005      	beq.n	80121e2 <chk_chr+0x26>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	781b      	ldrb	r3, [r3, #0]
 80121da:	461a      	mov	r2, r3
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	4293      	cmp	r3, r2
 80121e0:	d1f2      	bne.n	80121c8 <chk_chr+0xc>
	return *str;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	781b      	ldrb	r3, [r3, #0]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	370c      	adds	r7, #12
 80121ea:	46bd      	mov	sp, r7
 80121ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f0:	4770      	bx	lr

080121f2 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80121f2:	b580      	push	{r7, lr}
 80121f4:	b086      	sub	sp, #24
 80121f6:	af00      	add	r7, sp, #0
 80121f8:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80121fa:	2300      	movs	r3, #0
 80121fc:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	78db      	ldrb	r3, [r3, #3]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d034      	beq.n	8012270 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801220a:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	7858      	ldrb	r0, [r3, #1]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012216:	2301      	movs	r3, #1
 8012218:	697a      	ldr	r2, [r7, #20]
 801221a:	f7ff feab 	bl	8011f74 <disk_write>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d002      	beq.n	801222a <sync_window+0x38>
			res = FR_DISK_ERR;
 8012224:	2301      	movs	r3, #1
 8012226:	73fb      	strb	r3, [r7, #15]
 8012228:	e022      	b.n	8012270 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2200      	movs	r2, #0
 801222e:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	6a1b      	ldr	r3, [r3, #32]
 8012234:	697a      	ldr	r2, [r7, #20]
 8012236:	1ad2      	subs	r2, r2, r3
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	699b      	ldr	r3, [r3, #24]
 801223c:	429a      	cmp	r2, r3
 801223e:	d217      	bcs.n	8012270 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	789b      	ldrb	r3, [r3, #2]
 8012244:	613b      	str	r3, [r7, #16]
 8012246:	e010      	b.n	801226a <sync_window+0x78>
					wsect += fs->fsize;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	699b      	ldr	r3, [r3, #24]
 801224c:	697a      	ldr	r2, [r7, #20]
 801224e:	4413      	add	r3, r2
 8012250:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	7858      	ldrb	r0, [r3, #1]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801225c:	2301      	movs	r3, #1
 801225e:	697a      	ldr	r2, [r7, #20]
 8012260:	f7ff fe88 	bl	8011f74 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	3b01      	subs	r3, #1
 8012268:	613b      	str	r3, [r7, #16]
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	2b01      	cmp	r3, #1
 801226e:	d8eb      	bhi.n	8012248 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012270:	7bfb      	ldrb	r3, [r7, #15]
}
 8012272:	4618      	mov	r0, r3
 8012274:	3718      	adds	r7, #24
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b084      	sub	sp, #16
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8012284:	2300      	movs	r3, #0
 8012286:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801228c:	683a      	ldr	r2, [r7, #0]
 801228e:	429a      	cmp	r2, r3
 8012290:	d01b      	beq.n	80122ca <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f7ff ffad 	bl	80121f2 <sync_window>
 8012298:	4603      	mov	r3, r0
 801229a:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801229c:	7bfb      	ldrb	r3, [r7, #15]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d113      	bne.n	80122ca <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	7858      	ldrb	r0, [r3, #1]
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80122ac:	2301      	movs	r3, #1
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	f7ff fe40 	bl	8011f34 <disk_read>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d004      	beq.n	80122c4 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80122ba:	f04f 33ff 	mov.w	r3, #4294967295
 80122be:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80122c0:	2301      	movs	r3, #1
 80122c2:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	683a      	ldr	r2, [r7, #0]
 80122c8:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80122ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3710      	adds	r7, #16
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f7ff ff88 	bl	80121f2 <sync_window>
 80122e2:	4603      	mov	r3, r0
 80122e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80122e6:	7bfb      	ldrb	r3, [r7, #15]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d158      	bne.n	801239e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	2b03      	cmp	r3, #3
 80122f2:	d148      	bne.n	8012386 <sync_fs+0xb2>
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	791b      	ldrb	r3, [r3, #4]
 80122f8:	2b01      	cmp	r3, #1
 80122fa:	d144      	bne.n	8012386 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	3330      	adds	r3, #48	@ 0x30
 8012300:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012304:	2100      	movs	r1, #0
 8012306:	4618      	mov	r0, r3
 8012308:	f7ff ff16 	bl	8012138 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	3330      	adds	r3, #48	@ 0x30
 8012310:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012314:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012318:	4618      	mov	r0, r3
 801231a:	f7ff fea5 	bl	8012068 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	3330      	adds	r3, #48	@ 0x30
 8012322:	4921      	ldr	r1, [pc, #132]	@ (80123a8 <sync_fs+0xd4>)
 8012324:	4618      	mov	r0, r3
 8012326:	f7ff feba 	bl	801209e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	3330      	adds	r3, #48	@ 0x30
 801232e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012332:	491e      	ldr	r1, [pc, #120]	@ (80123ac <sync_fs+0xd8>)
 8012334:	4618      	mov	r0, r3
 8012336:	f7ff feb2 	bl	801209e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	3330      	adds	r3, #48	@ 0x30
 801233e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	691b      	ldr	r3, [r3, #16]
 8012346:	4619      	mov	r1, r3
 8012348:	4610      	mov	r0, r2
 801234a:	f7ff fea8 	bl	801209e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	3330      	adds	r3, #48	@ 0x30
 8012352:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	68db      	ldr	r3, [r3, #12]
 801235a:	4619      	mov	r1, r3
 801235c:	4610      	mov	r0, r2
 801235e:	f7ff fe9e 	bl	801209e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	69db      	ldr	r3, [r3, #28]
 8012366:	1c5a      	adds	r2, r3, #1
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	7858      	ldrb	r0, [r3, #1]
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801237a:	2301      	movs	r3, #1
 801237c:	f7ff fdfa 	bl	8011f74 <disk_write>
			fs->fsi_flag = 0;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	785b      	ldrb	r3, [r3, #1]
 801238a:	2200      	movs	r2, #0
 801238c:	2100      	movs	r1, #0
 801238e:	4618      	mov	r0, r3
 8012390:	f7ff fe10 	bl	8011fb4 <disk_ioctl>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d001      	beq.n	801239e <sync_fs+0xca>
 801239a:	2301      	movs	r3, #1
 801239c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801239e:	7bfb      	ldrb	r3, [r7, #15]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	41615252 	.word	0x41615252
 80123ac:	61417272 	.word	0x61417272

080123b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80123b0:	b480      	push	{r7}
 80123b2:	b083      	sub	sp, #12
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	3b02      	subs	r3, #2
 80123be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	695b      	ldr	r3, [r3, #20]
 80123c4:	3b02      	subs	r3, #2
 80123c6:	683a      	ldr	r2, [r7, #0]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d301      	bcc.n	80123d0 <clust2sect+0x20>
 80123cc:	2300      	movs	r3, #0
 80123ce:	e008      	b.n	80123e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	895b      	ldrh	r3, [r3, #10]
 80123d4:	461a      	mov	r2, r3
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	fb03 f202 	mul.w	r2, r3, r2
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123e0:	4413      	add	r3, r2
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	370c      	adds	r7, #12
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr

080123ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80123ee:	b580      	push	{r7, lr}
 80123f0:	b086      	sub	sp, #24
 80123f2:	af00      	add	r7, sp, #0
 80123f4:	6078      	str	r0, [r7, #4]
 80123f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	2b01      	cmp	r3, #1
 8012402:	d904      	bls.n	801240e <get_fat+0x20>
 8012404:	693b      	ldr	r3, [r7, #16]
 8012406:	695b      	ldr	r3, [r3, #20]
 8012408:	683a      	ldr	r2, [r7, #0]
 801240a:	429a      	cmp	r2, r3
 801240c:	d302      	bcc.n	8012414 <get_fat+0x26>
		val = 1;	/* Internal error */
 801240e:	2301      	movs	r3, #1
 8012410:	617b      	str	r3, [r7, #20]
 8012412:	e08e      	b.n	8012532 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012414:	f04f 33ff 	mov.w	r3, #4294967295
 8012418:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801241a:	693b      	ldr	r3, [r7, #16]
 801241c:	781b      	ldrb	r3, [r3, #0]
 801241e:	2b03      	cmp	r3, #3
 8012420:	d061      	beq.n	80124e6 <get_fat+0xf8>
 8012422:	2b03      	cmp	r3, #3
 8012424:	dc7b      	bgt.n	801251e <get_fat+0x130>
 8012426:	2b01      	cmp	r3, #1
 8012428:	d002      	beq.n	8012430 <get_fat+0x42>
 801242a:	2b02      	cmp	r3, #2
 801242c:	d041      	beq.n	80124b2 <get_fat+0xc4>
 801242e:	e076      	b.n	801251e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	60fb      	str	r3, [r7, #12]
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	085b      	lsrs	r3, r3, #1
 8012438:	68fa      	ldr	r2, [r7, #12]
 801243a:	4413      	add	r3, r2
 801243c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	6a1a      	ldr	r2, [r3, #32]
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	0a5b      	lsrs	r3, r3, #9
 8012446:	4413      	add	r3, r2
 8012448:	4619      	mov	r1, r3
 801244a:	6938      	ldr	r0, [r7, #16]
 801244c:	f7ff ff15 	bl	801227a <move_window>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d166      	bne.n	8012524 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	1c5a      	adds	r2, r3, #1
 801245a:	60fa      	str	r2, [r7, #12]
 801245c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012460:	693a      	ldr	r2, [r7, #16]
 8012462:	4413      	add	r3, r2
 8012464:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012468:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	6a1a      	ldr	r2, [r3, #32]
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	0a5b      	lsrs	r3, r3, #9
 8012472:	4413      	add	r3, r2
 8012474:	4619      	mov	r1, r3
 8012476:	6938      	ldr	r0, [r7, #16]
 8012478:	f7ff feff 	bl	801227a <move_window>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	d152      	bne.n	8012528 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012488:	693a      	ldr	r2, [r7, #16]
 801248a:	4413      	add	r3, r2
 801248c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012490:	021b      	lsls	r3, r3, #8
 8012492:	68ba      	ldr	r2, [r7, #8]
 8012494:	4313      	orrs	r3, r2
 8012496:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	f003 0301 	and.w	r3, r3, #1
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d002      	beq.n	80124a8 <get_fat+0xba>
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	091b      	lsrs	r3, r3, #4
 80124a6:	e002      	b.n	80124ae <get_fat+0xc0>
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80124ae:	617b      	str	r3, [r7, #20]
			break;
 80124b0:	e03f      	b.n	8012532 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	6a1a      	ldr	r2, [r3, #32]
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	0a1b      	lsrs	r3, r3, #8
 80124ba:	4413      	add	r3, r2
 80124bc:	4619      	mov	r1, r3
 80124be:	6938      	ldr	r0, [r7, #16]
 80124c0:	f7ff fedb 	bl	801227a <move_window>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d130      	bne.n	801252c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	005b      	lsls	r3, r3, #1
 80124d4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80124d8:	4413      	add	r3, r2
 80124da:	4618      	mov	r0, r3
 80124dc:	f7ff fd88 	bl	8011ff0 <ld_word>
 80124e0:	4603      	mov	r3, r0
 80124e2:	617b      	str	r3, [r7, #20]
			break;
 80124e4:	e025      	b.n	8012532 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80124e6:	693b      	ldr	r3, [r7, #16]
 80124e8:	6a1a      	ldr	r2, [r3, #32]
 80124ea:	683b      	ldr	r3, [r7, #0]
 80124ec:	09db      	lsrs	r3, r3, #7
 80124ee:	4413      	add	r3, r2
 80124f0:	4619      	mov	r1, r3
 80124f2:	6938      	ldr	r0, [r7, #16]
 80124f4:	f7ff fec1 	bl	801227a <move_window>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d118      	bne.n	8012530 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	009b      	lsls	r3, r3, #2
 8012508:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801250c:	4413      	add	r3, r2
 801250e:	4618      	mov	r0, r3
 8012510:	f7ff fd87 	bl	8012022 <ld_dword>
 8012514:	4603      	mov	r3, r0
 8012516:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 801251a:	617b      	str	r3, [r7, #20]
			break;
 801251c:	e009      	b.n	8012532 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801251e:	2301      	movs	r3, #1
 8012520:	617b      	str	r3, [r7, #20]
 8012522:	e006      	b.n	8012532 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012524:	bf00      	nop
 8012526:	e004      	b.n	8012532 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012528:	bf00      	nop
 801252a:	e002      	b.n	8012532 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801252c:	bf00      	nop
 801252e:	e000      	b.n	8012532 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012530:	bf00      	nop
		}
	}

	return val;
 8012532:	697b      	ldr	r3, [r7, #20]
}
 8012534:	4618      	mov	r0, r3
 8012536:	3718      	adds	r7, #24
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}

0801253c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801253c:	b590      	push	{r4, r7, lr}
 801253e:	b089      	sub	sp, #36	@ 0x24
 8012540:	af00      	add	r7, sp, #0
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	60b9      	str	r1, [r7, #8]
 8012546:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012548:	2302      	movs	r3, #2
 801254a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801254c:	68bb      	ldr	r3, [r7, #8]
 801254e:	2b01      	cmp	r3, #1
 8012550:	f240 80d9 	bls.w	8012706 <put_fat+0x1ca>
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	695b      	ldr	r3, [r3, #20]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	429a      	cmp	r2, r3
 801255c:	f080 80d3 	bcs.w	8012706 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b03      	cmp	r3, #3
 8012566:	f000 8096 	beq.w	8012696 <put_fat+0x15a>
 801256a:	2b03      	cmp	r3, #3
 801256c:	f300 80cb 	bgt.w	8012706 <put_fat+0x1ca>
 8012570:	2b01      	cmp	r3, #1
 8012572:	d002      	beq.n	801257a <put_fat+0x3e>
 8012574:	2b02      	cmp	r3, #2
 8012576:	d06e      	beq.n	8012656 <put_fat+0x11a>
 8012578:	e0c5      	b.n	8012706 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	61bb      	str	r3, [r7, #24]
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	085b      	lsrs	r3, r3, #1
 8012582:	69ba      	ldr	r2, [r7, #24]
 8012584:	4413      	add	r3, r2
 8012586:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6a1a      	ldr	r2, [r3, #32]
 801258c:	69bb      	ldr	r3, [r7, #24]
 801258e:	0a5b      	lsrs	r3, r3, #9
 8012590:	4413      	add	r3, r2
 8012592:	4619      	mov	r1, r3
 8012594:	68f8      	ldr	r0, [r7, #12]
 8012596:	f7ff fe70 	bl	801227a <move_window>
 801259a:	4603      	mov	r3, r0
 801259c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801259e:	7ffb      	ldrb	r3, [r7, #31]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	f040 80a9 	bne.w	80126f8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80125ac:	69bb      	ldr	r3, [r7, #24]
 80125ae:	1c59      	adds	r1, r3, #1
 80125b0:	61b9      	str	r1, [r7, #24]
 80125b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80125b6:	4413      	add	r3, r2
 80125b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	f003 0301 	and.w	r3, r3, #1
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00d      	beq.n	80125e0 <put_fat+0xa4>
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	b25b      	sxtb	r3, r3
 80125ca:	f003 030f 	and.w	r3, r3, #15
 80125ce:	b25a      	sxtb	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	b25b      	sxtb	r3, r3
 80125d4:	011b      	lsls	r3, r3, #4
 80125d6:	b25b      	sxtb	r3, r3
 80125d8:	4313      	orrs	r3, r2
 80125da:	b25b      	sxtb	r3, r3
 80125dc:	b2db      	uxtb	r3, r3
 80125de:	e001      	b.n	80125e4 <put_fat+0xa8>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	b2db      	uxtb	r3, r3
 80125e4:	697a      	ldr	r2, [r7, #20]
 80125e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	2201      	movs	r2, #1
 80125ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	6a1a      	ldr	r2, [r3, #32]
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	0a5b      	lsrs	r3, r3, #9
 80125f6:	4413      	add	r3, r2
 80125f8:	4619      	mov	r1, r3
 80125fa:	68f8      	ldr	r0, [r7, #12]
 80125fc:	f7ff fe3d 	bl	801227a <move_window>
 8012600:	4603      	mov	r3, r0
 8012602:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012604:	7ffb      	ldrb	r3, [r7, #31]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d178      	bne.n	80126fc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012610:	69bb      	ldr	r3, [r7, #24]
 8012612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012616:	4413      	add	r3, r2
 8012618:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801261a:	68bb      	ldr	r3, [r7, #8]
 801261c:	f003 0301 	and.w	r3, r3, #1
 8012620:	2b00      	cmp	r3, #0
 8012622:	d003      	beq.n	801262c <put_fat+0xf0>
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	091b      	lsrs	r3, r3, #4
 8012628:	b2db      	uxtb	r3, r3
 801262a:	e00e      	b.n	801264a <put_fat+0x10e>
 801262c:	697b      	ldr	r3, [r7, #20]
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	b25b      	sxtb	r3, r3
 8012632:	f023 030f 	bic.w	r3, r3, #15
 8012636:	b25a      	sxtb	r2, r3
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	0a1b      	lsrs	r3, r3, #8
 801263c:	b25b      	sxtb	r3, r3
 801263e:	f003 030f 	and.w	r3, r3, #15
 8012642:	b25b      	sxtb	r3, r3
 8012644:	4313      	orrs	r3, r2
 8012646:	b25b      	sxtb	r3, r3
 8012648:	b2db      	uxtb	r3, r3
 801264a:	697a      	ldr	r2, [r7, #20]
 801264c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	2201      	movs	r2, #1
 8012652:	70da      	strb	r2, [r3, #3]
			break;
 8012654:	e057      	b.n	8012706 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	6a1a      	ldr	r2, [r3, #32]
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	0a1b      	lsrs	r3, r3, #8
 801265e:	4413      	add	r3, r2
 8012660:	4619      	mov	r1, r3
 8012662:	68f8      	ldr	r0, [r7, #12]
 8012664:	f7ff fe09 	bl	801227a <move_window>
 8012668:	4603      	mov	r3, r0
 801266a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801266c:	7ffb      	ldrb	r3, [r7, #31]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d146      	bne.n	8012700 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	005b      	lsls	r3, r3, #1
 801267c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012680:	4413      	add	r3, r2
 8012682:	687a      	ldr	r2, [r7, #4]
 8012684:	b292      	uxth	r2, r2
 8012686:	4611      	mov	r1, r2
 8012688:	4618      	mov	r0, r3
 801268a:	f7ff fced 	bl	8012068 <st_word>
			fs->wflag = 1;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2201      	movs	r2, #1
 8012692:	70da      	strb	r2, [r3, #3]
			break;
 8012694:	e037      	b.n	8012706 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	6a1a      	ldr	r2, [r3, #32]
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	09db      	lsrs	r3, r3, #7
 801269e:	4413      	add	r3, r2
 80126a0:	4619      	mov	r1, r3
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f7ff fde9 	bl	801227a <move_window>
 80126a8:	4603      	mov	r3, r0
 80126aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80126ac:	7ffb      	ldrb	r3, [r7, #31]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d128      	bne.n	8012704 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	009b      	lsls	r3, r3, #2
 80126c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80126c6:	4413      	add	r3, r2
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7ff fcaa 	bl	8012022 <ld_dword>
 80126ce:	4603      	mov	r3, r0
 80126d0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80126d4:	4323      	orrs	r3, r4
 80126d6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	009b      	lsls	r3, r3, #2
 80126e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80126e6:	4413      	add	r3, r2
 80126e8:	6879      	ldr	r1, [r7, #4]
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7ff fcd7 	bl	801209e <st_dword>
			fs->wflag = 1;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	2201      	movs	r2, #1
 80126f4:	70da      	strb	r2, [r3, #3]
			break;
 80126f6:	e006      	b.n	8012706 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80126f8:	bf00      	nop
 80126fa:	e004      	b.n	8012706 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80126fc:	bf00      	nop
 80126fe:	e002      	b.n	8012706 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012700:	bf00      	nop
 8012702:	e000      	b.n	8012706 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012704:	bf00      	nop
		}
	}
	return res;
 8012706:	7ffb      	ldrb	r3, [r7, #31]
}
 8012708:	4618      	mov	r0, r3
 801270a:	3724      	adds	r7, #36	@ 0x24
 801270c:	46bd      	mov	sp, r7
 801270e:	bd90      	pop	{r4, r7, pc}

08012710 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012710:	b580      	push	{r7, lr}
 8012712:	b088      	sub	sp, #32
 8012714:	af00      	add	r7, sp, #0
 8012716:	60f8      	str	r0, [r7, #12]
 8012718:	60b9      	str	r1, [r7, #8]
 801271a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801271c:	2300      	movs	r3, #0
 801271e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012726:	68bb      	ldr	r3, [r7, #8]
 8012728:	2b01      	cmp	r3, #1
 801272a:	d904      	bls.n	8012736 <remove_chain+0x26>
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	695b      	ldr	r3, [r3, #20]
 8012730:	68ba      	ldr	r2, [r7, #8]
 8012732:	429a      	cmp	r2, r3
 8012734:	d301      	bcc.n	801273a <remove_chain+0x2a>
 8012736:	2302      	movs	r3, #2
 8012738:	e04b      	b.n	80127d2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d00c      	beq.n	801275a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012740:	f04f 32ff 	mov.w	r2, #4294967295
 8012744:	6879      	ldr	r1, [r7, #4]
 8012746:	69b8      	ldr	r0, [r7, #24]
 8012748:	f7ff fef8 	bl	801253c <put_fat>
 801274c:	4603      	mov	r3, r0
 801274e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012750:	7ffb      	ldrb	r3, [r7, #31]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d001      	beq.n	801275a <remove_chain+0x4a>
 8012756:	7ffb      	ldrb	r3, [r7, #31]
 8012758:	e03b      	b.n	80127d2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801275a:	68b9      	ldr	r1, [r7, #8]
 801275c:	68f8      	ldr	r0, [r7, #12]
 801275e:	f7ff fe46 	bl	80123ee <get_fat>
 8012762:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d031      	beq.n	80127ce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2b01      	cmp	r3, #1
 801276e:	d101      	bne.n	8012774 <remove_chain+0x64>
 8012770:	2302      	movs	r3, #2
 8012772:	e02e      	b.n	80127d2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012774:	697b      	ldr	r3, [r7, #20]
 8012776:	f1b3 3fff 	cmp.w	r3, #4294967295
 801277a:	d101      	bne.n	8012780 <remove_chain+0x70>
 801277c:	2301      	movs	r3, #1
 801277e:	e028      	b.n	80127d2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012780:	2200      	movs	r2, #0
 8012782:	68b9      	ldr	r1, [r7, #8]
 8012784:	69b8      	ldr	r0, [r7, #24]
 8012786:	f7ff fed9 	bl	801253c <put_fat>
 801278a:	4603      	mov	r3, r0
 801278c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801278e:	7ffb      	ldrb	r3, [r7, #31]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <remove_chain+0x88>
 8012794:	7ffb      	ldrb	r3, [r7, #31]
 8012796:	e01c      	b.n	80127d2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012798:	69bb      	ldr	r3, [r7, #24]
 801279a:	691a      	ldr	r2, [r3, #16]
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	695b      	ldr	r3, [r3, #20]
 80127a0:	3b02      	subs	r3, #2
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d20b      	bcs.n	80127be <remove_chain+0xae>
			fs->free_clst++;
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	691b      	ldr	r3, [r3, #16]
 80127aa:	1c5a      	adds	r2, r3, #1
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80127b0:	69bb      	ldr	r3, [r7, #24]
 80127b2:	791b      	ldrb	r3, [r3, #4]
 80127b4:	f043 0301 	orr.w	r3, r3, #1
 80127b8:	b2da      	uxtb	r2, r3
 80127ba:	69bb      	ldr	r3, [r7, #24]
 80127bc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80127c2:	69bb      	ldr	r3, [r7, #24]
 80127c4:	695b      	ldr	r3, [r3, #20]
 80127c6:	68ba      	ldr	r2, [r7, #8]
 80127c8:	429a      	cmp	r2, r3
 80127ca:	d3c6      	bcc.n	801275a <remove_chain+0x4a>
 80127cc:	e000      	b.n	80127d0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80127ce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80127d0:	2300      	movs	r3, #0
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3720      	adds	r7, #32
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}

080127da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80127da:	b580      	push	{r7, lr}
 80127dc:	b088      	sub	sp, #32
 80127de:	af00      	add	r7, sp, #0
 80127e0:	6078      	str	r0, [r7, #4]
 80127e2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d10d      	bne.n	801280c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80127f0:	693b      	ldr	r3, [r7, #16]
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80127f6:	69bb      	ldr	r3, [r7, #24]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d004      	beq.n	8012806 <create_chain+0x2c>
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	695b      	ldr	r3, [r3, #20]
 8012800:	69ba      	ldr	r2, [r7, #24]
 8012802:	429a      	cmp	r2, r3
 8012804:	d31b      	bcc.n	801283e <create_chain+0x64>
 8012806:	2301      	movs	r3, #1
 8012808:	61bb      	str	r3, [r7, #24]
 801280a:	e018      	b.n	801283e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801280c:	6839      	ldr	r1, [r7, #0]
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f7ff fded 	bl	80123ee <get_fat>
 8012814:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	2b01      	cmp	r3, #1
 801281a:	d801      	bhi.n	8012820 <create_chain+0x46>
 801281c:	2301      	movs	r3, #1
 801281e:	e070      	b.n	8012902 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012826:	d101      	bne.n	801282c <create_chain+0x52>
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	e06a      	b.n	8012902 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801282c:	693b      	ldr	r3, [r7, #16]
 801282e:	695b      	ldr	r3, [r3, #20]
 8012830:	68fa      	ldr	r2, [r7, #12]
 8012832:	429a      	cmp	r2, r3
 8012834:	d201      	bcs.n	801283a <create_chain+0x60>
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	e063      	b.n	8012902 <create_chain+0x128>
		scl = clst;
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	3301      	adds	r3, #1
 8012846:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	695b      	ldr	r3, [r3, #20]
 801284c:	69fa      	ldr	r2, [r7, #28]
 801284e:	429a      	cmp	r2, r3
 8012850:	d307      	bcc.n	8012862 <create_chain+0x88>
				ncl = 2;
 8012852:	2302      	movs	r3, #2
 8012854:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012856:	69fa      	ldr	r2, [r7, #28]
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	429a      	cmp	r2, r3
 801285c:	d901      	bls.n	8012862 <create_chain+0x88>
 801285e:	2300      	movs	r3, #0
 8012860:	e04f      	b.n	8012902 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012862:	69f9      	ldr	r1, [r7, #28]
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f7ff fdc2 	bl	80123ee <get_fat>
 801286a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	2b00      	cmp	r3, #0
 8012870:	d00e      	beq.n	8012890 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	2b01      	cmp	r3, #1
 8012876:	d003      	beq.n	8012880 <create_chain+0xa6>
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801287e:	d101      	bne.n	8012884 <create_chain+0xaa>
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	e03e      	b.n	8012902 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012884:	69fa      	ldr	r2, [r7, #28]
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	429a      	cmp	r2, r3
 801288a:	d1da      	bne.n	8012842 <create_chain+0x68>
 801288c:	2300      	movs	r3, #0
 801288e:	e038      	b.n	8012902 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012890:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012892:	f04f 32ff 	mov.w	r2, #4294967295
 8012896:	69f9      	ldr	r1, [r7, #28]
 8012898:	6938      	ldr	r0, [r7, #16]
 801289a:	f7ff fe4f 	bl	801253c <put_fat>
 801289e:	4603      	mov	r3, r0
 80128a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80128a2:	7dfb      	ldrb	r3, [r7, #23]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d109      	bne.n	80128bc <create_chain+0xe2>
 80128a8:	683b      	ldr	r3, [r7, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d006      	beq.n	80128bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80128ae:	69fa      	ldr	r2, [r7, #28]
 80128b0:	6839      	ldr	r1, [r7, #0]
 80128b2:	6938      	ldr	r0, [r7, #16]
 80128b4:	f7ff fe42 	bl	801253c <put_fat>
 80128b8:	4603      	mov	r3, r0
 80128ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80128bc:	7dfb      	ldrb	r3, [r7, #23]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d116      	bne.n	80128f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	69fa      	ldr	r2, [r7, #28]
 80128c6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80128c8:	693b      	ldr	r3, [r7, #16]
 80128ca:	691a      	ldr	r2, [r3, #16]
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	695b      	ldr	r3, [r3, #20]
 80128d0:	3b02      	subs	r3, #2
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d804      	bhi.n	80128e0 <create_chain+0x106>
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	691b      	ldr	r3, [r3, #16]
 80128da:	1e5a      	subs	r2, r3, #1
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	791b      	ldrb	r3, [r3, #4]
 80128e4:	f043 0301 	orr.w	r3, r3, #1
 80128e8:	b2da      	uxtb	r2, r3
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	711a      	strb	r2, [r3, #4]
 80128ee:	e007      	b.n	8012900 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80128f0:	7dfb      	ldrb	r3, [r7, #23]
 80128f2:	2b01      	cmp	r3, #1
 80128f4:	d102      	bne.n	80128fc <create_chain+0x122>
 80128f6:	f04f 33ff 	mov.w	r3, #4294967295
 80128fa:	e000      	b.n	80128fe <create_chain+0x124>
 80128fc:	2301      	movs	r3, #1
 80128fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012900:	69fb      	ldr	r3, [r7, #28]
}
 8012902:	4618      	mov	r0, r3
 8012904:	3720      	adds	r7, #32
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}

0801290a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801290a:	b480      	push	{r7}
 801290c:	b087      	sub	sp, #28
 801290e:	af00      	add	r7, sp, #0
 8012910:	6078      	str	r0, [r7, #4]
 8012912:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801291e:	3304      	adds	r3, #4
 8012920:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	0a5b      	lsrs	r3, r3, #9
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	8952      	ldrh	r2, [r2, #10]
 801292a:	fbb3 f3f2 	udiv	r3, r3, r2
 801292e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012930:	693b      	ldr	r3, [r7, #16]
 8012932:	1d1a      	adds	r2, r3, #4
 8012934:	613a      	str	r2, [r7, #16]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d101      	bne.n	8012944 <clmt_clust+0x3a>
 8012940:	2300      	movs	r3, #0
 8012942:	e010      	b.n	8012966 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012944:	697a      	ldr	r2, [r7, #20]
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	429a      	cmp	r2, r3
 801294a:	d307      	bcc.n	801295c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801294c:	697a      	ldr	r2, [r7, #20]
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	617b      	str	r3, [r7, #20]
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	3304      	adds	r3, #4
 8012958:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801295a:	e7e9      	b.n	8012930 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801295c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	4413      	add	r3, r2
}
 8012966:	4618      	mov	r0, r3
 8012968:	371c      	adds	r7, #28
 801296a:	46bd      	mov	sp, r7
 801296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012970:	4770      	bx	lr

08012972 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b086      	sub	sp, #24
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
 801297a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012988:	d204      	bcs.n	8012994 <dir_sdi+0x22>
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	f003 031f 	and.w	r3, r3, #31
 8012990:	2b00      	cmp	r3, #0
 8012992:	d001      	beq.n	8012998 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012994:	2302      	movs	r3, #2
 8012996:	e063      	b.n	8012a60 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	683a      	ldr	r2, [r7, #0]
 801299c:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	689b      	ldr	r3, [r3, #8]
 80129a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d106      	bne.n	80129b8 <dir_sdi+0x46>
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	781b      	ldrb	r3, [r3, #0]
 80129ae:	2b02      	cmp	r3, #2
 80129b0:	d902      	bls.n	80129b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d10c      	bne.n	80129d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	095b      	lsrs	r3, r3, #5
 80129c2:	693a      	ldr	r2, [r7, #16]
 80129c4:	8912      	ldrh	r2, [r2, #8]
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d301      	bcc.n	80129ce <dir_sdi+0x5c>
 80129ca:	2302      	movs	r3, #2
 80129cc:	e048      	b.n	8012a60 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	619a      	str	r2, [r3, #24]
 80129d6:	e029      	b.n	8012a2c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	895b      	ldrh	r3, [r3, #10]
 80129dc:	025b      	lsls	r3, r3, #9
 80129de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80129e0:	e019      	b.n	8012a16 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6979      	ldr	r1, [r7, #20]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7ff fd01 	bl	80123ee <get_fat>
 80129ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129f4:	d101      	bne.n	80129fa <dir_sdi+0x88>
 80129f6:	2301      	movs	r3, #1
 80129f8:	e032      	b.n	8012a60 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	2b01      	cmp	r3, #1
 80129fe:	d904      	bls.n	8012a0a <dir_sdi+0x98>
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	695b      	ldr	r3, [r3, #20]
 8012a04:	697a      	ldr	r2, [r7, #20]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d301      	bcc.n	8012a0e <dir_sdi+0x9c>
 8012a0a:	2302      	movs	r3, #2
 8012a0c:	e028      	b.n	8012a60 <dir_sdi+0xee>
			ofs -= csz;
 8012a0e:	683a      	ldr	r2, [r7, #0]
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012a16:	683a      	ldr	r2, [r7, #0]
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	429a      	cmp	r2, r3
 8012a1c:	d2e1      	bcs.n	80129e2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8012a1e:	6979      	ldr	r1, [r7, #20]
 8012a20:	6938      	ldr	r0, [r7, #16]
 8012a22:	f7ff fcc5 	bl	80123b0 <clust2sect>
 8012a26:	4602      	mov	r2, r0
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	697a      	ldr	r2, [r7, #20]
 8012a30:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	699b      	ldr	r3, [r3, #24]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d101      	bne.n	8012a3e <dir_sdi+0xcc>
 8012a3a:	2302      	movs	r3, #2
 8012a3c:	e010      	b.n	8012a60 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	699a      	ldr	r2, [r3, #24]
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	0a5b      	lsrs	r3, r3, #9
 8012a46:	441a      	add	r2, r3
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a58:	441a      	add	r2, r3
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8012a5e:	2300      	movs	r3, #0
}
 8012a60:	4618      	mov	r0, r3
 8012a62:	3718      	adds	r7, #24
 8012a64:	46bd      	mov	sp, r7
 8012a66:	bd80      	pop	{r7, pc}

08012a68 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b086      	sub	sp, #24
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	691b      	ldr	r3, [r3, #16]
 8012a7c:	3320      	adds	r3, #32
 8012a7e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	699b      	ldr	r3, [r3, #24]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d003      	beq.n	8012a90 <dir_next+0x28>
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012a8e:	d301      	bcc.n	8012a94 <dir_next+0x2c>
 8012a90:	2304      	movs	r3, #4
 8012a92:	e0aa      	b.n	8012bea <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	f040 8098 	bne.w	8012bd0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	699b      	ldr	r3, [r3, #24]
 8012aa4:	1c5a      	adds	r2, r3, #1
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	695b      	ldr	r3, [r3, #20]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d10b      	bne.n	8012aca <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	095b      	lsrs	r3, r3, #5
 8012ab6:	68fa      	ldr	r2, [r7, #12]
 8012ab8:	8912      	ldrh	r2, [r2, #8]
 8012aba:	4293      	cmp	r3, r2
 8012abc:	f0c0 8088 	bcc.w	8012bd0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	619a      	str	r2, [r3, #24]
 8012ac6:	2304      	movs	r3, #4
 8012ac8:	e08f      	b.n	8012bea <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	0a5b      	lsrs	r3, r3, #9
 8012ace:	68fa      	ldr	r2, [r7, #12]
 8012ad0:	8952      	ldrh	r2, [r2, #10]
 8012ad2:	3a01      	subs	r2, #1
 8012ad4:	4013      	ands	r3, r2
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d17a      	bne.n	8012bd0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	695b      	ldr	r3, [r3, #20]
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	4610      	mov	r0, r2
 8012ae4:	f7ff fc83 	bl	80123ee <get_fat>
 8012ae8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d801      	bhi.n	8012af4 <dir_next+0x8c>
 8012af0:	2302      	movs	r3, #2
 8012af2:	e07a      	b.n	8012bea <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012afa:	d101      	bne.n	8012b00 <dir_next+0x98>
 8012afc:	2301      	movs	r3, #1
 8012afe:	e074      	b.n	8012bea <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	695b      	ldr	r3, [r3, #20]
 8012b04:	697a      	ldr	r2, [r7, #20]
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d358      	bcc.n	8012bbc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d104      	bne.n	8012b1a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2200      	movs	r2, #0
 8012b14:	619a      	str	r2, [r3, #24]
 8012b16:	2304      	movs	r3, #4
 8012b18:	e067      	b.n	8012bea <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	695b      	ldr	r3, [r3, #20]
 8012b20:	4619      	mov	r1, r3
 8012b22:	4610      	mov	r0, r2
 8012b24:	f7ff fe59 	bl	80127da <create_chain>
 8012b28:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d101      	bne.n	8012b34 <dir_next+0xcc>
 8012b30:	2307      	movs	r3, #7
 8012b32:	e05a      	b.n	8012bea <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d101      	bne.n	8012b3e <dir_next+0xd6>
 8012b3a:	2302      	movs	r3, #2
 8012b3c:	e055      	b.n	8012bea <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b44:	d101      	bne.n	8012b4a <dir_next+0xe2>
 8012b46:	2301      	movs	r3, #1
 8012b48:	e04f      	b.n	8012bea <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012b4a:	68f8      	ldr	r0, [r7, #12]
 8012b4c:	f7ff fb51 	bl	80121f2 <sync_window>
 8012b50:	4603      	mov	r3, r0
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d001      	beq.n	8012b5a <dir_next+0xf2>
 8012b56:	2301      	movs	r3, #1
 8012b58:	e047      	b.n	8012bea <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	3330      	adds	r3, #48	@ 0x30
 8012b5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012b62:	2100      	movs	r1, #0
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7ff fae7 	bl	8012138 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	613b      	str	r3, [r7, #16]
 8012b6e:	6979      	ldr	r1, [r7, #20]
 8012b70:	68f8      	ldr	r0, [r7, #12]
 8012b72:	f7ff fc1d 	bl	80123b0 <clust2sect>
 8012b76:	4602      	mov	r2, r0
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012b7c:	e012      	b.n	8012ba4 <dir_next+0x13c>
						fs->wflag = 1;
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	2201      	movs	r2, #1
 8012b82:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012b84:	68f8      	ldr	r0, [r7, #12]
 8012b86:	f7ff fb34 	bl	80121f2 <sync_window>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d001      	beq.n	8012b94 <dir_next+0x12c>
 8012b90:	2301      	movs	r3, #1
 8012b92:	e02a      	b.n	8012bea <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	3301      	adds	r3, #1
 8012b98:	613b      	str	r3, [r7, #16]
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012b9e:	1c5a      	adds	r2, r3, #1
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	895b      	ldrh	r3, [r3, #10]
 8012ba8:	461a      	mov	r2, r3
 8012baa:	693b      	ldr	r3, [r7, #16]
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d3e6      	bcc.n	8012b7e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	1ad2      	subs	r2, r2, r3
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	697a      	ldr	r2, [r7, #20]
 8012bc0:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8012bc2:	6979      	ldr	r1, [r7, #20]
 8012bc4:	68f8      	ldr	r0, [r7, #12]
 8012bc6:	f7ff fbf3 	bl	80123b0 <clust2sect>
 8012bca:	4602      	mov	r2, r0
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	68ba      	ldr	r2, [r7, #8]
 8012bd4:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012be2:	441a      	add	r2, r3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8012be8:	2300      	movs	r3, #0
}
 8012bea:	4618      	mov	r0, r3
 8012bec:	3718      	adds	r7, #24
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012bf2:	b580      	push	{r7, lr}
 8012bf4:	b086      	sub	sp, #24
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	6078      	str	r0, [r7, #4]
 8012bfa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012c02:	2100      	movs	r1, #0
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f7ff feb4 	bl	8012972 <dir_sdi>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012c0e:	7dfb      	ldrb	r3, [r7, #23]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d12b      	bne.n	8012c6c <dir_alloc+0x7a>
		n = 0;
 8012c14:	2300      	movs	r3, #0
 8012c16:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	699b      	ldr	r3, [r3, #24]
 8012c1c:	4619      	mov	r1, r3
 8012c1e:	68f8      	ldr	r0, [r7, #12]
 8012c20:	f7ff fb2b 	bl	801227a <move_window>
 8012c24:	4603      	mov	r3, r0
 8012c26:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c28:	7dfb      	ldrb	r3, [r7, #23]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d11d      	bne.n	8012c6a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	69db      	ldr	r3, [r3, #28]
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	2be5      	cmp	r3, #229	@ 0xe5
 8012c36:	d004      	beq.n	8012c42 <dir_alloc+0x50>
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	69db      	ldr	r3, [r3, #28]
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d107      	bne.n	8012c52 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	3301      	adds	r3, #1
 8012c46:	613b      	str	r3, [r7, #16]
 8012c48:	693a      	ldr	r2, [r7, #16]
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d102      	bne.n	8012c56 <dir_alloc+0x64>
 8012c50:	e00c      	b.n	8012c6c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012c52:	2300      	movs	r3, #0
 8012c54:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012c56:	2101      	movs	r1, #1
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f7ff ff05 	bl	8012a68 <dir_next>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012c62:	7dfb      	ldrb	r3, [r7, #23]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d0d7      	beq.n	8012c18 <dir_alloc+0x26>
 8012c68:	e000      	b.n	8012c6c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012c6a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012c6c:	7dfb      	ldrb	r3, [r7, #23]
 8012c6e:	2b04      	cmp	r3, #4
 8012c70:	d101      	bne.n	8012c76 <dir_alloc+0x84>
 8012c72:	2307      	movs	r3, #7
 8012c74:	75fb      	strb	r3, [r7, #23]
	return res;
 8012c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3718      	adds	r7, #24
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}

08012c80 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b084      	sub	sp, #16
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
 8012c88:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	331a      	adds	r3, #26
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7ff f9ae 	bl	8011ff0 <ld_word>
 8012c94:	4603      	mov	r3, r0
 8012c96:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	2b03      	cmp	r3, #3
 8012c9e:	d109      	bne.n	8012cb4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	3314      	adds	r3, #20
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7ff f9a3 	bl	8011ff0 <ld_word>
 8012caa:	4603      	mov	r3, r0
 8012cac:	041b      	lsls	r3, r3, #16
 8012cae:	68fa      	ldr	r2, [r7, #12]
 8012cb0:	4313      	orrs	r3, r2
 8012cb2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012cb4:	68fb      	ldr	r3, [r7, #12]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	3710      	adds	r7, #16
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}

08012cbe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b084      	sub	sp, #16
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	60f8      	str	r0, [r7, #12]
 8012cc6:	60b9      	str	r1, [r7, #8]
 8012cc8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	331a      	adds	r3, #26
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	b292      	uxth	r2, r2
 8012cd2:	4611      	mov	r1, r2
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7ff f9c7 	bl	8012068 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	2b03      	cmp	r3, #3
 8012ce0:	d109      	bne.n	8012cf6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012ce2:	68bb      	ldr	r3, [r7, #8]
 8012ce4:	f103 0214 	add.w	r2, r3, #20
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	0c1b      	lsrs	r3, r3, #16
 8012cec:	b29b      	uxth	r3, r3
 8012cee:	4619      	mov	r1, r3
 8012cf0:	4610      	mov	r0, r2
 8012cf2:	f7ff f9b9 	bl	8012068 <st_word>
	}
}
 8012cf6:	bf00      	nop
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}

08012cfe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012cfe:	b580      	push	{r7, lr}
 8012d00:	b086      	sub	sp, #24
 8012d02:	af00      	add	r7, sp, #0
 8012d04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012d0c:	2100      	movs	r1, #0
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f7ff fe2f 	bl	8012972 <dir_sdi>
 8012d14:	4603      	mov	r3, r0
 8012d16:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012d18:	7dfb      	ldrb	r3, [r7, #23]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <dir_find+0x24>
 8012d1e:	7dfb      	ldrb	r3, [r7, #23]
 8012d20:	e03e      	b.n	8012da0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	699b      	ldr	r3, [r3, #24]
 8012d26:	4619      	mov	r1, r3
 8012d28:	6938      	ldr	r0, [r7, #16]
 8012d2a:	f7ff faa6 	bl	801227a <move_window>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012d32:	7dfb      	ldrb	r3, [r7, #23]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d12f      	bne.n	8012d98 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	69db      	ldr	r3, [r3, #28]
 8012d3c:	781b      	ldrb	r3, [r3, #0]
 8012d3e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012d40:	7bfb      	ldrb	r3, [r7, #15]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d102      	bne.n	8012d4c <dir_find+0x4e>
 8012d46:	2304      	movs	r3, #4
 8012d48:	75fb      	strb	r3, [r7, #23]
 8012d4a:	e028      	b.n	8012d9e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	69db      	ldr	r3, [r3, #28]
 8012d50:	330b      	adds	r3, #11
 8012d52:	781b      	ldrb	r3, [r3, #0]
 8012d54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012d58:	b2da      	uxtb	r2, r3
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	69db      	ldr	r3, [r3, #28]
 8012d62:	330b      	adds	r3, #11
 8012d64:	781b      	ldrb	r3, [r3, #0]
 8012d66:	f003 0308 	and.w	r3, r3, #8
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d10a      	bne.n	8012d84 <dir_find+0x86>
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	69d8      	ldr	r0, [r3, #28]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	3320      	adds	r3, #32
 8012d76:	220b      	movs	r2, #11
 8012d78:	4619      	mov	r1, r3
 8012d7a:	f7ff f9f8 	bl	801216e <mem_cmp>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d00b      	beq.n	8012d9c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012d84:	2100      	movs	r1, #0
 8012d86:	6878      	ldr	r0, [r7, #4]
 8012d88:	f7ff fe6e 	bl	8012a68 <dir_next>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012d90:	7dfb      	ldrb	r3, [r7, #23]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d0c5      	beq.n	8012d22 <dir_find+0x24>
 8012d96:	e002      	b.n	8012d9e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012d98:	bf00      	nop
 8012d9a:	e000      	b.n	8012d9e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012d9c:	bf00      	nop

	return res;
 8012d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3718      	adds	r7, #24
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b084      	sub	sp, #16
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012db6:	2101      	movs	r1, #1
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7ff ff1a 	bl	8012bf2 <dir_alloc>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012dc2:	7bfb      	ldrb	r3, [r7, #15]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d11c      	bne.n	8012e02 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	699b      	ldr	r3, [r3, #24]
 8012dcc:	4619      	mov	r1, r3
 8012dce:	68b8      	ldr	r0, [r7, #8]
 8012dd0:	f7ff fa53 	bl	801227a <move_window>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012dd8:	7bfb      	ldrb	r3, [r7, #15]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d111      	bne.n	8012e02 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	69db      	ldr	r3, [r3, #28]
 8012de2:	2220      	movs	r2, #32
 8012de4:	2100      	movs	r1, #0
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7ff f9a6 	bl	8012138 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	69d8      	ldr	r0, [r3, #28]
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	3320      	adds	r3, #32
 8012df4:	220b      	movs	r2, #11
 8012df6:	4619      	mov	r1, r3
 8012df8:	f7ff f97d 	bl	80120f6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	2201      	movs	r2, #1
 8012e00:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3710      	adds	r7, #16
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b088      	sub	sp, #32
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	60fb      	str	r3, [r7, #12]
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	3320      	adds	r3, #32
 8012e20:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012e22:	220b      	movs	r2, #11
 8012e24:	2120      	movs	r1, #32
 8012e26:	68b8      	ldr	r0, [r7, #8]
 8012e28:	f7ff f986 	bl	8012138 <mem_set>
	si = i = 0; ni = 8;
 8012e2c:	2300      	movs	r3, #0
 8012e2e:	613b      	str	r3, [r7, #16]
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	61fb      	str	r3, [r7, #28]
 8012e34:	2308      	movs	r3, #8
 8012e36:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012e38:	69fb      	ldr	r3, [r7, #28]
 8012e3a:	1c5a      	adds	r2, r3, #1
 8012e3c:	61fa      	str	r2, [r7, #28]
 8012e3e:	68fa      	ldr	r2, [r7, #12]
 8012e40:	4413      	add	r3, r2
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012e46:	7efb      	ldrb	r3, [r7, #27]
 8012e48:	2b20      	cmp	r3, #32
 8012e4a:	d94e      	bls.n	8012eea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012e4c:	7efb      	ldrb	r3, [r7, #27]
 8012e4e:	2b2f      	cmp	r3, #47	@ 0x2f
 8012e50:	d006      	beq.n	8012e60 <create_name+0x54>
 8012e52:	7efb      	ldrb	r3, [r7, #27]
 8012e54:	2b5c      	cmp	r3, #92	@ 0x5c
 8012e56:	d110      	bne.n	8012e7a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012e58:	e002      	b.n	8012e60 <create_name+0x54>
 8012e5a:	69fb      	ldr	r3, [r7, #28]
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	61fb      	str	r3, [r7, #28]
 8012e60:	68fa      	ldr	r2, [r7, #12]
 8012e62:	69fb      	ldr	r3, [r7, #28]
 8012e64:	4413      	add	r3, r2
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	2b2f      	cmp	r3, #47	@ 0x2f
 8012e6a:	d0f6      	beq.n	8012e5a <create_name+0x4e>
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	69fb      	ldr	r3, [r7, #28]
 8012e70:	4413      	add	r3, r2
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	2b5c      	cmp	r3, #92	@ 0x5c
 8012e76:	d0f0      	beq.n	8012e5a <create_name+0x4e>
			break;
 8012e78:	e038      	b.n	8012eec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012e7a:	7efb      	ldrb	r3, [r7, #27]
 8012e7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e7e:	d003      	beq.n	8012e88 <create_name+0x7c>
 8012e80:	693a      	ldr	r2, [r7, #16]
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	429a      	cmp	r2, r3
 8012e86:	d30c      	bcc.n	8012ea2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	2b0b      	cmp	r3, #11
 8012e8c:	d002      	beq.n	8012e94 <create_name+0x88>
 8012e8e:	7efb      	ldrb	r3, [r7, #27]
 8012e90:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e92:	d001      	beq.n	8012e98 <create_name+0x8c>
 8012e94:	2306      	movs	r3, #6
 8012e96:	e044      	b.n	8012f22 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012e98:	2308      	movs	r3, #8
 8012e9a:	613b      	str	r3, [r7, #16]
 8012e9c:	230b      	movs	r3, #11
 8012e9e:	617b      	str	r3, [r7, #20]
			continue;
 8012ea0:	e022      	b.n	8012ee8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012ea2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	da04      	bge.n	8012eb4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012eaa:	7efb      	ldrb	r3, [r7, #27]
 8012eac:	3b80      	subs	r3, #128	@ 0x80
 8012eae:	4a1f      	ldr	r2, [pc, #124]	@ (8012f2c <create_name+0x120>)
 8012eb0:	5cd3      	ldrb	r3, [r2, r3]
 8012eb2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012eb4:	7efb      	ldrb	r3, [r7, #27]
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	481d      	ldr	r0, [pc, #116]	@ (8012f30 <create_name+0x124>)
 8012eba:	f7ff f97f 	bl	80121bc <chk_chr>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d001      	beq.n	8012ec8 <create_name+0xbc>
 8012ec4:	2306      	movs	r3, #6
 8012ec6:	e02c      	b.n	8012f22 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012ec8:	7efb      	ldrb	r3, [r7, #27]
 8012eca:	2b60      	cmp	r3, #96	@ 0x60
 8012ecc:	d905      	bls.n	8012eda <create_name+0xce>
 8012ece:	7efb      	ldrb	r3, [r7, #27]
 8012ed0:	2b7a      	cmp	r3, #122	@ 0x7a
 8012ed2:	d802      	bhi.n	8012eda <create_name+0xce>
 8012ed4:	7efb      	ldrb	r3, [r7, #27]
 8012ed6:	3b20      	subs	r3, #32
 8012ed8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	1c5a      	adds	r2, r3, #1
 8012ede:	613a      	str	r2, [r7, #16]
 8012ee0:	68ba      	ldr	r2, [r7, #8]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	7efa      	ldrb	r2, [r7, #27]
 8012ee6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012ee8:	e7a6      	b.n	8012e38 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012eea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012eec:	68fa      	ldr	r2, [r7, #12]
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	441a      	add	r2, r3
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d101      	bne.n	8012f00 <create_name+0xf4>
 8012efc:	2306      	movs	r3, #6
 8012efe:	e010      	b.n	8012f22 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	781b      	ldrb	r3, [r3, #0]
 8012f04:	2be5      	cmp	r3, #229	@ 0xe5
 8012f06:	d102      	bne.n	8012f0e <create_name+0x102>
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	2205      	movs	r2, #5
 8012f0c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012f0e:	7efb      	ldrb	r3, [r7, #27]
 8012f10:	2b20      	cmp	r3, #32
 8012f12:	d801      	bhi.n	8012f18 <create_name+0x10c>
 8012f14:	2204      	movs	r2, #4
 8012f16:	e000      	b.n	8012f1a <create_name+0x10e>
 8012f18:	2200      	movs	r2, #0
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	330b      	adds	r3, #11
 8012f1e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012f20:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3720      	adds	r7, #32
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	0801b950 	.word	0x0801b950
 8012f30:	0801b8d0 	.word	0x0801b8d0

08012f34 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b086      	sub	sp, #24
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
 8012f3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012f48:	e002      	b.n	8012f50 <follow_path+0x1c>
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	603b      	str	r3, [r7, #0]
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	781b      	ldrb	r3, [r3, #0]
 8012f54:	2b2f      	cmp	r3, #47	@ 0x2f
 8012f56:	d0f8      	beq.n	8012f4a <follow_path+0x16>
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	781b      	ldrb	r3, [r3, #0]
 8012f5c:	2b5c      	cmp	r3, #92	@ 0x5c
 8012f5e:	d0f4      	beq.n	8012f4a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	2200      	movs	r2, #0
 8012f64:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	2b1f      	cmp	r3, #31
 8012f6c:	d80a      	bhi.n	8012f84 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2280      	movs	r2, #128	@ 0x80
 8012f72:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 8012f76:	2100      	movs	r1, #0
 8012f78:	6878      	ldr	r0, [r7, #4]
 8012f7a:	f7ff fcfa 	bl	8012972 <dir_sdi>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	75fb      	strb	r3, [r7, #23]
 8012f82:	e043      	b.n	801300c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012f84:	463b      	mov	r3, r7
 8012f86:	4619      	mov	r1, r3
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f7ff ff3f 	bl	8012e0c <create_name>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012f92:	7dfb      	ldrb	r3, [r7, #23]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d134      	bne.n	8013002 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f7ff feb0 	bl	8012cfe <dir_find>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8012fa8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012faa:	7dfb      	ldrb	r3, [r7, #23]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d00a      	beq.n	8012fc6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012fb0:	7dfb      	ldrb	r3, [r7, #23]
 8012fb2:	2b04      	cmp	r3, #4
 8012fb4:	d127      	bne.n	8013006 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012fb6:	7afb      	ldrb	r3, [r7, #11]
 8012fb8:	f003 0304 	and.w	r3, r3, #4
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d122      	bne.n	8013006 <follow_path+0xd2>
 8012fc0:	2305      	movs	r3, #5
 8012fc2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012fc4:	e01f      	b.n	8013006 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012fc6:	7afb      	ldrb	r3, [r7, #11]
 8012fc8:	f003 0304 	and.w	r3, r3, #4
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d11c      	bne.n	801300a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	799b      	ldrb	r3, [r3, #6]
 8012fd4:	f003 0310 	and.w	r3, r3, #16
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d102      	bne.n	8012fe2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012fdc:	2305      	movs	r3, #5
 8012fde:	75fb      	strb	r3, [r7, #23]
 8012fe0:	e014      	b.n	801300c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	691b      	ldr	r3, [r3, #16]
 8012fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ff0:	4413      	add	r3, r2
 8012ff2:	4619      	mov	r1, r3
 8012ff4:	68f8      	ldr	r0, [r7, #12]
 8012ff6:	f7ff fe43 	bl	8012c80 <ld_clust>
 8012ffa:	4602      	mov	r2, r0
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013000:	e7c0      	b.n	8012f84 <follow_path+0x50>
			if (res != FR_OK) break;
 8013002:	bf00      	nop
 8013004:	e002      	b.n	801300c <follow_path+0xd8>
				break;
 8013006:	bf00      	nop
 8013008:	e000      	b.n	801300c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801300a:	bf00      	nop
			}
		}
	}

	return res;
 801300c:	7dfb      	ldrb	r3, [r7, #23]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3718      	adds	r7, #24
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}

08013016 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013016:	b480      	push	{r7}
 8013018:	b087      	sub	sp, #28
 801301a:	af00      	add	r7, sp, #0
 801301c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801301e:	f04f 33ff 	mov.w	r3, #4294967295
 8013022:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d031      	beq.n	8013090 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	617b      	str	r3, [r7, #20]
 8013032:	e002      	b.n	801303a <get_ldnumber+0x24>
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	3301      	adds	r3, #1
 8013038:	617b      	str	r3, [r7, #20]
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	781b      	ldrb	r3, [r3, #0]
 801303e:	2b20      	cmp	r3, #32
 8013040:	d903      	bls.n	801304a <get_ldnumber+0x34>
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	2b3a      	cmp	r3, #58	@ 0x3a
 8013048:	d1f4      	bne.n	8013034 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	781b      	ldrb	r3, [r3, #0]
 801304e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013050:	d11c      	bne.n	801308c <get_ldnumber+0x76>
			tp = *path;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	1c5a      	adds	r2, r3, #1
 801305c:	60fa      	str	r2, [r7, #12]
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	3b30      	subs	r3, #48	@ 0x30
 8013062:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	2b09      	cmp	r3, #9
 8013068:	d80e      	bhi.n	8013088 <get_ldnumber+0x72>
 801306a:	68fa      	ldr	r2, [r7, #12]
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	429a      	cmp	r2, r3
 8013070:	d10a      	bne.n	8013088 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d107      	bne.n	8013088 <get_ldnumber+0x72>
					vol = (int)i;
 8013078:	68bb      	ldr	r3, [r7, #8]
 801307a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	3301      	adds	r3, #1
 8013080:	617b      	str	r3, [r7, #20]
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	697a      	ldr	r2, [r7, #20]
 8013086:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	e002      	b.n	8013092 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801308c:	2300      	movs	r3, #0
 801308e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013090:	693b      	ldr	r3, [r7, #16]
}
 8013092:	4618      	mov	r0, r3
 8013094:	371c      	adds	r7, #28
 8013096:	46bd      	mov	sp, r7
 8013098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309c:	4770      	bx	lr
	...

080130a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b082      	sub	sp, #8
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2200      	movs	r2, #0
 80130ae:	70da      	strb	r2, [r3, #3]
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	f04f 32ff 	mov.w	r2, #4294967295
 80130b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80130b8:	6839      	ldr	r1, [r7, #0]
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f7ff f8dd 	bl	801227a <move_window>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d001      	beq.n	80130ca <check_fs+0x2a>
 80130c6:	2304      	movs	r3, #4
 80130c8:	e038      	b.n	801313c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	3330      	adds	r3, #48	@ 0x30
 80130ce:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80130d2:	4618      	mov	r0, r3
 80130d4:	f7fe ff8c 	bl	8011ff0 <ld_word>
 80130d8:	4603      	mov	r3, r0
 80130da:	461a      	mov	r2, r3
 80130dc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d001      	beq.n	80130e8 <check_fs+0x48>
 80130e4:	2303      	movs	r3, #3
 80130e6:	e029      	b.n	801313c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130ee:	2be9      	cmp	r3, #233	@ 0xe9
 80130f0:	d009      	beq.n	8013106 <check_fs+0x66>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80130f8:	2beb      	cmp	r3, #235	@ 0xeb
 80130fa:	d11e      	bne.n	801313a <check_fs+0x9a>
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8013102:	2b90      	cmp	r3, #144	@ 0x90
 8013104:	d119      	bne.n	801313a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	3330      	adds	r3, #48	@ 0x30
 801310a:	3336      	adds	r3, #54	@ 0x36
 801310c:	4618      	mov	r0, r3
 801310e:	f7fe ff88 	bl	8012022 <ld_dword>
 8013112:	4603      	mov	r3, r0
 8013114:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013118:	4a0a      	ldr	r2, [pc, #40]	@ (8013144 <check_fs+0xa4>)
 801311a:	4293      	cmp	r3, r2
 801311c:	d101      	bne.n	8013122 <check_fs+0x82>
 801311e:	2300      	movs	r3, #0
 8013120:	e00c      	b.n	801313c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	3330      	adds	r3, #48	@ 0x30
 8013126:	3352      	adds	r3, #82	@ 0x52
 8013128:	4618      	mov	r0, r3
 801312a:	f7fe ff7a 	bl	8012022 <ld_dword>
 801312e:	4603      	mov	r3, r0
 8013130:	4a05      	ldr	r2, [pc, #20]	@ (8013148 <check_fs+0xa8>)
 8013132:	4293      	cmp	r3, r2
 8013134:	d101      	bne.n	801313a <check_fs+0x9a>
 8013136:	2300      	movs	r3, #0
 8013138:	e000      	b.n	801313c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801313a:	2302      	movs	r3, #2
}
 801313c:	4618      	mov	r0, r3
 801313e:	3708      	adds	r7, #8
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	00544146 	.word	0x00544146
 8013148:	33544146 	.word	0x33544146

0801314c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b096      	sub	sp, #88	@ 0x58
 8013150:	af00      	add	r7, sp, #0
 8013152:	60f8      	str	r0, [r7, #12]
 8013154:	60b9      	str	r1, [r7, #8]
 8013156:	4613      	mov	r3, r2
 8013158:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	2200      	movs	r2, #0
 801315e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013160:	68f8      	ldr	r0, [r7, #12]
 8013162:	f7ff ff58 	bl	8013016 <get_ldnumber>
 8013166:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801316a:	2b00      	cmp	r3, #0
 801316c:	da01      	bge.n	8013172 <find_volume+0x26>
 801316e:	230b      	movs	r3, #11
 8013170:	e22a      	b.n	80135c8 <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013172:	4aa1      	ldr	r2, [pc, #644]	@ (80133f8 <find_volume+0x2ac>)
 8013174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801317a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801317c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801317e:	2b00      	cmp	r3, #0
 8013180:	d101      	bne.n	8013186 <find_volume+0x3a>
 8013182:	230c      	movs	r3, #12
 8013184:	e220      	b.n	80135c8 <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801318a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801318c:	79fb      	ldrb	r3, [r7, #7]
 801318e:	f023 0301 	bic.w	r3, r3, #1
 8013192:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d01a      	beq.n	80131d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801319c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801319e:	785b      	ldrb	r3, [r3, #1]
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fe fe87 	bl	8011eb4 <disk_status>
 80131a6:	4603      	mov	r3, r0
 80131a8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80131ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80131b0:	f003 0301 	and.w	r3, r3, #1
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d10c      	bne.n	80131d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80131b8:	79fb      	ldrb	r3, [r7, #7]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d007      	beq.n	80131ce <find_volume+0x82>
 80131be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80131c2:	f003 0304 	and.w	r3, r3, #4
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d001      	beq.n	80131ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80131ca:	230a      	movs	r3, #10
 80131cc:	e1fc      	b.n	80135c8 <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 80131ce:	2300      	movs	r3, #0
 80131d0:	e1fa      	b.n	80135c8 <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80131d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131d4:	2200      	movs	r2, #0
 80131d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80131d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131da:	b2da      	uxtb	r2, r3
 80131dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80131e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131e2:	785b      	ldrb	r3, [r3, #1]
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7fe fe7f 	bl	8011ee8 <disk_initialize>
 80131ea:	4603      	mov	r3, r0
 80131ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80131f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80131f4:	f003 0301 	and.w	r3, r3, #1
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d001      	beq.n	8013200 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80131fc:	2303      	movs	r3, #3
 80131fe:	e1e3      	b.n	80135c8 <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013200:	79fb      	ldrb	r3, [r7, #7]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d007      	beq.n	8013216 <find_volume+0xca>
 8013206:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801320a:	f003 0304 	and.w	r3, r3, #4
 801320e:	2b00      	cmp	r3, #0
 8013210:	d001      	beq.n	8013216 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013212:	230a      	movs	r3, #10
 8013214:	e1d8      	b.n	80135c8 <find_volume+0x47c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013216:	2300      	movs	r3, #0
 8013218:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801321a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801321c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801321e:	f7ff ff3f 	bl	80130a0 <check_fs>
 8013222:	4603      	mov	r3, r0
 8013224:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013228:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801322c:	2b02      	cmp	r3, #2
 801322e:	d149      	bne.n	80132c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013230:	2300      	movs	r3, #0
 8013232:	643b      	str	r3, [r7, #64]	@ 0x40
 8013234:	e01e      	b.n	8013274 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013238:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801323c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801323e:	011b      	lsls	r3, r3, #4
 8013240:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8013244:	4413      	add	r3, r2
 8013246:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801324a:	3304      	adds	r3, #4
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d006      	beq.n	8013260 <find_volume+0x114>
 8013252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013254:	3308      	adds	r3, #8
 8013256:	4618      	mov	r0, r3
 8013258:	f7fe fee3 	bl	8012022 <ld_dword>
 801325c:	4602      	mov	r2, r0
 801325e:	e000      	b.n	8013262 <find_volume+0x116>
 8013260:	2200      	movs	r2, #0
 8013262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013264:	009b      	lsls	r3, r3, #2
 8013266:	3358      	adds	r3, #88	@ 0x58
 8013268:	443b      	add	r3, r7
 801326a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801326e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013270:	3301      	adds	r3, #1
 8013272:	643b      	str	r3, [r7, #64]	@ 0x40
 8013274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013276:	2b03      	cmp	r3, #3
 8013278:	d9dd      	bls.n	8013236 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801327a:	2300      	movs	r3, #0
 801327c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801327e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013280:	2b00      	cmp	r3, #0
 8013282:	d002      	beq.n	801328a <find_volume+0x13e>
 8013284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013286:	3b01      	subs	r3, #1
 8013288:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801328a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801328c:	009b      	lsls	r3, r3, #2
 801328e:	3358      	adds	r3, #88	@ 0x58
 8013290:	443b      	add	r3, r7
 8013292:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013296:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013298:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801329a:	2b00      	cmp	r3, #0
 801329c:	d005      	beq.n	80132aa <find_volume+0x15e>
 801329e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80132a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80132a2:	f7ff fefd 	bl	80130a0 <check_fs>
 80132a6:	4603      	mov	r3, r0
 80132a8:	e000      	b.n	80132ac <find_volume+0x160>
 80132aa:	2303      	movs	r3, #3
 80132ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80132b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80132b4:	2b01      	cmp	r3, #1
 80132b6:	d905      	bls.n	80132c4 <find_volume+0x178>
 80132b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132ba:	3301      	adds	r3, #1
 80132bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80132be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132c0:	2b03      	cmp	r3, #3
 80132c2:	d9e2      	bls.n	801328a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80132c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80132c8:	2b04      	cmp	r3, #4
 80132ca:	d101      	bne.n	80132d0 <find_volume+0x184>
 80132cc:	2301      	movs	r3, #1
 80132ce:	e17b      	b.n	80135c8 <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80132d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d901      	bls.n	80132dc <find_volume+0x190>
 80132d8:	230d      	movs	r3, #13
 80132da:	e175      	b.n	80135c8 <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80132dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132de:	3330      	adds	r3, #48	@ 0x30
 80132e0:	330b      	adds	r3, #11
 80132e2:	4618      	mov	r0, r3
 80132e4:	f7fe fe84 	bl	8011ff0 <ld_word>
 80132e8:	4603      	mov	r3, r0
 80132ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80132ee:	d001      	beq.n	80132f4 <find_volume+0x1a8>
 80132f0:	230d      	movs	r3, #13
 80132f2:	e169      	b.n	80135c8 <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80132f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132f6:	3330      	adds	r3, #48	@ 0x30
 80132f8:	3316      	adds	r3, #22
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7fe fe78 	bl	8011ff0 <ld_word>
 8013300:	4603      	mov	r3, r0
 8013302:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013306:	2b00      	cmp	r3, #0
 8013308:	d106      	bne.n	8013318 <find_volume+0x1cc>
 801330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801330c:	3330      	adds	r3, #48	@ 0x30
 801330e:	3324      	adds	r3, #36	@ 0x24
 8013310:	4618      	mov	r0, r3
 8013312:	f7fe fe86 	bl	8012022 <ld_dword>
 8013316:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801331a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801331c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013320:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8013324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013326:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801332a:	789b      	ldrb	r3, [r3, #2]
 801332c:	2b01      	cmp	r3, #1
 801332e:	d005      	beq.n	801333c <find_volume+0x1f0>
 8013330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013332:	789b      	ldrb	r3, [r3, #2]
 8013334:	2b02      	cmp	r3, #2
 8013336:	d001      	beq.n	801333c <find_volume+0x1f0>
 8013338:	230d      	movs	r3, #13
 801333a:	e145      	b.n	80135c8 <find_volume+0x47c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801333c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801333e:	789b      	ldrb	r3, [r3, #2]
 8013340:	461a      	mov	r2, r3
 8013342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013344:	fb02 f303 	mul.w	r3, r2, r3
 8013348:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801334a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801334c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013350:	461a      	mov	r2, r3
 8013352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013354:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013358:	895b      	ldrh	r3, [r3, #10]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d008      	beq.n	8013370 <find_volume+0x224>
 801335e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013360:	895b      	ldrh	r3, [r3, #10]
 8013362:	461a      	mov	r2, r3
 8013364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013366:	895b      	ldrh	r3, [r3, #10]
 8013368:	3b01      	subs	r3, #1
 801336a:	4013      	ands	r3, r2
 801336c:	2b00      	cmp	r3, #0
 801336e:	d001      	beq.n	8013374 <find_volume+0x228>
 8013370:	230d      	movs	r3, #13
 8013372:	e129      	b.n	80135c8 <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013376:	3330      	adds	r3, #48	@ 0x30
 8013378:	3311      	adds	r3, #17
 801337a:	4618      	mov	r0, r3
 801337c:	f7fe fe38 	bl	8011ff0 <ld_word>
 8013380:	4603      	mov	r3, r0
 8013382:	461a      	mov	r2, r3
 8013384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013386:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801338a:	891b      	ldrh	r3, [r3, #8]
 801338c:	f003 030f 	and.w	r3, r3, #15
 8013390:	b29b      	uxth	r3, r3
 8013392:	2b00      	cmp	r3, #0
 8013394:	d001      	beq.n	801339a <find_volume+0x24e>
 8013396:	230d      	movs	r3, #13
 8013398:	e116      	b.n	80135c8 <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801339c:	3330      	adds	r3, #48	@ 0x30
 801339e:	3313      	adds	r3, #19
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7fe fe25 	bl	8011ff0 <ld_word>
 80133a6:	4603      	mov	r3, r0
 80133a8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80133aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d106      	bne.n	80133be <find_volume+0x272>
 80133b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133b2:	3330      	adds	r3, #48	@ 0x30
 80133b4:	3320      	adds	r3, #32
 80133b6:	4618      	mov	r0, r3
 80133b8:	f7fe fe33 	bl	8012022 <ld_dword>
 80133bc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80133be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133c0:	3330      	adds	r3, #48	@ 0x30
 80133c2:	330e      	adds	r3, #14
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7fe fe13 	bl	8011ff0 <ld_word>
 80133ca:	4603      	mov	r3, r0
 80133cc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80133ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d101      	bne.n	80133d8 <find_volume+0x28c>
 80133d4:	230d      	movs	r3, #13
 80133d6:	e0f7      	b.n	80135c8 <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80133d8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80133da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80133dc:	4413      	add	r3, r2
 80133de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80133e0:	8912      	ldrh	r2, [r2, #8]
 80133e2:	0912      	lsrs	r2, r2, #4
 80133e4:	b292      	uxth	r2, r2
 80133e6:	4413      	add	r3, r2
 80133e8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80133ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80133ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133ee:	429a      	cmp	r2, r3
 80133f0:	d204      	bcs.n	80133fc <find_volume+0x2b0>
 80133f2:	230d      	movs	r3, #13
 80133f4:	e0e8      	b.n	80135c8 <find_volume+0x47c>
 80133f6:	bf00      	nop
 80133f8:	20002ac4 	.word	0x20002ac4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80133fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80133fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013400:	1ad3      	subs	r3, r2, r3
 8013402:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013404:	8952      	ldrh	r2, [r2, #10]
 8013406:	fbb3 f3f2 	udiv	r3, r3, r2
 801340a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801340c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801340e:	2b00      	cmp	r3, #0
 8013410:	d101      	bne.n	8013416 <find_volume+0x2ca>
 8013412:	230d      	movs	r3, #13
 8013414:	e0d8      	b.n	80135c8 <find_volume+0x47c>
		fmt = FS_FAT32;
 8013416:	2303      	movs	r3, #3
 8013418:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801341e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013422:	4293      	cmp	r3, r2
 8013424:	d802      	bhi.n	801342c <find_volume+0x2e0>
 8013426:	2302      	movs	r3, #2
 8013428:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801342e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013432:	4293      	cmp	r3, r2
 8013434:	d802      	bhi.n	801343c <find_volume+0x2f0>
 8013436:	2301      	movs	r3, #1
 8013438:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801343c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801343e:	1c9a      	adds	r2, r3, #2
 8013440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013442:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013446:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013448:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801344a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801344c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801344e:	441a      	add	r2, r3
 8013450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013452:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013454:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013458:	441a      	add	r2, r3
 801345a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801345c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 801345e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013462:	2b03      	cmp	r3, #3
 8013464:	d11e      	bne.n	80134a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013468:	3330      	adds	r3, #48	@ 0x30
 801346a:	332a      	adds	r3, #42	@ 0x2a
 801346c:	4618      	mov	r0, r3
 801346e:	f7fe fdbf 	bl	8011ff0 <ld_word>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	d001      	beq.n	801347c <find_volume+0x330>
 8013478:	230d      	movs	r3, #13
 801347a:	e0a5      	b.n	80135c8 <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801347c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801347e:	891b      	ldrh	r3, [r3, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d001      	beq.n	8013488 <find_volume+0x33c>
 8013484:	230d      	movs	r3, #13
 8013486:	e09f      	b.n	80135c8 <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801348a:	3330      	adds	r3, #48	@ 0x30
 801348c:	332c      	adds	r3, #44	@ 0x2c
 801348e:	4618      	mov	r0, r3
 8013490:	f7fe fdc7 	bl	8012022 <ld_dword>
 8013494:	4602      	mov	r2, r0
 8013496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013498:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801349c:	695b      	ldr	r3, [r3, #20]
 801349e:	009b      	lsls	r3, r3, #2
 80134a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80134a2:	e01f      	b.n	80134e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80134a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134a6:	891b      	ldrh	r3, [r3, #8]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d101      	bne.n	80134b0 <find_volume+0x364>
 80134ac:	230d      	movs	r3, #13
 80134ae:	e08b      	b.n	80135c8 <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80134b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134b2:	6a1a      	ldr	r2, [r3, #32]
 80134b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80134b6:	441a      	add	r2, r3
 80134b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80134bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80134c0:	2b02      	cmp	r3, #2
 80134c2:	d103      	bne.n	80134cc <find_volume+0x380>
 80134c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134c6:	695b      	ldr	r3, [r3, #20]
 80134c8:	005b      	lsls	r3, r3, #1
 80134ca:	e00a      	b.n	80134e2 <find_volume+0x396>
 80134cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134ce:	695a      	ldr	r2, [r3, #20]
 80134d0:	4613      	mov	r3, r2
 80134d2:	005b      	lsls	r3, r3, #1
 80134d4:	4413      	add	r3, r2
 80134d6:	085a      	lsrs	r2, r3, #1
 80134d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134da:	695b      	ldr	r3, [r3, #20]
 80134dc:	f003 0301 	and.w	r3, r3, #1
 80134e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80134e2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80134e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134e6:	699a      	ldr	r2, [r3, #24]
 80134e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134ea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80134ee:	0a5b      	lsrs	r3, r3, #9
 80134f0:	429a      	cmp	r2, r3
 80134f2:	d201      	bcs.n	80134f8 <find_volume+0x3ac>
 80134f4:	230d      	movs	r3, #13
 80134f6:	e067      	b.n	80135c8 <find_volume+0x47c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80134f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80134fa:	f04f 32ff 	mov.w	r2, #4294967295
 80134fe:	611a      	str	r2, [r3, #16]
 8013500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013502:	691a      	ldr	r2, [r3, #16]
 8013504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013506:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801350a:	2280      	movs	r2, #128	@ 0x80
 801350c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801350e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013512:	2b03      	cmp	r3, #3
 8013514:	d149      	bne.n	80135aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013518:	3330      	adds	r3, #48	@ 0x30
 801351a:	3330      	adds	r3, #48	@ 0x30
 801351c:	4618      	mov	r0, r3
 801351e:	f7fe fd67 	bl	8011ff0 <ld_word>
 8013522:	4603      	mov	r3, r0
 8013524:	2b01      	cmp	r3, #1
 8013526:	d140      	bne.n	80135aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801352a:	3301      	adds	r3, #1
 801352c:	4619      	mov	r1, r3
 801352e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013530:	f7fe fea3 	bl	801227a <move_window>
 8013534:	4603      	mov	r3, r0
 8013536:	2b00      	cmp	r3, #0
 8013538:	d137      	bne.n	80135aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801353c:	2200      	movs	r2, #0
 801353e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013542:	3330      	adds	r3, #48	@ 0x30
 8013544:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013548:	4618      	mov	r0, r3
 801354a:	f7fe fd51 	bl	8011ff0 <ld_word>
 801354e:	4603      	mov	r3, r0
 8013550:	461a      	mov	r2, r3
 8013552:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013556:	429a      	cmp	r2, r3
 8013558:	d127      	bne.n	80135aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801355a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801355c:	3330      	adds	r3, #48	@ 0x30
 801355e:	4618      	mov	r0, r3
 8013560:	f7fe fd5f 	bl	8012022 <ld_dword>
 8013564:	4603      	mov	r3, r0
 8013566:	4a1a      	ldr	r2, [pc, #104]	@ (80135d0 <find_volume+0x484>)
 8013568:	4293      	cmp	r3, r2
 801356a:	d11e      	bne.n	80135aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801356c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801356e:	3330      	adds	r3, #48	@ 0x30
 8013570:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013574:	4618      	mov	r0, r3
 8013576:	f7fe fd54 	bl	8012022 <ld_dword>
 801357a:	4603      	mov	r3, r0
 801357c:	4a15      	ldr	r2, [pc, #84]	@ (80135d4 <find_volume+0x488>)
 801357e:	4293      	cmp	r3, r2
 8013580:	d113      	bne.n	80135aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013584:	3330      	adds	r3, #48	@ 0x30
 8013586:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801358a:	4618      	mov	r0, r3
 801358c:	f7fe fd49 	bl	8012022 <ld_dword>
 8013590:	4602      	mov	r2, r0
 8013592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013594:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013598:	3330      	adds	r3, #48	@ 0x30
 801359a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801359e:	4618      	mov	r0, r3
 80135a0:	f7fe fd3f 	bl	8012022 <ld_dword>
 80135a4:	4602      	mov	r2, r0
 80135a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80135aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80135b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80135b2:	4b09      	ldr	r3, [pc, #36]	@ (80135d8 <find_volume+0x48c>)
 80135b4:	881b      	ldrh	r3, [r3, #0]
 80135b6:	3301      	adds	r3, #1
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	4b07      	ldr	r3, [pc, #28]	@ (80135d8 <find_volume+0x48c>)
 80135bc:	801a      	strh	r2, [r3, #0]
 80135be:	4b06      	ldr	r3, [pc, #24]	@ (80135d8 <find_volume+0x48c>)
 80135c0:	881a      	ldrh	r2, [r3, #0]
 80135c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135c4:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80135c6:	2300      	movs	r3, #0
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3758      	adds	r7, #88	@ 0x58
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}
 80135d0:	41615252 	.word	0x41615252
 80135d4:	61417272 	.word	0x61417272
 80135d8:	20002ac8 	.word	0x20002ac8

080135dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b084      	sub	sp, #16
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80135e6:	2309      	movs	r3, #9
 80135e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d01c      	beq.n	801362a <validate+0x4e>
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d018      	beq.n	801362a <validate+0x4e>
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d013      	beq.n	801362a <validate+0x4e>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	889a      	ldrh	r2, [r3, #4]
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	88db      	ldrh	r3, [r3, #6]
 801360c:	429a      	cmp	r2, r3
 801360e:	d10c      	bne.n	801362a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	785b      	ldrb	r3, [r3, #1]
 8013616:	4618      	mov	r0, r3
 8013618:	f7fe fc4c 	bl	8011eb4 <disk_status>
 801361c:	4603      	mov	r3, r0
 801361e:	f003 0301 	and.w	r3, r3, #1
 8013622:	2b00      	cmp	r3, #0
 8013624:	d101      	bne.n	801362a <validate+0x4e>
			res = FR_OK;
 8013626:	2300      	movs	r3, #0
 8013628:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801362a:	7bfb      	ldrb	r3, [r7, #15]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d102      	bne.n	8013636 <validate+0x5a>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	e000      	b.n	8013638 <validate+0x5c>
 8013636:	2300      	movs	r3, #0
 8013638:	683a      	ldr	r2, [r7, #0]
 801363a:	6013      	str	r3, [r2, #0]
	return res;
 801363c:	7bfb      	ldrb	r3, [r7, #15]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3710      	adds	r7, #16
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
	...

08013648 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b088      	sub	sp, #32
 801364c:	af00      	add	r7, sp, #0
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	60b9      	str	r1, [r7, #8]
 8013652:	4613      	mov	r3, r2
 8013654:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801365a:	f107 0310 	add.w	r3, r7, #16
 801365e:	4618      	mov	r0, r3
 8013660:	f7ff fcd9 	bl	8013016 <get_ldnumber>
 8013664:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013666:	69fb      	ldr	r3, [r7, #28]
 8013668:	2b00      	cmp	r3, #0
 801366a:	da01      	bge.n	8013670 <f_mount+0x28>
 801366c:	230b      	movs	r3, #11
 801366e:	e028      	b.n	80136c2 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013670:	4a16      	ldr	r2, [pc, #88]	@ (80136cc <f_mount+0x84>)
 8013672:	69fb      	ldr	r3, [r7, #28]
 8013674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013678:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d002      	beq.n	8013686 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	2200      	movs	r2, #0
 8013684:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d002      	beq.n	8013692 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	2200      	movs	r2, #0
 8013690:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013692:	68fa      	ldr	r2, [r7, #12]
 8013694:	490d      	ldr	r1, [pc, #52]	@ (80136cc <f_mount+0x84>)
 8013696:	69fb      	ldr	r3, [r7, #28]
 8013698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d002      	beq.n	80136a8 <f_mount+0x60>
 80136a2:	79fb      	ldrb	r3, [r7, #7]
 80136a4:	2b01      	cmp	r3, #1
 80136a6:	d001      	beq.n	80136ac <f_mount+0x64>
 80136a8:	2300      	movs	r3, #0
 80136aa:	e00a      	b.n	80136c2 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80136ac:	f107 010c 	add.w	r1, r7, #12
 80136b0:	f107 0308 	add.w	r3, r7, #8
 80136b4:	2200      	movs	r2, #0
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7ff fd48 	bl	801314c <find_volume>
 80136bc:	4603      	mov	r3, r0
 80136be:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80136c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80136c2:	4618      	mov	r0, r3
 80136c4:	3720      	adds	r7, #32
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bd80      	pop	{r7, pc}
 80136ca:	bf00      	nop
 80136cc:	20002ac4 	.word	0x20002ac4

080136d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b098      	sub	sp, #96	@ 0x60
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	4613      	mov	r3, r2
 80136dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d101      	bne.n	80136e8 <f_open+0x18>
 80136e4:	2309      	movs	r3, #9
 80136e6:	e17a      	b.n	80139de <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80136e8:	79fb      	ldrb	r3, [r7, #7]
 80136ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80136ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80136f0:	79fa      	ldrb	r2, [r7, #7]
 80136f2:	f107 0114 	add.w	r1, r7, #20
 80136f6:	f107 0308 	add.w	r3, r7, #8
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7ff fd26 	bl	801314c <find_volume>
 8013700:	4603      	mov	r3, r0
 8013702:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013706:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801370a:	2b00      	cmp	r3, #0
 801370c:	f040 815e 	bne.w	80139cc <f_open+0x2fc>
		dj.obj.fs = fs;
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013714:	68ba      	ldr	r2, [r7, #8]
 8013716:	f107 0318 	add.w	r3, r7, #24
 801371a:	4611      	mov	r1, r2
 801371c:	4618      	mov	r0, r3
 801371e:	f7ff fc09 	bl	8012f34 <follow_path>
 8013722:	4603      	mov	r3, r0
 8013724:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013728:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801372c:	2b00      	cmp	r3, #0
 801372e:	d107      	bne.n	8013740 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013730:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013734:	b25b      	sxtb	r3, r3
 8013736:	2b00      	cmp	r3, #0
 8013738:	da02      	bge.n	8013740 <f_open+0x70>
				res = FR_INVALID_NAME;
 801373a:	2306      	movs	r3, #6
 801373c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013740:	79fb      	ldrb	r3, [r7, #7]
 8013742:	f003 031c 	and.w	r3, r3, #28
 8013746:	2b00      	cmp	r3, #0
 8013748:	d078      	beq.n	801383c <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 801374a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801374e:	2b00      	cmp	r3, #0
 8013750:	d010      	beq.n	8013774 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013752:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013756:	2b04      	cmp	r3, #4
 8013758:	d107      	bne.n	801376a <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 801375a:	f107 0318 	add.w	r3, r7, #24
 801375e:	4618      	mov	r0, r3
 8013760:	f7ff fb22 	bl	8012da8 <dir_register>
 8013764:	4603      	mov	r3, r0
 8013766:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801376a:	79fb      	ldrb	r3, [r7, #7]
 801376c:	f043 0308 	orr.w	r3, r3, #8
 8013770:	71fb      	strb	r3, [r7, #7]
 8013772:	e010      	b.n	8013796 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013774:	7fbb      	ldrb	r3, [r7, #30]
 8013776:	f003 0311 	and.w	r3, r3, #17
 801377a:	2b00      	cmp	r3, #0
 801377c:	d003      	beq.n	8013786 <f_open+0xb6>
					res = FR_DENIED;
 801377e:	2307      	movs	r3, #7
 8013780:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013784:	e007      	b.n	8013796 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013786:	79fb      	ldrb	r3, [r7, #7]
 8013788:	f003 0304 	and.w	r3, r3, #4
 801378c:	2b00      	cmp	r3, #0
 801378e:	d002      	beq.n	8013796 <f_open+0xc6>
 8013790:	2308      	movs	r3, #8
 8013792:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013796:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801379a:	2b00      	cmp	r3, #0
 801379c:	d168      	bne.n	8013870 <f_open+0x1a0>
 801379e:	79fb      	ldrb	r3, [r7, #7]
 80137a0:	f003 0308 	and.w	r3, r3, #8
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d063      	beq.n	8013870 <f_open+0x1a0>
				dw = GET_FATTIME();
 80137a8:	f7fd ff9e 	bl	80116e8 <get_fattime>
 80137ac:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80137ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137b0:	330e      	adds	r3, #14
 80137b2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7fe fc72 	bl	801209e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80137ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137bc:	3316      	adds	r3, #22
 80137be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7fe fc6c 	bl	801209e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80137c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137c8:	330b      	adds	r3, #11
 80137ca:	2220      	movs	r2, #32
 80137cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80137d2:	4611      	mov	r1, r2
 80137d4:	4618      	mov	r0, r3
 80137d6:	f7ff fa53 	bl	8012c80 <ld_clust>
 80137da:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80137e0:	2200      	movs	r2, #0
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7ff fa6b 	bl	8012cbe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80137e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137ea:	331c      	adds	r3, #28
 80137ec:	2100      	movs	r1, #0
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7fe fc55 	bl	801209e <st_dword>
					fs->wflag = 1;
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	2201      	movs	r2, #1
 80137f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80137fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d037      	beq.n	8013870 <f_open+0x1a0>
						dw = fs->winsect;
 8013800:	697b      	ldr	r3, [r7, #20]
 8013802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013804:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013806:	f107 0318 	add.w	r3, r7, #24
 801380a:	2200      	movs	r2, #0
 801380c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801380e:	4618      	mov	r0, r3
 8013810:	f7fe ff7e 	bl	8012710 <remove_chain>
 8013814:	4603      	mov	r3, r0
 8013816:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801381a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801381e:	2b00      	cmp	r3, #0
 8013820:	d126      	bne.n	8013870 <f_open+0x1a0>
							res = move_window(fs, dw);
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013826:	4618      	mov	r0, r3
 8013828:	f7fe fd27 	bl	801227a <move_window>
 801382c:	4603      	mov	r3, r0
 801382e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013836:	3a01      	subs	r2, #1
 8013838:	60da      	str	r2, [r3, #12]
 801383a:	e019      	b.n	8013870 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801383c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013840:	2b00      	cmp	r3, #0
 8013842:	d115      	bne.n	8013870 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013844:	7fbb      	ldrb	r3, [r7, #30]
 8013846:	f003 0310 	and.w	r3, r3, #16
 801384a:	2b00      	cmp	r3, #0
 801384c:	d003      	beq.n	8013856 <f_open+0x186>
					res = FR_NO_FILE;
 801384e:	2304      	movs	r3, #4
 8013850:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013854:	e00c      	b.n	8013870 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013856:	79fb      	ldrb	r3, [r7, #7]
 8013858:	f003 0302 	and.w	r3, r3, #2
 801385c:	2b00      	cmp	r3, #0
 801385e:	d007      	beq.n	8013870 <f_open+0x1a0>
 8013860:	7fbb      	ldrb	r3, [r7, #30]
 8013862:	f003 0301 	and.w	r3, r3, #1
 8013866:	2b00      	cmp	r3, #0
 8013868:	d002      	beq.n	8013870 <f_open+0x1a0>
						res = FR_DENIED;
 801386a:	2307      	movs	r3, #7
 801386c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013870:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013874:	2b00      	cmp	r3, #0
 8013876:	d10f      	bne.n	8013898 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013878:	79fb      	ldrb	r3, [r7, #7]
 801387a:	f003 0308 	and.w	r3, r3, #8
 801387e:	2b00      	cmp	r3, #0
 8013880:	d003      	beq.n	801388a <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8013882:	79fb      	ldrb	r3, [r7, #7]
 8013884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013888:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8013892:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013898:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801389c:	2b00      	cmp	r3, #0
 801389e:	f040 8095 	bne.w	80139cc <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80138a6:	4611      	mov	r1, r2
 80138a8:	4618      	mov	r0, r3
 80138aa:	f7ff f9e9 	bl	8012c80 <ld_clust>
 80138ae:	4602      	mov	r2, r0
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80138b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138b6:	331c      	adds	r3, #28
 80138b8:	4618      	mov	r0, r3
 80138ba:	f7fe fbb2 	bl	8012022 <ld_dword>
 80138be:	4602      	mov	r2, r0
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2200      	movs	r2, #0
 80138c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80138ca:	697a      	ldr	r2, [r7, #20]
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	88da      	ldrh	r2, [r3, #6]
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	79fa      	ldrb	r2, [r7, #7]
 80138dc:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	2200      	movs	r2, #0
 80138e2:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2200      	movs	r2, #0
 80138e8:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	2200      	movs	r2, #0
 80138ee:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	332c      	adds	r3, #44	@ 0x2c
 80138f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80138f8:	2100      	movs	r1, #0
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7fe fc1c 	bl	8012138 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013900:	79fb      	ldrb	r3, [r7, #7]
 8013902:	f003 0320 	and.w	r3, r3, #32
 8013906:	2b00      	cmp	r3, #0
 8013908:	d060      	beq.n	80139cc <f_open+0x2fc>
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	68db      	ldr	r3, [r3, #12]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d05c      	beq.n	80139cc <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	68da      	ldr	r2, [r3, #12]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801391a:	697b      	ldr	r3, [r7, #20]
 801391c:	895b      	ldrh	r3, [r3, #10]
 801391e:	025b      	lsls	r3, r3, #9
 8013920:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	689b      	ldr	r3, [r3, #8]
 8013926:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	68db      	ldr	r3, [r3, #12]
 801392c:	657b      	str	r3, [r7, #84]	@ 0x54
 801392e:	e016      	b.n	801395e <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013934:	4618      	mov	r0, r3
 8013936:	f7fe fd5a 	bl	80123ee <get_fat>
 801393a:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801393c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801393e:	2b01      	cmp	r3, #1
 8013940:	d802      	bhi.n	8013948 <f_open+0x278>
 8013942:	2302      	movs	r3, #2
 8013944:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013948:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801394e:	d102      	bne.n	8013956 <f_open+0x286>
 8013950:	2301      	movs	r3, #1
 8013952:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013956:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801395a:	1ad3      	subs	r3, r2, r3
 801395c:	657b      	str	r3, [r7, #84]	@ 0x54
 801395e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013962:	2b00      	cmp	r3, #0
 8013964:	d103      	bne.n	801396e <f_open+0x29e>
 8013966:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801396a:	429a      	cmp	r2, r3
 801396c:	d8e0      	bhi.n	8013930 <f_open+0x260>
				}
				fp->clust = clst;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013972:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013974:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013978:	2b00      	cmp	r3, #0
 801397a:	d127      	bne.n	80139cc <f_open+0x2fc>
 801397c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801397e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013982:	2b00      	cmp	r3, #0
 8013984:	d022      	beq.n	80139cc <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801398a:	4618      	mov	r0, r3
 801398c:	f7fe fd10 	bl	80123b0 <clust2sect>
 8013990:	6478      	str	r0, [r7, #68]	@ 0x44
 8013992:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013994:	2b00      	cmp	r3, #0
 8013996:	d103      	bne.n	80139a0 <f_open+0x2d0>
						res = FR_INT_ERR;
 8013998:	2302      	movs	r3, #2
 801399a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801399e:	e015      	b.n	80139cc <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80139a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139a2:	0a5a      	lsrs	r2, r3, #9
 80139a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80139a6:	441a      	add	r2, r3
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	7858      	ldrb	r0, [r3, #1]
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	69da      	ldr	r2, [r3, #28]
 80139ba:	2301      	movs	r3, #1
 80139bc:	f7fe faba 	bl	8011f34 <disk_read>
 80139c0:	4603      	mov	r3, r0
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d002      	beq.n	80139cc <f_open+0x2fc>
 80139c6:	2301      	movs	r3, #1
 80139c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80139cc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d002      	beq.n	80139da <f_open+0x30a>
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	2200      	movs	r2, #0
 80139d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80139da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80139de:	4618      	mov	r0, r3
 80139e0:	3760      	adds	r7, #96	@ 0x60
 80139e2:	46bd      	mov	sp, r7
 80139e4:	bd80      	pop	{r7, pc}

080139e6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80139e6:	b580      	push	{r7, lr}
 80139e8:	b08c      	sub	sp, #48	@ 0x30
 80139ea:	af00      	add	r7, sp, #0
 80139ec:	60f8      	str	r0, [r7, #12]
 80139ee:	60b9      	str	r1, [r7, #8]
 80139f0:	607a      	str	r2, [r7, #4]
 80139f2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80139f4:	68bb      	ldr	r3, [r7, #8]
 80139f6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	2200      	movs	r2, #0
 80139fc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	f107 0210 	add.w	r2, r7, #16
 8013a04:	4611      	mov	r1, r2
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7ff fde8 	bl	80135dc <validate>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013a12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d107      	bne.n	8013a2a <f_write+0x44>
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	7c5b      	ldrb	r3, [r3, #17]
 8013a1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013a22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d002      	beq.n	8013a30 <f_write+0x4a>
 8013a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013a2e:	e14b      	b.n	8013cc8 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	7c1b      	ldrb	r3, [r3, #16]
 8013a34:	f003 0302 	and.w	r3, r3, #2
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d101      	bne.n	8013a40 <f_write+0x5a>
 8013a3c:	2307      	movs	r3, #7
 8013a3e:	e143      	b.n	8013cc8 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	695a      	ldr	r2, [r3, #20]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	441a      	add	r2, r3
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	695b      	ldr	r3, [r3, #20]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	f080 812d 	bcs.w	8013cac <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	695b      	ldr	r3, [r3, #20]
 8013a56:	43db      	mvns	r3, r3
 8013a58:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013a5a:	e127      	b.n	8013cac <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	695b      	ldr	r3, [r3, #20]
 8013a60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	f040 80e3 	bne.w	8013c30 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	695b      	ldr	r3, [r3, #20]
 8013a6e:	0a5b      	lsrs	r3, r3, #9
 8013a70:	693a      	ldr	r2, [r7, #16]
 8013a72:	8952      	ldrh	r2, [r2, #10]
 8013a74:	3a01      	subs	r2, #1
 8013a76:	4013      	ands	r3, r2
 8013a78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d143      	bne.n	8013b08 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	695b      	ldr	r3, [r3, #20]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d10c      	bne.n	8013aa2 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	689b      	ldr	r3, [r3, #8]
 8013a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d11a      	bne.n	8013aca <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	2100      	movs	r1, #0
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7fe fe9e 	bl	80127da <create_chain>
 8013a9e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013aa0:	e013      	b.n	8013aca <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d007      	beq.n	8013aba <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	695b      	ldr	r3, [r3, #20]
 8013aae:	4619      	mov	r1, r3
 8013ab0:	68f8      	ldr	r0, [r7, #12]
 8013ab2:	f7fe ff2a 	bl	801290a <clmt_clust>
 8013ab6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013ab8:	e007      	b.n	8013aca <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013aba:	68fa      	ldr	r2, [r7, #12]
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	699b      	ldr	r3, [r3, #24]
 8013ac0:	4619      	mov	r1, r3
 8013ac2:	4610      	mov	r0, r2
 8013ac4:	f7fe fe89 	bl	80127da <create_chain>
 8013ac8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	f000 80f2 	beq.w	8013cb6 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ad4:	2b01      	cmp	r3, #1
 8013ad6:	d104      	bne.n	8013ae2 <f_write+0xfc>
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2202      	movs	r2, #2
 8013adc:	745a      	strb	r2, [r3, #17]
 8013ade:	2302      	movs	r3, #2
 8013ae0:	e0f2      	b.n	8013cc8 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ae8:	d104      	bne.n	8013af4 <f_write+0x10e>
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2201      	movs	r2, #1
 8013aee:	745a      	strb	r2, [r3, #17]
 8013af0:	2301      	movs	r3, #1
 8013af2:	e0e9      	b.n	8013cc8 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013af8:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	689b      	ldr	r3, [r3, #8]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d102      	bne.n	8013b08 <f_write+0x122>
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b06:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	7c1b      	ldrb	r3, [r3, #16]
 8013b0c:	b25b      	sxtb	r3, r3
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	da18      	bge.n	8013b44 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	7858      	ldrb	r0, [r3, #1]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	69da      	ldr	r2, [r3, #28]
 8013b20:	2301      	movs	r3, #1
 8013b22:	f7fe fa27 	bl	8011f74 <disk_write>
 8013b26:	4603      	mov	r3, r0
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d004      	beq.n	8013b36 <f_write+0x150>
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	2201      	movs	r2, #1
 8013b30:	745a      	strb	r2, [r3, #17]
 8013b32:	2301      	movs	r3, #1
 8013b34:	e0c8      	b.n	8013cc8 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	7c1b      	ldrb	r3, [r3, #16]
 8013b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b3e:	b2da      	uxtb	r2, r3
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013b44:	693a      	ldr	r2, [r7, #16]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	699b      	ldr	r3, [r3, #24]
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4610      	mov	r0, r2
 8013b4e:	f7fe fc2f 	bl	80123b0 <clust2sect>
 8013b52:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d104      	bne.n	8013b64 <f_write+0x17e>
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	2202      	movs	r2, #2
 8013b5e:	745a      	strb	r2, [r3, #17]
 8013b60:	2302      	movs	r3, #2
 8013b62:	e0b1      	b.n	8013cc8 <f_write+0x2e2>
			sect += csect;
 8013b64:	697a      	ldr	r2, [r7, #20]
 8013b66:	69bb      	ldr	r3, [r7, #24]
 8013b68:	4413      	add	r3, r2
 8013b6a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	0a5b      	lsrs	r3, r3, #9
 8013b70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013b72:	6a3b      	ldr	r3, [r7, #32]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d03c      	beq.n	8013bf2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013b78:	69ba      	ldr	r2, [r7, #24]
 8013b7a:	6a3b      	ldr	r3, [r7, #32]
 8013b7c:	4413      	add	r3, r2
 8013b7e:	693a      	ldr	r2, [r7, #16]
 8013b80:	8952      	ldrh	r2, [r2, #10]
 8013b82:	4293      	cmp	r3, r2
 8013b84:	d905      	bls.n	8013b92 <f_write+0x1ac>
					cc = fs->csize - csect;
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	895b      	ldrh	r3, [r3, #10]
 8013b8a:	461a      	mov	r2, r3
 8013b8c:	69bb      	ldr	r3, [r7, #24]
 8013b8e:	1ad3      	subs	r3, r2, r3
 8013b90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b92:	693b      	ldr	r3, [r7, #16]
 8013b94:	7858      	ldrb	r0, [r3, #1]
 8013b96:	6a3b      	ldr	r3, [r7, #32]
 8013b98:	697a      	ldr	r2, [r7, #20]
 8013b9a:	69f9      	ldr	r1, [r7, #28]
 8013b9c:	f7fe f9ea 	bl	8011f74 <disk_write>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d004      	beq.n	8013bb0 <f_write+0x1ca>
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	2201      	movs	r2, #1
 8013baa:	745a      	strb	r2, [r3, #17]
 8013bac:	2301      	movs	r3, #1
 8013bae:	e08b      	b.n	8013cc8 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	69da      	ldr	r2, [r3, #28]
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	1ad3      	subs	r3, r2, r3
 8013bb8:	6a3a      	ldr	r2, [r7, #32]
 8013bba:	429a      	cmp	r2, r3
 8013bbc:	d915      	bls.n	8013bea <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	69da      	ldr	r2, [r3, #28]
 8013bc8:	697b      	ldr	r3, [r7, #20]
 8013bca:	1ad3      	subs	r3, r2, r3
 8013bcc:	025b      	lsls	r3, r3, #9
 8013bce:	69fa      	ldr	r2, [r7, #28]
 8013bd0:	4413      	add	r3, r2
 8013bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013bd6:	4619      	mov	r1, r3
 8013bd8:	f7fe fa8d 	bl	80120f6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	7c1b      	ldrb	r3, [r3, #16]
 8013be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013be4:	b2da      	uxtb	r2, r3
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013bea:	6a3b      	ldr	r3, [r7, #32]
 8013bec:	025b      	lsls	r3, r3, #9
 8013bee:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013bf0:	e03f      	b.n	8013c72 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	69db      	ldr	r3, [r3, #28]
 8013bf6:	697a      	ldr	r2, [r7, #20]
 8013bf8:	429a      	cmp	r2, r3
 8013bfa:	d016      	beq.n	8013c2a <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	695a      	ldr	r2, [r3, #20]
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d210      	bcs.n	8013c2a <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	7858      	ldrb	r0, [r3, #1]
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013c12:	2301      	movs	r3, #1
 8013c14:	697a      	ldr	r2, [r7, #20]
 8013c16:	f7fe f98d 	bl	8011f34 <disk_read>
 8013c1a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d004      	beq.n	8013c2a <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2201      	movs	r2, #1
 8013c24:	745a      	strb	r2, [r3, #17]
 8013c26:	2301      	movs	r3, #1
 8013c28:	e04e      	b.n	8013cc8 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	697a      	ldr	r2, [r7, #20]
 8013c2e:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	695b      	ldr	r3, [r3, #20]
 8013c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013c3c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	429a      	cmp	r2, r3
 8013c44:	d901      	bls.n	8013c4a <f_write+0x264>
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	695b      	ldr	r3, [r3, #20]
 8013c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c58:	4413      	add	r3, r2
 8013c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c5c:	69f9      	ldr	r1, [r7, #28]
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7fe fa49 	bl	80120f6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	7c1b      	ldrb	r3, [r3, #16]
 8013c68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013c6c:	b2da      	uxtb	r2, r3
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c72:	69fa      	ldr	r2, [r7, #28]
 8013c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c76:	4413      	add	r3, r2
 8013c78:	61fb      	str	r3, [r7, #28]
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	695a      	ldr	r2, [r3, #20]
 8013c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c80:	441a      	add	r2, r3
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	615a      	str	r2, [r3, #20]
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	68da      	ldr	r2, [r3, #12]
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	695b      	ldr	r3, [r3, #20]
 8013c8e:	429a      	cmp	r2, r3
 8013c90:	bf38      	it	cc
 8013c92:	461a      	movcc	r2, r3
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	60da      	str	r2, [r3, #12]
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	681a      	ldr	r2, [r3, #0]
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c9e:	441a      	add	r2, r3
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	601a      	str	r2, [r3, #0]
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ca8:	1ad3      	subs	r3, r2, r3
 8013caa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	f47f aed4 	bne.w	8013a5c <f_write+0x76>
 8013cb4:	e000      	b.n	8013cb8 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013cb6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	7c1b      	ldrb	r3, [r3, #16]
 8013cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cc0:	b2da      	uxtb	r2, r3
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8013cc6:	2300      	movs	r3, #0
}
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3730      	adds	r7, #48	@ 0x30
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}

08013cd0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b086      	sub	sp, #24
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	f107 0208 	add.w	r2, r7, #8
 8013cde:	4611      	mov	r1, r2
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f7ff fc7b 	bl	80135dc <validate>
 8013ce6:	4603      	mov	r3, r0
 8013ce8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013cea:	7dfb      	ldrb	r3, [r7, #23]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d168      	bne.n	8013dc2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	7c1b      	ldrb	r3, [r3, #16]
 8013cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d062      	beq.n	8013dc2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	7c1b      	ldrb	r3, [r3, #16]
 8013d00:	b25b      	sxtb	r3, r3
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	da15      	bge.n	8013d32 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	7858      	ldrb	r0, [r3, #1]
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	69da      	ldr	r2, [r3, #28]
 8013d14:	2301      	movs	r3, #1
 8013d16:	f7fe f92d 	bl	8011f74 <disk_write>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d001      	beq.n	8013d24 <f_sync+0x54>
 8013d20:	2301      	movs	r3, #1
 8013d22:	e04f      	b.n	8013dc4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	7c1b      	ldrb	r3, [r3, #16]
 8013d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d2c:	b2da      	uxtb	r2, r3
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013d32:	f7fd fcd9 	bl	80116e8 <get_fattime>
 8013d36:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013d38:	68ba      	ldr	r2, [r7, #8]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	6a1b      	ldr	r3, [r3, #32]
 8013d3e:	4619      	mov	r1, r3
 8013d40:	4610      	mov	r0, r2
 8013d42:	f7fe fa9a 	bl	801227a <move_window>
 8013d46:	4603      	mov	r3, r0
 8013d48:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013d4a:	7dfb      	ldrb	r3, [r7, #23]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d138      	bne.n	8013dc2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d54:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	330b      	adds	r3, #11
 8013d5a:	781a      	ldrb	r2, [r3, #0]
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	330b      	adds	r3, #11
 8013d60:	f042 0220 	orr.w	r2, r2, #32
 8013d64:	b2d2      	uxtb	r2, r2
 8013d66:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	6818      	ldr	r0, [r3, #0]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	689b      	ldr	r3, [r3, #8]
 8013d70:	461a      	mov	r2, r3
 8013d72:	68f9      	ldr	r1, [r7, #12]
 8013d74:	f7fe ffa3 	bl	8012cbe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	f103 021c 	add.w	r2, r3, #28
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	68db      	ldr	r3, [r3, #12]
 8013d82:	4619      	mov	r1, r3
 8013d84:	4610      	mov	r0, r2
 8013d86:	f7fe f98a 	bl	801209e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	3316      	adds	r3, #22
 8013d8e:	6939      	ldr	r1, [r7, #16]
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7fe f984 	bl	801209e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	3312      	adds	r3, #18
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fe f963 	bl	8012068 <st_word>
					fs->wflag = 1;
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	2201      	movs	r2, #1
 8013da6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe fa92 	bl	80122d4 <sync_fs>
 8013db0:	4603      	mov	r3, r0
 8013db2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	7c1b      	ldrb	r3, [r3, #16]
 8013db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013dbc:	b2da      	uxtb	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3718      	adds	r7, #24
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f7ff ff7b 	bl	8013cd0 <f_sync>
 8013dda:	4603      	mov	r3, r0
 8013ddc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013dde:	7bfb      	ldrb	r3, [r7, #15]
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d10e      	bne.n	8013e02 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f107 0208 	add.w	r2, r7, #8
 8013dea:	4611      	mov	r1, r2
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7ff fbf5 	bl	80135dc <validate>
 8013df2:	4603      	mov	r3, r0
 8013df4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013df6:	7bfb      	ldrb	r3, [r7, #15]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d102      	bne.n	8013e02 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e04:	4618      	mov	r0, r3
 8013e06:	3710      	adds	r7, #16
 8013e08:	46bd      	mov	sp, r7
 8013e0a:	bd80      	pop	{r7, pc}

08013e0c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013e0c:	b580      	push	{r7, lr}
 8013e0e:	b096      	sub	sp, #88	@ 0x58
 8013e10:	af00      	add	r7, sp, #0
 8013e12:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013e14:	f107 010c 	add.w	r1, r7, #12
 8013e18:	1d3b      	adds	r3, r7, #4
 8013e1a:	2202      	movs	r2, #2
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7ff f995 	bl	801314c <find_volume>
 8013e22:	4603      	mov	r3, r0
 8013e24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8013e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f040 80ec 	bne.w	801400e <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	f107 0310 	add.w	r3, r7, #16
 8013e3c:	4611      	mov	r1, r2
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7ff f878 	bl	8012f34 <follow_path>
 8013e44:	4603      	mov	r3, r0
 8013e46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d102      	bne.n	8013e58 <f_mkdir+0x4c>
 8013e52:	2308      	movs	r3, #8
 8013e54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013e58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013e5c:	2b04      	cmp	r3, #4
 8013e5e:	f040 80d6 	bne.w	801400e <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013e62:	f107 0310 	add.w	r3, r7, #16
 8013e66:	2100      	movs	r1, #0
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f7fe fcb6 	bl	80127da <create_chain>
 8013e6e:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	895b      	ldrh	r3, [r3, #10]
 8013e74:	025b      	lsls	r3, r3, #9
 8013e76:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d102      	bne.n	8013e8a <f_mkdir+0x7e>
 8013e84:	2307      	movs	r3, #7
 8013e86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d102      	bne.n	8013e96 <f_mkdir+0x8a>
 8013e90:	2302      	movs	r3, #2
 8013e92:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e9c:	d102      	bne.n	8013ea4 <f_mkdir+0x98>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013ea4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d106      	bne.n	8013eba <f_mkdir+0xae>
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fe f99f 	bl	80121f2 <sync_window>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 8013eba:	f7fd fc15 	bl	80116e8 <get_fattime>
 8013ebe:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013ec0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d16a      	bne.n	8013f9e <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013ecc:	4618      	mov	r0, r3
 8013ece:	f7fe fa6f 	bl	80123b0 <clust2sect>
 8013ed2:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	3330      	adds	r3, #48	@ 0x30
 8013ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8013eda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013ede:	2100      	movs	r1, #0
 8013ee0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013ee2:	f7fe f929 	bl	8012138 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013ee6:	220b      	movs	r2, #11
 8013ee8:	2120      	movs	r1, #32
 8013eea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013eec:	f7fe f924 	bl	8012138 <mem_set>
					dir[DIR_Name] = '.';
 8013ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ef2:	222e      	movs	r2, #46	@ 0x2e
 8013ef4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013ef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013ef8:	330b      	adds	r3, #11
 8013efa:	2210      	movs	r2, #16
 8013efc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f00:	3316      	adds	r3, #22
 8013f02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7fe f8ca 	bl	801209e <st_dword>
					st_clust(fs, dir, dcl);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013f0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fe fed4 	bl	8012cbe <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f18:	3320      	adds	r3, #32
 8013f1a:	2220      	movs	r2, #32
 8013f1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fe f8e9 	bl	80120f6 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f26:	3321      	adds	r3, #33	@ 0x21
 8013f28:	222e      	movs	r2, #46	@ 0x2e
 8013f2a:	701a      	strb	r2, [r3, #0]
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	2b03      	cmp	r3, #3
 8013f36:	d106      	bne.n	8013f46 <f_mkdir+0x13a>
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013f3e:	429a      	cmp	r2, r3
 8013f40:	d101      	bne.n	8013f46 <f_mkdir+0x13a>
 8013f42:	2300      	movs	r3, #0
 8013f44:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013f46:	68f8      	ldr	r0, [r7, #12]
 8013f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f4a:	3320      	adds	r3, #32
 8013f4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013f4e:	4619      	mov	r1, r3
 8013f50:	f7fe feb5 	bl	8012cbe <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	895b      	ldrh	r3, [r3, #10]
 8013f58:	653b      	str	r3, [r7, #80]	@ 0x50
 8013f5a:	e01b      	b.n	8013f94 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8013f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f5e:	1c5a      	adds	r2, r3, #1
 8013f60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8013f62:	68fa      	ldr	r2, [r7, #12]
 8013f64:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2201      	movs	r2, #1
 8013f6a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f7fe f93f 	bl	80121f2 <sync_window>
 8013f74:	4603      	mov	r3, r0
 8013f76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 8013f7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d10c      	bne.n	8013f9c <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 8013f82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013f86:	2100      	movs	r1, #0
 8013f88:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8013f8a:	f7fe f8d5 	bl	8012138 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f90:	3b01      	subs	r3, #1
 8013f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8013f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d1e0      	bne.n	8013f5c <f_mkdir+0x150>
 8013f9a:	e000      	b.n	8013f9e <f_mkdir+0x192>
					if (res != FR_OK) break;
 8013f9c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013f9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d107      	bne.n	8013fb6 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013fa6:	f107 0310 	add.w	r3, r7, #16
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fe fefc 	bl	8012da8 <dir_register>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 8013fb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d120      	bne.n	8014000 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fc4:	3316      	adds	r3, #22
 8013fc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7fe f868 	bl	801209e <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013fd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fe fe72 	bl	8012cbe <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fdc:	330b      	adds	r3, #11
 8013fde:	2210      	movs	r2, #16
 8013fe0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	2201      	movs	r2, #1
 8013fe6:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d10e      	bne.n	801400e <f_mkdir+0x202>
					res = sync_fs(fs);
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fe f96e 	bl	80122d4 <sync_fs>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8013ffe:	e006      	b.n	801400e <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014000:	f107 0310 	add.w	r3, r7, #16
 8014004:	2200      	movs	r2, #0
 8014006:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014008:	4618      	mov	r0, r3
 801400a:	f7fe fb81 	bl	8012710 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801400e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8014012:	4618      	mov	r0, r3
 8014014:	3758      	adds	r7, #88	@ 0x58
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
	...

0801401c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 801401c:	b590      	push	{r4, r7, lr}
 801401e:	b09d      	sub	sp, #116	@ 0x74
 8014020:	af00      	add	r7, sp, #0
 8014022:	60f8      	str	r0, [r7, #12]
 8014024:	607a      	str	r2, [r7, #4]
 8014026:	603b      	str	r3, [r7, #0]
 8014028:	460b      	mov	r3, r1
 801402a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 801402c:	2301      	movs	r3, #1
 801402e:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014034:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8014036:	f107 030c 	add.w	r3, r7, #12
 801403a:	4618      	mov	r0, r3
 801403c:	f7fe ffeb 	bl	8013016 <get_ldnumber>
 8014040:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014044:	2b00      	cmp	r3, #0
 8014046:	da02      	bge.n	801404e <f_mkfs+0x32>
 8014048:	230b      	movs	r3, #11
 801404a:	f000 bc0d 	b.w	8014868 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 801404e:	4a94      	ldr	r2, [pc, #592]	@ (80142a0 <f_mkfs+0x284>)
 8014050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d005      	beq.n	8014066 <f_mkfs+0x4a>
 801405a:	4a91      	ldr	r2, [pc, #580]	@ (80142a0 <f_mkfs+0x284>)
 801405c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014062:	2200      	movs	r2, #0
 8014064:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 8014066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014068:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 801406c:	2300      	movs	r3, #0
 801406e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 8014072:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014076:	4618      	mov	r0, r3
 8014078:	f7fd ff36 	bl	8011ee8 <disk_initialize>
 801407c:	4603      	mov	r3, r0
 801407e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8014082:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8014086:	f003 0301 	and.w	r3, r3, #1
 801408a:	2b00      	cmp	r3, #0
 801408c:	d001      	beq.n	8014092 <f_mkfs+0x76>
 801408e:	2303      	movs	r3, #3
 8014090:	e3ea      	b.n	8014868 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8014092:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8014096:	f003 0304 	and.w	r3, r3, #4
 801409a:	2b00      	cmp	r3, #0
 801409c:	d001      	beq.n	80140a2 <f_mkfs+0x86>
 801409e:	230a      	movs	r3, #10
 80140a0:	e3e2      	b.n	8014868 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80140a2:	f107 0214 	add.w	r2, r7, #20
 80140a6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80140aa:	2103      	movs	r1, #3
 80140ac:	4618      	mov	r0, r3
 80140ae:	f7fd ff81 	bl	8011fb4 <disk_ioctl>
 80140b2:	4603      	mov	r3, r0
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d10c      	bne.n	80140d2 <f_mkfs+0xb6>
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d009      	beq.n	80140d2 <f_mkfs+0xb6>
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80140c4:	d805      	bhi.n	80140d2 <f_mkfs+0xb6>
 80140c6:	697b      	ldr	r3, [r7, #20]
 80140c8:	1e5a      	subs	r2, r3, #1
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	4013      	ands	r3, r2
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d001      	beq.n	80140d6 <f_mkfs+0xba>
 80140d2:	2301      	movs	r3, #1
 80140d4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80140d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80140da:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d003      	beq.n	80140ea <f_mkfs+0xce>
 80140e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80140e4:	687a      	ldr	r2, [r7, #4]
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d309      	bcc.n	80140fe <f_mkfs+0xe2>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80140f0:	d805      	bhi.n	80140fe <f_mkfs+0xe2>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	1e5a      	subs	r2, r3, #1
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	4013      	ands	r3, r2
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d001      	beq.n	8014102 <f_mkfs+0xe6>
 80140fe:	2313      	movs	r3, #19
 8014100:	e3b2      	b.n	8014868 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 8014102:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014104:	687a      	ldr	r2, [r7, #4]
 8014106:	fbb2 f3f3 	udiv	r3, r2, r3
 801410a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014110:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014112:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8014116:	fbb2 f3f3 	udiv	r3, r2, r3
 801411a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 801411c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801411e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014120:	fb02 f303 	mul.w	r3, r2, r3
 8014124:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 8014126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014128:	2b00      	cmp	r3, #0
 801412a:	d101      	bne.n	8014130 <f_mkfs+0x114>
 801412c:	230e      	movs	r3, #14
 801412e:	e39b      	b.n	8014868 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014130:	f107 0210 	add.w	r2, r7, #16
 8014134:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014138:	2101      	movs	r1, #1
 801413a:	4618      	mov	r0, r3
 801413c:	f7fd ff3a 	bl	8011fb4 <disk_ioctl>
 8014140:	4603      	mov	r3, r0
 8014142:	2b00      	cmp	r3, #0
 8014144:	d001      	beq.n	801414a <f_mkfs+0x12e>
 8014146:	2301      	movs	r3, #1
 8014148:	e38e      	b.n	8014868 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 801414a:	7afb      	ldrb	r3, [r7, #11]
 801414c:	f003 0308 	and.w	r3, r3, #8
 8014150:	2b00      	cmp	r3, #0
 8014152:	d001      	beq.n	8014158 <f_mkfs+0x13c>
 8014154:	2300      	movs	r3, #0
 8014156:	e000      	b.n	801415a <f_mkfs+0x13e>
 8014158:	233f      	movs	r3, #63	@ 0x3f
 801415a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014160:	429a      	cmp	r2, r3
 8014162:	d901      	bls.n	8014168 <f_mkfs+0x14c>
 8014164:	230e      	movs	r3, #14
 8014166:	e37f      	b.n	8014868 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8014168:	693a      	ldr	r2, [r7, #16]
 801416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801416c:	1ad3      	subs	r3, r2, r3
 801416e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	2b7f      	cmp	r3, #127	@ 0x7f
 8014174:	d801      	bhi.n	801417a <f_mkfs+0x15e>
 8014176:	230e      	movs	r3, #14
 8014178:	e376      	b.n	8014868 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2b80      	cmp	r3, #128	@ 0x80
 801417e:	d901      	bls.n	8014184 <f_mkfs+0x168>
 8014180:	2313      	movs	r3, #19
 8014182:	e371      	b.n	8014868 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 8014184:	7afb      	ldrb	r3, [r7, #11]
 8014186:	f003 0302 	and.w	r3, r3, #2
 801418a:	2b00      	cmp	r3, #0
 801418c:	d00d      	beq.n	80141aa <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 801418e:	7afb      	ldrb	r3, [r7, #11]
 8014190:	f003 0307 	and.w	r3, r3, #7
 8014194:	2b02      	cmp	r3, #2
 8014196:	d004      	beq.n	80141a2 <f_mkfs+0x186>
 8014198:	7afb      	ldrb	r3, [r7, #11]
 801419a:	f003 0301 	and.w	r3, r3, #1
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d103      	bne.n	80141aa <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80141a2:	2303      	movs	r3, #3
 80141a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80141a8:	e009      	b.n	80141be <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80141aa:	7afb      	ldrb	r3, [r7, #11]
 80141ac:	f003 0301 	and.w	r3, r3, #1
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d101      	bne.n	80141b8 <f_mkfs+0x19c>
 80141b4:	2313      	movs	r3, #19
 80141b6:	e357      	b.n	8014868 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80141b8:	2302      	movs	r3, #2
 80141ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80141c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80141c6:	2b03      	cmp	r3, #3
 80141c8:	d13c      	bne.n	8014244 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80141ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d11b      	bne.n	8014208 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	0c5b      	lsrs	r3, r3, #17
 80141d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80141d6:	2300      	movs	r3, #0
 80141d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141da:	2301      	movs	r3, #1
 80141dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80141de:	e005      	b.n	80141ec <f_mkfs+0x1d0>
 80141e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80141e2:	3301      	adds	r3, #1
 80141e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80141e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80141e8:	005b      	lsls	r3, r3, #1
 80141ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80141ec:	4a2d      	ldr	r2, [pc, #180]	@ (80142a4 <f_mkfs+0x288>)
 80141ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80141f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d007      	beq.n	8014208 <f_mkfs+0x1ec>
 80141f8:	4a2a      	ldr	r2, [pc, #168]	@ (80142a4 <f_mkfs+0x288>)
 80141fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80141fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014200:	461a      	mov	r2, r3
 8014202:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014204:	4293      	cmp	r3, r2
 8014206:	d2eb      	bcs.n	80141e0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8014208:	693a      	ldr	r2, [r7, #16]
 801420a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801420c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014210:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	3302      	adds	r3, #2
 8014216:	009a      	lsls	r2, r3, #2
 8014218:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801421a:	4413      	add	r3, r2
 801421c:	1e5a      	subs	r2, r3, #1
 801421e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014220:	fbb2 f3f3 	udiv	r3, r2, r3
 8014224:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 8014226:	2320      	movs	r3, #32
 8014228:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 801422a:	2300      	movs	r3, #0
 801422c:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 801422e:	6a3b      	ldr	r3, [r7, #32]
 8014230:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8014234:	4293      	cmp	r3, r2
 8014236:	d903      	bls.n	8014240 <f_mkfs+0x224>
 8014238:	6a3b      	ldr	r3, [r7, #32]
 801423a:	4a1b      	ldr	r2, [pc, #108]	@ (80142a8 <f_mkfs+0x28c>)
 801423c:	4293      	cmp	r3, r2
 801423e:	d952      	bls.n	80142e6 <f_mkfs+0x2ca>
 8014240:	230e      	movs	r3, #14
 8014242:	e311      	b.n	8014868 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 8014244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014246:	2b00      	cmp	r3, #0
 8014248:	d11b      	bne.n	8014282 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 801424a:	693b      	ldr	r3, [r7, #16]
 801424c:	0b1b      	lsrs	r3, r3, #12
 801424e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014250:	2300      	movs	r3, #0
 8014252:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014254:	2301      	movs	r3, #1
 8014256:	653b      	str	r3, [r7, #80]	@ 0x50
 8014258:	e005      	b.n	8014266 <f_mkfs+0x24a>
 801425a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801425c:	3301      	adds	r3, #1
 801425e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014262:	005b      	lsls	r3, r3, #1
 8014264:	653b      	str	r3, [r7, #80]	@ 0x50
 8014266:	4a11      	ldr	r2, [pc, #68]	@ (80142ac <f_mkfs+0x290>)
 8014268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801426a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d007      	beq.n	8014282 <f_mkfs+0x266>
 8014272:	4a0e      	ldr	r2, [pc, #56]	@ (80142ac <f_mkfs+0x290>)
 8014274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801427a:	461a      	mov	r2, r3
 801427c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801427e:	4293      	cmp	r3, r2
 8014280:	d2eb      	bcs.n	801425a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 8014282:	693a      	ldr	r2, [r7, #16]
 8014284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014286:	fbb2 f3f3 	udiv	r3, r2, r3
 801428a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 801428c:	6a3b      	ldr	r3, [r7, #32]
 801428e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014292:	4293      	cmp	r3, r2
 8014294:	d90c      	bls.n	80142b0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 8014296:	6a3b      	ldr	r3, [r7, #32]
 8014298:	3302      	adds	r3, #2
 801429a:	005b      	lsls	r3, r3, #1
 801429c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801429e:	e012      	b.n	80142c6 <f_mkfs+0x2aa>
 80142a0:	20002ac4 	.word	0x20002ac4
 80142a4:	0801b9d0 	.word	0x0801b9d0
 80142a8:	0ffffff5 	.word	0x0ffffff5
 80142ac:	0801b9e0 	.word	0x0801b9e0
				} else {
					fmt = FS_FAT12;
 80142b0:	2301      	movs	r3, #1
 80142b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80142b6:	6a3a      	ldr	r2, [r7, #32]
 80142b8:	4613      	mov	r3, r2
 80142ba:	005b      	lsls	r3, r3, #1
 80142bc:	4413      	add	r3, r2
 80142be:	3301      	adds	r3, #1
 80142c0:	085b      	lsrs	r3, r3, #1
 80142c2:	3303      	adds	r3, #3
 80142c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80142c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80142c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80142ca:	4413      	add	r3, r2
 80142cc:	1e5a      	subs	r2, r3, #1
 80142ce:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80142d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80142d4:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80142d6:	2301      	movs	r3, #1
 80142d8:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80142da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80142dc:	015a      	lsls	r2, r3, #5
 80142de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80142e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80142e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 80142e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80142ea:	4413      	add	r3, r2
 80142ec:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 80142ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80142f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80142f2:	fb03 f202 	mul.w	r2, r3, r2
 80142f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80142f8:	4413      	add	r3, r2
 80142fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80142fc:	4413      	add	r3, r2
 80142fe:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014300:	697a      	ldr	r2, [r7, #20]
 8014302:	69fb      	ldr	r3, [r7, #28]
 8014304:	4413      	add	r3, r2
 8014306:	1e5a      	subs	r2, r3, #1
 8014308:	697b      	ldr	r3, [r7, #20]
 801430a:	425b      	negs	r3, r3
 801430c:	401a      	ands	r2, r3
 801430e:	69fb      	ldr	r3, [r7, #28]
 8014310:	1ad3      	subs	r3, r2, r3
 8014312:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8014314:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014318:	2b03      	cmp	r3, #3
 801431a:	d108      	bne.n	801432e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 801431c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801431e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014320:	4413      	add	r3, r2
 8014322:	657b      	str	r3, [r7, #84]	@ 0x54
 8014324:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014328:	4413      	add	r3, r2
 801432a:	65bb      	str	r3, [r7, #88]	@ 0x58
 801432c:	e006      	b.n	801433c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 801432e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014332:	fbb2 f3f3 	udiv	r3, r2, r3
 8014336:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014338:	4413      	add	r3, r2
 801433a:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 801433c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801433e:	011a      	lsls	r2, r3, #4
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	441a      	add	r2, r3
 8014344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014346:	1ad2      	subs	r2, r2, r3
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	429a      	cmp	r2, r3
 801434c:	d901      	bls.n	8014352 <f_mkfs+0x336>
 801434e:	230e      	movs	r3, #14
 8014350:	e28a      	b.n	8014868 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 8014352:	693a      	ldr	r2, [r7, #16]
 8014354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014356:	1ad2      	subs	r2, r2, r3
 8014358:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801435a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801435c:	fb01 f303 	mul.w	r3, r1, r3
 8014360:	1ad2      	subs	r2, r2, r3
 8014362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014364:	1ad2      	subs	r2, r2, r3
 8014366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014368:	fbb2 f3f3 	udiv	r3, r2, r3
 801436c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 801436e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014372:	2b03      	cmp	r3, #3
 8014374:	d10f      	bne.n	8014396 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 8014376:	6a3b      	ldr	r3, [r7, #32]
 8014378:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801437c:	4293      	cmp	r3, r2
 801437e:	d80a      	bhi.n	8014396 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d105      	bne.n	8014392 <f_mkfs+0x376>
 8014386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014388:	085b      	lsrs	r3, r3, #1
 801438a:	607b      	str	r3, [r7, #4]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d144      	bne.n	801441c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 8014392:	230e      	movs	r3, #14
 8014394:	e268      	b.n	8014868 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 8014396:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801439a:	2b02      	cmp	r3, #2
 801439c:	d133      	bne.n	8014406 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 801439e:	6a3b      	ldr	r3, [r7, #32]
 80143a0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80143a4:	4293      	cmp	r3, r2
 80143a6:	d91e      	bls.n	80143e6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d107      	bne.n	80143be <f_mkfs+0x3a2>
 80143ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	2b40      	cmp	r3, #64	@ 0x40
 80143b4:	d803      	bhi.n	80143be <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80143b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143b8:	005b      	lsls	r3, r3, #1
 80143ba:	607b      	str	r3, [r7, #4]
 80143bc:	e033      	b.n	8014426 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80143be:	7afb      	ldrb	r3, [r7, #11]
 80143c0:	f003 0302 	and.w	r3, r3, #2
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d003      	beq.n	80143d0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80143c8:	2303      	movs	r3, #3
 80143ca:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80143ce:	e02a      	b.n	8014426 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d105      	bne.n	80143e2 <f_mkfs+0x3c6>
 80143d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143d8:	005b      	lsls	r3, r3, #1
 80143da:	607b      	str	r3, [r7, #4]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2b80      	cmp	r3, #128	@ 0x80
 80143e0:	d91e      	bls.n	8014420 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 80143e2:	230e      	movs	r3, #14
 80143e4:	e240      	b.n	8014868 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 80143e6:	6a3b      	ldr	r3, [r7, #32]
 80143e8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d80a      	bhi.n	8014406 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d105      	bne.n	8014402 <f_mkfs+0x3e6>
 80143f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143f8:	005b      	lsls	r3, r3, #1
 80143fa:	607b      	str	r3, [r7, #4]
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b80      	cmp	r3, #128	@ 0x80
 8014400:	d910      	bls.n	8014424 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8014402:	230e      	movs	r3, #14
 8014404:	e230      	b.n	8014868 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8014406:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801440a:	2b01      	cmp	r3, #1
 801440c:	d10c      	bne.n	8014428 <f_mkfs+0x40c>
 801440e:	6a3b      	ldr	r3, [r7, #32]
 8014410:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014414:	4293      	cmp	r3, r2
 8014416:	d907      	bls.n	8014428 <f_mkfs+0x40c>
 8014418:	230e      	movs	r3, #14
 801441a:	e225      	b.n	8014868 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 801441c:	bf00      	nop
 801441e:	e6ce      	b.n	80141be <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014420:	bf00      	nop
 8014422:	e6cc      	b.n	80141be <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014424:	bf00      	nop
			pau = au;
 8014426:	e6ca      	b.n	80141be <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8014428:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801442a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801442c:	461a      	mov	r2, r3
 801442e:	2100      	movs	r1, #0
 8014430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014432:	f7fd fe81 	bl	8012138 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8014436:	220b      	movs	r2, #11
 8014438:	49b2      	ldr	r1, [pc, #712]	@ (8014704 <f_mkfs+0x6e8>)
 801443a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801443c:	f7fd fe5b 	bl	80120f6 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8014440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014442:	330b      	adds	r3, #11
 8014444:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014446:	4611      	mov	r1, r2
 8014448:	4618      	mov	r0, r3
 801444a:	f7fd fe0d 	bl	8012068 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014450:	330d      	adds	r3, #13
 8014452:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014454:	b2d2      	uxtb	r2, r2
 8014456:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8014458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801445a:	330e      	adds	r3, #14
 801445c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801445e:	b292      	uxth	r2, r2
 8014460:	4611      	mov	r1, r2
 8014462:	4618      	mov	r0, r3
 8014464:	f7fd fe00 	bl	8012068 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8014468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801446a:	3310      	adds	r3, #16
 801446c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801446e:	b2d2      	uxtb	r2, r2
 8014470:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014474:	f103 0211 	add.w	r2, r3, #17
 8014478:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801447c:	2b03      	cmp	r3, #3
 801447e:	d002      	beq.n	8014486 <f_mkfs+0x46a>
 8014480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014482:	b29b      	uxth	r3, r3
 8014484:	e000      	b.n	8014488 <f_mkfs+0x46c>
 8014486:	2300      	movs	r3, #0
 8014488:	4619      	mov	r1, r3
 801448a:	4610      	mov	r0, r2
 801448c:	f7fd fdec 	bl	8012068 <st_word>
		if (sz_vol < 0x10000) {
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014496:	d208      	bcs.n	80144aa <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8014498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801449a:	3313      	adds	r3, #19
 801449c:	693a      	ldr	r2, [r7, #16]
 801449e:	b292      	uxth	r2, r2
 80144a0:	4611      	mov	r1, r2
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7fd fde0 	bl	8012068 <st_word>
 80144a8:	e006      	b.n	80144b8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 80144aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ac:	3320      	adds	r3, #32
 80144ae:	693a      	ldr	r2, [r7, #16]
 80144b0:	4611      	mov	r1, r2
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7fd fdf3 	bl	801209e <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80144b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ba:	3315      	adds	r3, #21
 80144bc:	22f8      	movs	r2, #248	@ 0xf8
 80144be:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80144c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144c2:	3318      	adds	r3, #24
 80144c4:	213f      	movs	r1, #63	@ 0x3f
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7fd fdce 	bl	8012068 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80144cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ce:	331a      	adds	r3, #26
 80144d0:	21ff      	movs	r1, #255	@ 0xff
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fd fdc8 	bl	8012068 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80144d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144da:	331c      	adds	r3, #28
 80144dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80144de:	4618      	mov	r0, r3
 80144e0:	f7fd fddd 	bl	801209e <st_dword>
		if (fmt == FS_FAT32) {
 80144e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80144e8:	2b03      	cmp	r3, #3
 80144ea:	d131      	bne.n	8014550 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80144ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80144ee:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 80144f2:	f7fd f8f9 	bl	80116e8 <get_fattime>
 80144f6:	4603      	mov	r3, r0
 80144f8:	4619      	mov	r1, r3
 80144fa:	4620      	mov	r0, r4
 80144fc:	f7fd fdcf 	bl	801209e <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014502:	3324      	adds	r3, #36	@ 0x24
 8014504:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014506:	4618      	mov	r0, r3
 8014508:	f7fd fdc9 	bl	801209e <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 801450c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801450e:	332c      	adds	r3, #44	@ 0x2c
 8014510:	2102      	movs	r1, #2
 8014512:	4618      	mov	r0, r3
 8014514:	f7fd fdc3 	bl	801209e <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8014518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801451a:	3330      	adds	r3, #48	@ 0x30
 801451c:	2101      	movs	r1, #1
 801451e:	4618      	mov	r0, r3
 8014520:	f7fd fda2 	bl	8012068 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8014524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014526:	3332      	adds	r3, #50	@ 0x32
 8014528:	2106      	movs	r1, #6
 801452a:	4618      	mov	r0, r3
 801452c:	f7fd fd9c 	bl	8012068 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8014530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014532:	3340      	adds	r3, #64	@ 0x40
 8014534:	2280      	movs	r2, #128	@ 0x80
 8014536:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8014538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801453a:	3342      	adds	r3, #66	@ 0x42
 801453c:	2229      	movs	r2, #41	@ 0x29
 801453e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8014540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014542:	3347      	adds	r3, #71	@ 0x47
 8014544:	2213      	movs	r2, #19
 8014546:	4970      	ldr	r1, [pc, #448]	@ (8014708 <f_mkfs+0x6ec>)
 8014548:	4618      	mov	r0, r3
 801454a:	f7fd fdd4 	bl	80120f6 <mem_cpy>
 801454e:	e020      	b.n	8014592 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8014550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014552:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8014556:	f7fd f8c7 	bl	80116e8 <get_fattime>
 801455a:	4603      	mov	r3, r0
 801455c:	4619      	mov	r1, r3
 801455e:	4620      	mov	r0, r4
 8014560:	f7fd fd9d 	bl	801209e <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8014564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014566:	3316      	adds	r3, #22
 8014568:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801456a:	b292      	uxth	r2, r2
 801456c:	4611      	mov	r1, r2
 801456e:	4618      	mov	r0, r3
 8014570:	f7fd fd7a 	bl	8012068 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014576:	3324      	adds	r3, #36	@ 0x24
 8014578:	2280      	movs	r2, #128	@ 0x80
 801457a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 801457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801457e:	3326      	adds	r3, #38	@ 0x26
 8014580:	2229      	movs	r2, #41	@ 0x29
 8014582:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014586:	332b      	adds	r3, #43	@ 0x2b
 8014588:	2213      	movs	r2, #19
 801458a:	4960      	ldr	r1, [pc, #384]	@ (801470c <f_mkfs+0x6f0>)
 801458c:	4618      	mov	r0, r3
 801458e:	f7fd fdb2 	bl	80120f6 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014594:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014598:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801459c:	4618      	mov	r0, r3
 801459e:	f7fd fd63 	bl	8012068 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 80145a2:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80145a6:	2301      	movs	r3, #1
 80145a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80145aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80145ac:	f7fd fce2 	bl	8011f74 <disk_write>
 80145b0:	4603      	mov	r3, r0
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d001      	beq.n	80145ba <f_mkfs+0x59e>
 80145b6:	2301      	movs	r3, #1
 80145b8:	e156      	b.n	8014868 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 80145ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80145be:	2b03      	cmp	r3, #3
 80145c0:	d140      	bne.n	8014644 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80145c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145c4:	1d9a      	adds	r2, r3, #6
 80145c6:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80145ca:	2301      	movs	r3, #1
 80145cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80145ce:	f7fd fcd1 	bl	8011f74 <disk_write>
			mem_set(buf, 0, ss);
 80145d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80145d4:	461a      	mov	r2, r3
 80145d6:	2100      	movs	r1, #0
 80145d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145da:	f7fd fdad 	bl	8012138 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80145de:	494c      	ldr	r1, [pc, #304]	@ (8014710 <f_mkfs+0x6f4>)
 80145e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145e2:	f7fd fd5c 	bl	801209e <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80145e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80145ec:	4949      	ldr	r1, [pc, #292]	@ (8014714 <f_mkfs+0x6f8>)
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fd fd55 	bl	801209e <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80145f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145f6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80145fa:	6a3b      	ldr	r3, [r7, #32]
 80145fc:	3b01      	subs	r3, #1
 80145fe:	4619      	mov	r1, r3
 8014600:	4610      	mov	r0, r2
 8014602:	f7fd fd4c 	bl	801209e <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014608:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801460c:	2102      	movs	r1, #2
 801460e:	4618      	mov	r0, r3
 8014610:	f7fd fd45 	bl	801209e <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014616:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801461a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 801461e:	4618      	mov	r0, r3
 8014620:	f7fd fd22 	bl	8012068 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014626:	1dda      	adds	r2, r3, #7
 8014628:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801462c:	2301      	movs	r3, #1
 801462e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014630:	f7fd fca0 	bl	8011f74 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014636:	1c5a      	adds	r2, r3, #1
 8014638:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801463c:	2301      	movs	r3, #1
 801463e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014640:	f7fd fc98 	bl	8011f74 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014646:	2100      	movs	r1, #0
 8014648:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801464a:	f7fd fd75 	bl	8012138 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801464e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014650:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014652:	2300      	movs	r3, #0
 8014654:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014656:	e04b      	b.n	80146f0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8014658:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801465c:	2b03      	cmp	r3, #3
 801465e:	d113      	bne.n	8014688 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014660:	f06f 0107 	mvn.w	r1, #7
 8014664:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014666:	f7fd fd1a 	bl	801209e <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801466c:	3304      	adds	r3, #4
 801466e:	f04f 31ff 	mov.w	r1, #4294967295
 8014672:	4618      	mov	r0, r3
 8014674:	f7fd fd13 	bl	801209e <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801467a:	3308      	adds	r3, #8
 801467c:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014680:	4618      	mov	r0, r3
 8014682:	f7fd fd0c 	bl	801209e <st_dword>
 8014686:	e00b      	b.n	80146a0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014688:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801468c:	2b01      	cmp	r3, #1
 801468e:	d101      	bne.n	8014694 <f_mkfs+0x678>
 8014690:	4b21      	ldr	r3, [pc, #132]	@ (8014718 <f_mkfs+0x6fc>)
 8014692:	e001      	b.n	8014698 <f_mkfs+0x67c>
 8014694:	f06f 0307 	mvn.w	r3, #7
 8014698:	4619      	mov	r1, r3
 801469a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801469c:	f7fd fcff 	bl	801209e <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 80146a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80146a2:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 80146a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80146a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146a8:	4293      	cmp	r3, r2
 80146aa:	bf28      	it	cs
 80146ac:	4613      	movcs	r3, r2
 80146ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80146b0:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 80146b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80146b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80146b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80146ba:	f7fd fc5b 	bl	8011f74 <disk_write>
 80146be:	4603      	mov	r3, r0
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d001      	beq.n	80146c8 <f_mkfs+0x6ac>
 80146c4:	2301      	movs	r3, #1
 80146c6:	e0cf      	b.n	8014868 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80146c8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80146ca:	461a      	mov	r2, r3
 80146cc:	2100      	movs	r1, #0
 80146ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146d0:	f7fd fd32 	bl	8012138 <mem_set>
				sect += n; nsect -= n;
 80146d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80146d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80146d8:	4413      	add	r3, r2
 80146da:	667b      	str	r3, [r7, #100]	@ 0x64
 80146dc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80146de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 80146e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d1dc      	bne.n	80146a4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80146ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80146ec:	3301      	adds	r3, #1
 80146ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80146f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80146f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146f4:	429a      	cmp	r2, r3
 80146f6:	d3af      	bcc.n	8014658 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80146f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80146fc:	2b03      	cmp	r3, #3
 80146fe:	d10d      	bne.n	801471c <f_mkfs+0x700>
 8014700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014702:	e00c      	b.n	801471e <f_mkfs+0x702>
 8014704:	0801b8e0 	.word	0x0801b8e0
 8014708:	0801b8ec 	.word	0x0801b8ec
 801470c:	0801b900 	.word	0x0801b900
 8014710:	41615252 	.word	0x41615252
 8014714:	61417272 	.word	0x61417272
 8014718:	00fffff8 	.word	0x00fffff8
 801471c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801471e:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014720:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014724:	4293      	cmp	r3, r2
 8014726:	bf28      	it	cs
 8014728:	4613      	movcs	r3, r2
 801472a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 801472c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014732:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014734:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014736:	f7fd fc1d 	bl	8011f74 <disk_write>
 801473a:	4603      	mov	r3, r0
 801473c:	2b00      	cmp	r3, #0
 801473e:	d001      	beq.n	8014744 <f_mkfs+0x728>
 8014740:	2301      	movs	r3, #1
 8014742:	e091      	b.n	8014868 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8014744:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014748:	4413      	add	r3, r2
 801474a:	667b      	str	r3, [r7, #100]	@ 0x64
 801474c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801474e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014750:	1ad3      	subs	r3, r2, r3
 8014752:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8014754:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014756:	2b00      	cmp	r3, #0
 8014758:	d1e2      	bne.n	8014720 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801475a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801475e:	2b03      	cmp	r3, #3
 8014760:	d103      	bne.n	801476a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8014762:	230c      	movs	r3, #12
 8014764:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014768:	e010      	b.n	801478c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801476a:	693b      	ldr	r3, [r7, #16]
 801476c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014770:	d303      	bcc.n	801477a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014772:	2306      	movs	r3, #6
 8014774:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014778:	e008      	b.n	801478c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801477a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801477e:	2b02      	cmp	r3, #2
 8014780:	d101      	bne.n	8014786 <f_mkfs+0x76a>
 8014782:	2304      	movs	r3, #4
 8014784:	e000      	b.n	8014788 <f_mkfs+0x76c>
 8014786:	2301      	movs	r3, #1
 8014788:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 801478c:	7afb      	ldrb	r3, [r7, #11]
 801478e:	f003 0308 	and.w	r3, r3, #8
 8014792:	2b00      	cmp	r3, #0
 8014794:	d15b      	bne.n	801484e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8014796:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014798:	461a      	mov	r2, r3
 801479a:	2100      	movs	r1, #0
 801479c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801479e:	f7fd fccb 	bl	8012138 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 80147a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147a4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80147a8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7fd fc5b 	bl	8012068 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 80147b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80147b8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 80147ba:	69bb      	ldr	r3, [r7, #24]
 80147bc:	2200      	movs	r2, #0
 80147be:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80147c0:	69bb      	ldr	r3, [r7, #24]
 80147c2:	3301      	adds	r3, #1
 80147c4:	2201      	movs	r2, #1
 80147c6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80147c8:	69bb      	ldr	r3, [r7, #24]
 80147ca:	3302      	adds	r3, #2
 80147cc:	2201      	movs	r2, #1
 80147ce:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80147d0:	69bb      	ldr	r3, [r7, #24]
 80147d2:	3303      	adds	r3, #3
 80147d4:	2200      	movs	r2, #0
 80147d6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80147d8:	69bb      	ldr	r3, [r7, #24]
 80147da:	3304      	adds	r3, #4
 80147dc:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80147e0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80147e2:	693a      	ldr	r2, [r7, #16]
 80147e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147e6:	441a      	add	r2, r3
 80147e8:	4b21      	ldr	r3, [pc, #132]	@ (8014870 <f_mkfs+0x854>)
 80147ea:	fba3 1302 	umull	r1, r3, r3, r2
 80147ee:	1ad2      	subs	r2, r2, r3
 80147f0:	0852      	lsrs	r2, r2, #1
 80147f2:	4413      	add	r3, r2
 80147f4:	0b5b      	lsrs	r3, r3, #13
 80147f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80147f8:	69bb      	ldr	r3, [r7, #24]
 80147fa:	3305      	adds	r3, #5
 80147fc:	22fe      	movs	r2, #254	@ 0xfe
 80147fe:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014800:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014802:	089b      	lsrs	r3, r3, #2
 8014804:	b2da      	uxtb	r2, r3
 8014806:	69bb      	ldr	r3, [r7, #24]
 8014808:	3306      	adds	r3, #6
 801480a:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 801480e:	b2d2      	uxtb	r2, r2
 8014810:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014812:	69bb      	ldr	r3, [r7, #24]
 8014814:	3307      	adds	r3, #7
 8014816:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014818:	b2d2      	uxtb	r2, r2
 801481a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 801481c:	69bb      	ldr	r3, [r7, #24]
 801481e:	3308      	adds	r3, #8
 8014820:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014822:	4618      	mov	r0, r3
 8014824:	f7fd fc3b 	bl	801209e <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	330c      	adds	r3, #12
 801482c:	693a      	ldr	r2, [r7, #16]
 801482e:	4611      	mov	r1, r2
 8014830:	4618      	mov	r0, r3
 8014832:	f7fd fc34 	bl	801209e <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014836:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 801483a:	2301      	movs	r3, #1
 801483c:	2200      	movs	r2, #0
 801483e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014840:	f7fd fb98 	bl	8011f74 <disk_write>
 8014844:	4603      	mov	r3, r0
 8014846:	2b00      	cmp	r3, #0
 8014848:	d001      	beq.n	801484e <f_mkfs+0x832>
 801484a:	2301      	movs	r3, #1
 801484c:	e00c      	b.n	8014868 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801484e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014852:	2200      	movs	r2, #0
 8014854:	2100      	movs	r1, #0
 8014856:	4618      	mov	r0, r3
 8014858:	f7fd fbac 	bl	8011fb4 <disk_ioctl>
 801485c:	4603      	mov	r3, r0
 801485e:	2b00      	cmp	r3, #0
 8014860:	d001      	beq.n	8014866 <f_mkfs+0x84a>
 8014862:	2301      	movs	r3, #1
 8014864:	e000      	b.n	8014868 <f_mkfs+0x84c>

	return FR_OK;
 8014866:	2300      	movs	r3, #0
}
 8014868:	4618      	mov	r0, r3
 801486a:	3774      	adds	r7, #116	@ 0x74
 801486c:	46bd      	mov	sp, r7
 801486e:	bd90      	pop	{r4, r7, pc}
 8014870:	0515565b 	.word	0x0515565b

08014874 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014874:	b480      	push	{r7}
 8014876:	b087      	sub	sp, #28
 8014878:	af00      	add	r7, sp, #0
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	4613      	mov	r3, r2
 8014880:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014882:	2301      	movs	r3, #1
 8014884:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014886:	2300      	movs	r3, #0
 8014888:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801488a:	4b1f      	ldr	r3, [pc, #124]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 801488c:	7a5b      	ldrb	r3, [r3, #9]
 801488e:	b2db      	uxtb	r3, r3
 8014890:	2b00      	cmp	r3, #0
 8014892:	d131      	bne.n	80148f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014894:	4b1c      	ldr	r3, [pc, #112]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 8014896:	7a5b      	ldrb	r3, [r3, #9]
 8014898:	b2db      	uxtb	r3, r3
 801489a:	461a      	mov	r2, r3
 801489c:	4b1a      	ldr	r3, [pc, #104]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 801489e:	2100      	movs	r1, #0
 80148a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80148a2:	4b19      	ldr	r3, [pc, #100]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 80148a4:	7a5b      	ldrb	r3, [r3, #9]
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	4a17      	ldr	r2, [pc, #92]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 80148aa:	009b      	lsls	r3, r3, #2
 80148ac:	4413      	add	r3, r2
 80148ae:	68fa      	ldr	r2, [r7, #12]
 80148b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80148b2:	4b15      	ldr	r3, [pc, #84]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 80148b4:	7a5b      	ldrb	r3, [r3, #9]
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	461a      	mov	r2, r3
 80148ba:	4b13      	ldr	r3, [pc, #76]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 80148bc:	4413      	add	r3, r2
 80148be:	79fa      	ldrb	r2, [r7, #7]
 80148c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80148c2:	4b11      	ldr	r3, [pc, #68]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 80148c4:	7a5b      	ldrb	r3, [r3, #9]
 80148c6:	b2db      	uxtb	r3, r3
 80148c8:	1c5a      	adds	r2, r3, #1
 80148ca:	b2d1      	uxtb	r1, r2
 80148cc:	4a0e      	ldr	r2, [pc, #56]	@ (8014908 <FATFS_LinkDriverEx+0x94>)
 80148ce:	7251      	strb	r1, [r2, #9]
 80148d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80148d2:	7dbb      	ldrb	r3, [r7, #22]
 80148d4:	3330      	adds	r3, #48	@ 0x30
 80148d6:	b2da      	uxtb	r2, r3
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	3301      	adds	r3, #1
 80148e0:	223a      	movs	r2, #58	@ 0x3a
 80148e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	3302      	adds	r3, #2
 80148e8:	222f      	movs	r2, #47	@ 0x2f
 80148ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	3303      	adds	r3, #3
 80148f0:	2200      	movs	r2, #0
 80148f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148f4:	2300      	movs	r3, #0
 80148f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	371c      	adds	r7, #28
 80148fe:	46bd      	mov	sp, r7
 8014900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014904:	4770      	bx	lr
 8014906:	bf00      	nop
 8014908:	20002acc 	.word	0x20002acc

0801490c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b082      	sub	sp, #8
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
 8014914:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014916:	2200      	movs	r2, #0
 8014918:	6839      	ldr	r1, [r7, #0]
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f7ff ffaa 	bl	8014874 <FATFS_LinkDriverEx>
 8014920:	4603      	mov	r3, r0
}
 8014922:	4618      	mov	r0, r3
 8014924:	3708      	adds	r7, #8
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}

0801492a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801492a:	b480      	push	{r7}
 801492c:	b085      	sub	sp, #20
 801492e:	af00      	add	r7, sp, #0
 8014930:	4603      	mov	r3, r0
 8014932:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014934:	2300      	movs	r3, #0
 8014936:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801493c:	2b84      	cmp	r3, #132	@ 0x84
 801493e:	d005      	beq.n	801494c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014940:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	4413      	add	r3, r2
 8014948:	3303      	adds	r3, #3
 801494a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801494c:	68fb      	ldr	r3, [r7, #12]
}
 801494e:	4618      	mov	r0, r3
 8014950:	3714      	adds	r7, #20
 8014952:	46bd      	mov	sp, r7
 8014954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014958:	4770      	bx	lr

0801495a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801495a:	b480      	push	{r7}
 801495c:	b083      	sub	sp, #12
 801495e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014960:	f3ef 8305 	mrs	r3, IPSR
 8014964:	607b      	str	r3, [r7, #4]
  return(result);
 8014966:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014968:	2b00      	cmp	r3, #0
 801496a:	bf14      	ite	ne
 801496c:	2301      	movne	r3, #1
 801496e:	2300      	moveq	r3, #0
 8014970:	b2db      	uxtb	r3, r3
}
 8014972:	4618      	mov	r0, r3
 8014974:	370c      	adds	r7, #12
 8014976:	46bd      	mov	sp, r7
 8014978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497c:	4770      	bx	lr

0801497e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801497e:	b580      	push	{r7, lr}
 8014980:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014982:	f001 f9cd 	bl	8015d20 <vTaskStartScheduler>
  
  return osOK;
 8014986:	2300      	movs	r3, #0
}
 8014988:	4618      	mov	r0, r3
 801498a:	bd80      	pop	{r7, pc}

0801498c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014990:	f001 fe2e 	bl	80165f0 <xTaskGetSchedulerState>
 8014994:	4603      	mov	r3, r0
 8014996:	2b01      	cmp	r3, #1
 8014998:	d101      	bne.n	801499e <osKernelRunning+0x12>
    return 0;
 801499a:	2300      	movs	r3, #0
 801499c:	e000      	b.n	80149a0 <osKernelRunning+0x14>
  else
    return 1;
 801499e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80149a8:	f7ff ffd7 	bl	801495a <inHandlerMode>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d003      	beq.n	80149ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80149b2:	f001 fad9 	bl	8015f68 <xTaskGetTickCountFromISR>
 80149b6:	4603      	mov	r3, r0
 80149b8:	e002      	b.n	80149c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80149ba:	f001 fac5 	bl	8015f48 <xTaskGetTickCount>
 80149be:	4603      	mov	r3, r0
  }
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	bd80      	pop	{r7, pc}

080149c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80149c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149c6:	b089      	sub	sp, #36	@ 0x24
 80149c8:	af04      	add	r7, sp, #16
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	695b      	ldr	r3, [r3, #20]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d020      	beq.n	8014a18 <osThreadCreate+0x54>
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	699b      	ldr	r3, [r3, #24]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d01c      	beq.n	8014a18 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	685c      	ldr	r4, [r3, #4]
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	691e      	ldr	r6, [r3, #16]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80149f0:	4618      	mov	r0, r3
 80149f2:	f7ff ff9a 	bl	801492a <makeFreeRtosPriority>
 80149f6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	695b      	ldr	r3, [r3, #20]
 80149fc:	687a      	ldr	r2, [r7, #4]
 80149fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a00:	9202      	str	r2, [sp, #8]
 8014a02:	9301      	str	r3, [sp, #4]
 8014a04:	9100      	str	r1, [sp, #0]
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	4632      	mov	r2, r6
 8014a0a:	4629      	mov	r1, r5
 8014a0c:	4620      	mov	r0, r4
 8014a0e:	f000 ffa5 	bl	801595c <xTaskCreateStatic>
 8014a12:	4603      	mov	r3, r0
 8014a14:	60fb      	str	r3, [r7, #12]
 8014a16:	e01c      	b.n	8014a52 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	685c      	ldr	r4, [r3, #4]
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a24:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014a2c:	4618      	mov	r0, r3
 8014a2e:	f7ff ff7c 	bl	801492a <makeFreeRtosPriority>
 8014a32:	4602      	mov	r2, r0
 8014a34:	f107 030c 	add.w	r3, r7, #12
 8014a38:	9301      	str	r3, [sp, #4]
 8014a3a:	9200      	str	r2, [sp, #0]
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	4632      	mov	r2, r6
 8014a40:	4629      	mov	r1, r5
 8014a42:	4620      	mov	r0, r4
 8014a44:	f000 fff0 	bl	8015a28 <xTaskCreate>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	2b01      	cmp	r3, #1
 8014a4c:	d001      	beq.n	8014a52 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	e000      	b.n	8014a54 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8014a52:	68fb      	ldr	r3, [r7, #12]
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	3714      	adds	r7, #20
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014a5c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8014a5c:	b580      	push	{r7, lr}
 8014a5e:	b084      	sub	sp, #16
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d001      	beq.n	8014a72 <osDelay+0x16>
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	e000      	b.n	8014a74 <osDelay+0x18>
 8014a72:	2301      	movs	r3, #1
 8014a74:	4618      	mov	r0, r3
 8014a76:	f001 f91b 	bl	8015cb0 <vTaskDelay>
  
  return osOK;
 8014a7a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014a7c:	4618      	mov	r0, r3
 8014a7e:	3710      	adds	r7, #16
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}

08014a84 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8014a84:	b590      	push	{r4, r7, lr}
 8014a86:	b085      	sub	sp, #20
 8014a88:	af02      	add	r7, sp, #8
 8014a8a:	6078      	str	r0, [r7, #4]
 8014a8c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	689b      	ldr	r3, [r3, #8]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d011      	beq.n	8014aba <osMessageCreate+0x36>
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d00d      	beq.n	8014aba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	6818      	ldr	r0, [r3, #0]
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	6859      	ldr	r1, [r3, #4]
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	689a      	ldr	r2, [r3, #8]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	68db      	ldr	r3, [r3, #12]
 8014aae:	2400      	movs	r4, #0
 8014ab0:	9400      	str	r4, [sp, #0]
 8014ab2:	f000 f9f9 	bl	8014ea8 <xQueueGenericCreateStatic>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	e008      	b.n	8014acc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	6818      	ldr	r0, [r3, #0]
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	f000 fa76 	bl	8014fb6 <xQueueGenericCreate>
 8014aca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8014acc:	4618      	mov	r0, r3
 8014ace:	370c      	adds	r7, #12
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd90      	pop	{r4, r7, pc}

08014ad4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b086      	sub	sp, #24
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	60f8      	str	r0, [r7, #12]
 8014adc:	60b9      	str	r1, [r7, #8]
 8014ade:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d101      	bne.n	8014af2 <osMessagePut+0x1e>
    ticks = 1;
 8014aee:	2301      	movs	r3, #1
 8014af0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8014af2:	f7ff ff32 	bl	801495a <inHandlerMode>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d018      	beq.n	8014b2e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8014afc:	f107 0210 	add.w	r2, r7, #16
 8014b00:	f107 0108 	add.w	r1, r7, #8
 8014b04:	2300      	movs	r3, #0
 8014b06:	68f8      	ldr	r0, [r7, #12]
 8014b08:	f000 fbc2 	bl	8015290 <xQueueGenericSendFromISR>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	2b01      	cmp	r3, #1
 8014b10:	d001      	beq.n	8014b16 <osMessagePut+0x42>
      return osErrorOS;
 8014b12:	23ff      	movs	r3, #255	@ 0xff
 8014b14:	e018      	b.n	8014b48 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d014      	beq.n	8014b46 <osMessagePut+0x72>
 8014b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8014b50 <osMessagePut+0x7c>)
 8014b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b22:	601a      	str	r2, [r3, #0]
 8014b24:	f3bf 8f4f 	dsb	sy
 8014b28:	f3bf 8f6f 	isb	sy
 8014b2c:	e00b      	b.n	8014b46 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8014b2e:	f107 0108 	add.w	r1, r7, #8
 8014b32:	2300      	movs	r3, #0
 8014b34:	697a      	ldr	r2, [r7, #20]
 8014b36:	68f8      	ldr	r0, [r7, #12]
 8014b38:	f000 faa0 	bl	801507c <xQueueGenericSend>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	2b01      	cmp	r3, #1
 8014b40:	d001      	beq.n	8014b46 <osMessagePut+0x72>
      return osErrorOS;
 8014b42:	23ff      	movs	r3, #255	@ 0xff
 8014b44:	e000      	b.n	8014b48 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8014b46:	2300      	movs	r3, #0
}
 8014b48:	4618      	mov	r0, r3
 8014b4a:	3718      	adds	r7, #24
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd80      	pop	{r7, pc}
 8014b50:	e000ed04 	.word	0xe000ed04

08014b54 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8014b54:	b590      	push	{r4, r7, lr}
 8014b56:	b08b      	sub	sp, #44	@ 0x2c
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	60f8      	str	r0, [r7, #12]
 8014b5c:	60b9      	str	r1, [r7, #8]
 8014b5e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8014b64:	2300      	movs	r3, #0
 8014b66:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d10a      	bne.n	8014b84 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8014b6e:	2380      	movs	r3, #128	@ 0x80
 8014b70:	617b      	str	r3, [r7, #20]
    return event;
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	461c      	mov	r4, r3
 8014b76:	f107 0314 	add.w	r3, r7, #20
 8014b7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014b82:	e054      	b.n	8014c2e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8014b84:	2300      	movs	r3, #0
 8014b86:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8014b88:	2300      	movs	r3, #0
 8014b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b92:	d103      	bne.n	8014b9c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8014b94:	f04f 33ff 	mov.w	r3, #4294967295
 8014b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b9a:	e009      	b.n	8014bb0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d006      	beq.n	8014bb0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8014ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d101      	bne.n	8014bb0 <osMessageGet+0x5c>
      ticks = 1;
 8014bac:	2301      	movs	r3, #1
 8014bae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8014bb0:	f7ff fed3 	bl	801495a <inHandlerMode>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d01c      	beq.n	8014bf4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8014bba:	f107 0220 	add.w	r2, r7, #32
 8014bbe:	f107 0314 	add.w	r3, r7, #20
 8014bc2:	3304      	adds	r3, #4
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	68b8      	ldr	r0, [r7, #8]
 8014bc8:	f000 fcee 	bl	80155a8 <xQueueReceiveFromISR>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d102      	bne.n	8014bd8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8014bd2:	2310      	movs	r3, #16
 8014bd4:	617b      	str	r3, [r7, #20]
 8014bd6:	e001      	b.n	8014bdc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8014bd8:	2300      	movs	r3, #0
 8014bda:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014bdc:	6a3b      	ldr	r3, [r7, #32]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d01d      	beq.n	8014c1e <osMessageGet+0xca>
 8014be2:	4b15      	ldr	r3, [pc, #84]	@ (8014c38 <osMessageGet+0xe4>)
 8014be4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014be8:	601a      	str	r2, [r3, #0]
 8014bea:	f3bf 8f4f 	dsb	sy
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	e014      	b.n	8014c1e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8014bf4:	f107 0314 	add.w	r3, r7, #20
 8014bf8:	3304      	adds	r3, #4
 8014bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	68b8      	ldr	r0, [r7, #8]
 8014c00:	f000 fbea 	bl	80153d8 <xQueueReceive>
 8014c04:	4603      	mov	r3, r0
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d102      	bne.n	8014c10 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8014c0a:	2310      	movs	r3, #16
 8014c0c:	617b      	str	r3, [r7, #20]
 8014c0e:	e006      	b.n	8014c1e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8014c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d101      	bne.n	8014c1a <osMessageGet+0xc6>
 8014c16:	2300      	movs	r3, #0
 8014c18:	e000      	b.n	8014c1c <osMessageGet+0xc8>
 8014c1a:	2340      	movs	r3, #64	@ 0x40
 8014c1c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	461c      	mov	r4, r3
 8014c22:	f107 0314 	add.w	r3, r7, #20
 8014c26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014c2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	372c      	adds	r7, #44	@ 0x2c
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd90      	pop	{r4, r7, pc}
 8014c36:	bf00      	nop
 8014c38:	e000ed04 	.word	0xe000ed04

08014c3c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b082      	sub	sp, #8
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8014c44:	f7ff fe89 	bl	801495a <inHandlerMode>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d004      	beq.n	8014c58 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f000 fd53 	bl	80156fa <uxQueueMessagesWaitingFromISR>
 8014c54:	4603      	mov	r3, r0
 8014c56:	e003      	b.n	8014c60 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f000 fd2d 	bl	80156b8 <uxQueueMessagesWaiting>
 8014c5e:	4603      	mov	r3, r0
  }
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3708      	adds	r7, #8
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}

08014c68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b083      	sub	sp, #12
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f103 0208 	add.w	r2, r3, #8
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8014c80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f103 0208 	add.w	r2, r3, #8
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f103 0208 	add.w	r2, r3, #8
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014c9c:	bf00      	nop
 8014c9e:	370c      	adds	r7, #12
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca6:	4770      	bx	lr

08014ca8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b083      	sub	sp, #12
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014cb6:	bf00      	nop
 8014cb8:	370c      	adds	r7, #12
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc0:	4770      	bx	lr

08014cc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014cc2:	b480      	push	{r7}
 8014cc4:	b085      	sub	sp, #20
 8014cc6:	af00      	add	r7, sp, #0
 8014cc8:	6078      	str	r0, [r7, #4]
 8014cca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	68fa      	ldr	r2, [r7, #12]
 8014cd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	689a      	ldr	r2, [r3, #8]
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	689b      	ldr	r3, [r3, #8]
 8014ce4:	683a      	ldr	r2, [r7, #0]
 8014ce6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	683a      	ldr	r2, [r7, #0]
 8014cec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	687a      	ldr	r2, [r7, #4]
 8014cf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	1c5a      	adds	r2, r3, #1
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	601a      	str	r2, [r3, #0]
}
 8014cfe:	bf00      	nop
 8014d00:	3714      	adds	r7, #20
 8014d02:	46bd      	mov	sp, r7
 8014d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d08:	4770      	bx	lr

08014d0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014d0a:	b480      	push	{r7}
 8014d0c:	b085      	sub	sp, #20
 8014d0e:	af00      	add	r7, sp, #0
 8014d10:	6078      	str	r0, [r7, #4]
 8014d12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d20:	d103      	bne.n	8014d2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	691b      	ldr	r3, [r3, #16]
 8014d26:	60fb      	str	r3, [r7, #12]
 8014d28:	e00c      	b.n	8014d44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	3308      	adds	r3, #8
 8014d2e:	60fb      	str	r3, [r7, #12]
 8014d30:	e002      	b.n	8014d38 <vListInsert+0x2e>
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	685b      	ldr	r3, [r3, #4]
 8014d36:	60fb      	str	r3, [r7, #12]
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	685b      	ldr	r3, [r3, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	68ba      	ldr	r2, [r7, #8]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d2f6      	bcs.n	8014d32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	685a      	ldr	r2, [r3, #4]
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	683a      	ldr	r2, [r7, #0]
 8014d52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014d54:	683b      	ldr	r3, [r7, #0]
 8014d56:	68fa      	ldr	r2, [r7, #12]
 8014d58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	683a      	ldr	r2, [r7, #0]
 8014d5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014d60:	683b      	ldr	r3, [r7, #0]
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	1c5a      	adds	r2, r3, #1
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	601a      	str	r2, [r3, #0]
}
 8014d70:	bf00      	nop
 8014d72:	3714      	adds	r7, #20
 8014d74:	46bd      	mov	sp, r7
 8014d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7a:	4770      	bx	lr

08014d7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b085      	sub	sp, #20
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	691b      	ldr	r3, [r3, #16]
 8014d88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	685b      	ldr	r3, [r3, #4]
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	6892      	ldr	r2, [r2, #8]
 8014d92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	689b      	ldr	r3, [r3, #8]
 8014d98:	687a      	ldr	r2, [r7, #4]
 8014d9a:	6852      	ldr	r2, [r2, #4]
 8014d9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	685b      	ldr	r3, [r3, #4]
 8014da2:	687a      	ldr	r2, [r7, #4]
 8014da4:	429a      	cmp	r2, r3
 8014da6:	d103      	bne.n	8014db0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	689a      	ldr	r2, [r3, #8]
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2200      	movs	r2, #0
 8014db4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	1e5a      	subs	r2, r3, #1
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	681b      	ldr	r3, [r3, #0]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3714      	adds	r7, #20
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr

08014dd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b084      	sub	sp, #16
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d10d      	bne.n	8014e00 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8014de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014de8:	b672      	cpsid	i
 8014dea:	f383 8811 	msr	BASEPRI, r3
 8014dee:	f3bf 8f6f 	isb	sy
 8014df2:	f3bf 8f4f 	dsb	sy
 8014df6:	b662      	cpsie	i
 8014df8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014dfa:	bf00      	nop
 8014dfc:	bf00      	nop
 8014dfe:	e7fd      	b.n	8014dfc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8014e00:	f001 fe14 	bl	8016a2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	681a      	ldr	r2, [r3, #0]
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e0c:	68f9      	ldr	r1, [r7, #12]
 8014e0e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014e10:	fb01 f303 	mul.w	r3, r1, r3
 8014e14:	441a      	add	r2, r3
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	681a      	ldr	r2, [r3, #0]
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e30:	3b01      	subs	r3, #1
 8014e32:	68f9      	ldr	r1, [r7, #12]
 8014e34:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014e36:	fb01 f303 	mul.w	r3, r1, r3
 8014e3a:	441a      	add	r2, r3
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	22ff      	movs	r2, #255	@ 0xff
 8014e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	22ff      	movs	r2, #255	@ 0xff
 8014e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d114      	bne.n	8014e80 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	691b      	ldr	r3, [r3, #16]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d01a      	beq.n	8014e94 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	3310      	adds	r3, #16
 8014e62:	4618      	mov	r0, r3
 8014e64:	f001 f9fa 	bl	801625c <xTaskRemoveFromEventList>
 8014e68:	4603      	mov	r3, r0
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d012      	beq.n	8014e94 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8014ea4 <xQueueGenericReset+0xd4>)
 8014e70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e74:	601a      	str	r2, [r3, #0]
 8014e76:	f3bf 8f4f 	dsb	sy
 8014e7a:	f3bf 8f6f 	isb	sy
 8014e7e:	e009      	b.n	8014e94 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	3310      	adds	r3, #16
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7ff feef 	bl	8014c68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	3324      	adds	r3, #36	@ 0x24
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f7ff feea 	bl	8014c68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014e94:	f001 fe00 	bl	8016a98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014e98:	2301      	movs	r3, #1
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3710      	adds	r7, #16
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	e000ed04 	.word	0xe000ed04

08014ea8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b08e      	sub	sp, #56	@ 0x38
 8014eac:	af02      	add	r7, sp, #8
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	607a      	str	r2, [r7, #4]
 8014eb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d10d      	bne.n	8014ed8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8014ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ec0:	b672      	cpsid	i
 8014ec2:	f383 8811 	msr	BASEPRI, r3
 8014ec6:	f3bf 8f6f 	isb	sy
 8014eca:	f3bf 8f4f 	dsb	sy
 8014ece:	b662      	cpsie	i
 8014ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014ed2:	bf00      	nop
 8014ed4:	bf00      	nop
 8014ed6:	e7fd      	b.n	8014ed4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d10d      	bne.n	8014efa <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8014ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ee2:	b672      	cpsid	i
 8014ee4:	f383 8811 	msr	BASEPRI, r3
 8014ee8:	f3bf 8f6f 	isb	sy
 8014eec:	f3bf 8f4f 	dsb	sy
 8014ef0:	b662      	cpsie	i
 8014ef2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014ef4:	bf00      	nop
 8014ef6:	bf00      	nop
 8014ef8:	e7fd      	b.n	8014ef6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d002      	beq.n	8014f06 <xQueueGenericCreateStatic+0x5e>
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d001      	beq.n	8014f0a <xQueueGenericCreateStatic+0x62>
 8014f06:	2301      	movs	r3, #1
 8014f08:	e000      	b.n	8014f0c <xQueueGenericCreateStatic+0x64>
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d10d      	bne.n	8014f2c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8014f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f14:	b672      	cpsid	i
 8014f16:	f383 8811 	msr	BASEPRI, r3
 8014f1a:	f3bf 8f6f 	isb	sy
 8014f1e:	f3bf 8f4f 	dsb	sy
 8014f22:	b662      	cpsie	i
 8014f24:	623b      	str	r3, [r7, #32]
}
 8014f26:	bf00      	nop
 8014f28:	bf00      	nop
 8014f2a:	e7fd      	b.n	8014f28 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d102      	bne.n	8014f38 <xQueueGenericCreateStatic+0x90>
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d101      	bne.n	8014f3c <xQueueGenericCreateStatic+0x94>
 8014f38:	2301      	movs	r3, #1
 8014f3a:	e000      	b.n	8014f3e <xQueueGenericCreateStatic+0x96>
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d10d      	bne.n	8014f5e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8014f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f46:	b672      	cpsid	i
 8014f48:	f383 8811 	msr	BASEPRI, r3
 8014f4c:	f3bf 8f6f 	isb	sy
 8014f50:	f3bf 8f4f 	dsb	sy
 8014f54:	b662      	cpsie	i
 8014f56:	61fb      	str	r3, [r7, #28]
}
 8014f58:	bf00      	nop
 8014f5a:	bf00      	nop
 8014f5c:	e7fd      	b.n	8014f5a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014f5e:	2348      	movs	r3, #72	@ 0x48
 8014f60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	2b48      	cmp	r3, #72	@ 0x48
 8014f66:	d00d      	beq.n	8014f84 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8014f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f6c:	b672      	cpsid	i
 8014f6e:	f383 8811 	msr	BASEPRI, r3
 8014f72:	f3bf 8f6f 	isb	sy
 8014f76:	f3bf 8f4f 	dsb	sy
 8014f7a:	b662      	cpsie	i
 8014f7c:	61bb      	str	r3, [r7, #24]
}
 8014f7e:	bf00      	nop
 8014f80:	bf00      	nop
 8014f82:	e7fd      	b.n	8014f80 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014f84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8014f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d00d      	beq.n	8014fac <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f92:	2201      	movs	r2, #1
 8014f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014f98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f9e:	9300      	str	r3, [sp, #0]
 8014fa0:	4613      	mov	r3, r2
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	68b9      	ldr	r1, [r7, #8]
 8014fa6:	68f8      	ldr	r0, [r7, #12]
 8014fa8:	f000 f848 	bl	801503c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3730      	adds	r7, #48	@ 0x30
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}

08014fb6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014fb6:	b580      	push	{r7, lr}
 8014fb8:	b08a      	sub	sp, #40	@ 0x28
 8014fba:	af02      	add	r7, sp, #8
 8014fbc:	60f8      	str	r0, [r7, #12]
 8014fbe:	60b9      	str	r1, [r7, #8]
 8014fc0:	4613      	mov	r3, r2
 8014fc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d10d      	bne.n	8014fe6 <xQueueGenericCreate+0x30>
	__asm volatile
 8014fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fce:	b672      	cpsid	i
 8014fd0:	f383 8811 	msr	BASEPRI, r3
 8014fd4:	f3bf 8f6f 	isb	sy
 8014fd8:	f3bf 8f4f 	dsb	sy
 8014fdc:	b662      	cpsie	i
 8014fde:	613b      	str	r3, [r7, #16]
}
 8014fe0:	bf00      	nop
 8014fe2:	bf00      	nop
 8014fe4:	e7fd      	b.n	8014fe2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d102      	bne.n	8014ff2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8014fec:	2300      	movs	r3, #0
 8014fee:	61fb      	str	r3, [r7, #28]
 8014ff0:	e004      	b.n	8014ffc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	68ba      	ldr	r2, [r7, #8]
 8014ff6:	fb02 f303 	mul.w	r3, r2, r3
 8014ffa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014ffc:	69fb      	ldr	r3, [r7, #28]
 8014ffe:	3348      	adds	r3, #72	@ 0x48
 8015000:	4618      	mov	r0, r3
 8015002:	f001 fe41 	bl	8016c88 <pvPortMalloc>
 8015006:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015008:	69bb      	ldr	r3, [r7, #24]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d011      	beq.n	8015032 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801500e:	69bb      	ldr	r3, [r7, #24]
 8015010:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015012:	697b      	ldr	r3, [r7, #20]
 8015014:	3348      	adds	r3, #72	@ 0x48
 8015016:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	2200      	movs	r2, #0
 801501c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015020:	79fa      	ldrb	r2, [r7, #7]
 8015022:	69bb      	ldr	r3, [r7, #24]
 8015024:	9300      	str	r3, [sp, #0]
 8015026:	4613      	mov	r3, r2
 8015028:	697a      	ldr	r2, [r7, #20]
 801502a:	68b9      	ldr	r1, [r7, #8]
 801502c:	68f8      	ldr	r0, [r7, #12]
 801502e:	f000 f805 	bl	801503c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015032:	69bb      	ldr	r3, [r7, #24]
	}
 8015034:	4618      	mov	r0, r3
 8015036:	3720      	adds	r7, #32
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}

0801503c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b084      	sub	sp, #16
 8015040:	af00      	add	r7, sp, #0
 8015042:	60f8      	str	r0, [r7, #12]
 8015044:	60b9      	str	r1, [r7, #8]
 8015046:	607a      	str	r2, [r7, #4]
 8015048:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801504a:	68bb      	ldr	r3, [r7, #8]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d103      	bne.n	8015058 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015050:	69bb      	ldr	r3, [r7, #24]
 8015052:	69ba      	ldr	r2, [r7, #24]
 8015054:	601a      	str	r2, [r3, #0]
 8015056:	e002      	b.n	801505e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015058:	69bb      	ldr	r3, [r7, #24]
 801505a:	687a      	ldr	r2, [r7, #4]
 801505c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801505e:	69bb      	ldr	r3, [r7, #24]
 8015060:	68fa      	ldr	r2, [r7, #12]
 8015062:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015064:	69bb      	ldr	r3, [r7, #24]
 8015066:	68ba      	ldr	r2, [r7, #8]
 8015068:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801506a:	2101      	movs	r1, #1
 801506c:	69b8      	ldr	r0, [r7, #24]
 801506e:	f7ff feaf 	bl	8014dd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015072:	bf00      	nop
 8015074:	3710      	adds	r7, #16
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
	...

0801507c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801507c:	b580      	push	{r7, lr}
 801507e:	b08e      	sub	sp, #56	@ 0x38
 8015080:	af00      	add	r7, sp, #0
 8015082:	60f8      	str	r0, [r7, #12]
 8015084:	60b9      	str	r1, [r7, #8]
 8015086:	607a      	str	r2, [r7, #4]
 8015088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801508a:	2300      	movs	r3, #0
 801508c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015094:	2b00      	cmp	r3, #0
 8015096:	d10d      	bne.n	80150b4 <xQueueGenericSend+0x38>
	__asm volatile
 8015098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801509c:	b672      	cpsid	i
 801509e:	f383 8811 	msr	BASEPRI, r3
 80150a2:	f3bf 8f6f 	isb	sy
 80150a6:	f3bf 8f4f 	dsb	sy
 80150aa:	b662      	cpsie	i
 80150ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80150ae:	bf00      	nop
 80150b0:	bf00      	nop
 80150b2:	e7fd      	b.n	80150b0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80150b4:	68bb      	ldr	r3, [r7, #8]
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	d103      	bne.n	80150c2 <xQueueGenericSend+0x46>
 80150ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d101      	bne.n	80150c6 <xQueueGenericSend+0x4a>
 80150c2:	2301      	movs	r3, #1
 80150c4:	e000      	b.n	80150c8 <xQueueGenericSend+0x4c>
 80150c6:	2300      	movs	r3, #0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d10d      	bne.n	80150e8 <xQueueGenericSend+0x6c>
	__asm volatile
 80150cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d0:	b672      	cpsid	i
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	b662      	cpsie	i
 80150e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80150e2:	bf00      	nop
 80150e4:	bf00      	nop
 80150e6:	e7fd      	b.n	80150e4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80150e8:	683b      	ldr	r3, [r7, #0]
 80150ea:	2b02      	cmp	r3, #2
 80150ec:	d103      	bne.n	80150f6 <xQueueGenericSend+0x7a>
 80150ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80150f2:	2b01      	cmp	r3, #1
 80150f4:	d101      	bne.n	80150fa <xQueueGenericSend+0x7e>
 80150f6:	2301      	movs	r3, #1
 80150f8:	e000      	b.n	80150fc <xQueueGenericSend+0x80>
 80150fa:	2300      	movs	r3, #0
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d10d      	bne.n	801511c <xQueueGenericSend+0xa0>
	__asm volatile
 8015100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015104:	b672      	cpsid	i
 8015106:	f383 8811 	msr	BASEPRI, r3
 801510a:	f3bf 8f6f 	isb	sy
 801510e:	f3bf 8f4f 	dsb	sy
 8015112:	b662      	cpsie	i
 8015114:	623b      	str	r3, [r7, #32]
}
 8015116:	bf00      	nop
 8015118:	bf00      	nop
 801511a:	e7fd      	b.n	8015118 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801511c:	f001 fa68 	bl	80165f0 <xTaskGetSchedulerState>
 8015120:	4603      	mov	r3, r0
 8015122:	2b00      	cmp	r3, #0
 8015124:	d102      	bne.n	801512c <xQueueGenericSend+0xb0>
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	2b00      	cmp	r3, #0
 801512a:	d101      	bne.n	8015130 <xQueueGenericSend+0xb4>
 801512c:	2301      	movs	r3, #1
 801512e:	e000      	b.n	8015132 <xQueueGenericSend+0xb6>
 8015130:	2300      	movs	r3, #0
 8015132:	2b00      	cmp	r3, #0
 8015134:	d10d      	bne.n	8015152 <xQueueGenericSend+0xd6>
	__asm volatile
 8015136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801513a:	b672      	cpsid	i
 801513c:	f383 8811 	msr	BASEPRI, r3
 8015140:	f3bf 8f6f 	isb	sy
 8015144:	f3bf 8f4f 	dsb	sy
 8015148:	b662      	cpsie	i
 801514a:	61fb      	str	r3, [r7, #28]
}
 801514c:	bf00      	nop
 801514e:	bf00      	nop
 8015150:	e7fd      	b.n	801514e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015152:	f001 fc6b 	bl	8016a2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801515c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801515e:	429a      	cmp	r2, r3
 8015160:	d302      	bcc.n	8015168 <xQueueGenericSend+0xec>
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	2b02      	cmp	r3, #2
 8015166:	d129      	bne.n	80151bc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015168:	683a      	ldr	r2, [r7, #0]
 801516a:	68b9      	ldr	r1, [r7, #8]
 801516c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801516e:	f000 fae5 	bl	801573c <prvCopyDataToQueue>
 8015172:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015178:	2b00      	cmp	r3, #0
 801517a:	d010      	beq.n	801519e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801517e:	3324      	adds	r3, #36	@ 0x24
 8015180:	4618      	mov	r0, r3
 8015182:	f001 f86b 	bl	801625c <xTaskRemoveFromEventList>
 8015186:	4603      	mov	r3, r0
 8015188:	2b00      	cmp	r3, #0
 801518a:	d013      	beq.n	80151b4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801518c:	4b3f      	ldr	r3, [pc, #252]	@ (801528c <xQueueGenericSend+0x210>)
 801518e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015192:	601a      	str	r2, [r3, #0]
 8015194:	f3bf 8f4f 	dsb	sy
 8015198:	f3bf 8f6f 	isb	sy
 801519c:	e00a      	b.n	80151b4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801519e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d007      	beq.n	80151b4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80151a4:	4b39      	ldr	r3, [pc, #228]	@ (801528c <xQueueGenericSend+0x210>)
 80151a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151aa:	601a      	str	r2, [r3, #0]
 80151ac:	f3bf 8f4f 	dsb	sy
 80151b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80151b4:	f001 fc70 	bl	8016a98 <vPortExitCritical>
				return pdPASS;
 80151b8:	2301      	movs	r3, #1
 80151ba:	e063      	b.n	8015284 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d103      	bne.n	80151ca <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80151c2:	f001 fc69 	bl	8016a98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80151c6:	2300      	movs	r3, #0
 80151c8:	e05c      	b.n	8015284 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80151ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d106      	bne.n	80151de <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80151d0:	f107 0314 	add.w	r3, r7, #20
 80151d4:	4618      	mov	r0, r3
 80151d6:	f001 f8a7 	bl	8016328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80151da:	2301      	movs	r3, #1
 80151dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80151de:	f001 fc5b 	bl	8016a98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80151e2:	f000 fe03 	bl	8015dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80151e6:	f001 fc21 	bl	8016a2c <vPortEnterCritical>
 80151ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80151f0:	b25b      	sxtb	r3, r3
 80151f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151f6:	d103      	bne.n	8015200 <xQueueGenericSend+0x184>
 80151f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151fa:	2200      	movs	r2, #0
 80151fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015202:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015206:	b25b      	sxtb	r3, r3
 8015208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801520c:	d103      	bne.n	8015216 <xQueueGenericSend+0x19a>
 801520e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015210:	2200      	movs	r2, #0
 8015212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015216:	f001 fc3f 	bl	8016a98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801521a:	1d3a      	adds	r2, r7, #4
 801521c:	f107 0314 	add.w	r3, r7, #20
 8015220:	4611      	mov	r1, r2
 8015222:	4618      	mov	r0, r3
 8015224:	f001 f896 	bl	8016354 <xTaskCheckForTimeOut>
 8015228:	4603      	mov	r3, r0
 801522a:	2b00      	cmp	r3, #0
 801522c:	d124      	bne.n	8015278 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801522e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015230:	f000 fb7c 	bl	801592c <prvIsQueueFull>
 8015234:	4603      	mov	r3, r0
 8015236:	2b00      	cmp	r3, #0
 8015238:	d018      	beq.n	801526c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801523c:	3310      	adds	r3, #16
 801523e:	687a      	ldr	r2, [r7, #4]
 8015240:	4611      	mov	r1, r2
 8015242:	4618      	mov	r0, r3
 8015244:	f000 ffe2 	bl	801620c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801524a:	f000 fb07 	bl	801585c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801524e:	f000 fddb 	bl	8015e08 <xTaskResumeAll>
 8015252:	4603      	mov	r3, r0
 8015254:	2b00      	cmp	r3, #0
 8015256:	f47f af7c 	bne.w	8015152 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 801525a:	4b0c      	ldr	r3, [pc, #48]	@ (801528c <xQueueGenericSend+0x210>)
 801525c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	f3bf 8f4f 	dsb	sy
 8015266:	f3bf 8f6f 	isb	sy
 801526a:	e772      	b.n	8015152 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801526c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801526e:	f000 faf5 	bl	801585c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015272:	f000 fdc9 	bl	8015e08 <xTaskResumeAll>
 8015276:	e76c      	b.n	8015152 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015278:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801527a:	f000 faef 	bl	801585c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801527e:	f000 fdc3 	bl	8015e08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015282:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015284:	4618      	mov	r0, r3
 8015286:	3738      	adds	r7, #56	@ 0x38
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}
 801528c:	e000ed04 	.word	0xe000ed04

08015290 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b08e      	sub	sp, #56	@ 0x38
 8015294:	af00      	add	r7, sp, #0
 8015296:	60f8      	str	r0, [r7, #12]
 8015298:	60b9      	str	r1, [r7, #8]
 801529a:	607a      	str	r2, [r7, #4]
 801529c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80152a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d10d      	bne.n	80152c4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80152a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ac:	b672      	cpsid	i
 80152ae:	f383 8811 	msr	BASEPRI, r3
 80152b2:	f3bf 8f6f 	isb	sy
 80152b6:	f3bf 8f4f 	dsb	sy
 80152ba:	b662      	cpsie	i
 80152bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80152be:	bf00      	nop
 80152c0:	bf00      	nop
 80152c2:	e7fd      	b.n	80152c0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d103      	bne.n	80152d2 <xQueueGenericSendFromISR+0x42>
 80152ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80152cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d101      	bne.n	80152d6 <xQueueGenericSendFromISR+0x46>
 80152d2:	2301      	movs	r3, #1
 80152d4:	e000      	b.n	80152d8 <xQueueGenericSendFromISR+0x48>
 80152d6:	2300      	movs	r3, #0
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d10d      	bne.n	80152f8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80152dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152e0:	b672      	cpsid	i
 80152e2:	f383 8811 	msr	BASEPRI, r3
 80152e6:	f3bf 8f6f 	isb	sy
 80152ea:	f3bf 8f4f 	dsb	sy
 80152ee:	b662      	cpsie	i
 80152f0:	623b      	str	r3, [r7, #32]
}
 80152f2:	bf00      	nop
 80152f4:	bf00      	nop
 80152f6:	e7fd      	b.n	80152f4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80152f8:	683b      	ldr	r3, [r7, #0]
 80152fa:	2b02      	cmp	r3, #2
 80152fc:	d103      	bne.n	8015306 <xQueueGenericSendFromISR+0x76>
 80152fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015302:	2b01      	cmp	r3, #1
 8015304:	d101      	bne.n	801530a <xQueueGenericSendFromISR+0x7a>
 8015306:	2301      	movs	r3, #1
 8015308:	e000      	b.n	801530c <xQueueGenericSendFromISR+0x7c>
 801530a:	2300      	movs	r3, #0
 801530c:	2b00      	cmp	r3, #0
 801530e:	d10d      	bne.n	801532c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8015310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015314:	b672      	cpsid	i
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	b662      	cpsie	i
 8015324:	61fb      	str	r3, [r7, #28]
}
 8015326:	bf00      	nop
 8015328:	bf00      	nop
 801532a:	e7fd      	b.n	8015328 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801532c:	f001 fc66 	bl	8016bfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015330:	f3ef 8211 	mrs	r2, BASEPRI
 8015334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015338:	b672      	cpsid	i
 801533a:	f383 8811 	msr	BASEPRI, r3
 801533e:	f3bf 8f6f 	isb	sy
 8015342:	f3bf 8f4f 	dsb	sy
 8015346:	b662      	cpsie	i
 8015348:	61ba      	str	r2, [r7, #24]
 801534a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801534c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801534e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015358:	429a      	cmp	r2, r3
 801535a:	d302      	bcc.n	8015362 <xQueueGenericSendFromISR+0xd2>
 801535c:	683b      	ldr	r3, [r7, #0]
 801535e:	2b02      	cmp	r3, #2
 8015360:	d12c      	bne.n	80153bc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015364:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015368:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801536c:	683a      	ldr	r2, [r7, #0]
 801536e:	68b9      	ldr	r1, [r7, #8]
 8015370:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015372:	f000 f9e3 	bl	801573c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015376:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801537a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801537e:	d112      	bne.n	80153a6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015384:	2b00      	cmp	r3, #0
 8015386:	d016      	beq.n	80153b6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801538a:	3324      	adds	r3, #36	@ 0x24
 801538c:	4618      	mov	r0, r3
 801538e:	f000 ff65 	bl	801625c <xTaskRemoveFromEventList>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d00e      	beq.n	80153b6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2b00      	cmp	r3, #0
 801539c:	d00b      	beq.n	80153b6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	2201      	movs	r2, #1
 80153a2:	601a      	str	r2, [r3, #0]
 80153a4:	e007      	b.n	80153b6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80153a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80153aa:	3301      	adds	r3, #1
 80153ac:	b2db      	uxtb	r3, r3
 80153ae:	b25a      	sxtb	r2, r3
 80153b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80153b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80153b6:	2301      	movs	r3, #1
 80153b8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80153ba:	e001      	b.n	80153c0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80153bc:	2300      	movs	r3, #0
 80153be:	637b      	str	r3, [r7, #52]	@ 0x34
 80153c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153c2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80153c4:	693b      	ldr	r3, [r7, #16]
 80153c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80153ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80153cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3738      	adds	r7, #56	@ 0x38
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
	...

080153d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b08c      	sub	sp, #48	@ 0x30
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	60b9      	str	r1, [r7, #8]
 80153e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80153e4:	2300      	movs	r3, #0
 80153e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80153ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d10d      	bne.n	801540e <xQueueReceive+0x36>
	__asm volatile
 80153f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153f6:	b672      	cpsid	i
 80153f8:	f383 8811 	msr	BASEPRI, r3
 80153fc:	f3bf 8f6f 	isb	sy
 8015400:	f3bf 8f4f 	dsb	sy
 8015404:	b662      	cpsie	i
 8015406:	623b      	str	r3, [r7, #32]
}
 8015408:	bf00      	nop
 801540a:	bf00      	nop
 801540c:	e7fd      	b.n	801540a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801540e:	68bb      	ldr	r3, [r7, #8]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d103      	bne.n	801541c <xQueueReceive+0x44>
 8015414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015418:	2b00      	cmp	r3, #0
 801541a:	d101      	bne.n	8015420 <xQueueReceive+0x48>
 801541c:	2301      	movs	r3, #1
 801541e:	e000      	b.n	8015422 <xQueueReceive+0x4a>
 8015420:	2300      	movs	r3, #0
 8015422:	2b00      	cmp	r3, #0
 8015424:	d10d      	bne.n	8015442 <xQueueReceive+0x6a>
	__asm volatile
 8015426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801542a:	b672      	cpsid	i
 801542c:	f383 8811 	msr	BASEPRI, r3
 8015430:	f3bf 8f6f 	isb	sy
 8015434:	f3bf 8f4f 	dsb	sy
 8015438:	b662      	cpsie	i
 801543a:	61fb      	str	r3, [r7, #28]
}
 801543c:	bf00      	nop
 801543e:	bf00      	nop
 8015440:	e7fd      	b.n	801543e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015442:	f001 f8d5 	bl	80165f0 <xTaskGetSchedulerState>
 8015446:	4603      	mov	r3, r0
 8015448:	2b00      	cmp	r3, #0
 801544a:	d102      	bne.n	8015452 <xQueueReceive+0x7a>
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d101      	bne.n	8015456 <xQueueReceive+0x7e>
 8015452:	2301      	movs	r3, #1
 8015454:	e000      	b.n	8015458 <xQueueReceive+0x80>
 8015456:	2300      	movs	r3, #0
 8015458:	2b00      	cmp	r3, #0
 801545a:	d10d      	bne.n	8015478 <xQueueReceive+0xa0>
	__asm volatile
 801545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015460:	b672      	cpsid	i
 8015462:	f383 8811 	msr	BASEPRI, r3
 8015466:	f3bf 8f6f 	isb	sy
 801546a:	f3bf 8f4f 	dsb	sy
 801546e:	b662      	cpsie	i
 8015470:	61bb      	str	r3, [r7, #24]
}
 8015472:	bf00      	nop
 8015474:	bf00      	nop
 8015476:	e7fd      	b.n	8015474 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015478:	f001 fad8 	bl	8016a2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015480:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015484:	2b00      	cmp	r3, #0
 8015486:	d01f      	beq.n	80154c8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015488:	68b9      	ldr	r1, [r7, #8]
 801548a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801548c:	f000 f9c0 	bl	8015810 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015492:	1e5a      	subs	r2, r3, #1
 8015494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015496:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801549a:	691b      	ldr	r3, [r3, #16]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d00f      	beq.n	80154c0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80154a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154a2:	3310      	adds	r3, #16
 80154a4:	4618      	mov	r0, r3
 80154a6:	f000 fed9 	bl	801625c <xTaskRemoveFromEventList>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d007      	beq.n	80154c0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80154b0:	4b3c      	ldr	r3, [pc, #240]	@ (80155a4 <xQueueReceive+0x1cc>)
 80154b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80154b6:	601a      	str	r2, [r3, #0]
 80154b8:	f3bf 8f4f 	dsb	sy
 80154bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80154c0:	f001 faea 	bl	8016a98 <vPortExitCritical>
				return pdPASS;
 80154c4:	2301      	movs	r3, #1
 80154c6:	e069      	b.n	801559c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d103      	bne.n	80154d6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80154ce:	f001 fae3 	bl	8016a98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80154d2:	2300      	movs	r3, #0
 80154d4:	e062      	b.n	801559c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80154d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d106      	bne.n	80154ea <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80154dc:	f107 0310 	add.w	r3, r7, #16
 80154e0:	4618      	mov	r0, r3
 80154e2:	f000 ff21 	bl	8016328 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80154e6:	2301      	movs	r3, #1
 80154e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80154ea:	f001 fad5 	bl	8016a98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80154ee:	f000 fc7d 	bl	8015dec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80154f2:	f001 fa9b 	bl	8016a2c <vPortEnterCritical>
 80154f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80154fc:	b25b      	sxtb	r3, r3
 80154fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015502:	d103      	bne.n	801550c <xQueueReceive+0x134>
 8015504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015506:	2200      	movs	r2, #0
 8015508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801550e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015512:	b25b      	sxtb	r3, r3
 8015514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015518:	d103      	bne.n	8015522 <xQueueReceive+0x14a>
 801551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801551c:	2200      	movs	r2, #0
 801551e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015522:	f001 fab9 	bl	8016a98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015526:	1d3a      	adds	r2, r7, #4
 8015528:	f107 0310 	add.w	r3, r7, #16
 801552c:	4611      	mov	r1, r2
 801552e:	4618      	mov	r0, r3
 8015530:	f000 ff10 	bl	8016354 <xTaskCheckForTimeOut>
 8015534:	4603      	mov	r3, r0
 8015536:	2b00      	cmp	r3, #0
 8015538:	d123      	bne.n	8015582 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801553a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801553c:	f000 f9e0 	bl	8015900 <prvIsQueueEmpty>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d017      	beq.n	8015576 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015548:	3324      	adds	r3, #36	@ 0x24
 801554a:	687a      	ldr	r2, [r7, #4]
 801554c:	4611      	mov	r1, r2
 801554e:	4618      	mov	r0, r3
 8015550:	f000 fe5c 	bl	801620c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015556:	f000 f981 	bl	801585c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801555a:	f000 fc55 	bl	8015e08 <xTaskResumeAll>
 801555e:	4603      	mov	r3, r0
 8015560:	2b00      	cmp	r3, #0
 8015562:	d189      	bne.n	8015478 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8015564:	4b0f      	ldr	r3, [pc, #60]	@ (80155a4 <xQueueReceive+0x1cc>)
 8015566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801556a:	601a      	str	r2, [r3, #0]
 801556c:	f3bf 8f4f 	dsb	sy
 8015570:	f3bf 8f6f 	isb	sy
 8015574:	e780      	b.n	8015478 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015578:	f000 f970 	bl	801585c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801557c:	f000 fc44 	bl	8015e08 <xTaskResumeAll>
 8015580:	e77a      	b.n	8015478 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015584:	f000 f96a 	bl	801585c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015588:	f000 fc3e 	bl	8015e08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801558c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801558e:	f000 f9b7 	bl	8015900 <prvIsQueueEmpty>
 8015592:	4603      	mov	r3, r0
 8015594:	2b00      	cmp	r3, #0
 8015596:	f43f af6f 	beq.w	8015478 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801559a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801559c:	4618      	mov	r0, r3
 801559e:	3730      	adds	r7, #48	@ 0x30
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	e000ed04 	.word	0xe000ed04

080155a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b08e      	sub	sp, #56	@ 0x38
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	60f8      	str	r0, [r7, #12]
 80155b0:	60b9      	str	r1, [r7, #8]
 80155b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80155b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d10d      	bne.n	80155da <xQueueReceiveFromISR+0x32>
	__asm volatile
 80155be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155c2:	b672      	cpsid	i
 80155c4:	f383 8811 	msr	BASEPRI, r3
 80155c8:	f3bf 8f6f 	isb	sy
 80155cc:	f3bf 8f4f 	dsb	sy
 80155d0:	b662      	cpsie	i
 80155d2:	623b      	str	r3, [r7, #32]
}
 80155d4:	bf00      	nop
 80155d6:	bf00      	nop
 80155d8:	e7fd      	b.n	80155d6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d103      	bne.n	80155e8 <xQueueReceiveFromISR+0x40>
 80155e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d101      	bne.n	80155ec <xQueueReceiveFromISR+0x44>
 80155e8:	2301      	movs	r3, #1
 80155ea:	e000      	b.n	80155ee <xQueueReceiveFromISR+0x46>
 80155ec:	2300      	movs	r3, #0
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d10d      	bne.n	801560e <xQueueReceiveFromISR+0x66>
	__asm volatile
 80155f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155f6:	b672      	cpsid	i
 80155f8:	f383 8811 	msr	BASEPRI, r3
 80155fc:	f3bf 8f6f 	isb	sy
 8015600:	f3bf 8f4f 	dsb	sy
 8015604:	b662      	cpsie	i
 8015606:	61fb      	str	r3, [r7, #28]
}
 8015608:	bf00      	nop
 801560a:	bf00      	nop
 801560c:	e7fd      	b.n	801560a <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801560e:	f001 faf5 	bl	8016bfc <vPortValidateInterruptPriority>
	__asm volatile
 8015612:	f3ef 8211 	mrs	r2, BASEPRI
 8015616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801561a:	b672      	cpsid	i
 801561c:	f383 8811 	msr	BASEPRI, r3
 8015620:	f3bf 8f6f 	isb	sy
 8015624:	f3bf 8f4f 	dsb	sy
 8015628:	b662      	cpsie	i
 801562a:	61ba      	str	r2, [r7, #24]
 801562c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801562e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015630:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015636:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801563a:	2b00      	cmp	r3, #0
 801563c:	d02f      	beq.n	801569e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015648:	68b9      	ldr	r1, [r7, #8]
 801564a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801564c:	f000 f8e0 	bl	8015810 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015652:	1e5a      	subs	r2, r3, #1
 8015654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015656:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015658:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015660:	d112      	bne.n	8015688 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015664:	691b      	ldr	r3, [r3, #16]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d016      	beq.n	8015698 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801566c:	3310      	adds	r3, #16
 801566e:	4618      	mov	r0, r3
 8015670:	f000 fdf4 	bl	801625c <xTaskRemoveFromEventList>
 8015674:	4603      	mov	r3, r0
 8015676:	2b00      	cmp	r3, #0
 8015678:	d00e      	beq.n	8015698 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d00b      	beq.n	8015698 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2201      	movs	r2, #1
 8015684:	601a      	str	r2, [r3, #0]
 8015686:	e007      	b.n	8015698 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801568c:	3301      	adds	r3, #1
 801568e:	b2db      	uxtb	r3, r3
 8015690:	b25a      	sxtb	r2, r3
 8015692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015698:	2301      	movs	r3, #1
 801569a:	637b      	str	r3, [r7, #52]	@ 0x34
 801569c:	e001      	b.n	80156a2 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801569e:	2300      	movs	r3, #0
 80156a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80156a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	f383 8811 	msr	BASEPRI, r3
}
 80156ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80156ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80156b0:	4618      	mov	r0, r3
 80156b2:	3738      	adds	r7, #56	@ 0x38
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd80      	pop	{r7, pc}

080156b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b084      	sub	sp, #16
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d10d      	bne.n	80156e2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 80156c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156ca:	b672      	cpsid	i
 80156cc:	f383 8811 	msr	BASEPRI, r3
 80156d0:	f3bf 8f6f 	isb	sy
 80156d4:	f3bf 8f4f 	dsb	sy
 80156d8:	b662      	cpsie	i
 80156da:	60bb      	str	r3, [r7, #8]
}
 80156dc:	bf00      	nop
 80156de:	bf00      	nop
 80156e0:	e7fd      	b.n	80156de <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80156e2:	f001 f9a3 	bl	8016a2c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156ea:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80156ec:	f001 f9d4 	bl	8016a98 <vPortExitCritical>

	return uxReturn;
 80156f0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80156f2:	4618      	mov	r0, r3
 80156f4:	3710      	adds	r7, #16
 80156f6:	46bd      	mov	sp, r7
 80156f8:	bd80      	pop	{r7, pc}

080156fa <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80156fa:	b480      	push	{r7}
 80156fc:	b087      	sub	sp, #28
 80156fe:	af00      	add	r7, sp, #0
 8015700:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d10d      	bne.n	8015728 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 801570c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015710:	b672      	cpsid	i
 8015712:	f383 8811 	msr	BASEPRI, r3
 8015716:	f3bf 8f6f 	isb	sy
 801571a:	f3bf 8f4f 	dsb	sy
 801571e:	b662      	cpsie	i
 8015720:	60fb      	str	r3, [r7, #12]
}
 8015722:	bf00      	nop
 8015724:	bf00      	nop
 8015726:	e7fd      	b.n	8015724 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8015728:	697b      	ldr	r3, [r7, #20]
 801572a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801572c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801572e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015730:	4618      	mov	r0, r3
 8015732:	371c      	adds	r7, #28
 8015734:	46bd      	mov	sp, r7
 8015736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573a:	4770      	bx	lr

0801573c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b086      	sub	sp, #24
 8015740:	af00      	add	r7, sp, #0
 8015742:	60f8      	str	r0, [r7, #12]
 8015744:	60b9      	str	r1, [r7, #8]
 8015746:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015748:	2300      	movs	r3, #0
 801574a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015750:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015756:	2b00      	cmp	r3, #0
 8015758:	d10d      	bne.n	8015776 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d14d      	bne.n	80157fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	689b      	ldr	r3, [r3, #8]
 8015766:	4618      	mov	r0, r3
 8015768:	f000 ff60 	bl	801662c <xTaskPriorityDisinherit>
 801576c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	2200      	movs	r2, #0
 8015772:	609a      	str	r2, [r3, #8]
 8015774:	e043      	b.n	80157fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d119      	bne.n	80157b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	6858      	ldr	r0, [r3, #4]
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015784:	461a      	mov	r2, r3
 8015786:	68b9      	ldr	r1, [r7, #8]
 8015788:	f002 f81b 	bl	80177c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	685a      	ldr	r2, [r3, #4]
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015794:	441a      	add	r2, r3
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	685a      	ldr	r2, [r3, #4]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	689b      	ldr	r3, [r3, #8]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	d32b      	bcc.n	80157fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	605a      	str	r2, [r3, #4]
 80157ae:	e026      	b.n	80157fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	68d8      	ldr	r0, [r3, #12]
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157b8:	461a      	mov	r2, r3
 80157ba:	68b9      	ldr	r1, [r7, #8]
 80157bc:	f002 f801 	bl	80177c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	68da      	ldr	r2, [r3, #12]
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157c8:	425b      	negs	r3, r3
 80157ca:	441a      	add	r2, r3
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	68da      	ldr	r2, [r3, #12]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d207      	bcs.n	80157ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	689a      	ldr	r2, [r3, #8]
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157e4:	425b      	negs	r3, r3
 80157e6:	441a      	add	r2, r3
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2b02      	cmp	r3, #2
 80157f0:	d105      	bne.n	80157fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80157f2:	693b      	ldr	r3, [r7, #16]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d002      	beq.n	80157fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80157f8:	693b      	ldr	r3, [r7, #16]
 80157fa:	3b01      	subs	r3, #1
 80157fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80157fe:	693b      	ldr	r3, [r7, #16]
 8015800:	1c5a      	adds	r2, r3, #1
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015806:	697b      	ldr	r3, [r7, #20]
}
 8015808:	4618      	mov	r0, r3
 801580a:	3718      	adds	r7, #24
 801580c:	46bd      	mov	sp, r7
 801580e:	bd80      	pop	{r7, pc}

08015810 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801581e:	2b00      	cmp	r3, #0
 8015820:	d018      	beq.n	8015854 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	68da      	ldr	r2, [r3, #12]
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801582a:	441a      	add	r2, r3
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	68da      	ldr	r2, [r3, #12]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	689b      	ldr	r3, [r3, #8]
 8015838:	429a      	cmp	r2, r3
 801583a:	d303      	bcc.n	8015844 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	681a      	ldr	r2, [r3, #0]
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	68d9      	ldr	r1, [r3, #12]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801584c:	461a      	mov	r2, r3
 801584e:	6838      	ldr	r0, [r7, #0]
 8015850:	f001 ffb7 	bl	80177c2 <memcpy>
	}
}
 8015854:	bf00      	nop
 8015856:	3708      	adds	r7, #8
 8015858:	46bd      	mov	sp, r7
 801585a:	bd80      	pop	{r7, pc}

0801585c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801585c:	b580      	push	{r7, lr}
 801585e:	b084      	sub	sp, #16
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015864:	f001 f8e2 	bl	8016a2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801586e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015870:	e011      	b.n	8015896 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015876:	2b00      	cmp	r3, #0
 8015878:	d012      	beq.n	80158a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	3324      	adds	r3, #36	@ 0x24
 801587e:	4618      	mov	r0, r3
 8015880:	f000 fcec 	bl	801625c <xTaskRemoveFromEventList>
 8015884:	4603      	mov	r3, r0
 8015886:	2b00      	cmp	r3, #0
 8015888:	d001      	beq.n	801588e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801588a:	f000 fdcb 	bl	8016424 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801588e:	7bfb      	ldrb	r3, [r7, #15]
 8015890:	3b01      	subs	r3, #1
 8015892:	b2db      	uxtb	r3, r3
 8015894:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801589a:	2b00      	cmp	r3, #0
 801589c:	dce9      	bgt.n	8015872 <prvUnlockQueue+0x16>
 801589e:	e000      	b.n	80158a2 <prvUnlockQueue+0x46>
					break;
 80158a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	22ff      	movs	r2, #255	@ 0xff
 80158a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80158aa:	f001 f8f5 	bl	8016a98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80158ae:	f001 f8bd 	bl	8016a2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80158b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80158ba:	e011      	b.n	80158e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	691b      	ldr	r3, [r3, #16]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d012      	beq.n	80158ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	3310      	adds	r3, #16
 80158c8:	4618      	mov	r0, r3
 80158ca:	f000 fcc7 	bl	801625c <xTaskRemoveFromEventList>
 80158ce:	4603      	mov	r3, r0
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d001      	beq.n	80158d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80158d4:	f000 fda6 	bl	8016424 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80158d8:	7bbb      	ldrb	r3, [r7, #14]
 80158da:	3b01      	subs	r3, #1
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80158e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	dce9      	bgt.n	80158bc <prvUnlockQueue+0x60>
 80158e8:	e000      	b.n	80158ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80158ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	22ff      	movs	r2, #255	@ 0xff
 80158f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80158f4:	f001 f8d0 	bl	8016a98 <vPortExitCritical>
}
 80158f8:	bf00      	nop
 80158fa:	3710      	adds	r7, #16
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b084      	sub	sp, #16
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015908:	f001 f890 	bl	8016a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015910:	2b00      	cmp	r3, #0
 8015912:	d102      	bne.n	801591a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015914:	2301      	movs	r3, #1
 8015916:	60fb      	str	r3, [r7, #12]
 8015918:	e001      	b.n	801591e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801591a:	2300      	movs	r3, #0
 801591c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801591e:	f001 f8bb 	bl	8016a98 <vPortExitCritical>

	return xReturn;
 8015922:	68fb      	ldr	r3, [r7, #12]
}
 8015924:	4618      	mov	r0, r3
 8015926:	3710      	adds	r7, #16
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}

0801592c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015934:	f001 f87a 	bl	8016a2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015940:	429a      	cmp	r2, r3
 8015942:	d102      	bne.n	801594a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015944:	2301      	movs	r3, #1
 8015946:	60fb      	str	r3, [r7, #12]
 8015948:	e001      	b.n	801594e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801594a:	2300      	movs	r3, #0
 801594c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801594e:	f001 f8a3 	bl	8016a98 <vPortExitCritical>

	return xReturn;
 8015952:	68fb      	ldr	r3, [r7, #12]
}
 8015954:	4618      	mov	r0, r3
 8015956:	3710      	adds	r7, #16
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}

0801595c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801595c:	b580      	push	{r7, lr}
 801595e:	b08e      	sub	sp, #56	@ 0x38
 8015960:	af04      	add	r7, sp, #16
 8015962:	60f8      	str	r0, [r7, #12]
 8015964:	60b9      	str	r1, [r7, #8]
 8015966:	607a      	str	r2, [r7, #4]
 8015968:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801596a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801596c:	2b00      	cmp	r3, #0
 801596e:	d10d      	bne.n	801598c <xTaskCreateStatic+0x30>
	__asm volatile
 8015970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015974:	b672      	cpsid	i
 8015976:	f383 8811 	msr	BASEPRI, r3
 801597a:	f3bf 8f6f 	isb	sy
 801597e:	f3bf 8f4f 	dsb	sy
 8015982:	b662      	cpsie	i
 8015984:	623b      	str	r3, [r7, #32]
}
 8015986:	bf00      	nop
 8015988:	bf00      	nop
 801598a:	e7fd      	b.n	8015988 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801598e:	2b00      	cmp	r3, #0
 8015990:	d10d      	bne.n	80159ae <xTaskCreateStatic+0x52>
	__asm volatile
 8015992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015996:	b672      	cpsid	i
 8015998:	f383 8811 	msr	BASEPRI, r3
 801599c:	f3bf 8f6f 	isb	sy
 80159a0:	f3bf 8f4f 	dsb	sy
 80159a4:	b662      	cpsie	i
 80159a6:	61fb      	str	r3, [r7, #28]
}
 80159a8:	bf00      	nop
 80159aa:	bf00      	nop
 80159ac:	e7fd      	b.n	80159aa <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80159ae:	2358      	movs	r3, #88	@ 0x58
 80159b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	2b58      	cmp	r3, #88	@ 0x58
 80159b6:	d00d      	beq.n	80159d4 <xTaskCreateStatic+0x78>
	__asm volatile
 80159b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80159bc:	b672      	cpsid	i
 80159be:	f383 8811 	msr	BASEPRI, r3
 80159c2:	f3bf 8f6f 	isb	sy
 80159c6:	f3bf 8f4f 	dsb	sy
 80159ca:	b662      	cpsie	i
 80159cc:	61bb      	str	r3, [r7, #24]
}
 80159ce:	bf00      	nop
 80159d0:	bf00      	nop
 80159d2:	e7fd      	b.n	80159d0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80159d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80159d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d01e      	beq.n	8015a1a <xTaskCreateStatic+0xbe>
 80159dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d01b      	beq.n	8015a1a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80159e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80159e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80159ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80159ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159ee:	2202      	movs	r2, #2
 80159f0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80159f4:	2300      	movs	r3, #0
 80159f6:	9303      	str	r3, [sp, #12]
 80159f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159fa:	9302      	str	r3, [sp, #8]
 80159fc:	f107 0314 	add.w	r3, r7, #20
 8015a00:	9301      	str	r3, [sp, #4]
 8015a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a04:	9300      	str	r3, [sp, #0]
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	687a      	ldr	r2, [r7, #4]
 8015a0a:	68b9      	ldr	r1, [r7, #8]
 8015a0c:	68f8      	ldr	r0, [r7, #12]
 8015a0e:	f000 f850 	bl	8015ab2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015a12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015a14:	f000 f8e2 	bl	8015bdc <prvAddNewTaskToReadyList>
 8015a18:	e001      	b.n	8015a1e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8015a1e:	697b      	ldr	r3, [r7, #20]
	}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3728      	adds	r7, #40	@ 0x28
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b08c      	sub	sp, #48	@ 0x30
 8015a2c:	af04      	add	r7, sp, #16
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	60b9      	str	r1, [r7, #8]
 8015a32:	603b      	str	r3, [r7, #0]
 8015a34:	4613      	mov	r3, r2
 8015a36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015a38:	88fb      	ldrh	r3, [r7, #6]
 8015a3a:	009b      	lsls	r3, r3, #2
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f001 f923 	bl	8016c88 <pvPortMalloc>
 8015a42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8015a44:	697b      	ldr	r3, [r7, #20]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d00e      	beq.n	8015a68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015a4a:	2058      	movs	r0, #88	@ 0x58
 8015a4c:	f001 f91c 	bl	8016c88 <pvPortMalloc>
 8015a50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8015a52:	69fb      	ldr	r3, [r7, #28]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d003      	beq.n	8015a60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015a58:	69fb      	ldr	r3, [r7, #28]
 8015a5a:	697a      	ldr	r2, [r7, #20]
 8015a5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8015a5e:	e005      	b.n	8015a6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015a60:	6978      	ldr	r0, [r7, #20]
 8015a62:	f001 f9e3 	bl	8016e2c <vPortFree>
 8015a66:	e001      	b.n	8015a6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015a6c:	69fb      	ldr	r3, [r7, #28]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d017      	beq.n	8015aa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015a72:	69fb      	ldr	r3, [r7, #28]
 8015a74:	2200      	movs	r2, #0
 8015a76:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015a7a:	88fa      	ldrh	r2, [r7, #6]
 8015a7c:	2300      	movs	r3, #0
 8015a7e:	9303      	str	r3, [sp, #12]
 8015a80:	69fb      	ldr	r3, [r7, #28]
 8015a82:	9302      	str	r3, [sp, #8]
 8015a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a86:	9301      	str	r3, [sp, #4]
 8015a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a8a:	9300      	str	r3, [sp, #0]
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	68b9      	ldr	r1, [r7, #8]
 8015a90:	68f8      	ldr	r0, [r7, #12]
 8015a92:	f000 f80e 	bl	8015ab2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015a96:	69f8      	ldr	r0, [r7, #28]
 8015a98:	f000 f8a0 	bl	8015bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	61bb      	str	r3, [r7, #24]
 8015aa0:	e002      	b.n	8015aa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015aa8:	69bb      	ldr	r3, [r7, #24]
	}
 8015aaa:	4618      	mov	r0, r3
 8015aac:	3720      	adds	r7, #32
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}

08015ab2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015ab2:	b580      	push	{r7, lr}
 8015ab4:	b088      	sub	sp, #32
 8015ab6:	af00      	add	r7, sp, #0
 8015ab8:	60f8      	str	r0, [r7, #12]
 8015aba:	60b9      	str	r1, [r7, #8]
 8015abc:	607a      	str	r2, [r7, #4]
 8015abe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ac2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	009b      	lsls	r3, r3, #2
 8015ac8:	461a      	mov	r2, r3
 8015aca:	21a5      	movs	r1, #165	@ 0xa5
 8015acc:	f001 fdc4 	bl	8017658 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015ad4:	6879      	ldr	r1, [r7, #4]
 8015ad6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8015ada:	440b      	add	r3, r1
 8015adc:	009b      	lsls	r3, r3, #2
 8015ade:	4413      	add	r3, r2
 8015ae0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015ae2:	69bb      	ldr	r3, [r7, #24]
 8015ae4:	f023 0307 	bic.w	r3, r3, #7
 8015ae8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015aea:	69bb      	ldr	r3, [r7, #24]
 8015aec:	f003 0307 	and.w	r3, r3, #7
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d00d      	beq.n	8015b10 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8015af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015af8:	b672      	cpsid	i
 8015afa:	f383 8811 	msr	BASEPRI, r3
 8015afe:	f3bf 8f6f 	isb	sy
 8015b02:	f3bf 8f4f 	dsb	sy
 8015b06:	b662      	cpsie	i
 8015b08:	617b      	str	r3, [r7, #20]
}
 8015b0a:	bf00      	nop
 8015b0c:	bf00      	nop
 8015b0e:	e7fd      	b.n	8015b0c <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d01f      	beq.n	8015b56 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015b16:	2300      	movs	r3, #0
 8015b18:	61fb      	str	r3, [r7, #28]
 8015b1a:	e012      	b.n	8015b42 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015b1c:	68ba      	ldr	r2, [r7, #8]
 8015b1e:	69fb      	ldr	r3, [r7, #28]
 8015b20:	4413      	add	r3, r2
 8015b22:	7819      	ldrb	r1, [r3, #0]
 8015b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b26:	69fb      	ldr	r3, [r7, #28]
 8015b28:	4413      	add	r3, r2
 8015b2a:	3334      	adds	r3, #52	@ 0x34
 8015b2c:	460a      	mov	r2, r1
 8015b2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015b30:	68ba      	ldr	r2, [r7, #8]
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	4413      	add	r3, r2
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d006      	beq.n	8015b4a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015b3c:	69fb      	ldr	r3, [r7, #28]
 8015b3e:	3301      	adds	r3, #1
 8015b40:	61fb      	str	r3, [r7, #28]
 8015b42:	69fb      	ldr	r3, [r7, #28]
 8015b44:	2b0f      	cmp	r3, #15
 8015b46:	d9e9      	bls.n	8015b1c <prvInitialiseNewTask+0x6a>
 8015b48:	e000      	b.n	8015b4c <prvInitialiseNewTask+0x9a>
			{
				break;
 8015b4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b4e:	2200      	movs	r2, #0
 8015b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015b54:	e003      	b.n	8015b5e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b58:	2200      	movs	r2, #0
 8015b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b60:	2b06      	cmp	r3, #6
 8015b62:	d901      	bls.n	8015b68 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015b64:	2306      	movs	r3, #6
 8015b66:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b72:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8015b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b76:	2200      	movs	r2, #0
 8015b78:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b7c:	3304      	adds	r3, #4
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7ff f892 	bl	8014ca8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b86:	3318      	adds	r3, #24
 8015b88:	4618      	mov	r0, r3
 8015b8a:	f7ff f88d 	bl	8014ca8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b96:	f1c3 0207 	rsb	r2, r3, #7
 8015b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015b9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015ba2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8015ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bac:	2200      	movs	r2, #0
 8015bae:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015bb8:	683a      	ldr	r2, [r7, #0]
 8015bba:	68f9      	ldr	r1, [r7, #12]
 8015bbc:	69b8      	ldr	r0, [r7, #24]
 8015bbe:	f000 fe27 	bl	8016810 <pxPortInitialiseStack>
 8015bc2:	4602      	mov	r2, r0
 8015bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015bc6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d002      	beq.n	8015bd4 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015bd2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015bd4:	bf00      	nop
 8015bd6:	3720      	adds	r7, #32
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b082      	sub	sp, #8
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015be4:	f000 ff22 	bl	8016a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015be8:	4b2a      	ldr	r3, [pc, #168]	@ (8015c94 <prvAddNewTaskToReadyList+0xb8>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	3301      	adds	r3, #1
 8015bee:	4a29      	ldr	r2, [pc, #164]	@ (8015c94 <prvAddNewTaskToReadyList+0xb8>)
 8015bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015bf2:	4b29      	ldr	r3, [pc, #164]	@ (8015c98 <prvAddNewTaskToReadyList+0xbc>)
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d109      	bne.n	8015c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015bfa:	4a27      	ldr	r2, [pc, #156]	@ (8015c98 <prvAddNewTaskToReadyList+0xbc>)
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015c00:	4b24      	ldr	r3, [pc, #144]	@ (8015c94 <prvAddNewTaskToReadyList+0xb8>)
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d110      	bne.n	8015c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015c08:	f000 fc32 	bl	8016470 <prvInitialiseTaskLists>
 8015c0c:	e00d      	b.n	8015c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015c0e:	4b23      	ldr	r3, [pc, #140]	@ (8015c9c <prvAddNewTaskToReadyList+0xc0>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d109      	bne.n	8015c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015c16:	4b20      	ldr	r3, [pc, #128]	@ (8015c98 <prvAddNewTaskToReadyList+0xbc>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c20:	429a      	cmp	r2, r3
 8015c22:	d802      	bhi.n	8015c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015c24:	4a1c      	ldr	r2, [pc, #112]	@ (8015c98 <prvAddNewTaskToReadyList+0xbc>)
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8015ca0 <prvAddNewTaskToReadyList+0xc4>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	3301      	adds	r3, #1
 8015c30:	4a1b      	ldr	r2, [pc, #108]	@ (8015ca0 <prvAddNewTaskToReadyList+0xc4>)
 8015c32:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c38:	2201      	movs	r2, #1
 8015c3a:	409a      	lsls	r2, r3
 8015c3c:	4b19      	ldr	r3, [pc, #100]	@ (8015ca4 <prvAddNewTaskToReadyList+0xc8>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	4313      	orrs	r3, r2
 8015c42:	4a18      	ldr	r2, [pc, #96]	@ (8015ca4 <prvAddNewTaskToReadyList+0xc8>)
 8015c44:	6013      	str	r3, [r2, #0]
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c4a:	4613      	mov	r3, r2
 8015c4c:	009b      	lsls	r3, r3, #2
 8015c4e:	4413      	add	r3, r2
 8015c50:	009b      	lsls	r3, r3, #2
 8015c52:	4a15      	ldr	r2, [pc, #84]	@ (8015ca8 <prvAddNewTaskToReadyList+0xcc>)
 8015c54:	441a      	add	r2, r3
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	3304      	adds	r3, #4
 8015c5a:	4619      	mov	r1, r3
 8015c5c:	4610      	mov	r0, r2
 8015c5e:	f7ff f830 	bl	8014cc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015c62:	f000 ff19 	bl	8016a98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015c66:	4b0d      	ldr	r3, [pc, #52]	@ (8015c9c <prvAddNewTaskToReadyList+0xc0>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d00e      	beq.n	8015c8c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8015c98 <prvAddNewTaskToReadyList+0xbc>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c78:	429a      	cmp	r2, r3
 8015c7a:	d207      	bcs.n	8015c8c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8015cac <prvAddNewTaskToReadyList+0xd0>)
 8015c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015c82:	601a      	str	r2, [r3, #0]
 8015c84:	f3bf 8f4f 	dsb	sy
 8015c88:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015c8c:	bf00      	nop
 8015c8e:	3708      	adds	r7, #8
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	20002bd8 	.word	0x20002bd8
 8015c98:	20002ad8 	.word	0x20002ad8
 8015c9c:	20002be4 	.word	0x20002be4
 8015ca0:	20002bf4 	.word	0x20002bf4
 8015ca4:	20002be0 	.word	0x20002be0
 8015ca8:	20002adc 	.word	0x20002adc
 8015cac:	e000ed04 	.word	0xe000ed04

08015cb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b084      	sub	sp, #16
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d01a      	beq.n	8015cf8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015cc2:	4b15      	ldr	r3, [pc, #84]	@ (8015d18 <vTaskDelay+0x68>)
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d00d      	beq.n	8015ce6 <vTaskDelay+0x36>
	__asm volatile
 8015cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cce:	b672      	cpsid	i
 8015cd0:	f383 8811 	msr	BASEPRI, r3
 8015cd4:	f3bf 8f6f 	isb	sy
 8015cd8:	f3bf 8f4f 	dsb	sy
 8015cdc:	b662      	cpsie	i
 8015cde:	60bb      	str	r3, [r7, #8]
}
 8015ce0:	bf00      	nop
 8015ce2:	bf00      	nop
 8015ce4:	e7fd      	b.n	8015ce2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8015ce6:	f000 f881 	bl	8015dec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015cea:	2100      	movs	r1, #0
 8015cec:	6878      	ldr	r0, [r7, #4]
 8015cee:	f000 fd29 	bl	8016744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015cf2:	f000 f889 	bl	8015e08 <xTaskResumeAll>
 8015cf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d107      	bne.n	8015d0e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8015cfe:	4b07      	ldr	r3, [pc, #28]	@ (8015d1c <vTaskDelay+0x6c>)
 8015d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015d04:	601a      	str	r2, [r3, #0]
 8015d06:	f3bf 8f4f 	dsb	sy
 8015d0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015d0e:	bf00      	nop
 8015d10:	3710      	adds	r7, #16
 8015d12:	46bd      	mov	sp, r7
 8015d14:	bd80      	pop	{r7, pc}
 8015d16:	bf00      	nop
 8015d18:	20002c00 	.word	0x20002c00
 8015d1c:	e000ed04 	.word	0xe000ed04

08015d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b08a      	sub	sp, #40	@ 0x28
 8015d24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015d26:	2300      	movs	r3, #0
 8015d28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015d2e:	463a      	mov	r2, r7
 8015d30:	1d39      	adds	r1, r7, #4
 8015d32:	f107 0308 	add.w	r3, r7, #8
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7ec f822 	bl	8001d80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015d3c:	6839      	ldr	r1, [r7, #0]
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	68ba      	ldr	r2, [r7, #8]
 8015d42:	9202      	str	r2, [sp, #8]
 8015d44:	9301      	str	r3, [sp, #4]
 8015d46:	2300      	movs	r3, #0
 8015d48:	9300      	str	r3, [sp, #0]
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	460a      	mov	r2, r1
 8015d4e:	4921      	ldr	r1, [pc, #132]	@ (8015dd4 <vTaskStartScheduler+0xb4>)
 8015d50:	4821      	ldr	r0, [pc, #132]	@ (8015dd8 <vTaskStartScheduler+0xb8>)
 8015d52:	f7ff fe03 	bl	801595c <xTaskCreateStatic>
 8015d56:	4603      	mov	r3, r0
 8015d58:	4a20      	ldr	r2, [pc, #128]	@ (8015ddc <vTaskStartScheduler+0xbc>)
 8015d5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8015ddc <vTaskStartScheduler+0xbc>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d002      	beq.n	8015d6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015d64:	2301      	movs	r3, #1
 8015d66:	617b      	str	r3, [r7, #20]
 8015d68:	e001      	b.n	8015d6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015d6e:	697b      	ldr	r3, [r7, #20]
 8015d70:	2b01      	cmp	r3, #1
 8015d72:	d118      	bne.n	8015da6 <vTaskStartScheduler+0x86>
	__asm volatile
 8015d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d78:	b672      	cpsid	i
 8015d7a:	f383 8811 	msr	BASEPRI, r3
 8015d7e:	f3bf 8f6f 	isb	sy
 8015d82:	f3bf 8f4f 	dsb	sy
 8015d86:	b662      	cpsie	i
 8015d88:	613b      	str	r3, [r7, #16]
}
 8015d8a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015d8c:	4b14      	ldr	r3, [pc, #80]	@ (8015de0 <vTaskStartScheduler+0xc0>)
 8015d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015d94:	4b13      	ldr	r3, [pc, #76]	@ (8015de4 <vTaskStartScheduler+0xc4>)
 8015d96:	2201      	movs	r2, #1
 8015d98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015d9a:	4b13      	ldr	r3, [pc, #76]	@ (8015de8 <vTaskStartScheduler+0xc8>)
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015da0:	f000 fdc6 	bl	8016930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015da4:	e011      	b.n	8015dca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015da6:	697b      	ldr	r3, [r7, #20]
 8015da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dac:	d10d      	bne.n	8015dca <vTaskStartScheduler+0xaa>
	__asm volatile
 8015dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015db2:	b672      	cpsid	i
 8015db4:	f383 8811 	msr	BASEPRI, r3
 8015db8:	f3bf 8f6f 	isb	sy
 8015dbc:	f3bf 8f4f 	dsb	sy
 8015dc0:	b662      	cpsie	i
 8015dc2:	60fb      	str	r3, [r7, #12]
}
 8015dc4:	bf00      	nop
 8015dc6:	bf00      	nop
 8015dc8:	e7fd      	b.n	8015dc6 <vTaskStartScheduler+0xa6>
}
 8015dca:	bf00      	nop
 8015dcc:	3718      	adds	r7, #24
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}
 8015dd2:	bf00      	nop
 8015dd4:	0801b914 	.word	0x0801b914
 8015dd8:	0801643d 	.word	0x0801643d
 8015ddc:	20002bfc 	.word	0x20002bfc
 8015de0:	20002bf8 	.word	0x20002bf8
 8015de4:	20002be4 	.word	0x20002be4
 8015de8:	20002bdc 	.word	0x20002bdc

08015dec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015dec:	b480      	push	{r7}
 8015dee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8015df0:	4b04      	ldr	r3, [pc, #16]	@ (8015e04 <vTaskSuspendAll+0x18>)
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	3301      	adds	r3, #1
 8015df6:	4a03      	ldr	r2, [pc, #12]	@ (8015e04 <vTaskSuspendAll+0x18>)
 8015df8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8015dfa:	bf00      	nop
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr
 8015e04:	20002c00 	.word	0x20002c00

08015e08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b084      	sub	sp, #16
 8015e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015e12:	2300      	movs	r3, #0
 8015e14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015e16:	4b43      	ldr	r3, [pc, #268]	@ (8015f24 <xTaskResumeAll+0x11c>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d10d      	bne.n	8015e3a <xTaskResumeAll+0x32>
	__asm volatile
 8015e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e22:	b672      	cpsid	i
 8015e24:	f383 8811 	msr	BASEPRI, r3
 8015e28:	f3bf 8f6f 	isb	sy
 8015e2c:	f3bf 8f4f 	dsb	sy
 8015e30:	b662      	cpsie	i
 8015e32:	603b      	str	r3, [r7, #0]
}
 8015e34:	bf00      	nop
 8015e36:	bf00      	nop
 8015e38:	e7fd      	b.n	8015e36 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015e3a:	f000 fdf7 	bl	8016a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015e3e:	4b39      	ldr	r3, [pc, #228]	@ (8015f24 <xTaskResumeAll+0x11c>)
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	3b01      	subs	r3, #1
 8015e44:	4a37      	ldr	r2, [pc, #220]	@ (8015f24 <xTaskResumeAll+0x11c>)
 8015e46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e48:	4b36      	ldr	r3, [pc, #216]	@ (8015f24 <xTaskResumeAll+0x11c>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d161      	bne.n	8015f14 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015e50:	4b35      	ldr	r3, [pc, #212]	@ (8015f28 <xTaskResumeAll+0x120>)
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d05d      	beq.n	8015f14 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015e58:	e02e      	b.n	8015eb8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e5a:	4b34      	ldr	r3, [pc, #208]	@ (8015f2c <xTaskResumeAll+0x124>)
 8015e5c:	68db      	ldr	r3, [r3, #12]
 8015e5e:	68db      	ldr	r3, [r3, #12]
 8015e60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	3318      	adds	r3, #24
 8015e66:	4618      	mov	r0, r3
 8015e68:	f7fe ff88 	bl	8014d7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	3304      	adds	r3, #4
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7fe ff83 	bl	8014d7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	409a      	lsls	r2, r3
 8015e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8015f30 <xTaskResumeAll+0x128>)
 8015e80:	681b      	ldr	r3, [r3, #0]
 8015e82:	4313      	orrs	r3, r2
 8015e84:	4a2a      	ldr	r2, [pc, #168]	@ (8015f30 <xTaskResumeAll+0x128>)
 8015e86:	6013      	str	r3, [r2, #0]
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015e8c:	4613      	mov	r3, r2
 8015e8e:	009b      	lsls	r3, r3, #2
 8015e90:	4413      	add	r3, r2
 8015e92:	009b      	lsls	r3, r3, #2
 8015e94:	4a27      	ldr	r2, [pc, #156]	@ (8015f34 <xTaskResumeAll+0x12c>)
 8015e96:	441a      	add	r2, r3
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	3304      	adds	r3, #4
 8015e9c:	4619      	mov	r1, r3
 8015e9e:	4610      	mov	r0, r2
 8015ea0:	f7fe ff0f 	bl	8014cc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ea8:	4b23      	ldr	r3, [pc, #140]	@ (8015f38 <xTaskResumeAll+0x130>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d302      	bcc.n	8015eb8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8015eb2:	4b22      	ldr	r3, [pc, #136]	@ (8015f3c <xTaskResumeAll+0x134>)
 8015eb4:	2201      	movs	r2, #1
 8015eb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8015f2c <xTaskResumeAll+0x124>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d1cc      	bne.n	8015e5a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d001      	beq.n	8015eca <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015ec6:	f000 fb73 	bl	80165b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8015eca:	4b1d      	ldr	r3, [pc, #116]	@ (8015f40 <xTaskResumeAll+0x138>)
 8015ecc:	681b      	ldr	r3, [r3, #0]
 8015ece:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d010      	beq.n	8015ef8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015ed6:	f000 f859 	bl	8015f8c <xTaskIncrementTick>
 8015eda:	4603      	mov	r3, r0
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d002      	beq.n	8015ee6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8015ee0:	4b16      	ldr	r3, [pc, #88]	@ (8015f3c <xTaskResumeAll+0x134>)
 8015ee2:	2201      	movs	r2, #1
 8015ee4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	3b01      	subs	r3, #1
 8015eea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d1f1      	bne.n	8015ed6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8015ef2:	4b13      	ldr	r3, [pc, #76]	@ (8015f40 <xTaskResumeAll+0x138>)
 8015ef4:	2200      	movs	r2, #0
 8015ef6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015ef8:	4b10      	ldr	r3, [pc, #64]	@ (8015f3c <xTaskResumeAll+0x134>)
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d009      	beq.n	8015f14 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015f00:	2301      	movs	r3, #1
 8015f02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015f04:	4b0f      	ldr	r3, [pc, #60]	@ (8015f44 <xTaskResumeAll+0x13c>)
 8015f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f0a:	601a      	str	r2, [r3, #0]
 8015f0c:	f3bf 8f4f 	dsb	sy
 8015f10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015f14:	f000 fdc0 	bl	8016a98 <vPortExitCritical>

	return xAlreadyYielded;
 8015f18:	68bb      	ldr	r3, [r7, #8]
}
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	3710      	adds	r7, #16
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}
 8015f22:	bf00      	nop
 8015f24:	20002c00 	.word	0x20002c00
 8015f28:	20002bd8 	.word	0x20002bd8
 8015f2c:	20002b98 	.word	0x20002b98
 8015f30:	20002be0 	.word	0x20002be0
 8015f34:	20002adc 	.word	0x20002adc
 8015f38:	20002ad8 	.word	0x20002ad8
 8015f3c:	20002bec 	.word	0x20002bec
 8015f40:	20002be8 	.word	0x20002be8
 8015f44:	e000ed04 	.word	0xe000ed04

08015f48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b083      	sub	sp, #12
 8015f4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015f4e:	4b05      	ldr	r3, [pc, #20]	@ (8015f64 <xTaskGetTickCount+0x1c>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015f54:	687b      	ldr	r3, [r7, #4]
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	370c      	adds	r7, #12
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f60:	4770      	bx	lr
 8015f62:	bf00      	nop
 8015f64:	20002bdc 	.word	0x20002bdc

08015f68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b082      	sub	sp, #8
 8015f6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015f6e:	f000 fe45 	bl	8016bfc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8015f72:	2300      	movs	r3, #0
 8015f74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8015f76:	4b04      	ldr	r3, [pc, #16]	@ (8015f88 <xTaskGetTickCountFromISR+0x20>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015f7c:	683b      	ldr	r3, [r7, #0]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3708      	adds	r7, #8
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd80      	pop	{r7, pc}
 8015f86:	bf00      	nop
 8015f88:	20002bdc 	.word	0x20002bdc

08015f8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b086      	sub	sp, #24
 8015f90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015f92:	2300      	movs	r3, #0
 8015f94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015f96:	4b50      	ldr	r3, [pc, #320]	@ (80160d8 <xTaskIncrementTick+0x14c>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	f040 808b 	bne.w	80160b6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80160dc <xTaskIncrementTick+0x150>)
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	3301      	adds	r3, #1
 8015fa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80160dc <xTaskIncrementTick+0x150>)
 8015faa:	693b      	ldr	r3, [r7, #16]
 8015fac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015fae:	693b      	ldr	r3, [r7, #16]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d123      	bne.n	8015ffc <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8015fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80160e0 <xTaskIncrementTick+0x154>)
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	681b      	ldr	r3, [r3, #0]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d00d      	beq.n	8015fda <xTaskIncrementTick+0x4e>
	__asm volatile
 8015fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fc2:	b672      	cpsid	i
 8015fc4:	f383 8811 	msr	BASEPRI, r3
 8015fc8:	f3bf 8f6f 	isb	sy
 8015fcc:	f3bf 8f4f 	dsb	sy
 8015fd0:	b662      	cpsie	i
 8015fd2:	603b      	str	r3, [r7, #0]
}
 8015fd4:	bf00      	nop
 8015fd6:	bf00      	nop
 8015fd8:	e7fd      	b.n	8015fd6 <xTaskIncrementTick+0x4a>
 8015fda:	4b41      	ldr	r3, [pc, #260]	@ (80160e0 <xTaskIncrementTick+0x154>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	60fb      	str	r3, [r7, #12]
 8015fe0:	4b40      	ldr	r3, [pc, #256]	@ (80160e4 <xTaskIncrementTick+0x158>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80160e0 <xTaskIncrementTick+0x154>)
 8015fe6:	6013      	str	r3, [r2, #0]
 8015fe8:	4a3e      	ldr	r2, [pc, #248]	@ (80160e4 <xTaskIncrementTick+0x158>)
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	6013      	str	r3, [r2, #0]
 8015fee:	4b3e      	ldr	r3, [pc, #248]	@ (80160e8 <xTaskIncrementTick+0x15c>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	4a3c      	ldr	r2, [pc, #240]	@ (80160e8 <xTaskIncrementTick+0x15c>)
 8015ff6:	6013      	str	r3, [r2, #0]
 8015ff8:	f000 fada 	bl	80165b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80160ec <xTaskIncrementTick+0x160>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	693a      	ldr	r2, [r7, #16]
 8016002:	429a      	cmp	r2, r3
 8016004:	d348      	bcc.n	8016098 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016006:	4b36      	ldr	r3, [pc, #216]	@ (80160e0 <xTaskIncrementTick+0x154>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d104      	bne.n	801601a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016010:	4b36      	ldr	r3, [pc, #216]	@ (80160ec <xTaskIncrementTick+0x160>)
 8016012:	f04f 32ff 	mov.w	r2, #4294967295
 8016016:	601a      	str	r2, [r3, #0]
					break;
 8016018:	e03e      	b.n	8016098 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801601a:	4b31      	ldr	r3, [pc, #196]	@ (80160e0 <xTaskIncrementTick+0x154>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	68db      	ldr	r3, [r3, #12]
 8016020:	68db      	ldr	r3, [r3, #12]
 8016022:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8016024:	68bb      	ldr	r3, [r7, #8]
 8016026:	685b      	ldr	r3, [r3, #4]
 8016028:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801602a:	693a      	ldr	r2, [r7, #16]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	429a      	cmp	r2, r3
 8016030:	d203      	bcs.n	801603a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8016032:	4a2e      	ldr	r2, [pc, #184]	@ (80160ec <xTaskIncrementTick+0x160>)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016038:	e02e      	b.n	8016098 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	3304      	adds	r3, #4
 801603e:	4618      	mov	r0, r3
 8016040:	f7fe fe9c 	bl	8014d7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016044:	68bb      	ldr	r3, [r7, #8]
 8016046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016048:	2b00      	cmp	r3, #0
 801604a:	d004      	beq.n	8016056 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801604c:	68bb      	ldr	r3, [r7, #8]
 801604e:	3318      	adds	r3, #24
 8016050:	4618      	mov	r0, r3
 8016052:	f7fe fe93 	bl	8014d7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016056:	68bb      	ldr	r3, [r7, #8]
 8016058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801605a:	2201      	movs	r2, #1
 801605c:	409a      	lsls	r2, r3
 801605e:	4b24      	ldr	r3, [pc, #144]	@ (80160f0 <xTaskIncrementTick+0x164>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	4313      	orrs	r3, r2
 8016064:	4a22      	ldr	r2, [pc, #136]	@ (80160f0 <xTaskIncrementTick+0x164>)
 8016066:	6013      	str	r3, [r2, #0]
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801606c:	4613      	mov	r3, r2
 801606e:	009b      	lsls	r3, r3, #2
 8016070:	4413      	add	r3, r2
 8016072:	009b      	lsls	r3, r3, #2
 8016074:	4a1f      	ldr	r2, [pc, #124]	@ (80160f4 <xTaskIncrementTick+0x168>)
 8016076:	441a      	add	r2, r3
 8016078:	68bb      	ldr	r3, [r7, #8]
 801607a:	3304      	adds	r3, #4
 801607c:	4619      	mov	r1, r3
 801607e:	4610      	mov	r0, r2
 8016080:	f7fe fe1f 	bl	8014cc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016088:	4b1b      	ldr	r3, [pc, #108]	@ (80160f8 <xTaskIncrementTick+0x16c>)
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801608e:	429a      	cmp	r2, r3
 8016090:	d3b9      	bcc.n	8016006 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8016092:	2301      	movs	r3, #1
 8016094:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016096:	e7b6      	b.n	8016006 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016098:	4b17      	ldr	r3, [pc, #92]	@ (80160f8 <xTaskIncrementTick+0x16c>)
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801609e:	4915      	ldr	r1, [pc, #84]	@ (80160f4 <xTaskIncrementTick+0x168>)
 80160a0:	4613      	mov	r3, r2
 80160a2:	009b      	lsls	r3, r3, #2
 80160a4:	4413      	add	r3, r2
 80160a6:	009b      	lsls	r3, r3, #2
 80160a8:	440b      	add	r3, r1
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d907      	bls.n	80160c0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80160b0:	2301      	movs	r3, #1
 80160b2:	617b      	str	r3, [r7, #20]
 80160b4:	e004      	b.n	80160c0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80160b6:	4b11      	ldr	r3, [pc, #68]	@ (80160fc <xTaskIncrementTick+0x170>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	3301      	adds	r3, #1
 80160bc:	4a0f      	ldr	r2, [pc, #60]	@ (80160fc <xTaskIncrementTick+0x170>)
 80160be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80160c0:	4b0f      	ldr	r3, [pc, #60]	@ (8016100 <xTaskIncrementTick+0x174>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d001      	beq.n	80160cc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80160c8:	2301      	movs	r3, #1
 80160ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80160cc:	697b      	ldr	r3, [r7, #20]
}
 80160ce:	4618      	mov	r0, r3
 80160d0:	3718      	adds	r7, #24
 80160d2:	46bd      	mov	sp, r7
 80160d4:	bd80      	pop	{r7, pc}
 80160d6:	bf00      	nop
 80160d8:	20002c00 	.word	0x20002c00
 80160dc:	20002bdc 	.word	0x20002bdc
 80160e0:	20002b90 	.word	0x20002b90
 80160e4:	20002b94 	.word	0x20002b94
 80160e8:	20002bf0 	.word	0x20002bf0
 80160ec:	20002bf8 	.word	0x20002bf8
 80160f0:	20002be0 	.word	0x20002be0
 80160f4:	20002adc 	.word	0x20002adc
 80160f8:	20002ad8 	.word	0x20002ad8
 80160fc:	20002be8 	.word	0x20002be8
 8016100:	20002bec 	.word	0x20002bec

08016104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b088      	sub	sp, #32
 8016108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801610a:	4b3b      	ldr	r3, [pc, #236]	@ (80161f8 <vTaskSwitchContext+0xf4>)
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d003      	beq.n	801611a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8016112:	4b3a      	ldr	r3, [pc, #232]	@ (80161fc <vTaskSwitchContext+0xf8>)
 8016114:	2201      	movs	r2, #1
 8016116:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016118:	e069      	b.n	80161ee <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 801611a:	4b38      	ldr	r3, [pc, #224]	@ (80161fc <vTaskSwitchContext+0xf8>)
 801611c:	2200      	movs	r2, #0
 801611e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016120:	4b37      	ldr	r3, [pc, #220]	@ (8016200 <vTaskSwitchContext+0xfc>)
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016126:	61fb      	str	r3, [r7, #28]
 8016128:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 801612c:	61bb      	str	r3, [r7, #24]
 801612e:	69fb      	ldr	r3, [r7, #28]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	69ba      	ldr	r2, [r7, #24]
 8016134:	429a      	cmp	r2, r3
 8016136:	d111      	bne.n	801615c <vTaskSwitchContext+0x58>
 8016138:	69fb      	ldr	r3, [r7, #28]
 801613a:	3304      	adds	r3, #4
 801613c:	681b      	ldr	r3, [r3, #0]
 801613e:	69ba      	ldr	r2, [r7, #24]
 8016140:	429a      	cmp	r2, r3
 8016142:	d10b      	bne.n	801615c <vTaskSwitchContext+0x58>
 8016144:	69fb      	ldr	r3, [r7, #28]
 8016146:	3308      	adds	r3, #8
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	69ba      	ldr	r2, [r7, #24]
 801614c:	429a      	cmp	r2, r3
 801614e:	d105      	bne.n	801615c <vTaskSwitchContext+0x58>
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	330c      	adds	r3, #12
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	69ba      	ldr	r2, [r7, #24]
 8016158:	429a      	cmp	r2, r3
 801615a:	d008      	beq.n	801616e <vTaskSwitchContext+0x6a>
 801615c:	4b28      	ldr	r3, [pc, #160]	@ (8016200 <vTaskSwitchContext+0xfc>)
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	4b27      	ldr	r3, [pc, #156]	@ (8016200 <vTaskSwitchContext+0xfc>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	3334      	adds	r3, #52	@ 0x34
 8016166:	4619      	mov	r1, r3
 8016168:	4610      	mov	r0, r2
 801616a:	f7eb fdf6 	bl	8001d5a <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801616e:	4b25      	ldr	r3, [pc, #148]	@ (8016204 <vTaskSwitchContext+0x100>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	fab3 f383 	clz	r3, r3
 801617a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801617c:	7afb      	ldrb	r3, [r7, #11]
 801617e:	f1c3 031f 	rsb	r3, r3, #31
 8016182:	617b      	str	r3, [r7, #20]
 8016184:	4920      	ldr	r1, [pc, #128]	@ (8016208 <vTaskSwitchContext+0x104>)
 8016186:	697a      	ldr	r2, [r7, #20]
 8016188:	4613      	mov	r3, r2
 801618a:	009b      	lsls	r3, r3, #2
 801618c:	4413      	add	r3, r2
 801618e:	009b      	lsls	r3, r3, #2
 8016190:	440b      	add	r3, r1
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d10d      	bne.n	80161b4 <vTaskSwitchContext+0xb0>
	__asm volatile
 8016198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801619c:	b672      	cpsid	i
 801619e:	f383 8811 	msr	BASEPRI, r3
 80161a2:	f3bf 8f6f 	isb	sy
 80161a6:	f3bf 8f4f 	dsb	sy
 80161aa:	b662      	cpsie	i
 80161ac:	607b      	str	r3, [r7, #4]
}
 80161ae:	bf00      	nop
 80161b0:	bf00      	nop
 80161b2:	e7fd      	b.n	80161b0 <vTaskSwitchContext+0xac>
 80161b4:	697a      	ldr	r2, [r7, #20]
 80161b6:	4613      	mov	r3, r2
 80161b8:	009b      	lsls	r3, r3, #2
 80161ba:	4413      	add	r3, r2
 80161bc:	009b      	lsls	r3, r3, #2
 80161be:	4a12      	ldr	r2, [pc, #72]	@ (8016208 <vTaskSwitchContext+0x104>)
 80161c0:	4413      	add	r3, r2
 80161c2:	613b      	str	r3, [r7, #16]
 80161c4:	693b      	ldr	r3, [r7, #16]
 80161c6:	685b      	ldr	r3, [r3, #4]
 80161c8:	685a      	ldr	r2, [r3, #4]
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	605a      	str	r2, [r3, #4]
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	685a      	ldr	r2, [r3, #4]
 80161d2:	693b      	ldr	r3, [r7, #16]
 80161d4:	3308      	adds	r3, #8
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d104      	bne.n	80161e4 <vTaskSwitchContext+0xe0>
 80161da:	693b      	ldr	r3, [r7, #16]
 80161dc:	685b      	ldr	r3, [r3, #4]
 80161de:	685a      	ldr	r2, [r3, #4]
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	605a      	str	r2, [r3, #4]
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	68db      	ldr	r3, [r3, #12]
 80161ea:	4a05      	ldr	r2, [pc, #20]	@ (8016200 <vTaskSwitchContext+0xfc>)
 80161ec:	6013      	str	r3, [r2, #0]
}
 80161ee:	bf00      	nop
 80161f0:	3720      	adds	r7, #32
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	20002c00 	.word	0x20002c00
 80161fc:	20002bec 	.word	0x20002bec
 8016200:	20002ad8 	.word	0x20002ad8
 8016204:	20002be0 	.word	0x20002be0
 8016208:	20002adc 	.word	0x20002adc

0801620c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801620c:	b580      	push	{r7, lr}
 801620e:	b084      	sub	sp, #16
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d10d      	bne.n	8016238 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 801621c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016220:	b672      	cpsid	i
 8016222:	f383 8811 	msr	BASEPRI, r3
 8016226:	f3bf 8f6f 	isb	sy
 801622a:	f3bf 8f4f 	dsb	sy
 801622e:	b662      	cpsie	i
 8016230:	60fb      	str	r3, [r7, #12]
}
 8016232:	bf00      	nop
 8016234:	bf00      	nop
 8016236:	e7fd      	b.n	8016234 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016238:	4b07      	ldr	r3, [pc, #28]	@ (8016258 <vTaskPlaceOnEventList+0x4c>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	3318      	adds	r3, #24
 801623e:	4619      	mov	r1, r3
 8016240:	6878      	ldr	r0, [r7, #4]
 8016242:	f7fe fd62 	bl	8014d0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016246:	2101      	movs	r1, #1
 8016248:	6838      	ldr	r0, [r7, #0]
 801624a:	f000 fa7b 	bl	8016744 <prvAddCurrentTaskToDelayedList>
}
 801624e:	bf00      	nop
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	20002ad8 	.word	0x20002ad8

0801625c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801625c:	b580      	push	{r7, lr}
 801625e:	b086      	sub	sp, #24
 8016260:	af00      	add	r7, sp, #0
 8016262:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	68db      	ldr	r3, [r3, #12]
 8016268:	68db      	ldr	r3, [r3, #12]
 801626a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801626c:	693b      	ldr	r3, [r7, #16]
 801626e:	2b00      	cmp	r3, #0
 8016270:	d10d      	bne.n	801628e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8016272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016276:	b672      	cpsid	i
 8016278:	f383 8811 	msr	BASEPRI, r3
 801627c:	f3bf 8f6f 	isb	sy
 8016280:	f3bf 8f4f 	dsb	sy
 8016284:	b662      	cpsie	i
 8016286:	60fb      	str	r3, [r7, #12]
}
 8016288:	bf00      	nop
 801628a:	bf00      	nop
 801628c:	e7fd      	b.n	801628a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801628e:	693b      	ldr	r3, [r7, #16]
 8016290:	3318      	adds	r3, #24
 8016292:	4618      	mov	r0, r3
 8016294:	f7fe fd72 	bl	8014d7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016298:	4b1d      	ldr	r3, [pc, #116]	@ (8016310 <xTaskRemoveFromEventList+0xb4>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d11c      	bne.n	80162da <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80162a0:	693b      	ldr	r3, [r7, #16]
 80162a2:	3304      	adds	r3, #4
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7fe fd69 	bl	8014d7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80162aa:	693b      	ldr	r3, [r7, #16]
 80162ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162ae:	2201      	movs	r2, #1
 80162b0:	409a      	lsls	r2, r3
 80162b2:	4b18      	ldr	r3, [pc, #96]	@ (8016314 <xTaskRemoveFromEventList+0xb8>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	4313      	orrs	r3, r2
 80162b8:	4a16      	ldr	r2, [pc, #88]	@ (8016314 <xTaskRemoveFromEventList+0xb8>)
 80162ba:	6013      	str	r3, [r2, #0]
 80162bc:	693b      	ldr	r3, [r7, #16]
 80162be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162c0:	4613      	mov	r3, r2
 80162c2:	009b      	lsls	r3, r3, #2
 80162c4:	4413      	add	r3, r2
 80162c6:	009b      	lsls	r3, r3, #2
 80162c8:	4a13      	ldr	r2, [pc, #76]	@ (8016318 <xTaskRemoveFromEventList+0xbc>)
 80162ca:	441a      	add	r2, r3
 80162cc:	693b      	ldr	r3, [r7, #16]
 80162ce:	3304      	adds	r3, #4
 80162d0:	4619      	mov	r1, r3
 80162d2:	4610      	mov	r0, r2
 80162d4:	f7fe fcf5 	bl	8014cc2 <vListInsertEnd>
 80162d8:	e005      	b.n	80162e6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80162da:	693b      	ldr	r3, [r7, #16]
 80162dc:	3318      	adds	r3, #24
 80162de:	4619      	mov	r1, r3
 80162e0:	480e      	ldr	r0, [pc, #56]	@ (801631c <xTaskRemoveFromEventList+0xc0>)
 80162e2:	f7fe fcee 	bl	8014cc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80162e6:	693b      	ldr	r3, [r7, #16]
 80162e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80162ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016320 <xTaskRemoveFromEventList+0xc4>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d905      	bls.n	8016300 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80162f4:	2301      	movs	r3, #1
 80162f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80162f8:	4b0a      	ldr	r3, [pc, #40]	@ (8016324 <xTaskRemoveFromEventList+0xc8>)
 80162fa:	2201      	movs	r2, #1
 80162fc:	601a      	str	r2, [r3, #0]
 80162fe:	e001      	b.n	8016304 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8016300:	2300      	movs	r3, #0
 8016302:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8016304:	697b      	ldr	r3, [r7, #20]
}
 8016306:	4618      	mov	r0, r3
 8016308:	3718      	adds	r7, #24
 801630a:	46bd      	mov	sp, r7
 801630c:	bd80      	pop	{r7, pc}
 801630e:	bf00      	nop
 8016310:	20002c00 	.word	0x20002c00
 8016314:	20002be0 	.word	0x20002be0
 8016318:	20002adc 	.word	0x20002adc
 801631c:	20002b98 	.word	0x20002b98
 8016320:	20002ad8 	.word	0x20002ad8
 8016324:	20002bec 	.word	0x20002bec

08016328 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016328:	b480      	push	{r7}
 801632a:	b083      	sub	sp, #12
 801632c:	af00      	add	r7, sp, #0
 801632e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016330:	4b06      	ldr	r3, [pc, #24]	@ (801634c <vTaskInternalSetTimeOutState+0x24>)
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016338:	4b05      	ldr	r3, [pc, #20]	@ (8016350 <vTaskInternalSetTimeOutState+0x28>)
 801633a:	681a      	ldr	r2, [r3, #0]
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	605a      	str	r2, [r3, #4]
}
 8016340:	bf00      	nop
 8016342:	370c      	adds	r7, #12
 8016344:	46bd      	mov	sp, r7
 8016346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634a:	4770      	bx	lr
 801634c:	20002bf0 	.word	0x20002bf0
 8016350:	20002bdc 	.word	0x20002bdc

08016354 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b088      	sub	sp, #32
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d10d      	bne.n	8016380 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8016364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016368:	b672      	cpsid	i
 801636a:	f383 8811 	msr	BASEPRI, r3
 801636e:	f3bf 8f6f 	isb	sy
 8016372:	f3bf 8f4f 	dsb	sy
 8016376:	b662      	cpsie	i
 8016378:	613b      	str	r3, [r7, #16]
}
 801637a:	bf00      	nop
 801637c:	bf00      	nop
 801637e:	e7fd      	b.n	801637c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8016380:	683b      	ldr	r3, [r7, #0]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d10d      	bne.n	80163a2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8016386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801638a:	b672      	cpsid	i
 801638c:	f383 8811 	msr	BASEPRI, r3
 8016390:	f3bf 8f6f 	isb	sy
 8016394:	f3bf 8f4f 	dsb	sy
 8016398:	b662      	cpsie	i
 801639a:	60fb      	str	r3, [r7, #12]
}
 801639c:	bf00      	nop
 801639e:	bf00      	nop
 80163a0:	e7fd      	b.n	801639e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80163a2:	f000 fb43 	bl	8016a2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80163a6:	4b1d      	ldr	r3, [pc, #116]	@ (801641c <xTaskCheckForTimeOut+0xc8>)
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	69ba      	ldr	r2, [r7, #24]
 80163b2:	1ad3      	subs	r3, r2, r3
 80163b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80163b6:	683b      	ldr	r3, [r7, #0]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163be:	d102      	bne.n	80163c6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80163c0:	2300      	movs	r3, #0
 80163c2:	61fb      	str	r3, [r7, #28]
 80163c4:	e023      	b.n	801640e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	681a      	ldr	r2, [r3, #0]
 80163ca:	4b15      	ldr	r3, [pc, #84]	@ (8016420 <xTaskCheckForTimeOut+0xcc>)
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d007      	beq.n	80163e2 <xTaskCheckForTimeOut+0x8e>
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	685b      	ldr	r3, [r3, #4]
 80163d6:	69ba      	ldr	r2, [r7, #24]
 80163d8:	429a      	cmp	r2, r3
 80163da:	d302      	bcc.n	80163e2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80163dc:	2301      	movs	r3, #1
 80163de:	61fb      	str	r3, [r7, #28]
 80163e0:	e015      	b.n	801640e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	697a      	ldr	r2, [r7, #20]
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d20b      	bcs.n	8016404 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	681a      	ldr	r2, [r3, #0]
 80163f0:	697b      	ldr	r3, [r7, #20]
 80163f2:	1ad2      	subs	r2, r2, r3
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f7ff ff95 	bl	8016328 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80163fe:	2300      	movs	r3, #0
 8016400:	61fb      	str	r3, [r7, #28]
 8016402:	e004      	b.n	801640e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	2200      	movs	r2, #0
 8016408:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801640a:	2301      	movs	r3, #1
 801640c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801640e:	f000 fb43 	bl	8016a98 <vPortExitCritical>

	return xReturn;
 8016412:	69fb      	ldr	r3, [r7, #28]
}
 8016414:	4618      	mov	r0, r3
 8016416:	3720      	adds	r7, #32
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}
 801641c:	20002bdc 	.word	0x20002bdc
 8016420:	20002bf0 	.word	0x20002bf0

08016424 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016424:	b480      	push	{r7}
 8016426:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016428:	4b03      	ldr	r3, [pc, #12]	@ (8016438 <vTaskMissedYield+0x14>)
 801642a:	2201      	movs	r2, #1
 801642c:	601a      	str	r2, [r3, #0]
}
 801642e:	bf00      	nop
 8016430:	46bd      	mov	sp, r7
 8016432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016436:	4770      	bx	lr
 8016438:	20002bec 	.word	0x20002bec

0801643c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016444:	f000 f854 	bl	80164f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016448:	4b07      	ldr	r3, [pc, #28]	@ (8016468 <prvIdleTask+0x2c>)
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b01      	cmp	r3, #1
 801644e:	d907      	bls.n	8016460 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016450:	4b06      	ldr	r3, [pc, #24]	@ (801646c <prvIdleTask+0x30>)
 8016452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016456:	601a      	str	r2, [r3, #0]
 8016458:	f3bf 8f4f 	dsb	sy
 801645c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016460:	f7eb fc74 	bl	8001d4c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016464:	e7ee      	b.n	8016444 <prvIdleTask+0x8>
 8016466:	bf00      	nop
 8016468:	20002adc 	.word	0x20002adc
 801646c:	e000ed04 	.word	0xe000ed04

08016470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016476:	2300      	movs	r3, #0
 8016478:	607b      	str	r3, [r7, #4]
 801647a:	e00c      	b.n	8016496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801647c:	687a      	ldr	r2, [r7, #4]
 801647e:	4613      	mov	r3, r2
 8016480:	009b      	lsls	r3, r3, #2
 8016482:	4413      	add	r3, r2
 8016484:	009b      	lsls	r3, r3, #2
 8016486:	4a12      	ldr	r2, [pc, #72]	@ (80164d0 <prvInitialiseTaskLists+0x60>)
 8016488:	4413      	add	r3, r2
 801648a:	4618      	mov	r0, r3
 801648c:	f7fe fbec 	bl	8014c68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	3301      	adds	r3, #1
 8016494:	607b      	str	r3, [r7, #4]
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	2b06      	cmp	r3, #6
 801649a:	d9ef      	bls.n	801647c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801649c:	480d      	ldr	r0, [pc, #52]	@ (80164d4 <prvInitialiseTaskLists+0x64>)
 801649e:	f7fe fbe3 	bl	8014c68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80164a2:	480d      	ldr	r0, [pc, #52]	@ (80164d8 <prvInitialiseTaskLists+0x68>)
 80164a4:	f7fe fbe0 	bl	8014c68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80164a8:	480c      	ldr	r0, [pc, #48]	@ (80164dc <prvInitialiseTaskLists+0x6c>)
 80164aa:	f7fe fbdd 	bl	8014c68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80164ae:	480c      	ldr	r0, [pc, #48]	@ (80164e0 <prvInitialiseTaskLists+0x70>)
 80164b0:	f7fe fbda 	bl	8014c68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80164b4:	480b      	ldr	r0, [pc, #44]	@ (80164e4 <prvInitialiseTaskLists+0x74>)
 80164b6:	f7fe fbd7 	bl	8014c68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80164ba:	4b0b      	ldr	r3, [pc, #44]	@ (80164e8 <prvInitialiseTaskLists+0x78>)
 80164bc:	4a05      	ldr	r2, [pc, #20]	@ (80164d4 <prvInitialiseTaskLists+0x64>)
 80164be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80164c0:	4b0a      	ldr	r3, [pc, #40]	@ (80164ec <prvInitialiseTaskLists+0x7c>)
 80164c2:	4a05      	ldr	r2, [pc, #20]	@ (80164d8 <prvInitialiseTaskLists+0x68>)
 80164c4:	601a      	str	r2, [r3, #0]
}
 80164c6:	bf00      	nop
 80164c8:	3708      	adds	r7, #8
 80164ca:	46bd      	mov	sp, r7
 80164cc:	bd80      	pop	{r7, pc}
 80164ce:	bf00      	nop
 80164d0:	20002adc 	.word	0x20002adc
 80164d4:	20002b68 	.word	0x20002b68
 80164d8:	20002b7c 	.word	0x20002b7c
 80164dc:	20002b98 	.word	0x20002b98
 80164e0:	20002bac 	.word	0x20002bac
 80164e4:	20002bc4 	.word	0x20002bc4
 80164e8:	20002b90 	.word	0x20002b90
 80164ec:	20002b94 	.word	0x20002b94

080164f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b082      	sub	sp, #8
 80164f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80164f6:	e019      	b.n	801652c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80164f8:	f000 fa98 	bl	8016a2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164fc:	4b10      	ldr	r3, [pc, #64]	@ (8016540 <prvCheckTasksWaitingTermination+0x50>)
 80164fe:	68db      	ldr	r3, [r3, #12]
 8016500:	68db      	ldr	r3, [r3, #12]
 8016502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	3304      	adds	r3, #4
 8016508:	4618      	mov	r0, r3
 801650a:	f7fe fc37 	bl	8014d7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801650e:	4b0d      	ldr	r3, [pc, #52]	@ (8016544 <prvCheckTasksWaitingTermination+0x54>)
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	3b01      	subs	r3, #1
 8016514:	4a0b      	ldr	r2, [pc, #44]	@ (8016544 <prvCheckTasksWaitingTermination+0x54>)
 8016516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016518:	4b0b      	ldr	r3, [pc, #44]	@ (8016548 <prvCheckTasksWaitingTermination+0x58>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	3b01      	subs	r3, #1
 801651e:	4a0a      	ldr	r2, [pc, #40]	@ (8016548 <prvCheckTasksWaitingTermination+0x58>)
 8016520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016522:	f000 fab9 	bl	8016a98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016526:	6878      	ldr	r0, [r7, #4]
 8016528:	f000 f810 	bl	801654c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801652c:	4b06      	ldr	r3, [pc, #24]	@ (8016548 <prvCheckTasksWaitingTermination+0x58>)
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d1e1      	bne.n	80164f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016534:	bf00      	nop
 8016536:	bf00      	nop
 8016538:	3708      	adds	r7, #8
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}
 801653e:	bf00      	nop
 8016540:	20002bac 	.word	0x20002bac
 8016544:	20002bd8 	.word	0x20002bd8
 8016548:	20002bc0 	.word	0x20002bc0

0801654c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801654c:	b580      	push	{r7, lr}
 801654e:	b084      	sub	sp, #16
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 801655a:	2b00      	cmp	r3, #0
 801655c:	d108      	bne.n	8016570 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016562:	4618      	mov	r0, r3
 8016564:	f000 fc62 	bl	8016e2c <vPortFree>
				vPortFree( pxTCB );
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f000 fc5f 	bl	8016e2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801656e:	e01b      	b.n	80165a8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016576:	2b01      	cmp	r3, #1
 8016578:	d103      	bne.n	8016582 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801657a:	6878      	ldr	r0, [r7, #4]
 801657c:	f000 fc56 	bl	8016e2c <vPortFree>
	}
 8016580:	e012      	b.n	80165a8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016588:	2b02      	cmp	r3, #2
 801658a:	d00d      	beq.n	80165a8 <prvDeleteTCB+0x5c>
	__asm volatile
 801658c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016590:	b672      	cpsid	i
 8016592:	f383 8811 	msr	BASEPRI, r3
 8016596:	f3bf 8f6f 	isb	sy
 801659a:	f3bf 8f4f 	dsb	sy
 801659e:	b662      	cpsie	i
 80165a0:	60fb      	str	r3, [r7, #12]
}
 80165a2:	bf00      	nop
 80165a4:	bf00      	nop
 80165a6:	e7fd      	b.n	80165a4 <prvDeleteTCB+0x58>
	}
 80165a8:	bf00      	nop
 80165aa:	3710      	adds	r7, #16
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}

080165b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80165b0:	b480      	push	{r7}
 80165b2:	b083      	sub	sp, #12
 80165b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80165b6:	4b0c      	ldr	r3, [pc, #48]	@ (80165e8 <prvResetNextTaskUnblockTime+0x38>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d104      	bne.n	80165ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80165c0:	4b0a      	ldr	r3, [pc, #40]	@ (80165ec <prvResetNextTaskUnblockTime+0x3c>)
 80165c2:	f04f 32ff 	mov.w	r2, #4294967295
 80165c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80165c8:	e008      	b.n	80165dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165ca:	4b07      	ldr	r3, [pc, #28]	@ (80165e8 <prvResetNextTaskUnblockTime+0x38>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	68db      	ldr	r3, [r3, #12]
 80165d0:	68db      	ldr	r3, [r3, #12]
 80165d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	685b      	ldr	r3, [r3, #4]
 80165d8:	4a04      	ldr	r2, [pc, #16]	@ (80165ec <prvResetNextTaskUnblockTime+0x3c>)
 80165da:	6013      	str	r3, [r2, #0]
}
 80165dc:	bf00      	nop
 80165de:	370c      	adds	r7, #12
 80165e0:	46bd      	mov	sp, r7
 80165e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e6:	4770      	bx	lr
 80165e8:	20002b90 	.word	0x20002b90
 80165ec:	20002bf8 	.word	0x20002bf8

080165f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80165f0:	b480      	push	{r7}
 80165f2:	b083      	sub	sp, #12
 80165f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80165f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016624 <xTaskGetSchedulerState+0x34>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d102      	bne.n	8016604 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80165fe:	2301      	movs	r3, #1
 8016600:	607b      	str	r3, [r7, #4]
 8016602:	e008      	b.n	8016616 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016604:	4b08      	ldr	r3, [pc, #32]	@ (8016628 <xTaskGetSchedulerState+0x38>)
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d102      	bne.n	8016612 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801660c:	2302      	movs	r3, #2
 801660e:	607b      	str	r3, [r7, #4]
 8016610:	e001      	b.n	8016616 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016612:	2300      	movs	r3, #0
 8016614:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016616:	687b      	ldr	r3, [r7, #4]
	}
 8016618:	4618      	mov	r0, r3
 801661a:	370c      	adds	r7, #12
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr
 8016624:	20002be4 	.word	0x20002be4
 8016628:	20002c00 	.word	0x20002c00

0801662c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801662c:	b580      	push	{r7, lr}
 801662e:	b086      	sub	sp, #24
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016638:	2300      	movs	r3, #0
 801663a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d074      	beq.n	801672c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016642:	4b3d      	ldr	r3, [pc, #244]	@ (8016738 <xTaskPriorityDisinherit+0x10c>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	693a      	ldr	r2, [r7, #16]
 8016648:	429a      	cmp	r2, r3
 801664a:	d00d      	beq.n	8016668 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801664c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016650:	b672      	cpsid	i
 8016652:	f383 8811 	msr	BASEPRI, r3
 8016656:	f3bf 8f6f 	isb	sy
 801665a:	f3bf 8f4f 	dsb	sy
 801665e:	b662      	cpsie	i
 8016660:	60fb      	str	r3, [r7, #12]
}
 8016662:	bf00      	nop
 8016664:	bf00      	nop
 8016666:	e7fd      	b.n	8016664 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016668:	693b      	ldr	r3, [r7, #16]
 801666a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801666c:	2b00      	cmp	r3, #0
 801666e:	d10d      	bne.n	801668c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8016670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016674:	b672      	cpsid	i
 8016676:	f383 8811 	msr	BASEPRI, r3
 801667a:	f3bf 8f6f 	isb	sy
 801667e:	f3bf 8f4f 	dsb	sy
 8016682:	b662      	cpsie	i
 8016684:	60bb      	str	r3, [r7, #8]
}
 8016686:	bf00      	nop
 8016688:	bf00      	nop
 801668a:	e7fd      	b.n	8016688 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801668c:	693b      	ldr	r3, [r7, #16]
 801668e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016690:	1e5a      	subs	r2, r3, #1
 8016692:	693b      	ldr	r3, [r7, #16]
 8016694:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016696:	693b      	ldr	r3, [r7, #16]
 8016698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801669a:	693b      	ldr	r3, [r7, #16]
 801669c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801669e:	429a      	cmp	r2, r3
 80166a0:	d044      	beq.n	801672c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80166a2:	693b      	ldr	r3, [r7, #16]
 80166a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d140      	bne.n	801672c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80166aa:	693b      	ldr	r3, [r7, #16]
 80166ac:	3304      	adds	r3, #4
 80166ae:	4618      	mov	r0, r3
 80166b0:	f7fe fb64 	bl	8014d7c <uxListRemove>
 80166b4:	4603      	mov	r3, r0
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d115      	bne.n	80166e6 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166be:	491f      	ldr	r1, [pc, #124]	@ (801673c <xTaskPriorityDisinherit+0x110>)
 80166c0:	4613      	mov	r3, r2
 80166c2:	009b      	lsls	r3, r3, #2
 80166c4:	4413      	add	r3, r2
 80166c6:	009b      	lsls	r3, r3, #2
 80166c8:	440b      	add	r3, r1
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d10a      	bne.n	80166e6 <xTaskPriorityDisinherit+0xba>
 80166d0:	693b      	ldr	r3, [r7, #16]
 80166d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166d4:	2201      	movs	r2, #1
 80166d6:	fa02 f303 	lsl.w	r3, r2, r3
 80166da:	43da      	mvns	r2, r3
 80166dc:	4b18      	ldr	r3, [pc, #96]	@ (8016740 <xTaskPriorityDisinherit+0x114>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	4013      	ands	r3, r2
 80166e2:	4a17      	ldr	r2, [pc, #92]	@ (8016740 <xTaskPriorityDisinherit+0x114>)
 80166e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80166e6:	693b      	ldr	r3, [r7, #16]
 80166e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80166ea:	693b      	ldr	r3, [r7, #16]
 80166ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80166ee:	693b      	ldr	r3, [r7, #16]
 80166f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166f2:	f1c3 0207 	rsb	r2, r3, #7
 80166f6:	693b      	ldr	r3, [r7, #16]
 80166f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80166fa:	693b      	ldr	r3, [r7, #16]
 80166fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166fe:	2201      	movs	r2, #1
 8016700:	409a      	lsls	r2, r3
 8016702:	4b0f      	ldr	r3, [pc, #60]	@ (8016740 <xTaskPriorityDisinherit+0x114>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	4313      	orrs	r3, r2
 8016708:	4a0d      	ldr	r2, [pc, #52]	@ (8016740 <xTaskPriorityDisinherit+0x114>)
 801670a:	6013      	str	r3, [r2, #0]
 801670c:	693b      	ldr	r3, [r7, #16]
 801670e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016710:	4613      	mov	r3, r2
 8016712:	009b      	lsls	r3, r3, #2
 8016714:	4413      	add	r3, r2
 8016716:	009b      	lsls	r3, r3, #2
 8016718:	4a08      	ldr	r2, [pc, #32]	@ (801673c <xTaskPriorityDisinherit+0x110>)
 801671a:	441a      	add	r2, r3
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	3304      	adds	r3, #4
 8016720:	4619      	mov	r1, r3
 8016722:	4610      	mov	r0, r2
 8016724:	f7fe facd 	bl	8014cc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016728:	2301      	movs	r3, #1
 801672a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801672c:	697b      	ldr	r3, [r7, #20]
	}
 801672e:	4618      	mov	r0, r3
 8016730:	3718      	adds	r7, #24
 8016732:	46bd      	mov	sp, r7
 8016734:	bd80      	pop	{r7, pc}
 8016736:	bf00      	nop
 8016738:	20002ad8 	.word	0x20002ad8
 801673c:	20002adc 	.word	0x20002adc
 8016740:	20002be0 	.word	0x20002be0

08016744 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b084      	sub	sp, #16
 8016748:	af00      	add	r7, sp, #0
 801674a:	6078      	str	r0, [r7, #4]
 801674c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801674e:	4b29      	ldr	r3, [pc, #164]	@ (80167f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016754:	4b28      	ldr	r3, [pc, #160]	@ (80167f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	3304      	adds	r3, #4
 801675a:	4618      	mov	r0, r3
 801675c:	f7fe fb0e 	bl	8014d7c <uxListRemove>
 8016760:	4603      	mov	r3, r0
 8016762:	2b00      	cmp	r3, #0
 8016764:	d10b      	bne.n	801677e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016766:	4b24      	ldr	r3, [pc, #144]	@ (80167f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801676c:	2201      	movs	r2, #1
 801676e:	fa02 f303 	lsl.w	r3, r2, r3
 8016772:	43da      	mvns	r2, r3
 8016774:	4b21      	ldr	r3, [pc, #132]	@ (80167fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	4013      	ands	r3, r2
 801677a:	4a20      	ldr	r2, [pc, #128]	@ (80167fc <prvAddCurrentTaskToDelayedList+0xb8>)
 801677c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016784:	d10a      	bne.n	801679c <prvAddCurrentTaskToDelayedList+0x58>
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d007      	beq.n	801679c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801678c:	4b1a      	ldr	r3, [pc, #104]	@ (80167f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	3304      	adds	r3, #4
 8016792:	4619      	mov	r1, r3
 8016794:	481a      	ldr	r0, [pc, #104]	@ (8016800 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016796:	f7fe fa94 	bl	8014cc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801679a:	e026      	b.n	80167ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801679c:	68fa      	ldr	r2, [r7, #12]
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	4413      	add	r3, r2
 80167a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80167a4:	4b14      	ldr	r3, [pc, #80]	@ (80167f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	68ba      	ldr	r2, [r7, #8]
 80167aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80167ac:	68ba      	ldr	r2, [r7, #8]
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d209      	bcs.n	80167c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80167b4:	4b13      	ldr	r3, [pc, #76]	@ (8016804 <prvAddCurrentTaskToDelayedList+0xc0>)
 80167b6:	681a      	ldr	r2, [r3, #0]
 80167b8:	4b0f      	ldr	r3, [pc, #60]	@ (80167f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	3304      	adds	r3, #4
 80167be:	4619      	mov	r1, r3
 80167c0:	4610      	mov	r0, r2
 80167c2:	f7fe faa2 	bl	8014d0a <vListInsert>
}
 80167c6:	e010      	b.n	80167ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80167c8:	4b0f      	ldr	r3, [pc, #60]	@ (8016808 <prvAddCurrentTaskToDelayedList+0xc4>)
 80167ca:	681a      	ldr	r2, [r3, #0]
 80167cc:	4b0a      	ldr	r3, [pc, #40]	@ (80167f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	3304      	adds	r3, #4
 80167d2:	4619      	mov	r1, r3
 80167d4:	4610      	mov	r0, r2
 80167d6:	f7fe fa98 	bl	8014d0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80167da:	4b0c      	ldr	r3, [pc, #48]	@ (801680c <prvAddCurrentTaskToDelayedList+0xc8>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	68ba      	ldr	r2, [r7, #8]
 80167e0:	429a      	cmp	r2, r3
 80167e2:	d202      	bcs.n	80167ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80167e4:	4a09      	ldr	r2, [pc, #36]	@ (801680c <prvAddCurrentTaskToDelayedList+0xc8>)
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	6013      	str	r3, [r2, #0]
}
 80167ea:	bf00      	nop
 80167ec:	3710      	adds	r7, #16
 80167ee:	46bd      	mov	sp, r7
 80167f0:	bd80      	pop	{r7, pc}
 80167f2:	bf00      	nop
 80167f4:	20002bdc 	.word	0x20002bdc
 80167f8:	20002ad8 	.word	0x20002ad8
 80167fc:	20002be0 	.word	0x20002be0
 8016800:	20002bc4 	.word	0x20002bc4
 8016804:	20002b94 	.word	0x20002b94
 8016808:	20002b90 	.word	0x20002b90
 801680c:	20002bf8 	.word	0x20002bf8

08016810 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016810:	b480      	push	{r7}
 8016812:	b085      	sub	sp, #20
 8016814:	af00      	add	r7, sp, #0
 8016816:	60f8      	str	r0, [r7, #12]
 8016818:	60b9      	str	r1, [r7, #8]
 801681a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	3b04      	subs	r3, #4
 8016820:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	3b04      	subs	r3, #4
 801682e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016830:	68bb      	ldr	r3, [r7, #8]
 8016832:	f023 0201 	bic.w	r2, r3, #1
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	3b04      	subs	r3, #4
 801683e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016840:	4a0c      	ldr	r2, [pc, #48]	@ (8016874 <pxPortInitialiseStack+0x64>)
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	3b14      	subs	r3, #20
 801684a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801684c:	687a      	ldr	r2, [r7, #4]
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	3b04      	subs	r3, #4
 8016856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	f06f 0202 	mvn.w	r2, #2
 801685e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	3b20      	subs	r3, #32
 8016864:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016866:	68fb      	ldr	r3, [r7, #12]
}
 8016868:	4618      	mov	r0, r3
 801686a:	3714      	adds	r7, #20
 801686c:	46bd      	mov	sp, r7
 801686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016872:	4770      	bx	lr
 8016874:	08016879 	.word	0x08016879

08016878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016878:	b480      	push	{r7}
 801687a:	b085      	sub	sp, #20
 801687c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801687e:	2300      	movs	r3, #0
 8016880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016882:	4b15      	ldr	r3, [pc, #84]	@ (80168d8 <prvTaskExitError+0x60>)
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801688a:	d00d      	beq.n	80168a8 <prvTaskExitError+0x30>
	__asm volatile
 801688c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016890:	b672      	cpsid	i
 8016892:	f383 8811 	msr	BASEPRI, r3
 8016896:	f3bf 8f6f 	isb	sy
 801689a:	f3bf 8f4f 	dsb	sy
 801689e:	b662      	cpsie	i
 80168a0:	60fb      	str	r3, [r7, #12]
}
 80168a2:	bf00      	nop
 80168a4:	bf00      	nop
 80168a6:	e7fd      	b.n	80168a4 <prvTaskExitError+0x2c>
	__asm volatile
 80168a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168ac:	b672      	cpsid	i
 80168ae:	f383 8811 	msr	BASEPRI, r3
 80168b2:	f3bf 8f6f 	isb	sy
 80168b6:	f3bf 8f4f 	dsb	sy
 80168ba:	b662      	cpsie	i
 80168bc:	60bb      	str	r3, [r7, #8]
}
 80168be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80168c0:	bf00      	nop
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d0fc      	beq.n	80168c2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80168c8:	bf00      	nop
 80168ca:	bf00      	nop
 80168cc:	3714      	adds	r7, #20
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	20000070 	.word	0x20000070
 80168dc:	00000000 	.word	0x00000000

080168e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80168e0:	4b07      	ldr	r3, [pc, #28]	@ (8016900 <pxCurrentTCBConst2>)
 80168e2:	6819      	ldr	r1, [r3, #0]
 80168e4:	6808      	ldr	r0, [r1, #0]
 80168e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168ea:	f380 8809 	msr	PSP, r0
 80168ee:	f3bf 8f6f 	isb	sy
 80168f2:	f04f 0000 	mov.w	r0, #0
 80168f6:	f380 8811 	msr	BASEPRI, r0
 80168fa:	4770      	bx	lr
 80168fc:	f3af 8000 	nop.w

08016900 <pxCurrentTCBConst2>:
 8016900:	20002ad8 	.word	0x20002ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016904:	bf00      	nop
 8016906:	bf00      	nop

08016908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016908:	4808      	ldr	r0, [pc, #32]	@ (801692c <prvPortStartFirstTask+0x24>)
 801690a:	6800      	ldr	r0, [r0, #0]
 801690c:	6800      	ldr	r0, [r0, #0]
 801690e:	f380 8808 	msr	MSP, r0
 8016912:	f04f 0000 	mov.w	r0, #0
 8016916:	f380 8814 	msr	CONTROL, r0
 801691a:	b662      	cpsie	i
 801691c:	b661      	cpsie	f
 801691e:	f3bf 8f4f 	dsb	sy
 8016922:	f3bf 8f6f 	isb	sy
 8016926:	df00      	svc	0
 8016928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801692a:	bf00      	nop
 801692c:	e000ed08 	.word	0xe000ed08

08016930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b084      	sub	sp, #16
 8016934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016936:	4b37      	ldr	r3, [pc, #220]	@ (8016a14 <xPortStartScheduler+0xe4>)
 8016938:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	781b      	ldrb	r3, [r3, #0]
 801693e:	b2db      	uxtb	r3, r3
 8016940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	22ff      	movs	r2, #255	@ 0xff
 8016946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016948:	68fb      	ldr	r3, [r7, #12]
 801694a:	781b      	ldrb	r3, [r3, #0]
 801694c:	b2db      	uxtb	r3, r3
 801694e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016950:	78fb      	ldrb	r3, [r7, #3]
 8016952:	b2db      	uxtb	r3, r3
 8016954:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016958:	b2da      	uxtb	r2, r3
 801695a:	4b2f      	ldr	r3, [pc, #188]	@ (8016a18 <xPortStartScheduler+0xe8>)
 801695c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801695e:	4b2f      	ldr	r3, [pc, #188]	@ (8016a1c <xPortStartScheduler+0xec>)
 8016960:	2207      	movs	r2, #7
 8016962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016964:	e009      	b.n	801697a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016966:	4b2d      	ldr	r3, [pc, #180]	@ (8016a1c <xPortStartScheduler+0xec>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	3b01      	subs	r3, #1
 801696c:	4a2b      	ldr	r2, [pc, #172]	@ (8016a1c <xPortStartScheduler+0xec>)
 801696e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016970:	78fb      	ldrb	r3, [r7, #3]
 8016972:	b2db      	uxtb	r3, r3
 8016974:	005b      	lsls	r3, r3, #1
 8016976:	b2db      	uxtb	r3, r3
 8016978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801697a:	78fb      	ldrb	r3, [r7, #3]
 801697c:	b2db      	uxtb	r3, r3
 801697e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016982:	2b80      	cmp	r3, #128	@ 0x80
 8016984:	d0ef      	beq.n	8016966 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016986:	4b25      	ldr	r3, [pc, #148]	@ (8016a1c <xPortStartScheduler+0xec>)
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f1c3 0307 	rsb	r3, r3, #7
 801698e:	2b04      	cmp	r3, #4
 8016990:	d00d      	beq.n	80169ae <xPortStartScheduler+0x7e>
	__asm volatile
 8016992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016996:	b672      	cpsid	i
 8016998:	f383 8811 	msr	BASEPRI, r3
 801699c:	f3bf 8f6f 	isb	sy
 80169a0:	f3bf 8f4f 	dsb	sy
 80169a4:	b662      	cpsie	i
 80169a6:	60bb      	str	r3, [r7, #8]
}
 80169a8:	bf00      	nop
 80169aa:	bf00      	nop
 80169ac:	e7fd      	b.n	80169aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80169ae:	4b1b      	ldr	r3, [pc, #108]	@ (8016a1c <xPortStartScheduler+0xec>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	021b      	lsls	r3, r3, #8
 80169b4:	4a19      	ldr	r2, [pc, #100]	@ (8016a1c <xPortStartScheduler+0xec>)
 80169b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80169b8:	4b18      	ldr	r3, [pc, #96]	@ (8016a1c <xPortStartScheduler+0xec>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80169c0:	4a16      	ldr	r2, [pc, #88]	@ (8016a1c <xPortStartScheduler+0xec>)
 80169c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	b2da      	uxtb	r2, r3
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80169cc:	4b14      	ldr	r3, [pc, #80]	@ (8016a20 <xPortStartScheduler+0xf0>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	4a13      	ldr	r2, [pc, #76]	@ (8016a20 <xPortStartScheduler+0xf0>)
 80169d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80169d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80169d8:	4b11      	ldr	r3, [pc, #68]	@ (8016a20 <xPortStartScheduler+0xf0>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	4a10      	ldr	r2, [pc, #64]	@ (8016a20 <xPortStartScheduler+0xf0>)
 80169de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80169e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80169e4:	f000 f8dc 	bl	8016ba0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80169e8:	4b0e      	ldr	r3, [pc, #56]	@ (8016a24 <xPortStartScheduler+0xf4>)
 80169ea:	2200      	movs	r2, #0
 80169ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80169ee:	f000 f8fb 	bl	8016be8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80169f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016a28 <xPortStartScheduler+0xf8>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	4a0c      	ldr	r2, [pc, #48]	@ (8016a28 <xPortStartScheduler+0xf8>)
 80169f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80169fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80169fe:	f7ff ff83 	bl	8016908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016a02:	f7ff fb7f 	bl	8016104 <vTaskSwitchContext>
	prvTaskExitError();
 8016a06:	f7ff ff37 	bl	8016878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016a0a:	2300      	movs	r3, #0
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	3710      	adds	r7, #16
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}
 8016a14:	e000e400 	.word	0xe000e400
 8016a18:	20002c04 	.word	0x20002c04
 8016a1c:	20002c08 	.word	0x20002c08
 8016a20:	e000ed20 	.word	0xe000ed20
 8016a24:	20000070 	.word	0x20000070
 8016a28:	e000ef34 	.word	0xe000ef34

08016a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b083      	sub	sp, #12
 8016a30:	af00      	add	r7, sp, #0
	__asm volatile
 8016a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a36:	b672      	cpsid	i
 8016a38:	f383 8811 	msr	BASEPRI, r3
 8016a3c:	f3bf 8f6f 	isb	sy
 8016a40:	f3bf 8f4f 	dsb	sy
 8016a44:	b662      	cpsie	i
 8016a46:	607b      	str	r3, [r7, #4]
}
 8016a48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016a4a:	4b11      	ldr	r3, [pc, #68]	@ (8016a90 <vPortEnterCritical+0x64>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	3301      	adds	r3, #1
 8016a50:	4a0f      	ldr	r2, [pc, #60]	@ (8016a90 <vPortEnterCritical+0x64>)
 8016a52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016a54:	4b0e      	ldr	r3, [pc, #56]	@ (8016a90 <vPortEnterCritical+0x64>)
 8016a56:	681b      	ldr	r3, [r3, #0]
 8016a58:	2b01      	cmp	r3, #1
 8016a5a:	d112      	bne.n	8016a82 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8016a94 <vPortEnterCritical+0x68>)
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	b2db      	uxtb	r3, r3
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	d00d      	beq.n	8016a82 <vPortEnterCritical+0x56>
	__asm volatile
 8016a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a6a:	b672      	cpsid	i
 8016a6c:	f383 8811 	msr	BASEPRI, r3
 8016a70:	f3bf 8f6f 	isb	sy
 8016a74:	f3bf 8f4f 	dsb	sy
 8016a78:	b662      	cpsie	i
 8016a7a:	603b      	str	r3, [r7, #0]
}
 8016a7c:	bf00      	nop
 8016a7e:	bf00      	nop
 8016a80:	e7fd      	b.n	8016a7e <vPortEnterCritical+0x52>
	}
}
 8016a82:	bf00      	nop
 8016a84:	370c      	adds	r7, #12
 8016a86:	46bd      	mov	sp, r7
 8016a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a8c:	4770      	bx	lr
 8016a8e:	bf00      	nop
 8016a90:	20000070 	.word	0x20000070
 8016a94:	e000ed04 	.word	0xe000ed04

08016a98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016a98:	b480      	push	{r7}
 8016a9a:	b083      	sub	sp, #12
 8016a9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016a9e:	4b13      	ldr	r3, [pc, #76]	@ (8016aec <vPortExitCritical+0x54>)
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d10d      	bne.n	8016ac2 <vPortExitCritical+0x2a>
	__asm volatile
 8016aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aaa:	b672      	cpsid	i
 8016aac:	f383 8811 	msr	BASEPRI, r3
 8016ab0:	f3bf 8f6f 	isb	sy
 8016ab4:	f3bf 8f4f 	dsb	sy
 8016ab8:	b662      	cpsie	i
 8016aba:	607b      	str	r3, [r7, #4]
}
 8016abc:	bf00      	nop
 8016abe:	bf00      	nop
 8016ac0:	e7fd      	b.n	8016abe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8016ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8016aec <vPortExitCritical+0x54>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	3b01      	subs	r3, #1
 8016ac8:	4a08      	ldr	r2, [pc, #32]	@ (8016aec <vPortExitCritical+0x54>)
 8016aca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016acc:	4b07      	ldr	r3, [pc, #28]	@ (8016aec <vPortExitCritical+0x54>)
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d105      	bne.n	8016ae0 <vPortExitCritical+0x48>
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	f383 8811 	msr	BASEPRI, r3
}
 8016ade:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016ae0:	bf00      	nop
 8016ae2:	370c      	adds	r7, #12
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aea:	4770      	bx	lr
 8016aec:	20000070 	.word	0x20000070

08016af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016af0:	f3ef 8009 	mrs	r0, PSP
 8016af4:	f3bf 8f6f 	isb	sy
 8016af8:	4b15      	ldr	r3, [pc, #84]	@ (8016b50 <pxCurrentTCBConst>)
 8016afa:	681a      	ldr	r2, [r3, #0]
 8016afc:	f01e 0f10 	tst.w	lr, #16
 8016b00:	bf08      	it	eq
 8016b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b0a:	6010      	str	r0, [r2, #0]
 8016b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016b10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016b14:	b672      	cpsid	i
 8016b16:	f380 8811 	msr	BASEPRI, r0
 8016b1a:	f3bf 8f4f 	dsb	sy
 8016b1e:	f3bf 8f6f 	isb	sy
 8016b22:	b662      	cpsie	i
 8016b24:	f7ff faee 	bl	8016104 <vTaskSwitchContext>
 8016b28:	f04f 0000 	mov.w	r0, #0
 8016b2c:	f380 8811 	msr	BASEPRI, r0
 8016b30:	bc09      	pop	{r0, r3}
 8016b32:	6819      	ldr	r1, [r3, #0]
 8016b34:	6808      	ldr	r0, [r1, #0]
 8016b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b3a:	f01e 0f10 	tst.w	lr, #16
 8016b3e:	bf08      	it	eq
 8016b40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016b44:	f380 8809 	msr	PSP, r0
 8016b48:	f3bf 8f6f 	isb	sy
 8016b4c:	4770      	bx	lr
 8016b4e:	bf00      	nop

08016b50 <pxCurrentTCBConst>:
 8016b50:	20002ad8 	.word	0x20002ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016b54:	bf00      	nop
 8016b56:	bf00      	nop

08016b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b082      	sub	sp, #8
 8016b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8016b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b62:	b672      	cpsid	i
 8016b64:	f383 8811 	msr	BASEPRI, r3
 8016b68:	f3bf 8f6f 	isb	sy
 8016b6c:	f3bf 8f4f 	dsb	sy
 8016b70:	b662      	cpsie	i
 8016b72:	607b      	str	r3, [r7, #4]
}
 8016b74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016b76:	f7ff fa09 	bl	8015f8c <xTaskIncrementTick>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d003      	beq.n	8016b88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016b80:	4b06      	ldr	r3, [pc, #24]	@ (8016b9c <SysTick_Handler+0x44>)
 8016b82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016b86:	601a      	str	r2, [r3, #0]
 8016b88:	2300      	movs	r3, #0
 8016b8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	f383 8811 	msr	BASEPRI, r3
}
 8016b92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016b94:	bf00      	nop
 8016b96:	3708      	adds	r7, #8
 8016b98:	46bd      	mov	sp, r7
 8016b9a:	bd80      	pop	{r7, pc}
 8016b9c:	e000ed04 	.word	0xe000ed04

08016ba0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016ba0:	b480      	push	{r7}
 8016ba2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8016bd4 <vPortSetupTimerInterrupt+0x34>)
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016baa:	4b0b      	ldr	r3, [pc, #44]	@ (8016bd8 <vPortSetupTimerInterrupt+0x38>)
 8016bac:	2200      	movs	r2, #0
 8016bae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8016bdc <vPortSetupTimerInterrupt+0x3c>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8016be0 <vPortSetupTimerInterrupt+0x40>)
 8016bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8016bba:	099b      	lsrs	r3, r3, #6
 8016bbc:	4a09      	ldr	r2, [pc, #36]	@ (8016be4 <vPortSetupTimerInterrupt+0x44>)
 8016bbe:	3b01      	subs	r3, #1
 8016bc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016bc2:	4b04      	ldr	r3, [pc, #16]	@ (8016bd4 <vPortSetupTimerInterrupt+0x34>)
 8016bc4:	2207      	movs	r2, #7
 8016bc6:	601a      	str	r2, [r3, #0]
}
 8016bc8:	bf00      	nop
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd0:	4770      	bx	lr
 8016bd2:	bf00      	nop
 8016bd4:	e000e010 	.word	0xe000e010
 8016bd8:	e000e018 	.word	0xe000e018
 8016bdc:	2000001c 	.word	0x2000001c
 8016be0:	10624dd3 	.word	0x10624dd3
 8016be4:	e000e014 	.word	0xe000e014

08016be8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016be8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016bf8 <vPortEnableVFP+0x10>
 8016bec:	6801      	ldr	r1, [r0, #0]
 8016bee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016bf2:	6001      	str	r1, [r0, #0]
 8016bf4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016bf6:	bf00      	nop
 8016bf8:	e000ed88 	.word	0xe000ed88

08016bfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016bfc:	b480      	push	{r7}
 8016bfe:	b085      	sub	sp, #20
 8016c00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016c02:	f3ef 8305 	mrs	r3, IPSR
 8016c06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	2b0f      	cmp	r3, #15
 8016c0c:	d917      	bls.n	8016c3e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8016c78 <vPortValidateInterruptPriority+0x7c>)
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	4413      	add	r3, r2
 8016c14:	781b      	ldrb	r3, [r3, #0]
 8016c16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016c18:	4b18      	ldr	r3, [pc, #96]	@ (8016c7c <vPortValidateInterruptPriority+0x80>)
 8016c1a:	781b      	ldrb	r3, [r3, #0]
 8016c1c:	7afa      	ldrb	r2, [r7, #11]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d20d      	bcs.n	8016c3e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8016c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c26:	b672      	cpsid	i
 8016c28:	f383 8811 	msr	BASEPRI, r3
 8016c2c:	f3bf 8f6f 	isb	sy
 8016c30:	f3bf 8f4f 	dsb	sy
 8016c34:	b662      	cpsie	i
 8016c36:	607b      	str	r3, [r7, #4]
}
 8016c38:	bf00      	nop
 8016c3a:	bf00      	nop
 8016c3c:	e7fd      	b.n	8016c3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016c3e:	4b10      	ldr	r3, [pc, #64]	@ (8016c80 <vPortValidateInterruptPriority+0x84>)
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016c46:	4b0f      	ldr	r3, [pc, #60]	@ (8016c84 <vPortValidateInterruptPriority+0x88>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d90d      	bls.n	8016c6a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8016c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c52:	b672      	cpsid	i
 8016c54:	f383 8811 	msr	BASEPRI, r3
 8016c58:	f3bf 8f6f 	isb	sy
 8016c5c:	f3bf 8f4f 	dsb	sy
 8016c60:	b662      	cpsie	i
 8016c62:	603b      	str	r3, [r7, #0]
}
 8016c64:	bf00      	nop
 8016c66:	bf00      	nop
 8016c68:	e7fd      	b.n	8016c66 <vPortValidateInterruptPriority+0x6a>
	}
 8016c6a:	bf00      	nop
 8016c6c:	3714      	adds	r7, #20
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c74:	4770      	bx	lr
 8016c76:	bf00      	nop
 8016c78:	e000e3f0 	.word	0xe000e3f0
 8016c7c:	20002c04 	.word	0x20002c04
 8016c80:	e000ed0c 	.word	0xe000ed0c
 8016c84:	20002c08 	.word	0x20002c08

08016c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b08a      	sub	sp, #40	@ 0x28
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016c90:	2300      	movs	r3, #0
 8016c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016c94:	f7ff f8aa 	bl	8015dec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016c98:	4b5f      	ldr	r3, [pc, #380]	@ (8016e18 <pvPortMalloc+0x190>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d101      	bne.n	8016ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016ca0:	f000 f924 	bl	8016eec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016ca4:	4b5d      	ldr	r3, [pc, #372]	@ (8016e1c <pvPortMalloc+0x194>)
 8016ca6:	681a      	ldr	r2, [r3, #0]
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	4013      	ands	r3, r2
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	f040 8094 	bne.w	8016dda <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d020      	beq.n	8016cfa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8016cb8:	2208      	movs	r2, #8
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	4413      	add	r3, r2
 8016cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f003 0307 	and.w	r3, r3, #7
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d017      	beq.n	8016cfa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	f023 0307 	bic.w	r3, r3, #7
 8016cd0:	3308      	adds	r3, #8
 8016cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f003 0307 	and.w	r3, r3, #7
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d00d      	beq.n	8016cfa <pvPortMalloc+0x72>
	__asm volatile
 8016cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ce2:	b672      	cpsid	i
 8016ce4:	f383 8811 	msr	BASEPRI, r3
 8016ce8:	f3bf 8f6f 	isb	sy
 8016cec:	f3bf 8f4f 	dsb	sy
 8016cf0:	b662      	cpsie	i
 8016cf2:	617b      	str	r3, [r7, #20]
}
 8016cf4:	bf00      	nop
 8016cf6:	bf00      	nop
 8016cf8:	e7fd      	b.n	8016cf6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d06c      	beq.n	8016dda <pvPortMalloc+0x152>
 8016d00:	4b47      	ldr	r3, [pc, #284]	@ (8016e20 <pvPortMalloc+0x198>)
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	687a      	ldr	r2, [r7, #4]
 8016d06:	429a      	cmp	r2, r3
 8016d08:	d867      	bhi.n	8016dda <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016d0a:	4b46      	ldr	r3, [pc, #280]	@ (8016e24 <pvPortMalloc+0x19c>)
 8016d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016d0e:	4b45      	ldr	r3, [pc, #276]	@ (8016e24 <pvPortMalloc+0x19c>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d14:	e004      	b.n	8016d20 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8016d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d22:	685b      	ldr	r3, [r3, #4]
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d903      	bls.n	8016d32 <pvPortMalloc+0xaa>
 8016d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d1f1      	bne.n	8016d16 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016d32:	4b39      	ldr	r3, [pc, #228]	@ (8016e18 <pvPortMalloc+0x190>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d04e      	beq.n	8016dda <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016d3c:	6a3b      	ldr	r3, [r7, #32]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	2208      	movs	r2, #8
 8016d42:	4413      	add	r3, r2
 8016d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d48:	681a      	ldr	r2, [r3, #0]
 8016d4a:	6a3b      	ldr	r3, [r7, #32]
 8016d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d50:	685a      	ldr	r2, [r3, #4]
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	1ad2      	subs	r2, r2, r3
 8016d56:	2308      	movs	r3, #8
 8016d58:	005b      	lsls	r3, r3, #1
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d922      	bls.n	8016da4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	4413      	add	r3, r2
 8016d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016d66:	69bb      	ldr	r3, [r7, #24]
 8016d68:	f003 0307 	and.w	r3, r3, #7
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d00d      	beq.n	8016d8c <pvPortMalloc+0x104>
	__asm volatile
 8016d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d74:	b672      	cpsid	i
 8016d76:	f383 8811 	msr	BASEPRI, r3
 8016d7a:	f3bf 8f6f 	isb	sy
 8016d7e:	f3bf 8f4f 	dsb	sy
 8016d82:	b662      	cpsie	i
 8016d84:	613b      	str	r3, [r7, #16]
}
 8016d86:	bf00      	nop
 8016d88:	bf00      	nop
 8016d8a:	e7fd      	b.n	8016d88 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d8e:	685a      	ldr	r2, [r3, #4]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	1ad2      	subs	r2, r2, r3
 8016d94:	69bb      	ldr	r3, [r7, #24]
 8016d96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d9a:	687a      	ldr	r2, [r7, #4]
 8016d9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016d9e:	69b8      	ldr	r0, [r7, #24]
 8016da0:	f000 f906 	bl	8016fb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016da4:	4b1e      	ldr	r3, [pc, #120]	@ (8016e20 <pvPortMalloc+0x198>)
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	4a1c      	ldr	r2, [pc, #112]	@ (8016e20 <pvPortMalloc+0x198>)
 8016db0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016db2:	4b1b      	ldr	r3, [pc, #108]	@ (8016e20 <pvPortMalloc+0x198>)
 8016db4:	681a      	ldr	r2, [r3, #0]
 8016db6:	4b1c      	ldr	r3, [pc, #112]	@ (8016e28 <pvPortMalloc+0x1a0>)
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	429a      	cmp	r2, r3
 8016dbc:	d203      	bcs.n	8016dc6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016dbe:	4b18      	ldr	r3, [pc, #96]	@ (8016e20 <pvPortMalloc+0x198>)
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	4a19      	ldr	r2, [pc, #100]	@ (8016e28 <pvPortMalloc+0x1a0>)
 8016dc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dc8:	685a      	ldr	r2, [r3, #4]
 8016dca:	4b14      	ldr	r3, [pc, #80]	@ (8016e1c <pvPortMalloc+0x194>)
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	431a      	orrs	r2, r3
 8016dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dd6:	2200      	movs	r2, #0
 8016dd8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016dda:	f7ff f815 	bl	8015e08 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8016dde:	69fb      	ldr	r3, [r7, #28]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d101      	bne.n	8016de8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8016de4:	f7ea ffc4 	bl	8001d70 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016de8:	69fb      	ldr	r3, [r7, #28]
 8016dea:	f003 0307 	and.w	r3, r3, #7
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d00d      	beq.n	8016e0e <pvPortMalloc+0x186>
	__asm volatile
 8016df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016df6:	b672      	cpsid	i
 8016df8:	f383 8811 	msr	BASEPRI, r3
 8016dfc:	f3bf 8f6f 	isb	sy
 8016e00:	f3bf 8f4f 	dsb	sy
 8016e04:	b662      	cpsie	i
 8016e06:	60fb      	str	r3, [r7, #12]
}
 8016e08:	bf00      	nop
 8016e0a:	bf00      	nop
 8016e0c:	e7fd      	b.n	8016e0a <pvPortMalloc+0x182>
	return pvReturn;
 8016e0e:	69fb      	ldr	r3, [r7, #28]
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3728      	adds	r7, #40	@ 0x28
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}
 8016e18:	20012c14 	.word	0x20012c14
 8016e1c:	20012c20 	.word	0x20012c20
 8016e20:	20012c18 	.word	0x20012c18
 8016e24:	20012c0c 	.word	0x20012c0c
 8016e28:	20012c1c 	.word	0x20012c1c

08016e2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	b086      	sub	sp, #24
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d04e      	beq.n	8016edc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016e3e:	2308      	movs	r3, #8
 8016e40:	425b      	negs	r3, r3
 8016e42:	697a      	ldr	r2, [r7, #20]
 8016e44:	4413      	add	r3, r2
 8016e46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016e48:	697b      	ldr	r3, [r7, #20]
 8016e4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016e4c:	693b      	ldr	r3, [r7, #16]
 8016e4e:	685a      	ldr	r2, [r3, #4]
 8016e50:	4b24      	ldr	r3, [pc, #144]	@ (8016ee4 <vPortFree+0xb8>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	4013      	ands	r3, r2
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d10d      	bne.n	8016e76 <vPortFree+0x4a>
	__asm volatile
 8016e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e5e:	b672      	cpsid	i
 8016e60:	f383 8811 	msr	BASEPRI, r3
 8016e64:	f3bf 8f6f 	isb	sy
 8016e68:	f3bf 8f4f 	dsb	sy
 8016e6c:	b662      	cpsie	i
 8016e6e:	60fb      	str	r3, [r7, #12]
}
 8016e70:	bf00      	nop
 8016e72:	bf00      	nop
 8016e74:	e7fd      	b.n	8016e72 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d00d      	beq.n	8016e9a <vPortFree+0x6e>
	__asm volatile
 8016e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e82:	b672      	cpsid	i
 8016e84:	f383 8811 	msr	BASEPRI, r3
 8016e88:	f3bf 8f6f 	isb	sy
 8016e8c:	f3bf 8f4f 	dsb	sy
 8016e90:	b662      	cpsie	i
 8016e92:	60bb      	str	r3, [r7, #8]
}
 8016e94:	bf00      	nop
 8016e96:	bf00      	nop
 8016e98:	e7fd      	b.n	8016e96 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016e9a:	693b      	ldr	r3, [r7, #16]
 8016e9c:	685a      	ldr	r2, [r3, #4]
 8016e9e:	4b11      	ldr	r3, [pc, #68]	@ (8016ee4 <vPortFree+0xb8>)
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	4013      	ands	r3, r2
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d019      	beq.n	8016edc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d115      	bne.n	8016edc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016eb0:	693b      	ldr	r3, [r7, #16]
 8016eb2:	685a      	ldr	r2, [r3, #4]
 8016eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8016ee4 <vPortFree+0xb8>)
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	43db      	mvns	r3, r3
 8016eba:	401a      	ands	r2, r3
 8016ebc:	693b      	ldr	r3, [r7, #16]
 8016ebe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016ec0:	f7fe ff94 	bl	8015dec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016ec4:	693b      	ldr	r3, [r7, #16]
 8016ec6:	685a      	ldr	r2, [r3, #4]
 8016ec8:	4b07      	ldr	r3, [pc, #28]	@ (8016ee8 <vPortFree+0xbc>)
 8016eca:	681b      	ldr	r3, [r3, #0]
 8016ecc:	4413      	add	r3, r2
 8016ece:	4a06      	ldr	r2, [pc, #24]	@ (8016ee8 <vPortFree+0xbc>)
 8016ed0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016ed2:	6938      	ldr	r0, [r7, #16]
 8016ed4:	f000 f86c 	bl	8016fb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8016ed8:	f7fe ff96 	bl	8015e08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016edc:	bf00      	nop
 8016ede:	3718      	adds	r7, #24
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	bd80      	pop	{r7, pc}
 8016ee4:	20012c20 	.word	0x20012c20
 8016ee8:	20012c18 	.word	0x20012c18

08016eec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016eec:	b480      	push	{r7}
 8016eee:	b085      	sub	sp, #20
 8016ef0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016ef2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8016ef6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016ef8:	4b27      	ldr	r3, [pc, #156]	@ (8016f98 <prvHeapInit+0xac>)
 8016efa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	f003 0307 	and.w	r3, r3, #7
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d00c      	beq.n	8016f20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	3307      	adds	r3, #7
 8016f0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	f023 0307 	bic.w	r3, r3, #7
 8016f12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016f14:	68ba      	ldr	r2, [r7, #8]
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	1ad3      	subs	r3, r2, r3
 8016f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8016f98 <prvHeapInit+0xac>)
 8016f1c:	4413      	add	r3, r2
 8016f1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016f24:	4a1d      	ldr	r2, [pc, #116]	@ (8016f9c <prvHeapInit+0xb0>)
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8016f9c <prvHeapInit+0xb0>)
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	68ba      	ldr	r2, [r7, #8]
 8016f34:	4413      	add	r3, r2
 8016f36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016f38:	2208      	movs	r2, #8
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	1a9b      	subs	r3, r3, r2
 8016f3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	f023 0307 	bic.w	r3, r3, #7
 8016f46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	4a15      	ldr	r2, [pc, #84]	@ (8016fa0 <prvHeapInit+0xb4>)
 8016f4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016f4e:	4b14      	ldr	r3, [pc, #80]	@ (8016fa0 <prvHeapInit+0xb4>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	2200      	movs	r2, #0
 8016f54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016f56:	4b12      	ldr	r3, [pc, #72]	@ (8016fa0 <prvHeapInit+0xb4>)
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016f62:	683b      	ldr	r3, [r7, #0]
 8016f64:	68fa      	ldr	r2, [r7, #12]
 8016f66:	1ad2      	subs	r2, r2, r3
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8016fa0 <prvHeapInit+0xb4>)
 8016f6e:	681a      	ldr	r2, [r3, #0]
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	685b      	ldr	r3, [r3, #4]
 8016f78:	4a0a      	ldr	r2, [pc, #40]	@ (8016fa4 <prvHeapInit+0xb8>)
 8016f7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	4a09      	ldr	r2, [pc, #36]	@ (8016fa8 <prvHeapInit+0xbc>)
 8016f82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016f84:	4b09      	ldr	r3, [pc, #36]	@ (8016fac <prvHeapInit+0xc0>)
 8016f86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016f8a:	601a      	str	r2, [r3, #0]
}
 8016f8c:	bf00      	nop
 8016f8e:	3714      	adds	r7, #20
 8016f90:	46bd      	mov	sp, r7
 8016f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f96:	4770      	bx	lr
 8016f98:	20002c0c 	.word	0x20002c0c
 8016f9c:	20012c0c 	.word	0x20012c0c
 8016fa0:	20012c14 	.word	0x20012c14
 8016fa4:	20012c1c 	.word	0x20012c1c
 8016fa8:	20012c18 	.word	0x20012c18
 8016fac:	20012c20 	.word	0x20012c20

08016fb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016fb0:	b480      	push	{r7}
 8016fb2:	b085      	sub	sp, #20
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016fb8:	4b28      	ldr	r3, [pc, #160]	@ (801705c <prvInsertBlockIntoFreeList+0xac>)
 8016fba:	60fb      	str	r3, [r7, #12]
 8016fbc:	e002      	b.n	8016fc4 <prvInsertBlockIntoFreeList+0x14>
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	60fb      	str	r3, [r7, #12]
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	687a      	ldr	r2, [r7, #4]
 8016fca:	429a      	cmp	r2, r3
 8016fcc:	d8f7      	bhi.n	8016fbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	685b      	ldr	r3, [r3, #4]
 8016fd6:	68ba      	ldr	r2, [r7, #8]
 8016fd8:	4413      	add	r3, r2
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	429a      	cmp	r2, r3
 8016fde:	d108      	bne.n	8016ff2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	685a      	ldr	r2, [r3, #4]
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	685b      	ldr	r3, [r3, #4]
 8016fe8:	441a      	add	r2, r3
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	685b      	ldr	r3, [r3, #4]
 8016ffa:	68ba      	ldr	r2, [r7, #8]
 8016ffc:	441a      	add	r2, r3
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	429a      	cmp	r2, r3
 8017004:	d118      	bne.n	8017038 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	681a      	ldr	r2, [r3, #0]
 801700a:	4b15      	ldr	r3, [pc, #84]	@ (8017060 <prvInsertBlockIntoFreeList+0xb0>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	429a      	cmp	r2, r3
 8017010:	d00d      	beq.n	801702e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	685a      	ldr	r2, [r3, #4]
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	685b      	ldr	r3, [r3, #4]
 801701c:	441a      	add	r2, r3
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	681a      	ldr	r2, [r3, #0]
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	601a      	str	r2, [r3, #0]
 801702c:	e008      	b.n	8017040 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801702e:	4b0c      	ldr	r3, [pc, #48]	@ (8017060 <prvInsertBlockIntoFreeList+0xb0>)
 8017030:	681a      	ldr	r2, [r3, #0]
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	601a      	str	r2, [r3, #0]
 8017036:	e003      	b.n	8017040 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	681a      	ldr	r2, [r3, #0]
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017040:	68fa      	ldr	r2, [r7, #12]
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	429a      	cmp	r2, r3
 8017046:	d002      	beq.n	801704e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	687a      	ldr	r2, [r7, #4]
 801704c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801704e:	bf00      	nop
 8017050:	3714      	adds	r7, #20
 8017052:	46bd      	mov	sp, r7
 8017054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017058:	4770      	bx	lr
 801705a:	bf00      	nop
 801705c:	20012c0c 	.word	0x20012c0c
 8017060:	20012c14 	.word	0x20012c14

08017064 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b082      	sub	sp, #8
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017072:	4618      	mov	r0, r3
 8017074:	f7fa fe36 	bl	8011ce4 <USBH_LL_IncTimer>
}
 8017078:	bf00      	nop
 801707a:	3708      	adds	r7, #8
 801707c:	46bd      	mov	sp, r7
 801707e:	bd80      	pop	{r7, pc}

08017080 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b082      	sub	sp, #8
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801708e:	4618      	mov	r0, r3
 8017090:	f7fa fe76 	bl	8011d80 <USBH_LL_Connect>
}
 8017094:	bf00      	nop
 8017096:	3708      	adds	r7, #8
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}

0801709c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b082      	sub	sp, #8
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7fa fe83 	bl	8011db6 <USBH_LL_Disconnect>
}
 80170b0:	bf00      	nop
 80170b2:	3708      	adds	r7, #8
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd80      	pop	{r7, pc}

080170b8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	460b      	mov	r3, r1
 80170c2:	70fb      	strb	r3, [r7, #3]
 80170c4:	4613      	mov	r3, r2
 80170c6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80170ce:	4618      	mov	r0, r3
 80170d0:	f7fa fec2 	bl	8011e58 <USBH_LL_NotifyURBChange>
#endif
}
 80170d4:	bf00      	nop
 80170d6:	3708      	adds	r7, #8
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}

080170dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b082      	sub	sp, #8
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7fa fe24 	bl	8011d38 <USBH_LL_PortEnabled>
}
 80170f0:	bf00      	nop
 80170f2:	3708      	adds	r7, #8
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bd80      	pop	{r7, pc}

080170f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b082      	sub	sp, #8
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017106:	4618      	mov	r0, r3
 8017108:	f7fa fe28 	bl	8011d5c <USBH_LL_PortDisabled>
}
 801710c:	bf00      	nop
 801710e:	3708      	adds	r7, #8
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}

08017114 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017114:	b580      	push	{r7, lr}
 8017116:	b084      	sub	sp, #16
 8017118:	af00      	add	r7, sp, #0
 801711a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801711c:	2300      	movs	r3, #0
 801711e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017120:	2300      	movs	r3, #0
 8017122:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801712a:	4618      	mov	r0, r3
 801712c:	f7f1 f86d 	bl	800820a <HAL_HCD_Stop>
 8017130:	4603      	mov	r3, r0
 8017132:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017134:	7bfb      	ldrb	r3, [r7, #15]
 8017136:	4618      	mov	r0, r3
 8017138:	f000 f808 	bl	801714c <USBH_Get_USB_Status>
 801713c:	4603      	mov	r3, r0
 801713e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017140:	7bbb      	ldrb	r3, [r7, #14]
}
 8017142:	4618      	mov	r0, r3
 8017144:	3710      	adds	r7, #16
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}
	...

0801714c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801714c:	b480      	push	{r7}
 801714e:	b085      	sub	sp, #20
 8017150:	af00      	add	r7, sp, #0
 8017152:	4603      	mov	r3, r0
 8017154:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017156:	2300      	movs	r3, #0
 8017158:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801715a:	79fb      	ldrb	r3, [r7, #7]
 801715c:	2b03      	cmp	r3, #3
 801715e:	d817      	bhi.n	8017190 <USBH_Get_USB_Status+0x44>
 8017160:	a201      	add	r2, pc, #4	@ (adr r2, 8017168 <USBH_Get_USB_Status+0x1c>)
 8017162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017166:	bf00      	nop
 8017168:	08017179 	.word	0x08017179
 801716c:	0801717f 	.word	0x0801717f
 8017170:	08017185 	.word	0x08017185
 8017174:	0801718b 	.word	0x0801718b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8017178:	2300      	movs	r3, #0
 801717a:	73fb      	strb	r3, [r7, #15]
    break;
 801717c:	e00b      	b.n	8017196 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801717e:	2302      	movs	r3, #2
 8017180:	73fb      	strb	r3, [r7, #15]
    break;
 8017182:	e008      	b.n	8017196 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8017184:	2301      	movs	r3, #1
 8017186:	73fb      	strb	r3, [r7, #15]
    break;
 8017188:	e005      	b.n	8017196 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801718a:	2302      	movs	r3, #2
 801718c:	73fb      	strb	r3, [r7, #15]
    break;
 801718e:	e002      	b.n	8017196 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8017190:	2302      	movs	r3, #2
 8017192:	73fb      	strb	r3, [r7, #15]
    break;
 8017194:	bf00      	nop
  }
  return usb_status;
 8017196:	7bfb      	ldrb	r3, [r7, #15]
}
 8017198:	4618      	mov	r0, r3
 801719a:	3714      	adds	r7, #20
 801719c:	46bd      	mov	sp, r7
 801719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a2:	4770      	bx	lr

080171a4 <sbrk_aligned>:
 80171a4:	b570      	push	{r4, r5, r6, lr}
 80171a6:	4e0f      	ldr	r6, [pc, #60]	@ (80171e4 <sbrk_aligned+0x40>)
 80171a8:	460c      	mov	r4, r1
 80171aa:	6831      	ldr	r1, [r6, #0]
 80171ac:	4605      	mov	r5, r0
 80171ae:	b911      	cbnz	r1, 80171b6 <sbrk_aligned+0x12>
 80171b0:	f000 fab8 	bl	8017724 <_sbrk_r>
 80171b4:	6030      	str	r0, [r6, #0]
 80171b6:	4621      	mov	r1, r4
 80171b8:	4628      	mov	r0, r5
 80171ba:	f000 fab3 	bl	8017724 <_sbrk_r>
 80171be:	1c43      	adds	r3, r0, #1
 80171c0:	d103      	bne.n	80171ca <sbrk_aligned+0x26>
 80171c2:	f04f 34ff 	mov.w	r4, #4294967295
 80171c6:	4620      	mov	r0, r4
 80171c8:	bd70      	pop	{r4, r5, r6, pc}
 80171ca:	1cc4      	adds	r4, r0, #3
 80171cc:	f024 0403 	bic.w	r4, r4, #3
 80171d0:	42a0      	cmp	r0, r4
 80171d2:	d0f8      	beq.n	80171c6 <sbrk_aligned+0x22>
 80171d4:	1a21      	subs	r1, r4, r0
 80171d6:	4628      	mov	r0, r5
 80171d8:	f000 faa4 	bl	8017724 <_sbrk_r>
 80171dc:	3001      	adds	r0, #1
 80171de:	d1f2      	bne.n	80171c6 <sbrk_aligned+0x22>
 80171e0:	e7ef      	b.n	80171c2 <sbrk_aligned+0x1e>
 80171e2:	bf00      	nop
 80171e4:	20013004 	.word	0x20013004

080171e8 <_malloc_r>:
 80171e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171ec:	1ccd      	adds	r5, r1, #3
 80171ee:	f025 0503 	bic.w	r5, r5, #3
 80171f2:	3508      	adds	r5, #8
 80171f4:	2d0c      	cmp	r5, #12
 80171f6:	bf38      	it	cc
 80171f8:	250c      	movcc	r5, #12
 80171fa:	2d00      	cmp	r5, #0
 80171fc:	4606      	mov	r6, r0
 80171fe:	db01      	blt.n	8017204 <_malloc_r+0x1c>
 8017200:	42a9      	cmp	r1, r5
 8017202:	d904      	bls.n	801720e <_malloc_r+0x26>
 8017204:	230c      	movs	r3, #12
 8017206:	6033      	str	r3, [r6, #0]
 8017208:	2000      	movs	r0, #0
 801720a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801720e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80172e4 <_malloc_r+0xfc>
 8017212:	f000 f869 	bl	80172e8 <__malloc_lock>
 8017216:	f8d8 3000 	ldr.w	r3, [r8]
 801721a:	461c      	mov	r4, r3
 801721c:	bb44      	cbnz	r4, 8017270 <_malloc_r+0x88>
 801721e:	4629      	mov	r1, r5
 8017220:	4630      	mov	r0, r6
 8017222:	f7ff ffbf 	bl	80171a4 <sbrk_aligned>
 8017226:	1c43      	adds	r3, r0, #1
 8017228:	4604      	mov	r4, r0
 801722a:	d158      	bne.n	80172de <_malloc_r+0xf6>
 801722c:	f8d8 4000 	ldr.w	r4, [r8]
 8017230:	4627      	mov	r7, r4
 8017232:	2f00      	cmp	r7, #0
 8017234:	d143      	bne.n	80172be <_malloc_r+0xd6>
 8017236:	2c00      	cmp	r4, #0
 8017238:	d04b      	beq.n	80172d2 <_malloc_r+0xea>
 801723a:	6823      	ldr	r3, [r4, #0]
 801723c:	4639      	mov	r1, r7
 801723e:	4630      	mov	r0, r6
 8017240:	eb04 0903 	add.w	r9, r4, r3
 8017244:	f000 fa6e 	bl	8017724 <_sbrk_r>
 8017248:	4581      	cmp	r9, r0
 801724a:	d142      	bne.n	80172d2 <_malloc_r+0xea>
 801724c:	6821      	ldr	r1, [r4, #0]
 801724e:	1a6d      	subs	r5, r5, r1
 8017250:	4629      	mov	r1, r5
 8017252:	4630      	mov	r0, r6
 8017254:	f7ff ffa6 	bl	80171a4 <sbrk_aligned>
 8017258:	3001      	adds	r0, #1
 801725a:	d03a      	beq.n	80172d2 <_malloc_r+0xea>
 801725c:	6823      	ldr	r3, [r4, #0]
 801725e:	442b      	add	r3, r5
 8017260:	6023      	str	r3, [r4, #0]
 8017262:	f8d8 3000 	ldr.w	r3, [r8]
 8017266:	685a      	ldr	r2, [r3, #4]
 8017268:	bb62      	cbnz	r2, 80172c4 <_malloc_r+0xdc>
 801726a:	f8c8 7000 	str.w	r7, [r8]
 801726e:	e00f      	b.n	8017290 <_malloc_r+0xa8>
 8017270:	6822      	ldr	r2, [r4, #0]
 8017272:	1b52      	subs	r2, r2, r5
 8017274:	d420      	bmi.n	80172b8 <_malloc_r+0xd0>
 8017276:	2a0b      	cmp	r2, #11
 8017278:	d917      	bls.n	80172aa <_malloc_r+0xc2>
 801727a:	1961      	adds	r1, r4, r5
 801727c:	42a3      	cmp	r3, r4
 801727e:	6025      	str	r5, [r4, #0]
 8017280:	bf18      	it	ne
 8017282:	6059      	strne	r1, [r3, #4]
 8017284:	6863      	ldr	r3, [r4, #4]
 8017286:	bf08      	it	eq
 8017288:	f8c8 1000 	streq.w	r1, [r8]
 801728c:	5162      	str	r2, [r4, r5]
 801728e:	604b      	str	r3, [r1, #4]
 8017290:	4630      	mov	r0, r6
 8017292:	f000 f82f 	bl	80172f4 <__malloc_unlock>
 8017296:	f104 000b 	add.w	r0, r4, #11
 801729a:	1d23      	adds	r3, r4, #4
 801729c:	f020 0007 	bic.w	r0, r0, #7
 80172a0:	1ac2      	subs	r2, r0, r3
 80172a2:	bf1c      	itt	ne
 80172a4:	1a1b      	subne	r3, r3, r0
 80172a6:	50a3      	strne	r3, [r4, r2]
 80172a8:	e7af      	b.n	801720a <_malloc_r+0x22>
 80172aa:	6862      	ldr	r2, [r4, #4]
 80172ac:	42a3      	cmp	r3, r4
 80172ae:	bf0c      	ite	eq
 80172b0:	f8c8 2000 	streq.w	r2, [r8]
 80172b4:	605a      	strne	r2, [r3, #4]
 80172b6:	e7eb      	b.n	8017290 <_malloc_r+0xa8>
 80172b8:	4623      	mov	r3, r4
 80172ba:	6864      	ldr	r4, [r4, #4]
 80172bc:	e7ae      	b.n	801721c <_malloc_r+0x34>
 80172be:	463c      	mov	r4, r7
 80172c0:	687f      	ldr	r7, [r7, #4]
 80172c2:	e7b6      	b.n	8017232 <_malloc_r+0x4a>
 80172c4:	461a      	mov	r2, r3
 80172c6:	685b      	ldr	r3, [r3, #4]
 80172c8:	42a3      	cmp	r3, r4
 80172ca:	d1fb      	bne.n	80172c4 <_malloc_r+0xdc>
 80172cc:	2300      	movs	r3, #0
 80172ce:	6053      	str	r3, [r2, #4]
 80172d0:	e7de      	b.n	8017290 <_malloc_r+0xa8>
 80172d2:	230c      	movs	r3, #12
 80172d4:	6033      	str	r3, [r6, #0]
 80172d6:	4630      	mov	r0, r6
 80172d8:	f000 f80c 	bl	80172f4 <__malloc_unlock>
 80172dc:	e794      	b.n	8017208 <_malloc_r+0x20>
 80172de:	6005      	str	r5, [r0, #0]
 80172e0:	e7d6      	b.n	8017290 <_malloc_r+0xa8>
 80172e2:	bf00      	nop
 80172e4:	20013008 	.word	0x20013008

080172e8 <__malloc_lock>:
 80172e8:	4801      	ldr	r0, [pc, #4]	@ (80172f0 <__malloc_lock+0x8>)
 80172ea:	f000 ba68 	b.w	80177be <__retarget_lock_acquire_recursive>
 80172ee:	bf00      	nop
 80172f0:	2001314c 	.word	0x2001314c

080172f4 <__malloc_unlock>:
 80172f4:	4801      	ldr	r0, [pc, #4]	@ (80172fc <__malloc_unlock+0x8>)
 80172f6:	f000 ba63 	b.w	80177c0 <__retarget_lock_release_recursive>
 80172fa:	bf00      	nop
 80172fc:	2001314c 	.word	0x2001314c

08017300 <std>:
 8017300:	2300      	movs	r3, #0
 8017302:	b510      	push	{r4, lr}
 8017304:	4604      	mov	r4, r0
 8017306:	e9c0 3300 	strd	r3, r3, [r0]
 801730a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801730e:	6083      	str	r3, [r0, #8]
 8017310:	8181      	strh	r1, [r0, #12]
 8017312:	6643      	str	r3, [r0, #100]	@ 0x64
 8017314:	81c2      	strh	r2, [r0, #14]
 8017316:	6183      	str	r3, [r0, #24]
 8017318:	4619      	mov	r1, r3
 801731a:	2208      	movs	r2, #8
 801731c:	305c      	adds	r0, #92	@ 0x5c
 801731e:	f000 f99b 	bl	8017658 <memset>
 8017322:	4b0d      	ldr	r3, [pc, #52]	@ (8017358 <std+0x58>)
 8017324:	6263      	str	r3, [r4, #36]	@ 0x24
 8017326:	4b0d      	ldr	r3, [pc, #52]	@ (801735c <std+0x5c>)
 8017328:	62a3      	str	r3, [r4, #40]	@ 0x28
 801732a:	4b0d      	ldr	r3, [pc, #52]	@ (8017360 <std+0x60>)
 801732c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801732e:	4b0d      	ldr	r3, [pc, #52]	@ (8017364 <std+0x64>)
 8017330:	6323      	str	r3, [r4, #48]	@ 0x30
 8017332:	4b0d      	ldr	r3, [pc, #52]	@ (8017368 <std+0x68>)
 8017334:	6224      	str	r4, [r4, #32]
 8017336:	429c      	cmp	r4, r3
 8017338:	d006      	beq.n	8017348 <std+0x48>
 801733a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801733e:	4294      	cmp	r4, r2
 8017340:	d002      	beq.n	8017348 <std+0x48>
 8017342:	33d0      	adds	r3, #208	@ 0xd0
 8017344:	429c      	cmp	r4, r3
 8017346:	d105      	bne.n	8017354 <std+0x54>
 8017348:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801734c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017350:	f000 ba34 	b.w	80177bc <__retarget_lock_init_recursive>
 8017354:	bd10      	pop	{r4, pc}
 8017356:	bf00      	nop
 8017358:	08017559 	.word	0x08017559
 801735c:	0801757b 	.word	0x0801757b
 8017360:	080175b3 	.word	0x080175b3
 8017364:	080175d7 	.word	0x080175d7
 8017368:	2001300c 	.word	0x2001300c

0801736c <stdio_exit_handler>:
 801736c:	4a02      	ldr	r2, [pc, #8]	@ (8017378 <stdio_exit_handler+0xc>)
 801736e:	4903      	ldr	r1, [pc, #12]	@ (801737c <stdio_exit_handler+0x10>)
 8017370:	4803      	ldr	r0, [pc, #12]	@ (8017380 <stdio_exit_handler+0x14>)
 8017372:	f000 b869 	b.w	8017448 <_fwalk_sglue>
 8017376:	bf00      	nop
 8017378:	20000074 	.word	0x20000074
 801737c:	080181c9 	.word	0x080181c9
 8017380:	20000084 	.word	0x20000084

08017384 <cleanup_stdio>:
 8017384:	6841      	ldr	r1, [r0, #4]
 8017386:	4b0c      	ldr	r3, [pc, #48]	@ (80173b8 <cleanup_stdio+0x34>)
 8017388:	4299      	cmp	r1, r3
 801738a:	b510      	push	{r4, lr}
 801738c:	4604      	mov	r4, r0
 801738e:	d001      	beq.n	8017394 <cleanup_stdio+0x10>
 8017390:	f000 ff1a 	bl	80181c8 <_fflush_r>
 8017394:	68a1      	ldr	r1, [r4, #8]
 8017396:	4b09      	ldr	r3, [pc, #36]	@ (80173bc <cleanup_stdio+0x38>)
 8017398:	4299      	cmp	r1, r3
 801739a:	d002      	beq.n	80173a2 <cleanup_stdio+0x1e>
 801739c:	4620      	mov	r0, r4
 801739e:	f000 ff13 	bl	80181c8 <_fflush_r>
 80173a2:	68e1      	ldr	r1, [r4, #12]
 80173a4:	4b06      	ldr	r3, [pc, #24]	@ (80173c0 <cleanup_stdio+0x3c>)
 80173a6:	4299      	cmp	r1, r3
 80173a8:	d004      	beq.n	80173b4 <cleanup_stdio+0x30>
 80173aa:	4620      	mov	r0, r4
 80173ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173b0:	f000 bf0a 	b.w	80181c8 <_fflush_r>
 80173b4:	bd10      	pop	{r4, pc}
 80173b6:	bf00      	nop
 80173b8:	2001300c 	.word	0x2001300c
 80173bc:	20013074 	.word	0x20013074
 80173c0:	200130dc 	.word	0x200130dc

080173c4 <global_stdio_init.part.0>:
 80173c4:	b510      	push	{r4, lr}
 80173c6:	4b0b      	ldr	r3, [pc, #44]	@ (80173f4 <global_stdio_init.part.0+0x30>)
 80173c8:	4c0b      	ldr	r4, [pc, #44]	@ (80173f8 <global_stdio_init.part.0+0x34>)
 80173ca:	4a0c      	ldr	r2, [pc, #48]	@ (80173fc <global_stdio_init.part.0+0x38>)
 80173cc:	601a      	str	r2, [r3, #0]
 80173ce:	4620      	mov	r0, r4
 80173d0:	2200      	movs	r2, #0
 80173d2:	2104      	movs	r1, #4
 80173d4:	f7ff ff94 	bl	8017300 <std>
 80173d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80173dc:	2201      	movs	r2, #1
 80173de:	2109      	movs	r1, #9
 80173e0:	f7ff ff8e 	bl	8017300 <std>
 80173e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80173e8:	2202      	movs	r2, #2
 80173ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173ee:	2112      	movs	r1, #18
 80173f0:	f7ff bf86 	b.w	8017300 <std>
 80173f4:	20013144 	.word	0x20013144
 80173f8:	2001300c 	.word	0x2001300c
 80173fc:	0801736d 	.word	0x0801736d

08017400 <__sfp_lock_acquire>:
 8017400:	4801      	ldr	r0, [pc, #4]	@ (8017408 <__sfp_lock_acquire+0x8>)
 8017402:	f000 b9dc 	b.w	80177be <__retarget_lock_acquire_recursive>
 8017406:	bf00      	nop
 8017408:	2001314d 	.word	0x2001314d

0801740c <__sfp_lock_release>:
 801740c:	4801      	ldr	r0, [pc, #4]	@ (8017414 <__sfp_lock_release+0x8>)
 801740e:	f000 b9d7 	b.w	80177c0 <__retarget_lock_release_recursive>
 8017412:	bf00      	nop
 8017414:	2001314d 	.word	0x2001314d

08017418 <__sinit>:
 8017418:	b510      	push	{r4, lr}
 801741a:	4604      	mov	r4, r0
 801741c:	f7ff fff0 	bl	8017400 <__sfp_lock_acquire>
 8017420:	6a23      	ldr	r3, [r4, #32]
 8017422:	b11b      	cbz	r3, 801742c <__sinit+0x14>
 8017424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017428:	f7ff bff0 	b.w	801740c <__sfp_lock_release>
 801742c:	4b04      	ldr	r3, [pc, #16]	@ (8017440 <__sinit+0x28>)
 801742e:	6223      	str	r3, [r4, #32]
 8017430:	4b04      	ldr	r3, [pc, #16]	@ (8017444 <__sinit+0x2c>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	2b00      	cmp	r3, #0
 8017436:	d1f5      	bne.n	8017424 <__sinit+0xc>
 8017438:	f7ff ffc4 	bl	80173c4 <global_stdio_init.part.0>
 801743c:	e7f2      	b.n	8017424 <__sinit+0xc>
 801743e:	bf00      	nop
 8017440:	08017385 	.word	0x08017385
 8017444:	20013144 	.word	0x20013144

08017448 <_fwalk_sglue>:
 8017448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801744c:	4607      	mov	r7, r0
 801744e:	4688      	mov	r8, r1
 8017450:	4614      	mov	r4, r2
 8017452:	2600      	movs	r6, #0
 8017454:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017458:	f1b9 0901 	subs.w	r9, r9, #1
 801745c:	d505      	bpl.n	801746a <_fwalk_sglue+0x22>
 801745e:	6824      	ldr	r4, [r4, #0]
 8017460:	2c00      	cmp	r4, #0
 8017462:	d1f7      	bne.n	8017454 <_fwalk_sglue+0xc>
 8017464:	4630      	mov	r0, r6
 8017466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801746a:	89ab      	ldrh	r3, [r5, #12]
 801746c:	2b01      	cmp	r3, #1
 801746e:	d907      	bls.n	8017480 <_fwalk_sglue+0x38>
 8017470:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017474:	3301      	adds	r3, #1
 8017476:	d003      	beq.n	8017480 <_fwalk_sglue+0x38>
 8017478:	4629      	mov	r1, r5
 801747a:	4638      	mov	r0, r7
 801747c:	47c0      	blx	r8
 801747e:	4306      	orrs	r6, r0
 8017480:	3568      	adds	r5, #104	@ 0x68
 8017482:	e7e9      	b.n	8017458 <_fwalk_sglue+0x10>

08017484 <iprintf>:
 8017484:	b40f      	push	{r0, r1, r2, r3}
 8017486:	b507      	push	{r0, r1, r2, lr}
 8017488:	4906      	ldr	r1, [pc, #24]	@ (80174a4 <iprintf+0x20>)
 801748a:	ab04      	add	r3, sp, #16
 801748c:	6808      	ldr	r0, [r1, #0]
 801748e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017492:	6881      	ldr	r1, [r0, #8]
 8017494:	9301      	str	r3, [sp, #4]
 8017496:	f000 fb6f 	bl	8017b78 <_vfiprintf_r>
 801749a:	b003      	add	sp, #12
 801749c:	f85d eb04 	ldr.w	lr, [sp], #4
 80174a0:	b004      	add	sp, #16
 80174a2:	4770      	bx	lr
 80174a4:	20000080 	.word	0x20000080

080174a8 <sniprintf>:
 80174a8:	b40c      	push	{r2, r3}
 80174aa:	b530      	push	{r4, r5, lr}
 80174ac:	4b18      	ldr	r3, [pc, #96]	@ (8017510 <sniprintf+0x68>)
 80174ae:	1e0c      	subs	r4, r1, #0
 80174b0:	681d      	ldr	r5, [r3, #0]
 80174b2:	b09d      	sub	sp, #116	@ 0x74
 80174b4:	da08      	bge.n	80174c8 <sniprintf+0x20>
 80174b6:	238b      	movs	r3, #139	@ 0x8b
 80174b8:	602b      	str	r3, [r5, #0]
 80174ba:	f04f 30ff 	mov.w	r0, #4294967295
 80174be:	b01d      	add	sp, #116	@ 0x74
 80174c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80174c4:	b002      	add	sp, #8
 80174c6:	4770      	bx	lr
 80174c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80174cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80174d0:	f04f 0300 	mov.w	r3, #0
 80174d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80174d6:	bf14      	ite	ne
 80174d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80174dc:	4623      	moveq	r3, r4
 80174de:	9304      	str	r3, [sp, #16]
 80174e0:	9307      	str	r3, [sp, #28]
 80174e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80174e6:	9002      	str	r0, [sp, #8]
 80174e8:	9006      	str	r0, [sp, #24]
 80174ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80174ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80174f0:	ab21      	add	r3, sp, #132	@ 0x84
 80174f2:	a902      	add	r1, sp, #8
 80174f4:	4628      	mov	r0, r5
 80174f6:	9301      	str	r3, [sp, #4]
 80174f8:	f000 fa18 	bl	801792c <_svfiprintf_r>
 80174fc:	1c43      	adds	r3, r0, #1
 80174fe:	bfbc      	itt	lt
 8017500:	238b      	movlt	r3, #139	@ 0x8b
 8017502:	602b      	strlt	r3, [r5, #0]
 8017504:	2c00      	cmp	r4, #0
 8017506:	d0da      	beq.n	80174be <sniprintf+0x16>
 8017508:	9b02      	ldr	r3, [sp, #8]
 801750a:	2200      	movs	r2, #0
 801750c:	701a      	strb	r2, [r3, #0]
 801750e:	e7d6      	b.n	80174be <sniprintf+0x16>
 8017510:	20000080 	.word	0x20000080

08017514 <siprintf>:
 8017514:	b40e      	push	{r1, r2, r3}
 8017516:	b510      	push	{r4, lr}
 8017518:	b09d      	sub	sp, #116	@ 0x74
 801751a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801751c:	9002      	str	r0, [sp, #8]
 801751e:	9006      	str	r0, [sp, #24]
 8017520:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017524:	480a      	ldr	r0, [pc, #40]	@ (8017550 <siprintf+0x3c>)
 8017526:	9107      	str	r1, [sp, #28]
 8017528:	9104      	str	r1, [sp, #16]
 801752a:	490a      	ldr	r1, [pc, #40]	@ (8017554 <siprintf+0x40>)
 801752c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017530:	9105      	str	r1, [sp, #20]
 8017532:	2400      	movs	r4, #0
 8017534:	a902      	add	r1, sp, #8
 8017536:	6800      	ldr	r0, [r0, #0]
 8017538:	9301      	str	r3, [sp, #4]
 801753a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801753c:	f000 f9f6 	bl	801792c <_svfiprintf_r>
 8017540:	9b02      	ldr	r3, [sp, #8]
 8017542:	701c      	strb	r4, [r3, #0]
 8017544:	b01d      	add	sp, #116	@ 0x74
 8017546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801754a:	b003      	add	sp, #12
 801754c:	4770      	bx	lr
 801754e:	bf00      	nop
 8017550:	20000080 	.word	0x20000080
 8017554:	ffff0208 	.word	0xffff0208

08017558 <__sread>:
 8017558:	b510      	push	{r4, lr}
 801755a:	460c      	mov	r4, r1
 801755c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017560:	f000 f8ce 	bl	8017700 <_read_r>
 8017564:	2800      	cmp	r0, #0
 8017566:	bfab      	itete	ge
 8017568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801756a:	89a3      	ldrhlt	r3, [r4, #12]
 801756c:	181b      	addge	r3, r3, r0
 801756e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017572:	bfac      	ite	ge
 8017574:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017576:	81a3      	strhlt	r3, [r4, #12]
 8017578:	bd10      	pop	{r4, pc}

0801757a <__swrite>:
 801757a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801757e:	461f      	mov	r7, r3
 8017580:	898b      	ldrh	r3, [r1, #12]
 8017582:	05db      	lsls	r3, r3, #23
 8017584:	4605      	mov	r5, r0
 8017586:	460c      	mov	r4, r1
 8017588:	4616      	mov	r6, r2
 801758a:	d505      	bpl.n	8017598 <__swrite+0x1e>
 801758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017590:	2302      	movs	r3, #2
 8017592:	2200      	movs	r2, #0
 8017594:	f000 f8a2 	bl	80176dc <_lseek_r>
 8017598:	89a3      	ldrh	r3, [r4, #12]
 801759a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801759e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80175a2:	81a3      	strh	r3, [r4, #12]
 80175a4:	4632      	mov	r2, r6
 80175a6:	463b      	mov	r3, r7
 80175a8:	4628      	mov	r0, r5
 80175aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80175ae:	f000 b8c9 	b.w	8017744 <_write_r>

080175b2 <__sseek>:
 80175b2:	b510      	push	{r4, lr}
 80175b4:	460c      	mov	r4, r1
 80175b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175ba:	f000 f88f 	bl	80176dc <_lseek_r>
 80175be:	1c43      	adds	r3, r0, #1
 80175c0:	89a3      	ldrh	r3, [r4, #12]
 80175c2:	bf15      	itete	ne
 80175c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80175c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80175ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80175ce:	81a3      	strheq	r3, [r4, #12]
 80175d0:	bf18      	it	ne
 80175d2:	81a3      	strhne	r3, [r4, #12]
 80175d4:	bd10      	pop	{r4, pc}

080175d6 <__sclose>:
 80175d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175da:	f000 b86f 	b.w	80176bc <_close_r>

080175de <_vsniprintf_r>:
 80175de:	b530      	push	{r4, r5, lr}
 80175e0:	4614      	mov	r4, r2
 80175e2:	2c00      	cmp	r4, #0
 80175e4:	b09b      	sub	sp, #108	@ 0x6c
 80175e6:	4605      	mov	r5, r0
 80175e8:	461a      	mov	r2, r3
 80175ea:	da05      	bge.n	80175f8 <_vsniprintf_r+0x1a>
 80175ec:	238b      	movs	r3, #139	@ 0x8b
 80175ee:	6003      	str	r3, [r0, #0]
 80175f0:	f04f 30ff 	mov.w	r0, #4294967295
 80175f4:	b01b      	add	sp, #108	@ 0x6c
 80175f6:	bd30      	pop	{r4, r5, pc}
 80175f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80175fc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017600:	f04f 0300 	mov.w	r3, #0
 8017604:	9319      	str	r3, [sp, #100]	@ 0x64
 8017606:	bf14      	ite	ne
 8017608:	f104 33ff 	addne.w	r3, r4, #4294967295
 801760c:	4623      	moveq	r3, r4
 801760e:	9302      	str	r3, [sp, #8]
 8017610:	9305      	str	r3, [sp, #20]
 8017612:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017616:	9100      	str	r1, [sp, #0]
 8017618:	9104      	str	r1, [sp, #16]
 801761a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801761e:	4669      	mov	r1, sp
 8017620:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017622:	f000 f983 	bl	801792c <_svfiprintf_r>
 8017626:	1c43      	adds	r3, r0, #1
 8017628:	bfbc      	itt	lt
 801762a:	238b      	movlt	r3, #139	@ 0x8b
 801762c:	602b      	strlt	r3, [r5, #0]
 801762e:	2c00      	cmp	r4, #0
 8017630:	d0e0      	beq.n	80175f4 <_vsniprintf_r+0x16>
 8017632:	9b00      	ldr	r3, [sp, #0]
 8017634:	2200      	movs	r2, #0
 8017636:	701a      	strb	r2, [r3, #0]
 8017638:	e7dc      	b.n	80175f4 <_vsniprintf_r+0x16>
	...

0801763c <vsniprintf>:
 801763c:	b507      	push	{r0, r1, r2, lr}
 801763e:	9300      	str	r3, [sp, #0]
 8017640:	4613      	mov	r3, r2
 8017642:	460a      	mov	r2, r1
 8017644:	4601      	mov	r1, r0
 8017646:	4803      	ldr	r0, [pc, #12]	@ (8017654 <vsniprintf+0x18>)
 8017648:	6800      	ldr	r0, [r0, #0]
 801764a:	f7ff ffc8 	bl	80175de <_vsniprintf_r>
 801764e:	b003      	add	sp, #12
 8017650:	f85d fb04 	ldr.w	pc, [sp], #4
 8017654:	20000080 	.word	0x20000080

08017658 <memset>:
 8017658:	4402      	add	r2, r0
 801765a:	4603      	mov	r3, r0
 801765c:	4293      	cmp	r3, r2
 801765e:	d100      	bne.n	8017662 <memset+0xa>
 8017660:	4770      	bx	lr
 8017662:	f803 1b01 	strb.w	r1, [r3], #1
 8017666:	e7f9      	b.n	801765c <memset+0x4>

08017668 <strncpy>:
 8017668:	b510      	push	{r4, lr}
 801766a:	3901      	subs	r1, #1
 801766c:	4603      	mov	r3, r0
 801766e:	b132      	cbz	r2, 801767e <strncpy+0x16>
 8017670:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017674:	f803 4b01 	strb.w	r4, [r3], #1
 8017678:	3a01      	subs	r2, #1
 801767a:	2c00      	cmp	r4, #0
 801767c:	d1f7      	bne.n	801766e <strncpy+0x6>
 801767e:	441a      	add	r2, r3
 8017680:	2100      	movs	r1, #0
 8017682:	4293      	cmp	r3, r2
 8017684:	d100      	bne.n	8017688 <strncpy+0x20>
 8017686:	bd10      	pop	{r4, pc}
 8017688:	f803 1b01 	strb.w	r1, [r3], #1
 801768c:	e7f9      	b.n	8017682 <strncpy+0x1a>

0801768e <strstr>:
 801768e:	780a      	ldrb	r2, [r1, #0]
 8017690:	b570      	push	{r4, r5, r6, lr}
 8017692:	b96a      	cbnz	r2, 80176b0 <strstr+0x22>
 8017694:	bd70      	pop	{r4, r5, r6, pc}
 8017696:	429a      	cmp	r2, r3
 8017698:	d109      	bne.n	80176ae <strstr+0x20>
 801769a:	460c      	mov	r4, r1
 801769c:	4605      	mov	r5, r0
 801769e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d0f6      	beq.n	8017694 <strstr+0x6>
 80176a6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80176aa:	429e      	cmp	r6, r3
 80176ac:	d0f7      	beq.n	801769e <strstr+0x10>
 80176ae:	3001      	adds	r0, #1
 80176b0:	7803      	ldrb	r3, [r0, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d1ef      	bne.n	8017696 <strstr+0x8>
 80176b6:	4618      	mov	r0, r3
 80176b8:	e7ec      	b.n	8017694 <strstr+0x6>
	...

080176bc <_close_r>:
 80176bc:	b538      	push	{r3, r4, r5, lr}
 80176be:	4d06      	ldr	r5, [pc, #24]	@ (80176d8 <_close_r+0x1c>)
 80176c0:	2300      	movs	r3, #0
 80176c2:	4604      	mov	r4, r0
 80176c4:	4608      	mov	r0, r1
 80176c6:	602b      	str	r3, [r5, #0]
 80176c8:	f7ed fd39 	bl	800513e <_close>
 80176cc:	1c43      	adds	r3, r0, #1
 80176ce:	d102      	bne.n	80176d6 <_close_r+0x1a>
 80176d0:	682b      	ldr	r3, [r5, #0]
 80176d2:	b103      	cbz	r3, 80176d6 <_close_r+0x1a>
 80176d4:	6023      	str	r3, [r4, #0]
 80176d6:	bd38      	pop	{r3, r4, r5, pc}
 80176d8:	20013148 	.word	0x20013148

080176dc <_lseek_r>:
 80176dc:	b538      	push	{r3, r4, r5, lr}
 80176de:	4d07      	ldr	r5, [pc, #28]	@ (80176fc <_lseek_r+0x20>)
 80176e0:	4604      	mov	r4, r0
 80176e2:	4608      	mov	r0, r1
 80176e4:	4611      	mov	r1, r2
 80176e6:	2200      	movs	r2, #0
 80176e8:	602a      	str	r2, [r5, #0]
 80176ea:	461a      	mov	r2, r3
 80176ec:	f7ed fd4e 	bl	800518c <_lseek>
 80176f0:	1c43      	adds	r3, r0, #1
 80176f2:	d102      	bne.n	80176fa <_lseek_r+0x1e>
 80176f4:	682b      	ldr	r3, [r5, #0]
 80176f6:	b103      	cbz	r3, 80176fa <_lseek_r+0x1e>
 80176f8:	6023      	str	r3, [r4, #0]
 80176fa:	bd38      	pop	{r3, r4, r5, pc}
 80176fc:	20013148 	.word	0x20013148

08017700 <_read_r>:
 8017700:	b538      	push	{r3, r4, r5, lr}
 8017702:	4d07      	ldr	r5, [pc, #28]	@ (8017720 <_read_r+0x20>)
 8017704:	4604      	mov	r4, r0
 8017706:	4608      	mov	r0, r1
 8017708:	4611      	mov	r1, r2
 801770a:	2200      	movs	r2, #0
 801770c:	602a      	str	r2, [r5, #0]
 801770e:	461a      	mov	r2, r3
 8017710:	f7ed fcdc 	bl	80050cc <_read>
 8017714:	1c43      	adds	r3, r0, #1
 8017716:	d102      	bne.n	801771e <_read_r+0x1e>
 8017718:	682b      	ldr	r3, [r5, #0]
 801771a:	b103      	cbz	r3, 801771e <_read_r+0x1e>
 801771c:	6023      	str	r3, [r4, #0]
 801771e:	bd38      	pop	{r3, r4, r5, pc}
 8017720:	20013148 	.word	0x20013148

08017724 <_sbrk_r>:
 8017724:	b538      	push	{r3, r4, r5, lr}
 8017726:	4d06      	ldr	r5, [pc, #24]	@ (8017740 <_sbrk_r+0x1c>)
 8017728:	2300      	movs	r3, #0
 801772a:	4604      	mov	r4, r0
 801772c:	4608      	mov	r0, r1
 801772e:	602b      	str	r3, [r5, #0]
 8017730:	f7ed fd3a 	bl	80051a8 <_sbrk>
 8017734:	1c43      	adds	r3, r0, #1
 8017736:	d102      	bne.n	801773e <_sbrk_r+0x1a>
 8017738:	682b      	ldr	r3, [r5, #0]
 801773a:	b103      	cbz	r3, 801773e <_sbrk_r+0x1a>
 801773c:	6023      	str	r3, [r4, #0]
 801773e:	bd38      	pop	{r3, r4, r5, pc}
 8017740:	20013148 	.word	0x20013148

08017744 <_write_r>:
 8017744:	b538      	push	{r3, r4, r5, lr}
 8017746:	4d07      	ldr	r5, [pc, #28]	@ (8017764 <_write_r+0x20>)
 8017748:	4604      	mov	r4, r0
 801774a:	4608      	mov	r0, r1
 801774c:	4611      	mov	r1, r2
 801774e:	2200      	movs	r2, #0
 8017750:	602a      	str	r2, [r5, #0]
 8017752:	461a      	mov	r2, r3
 8017754:	f7ed fcd7 	bl	8005106 <_write>
 8017758:	1c43      	adds	r3, r0, #1
 801775a:	d102      	bne.n	8017762 <_write_r+0x1e>
 801775c:	682b      	ldr	r3, [r5, #0]
 801775e:	b103      	cbz	r3, 8017762 <_write_r+0x1e>
 8017760:	6023      	str	r3, [r4, #0]
 8017762:	bd38      	pop	{r3, r4, r5, pc}
 8017764:	20013148 	.word	0x20013148

08017768 <__errno>:
 8017768:	4b01      	ldr	r3, [pc, #4]	@ (8017770 <__errno+0x8>)
 801776a:	6818      	ldr	r0, [r3, #0]
 801776c:	4770      	bx	lr
 801776e:	bf00      	nop
 8017770:	20000080 	.word	0x20000080

08017774 <__libc_init_array>:
 8017774:	b570      	push	{r4, r5, r6, lr}
 8017776:	4d0d      	ldr	r5, [pc, #52]	@ (80177ac <__libc_init_array+0x38>)
 8017778:	4c0d      	ldr	r4, [pc, #52]	@ (80177b0 <__libc_init_array+0x3c>)
 801777a:	1b64      	subs	r4, r4, r5
 801777c:	10a4      	asrs	r4, r4, #2
 801777e:	2600      	movs	r6, #0
 8017780:	42a6      	cmp	r6, r4
 8017782:	d109      	bne.n	8017798 <__libc_init_array+0x24>
 8017784:	4d0b      	ldr	r5, [pc, #44]	@ (80177b4 <__libc_init_array+0x40>)
 8017786:	4c0c      	ldr	r4, [pc, #48]	@ (80177b8 <__libc_init_array+0x44>)
 8017788:	f000 feae 	bl	80184e8 <_init>
 801778c:	1b64      	subs	r4, r4, r5
 801778e:	10a4      	asrs	r4, r4, #2
 8017790:	2600      	movs	r6, #0
 8017792:	42a6      	cmp	r6, r4
 8017794:	d105      	bne.n	80177a2 <__libc_init_array+0x2e>
 8017796:	bd70      	pop	{r4, r5, r6, pc}
 8017798:	f855 3b04 	ldr.w	r3, [r5], #4
 801779c:	4798      	blx	r3
 801779e:	3601      	adds	r6, #1
 80177a0:	e7ee      	b.n	8017780 <__libc_init_array+0xc>
 80177a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80177a6:	4798      	blx	r3
 80177a8:	3601      	adds	r6, #1
 80177aa:	e7f2      	b.n	8017792 <__libc_init_array+0x1e>
 80177ac:	0801ba2c 	.word	0x0801ba2c
 80177b0:	0801ba2c 	.word	0x0801ba2c
 80177b4:	0801ba2c 	.word	0x0801ba2c
 80177b8:	0801ba30 	.word	0x0801ba30

080177bc <__retarget_lock_init_recursive>:
 80177bc:	4770      	bx	lr

080177be <__retarget_lock_acquire_recursive>:
 80177be:	4770      	bx	lr

080177c0 <__retarget_lock_release_recursive>:
 80177c0:	4770      	bx	lr

080177c2 <memcpy>:
 80177c2:	440a      	add	r2, r1
 80177c4:	4291      	cmp	r1, r2
 80177c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80177ca:	d100      	bne.n	80177ce <memcpy+0xc>
 80177cc:	4770      	bx	lr
 80177ce:	b510      	push	{r4, lr}
 80177d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177d8:	4291      	cmp	r1, r2
 80177da:	d1f9      	bne.n	80177d0 <memcpy+0xe>
 80177dc:	bd10      	pop	{r4, pc}
	...

080177e0 <_free_r>:
 80177e0:	b538      	push	{r3, r4, r5, lr}
 80177e2:	4605      	mov	r5, r0
 80177e4:	2900      	cmp	r1, #0
 80177e6:	d041      	beq.n	801786c <_free_r+0x8c>
 80177e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177ec:	1f0c      	subs	r4, r1, #4
 80177ee:	2b00      	cmp	r3, #0
 80177f0:	bfb8      	it	lt
 80177f2:	18e4      	addlt	r4, r4, r3
 80177f4:	f7ff fd78 	bl	80172e8 <__malloc_lock>
 80177f8:	4a1d      	ldr	r2, [pc, #116]	@ (8017870 <_free_r+0x90>)
 80177fa:	6813      	ldr	r3, [r2, #0]
 80177fc:	b933      	cbnz	r3, 801780c <_free_r+0x2c>
 80177fe:	6063      	str	r3, [r4, #4]
 8017800:	6014      	str	r4, [r2, #0]
 8017802:	4628      	mov	r0, r5
 8017804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017808:	f7ff bd74 	b.w	80172f4 <__malloc_unlock>
 801780c:	42a3      	cmp	r3, r4
 801780e:	d908      	bls.n	8017822 <_free_r+0x42>
 8017810:	6820      	ldr	r0, [r4, #0]
 8017812:	1821      	adds	r1, r4, r0
 8017814:	428b      	cmp	r3, r1
 8017816:	bf01      	itttt	eq
 8017818:	6819      	ldreq	r1, [r3, #0]
 801781a:	685b      	ldreq	r3, [r3, #4]
 801781c:	1809      	addeq	r1, r1, r0
 801781e:	6021      	streq	r1, [r4, #0]
 8017820:	e7ed      	b.n	80177fe <_free_r+0x1e>
 8017822:	461a      	mov	r2, r3
 8017824:	685b      	ldr	r3, [r3, #4]
 8017826:	b10b      	cbz	r3, 801782c <_free_r+0x4c>
 8017828:	42a3      	cmp	r3, r4
 801782a:	d9fa      	bls.n	8017822 <_free_r+0x42>
 801782c:	6811      	ldr	r1, [r2, #0]
 801782e:	1850      	adds	r0, r2, r1
 8017830:	42a0      	cmp	r0, r4
 8017832:	d10b      	bne.n	801784c <_free_r+0x6c>
 8017834:	6820      	ldr	r0, [r4, #0]
 8017836:	4401      	add	r1, r0
 8017838:	1850      	adds	r0, r2, r1
 801783a:	4283      	cmp	r3, r0
 801783c:	6011      	str	r1, [r2, #0]
 801783e:	d1e0      	bne.n	8017802 <_free_r+0x22>
 8017840:	6818      	ldr	r0, [r3, #0]
 8017842:	685b      	ldr	r3, [r3, #4]
 8017844:	6053      	str	r3, [r2, #4]
 8017846:	4408      	add	r0, r1
 8017848:	6010      	str	r0, [r2, #0]
 801784a:	e7da      	b.n	8017802 <_free_r+0x22>
 801784c:	d902      	bls.n	8017854 <_free_r+0x74>
 801784e:	230c      	movs	r3, #12
 8017850:	602b      	str	r3, [r5, #0]
 8017852:	e7d6      	b.n	8017802 <_free_r+0x22>
 8017854:	6820      	ldr	r0, [r4, #0]
 8017856:	1821      	adds	r1, r4, r0
 8017858:	428b      	cmp	r3, r1
 801785a:	bf04      	itt	eq
 801785c:	6819      	ldreq	r1, [r3, #0]
 801785e:	685b      	ldreq	r3, [r3, #4]
 8017860:	6063      	str	r3, [r4, #4]
 8017862:	bf04      	itt	eq
 8017864:	1809      	addeq	r1, r1, r0
 8017866:	6021      	streq	r1, [r4, #0]
 8017868:	6054      	str	r4, [r2, #4]
 801786a:	e7ca      	b.n	8017802 <_free_r+0x22>
 801786c:	bd38      	pop	{r3, r4, r5, pc}
 801786e:	bf00      	nop
 8017870:	20013008 	.word	0x20013008

08017874 <__ssputs_r>:
 8017874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017878:	688e      	ldr	r6, [r1, #8]
 801787a:	461f      	mov	r7, r3
 801787c:	42be      	cmp	r6, r7
 801787e:	680b      	ldr	r3, [r1, #0]
 8017880:	4682      	mov	sl, r0
 8017882:	460c      	mov	r4, r1
 8017884:	4690      	mov	r8, r2
 8017886:	d82d      	bhi.n	80178e4 <__ssputs_r+0x70>
 8017888:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801788c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017890:	d026      	beq.n	80178e0 <__ssputs_r+0x6c>
 8017892:	6965      	ldr	r5, [r4, #20]
 8017894:	6909      	ldr	r1, [r1, #16]
 8017896:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801789a:	eba3 0901 	sub.w	r9, r3, r1
 801789e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80178a2:	1c7b      	adds	r3, r7, #1
 80178a4:	444b      	add	r3, r9
 80178a6:	106d      	asrs	r5, r5, #1
 80178a8:	429d      	cmp	r5, r3
 80178aa:	bf38      	it	cc
 80178ac:	461d      	movcc	r5, r3
 80178ae:	0553      	lsls	r3, r2, #21
 80178b0:	d527      	bpl.n	8017902 <__ssputs_r+0x8e>
 80178b2:	4629      	mov	r1, r5
 80178b4:	f7ff fc98 	bl	80171e8 <_malloc_r>
 80178b8:	4606      	mov	r6, r0
 80178ba:	b360      	cbz	r0, 8017916 <__ssputs_r+0xa2>
 80178bc:	6921      	ldr	r1, [r4, #16]
 80178be:	464a      	mov	r2, r9
 80178c0:	f7ff ff7f 	bl	80177c2 <memcpy>
 80178c4:	89a3      	ldrh	r3, [r4, #12]
 80178c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80178ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80178ce:	81a3      	strh	r3, [r4, #12]
 80178d0:	6126      	str	r6, [r4, #16]
 80178d2:	6165      	str	r5, [r4, #20]
 80178d4:	444e      	add	r6, r9
 80178d6:	eba5 0509 	sub.w	r5, r5, r9
 80178da:	6026      	str	r6, [r4, #0]
 80178dc:	60a5      	str	r5, [r4, #8]
 80178de:	463e      	mov	r6, r7
 80178e0:	42be      	cmp	r6, r7
 80178e2:	d900      	bls.n	80178e6 <__ssputs_r+0x72>
 80178e4:	463e      	mov	r6, r7
 80178e6:	6820      	ldr	r0, [r4, #0]
 80178e8:	4632      	mov	r2, r6
 80178ea:	4641      	mov	r1, r8
 80178ec:	f000 fd28 	bl	8018340 <memmove>
 80178f0:	68a3      	ldr	r3, [r4, #8]
 80178f2:	1b9b      	subs	r3, r3, r6
 80178f4:	60a3      	str	r3, [r4, #8]
 80178f6:	6823      	ldr	r3, [r4, #0]
 80178f8:	4433      	add	r3, r6
 80178fa:	6023      	str	r3, [r4, #0]
 80178fc:	2000      	movs	r0, #0
 80178fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017902:	462a      	mov	r2, r5
 8017904:	f000 fd36 	bl	8018374 <_realloc_r>
 8017908:	4606      	mov	r6, r0
 801790a:	2800      	cmp	r0, #0
 801790c:	d1e0      	bne.n	80178d0 <__ssputs_r+0x5c>
 801790e:	6921      	ldr	r1, [r4, #16]
 8017910:	4650      	mov	r0, sl
 8017912:	f7ff ff65 	bl	80177e0 <_free_r>
 8017916:	230c      	movs	r3, #12
 8017918:	f8ca 3000 	str.w	r3, [sl]
 801791c:	89a3      	ldrh	r3, [r4, #12]
 801791e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017922:	81a3      	strh	r3, [r4, #12]
 8017924:	f04f 30ff 	mov.w	r0, #4294967295
 8017928:	e7e9      	b.n	80178fe <__ssputs_r+0x8a>
	...

0801792c <_svfiprintf_r>:
 801792c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017930:	4698      	mov	r8, r3
 8017932:	898b      	ldrh	r3, [r1, #12]
 8017934:	061b      	lsls	r3, r3, #24
 8017936:	b09d      	sub	sp, #116	@ 0x74
 8017938:	4607      	mov	r7, r0
 801793a:	460d      	mov	r5, r1
 801793c:	4614      	mov	r4, r2
 801793e:	d510      	bpl.n	8017962 <_svfiprintf_r+0x36>
 8017940:	690b      	ldr	r3, [r1, #16]
 8017942:	b973      	cbnz	r3, 8017962 <_svfiprintf_r+0x36>
 8017944:	2140      	movs	r1, #64	@ 0x40
 8017946:	f7ff fc4f 	bl	80171e8 <_malloc_r>
 801794a:	6028      	str	r0, [r5, #0]
 801794c:	6128      	str	r0, [r5, #16]
 801794e:	b930      	cbnz	r0, 801795e <_svfiprintf_r+0x32>
 8017950:	230c      	movs	r3, #12
 8017952:	603b      	str	r3, [r7, #0]
 8017954:	f04f 30ff 	mov.w	r0, #4294967295
 8017958:	b01d      	add	sp, #116	@ 0x74
 801795a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801795e:	2340      	movs	r3, #64	@ 0x40
 8017960:	616b      	str	r3, [r5, #20]
 8017962:	2300      	movs	r3, #0
 8017964:	9309      	str	r3, [sp, #36]	@ 0x24
 8017966:	2320      	movs	r3, #32
 8017968:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801796c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017970:	2330      	movs	r3, #48	@ 0x30
 8017972:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017b10 <_svfiprintf_r+0x1e4>
 8017976:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801797a:	f04f 0901 	mov.w	r9, #1
 801797e:	4623      	mov	r3, r4
 8017980:	469a      	mov	sl, r3
 8017982:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017986:	b10a      	cbz	r2, 801798c <_svfiprintf_r+0x60>
 8017988:	2a25      	cmp	r2, #37	@ 0x25
 801798a:	d1f9      	bne.n	8017980 <_svfiprintf_r+0x54>
 801798c:	ebba 0b04 	subs.w	fp, sl, r4
 8017990:	d00b      	beq.n	80179aa <_svfiprintf_r+0x7e>
 8017992:	465b      	mov	r3, fp
 8017994:	4622      	mov	r2, r4
 8017996:	4629      	mov	r1, r5
 8017998:	4638      	mov	r0, r7
 801799a:	f7ff ff6b 	bl	8017874 <__ssputs_r>
 801799e:	3001      	adds	r0, #1
 80179a0:	f000 80a7 	beq.w	8017af2 <_svfiprintf_r+0x1c6>
 80179a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80179a6:	445a      	add	r2, fp
 80179a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80179aa:	f89a 3000 	ldrb.w	r3, [sl]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	f000 809f 	beq.w	8017af2 <_svfiprintf_r+0x1c6>
 80179b4:	2300      	movs	r3, #0
 80179b6:	f04f 32ff 	mov.w	r2, #4294967295
 80179ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80179be:	f10a 0a01 	add.w	sl, sl, #1
 80179c2:	9304      	str	r3, [sp, #16]
 80179c4:	9307      	str	r3, [sp, #28]
 80179c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80179ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80179cc:	4654      	mov	r4, sl
 80179ce:	2205      	movs	r2, #5
 80179d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179d4:	484e      	ldr	r0, [pc, #312]	@ (8017b10 <_svfiprintf_r+0x1e4>)
 80179d6:	f7e8 fc33 	bl	8000240 <memchr>
 80179da:	9a04      	ldr	r2, [sp, #16]
 80179dc:	b9d8      	cbnz	r0, 8017a16 <_svfiprintf_r+0xea>
 80179de:	06d0      	lsls	r0, r2, #27
 80179e0:	bf44      	itt	mi
 80179e2:	2320      	movmi	r3, #32
 80179e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179e8:	0711      	lsls	r1, r2, #28
 80179ea:	bf44      	itt	mi
 80179ec:	232b      	movmi	r3, #43	@ 0x2b
 80179ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80179f2:	f89a 3000 	ldrb.w	r3, [sl]
 80179f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80179f8:	d015      	beq.n	8017a26 <_svfiprintf_r+0xfa>
 80179fa:	9a07      	ldr	r2, [sp, #28]
 80179fc:	4654      	mov	r4, sl
 80179fe:	2000      	movs	r0, #0
 8017a00:	f04f 0c0a 	mov.w	ip, #10
 8017a04:	4621      	mov	r1, r4
 8017a06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017a0a:	3b30      	subs	r3, #48	@ 0x30
 8017a0c:	2b09      	cmp	r3, #9
 8017a0e:	d94b      	bls.n	8017aa8 <_svfiprintf_r+0x17c>
 8017a10:	b1b0      	cbz	r0, 8017a40 <_svfiprintf_r+0x114>
 8017a12:	9207      	str	r2, [sp, #28]
 8017a14:	e014      	b.n	8017a40 <_svfiprintf_r+0x114>
 8017a16:	eba0 0308 	sub.w	r3, r0, r8
 8017a1a:	fa09 f303 	lsl.w	r3, r9, r3
 8017a1e:	4313      	orrs	r3, r2
 8017a20:	9304      	str	r3, [sp, #16]
 8017a22:	46a2      	mov	sl, r4
 8017a24:	e7d2      	b.n	80179cc <_svfiprintf_r+0xa0>
 8017a26:	9b03      	ldr	r3, [sp, #12]
 8017a28:	1d19      	adds	r1, r3, #4
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	9103      	str	r1, [sp, #12]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	bfbb      	ittet	lt
 8017a32:	425b      	neglt	r3, r3
 8017a34:	f042 0202 	orrlt.w	r2, r2, #2
 8017a38:	9307      	strge	r3, [sp, #28]
 8017a3a:	9307      	strlt	r3, [sp, #28]
 8017a3c:	bfb8      	it	lt
 8017a3e:	9204      	strlt	r2, [sp, #16]
 8017a40:	7823      	ldrb	r3, [r4, #0]
 8017a42:	2b2e      	cmp	r3, #46	@ 0x2e
 8017a44:	d10a      	bne.n	8017a5c <_svfiprintf_r+0x130>
 8017a46:	7863      	ldrb	r3, [r4, #1]
 8017a48:	2b2a      	cmp	r3, #42	@ 0x2a
 8017a4a:	d132      	bne.n	8017ab2 <_svfiprintf_r+0x186>
 8017a4c:	9b03      	ldr	r3, [sp, #12]
 8017a4e:	1d1a      	adds	r2, r3, #4
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	9203      	str	r2, [sp, #12]
 8017a54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017a58:	3402      	adds	r4, #2
 8017a5a:	9305      	str	r3, [sp, #20]
 8017a5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017b20 <_svfiprintf_r+0x1f4>
 8017a60:	7821      	ldrb	r1, [r4, #0]
 8017a62:	2203      	movs	r2, #3
 8017a64:	4650      	mov	r0, sl
 8017a66:	f7e8 fbeb 	bl	8000240 <memchr>
 8017a6a:	b138      	cbz	r0, 8017a7c <_svfiprintf_r+0x150>
 8017a6c:	9b04      	ldr	r3, [sp, #16]
 8017a6e:	eba0 000a 	sub.w	r0, r0, sl
 8017a72:	2240      	movs	r2, #64	@ 0x40
 8017a74:	4082      	lsls	r2, r0
 8017a76:	4313      	orrs	r3, r2
 8017a78:	3401      	adds	r4, #1
 8017a7a:	9304      	str	r3, [sp, #16]
 8017a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a80:	4824      	ldr	r0, [pc, #144]	@ (8017b14 <_svfiprintf_r+0x1e8>)
 8017a82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017a86:	2206      	movs	r2, #6
 8017a88:	f7e8 fbda 	bl	8000240 <memchr>
 8017a8c:	2800      	cmp	r0, #0
 8017a8e:	d036      	beq.n	8017afe <_svfiprintf_r+0x1d2>
 8017a90:	4b21      	ldr	r3, [pc, #132]	@ (8017b18 <_svfiprintf_r+0x1ec>)
 8017a92:	bb1b      	cbnz	r3, 8017adc <_svfiprintf_r+0x1b0>
 8017a94:	9b03      	ldr	r3, [sp, #12]
 8017a96:	3307      	adds	r3, #7
 8017a98:	f023 0307 	bic.w	r3, r3, #7
 8017a9c:	3308      	adds	r3, #8
 8017a9e:	9303      	str	r3, [sp, #12]
 8017aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017aa2:	4433      	add	r3, r6
 8017aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8017aa6:	e76a      	b.n	801797e <_svfiprintf_r+0x52>
 8017aa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8017aac:	460c      	mov	r4, r1
 8017aae:	2001      	movs	r0, #1
 8017ab0:	e7a8      	b.n	8017a04 <_svfiprintf_r+0xd8>
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	3401      	adds	r4, #1
 8017ab6:	9305      	str	r3, [sp, #20]
 8017ab8:	4619      	mov	r1, r3
 8017aba:	f04f 0c0a 	mov.w	ip, #10
 8017abe:	4620      	mov	r0, r4
 8017ac0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017ac4:	3a30      	subs	r2, #48	@ 0x30
 8017ac6:	2a09      	cmp	r2, #9
 8017ac8:	d903      	bls.n	8017ad2 <_svfiprintf_r+0x1a6>
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d0c6      	beq.n	8017a5c <_svfiprintf_r+0x130>
 8017ace:	9105      	str	r1, [sp, #20]
 8017ad0:	e7c4      	b.n	8017a5c <_svfiprintf_r+0x130>
 8017ad2:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ad6:	4604      	mov	r4, r0
 8017ad8:	2301      	movs	r3, #1
 8017ada:	e7f0      	b.n	8017abe <_svfiprintf_r+0x192>
 8017adc:	ab03      	add	r3, sp, #12
 8017ade:	9300      	str	r3, [sp, #0]
 8017ae0:	462a      	mov	r2, r5
 8017ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8017b1c <_svfiprintf_r+0x1f0>)
 8017ae4:	a904      	add	r1, sp, #16
 8017ae6:	4638      	mov	r0, r7
 8017ae8:	f3af 8000 	nop.w
 8017aec:	1c42      	adds	r2, r0, #1
 8017aee:	4606      	mov	r6, r0
 8017af0:	d1d6      	bne.n	8017aa0 <_svfiprintf_r+0x174>
 8017af2:	89ab      	ldrh	r3, [r5, #12]
 8017af4:	065b      	lsls	r3, r3, #25
 8017af6:	f53f af2d 	bmi.w	8017954 <_svfiprintf_r+0x28>
 8017afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017afc:	e72c      	b.n	8017958 <_svfiprintf_r+0x2c>
 8017afe:	ab03      	add	r3, sp, #12
 8017b00:	9300      	str	r3, [sp, #0]
 8017b02:	462a      	mov	r2, r5
 8017b04:	4b05      	ldr	r3, [pc, #20]	@ (8017b1c <_svfiprintf_r+0x1f0>)
 8017b06:	a904      	add	r1, sp, #16
 8017b08:	4638      	mov	r0, r7
 8017b0a:	f000 f9bb 	bl	8017e84 <_printf_i>
 8017b0e:	e7ed      	b.n	8017aec <_svfiprintf_r+0x1c0>
 8017b10:	0801b9ee 	.word	0x0801b9ee
 8017b14:	0801b9f8 	.word	0x0801b9f8
 8017b18:	00000000 	.word	0x00000000
 8017b1c:	08017875 	.word	0x08017875
 8017b20:	0801b9f4 	.word	0x0801b9f4

08017b24 <__sfputc_r>:
 8017b24:	6893      	ldr	r3, [r2, #8]
 8017b26:	3b01      	subs	r3, #1
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	b410      	push	{r4}
 8017b2c:	6093      	str	r3, [r2, #8]
 8017b2e:	da08      	bge.n	8017b42 <__sfputc_r+0x1e>
 8017b30:	6994      	ldr	r4, [r2, #24]
 8017b32:	42a3      	cmp	r3, r4
 8017b34:	db01      	blt.n	8017b3a <__sfputc_r+0x16>
 8017b36:	290a      	cmp	r1, #10
 8017b38:	d103      	bne.n	8017b42 <__sfputc_r+0x1e>
 8017b3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b3e:	f000 bb6b 	b.w	8018218 <__swbuf_r>
 8017b42:	6813      	ldr	r3, [r2, #0]
 8017b44:	1c58      	adds	r0, r3, #1
 8017b46:	6010      	str	r0, [r2, #0]
 8017b48:	7019      	strb	r1, [r3, #0]
 8017b4a:	4608      	mov	r0, r1
 8017b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017b50:	4770      	bx	lr

08017b52 <__sfputs_r>:
 8017b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b54:	4606      	mov	r6, r0
 8017b56:	460f      	mov	r7, r1
 8017b58:	4614      	mov	r4, r2
 8017b5a:	18d5      	adds	r5, r2, r3
 8017b5c:	42ac      	cmp	r4, r5
 8017b5e:	d101      	bne.n	8017b64 <__sfputs_r+0x12>
 8017b60:	2000      	movs	r0, #0
 8017b62:	e007      	b.n	8017b74 <__sfputs_r+0x22>
 8017b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b68:	463a      	mov	r2, r7
 8017b6a:	4630      	mov	r0, r6
 8017b6c:	f7ff ffda 	bl	8017b24 <__sfputc_r>
 8017b70:	1c43      	adds	r3, r0, #1
 8017b72:	d1f3      	bne.n	8017b5c <__sfputs_r+0xa>
 8017b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017b78 <_vfiprintf_r>:
 8017b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b7c:	460d      	mov	r5, r1
 8017b7e:	b09d      	sub	sp, #116	@ 0x74
 8017b80:	4614      	mov	r4, r2
 8017b82:	4698      	mov	r8, r3
 8017b84:	4606      	mov	r6, r0
 8017b86:	b118      	cbz	r0, 8017b90 <_vfiprintf_r+0x18>
 8017b88:	6a03      	ldr	r3, [r0, #32]
 8017b8a:	b90b      	cbnz	r3, 8017b90 <_vfiprintf_r+0x18>
 8017b8c:	f7ff fc44 	bl	8017418 <__sinit>
 8017b90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017b92:	07d9      	lsls	r1, r3, #31
 8017b94:	d405      	bmi.n	8017ba2 <_vfiprintf_r+0x2a>
 8017b96:	89ab      	ldrh	r3, [r5, #12]
 8017b98:	059a      	lsls	r2, r3, #22
 8017b9a:	d402      	bmi.n	8017ba2 <_vfiprintf_r+0x2a>
 8017b9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017b9e:	f7ff fe0e 	bl	80177be <__retarget_lock_acquire_recursive>
 8017ba2:	89ab      	ldrh	r3, [r5, #12]
 8017ba4:	071b      	lsls	r3, r3, #28
 8017ba6:	d501      	bpl.n	8017bac <_vfiprintf_r+0x34>
 8017ba8:	692b      	ldr	r3, [r5, #16]
 8017baa:	b99b      	cbnz	r3, 8017bd4 <_vfiprintf_r+0x5c>
 8017bac:	4629      	mov	r1, r5
 8017bae:	4630      	mov	r0, r6
 8017bb0:	f000 fb70 	bl	8018294 <__swsetup_r>
 8017bb4:	b170      	cbz	r0, 8017bd4 <_vfiprintf_r+0x5c>
 8017bb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017bb8:	07dc      	lsls	r4, r3, #31
 8017bba:	d504      	bpl.n	8017bc6 <_vfiprintf_r+0x4e>
 8017bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017bc0:	b01d      	add	sp, #116	@ 0x74
 8017bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bc6:	89ab      	ldrh	r3, [r5, #12]
 8017bc8:	0598      	lsls	r0, r3, #22
 8017bca:	d4f7      	bmi.n	8017bbc <_vfiprintf_r+0x44>
 8017bcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017bce:	f7ff fdf7 	bl	80177c0 <__retarget_lock_release_recursive>
 8017bd2:	e7f3      	b.n	8017bbc <_vfiprintf_r+0x44>
 8017bd4:	2300      	movs	r3, #0
 8017bd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8017bd8:	2320      	movs	r3, #32
 8017bda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017bde:	f8cd 800c 	str.w	r8, [sp, #12]
 8017be2:	2330      	movs	r3, #48	@ 0x30
 8017be4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017d94 <_vfiprintf_r+0x21c>
 8017be8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017bec:	f04f 0901 	mov.w	r9, #1
 8017bf0:	4623      	mov	r3, r4
 8017bf2:	469a      	mov	sl, r3
 8017bf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017bf8:	b10a      	cbz	r2, 8017bfe <_vfiprintf_r+0x86>
 8017bfa:	2a25      	cmp	r2, #37	@ 0x25
 8017bfc:	d1f9      	bne.n	8017bf2 <_vfiprintf_r+0x7a>
 8017bfe:	ebba 0b04 	subs.w	fp, sl, r4
 8017c02:	d00b      	beq.n	8017c1c <_vfiprintf_r+0xa4>
 8017c04:	465b      	mov	r3, fp
 8017c06:	4622      	mov	r2, r4
 8017c08:	4629      	mov	r1, r5
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	f7ff ffa1 	bl	8017b52 <__sfputs_r>
 8017c10:	3001      	adds	r0, #1
 8017c12:	f000 80a7 	beq.w	8017d64 <_vfiprintf_r+0x1ec>
 8017c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017c18:	445a      	add	r2, fp
 8017c1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8017c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	f000 809f 	beq.w	8017d64 <_vfiprintf_r+0x1ec>
 8017c26:	2300      	movs	r3, #0
 8017c28:	f04f 32ff 	mov.w	r2, #4294967295
 8017c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c30:	f10a 0a01 	add.w	sl, sl, #1
 8017c34:	9304      	str	r3, [sp, #16]
 8017c36:	9307      	str	r3, [sp, #28]
 8017c38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017c3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8017c3e:	4654      	mov	r4, sl
 8017c40:	2205      	movs	r2, #5
 8017c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c46:	4853      	ldr	r0, [pc, #332]	@ (8017d94 <_vfiprintf_r+0x21c>)
 8017c48:	f7e8 fafa 	bl	8000240 <memchr>
 8017c4c:	9a04      	ldr	r2, [sp, #16]
 8017c4e:	b9d8      	cbnz	r0, 8017c88 <_vfiprintf_r+0x110>
 8017c50:	06d1      	lsls	r1, r2, #27
 8017c52:	bf44      	itt	mi
 8017c54:	2320      	movmi	r3, #32
 8017c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c5a:	0713      	lsls	r3, r2, #28
 8017c5c:	bf44      	itt	mi
 8017c5e:	232b      	movmi	r3, #43	@ 0x2b
 8017c60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017c64:	f89a 3000 	ldrb.w	r3, [sl]
 8017c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8017c6a:	d015      	beq.n	8017c98 <_vfiprintf_r+0x120>
 8017c6c:	9a07      	ldr	r2, [sp, #28]
 8017c6e:	4654      	mov	r4, sl
 8017c70:	2000      	movs	r0, #0
 8017c72:	f04f 0c0a 	mov.w	ip, #10
 8017c76:	4621      	mov	r1, r4
 8017c78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c7c:	3b30      	subs	r3, #48	@ 0x30
 8017c7e:	2b09      	cmp	r3, #9
 8017c80:	d94b      	bls.n	8017d1a <_vfiprintf_r+0x1a2>
 8017c82:	b1b0      	cbz	r0, 8017cb2 <_vfiprintf_r+0x13a>
 8017c84:	9207      	str	r2, [sp, #28]
 8017c86:	e014      	b.n	8017cb2 <_vfiprintf_r+0x13a>
 8017c88:	eba0 0308 	sub.w	r3, r0, r8
 8017c8c:	fa09 f303 	lsl.w	r3, r9, r3
 8017c90:	4313      	orrs	r3, r2
 8017c92:	9304      	str	r3, [sp, #16]
 8017c94:	46a2      	mov	sl, r4
 8017c96:	e7d2      	b.n	8017c3e <_vfiprintf_r+0xc6>
 8017c98:	9b03      	ldr	r3, [sp, #12]
 8017c9a:	1d19      	adds	r1, r3, #4
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	9103      	str	r1, [sp, #12]
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	bfbb      	ittet	lt
 8017ca4:	425b      	neglt	r3, r3
 8017ca6:	f042 0202 	orrlt.w	r2, r2, #2
 8017caa:	9307      	strge	r3, [sp, #28]
 8017cac:	9307      	strlt	r3, [sp, #28]
 8017cae:	bfb8      	it	lt
 8017cb0:	9204      	strlt	r2, [sp, #16]
 8017cb2:	7823      	ldrb	r3, [r4, #0]
 8017cb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8017cb6:	d10a      	bne.n	8017cce <_vfiprintf_r+0x156>
 8017cb8:	7863      	ldrb	r3, [r4, #1]
 8017cba:	2b2a      	cmp	r3, #42	@ 0x2a
 8017cbc:	d132      	bne.n	8017d24 <_vfiprintf_r+0x1ac>
 8017cbe:	9b03      	ldr	r3, [sp, #12]
 8017cc0:	1d1a      	adds	r2, r3, #4
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	9203      	str	r2, [sp, #12]
 8017cc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017cca:	3402      	adds	r4, #2
 8017ccc:	9305      	str	r3, [sp, #20]
 8017cce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017da4 <_vfiprintf_r+0x22c>
 8017cd2:	7821      	ldrb	r1, [r4, #0]
 8017cd4:	2203      	movs	r2, #3
 8017cd6:	4650      	mov	r0, sl
 8017cd8:	f7e8 fab2 	bl	8000240 <memchr>
 8017cdc:	b138      	cbz	r0, 8017cee <_vfiprintf_r+0x176>
 8017cde:	9b04      	ldr	r3, [sp, #16]
 8017ce0:	eba0 000a 	sub.w	r0, r0, sl
 8017ce4:	2240      	movs	r2, #64	@ 0x40
 8017ce6:	4082      	lsls	r2, r0
 8017ce8:	4313      	orrs	r3, r2
 8017cea:	3401      	adds	r4, #1
 8017cec:	9304      	str	r3, [sp, #16]
 8017cee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cf2:	4829      	ldr	r0, [pc, #164]	@ (8017d98 <_vfiprintf_r+0x220>)
 8017cf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017cf8:	2206      	movs	r2, #6
 8017cfa:	f7e8 faa1 	bl	8000240 <memchr>
 8017cfe:	2800      	cmp	r0, #0
 8017d00:	d03f      	beq.n	8017d82 <_vfiprintf_r+0x20a>
 8017d02:	4b26      	ldr	r3, [pc, #152]	@ (8017d9c <_vfiprintf_r+0x224>)
 8017d04:	bb1b      	cbnz	r3, 8017d4e <_vfiprintf_r+0x1d6>
 8017d06:	9b03      	ldr	r3, [sp, #12]
 8017d08:	3307      	adds	r3, #7
 8017d0a:	f023 0307 	bic.w	r3, r3, #7
 8017d0e:	3308      	adds	r3, #8
 8017d10:	9303      	str	r3, [sp, #12]
 8017d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d14:	443b      	add	r3, r7
 8017d16:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d18:	e76a      	b.n	8017bf0 <_vfiprintf_r+0x78>
 8017d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d1e:	460c      	mov	r4, r1
 8017d20:	2001      	movs	r0, #1
 8017d22:	e7a8      	b.n	8017c76 <_vfiprintf_r+0xfe>
 8017d24:	2300      	movs	r3, #0
 8017d26:	3401      	adds	r4, #1
 8017d28:	9305      	str	r3, [sp, #20]
 8017d2a:	4619      	mov	r1, r3
 8017d2c:	f04f 0c0a 	mov.w	ip, #10
 8017d30:	4620      	mov	r0, r4
 8017d32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d36:	3a30      	subs	r2, #48	@ 0x30
 8017d38:	2a09      	cmp	r2, #9
 8017d3a:	d903      	bls.n	8017d44 <_vfiprintf_r+0x1cc>
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d0c6      	beq.n	8017cce <_vfiprintf_r+0x156>
 8017d40:	9105      	str	r1, [sp, #20]
 8017d42:	e7c4      	b.n	8017cce <_vfiprintf_r+0x156>
 8017d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d48:	4604      	mov	r4, r0
 8017d4a:	2301      	movs	r3, #1
 8017d4c:	e7f0      	b.n	8017d30 <_vfiprintf_r+0x1b8>
 8017d4e:	ab03      	add	r3, sp, #12
 8017d50:	9300      	str	r3, [sp, #0]
 8017d52:	462a      	mov	r2, r5
 8017d54:	4b12      	ldr	r3, [pc, #72]	@ (8017da0 <_vfiprintf_r+0x228>)
 8017d56:	a904      	add	r1, sp, #16
 8017d58:	4630      	mov	r0, r6
 8017d5a:	f3af 8000 	nop.w
 8017d5e:	4607      	mov	r7, r0
 8017d60:	1c78      	adds	r0, r7, #1
 8017d62:	d1d6      	bne.n	8017d12 <_vfiprintf_r+0x19a>
 8017d64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d66:	07d9      	lsls	r1, r3, #31
 8017d68:	d405      	bmi.n	8017d76 <_vfiprintf_r+0x1fe>
 8017d6a:	89ab      	ldrh	r3, [r5, #12]
 8017d6c:	059a      	lsls	r2, r3, #22
 8017d6e:	d402      	bmi.n	8017d76 <_vfiprintf_r+0x1fe>
 8017d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d72:	f7ff fd25 	bl	80177c0 <__retarget_lock_release_recursive>
 8017d76:	89ab      	ldrh	r3, [r5, #12]
 8017d78:	065b      	lsls	r3, r3, #25
 8017d7a:	f53f af1f 	bmi.w	8017bbc <_vfiprintf_r+0x44>
 8017d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017d80:	e71e      	b.n	8017bc0 <_vfiprintf_r+0x48>
 8017d82:	ab03      	add	r3, sp, #12
 8017d84:	9300      	str	r3, [sp, #0]
 8017d86:	462a      	mov	r2, r5
 8017d88:	4b05      	ldr	r3, [pc, #20]	@ (8017da0 <_vfiprintf_r+0x228>)
 8017d8a:	a904      	add	r1, sp, #16
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	f000 f879 	bl	8017e84 <_printf_i>
 8017d92:	e7e4      	b.n	8017d5e <_vfiprintf_r+0x1e6>
 8017d94:	0801b9ee 	.word	0x0801b9ee
 8017d98:	0801b9f8 	.word	0x0801b9f8
 8017d9c:	00000000 	.word	0x00000000
 8017da0:	08017b53 	.word	0x08017b53
 8017da4:	0801b9f4 	.word	0x0801b9f4

08017da8 <_printf_common>:
 8017da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dac:	4616      	mov	r6, r2
 8017dae:	4698      	mov	r8, r3
 8017db0:	688a      	ldr	r2, [r1, #8]
 8017db2:	690b      	ldr	r3, [r1, #16]
 8017db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017db8:	4293      	cmp	r3, r2
 8017dba:	bfb8      	it	lt
 8017dbc:	4613      	movlt	r3, r2
 8017dbe:	6033      	str	r3, [r6, #0]
 8017dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017dc4:	4607      	mov	r7, r0
 8017dc6:	460c      	mov	r4, r1
 8017dc8:	b10a      	cbz	r2, 8017dce <_printf_common+0x26>
 8017dca:	3301      	adds	r3, #1
 8017dcc:	6033      	str	r3, [r6, #0]
 8017dce:	6823      	ldr	r3, [r4, #0]
 8017dd0:	0699      	lsls	r1, r3, #26
 8017dd2:	bf42      	ittt	mi
 8017dd4:	6833      	ldrmi	r3, [r6, #0]
 8017dd6:	3302      	addmi	r3, #2
 8017dd8:	6033      	strmi	r3, [r6, #0]
 8017dda:	6825      	ldr	r5, [r4, #0]
 8017ddc:	f015 0506 	ands.w	r5, r5, #6
 8017de0:	d106      	bne.n	8017df0 <_printf_common+0x48>
 8017de2:	f104 0a19 	add.w	sl, r4, #25
 8017de6:	68e3      	ldr	r3, [r4, #12]
 8017de8:	6832      	ldr	r2, [r6, #0]
 8017dea:	1a9b      	subs	r3, r3, r2
 8017dec:	42ab      	cmp	r3, r5
 8017dee:	dc26      	bgt.n	8017e3e <_printf_common+0x96>
 8017df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017df4:	6822      	ldr	r2, [r4, #0]
 8017df6:	3b00      	subs	r3, #0
 8017df8:	bf18      	it	ne
 8017dfa:	2301      	movne	r3, #1
 8017dfc:	0692      	lsls	r2, r2, #26
 8017dfe:	d42b      	bmi.n	8017e58 <_printf_common+0xb0>
 8017e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017e04:	4641      	mov	r1, r8
 8017e06:	4638      	mov	r0, r7
 8017e08:	47c8      	blx	r9
 8017e0a:	3001      	adds	r0, #1
 8017e0c:	d01e      	beq.n	8017e4c <_printf_common+0xa4>
 8017e0e:	6823      	ldr	r3, [r4, #0]
 8017e10:	6922      	ldr	r2, [r4, #16]
 8017e12:	f003 0306 	and.w	r3, r3, #6
 8017e16:	2b04      	cmp	r3, #4
 8017e18:	bf02      	ittt	eq
 8017e1a:	68e5      	ldreq	r5, [r4, #12]
 8017e1c:	6833      	ldreq	r3, [r6, #0]
 8017e1e:	1aed      	subeq	r5, r5, r3
 8017e20:	68a3      	ldr	r3, [r4, #8]
 8017e22:	bf0c      	ite	eq
 8017e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017e28:	2500      	movne	r5, #0
 8017e2a:	4293      	cmp	r3, r2
 8017e2c:	bfc4      	itt	gt
 8017e2e:	1a9b      	subgt	r3, r3, r2
 8017e30:	18ed      	addgt	r5, r5, r3
 8017e32:	2600      	movs	r6, #0
 8017e34:	341a      	adds	r4, #26
 8017e36:	42b5      	cmp	r5, r6
 8017e38:	d11a      	bne.n	8017e70 <_printf_common+0xc8>
 8017e3a:	2000      	movs	r0, #0
 8017e3c:	e008      	b.n	8017e50 <_printf_common+0xa8>
 8017e3e:	2301      	movs	r3, #1
 8017e40:	4652      	mov	r2, sl
 8017e42:	4641      	mov	r1, r8
 8017e44:	4638      	mov	r0, r7
 8017e46:	47c8      	blx	r9
 8017e48:	3001      	adds	r0, #1
 8017e4a:	d103      	bne.n	8017e54 <_printf_common+0xac>
 8017e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e54:	3501      	adds	r5, #1
 8017e56:	e7c6      	b.n	8017de6 <_printf_common+0x3e>
 8017e58:	18e1      	adds	r1, r4, r3
 8017e5a:	1c5a      	adds	r2, r3, #1
 8017e5c:	2030      	movs	r0, #48	@ 0x30
 8017e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017e62:	4422      	add	r2, r4
 8017e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017e6c:	3302      	adds	r3, #2
 8017e6e:	e7c7      	b.n	8017e00 <_printf_common+0x58>
 8017e70:	2301      	movs	r3, #1
 8017e72:	4622      	mov	r2, r4
 8017e74:	4641      	mov	r1, r8
 8017e76:	4638      	mov	r0, r7
 8017e78:	47c8      	blx	r9
 8017e7a:	3001      	adds	r0, #1
 8017e7c:	d0e6      	beq.n	8017e4c <_printf_common+0xa4>
 8017e7e:	3601      	adds	r6, #1
 8017e80:	e7d9      	b.n	8017e36 <_printf_common+0x8e>
	...

08017e84 <_printf_i>:
 8017e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017e88:	7e0f      	ldrb	r7, [r1, #24]
 8017e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017e8c:	2f78      	cmp	r7, #120	@ 0x78
 8017e8e:	4691      	mov	r9, r2
 8017e90:	4680      	mov	r8, r0
 8017e92:	460c      	mov	r4, r1
 8017e94:	469a      	mov	sl, r3
 8017e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017e9a:	d807      	bhi.n	8017eac <_printf_i+0x28>
 8017e9c:	2f62      	cmp	r7, #98	@ 0x62
 8017e9e:	d80a      	bhi.n	8017eb6 <_printf_i+0x32>
 8017ea0:	2f00      	cmp	r7, #0
 8017ea2:	f000 80d1 	beq.w	8018048 <_printf_i+0x1c4>
 8017ea6:	2f58      	cmp	r7, #88	@ 0x58
 8017ea8:	f000 80b8 	beq.w	801801c <_printf_i+0x198>
 8017eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017eb4:	e03a      	b.n	8017f2c <_printf_i+0xa8>
 8017eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017eba:	2b15      	cmp	r3, #21
 8017ebc:	d8f6      	bhi.n	8017eac <_printf_i+0x28>
 8017ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8017ec4 <_printf_i+0x40>)
 8017ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017ec4:	08017f1d 	.word	0x08017f1d
 8017ec8:	08017f31 	.word	0x08017f31
 8017ecc:	08017ead 	.word	0x08017ead
 8017ed0:	08017ead 	.word	0x08017ead
 8017ed4:	08017ead 	.word	0x08017ead
 8017ed8:	08017ead 	.word	0x08017ead
 8017edc:	08017f31 	.word	0x08017f31
 8017ee0:	08017ead 	.word	0x08017ead
 8017ee4:	08017ead 	.word	0x08017ead
 8017ee8:	08017ead 	.word	0x08017ead
 8017eec:	08017ead 	.word	0x08017ead
 8017ef0:	0801802f 	.word	0x0801802f
 8017ef4:	08017f5b 	.word	0x08017f5b
 8017ef8:	08017fe9 	.word	0x08017fe9
 8017efc:	08017ead 	.word	0x08017ead
 8017f00:	08017ead 	.word	0x08017ead
 8017f04:	08018051 	.word	0x08018051
 8017f08:	08017ead 	.word	0x08017ead
 8017f0c:	08017f5b 	.word	0x08017f5b
 8017f10:	08017ead 	.word	0x08017ead
 8017f14:	08017ead 	.word	0x08017ead
 8017f18:	08017ff1 	.word	0x08017ff1
 8017f1c:	6833      	ldr	r3, [r6, #0]
 8017f1e:	1d1a      	adds	r2, r3, #4
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	6032      	str	r2, [r6, #0]
 8017f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017f2c:	2301      	movs	r3, #1
 8017f2e:	e09c      	b.n	801806a <_printf_i+0x1e6>
 8017f30:	6833      	ldr	r3, [r6, #0]
 8017f32:	6820      	ldr	r0, [r4, #0]
 8017f34:	1d19      	adds	r1, r3, #4
 8017f36:	6031      	str	r1, [r6, #0]
 8017f38:	0606      	lsls	r6, r0, #24
 8017f3a:	d501      	bpl.n	8017f40 <_printf_i+0xbc>
 8017f3c:	681d      	ldr	r5, [r3, #0]
 8017f3e:	e003      	b.n	8017f48 <_printf_i+0xc4>
 8017f40:	0645      	lsls	r5, r0, #25
 8017f42:	d5fb      	bpl.n	8017f3c <_printf_i+0xb8>
 8017f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017f48:	2d00      	cmp	r5, #0
 8017f4a:	da03      	bge.n	8017f54 <_printf_i+0xd0>
 8017f4c:	232d      	movs	r3, #45	@ 0x2d
 8017f4e:	426d      	negs	r5, r5
 8017f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017f54:	4858      	ldr	r0, [pc, #352]	@ (80180b8 <_printf_i+0x234>)
 8017f56:	230a      	movs	r3, #10
 8017f58:	e011      	b.n	8017f7e <_printf_i+0xfa>
 8017f5a:	6821      	ldr	r1, [r4, #0]
 8017f5c:	6833      	ldr	r3, [r6, #0]
 8017f5e:	0608      	lsls	r0, r1, #24
 8017f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8017f64:	d402      	bmi.n	8017f6c <_printf_i+0xe8>
 8017f66:	0649      	lsls	r1, r1, #25
 8017f68:	bf48      	it	mi
 8017f6a:	b2ad      	uxthmi	r5, r5
 8017f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8017f6e:	4852      	ldr	r0, [pc, #328]	@ (80180b8 <_printf_i+0x234>)
 8017f70:	6033      	str	r3, [r6, #0]
 8017f72:	bf14      	ite	ne
 8017f74:	230a      	movne	r3, #10
 8017f76:	2308      	moveq	r3, #8
 8017f78:	2100      	movs	r1, #0
 8017f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017f7e:	6866      	ldr	r6, [r4, #4]
 8017f80:	60a6      	str	r6, [r4, #8]
 8017f82:	2e00      	cmp	r6, #0
 8017f84:	db05      	blt.n	8017f92 <_printf_i+0x10e>
 8017f86:	6821      	ldr	r1, [r4, #0]
 8017f88:	432e      	orrs	r6, r5
 8017f8a:	f021 0104 	bic.w	r1, r1, #4
 8017f8e:	6021      	str	r1, [r4, #0]
 8017f90:	d04b      	beq.n	801802a <_printf_i+0x1a6>
 8017f92:	4616      	mov	r6, r2
 8017f94:	fbb5 f1f3 	udiv	r1, r5, r3
 8017f98:	fb03 5711 	mls	r7, r3, r1, r5
 8017f9c:	5dc7      	ldrb	r7, [r0, r7]
 8017f9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017fa2:	462f      	mov	r7, r5
 8017fa4:	42bb      	cmp	r3, r7
 8017fa6:	460d      	mov	r5, r1
 8017fa8:	d9f4      	bls.n	8017f94 <_printf_i+0x110>
 8017faa:	2b08      	cmp	r3, #8
 8017fac:	d10b      	bne.n	8017fc6 <_printf_i+0x142>
 8017fae:	6823      	ldr	r3, [r4, #0]
 8017fb0:	07df      	lsls	r7, r3, #31
 8017fb2:	d508      	bpl.n	8017fc6 <_printf_i+0x142>
 8017fb4:	6923      	ldr	r3, [r4, #16]
 8017fb6:	6861      	ldr	r1, [r4, #4]
 8017fb8:	4299      	cmp	r1, r3
 8017fba:	bfde      	ittt	le
 8017fbc:	2330      	movle	r3, #48	@ 0x30
 8017fbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017fc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017fc6:	1b92      	subs	r2, r2, r6
 8017fc8:	6122      	str	r2, [r4, #16]
 8017fca:	f8cd a000 	str.w	sl, [sp]
 8017fce:	464b      	mov	r3, r9
 8017fd0:	aa03      	add	r2, sp, #12
 8017fd2:	4621      	mov	r1, r4
 8017fd4:	4640      	mov	r0, r8
 8017fd6:	f7ff fee7 	bl	8017da8 <_printf_common>
 8017fda:	3001      	adds	r0, #1
 8017fdc:	d14a      	bne.n	8018074 <_printf_i+0x1f0>
 8017fde:	f04f 30ff 	mov.w	r0, #4294967295
 8017fe2:	b004      	add	sp, #16
 8017fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fe8:	6823      	ldr	r3, [r4, #0]
 8017fea:	f043 0320 	orr.w	r3, r3, #32
 8017fee:	6023      	str	r3, [r4, #0]
 8017ff0:	4832      	ldr	r0, [pc, #200]	@ (80180bc <_printf_i+0x238>)
 8017ff2:	2778      	movs	r7, #120	@ 0x78
 8017ff4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017ff8:	6823      	ldr	r3, [r4, #0]
 8017ffa:	6831      	ldr	r1, [r6, #0]
 8017ffc:	061f      	lsls	r7, r3, #24
 8017ffe:	f851 5b04 	ldr.w	r5, [r1], #4
 8018002:	d402      	bmi.n	801800a <_printf_i+0x186>
 8018004:	065f      	lsls	r7, r3, #25
 8018006:	bf48      	it	mi
 8018008:	b2ad      	uxthmi	r5, r5
 801800a:	6031      	str	r1, [r6, #0]
 801800c:	07d9      	lsls	r1, r3, #31
 801800e:	bf44      	itt	mi
 8018010:	f043 0320 	orrmi.w	r3, r3, #32
 8018014:	6023      	strmi	r3, [r4, #0]
 8018016:	b11d      	cbz	r5, 8018020 <_printf_i+0x19c>
 8018018:	2310      	movs	r3, #16
 801801a:	e7ad      	b.n	8017f78 <_printf_i+0xf4>
 801801c:	4826      	ldr	r0, [pc, #152]	@ (80180b8 <_printf_i+0x234>)
 801801e:	e7e9      	b.n	8017ff4 <_printf_i+0x170>
 8018020:	6823      	ldr	r3, [r4, #0]
 8018022:	f023 0320 	bic.w	r3, r3, #32
 8018026:	6023      	str	r3, [r4, #0]
 8018028:	e7f6      	b.n	8018018 <_printf_i+0x194>
 801802a:	4616      	mov	r6, r2
 801802c:	e7bd      	b.n	8017faa <_printf_i+0x126>
 801802e:	6833      	ldr	r3, [r6, #0]
 8018030:	6825      	ldr	r5, [r4, #0]
 8018032:	6961      	ldr	r1, [r4, #20]
 8018034:	1d18      	adds	r0, r3, #4
 8018036:	6030      	str	r0, [r6, #0]
 8018038:	062e      	lsls	r6, r5, #24
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	d501      	bpl.n	8018042 <_printf_i+0x1be>
 801803e:	6019      	str	r1, [r3, #0]
 8018040:	e002      	b.n	8018048 <_printf_i+0x1c4>
 8018042:	0668      	lsls	r0, r5, #25
 8018044:	d5fb      	bpl.n	801803e <_printf_i+0x1ba>
 8018046:	8019      	strh	r1, [r3, #0]
 8018048:	2300      	movs	r3, #0
 801804a:	6123      	str	r3, [r4, #16]
 801804c:	4616      	mov	r6, r2
 801804e:	e7bc      	b.n	8017fca <_printf_i+0x146>
 8018050:	6833      	ldr	r3, [r6, #0]
 8018052:	1d1a      	adds	r2, r3, #4
 8018054:	6032      	str	r2, [r6, #0]
 8018056:	681e      	ldr	r6, [r3, #0]
 8018058:	6862      	ldr	r2, [r4, #4]
 801805a:	2100      	movs	r1, #0
 801805c:	4630      	mov	r0, r6
 801805e:	f7e8 f8ef 	bl	8000240 <memchr>
 8018062:	b108      	cbz	r0, 8018068 <_printf_i+0x1e4>
 8018064:	1b80      	subs	r0, r0, r6
 8018066:	6060      	str	r0, [r4, #4]
 8018068:	6863      	ldr	r3, [r4, #4]
 801806a:	6123      	str	r3, [r4, #16]
 801806c:	2300      	movs	r3, #0
 801806e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018072:	e7aa      	b.n	8017fca <_printf_i+0x146>
 8018074:	6923      	ldr	r3, [r4, #16]
 8018076:	4632      	mov	r2, r6
 8018078:	4649      	mov	r1, r9
 801807a:	4640      	mov	r0, r8
 801807c:	47d0      	blx	sl
 801807e:	3001      	adds	r0, #1
 8018080:	d0ad      	beq.n	8017fde <_printf_i+0x15a>
 8018082:	6823      	ldr	r3, [r4, #0]
 8018084:	079b      	lsls	r3, r3, #30
 8018086:	d413      	bmi.n	80180b0 <_printf_i+0x22c>
 8018088:	68e0      	ldr	r0, [r4, #12]
 801808a:	9b03      	ldr	r3, [sp, #12]
 801808c:	4298      	cmp	r0, r3
 801808e:	bfb8      	it	lt
 8018090:	4618      	movlt	r0, r3
 8018092:	e7a6      	b.n	8017fe2 <_printf_i+0x15e>
 8018094:	2301      	movs	r3, #1
 8018096:	4632      	mov	r2, r6
 8018098:	4649      	mov	r1, r9
 801809a:	4640      	mov	r0, r8
 801809c:	47d0      	blx	sl
 801809e:	3001      	adds	r0, #1
 80180a0:	d09d      	beq.n	8017fde <_printf_i+0x15a>
 80180a2:	3501      	adds	r5, #1
 80180a4:	68e3      	ldr	r3, [r4, #12]
 80180a6:	9903      	ldr	r1, [sp, #12]
 80180a8:	1a5b      	subs	r3, r3, r1
 80180aa:	42ab      	cmp	r3, r5
 80180ac:	dcf2      	bgt.n	8018094 <_printf_i+0x210>
 80180ae:	e7eb      	b.n	8018088 <_printf_i+0x204>
 80180b0:	2500      	movs	r5, #0
 80180b2:	f104 0619 	add.w	r6, r4, #25
 80180b6:	e7f5      	b.n	80180a4 <_printf_i+0x220>
 80180b8:	0801b9ff 	.word	0x0801b9ff
 80180bc:	0801ba10 	.word	0x0801ba10

080180c0 <__sflush_r>:
 80180c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80180c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180c8:	0716      	lsls	r6, r2, #28
 80180ca:	4605      	mov	r5, r0
 80180cc:	460c      	mov	r4, r1
 80180ce:	d454      	bmi.n	801817a <__sflush_r+0xba>
 80180d0:	684b      	ldr	r3, [r1, #4]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	dc02      	bgt.n	80180dc <__sflush_r+0x1c>
 80180d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80180d8:	2b00      	cmp	r3, #0
 80180da:	dd48      	ble.n	801816e <__sflush_r+0xae>
 80180dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80180de:	2e00      	cmp	r6, #0
 80180e0:	d045      	beq.n	801816e <__sflush_r+0xae>
 80180e2:	2300      	movs	r3, #0
 80180e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80180e8:	682f      	ldr	r7, [r5, #0]
 80180ea:	6a21      	ldr	r1, [r4, #32]
 80180ec:	602b      	str	r3, [r5, #0]
 80180ee:	d030      	beq.n	8018152 <__sflush_r+0x92>
 80180f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80180f2:	89a3      	ldrh	r3, [r4, #12]
 80180f4:	0759      	lsls	r1, r3, #29
 80180f6:	d505      	bpl.n	8018104 <__sflush_r+0x44>
 80180f8:	6863      	ldr	r3, [r4, #4]
 80180fa:	1ad2      	subs	r2, r2, r3
 80180fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80180fe:	b10b      	cbz	r3, 8018104 <__sflush_r+0x44>
 8018100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018102:	1ad2      	subs	r2, r2, r3
 8018104:	2300      	movs	r3, #0
 8018106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018108:	6a21      	ldr	r1, [r4, #32]
 801810a:	4628      	mov	r0, r5
 801810c:	47b0      	blx	r6
 801810e:	1c43      	adds	r3, r0, #1
 8018110:	89a3      	ldrh	r3, [r4, #12]
 8018112:	d106      	bne.n	8018122 <__sflush_r+0x62>
 8018114:	6829      	ldr	r1, [r5, #0]
 8018116:	291d      	cmp	r1, #29
 8018118:	d82b      	bhi.n	8018172 <__sflush_r+0xb2>
 801811a:	4a2a      	ldr	r2, [pc, #168]	@ (80181c4 <__sflush_r+0x104>)
 801811c:	40ca      	lsrs	r2, r1
 801811e:	07d6      	lsls	r6, r2, #31
 8018120:	d527      	bpl.n	8018172 <__sflush_r+0xb2>
 8018122:	2200      	movs	r2, #0
 8018124:	6062      	str	r2, [r4, #4]
 8018126:	04d9      	lsls	r1, r3, #19
 8018128:	6922      	ldr	r2, [r4, #16]
 801812a:	6022      	str	r2, [r4, #0]
 801812c:	d504      	bpl.n	8018138 <__sflush_r+0x78>
 801812e:	1c42      	adds	r2, r0, #1
 8018130:	d101      	bne.n	8018136 <__sflush_r+0x76>
 8018132:	682b      	ldr	r3, [r5, #0]
 8018134:	b903      	cbnz	r3, 8018138 <__sflush_r+0x78>
 8018136:	6560      	str	r0, [r4, #84]	@ 0x54
 8018138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801813a:	602f      	str	r7, [r5, #0]
 801813c:	b1b9      	cbz	r1, 801816e <__sflush_r+0xae>
 801813e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018142:	4299      	cmp	r1, r3
 8018144:	d002      	beq.n	801814c <__sflush_r+0x8c>
 8018146:	4628      	mov	r0, r5
 8018148:	f7ff fb4a 	bl	80177e0 <_free_r>
 801814c:	2300      	movs	r3, #0
 801814e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018150:	e00d      	b.n	801816e <__sflush_r+0xae>
 8018152:	2301      	movs	r3, #1
 8018154:	4628      	mov	r0, r5
 8018156:	47b0      	blx	r6
 8018158:	4602      	mov	r2, r0
 801815a:	1c50      	adds	r0, r2, #1
 801815c:	d1c9      	bne.n	80180f2 <__sflush_r+0x32>
 801815e:	682b      	ldr	r3, [r5, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d0c6      	beq.n	80180f2 <__sflush_r+0x32>
 8018164:	2b1d      	cmp	r3, #29
 8018166:	d001      	beq.n	801816c <__sflush_r+0xac>
 8018168:	2b16      	cmp	r3, #22
 801816a:	d11e      	bne.n	80181aa <__sflush_r+0xea>
 801816c:	602f      	str	r7, [r5, #0]
 801816e:	2000      	movs	r0, #0
 8018170:	e022      	b.n	80181b8 <__sflush_r+0xf8>
 8018172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018176:	b21b      	sxth	r3, r3
 8018178:	e01b      	b.n	80181b2 <__sflush_r+0xf2>
 801817a:	690f      	ldr	r7, [r1, #16]
 801817c:	2f00      	cmp	r7, #0
 801817e:	d0f6      	beq.n	801816e <__sflush_r+0xae>
 8018180:	0793      	lsls	r3, r2, #30
 8018182:	680e      	ldr	r6, [r1, #0]
 8018184:	bf08      	it	eq
 8018186:	694b      	ldreq	r3, [r1, #20]
 8018188:	600f      	str	r7, [r1, #0]
 801818a:	bf18      	it	ne
 801818c:	2300      	movne	r3, #0
 801818e:	eba6 0807 	sub.w	r8, r6, r7
 8018192:	608b      	str	r3, [r1, #8]
 8018194:	f1b8 0f00 	cmp.w	r8, #0
 8018198:	dde9      	ble.n	801816e <__sflush_r+0xae>
 801819a:	6a21      	ldr	r1, [r4, #32]
 801819c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801819e:	4643      	mov	r3, r8
 80181a0:	463a      	mov	r2, r7
 80181a2:	4628      	mov	r0, r5
 80181a4:	47b0      	blx	r6
 80181a6:	2800      	cmp	r0, #0
 80181a8:	dc08      	bgt.n	80181bc <__sflush_r+0xfc>
 80181aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80181b2:	81a3      	strh	r3, [r4, #12]
 80181b4:	f04f 30ff 	mov.w	r0, #4294967295
 80181b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181bc:	4407      	add	r7, r0
 80181be:	eba8 0800 	sub.w	r8, r8, r0
 80181c2:	e7e7      	b.n	8018194 <__sflush_r+0xd4>
 80181c4:	20400001 	.word	0x20400001

080181c8 <_fflush_r>:
 80181c8:	b538      	push	{r3, r4, r5, lr}
 80181ca:	690b      	ldr	r3, [r1, #16]
 80181cc:	4605      	mov	r5, r0
 80181ce:	460c      	mov	r4, r1
 80181d0:	b913      	cbnz	r3, 80181d8 <_fflush_r+0x10>
 80181d2:	2500      	movs	r5, #0
 80181d4:	4628      	mov	r0, r5
 80181d6:	bd38      	pop	{r3, r4, r5, pc}
 80181d8:	b118      	cbz	r0, 80181e2 <_fflush_r+0x1a>
 80181da:	6a03      	ldr	r3, [r0, #32]
 80181dc:	b90b      	cbnz	r3, 80181e2 <_fflush_r+0x1a>
 80181de:	f7ff f91b 	bl	8017418 <__sinit>
 80181e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d0f3      	beq.n	80181d2 <_fflush_r+0xa>
 80181ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80181ec:	07d0      	lsls	r0, r2, #31
 80181ee:	d404      	bmi.n	80181fa <_fflush_r+0x32>
 80181f0:	0599      	lsls	r1, r3, #22
 80181f2:	d402      	bmi.n	80181fa <_fflush_r+0x32>
 80181f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80181f6:	f7ff fae2 	bl	80177be <__retarget_lock_acquire_recursive>
 80181fa:	4628      	mov	r0, r5
 80181fc:	4621      	mov	r1, r4
 80181fe:	f7ff ff5f 	bl	80180c0 <__sflush_r>
 8018202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018204:	07da      	lsls	r2, r3, #31
 8018206:	4605      	mov	r5, r0
 8018208:	d4e4      	bmi.n	80181d4 <_fflush_r+0xc>
 801820a:	89a3      	ldrh	r3, [r4, #12]
 801820c:	059b      	lsls	r3, r3, #22
 801820e:	d4e1      	bmi.n	80181d4 <_fflush_r+0xc>
 8018210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018212:	f7ff fad5 	bl	80177c0 <__retarget_lock_release_recursive>
 8018216:	e7dd      	b.n	80181d4 <_fflush_r+0xc>

08018218 <__swbuf_r>:
 8018218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801821a:	460e      	mov	r6, r1
 801821c:	4614      	mov	r4, r2
 801821e:	4605      	mov	r5, r0
 8018220:	b118      	cbz	r0, 801822a <__swbuf_r+0x12>
 8018222:	6a03      	ldr	r3, [r0, #32]
 8018224:	b90b      	cbnz	r3, 801822a <__swbuf_r+0x12>
 8018226:	f7ff f8f7 	bl	8017418 <__sinit>
 801822a:	69a3      	ldr	r3, [r4, #24]
 801822c:	60a3      	str	r3, [r4, #8]
 801822e:	89a3      	ldrh	r3, [r4, #12]
 8018230:	071a      	lsls	r2, r3, #28
 8018232:	d501      	bpl.n	8018238 <__swbuf_r+0x20>
 8018234:	6923      	ldr	r3, [r4, #16]
 8018236:	b943      	cbnz	r3, 801824a <__swbuf_r+0x32>
 8018238:	4621      	mov	r1, r4
 801823a:	4628      	mov	r0, r5
 801823c:	f000 f82a 	bl	8018294 <__swsetup_r>
 8018240:	b118      	cbz	r0, 801824a <__swbuf_r+0x32>
 8018242:	f04f 37ff 	mov.w	r7, #4294967295
 8018246:	4638      	mov	r0, r7
 8018248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801824a:	6823      	ldr	r3, [r4, #0]
 801824c:	6922      	ldr	r2, [r4, #16]
 801824e:	1a98      	subs	r0, r3, r2
 8018250:	6963      	ldr	r3, [r4, #20]
 8018252:	b2f6      	uxtb	r6, r6
 8018254:	4283      	cmp	r3, r0
 8018256:	4637      	mov	r7, r6
 8018258:	dc05      	bgt.n	8018266 <__swbuf_r+0x4e>
 801825a:	4621      	mov	r1, r4
 801825c:	4628      	mov	r0, r5
 801825e:	f7ff ffb3 	bl	80181c8 <_fflush_r>
 8018262:	2800      	cmp	r0, #0
 8018264:	d1ed      	bne.n	8018242 <__swbuf_r+0x2a>
 8018266:	68a3      	ldr	r3, [r4, #8]
 8018268:	3b01      	subs	r3, #1
 801826a:	60a3      	str	r3, [r4, #8]
 801826c:	6823      	ldr	r3, [r4, #0]
 801826e:	1c5a      	adds	r2, r3, #1
 8018270:	6022      	str	r2, [r4, #0]
 8018272:	701e      	strb	r6, [r3, #0]
 8018274:	6962      	ldr	r2, [r4, #20]
 8018276:	1c43      	adds	r3, r0, #1
 8018278:	429a      	cmp	r2, r3
 801827a:	d004      	beq.n	8018286 <__swbuf_r+0x6e>
 801827c:	89a3      	ldrh	r3, [r4, #12]
 801827e:	07db      	lsls	r3, r3, #31
 8018280:	d5e1      	bpl.n	8018246 <__swbuf_r+0x2e>
 8018282:	2e0a      	cmp	r6, #10
 8018284:	d1df      	bne.n	8018246 <__swbuf_r+0x2e>
 8018286:	4621      	mov	r1, r4
 8018288:	4628      	mov	r0, r5
 801828a:	f7ff ff9d 	bl	80181c8 <_fflush_r>
 801828e:	2800      	cmp	r0, #0
 8018290:	d0d9      	beq.n	8018246 <__swbuf_r+0x2e>
 8018292:	e7d6      	b.n	8018242 <__swbuf_r+0x2a>

08018294 <__swsetup_r>:
 8018294:	b538      	push	{r3, r4, r5, lr}
 8018296:	4b29      	ldr	r3, [pc, #164]	@ (801833c <__swsetup_r+0xa8>)
 8018298:	4605      	mov	r5, r0
 801829a:	6818      	ldr	r0, [r3, #0]
 801829c:	460c      	mov	r4, r1
 801829e:	b118      	cbz	r0, 80182a8 <__swsetup_r+0x14>
 80182a0:	6a03      	ldr	r3, [r0, #32]
 80182a2:	b90b      	cbnz	r3, 80182a8 <__swsetup_r+0x14>
 80182a4:	f7ff f8b8 	bl	8017418 <__sinit>
 80182a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80182ac:	0719      	lsls	r1, r3, #28
 80182ae:	d422      	bmi.n	80182f6 <__swsetup_r+0x62>
 80182b0:	06da      	lsls	r2, r3, #27
 80182b2:	d407      	bmi.n	80182c4 <__swsetup_r+0x30>
 80182b4:	2209      	movs	r2, #9
 80182b6:	602a      	str	r2, [r5, #0]
 80182b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80182bc:	81a3      	strh	r3, [r4, #12]
 80182be:	f04f 30ff 	mov.w	r0, #4294967295
 80182c2:	e033      	b.n	801832c <__swsetup_r+0x98>
 80182c4:	0758      	lsls	r0, r3, #29
 80182c6:	d512      	bpl.n	80182ee <__swsetup_r+0x5a>
 80182c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80182ca:	b141      	cbz	r1, 80182de <__swsetup_r+0x4a>
 80182cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80182d0:	4299      	cmp	r1, r3
 80182d2:	d002      	beq.n	80182da <__swsetup_r+0x46>
 80182d4:	4628      	mov	r0, r5
 80182d6:	f7ff fa83 	bl	80177e0 <_free_r>
 80182da:	2300      	movs	r3, #0
 80182dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80182de:	89a3      	ldrh	r3, [r4, #12]
 80182e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80182e4:	81a3      	strh	r3, [r4, #12]
 80182e6:	2300      	movs	r3, #0
 80182e8:	6063      	str	r3, [r4, #4]
 80182ea:	6923      	ldr	r3, [r4, #16]
 80182ec:	6023      	str	r3, [r4, #0]
 80182ee:	89a3      	ldrh	r3, [r4, #12]
 80182f0:	f043 0308 	orr.w	r3, r3, #8
 80182f4:	81a3      	strh	r3, [r4, #12]
 80182f6:	6923      	ldr	r3, [r4, #16]
 80182f8:	b94b      	cbnz	r3, 801830e <__swsetup_r+0x7a>
 80182fa:	89a3      	ldrh	r3, [r4, #12]
 80182fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018304:	d003      	beq.n	801830e <__swsetup_r+0x7a>
 8018306:	4621      	mov	r1, r4
 8018308:	4628      	mov	r0, r5
 801830a:	f000 f887 	bl	801841c <__smakebuf_r>
 801830e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018312:	f013 0201 	ands.w	r2, r3, #1
 8018316:	d00a      	beq.n	801832e <__swsetup_r+0x9a>
 8018318:	2200      	movs	r2, #0
 801831a:	60a2      	str	r2, [r4, #8]
 801831c:	6962      	ldr	r2, [r4, #20]
 801831e:	4252      	negs	r2, r2
 8018320:	61a2      	str	r2, [r4, #24]
 8018322:	6922      	ldr	r2, [r4, #16]
 8018324:	b942      	cbnz	r2, 8018338 <__swsetup_r+0xa4>
 8018326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801832a:	d1c5      	bne.n	80182b8 <__swsetup_r+0x24>
 801832c:	bd38      	pop	{r3, r4, r5, pc}
 801832e:	0799      	lsls	r1, r3, #30
 8018330:	bf58      	it	pl
 8018332:	6962      	ldrpl	r2, [r4, #20]
 8018334:	60a2      	str	r2, [r4, #8]
 8018336:	e7f4      	b.n	8018322 <__swsetup_r+0x8e>
 8018338:	2000      	movs	r0, #0
 801833a:	e7f7      	b.n	801832c <__swsetup_r+0x98>
 801833c:	20000080 	.word	0x20000080

08018340 <memmove>:
 8018340:	4288      	cmp	r0, r1
 8018342:	b510      	push	{r4, lr}
 8018344:	eb01 0402 	add.w	r4, r1, r2
 8018348:	d902      	bls.n	8018350 <memmove+0x10>
 801834a:	4284      	cmp	r4, r0
 801834c:	4623      	mov	r3, r4
 801834e:	d807      	bhi.n	8018360 <memmove+0x20>
 8018350:	1e43      	subs	r3, r0, #1
 8018352:	42a1      	cmp	r1, r4
 8018354:	d008      	beq.n	8018368 <memmove+0x28>
 8018356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801835a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801835e:	e7f8      	b.n	8018352 <memmove+0x12>
 8018360:	4402      	add	r2, r0
 8018362:	4601      	mov	r1, r0
 8018364:	428a      	cmp	r2, r1
 8018366:	d100      	bne.n	801836a <memmove+0x2a>
 8018368:	bd10      	pop	{r4, pc}
 801836a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801836e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018372:	e7f7      	b.n	8018364 <memmove+0x24>

08018374 <_realloc_r>:
 8018374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018378:	4607      	mov	r7, r0
 801837a:	4614      	mov	r4, r2
 801837c:	460d      	mov	r5, r1
 801837e:	b921      	cbnz	r1, 801838a <_realloc_r+0x16>
 8018380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018384:	4611      	mov	r1, r2
 8018386:	f7fe bf2f 	b.w	80171e8 <_malloc_r>
 801838a:	b92a      	cbnz	r2, 8018398 <_realloc_r+0x24>
 801838c:	f7ff fa28 	bl	80177e0 <_free_r>
 8018390:	4625      	mov	r5, r4
 8018392:	4628      	mov	r0, r5
 8018394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018398:	f000 f89e 	bl	80184d8 <_malloc_usable_size_r>
 801839c:	4284      	cmp	r4, r0
 801839e:	4606      	mov	r6, r0
 80183a0:	d802      	bhi.n	80183a8 <_realloc_r+0x34>
 80183a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80183a6:	d8f4      	bhi.n	8018392 <_realloc_r+0x1e>
 80183a8:	4621      	mov	r1, r4
 80183aa:	4638      	mov	r0, r7
 80183ac:	f7fe ff1c 	bl	80171e8 <_malloc_r>
 80183b0:	4680      	mov	r8, r0
 80183b2:	b908      	cbnz	r0, 80183b8 <_realloc_r+0x44>
 80183b4:	4645      	mov	r5, r8
 80183b6:	e7ec      	b.n	8018392 <_realloc_r+0x1e>
 80183b8:	42b4      	cmp	r4, r6
 80183ba:	4622      	mov	r2, r4
 80183bc:	4629      	mov	r1, r5
 80183be:	bf28      	it	cs
 80183c0:	4632      	movcs	r2, r6
 80183c2:	f7ff f9fe 	bl	80177c2 <memcpy>
 80183c6:	4629      	mov	r1, r5
 80183c8:	4638      	mov	r0, r7
 80183ca:	f7ff fa09 	bl	80177e0 <_free_r>
 80183ce:	e7f1      	b.n	80183b4 <_realloc_r+0x40>

080183d0 <__swhatbuf_r>:
 80183d0:	b570      	push	{r4, r5, r6, lr}
 80183d2:	460c      	mov	r4, r1
 80183d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183d8:	2900      	cmp	r1, #0
 80183da:	b096      	sub	sp, #88	@ 0x58
 80183dc:	4615      	mov	r5, r2
 80183de:	461e      	mov	r6, r3
 80183e0:	da0d      	bge.n	80183fe <__swhatbuf_r+0x2e>
 80183e2:	89a3      	ldrh	r3, [r4, #12]
 80183e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80183e8:	f04f 0100 	mov.w	r1, #0
 80183ec:	bf14      	ite	ne
 80183ee:	2340      	movne	r3, #64	@ 0x40
 80183f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80183f4:	2000      	movs	r0, #0
 80183f6:	6031      	str	r1, [r6, #0]
 80183f8:	602b      	str	r3, [r5, #0]
 80183fa:	b016      	add	sp, #88	@ 0x58
 80183fc:	bd70      	pop	{r4, r5, r6, pc}
 80183fe:	466a      	mov	r2, sp
 8018400:	f000 f848 	bl	8018494 <_fstat_r>
 8018404:	2800      	cmp	r0, #0
 8018406:	dbec      	blt.n	80183e2 <__swhatbuf_r+0x12>
 8018408:	9901      	ldr	r1, [sp, #4]
 801840a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801840e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018412:	4259      	negs	r1, r3
 8018414:	4159      	adcs	r1, r3
 8018416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801841a:	e7eb      	b.n	80183f4 <__swhatbuf_r+0x24>

0801841c <__smakebuf_r>:
 801841c:	898b      	ldrh	r3, [r1, #12]
 801841e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018420:	079d      	lsls	r5, r3, #30
 8018422:	4606      	mov	r6, r0
 8018424:	460c      	mov	r4, r1
 8018426:	d507      	bpl.n	8018438 <__smakebuf_r+0x1c>
 8018428:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801842c:	6023      	str	r3, [r4, #0]
 801842e:	6123      	str	r3, [r4, #16]
 8018430:	2301      	movs	r3, #1
 8018432:	6163      	str	r3, [r4, #20]
 8018434:	b003      	add	sp, #12
 8018436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018438:	ab01      	add	r3, sp, #4
 801843a:	466a      	mov	r2, sp
 801843c:	f7ff ffc8 	bl	80183d0 <__swhatbuf_r>
 8018440:	9f00      	ldr	r7, [sp, #0]
 8018442:	4605      	mov	r5, r0
 8018444:	4639      	mov	r1, r7
 8018446:	4630      	mov	r0, r6
 8018448:	f7fe fece 	bl	80171e8 <_malloc_r>
 801844c:	b948      	cbnz	r0, 8018462 <__smakebuf_r+0x46>
 801844e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018452:	059a      	lsls	r2, r3, #22
 8018454:	d4ee      	bmi.n	8018434 <__smakebuf_r+0x18>
 8018456:	f023 0303 	bic.w	r3, r3, #3
 801845a:	f043 0302 	orr.w	r3, r3, #2
 801845e:	81a3      	strh	r3, [r4, #12]
 8018460:	e7e2      	b.n	8018428 <__smakebuf_r+0xc>
 8018462:	89a3      	ldrh	r3, [r4, #12]
 8018464:	6020      	str	r0, [r4, #0]
 8018466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801846a:	81a3      	strh	r3, [r4, #12]
 801846c:	9b01      	ldr	r3, [sp, #4]
 801846e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018472:	b15b      	cbz	r3, 801848c <__smakebuf_r+0x70>
 8018474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018478:	4630      	mov	r0, r6
 801847a:	f000 f81d 	bl	80184b8 <_isatty_r>
 801847e:	b128      	cbz	r0, 801848c <__smakebuf_r+0x70>
 8018480:	89a3      	ldrh	r3, [r4, #12]
 8018482:	f023 0303 	bic.w	r3, r3, #3
 8018486:	f043 0301 	orr.w	r3, r3, #1
 801848a:	81a3      	strh	r3, [r4, #12]
 801848c:	89a3      	ldrh	r3, [r4, #12]
 801848e:	431d      	orrs	r5, r3
 8018490:	81a5      	strh	r5, [r4, #12]
 8018492:	e7cf      	b.n	8018434 <__smakebuf_r+0x18>

08018494 <_fstat_r>:
 8018494:	b538      	push	{r3, r4, r5, lr}
 8018496:	4d07      	ldr	r5, [pc, #28]	@ (80184b4 <_fstat_r+0x20>)
 8018498:	2300      	movs	r3, #0
 801849a:	4604      	mov	r4, r0
 801849c:	4608      	mov	r0, r1
 801849e:	4611      	mov	r1, r2
 80184a0:	602b      	str	r3, [r5, #0]
 80184a2:	f7ec fe58 	bl	8005156 <_fstat>
 80184a6:	1c43      	adds	r3, r0, #1
 80184a8:	d102      	bne.n	80184b0 <_fstat_r+0x1c>
 80184aa:	682b      	ldr	r3, [r5, #0]
 80184ac:	b103      	cbz	r3, 80184b0 <_fstat_r+0x1c>
 80184ae:	6023      	str	r3, [r4, #0]
 80184b0:	bd38      	pop	{r3, r4, r5, pc}
 80184b2:	bf00      	nop
 80184b4:	20013148 	.word	0x20013148

080184b8 <_isatty_r>:
 80184b8:	b538      	push	{r3, r4, r5, lr}
 80184ba:	4d06      	ldr	r5, [pc, #24]	@ (80184d4 <_isatty_r+0x1c>)
 80184bc:	2300      	movs	r3, #0
 80184be:	4604      	mov	r4, r0
 80184c0:	4608      	mov	r0, r1
 80184c2:	602b      	str	r3, [r5, #0]
 80184c4:	f7ec fe57 	bl	8005176 <_isatty>
 80184c8:	1c43      	adds	r3, r0, #1
 80184ca:	d102      	bne.n	80184d2 <_isatty_r+0x1a>
 80184cc:	682b      	ldr	r3, [r5, #0]
 80184ce:	b103      	cbz	r3, 80184d2 <_isatty_r+0x1a>
 80184d0:	6023      	str	r3, [r4, #0]
 80184d2:	bd38      	pop	{r3, r4, r5, pc}
 80184d4:	20013148 	.word	0x20013148

080184d8 <_malloc_usable_size_r>:
 80184d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184dc:	1f18      	subs	r0, r3, #4
 80184de:	2b00      	cmp	r3, #0
 80184e0:	bfbc      	itt	lt
 80184e2:	580b      	ldrlt	r3, [r1, r0]
 80184e4:	18c0      	addlt	r0, r0, r3
 80184e6:	4770      	bx	lr

080184e8 <_init>:
 80184e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ea:	bf00      	nop
 80184ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ee:	bc08      	pop	{r3}
 80184f0:	469e      	mov	lr, r3
 80184f2:	4770      	bx	lr

080184f4 <_fini>:
 80184f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184f6:	bf00      	nop
 80184f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184fa:	bc08      	pop	{r3}
 80184fc:	469e      	mov	lr, r3
 80184fe:	4770      	bx	lr
