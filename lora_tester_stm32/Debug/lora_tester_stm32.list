
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a424  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e54  0801a5f4  0801a5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c448  0801c448  0001e208  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c448  0801c448  0001d448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c450  0801c450  0001e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c450  0801c450  0001d450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c454  0801c454  0001d454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  0801c458  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000c8  0801c520  0001e0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000168  0801c5c0  0001e168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009e14  20000208  0801c660  0001e208  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000a01c  0801c660  0001f01c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e208  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045da3  00000000  00000000  0001e238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009d4f  00000000  00000000  00063fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003978  00000000  00000000  0006dd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002c97  00000000  00000000  000716a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000397a8  00000000  00000000  0007433f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00050f09  00000000  00000000  000adae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012d485  00000000  00000000  000fe9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0022be75  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000f81c  00000000  00000000  0022beb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  0023b6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000208 	.word	0x20000208
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a5dc 	.word	0x0801a5dc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000020c 	.word	0x2000020c
 800020c:	0801a5dc 	.word	0x0801a5dc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f004 f85e 	bl	80046ec <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f019 fbd2 	bl	8019de8 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f019 fb26 	bl	8019cc0 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f004 f82e 	bl	80046ec <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f004 f8ff 	bl	8004894 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f004 f820 	bl	80046ec <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f004 f818 	bl	80046ec <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f004 f813 	bl	80046ec <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	0801a5f4 	.word	0x0801a5f4
 80006d4:	0801a610 	.word	0x0801a610
 80006d8:	0801a618 	.word	0x0801a618
 80006dc:	0801a630 	.word	0x0801a630
 80006e0:	0801a660 	.word	0x0801a660
 80006e4:	0801a698 	.word	0x0801a698

080006e8 <get_state_name>:
#include <stddef.h>
#include <stdio.h>
#include <string.h>

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0a      	cmp	r3, #10
 80006f6:	d82f      	bhi.n	8000758 <get_state_name+0x70>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	0800072d 	.word	0x0800072d
 8000704:	08000731 	.word	0x08000731
 8000708:	08000735 	.word	0x08000735
 800070c:	08000739 	.word	0x08000739
 8000710:	0800073d 	.word	0x0800073d
 8000714:	08000741 	.word	0x08000741
 8000718:	08000745 	.word	0x08000745
 800071c:	08000749 	.word	0x08000749
 8000720:	0800074d 	.word	0x0800074d
 8000724:	08000751 	.word	0x08000751
 8000728:	08000755 	.word	0x08000755
        case LORA_STATE_INIT: return "INIT";
 800072c:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <get_state_name+0x80>)
 800072e:	e014      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000730:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <get_state_name+0x84>)
 8000732:	e012      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <get_state_name+0x88>)
 8000736:	e010      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 8000738:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <get_state_name+0x8c>)
 800073a:	e00e      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <get_state_name+0x90>)
 800073e:	e00c      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <get_state_name+0x94>)
 8000742:	e00a      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 8000744:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <get_state_name+0x98>)
 8000746:	e008      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <get_state_name+0x9c>)
 800074a:	e006      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 800074c:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <get_state_name+0xa0>)
 800074e:	e004      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_DONE: return "DONE";
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <get_state_name+0xa4>)
 8000752:	e002      	b.n	800075a <get_state_name+0x72>
        case LORA_STATE_ERROR: return "ERROR";
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <get_state_name+0xa8>)
 8000756:	e000      	b.n	800075a <get_state_name+0x72>
        default: return "UNKNOWN";
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <get_state_name+0xac>)
    }
}
 800075a:	4618      	mov	r0, r3
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	0801a6c8 	.word	0x0801a6c8
 800076c:	0801a6d0 	.word	0x0801a6d0
 8000770:	0801a6dc 	.word	0x0801a6dc
 8000774:	0801a6e4 	.word	0x0801a6e4
 8000778:	0801a6f0 	.word	0x0801a6f0
 800077c:	0801a700 	.word	0x0801a700
 8000780:	0801a710 	.word	0x0801a710
 8000784:	0801a724 	.word	0x0801a724
 8000788:	0801a738 	.word	0x0801a738
 800078c:	0801a744 	.word	0x0801a744
 8000790:	0801a74c 	.word	0x0801a74c
 8000794:	0801a754 	.word	0x0801a754

08000798 <LoraStarter_Process>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b0bf      	sub	sp, #252	@ 0xfc
 800079c:	af02      	add	r7, sp, #8
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	f000 8283 	beq.w	8000cb0 <LoraStarter_Process+0x518>

    LoraState old_state = ctx->state;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	f887 30eb 	strb.w	r3, [r7, #235]	@ 0xeb

    switch(ctx->state) {
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	f200 825b 	bhi.w	8000c72 <LoraStarter_Process+0x4da>
 80007bc:	a201      	add	r2, pc, #4	@ (adr r2, 80007c4 <LoraStarter_Process+0x2c>)
 80007be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c2:	bf00      	nop
 80007c4:	080007e9 	.word	0x080007e9
 80007c8:	08000837 	.word	0x08000837
 80007cc:	0800088d 	.word	0x0800088d
 80007d0:	08000947 	.word	0x08000947
 80007d4:	0800095d 	.word	0x0800095d
 80007d8:	080009ab 	.word	0x080009ab
 80007dc:	08000a69 	.word	0x08000a69
 80007e0:	08000b99 	.word	0x08000b99
 80007e4:	08000bff 	.word	0x08000bff
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d102      	bne.n	8000808 <LoraStarter_Process+0x70>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	69db      	ldr	r3, [r3, #28]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <LoraStarter_Process+0x7e>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4aaa      	ldr	r2, [pc, #680]	@ (8000abc <LoraStarter_Process+0x324>)
 8000814:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800082c:	49a4      	ldr	r1, [pc, #656]	@ (8000ac0 <LoraStarter_Process+0x328>)
 800082e:	2001      	movs	r0, #1
 8000830:	f003 ff5c 	bl	80046ec <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 8000834:	e224      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68db      	ldr	r3, [r3, #12]
 800083e:	429a      	cmp	r2, r3
 8000840:	da20      	bge.n	8000884 <LoraStarter_Process+0xec>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	1c59      	adds	r1, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68d8      	ldr	r0, [r3, #12]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689a      	ldr	r2, [r3, #8]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4603      	mov	r3, r0
 800085e:	460a      	mov	r2, r1
 8000860:	4998      	ldr	r1, [pc, #608]	@ (8000ac4 <LoraStarter_Process+0x32c>)
 8000862:	2000      	movs	r0, #0
 8000864:	f003 ff42 	bl	80046ec <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fec8 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2202      	movs	r2, #2
 8000880:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 8000882:	e1fd      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                ctx->state = LORA_STATE_SEND_JOIN;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2203      	movs	r2, #3
 8000888:	701a      	strb	r2, [r3, #0]
            break;
 800088a:	e1f9      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	f000 81f1 	beq.w	8000c76 <LoraStarter_Process+0x4de>
                if (is_response_ok(uart_rx)) {
 8000894:	6838      	ldr	r0, [r7, #0]
 8000896:	f000 fa91 	bl	8000dbc <is_response_ok>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d010      	beq.n	80008c2 <LoraStarter_Process+0x12a>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	461a      	mov	r2, r3
 80008a8:	4987      	ldr	r1, [pc, #540]	@ (8000ac8 <LoraStarter_Process+0x330>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f003 ff1e 	bl	80046ec <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	1c5a      	adds	r2, r3, #1
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 80008c0:	e1d9      	b.n	8000c76 <LoraStarter_Process+0x4de>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 80008c2:	4982      	ldr	r1, [pc, #520]	@ (8000acc <LoraStarter_Process+0x334>)
 80008c4:	6838      	ldr	r0, [r7, #0]
 80008c6:	f019 faaa 	bl	8019e1e <strstr>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d107      	bne.n	80008e0 <LoraStarter_Process+0x148>
 80008d0:	497f      	ldr	r1, [pc, #508]	@ (8000ad0 <LoraStarter_Process+0x338>)
 80008d2:	6838      	ldr	r0, [r7, #0]
 80008d4:	f019 faa3 	bl	8019e1e <strstr>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f000 81cb 	beq.w	8000c76 <LoraStarter_Process+0x4de>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	497a      	ldr	r1, [pc, #488]	@ (8000ad4 <LoraStarter_Process+0x33c>)
 80008ea:	2002      	movs	r0, #2
 80008ec:	f003 fefe 	bl	80046ec <LOGGER_SendFormatted>
                    ctx->error_count++;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	dc0d      	bgt.n	800091e <LoraStarter_Process+0x186>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	3301      	adds	r3, #1
 800090e:	4972      	ldr	r1, [pc, #456]	@ (8000ad8 <LoraStarter_Process+0x340>)
 8000910:	2001      	movs	r0, #1
 8000912:	f003 feeb 	bl	80046ec <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
            break;
 800091c:	e1ab      	b.n	8000c76 <LoraStarter_Process+0x4de>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	3301      	adds	r3, #1
 8000924:	461a      	mov	r2, r3
 8000926:	496d      	ldr	r1, [pc, #436]	@ (8000adc <LoraStarter_Process+0x344>)
 8000928:	2002      	movs	r0, #2
 800092a:	f003 fedf 	bl	80046ec <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
            break;
 8000944:	e197      	b.n	8000c76 <LoraStarter_Process+0x4de>
        case LORA_STATE_SEND_JOIN:
            LORA_LOG_JOIN_ATTEMPT();
 8000946:	4966      	ldr	r1, [pc, #408]	@ (8000ae0 <LoraStarter_Process+0x348>)
 8000948:	2001      	movs	r0, #1
 800094a:	f003 fecf 	bl	80046ec <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 800094e:	4865      	ldr	r0, [pc, #404]	@ (8000ae4 <LoraStarter_Process+0x34c>)
 8000950:	f7ff fe5c 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2204      	movs	r2, #4
 8000958:	701a      	strb	r2, [r3, #0]
            break;
 800095a:	e191      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 818b 	beq.w	8000c7a <LoraStarter_Process+0x4e2>
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f000 fa91 	bl	8000e8c <is_join_response_ok>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	f000 8184 	beq.w	8000c7a <LoraStarter_Process+0x4e2>
                LORA_LOG_JOIN_SUCCESS();
 8000972:	495d      	ldr	r1, [pc, #372]	@ (8000ae8 <LoraStarter_Process+0x350>)
 8000974:	2001      	movs	r0, #1
 8000976:	f003 feb9 	bl	80046ec <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_SEND_PERIODIC;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2205      	movs	r2, #5
 800097e:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000992:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	@ 0x28
                LOG_INFO("[LoRa] Starting periodic send with message: %s", ctx->send_message);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	461a      	mov	r2, r3
 80009a0:	4952      	ldr	r1, [pc, #328]	@ (8000aec <LoraStarter_Process+0x354>)
 80009a2:	2001      	movs	r0, #1
 80009a4:	f003 fea2 	bl	80046ec <LOGGER_SendFormatted>
            }
            break;
 80009a8:	e167      	b.n	8000c7a <LoraStarter_Process+0x4e2>
        case LORA_STATE_SEND_PERIODIC:
            {
                char send_cmd[128];
                char hex_data[64];
                const char* message = (ctx->send_message != NULL) ? ctx->send_message : "Hello";
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d002      	beq.n	80009b8 <LoraStarter_Process+0x220>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	e000      	b.n	80009ba <LoraStarter_Process+0x222>
 80009b8:	4b40      	ldr	r3, [pc, #256]	@ (8000abc <LoraStarter_Process+0x324>)
 80009ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(message);
 80009be:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80009c2:	f7ff fc2f 	bl	8000224 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80009d2:	e014      	b.n	80009fe <LoraStarter_Process+0x266>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)message[i]);
 80009d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	f107 020c 	add.w	r2, r7, #12
 80009de:	18d0      	adds	r0, r2, r3
 80009e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009e4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4940      	ldr	r1, [pc, #256]	@ (8000af0 <LoraStarter_Process+0x358>)
 80009f0:	f019 f99c 	bl	8019d2c <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 80009f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80009f8:	3301      	adds	r3, #1
 80009fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80009fe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000a02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a06:	429a      	cmp	r2, r3
 8000a08:	da03      	bge.n	8000a12 <LoraStarter_Process+0x27a>
 8000a0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8000a0e:	2b1e      	cmp	r3, #30
 8000a10:	dde0      	ble.n	80009d4 <LoraStarter_Process+0x23c>
                }
                hex_data[len*2] = '\0';
 8000a12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	33f0      	adds	r3, #240	@ 0xf0
 8000a1a:	443b      	add	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f803 2ce4 	strb.w	r2, [r3, #-228]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8000a2a:	4a32      	ldr	r2, [pc, #200]	@ (8000af4 <LoraStarter_Process+0x35c>)
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	f019 f947 	bl	8019cc0 <sniprintf>
                LORA_LOG_SEND_ATTEMPT(message);
 8000a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000a36:	4930      	ldr	r1, [pc, #192]	@ (8000af8 <LoraStarter_Process+0x360>)
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f003 fe57 	bl	80046ec <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000a3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fde2 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2206      	movs	r2, #6
 8000a4c:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4927      	ldr	r1, [pc, #156]	@ (8000afc <LoraStarter_Process+0x364>)
 8000a60:	2000      	movs	r0, #0
 8000a62:	f003 fe43 	bl	80046ec <LOGGER_SendFormatted>
            }
            break;
 8000a66:	e10b      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 8107 	beq.w	8000c7e <LoraStarter_Process+0x4e6>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000a70:	6838      	ldr	r0, [r7, #0]
 8000a72:	f000 fa8f 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
                switch(response_type) {
 8000a7c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000a80:	2b02      	cmp	r3, #2
 8000a82:	d03f      	beq.n	8000b04 <LoraStarter_Process+0x36c>
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	f300 8080 	bgt.w	8000b8a <LoraStarter_Process+0x3f2>
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <LoraStarter_Process+0x2fc>
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d04c      	beq.n	8000b2c <LoraStarter_Process+0x394>
 8000a92:	e07a      	b.n	8000b8a <LoraStarter_Process+0x3f2>
                    case RESPONSE_OK:
                        LORA_LOG_SEND_SUCCESS();
 8000a94:	491a      	ldr	r1, [pc, #104]	@ (8000b00 <LoraStarter_Process+0x368>)
 8000a96:	2001      	movs	r0, #1
 8000a98:	f003 fe28 	bl	80046ec <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aae:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000ab0:	f003 fdb2 	bl	8004618 <TIME_GetCurrentMs>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	611a      	str	r2, [r3, #16]
                        break;
 8000aba:	e06c      	b.n	8000b96 <LoraStarter_Process+0x3fe>
 8000abc:	0801a778 	.word	0x0801a778
 8000ac0:	0801a780 	.word	0x0801a780
 8000ac4:	0801a7b8 	.word	0x0801a7b8
 8000ac8:	0801a7dc 	.word	0x0801a7dc
 8000acc:	0801a74c 	.word	0x0801a74c
 8000ad0:	0801a7fc 	.word	0x0801a7fc
 8000ad4:	0801a814 	.word	0x0801a814
 8000ad8:	0801a834 	.word	0x0801a834
 8000adc:	0801a860 	.word	0x0801a860
 8000ae0:	0801a89c 	.word	0x0801a89c
 8000ae4:	0801a8b8 	.word	0x0801a8b8
 8000ae8:	0801a8c4 	.word	0x0801a8c4
 8000aec:	0801a8dc 	.word	0x0801a8dc
 8000af0:	0801a90c 	.word	0x0801a90c
 8000af4:	0801a914 	.word	0x0801a914
 8000af8:	0801a924 	.word	0x0801a924
 8000afc:	0801a93c 	.word	0x0801a93c
 8000b00:	0801a954 	.word	0x0801a954
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout");
 8000b04:	496c      	ldr	r1, [pc, #432]	@ (8000cb8 <LoraStarter_Process+0x520>)
 8000b06:	2002      	movs	r0, #2
 8000b08:	f003 fdf0 	bl	80046ec <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 주기적 대기 상태로 전이
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2207      	movs	r2, #7
 8000b10:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 마지막 송신 시간 저장
 8000b20:	f003 fd7a 	bl	8004618 <TIME_GetCurrentMs>
 8000b24:	4602      	mov	r2, r0
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	611a      	str	r2, [r3, #16]
                        break;
 8000b2a:	e034      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000b2c:	4a63      	ldr	r2, [pc, #396]	@ (8000cbc <LoraStarter_Process+0x524>)
 8000b2e:	4964      	ldr	r1, [pc, #400]	@ (8000cc0 <LoraStarter_Process+0x528>)
 8000b30:	2002      	movs	r0, #2
 8000b32:	f003 fddb 	bl	80046ec <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	6a1b      	ldr	r3, [r3, #32]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	461a      	mov	r2, r3
 8000b46:	495f      	ldr	r1, [pc, #380]	@ (8000cc4 <LoraStarter_Process+0x52c>)
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f003 fdcf 	bl	80046ec <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <LoraStarter_Process+0x3ca>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6a1a      	ldr	r2, [r3, #32]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	da0b      	bge.n	8000b7a <LoraStarter_Process+0x3e2>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6a1a      	ldr	r2, [r3, #32]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b6a:	4957      	ldr	r1, [pc, #348]	@ (8000cc8 <LoraStarter_Process+0x530>)
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f003 fdbd 	bl	80046ec <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2208      	movs	r2, #8
 8000b76:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000b78:	e00d      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000b7a:	4954      	ldr	r1, [pc, #336]	@ (8000ccc <LoraStarter_Process+0x534>)
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f003 fdb5 	bl	80046ec <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	220a      	movs	r2, #10
 8000b86:	701a      	strb	r2, [r3, #0]
                        break;
 8000b88:	e005      	b.n	8000b96 <LoraStarter_Process+0x3fe>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	4950      	ldr	r1, [pc, #320]	@ (8000cd0 <LoraStarter_Process+0x538>)
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f003 fdac 	bl	80046ec <LOGGER_SendFormatted>
                        break;
 8000b94:	bf00      	nop
                }
            }
            break;
 8000b96:	e072      	b.n	8000c7e <LoraStarter_Process+0x4e6>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000b98:	f003 fd3e 	bl	8004618 <TIME_GetCurrentMs>
 8000b9c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	695b      	ldr	r3, [r3, #20]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <LoraStarter_Process+0x416>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	e001      	b.n	8000bb2 <LoraStarter_Process+0x41a>
 8000bae:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	691b      	ldr	r3, [r3, #16]
 8000bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d809      	bhi.n	8000bdc <LoraStarter_Process+0x444>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), ready for next send", interval_ms);
 8000bc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bcc:	4941      	ldr	r1, [pc, #260]	@ (8000cd4 <LoraStarter_Process+0x53c>)
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f003 fd8c 	bl	80046ec <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_PERIODIC;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2205      	movs	r2, #5
 8000bd8:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000bda:	e051      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	691a      	ldr	r2, [r3, #16]
 8000be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000bea:	4413      	add	r3, r2
 8000bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000bf0:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000bf4:	4938      	ldr	r1, [pc, #224]	@ (8000cd8 <LoraStarter_Process+0x540>)
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f003 fd78 	bl	80046ec <LOGGER_SendFormatted>
            break;
 8000bfc:	e040      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000bfe:	f003 fd0b 	bl	8004618 <TIME_GetCurrentMs>
 8000c02:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
                
                if (ctx->last_retry_time == 0) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10b      	bne.n	8000c26 <LoraStarter_Process+0x48e>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000c0e:	4933      	ldr	r1, [pc, #204]	@ (8000cdc <LoraStarter_Process+0x544>)
 8000c10:	2000      	movs	r0, #0
 8000c12:	f003 fd6b 	bl	80046ec <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c1c:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2203      	movs	r2, #3
 8000c22:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000c24:	e02c      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c2e:	1ad2      	subs	r2, r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d30e      	bcc.n	8000c56 <LoraStarter_Process+0x4be>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4928      	ldr	r1, [pc, #160]	@ (8000ce0 <LoraStarter_Process+0x548>)
 8000c40:	2000      	movs	r0, #0
 8000c42:	f003 fd53 	bl	80046ec <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8000c4c:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2203      	movs	r2, #3
 8000c52:	701a      	strb	r2, [r3, #0]
            break;
 8000c54:	e014      	b.n	8000c80 <LoraStarter_Process+0x4e8>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000c62:	1acb      	subs	r3, r1, r3
 8000c64:	4413      	add	r3, r2
 8000c66:	461a      	mov	r2, r3
 8000c68:	491e      	ldr	r1, [pc, #120]	@ (8000ce4 <LoraStarter_Process+0x54c>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f003 fd3e 	bl	80046ec <LOGGER_SendFormatted>
            break;
 8000c70:	e006      	b.n	8000c80 <LoraStarter_Process+0x4e8>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000c72:	bf00      	nop
 8000c74:	e004      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c76:	bf00      	nop
 8000c78:	e002      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c7a:	bf00      	nop
 8000c7c:	e000      	b.n	8000c80 <LoraStarter_Process+0x4e8>
            break;
 8000c7e:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	f897 20eb 	ldrb.w	r2, [r7, #235]	@ 0xeb
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d012      	beq.n	8000cb2 <LoraStarter_Process+0x51a>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000c8c:	f897 30eb 	ldrb.w	r3, [r7, #235]	@ 0xeb
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fd29 	bl	80006e8 <get_state_name>
 8000c96:	4604      	mov	r4, r0
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fd23 	bl	80006e8 <get_state_name>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	4910      	ldr	r1, [pc, #64]	@ (8000ce8 <LoraStarter_Process+0x550>)
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f003 fd1f 	bl	80046ec <LOGGER_SendFormatted>
 8000cae:	e000      	b.n	8000cb2 <LoraStarter_Process+0x51a>
    if (ctx == NULL) return;
 8000cb0:	bf00      	nop
    }
}
 8000cb2:	37f4      	adds	r7, #244	@ 0xf4
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	0801a96c 	.word	0x0801a96c
 8000cbc:	0801a980 	.word	0x0801a980
 8000cc0:	0801a990 	.word	0x0801a990
 8000cc4:	0801a9a8 	.word	0x0801a9a8
 8000cc8:	0801a9c0 	.word	0x0801a9c0
 8000ccc:	0801a9dc 	.word	0x0801a9dc
 8000cd0:	0801aa00 	.word	0x0801aa00
 8000cd4:	0801aa1c 	.word	0x0801aa1c
 8000cd8:	0801aa58 	.word	0x0801aa58
 8000cdc:	0801aa8c 	.word	0x0801aa8c
 8000ce0:	0801aaa4 	.word	0x0801aaa4
 8000ce4:	0801aacc 	.word	0x0801aacc
 8000ce8:	0801ab00 	.word	0x0801ab00

08000cec <Network_SendBinary>:
    
    return NETWORK_OK;
}

int Network_SendBinary(const void* data, size_t size)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
    if (!g_connected) {
 8000cf6:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <Network_SendBinary+0x8c>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f083 0301 	eor.w	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <Network_SendBinary+0x1e>
        return NETWORK_NOT_CONNECTED;
 8000d04:	f06f 0301 	mvn.w	r3, #1
 8000d08:	e032      	b.n	8000d70 <Network_SendBinary+0x84>
    }
    
    if (data == NULL || size == 0) {
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <Network_SendBinary+0x2a>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d102      	bne.n	8000d1c <Network_SendBinary+0x30>
        return NETWORK_INVALID_PARAM;
 8000d16:	f06f 0303 	mvn.w	r3, #3
 8000d1a:	e029      	b.n	8000d70 <Network_SendBinary+0x84>
    }
    
    // 백엔드에 따른 분기 처리
    switch (g_backend) {
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <Network_SendBinary+0x90>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <Network_SendBinary+0x3e>
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d002      	beq.n	8000d2e <Network_SendBinary+0x42>
 8000d28:	e020      	b.n	8000d6c <Network_SendBinary+0x80>
        case NETWORK_BACKEND_SOCKET:
            // 실제 구현에서는 소켓을 통한 데이터 전송
            // 지금은 테스트를 위한 최소 구현
            return NETWORK_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e020      	b.n	8000d70 <Network_SendBinary+0x84>
            
        case NETWORK_BACKEND_SD_CARD:
            {
                int result = SDStorage_WriteLog(data, size);
 8000d2e:	6839      	ldr	r1, [r7, #0]
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f000 f985 	bl	8001040 <SDStorage_WriteLog>
 8000d36:	60f8      	str	r0, [r7, #12]
                switch (result) {
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00b      	beq.n	8000d56 <Network_SendBinary+0x6a>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dc10      	bgt.n	8000d66 <Network_SendBinary+0x7a>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f113 0f05 	cmn.w	r3, #5
 8000d4a:	d009      	beq.n	8000d60 <Network_SendBinary+0x74>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f113 0f02 	cmn.w	r3, #2
 8000d52:	d002      	beq.n	8000d5a <Network_SendBinary+0x6e>
 8000d54:	e007      	b.n	8000d66 <Network_SendBinary+0x7a>
                    case SDSTORAGE_OK:
                        return NETWORK_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e00a      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_NOT_READY:
                        return NETWORK_NOT_CONNECTED;
 8000d5a:	f06f 0301 	mvn.w	r3, #1
 8000d5e:	e007      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_INVALID_PARAM:
                        return NETWORK_INVALID_PARAM;
 8000d60:	f06f 0303 	mvn.w	r3, #3
 8000d64:	e004      	b.n	8000d70 <Network_SendBinary+0x84>
                    case SDSTORAGE_DISK_FULL:
                    case SDSTORAGE_FILE_ERROR:
                    default:
                        return NETWORK_ERROR;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e001      	b.n	8000d70 <Network_SendBinary+0x84>
                }
            }
            
        default:
            return NETWORK_ERROR;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000224 	.word	0x20000224
 8000d7c:	20000225 	.word	0x20000225

08000d80 <Network_IsConnected>:

bool Network_IsConnected(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    if (g_backend == NETWORK_BACKEND_SD_CARD) {
 8000d84:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <Network_IsConnected+0x34>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10f      	bne.n	8000dac <Network_IsConnected+0x2c>
        return g_connected && SDStorage_IsReady();
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000db8 <Network_IsConnected+0x38>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <Network_IsConnected+0x22>
 8000d94:	f000 f9c0 	bl	8001118 <SDStorage_IsReady>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <Network_IsConnected+0x22>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <Network_IsConnected+0x24>
 8000da2:	2300      	movs	r3, #0
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	e001      	b.n	8000db0 <Network_IsConnected+0x30>
    }
    return g_connected;
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <Network_IsConnected+0x38>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000225 	.word	0x20000225
 8000db8:	20000224 	.word	0x20000224

08000dbc <is_response_ok>:
#include "ResponseHandler.h"
#include "logger.h"
#include <string.h>

bool is_response_ok(const char* response)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d105      	bne.n	8000dd6 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000dca:	4925      	ldr	r1, [pc, #148]	@ (8000e60 <is_response_ok+0xa4>)
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f003 fc8d 	bl	80046ec <LOGGER_SendFormatted>
        return false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e03f      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	4922      	ldr	r1, [pc, #136]	@ (8000e64 <is_response_ok+0xa8>)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f003 fc86 	bl	80046ec <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 8000de0:	4921      	ldr	r1, [pc, #132]	@ (8000e68 <is_response_ok+0xac>)
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fa14 	bl	8000210 <strcmp>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d105      	bne.n	8000dfa <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 8000dee:	491f      	ldr	r1, [pc, #124]	@ (8000e6c <is_response_ok+0xb0>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f003 fc7b 	bl	80046ec <LOGGER_SendFormatted>
        return true;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e02d      	b.n	8000e56 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8000dfa:	491d      	ldr	r1, [pc, #116]	@ (8000e70 <is_response_ok+0xb4>)
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff fa07 	bl	8000210 <strcmp>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d105      	bne.n	8000e14 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8000e08:	491a      	ldr	r1, [pc, #104]	@ (8000e74 <is_response_ok+0xb8>)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f003 fc6e 	bl	80046ec <LOGGER_SendFormatted>
        return true;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e020      	b.n	8000e56 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8000e14:	4918      	ldr	r1, [pc, #96]	@ (8000e78 <is_response_ok+0xbc>)
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff f9fa 	bl	8000210 <strcmp>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 8000e22:	4916      	ldr	r1, [pc, #88]	@ (8000e7c <is_response_ok+0xc0>)
 8000e24:	2000      	movs	r0, #0
 8000e26:	f003 fc61 	bl	80046ec <LOGGER_SendFormatted>
        return true;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e013      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 8000e2e:	4914      	ldr	r1, [pc, #80]	@ (8000e80 <is_response_ok+0xc4>)
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f018 fff4 	bl	8019e1e <strstr>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	4911      	ldr	r1, [pc, #68]	@ (8000e84 <is_response_ok+0xc8>)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f003 fc53 	bl	80046ec <LOGGER_SendFormatted>
        return true;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e005      	b.n	8000e56 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	490e      	ldr	r1, [pc, #56]	@ (8000e88 <is_response_ok+0xcc>)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f003 fc4c 	bl	80046ec <LOGGER_SendFormatted>
    return false;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	0801ab20 	.word	0x0801ab20
 8000e64:	0801ab50 	.word	0x0801ab50
 8000e68:	0801ab80 	.word	0x0801ab80
 8000e6c:	0801ab84 	.word	0x0801ab84
 8000e70:	0801abac 	.word	0x0801abac
 8000e74:	0801abb4 	.word	0x0801abb4
 8000e78:	0801abe8 	.word	0x0801abe8
 8000e7c:	0801abec 	.word	0x0801abec
 8000e80:	0801ac20 	.word	0x0801ac20
 8000e84:	0801ac28 	.word	0x0801ac28
 8000e88:	0801ac5c 	.word	0x0801ac5c

08000e8c <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000e98:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000e9c:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 8000e9e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ea2:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d105      	bne.n	8000eb8 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 8000eac:	4934      	ldr	r1, [pc, #208]	@ (8000f80 <is_join_response_ok+0xf4>)
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f003 fc1c 	bl	80046ec <LOGGER_SendFormatted>
        return false;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e05e      	b.n	8000f76 <is_join_response_ok+0xea>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 8000eb8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ebc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4930      	ldr	r1, [pc, #192]	@ (8000f84 <is_join_response_ok+0xf8>)
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	f003 fc11 	bl	80046ec <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 8000eca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ece:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000ed2:	f107 0008 	add.w	r0, r7, #8
 8000ed6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	f018 ff8c 	bl	8019df8 <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 8000ee0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000ee4:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000ef6:	e013      	b.n	8000f20 <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8000ef8:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b0d      	cmp	r3, #13
 8000f00:	d004      	beq.n	8000f0c <is_join_response_ok+0x80>
 8000f02:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b0a      	cmp	r3, #10
 8000f0a:	d104      	bne.n	8000f16 <is_join_response_ok+0x8a>
            *pos = '\0';
 8000f0c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
            break;
 8000f14:	e009      	b.n	8000f2a <is_join_response_ok+0x9e>
        }
        pos++;
 8000f16:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8000f20:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d1e6      	bne.n	8000ef8 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	4916      	ldr	r1, [pc, #88]	@ (8000f88 <is_join_response_ok+0xfc>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f96d 	bl	8000210 <strcmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8000f44:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d009      	beq.n	8000f60 <is_join_response_ok+0xd4>
        LOG_INFO("[ResponseHandler] JOIN response confirmed: %s", response);
 8000f4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f50:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <is_join_response_ok+0x100>)
 8000f58:	2001      	movs	r0, #1
 8000f5a:	f003 fbc7 	bl	80046ec <LOGGER_SendFormatted>
 8000f5e:	e008      	b.n	8000f72 <is_join_response_ok+0xe6>
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 8000f60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8000f64:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4909      	ldr	r1, [pc, #36]	@ (8000f90 <is_join_response_ok+0x104>)
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f003 fbbd 	bl	80046ec <LOGGER_SendFormatted>
    }
    
    return result;
 8000f72:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0801ac88 	.word	0x0801ac88
 8000f84:	0801acc0 	.word	0x0801acc0
 8000f88:	0801acf0 	.word	0x0801acf0
 8000f8c:	0801acfc 	.word	0x0801acfc
 8000f90:	0801ad2c 	.word	0x0801ad2c

08000f94 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d105      	bne.n	8000fae <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 8000fa2:	491e      	ldr	r1, [pc, #120]	@ (800101c <ResponseHandler_ParseSendResponse+0x88>)
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f003 fba1 	bl	80046ec <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e031      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	491b      	ldr	r1, [pc, #108]	@ (8001020 <ResponseHandler_ParseSendResponse+0x8c>)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f003 fb9a 	bl	80046ec <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 8000fb8:	491a      	ldr	r1, [pc, #104]	@ (8001024 <ResponseHandler_ParseSendResponse+0x90>)
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f018 ff2f 	bl	8019e1e <strstr>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_INFO("[ResponseHandler] SEND response: CONFIRMED_OK");
 8000fc6:	4918      	ldr	r1, [pc, #96]	@ (8001028 <ResponseHandler_ParseSendResponse+0x94>)
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f003 fb8f 	bl	80046ec <LOGGER_SendFormatted>
        return RESPONSE_OK;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e01f      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8000fd2:	4916      	ldr	r1, [pc, #88]	@ (800102c <ResponseHandler_ParseSendResponse+0x98>)
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f018 ff22 	bl	8019e1e <strstr>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d005      	beq.n	8000fec <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8000fe0:	4913      	ldr	r1, [pc, #76]	@ (8001030 <ResponseHandler_ParseSendResponse+0x9c>)
 8000fe2:	2002      	movs	r0, #2
 8000fe4:	f003 fb82 	bl	80046ec <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e012      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 8000fec:	4911      	ldr	r1, [pc, #68]	@ (8001034 <ResponseHandler_ParseSendResponse+0xa0>)
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff f90e 	bl	8000210 <strcmp>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d105      	bne.n	8001006 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 8000ffa:	490f      	ldr	r1, [pc, #60]	@ (8001038 <ResponseHandler_ParseSendResponse+0xa4>)
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f003 fb75 	bl	80046ec <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001002:	2302      	movs	r3, #2
 8001004:	e005      	b.n	8001012 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	490c      	ldr	r1, [pc, #48]	@ (800103c <ResponseHandler_ParseSendResponse+0xa8>)
 800100a:	2000      	movs	r0, #0
 800100c:	f003 fb6e 	bl	80046ec <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8001010:	2303      	movs	r3, #3
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	0801ad58 	.word	0x0801ad58
 8001020:	0801ad8c 	.word	0x0801ad8c
 8001024:	0801adbc 	.word	0x0801adbc
 8001028:	0801add4 	.word	0x0801add4
 800102c:	0801ae04 	.word	0x0801ae04
 8001030:	0801ae20 	.word	0x0801ae20
 8001034:	0801ae54 	.word	0x0801ae54
 8001038:	0801ae5c 	.word	0x0801ae5c
 800103c:	0801ae88 	.word	0x0801ae88

08001040 <SDStorage_WriteLog>:
    
    return SDSTORAGE_OK;
}

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    if (!g_sd_ready) {
 800104a:	4b2e      	ldr	r3, [pc, #184]	@ (8001104 <SDStorage_WriteLog+0xc4>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	f083 0301 	eor.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <SDStorage_WriteLog+0x1e>
        return SDSTORAGE_NOT_READY;
 8001058:	f06f 0301 	mvn.w	r3, #1
 800105c:	e04e      	b.n	80010fc <SDStorage_WriteLog+0xbc>
    }
    
    if (data == NULL || size == 0) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d002      	beq.n	800106a <SDStorage_WriteLog+0x2a>
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_INVALID_PARAM;
 800106a:	f06f 0304 	mvn.w	r3, #4
 800106e:	e045      	b.n	80010fc <SDStorage_WriteLog+0xbc>
    }
    
    // 새 로그 파일이 필요한 경우 생성
    if (strlen(g_current_log_file) == 0 || 
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <SDStorage_WriteLog+0xc8>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d006      	beq.n	8001086 <SDStorage_WriteLog+0x46>
        g_current_log_size + size > SDSTORAGE_MAX_LOG_SIZE) {
 8001078:	4b24      	ldr	r3, [pc, #144]	@ (800110c <SDStorage_WriteLog+0xcc>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	4413      	add	r3, r2
    if (strlen(g_current_log_file) == 0 || 
 8001080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001084:	d907      	bls.n	8001096 <SDStorage_WriteLog+0x56>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 8001086:	f000 f853 	bl	8001130 <SDStorage_CreateNewLogFile>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <SDStorage_WriteLog+0x56>
            return SDSTORAGE_FILE_ERROR;
 8001090:	f06f 0302 	mvn.w	r3, #2
 8001094:	e032      	b.n	80010fc <SDStorage_WriteLog+0xbc>
        }
    }

#ifdef STM32F746xx
    // STM32 환경: FatFs를 사용한 파일 쓰기
    if (!g_file_open) {
 8001096:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <SDStorage_WriteLog+0xd0>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f083 0301 	eor.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00d      	beq.n	80010c0 <SDStorage_WriteLog+0x80>
        if (f_open(&g_log_file, g_current_log_file, FA_WRITE | FA_OPEN_APPEND) != FR_OK) {
 80010a4:	2232      	movs	r2, #50	@ 0x32
 80010a6:	4918      	ldr	r1, [pc, #96]	@ (8001108 <SDStorage_WriteLog+0xc8>)
 80010a8:	481a      	ldr	r0, [pc, #104]	@ (8001114 <SDStorage_WriteLog+0xd4>)
 80010aa:	f014 fea0 	bl	8015dee <f_open>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <SDStorage_WriteLog+0x7a>
            return SDSTORAGE_FILE_ERROR;
 80010b4:	f06f 0302 	mvn.w	r3, #2
 80010b8:	e020      	b.n	80010fc <SDStorage_WriteLog+0xbc>
        }
        g_file_open = true;
 80010ba:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <SDStorage_WriteLog+0xd0>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
    }
    
    UINT bytes_written;
    if (f_write(&g_log_file, data, size, &bytes_written) != FR_OK) {
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4812      	ldr	r0, [pc, #72]	@ (8001114 <SDStorage_WriteLog+0xd4>)
 80010ca:	f015 f851 	bl	8016170 <f_write>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <SDStorage_WriteLog+0x9a>
        return SDSTORAGE_FILE_ERROR;
 80010d4:	f06f 0302 	mvn.w	r3, #2
 80010d8:	e010      	b.n	80010fc <SDStorage_WriteLog+0xbc>
    }
    
    if (bytes_written != size) {
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d002      	beq.n	80010e8 <SDStorage_WriteLog+0xa8>
        return SDSTORAGE_DISK_FULL;
 80010e2:	f06f 0303 	mvn.w	r3, #3
 80010e6:	e009      	b.n	80010fc <SDStorage_WriteLog+0xbc>
    }
    
    // 즉시 플러시하여 데이터 안정성 확보
    f_sync(&g_log_file);
 80010e8:	480a      	ldr	r0, [pc, #40]	@ (8001114 <SDStorage_WriteLog+0xd4>)
 80010ea:	f015 f9e5 	bl	80164b8 <f_sync>
#else
    // PC/테스트 환경: 파일 I/O 시뮬레이션 (항상 성공)
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <SDStorage_WriteLog+0xcc>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	4413      	add	r3, r2
 80010f6:	4a05      	ldr	r2, [pc, #20]	@ (800110c <SDStorage_WriteLog+0xcc>)
 80010f8:	6013      	str	r3, [r2, #0]
    return SDSTORAGE_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000226 	.word	0x20000226
 8001108:	20000228 	.word	0x20000228
 800110c:	20000328 	.word	0x20000328
 8001110:	2000055c 	.word	0x2000055c
 8001114:	2000032c 	.word	0x2000032c

08001118 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
    return g_sd_ready;
 800111c:	4b03      	ldr	r3, [pc, #12]	@ (800112c <SDStorage_IsReady+0x14>)
 800111e:	781b      	ldrb	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000226 	.word	0x20000226

08001130 <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001134:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <SDStorage_CreateNewLogFile+0x70>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f083 0301 	eor.w	r3, r3, #1
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <SDStorage_CreateNewLogFile+0x18>
        return SDSTORAGE_NOT_READY;
 8001142:	f06f 0301 	mvn.w	r3, #1
 8001146:	e029      	b.n	800119c <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 이전 파일이 열려있다면 닫기
#ifdef STM32F746xx
    if (g_file_open) {
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <SDStorage_CreateNewLogFile+0x74>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <SDStorage_CreateNewLogFile+0x2c>
        f_close(&g_log_file);
 8001150:	4815      	ldr	r0, [pc, #84]	@ (80011a8 <SDStorage_CreateNewLogFile+0x78>)
 8001152:	f015 fa3a 	bl	80165ca <f_close>
        g_file_open = false;
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <SDStorage_CreateNewLogFile+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
        g_log_file = NULL;
    }
#endif
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	4812      	ldr	r0, [pc, #72]	@ (80011ac <SDStorage_CreateNewLogFile+0x7c>)
 8001162:	f000 f827 	bl	80011b4 <_generate_log_filename>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <SDStorage_CreateNewLogFile+0x42>
        return SDSTORAGE_ERROR;
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	e014      	b.n	800119c <SDStorage_CreateNewLogFile+0x6c>
    }
    
    // 파일 생성 확인
#ifdef STM32F746xx
    if (f_open(&g_log_file, g_current_log_file, FA_CREATE_NEW | FA_WRITE) != FR_OK) {
 8001172:	2206      	movs	r2, #6
 8001174:	490d      	ldr	r1, [pc, #52]	@ (80011ac <SDStorage_CreateNewLogFile+0x7c>)
 8001176:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <SDStorage_CreateNewLogFile+0x78>)
 8001178:	f014 fe39 	bl	8015dee <f_open>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <SDStorage_CreateNewLogFile+0x58>
        return SDSTORAGE_FILE_ERROR;
 8001182:	f06f 0302 	mvn.w	r3, #2
 8001186:	e009      	b.n	800119c <SDStorage_CreateNewLogFile+0x6c>
    }
    f_close(&g_log_file);
 8001188:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <SDStorage_CreateNewLogFile+0x78>)
 800118a:	f015 fa1e 	bl	80165ca <f_close>
    g_file_open = false;
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <SDStorage_CreateNewLogFile+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    // 실제 파일 생성 없이 성공으로 처리
#endif
    
    g_current_log_size = 0;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <SDStorage_CreateNewLogFile+0x80>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000226 	.word	0x20000226
 80011a4:	2000055c 	.word	0x2000055c
 80011a8:	2000032c 	.word	0x2000032c
 80011ac:	20000228 	.word	0x20000228
 80011b0:	20000328 	.word	0x20000328

080011b4 <_generate_log_filename>:
#endif
    return SDSTORAGE_OK;
}

static int _generate_log_filename(char* filename, size_t max_len)
{
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	b095      	sub	sp, #84	@ 0x54
 80011b8:	af08      	add	r7, sp, #32
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
    uint32_t timestamp = _get_current_timestamp();
 80011be:	f000 f86f 	bl	80012a0 <_get_current_timestamp>
 80011c2:	6278      	str	r0, [r7, #36]	@ 0x24
    
    // YYYYMMDD_HHMMSS 형식으로 타임스탬프 생성
    uint16_t year = 2025;   // 기본값
 80011c4:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 80011c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint8_t month = 1, day = 1, hour = 0, minute = 0, second = 0;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80011d0:	2301      	movs	r3, #1
 80011d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80011e2:	2300      	movs	r3, #0
 80011e4:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
#ifdef STM32F746xx
    // STM32: RTC에서 실제 시간 읽기
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;
    
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 80011e8:	f107 030c 	add.w	r3, r7, #12
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	4826      	ldr	r0, [pc, #152]	@ (800128c <_generate_log_filename+0xd8>)
 80011f2:	f00a f8ef 	bl	800b3d4 <HAL_RTC_GetTime>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d11c      	bne.n	8001236 <_generate_log_filename+0x82>
        HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	4821      	ldr	r0, [pc, #132]	@ (800128c <_generate_log_filename+0xd8>)
 8001206:	f00a f9c7 	bl	800b598 <HAL_RTC_GetDate>
 800120a:	4603      	mov	r3, r0
    if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 800120c:	2b00      	cmp	r3, #0
 800120e:	d112      	bne.n	8001236 <_generate_log_filename+0x82>
        year = 2000 + sDate.Year;
 8001210:	7afb      	ldrb	r3, [r7, #11]
 8001212:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001216:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        month = sDate.Month;
 8001218:	7a7b      	ldrb	r3, [r7, #9]
 800121a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        day = sDate.Date;
 800121e:	7abb      	ldrb	r3, [r7, #10]
 8001220:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        hour = sTime.Hours;
 8001224:	7b3b      	ldrb	r3, [r7, #12]
 8001226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        minute = sTime.Minutes;
 800122a:	7b7b      	ldrb	r3, [r7, #13]
 800122c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        second = sTime.Seconds;
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    hour = 10;
    minute = 30;
    second = timestamp % 60;  // 타임스탬프 기반 변화
#endif
    
    int result = snprintf(filename, max_len, 
 8001236:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001238:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800123c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8001240:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8001244:	f897 402a 	ldrb.w	r4, [r7, #42]	@ 0x2a
 8001248:	f897 5029 	ldrb.w	r5, [r7, #41]	@ 0x29
 800124c:	4e10      	ldr	r6, [pc, #64]	@ (8001290 <_generate_log_filename+0xdc>)
 800124e:	9607      	str	r6, [sp, #28]
 8001250:	9506      	str	r5, [sp, #24]
 8001252:	9405      	str	r4, [sp, #20]
 8001254:	9004      	str	r0, [sp, #16]
 8001256:	9103      	str	r1, [sp, #12]
 8001258:	9202      	str	r2, [sp, #8]
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <_generate_log_filename+0xe0>)
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <_generate_log_filename+0xe4>)
 8001262:	4a0e      	ldr	r2, [pc, #56]	@ (800129c <_generate_log_filename+0xe8>)
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f018 fd2a 	bl	8019cc0 <sniprintf>
 800126c:	6238      	str	r0, [r7, #32]
                         SDSTORAGE_LOG_DIR,
                         SDSTORAGE_LOG_PREFIX,
                         year, month, day, hour, minute, second,
                         SDSTORAGE_LOG_EXTENSION);
    
    if (result < 0 || (size_t)result >= max_len) {
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	2b00      	cmp	r3, #0
 8001272:	db03      	blt.n	800127c <_generate_log_filename+0xc8>
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d802      	bhi.n	8001282 <_generate_log_filename+0xce>
        return SDSTORAGE_ERROR;
 800127c:	f04f 33ff 	mov.w	r3, #4294967295
 8001280:	e000      	b.n	8001284 <_generate_log_filename+0xd0>
    }
    
    return SDSTORAGE_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3734      	adds	r7, #52	@ 0x34
 8001288:	46bd      	mov	sp, r7
 800128a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128c:	20000b38 	.word	0x20000b38
 8001290:	0801af58 	.word	0x0801af58
 8001294:	0801af60 	.word	0x0801af60
 8001298:	0801af28 	.word	0x0801af28
 800129c:	0801af34 	.word	0x0801af34

080012a0 <_get_current_timestamp>:

static uint32_t _get_current_timestamp(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    return HAL_GetTick();
 80012a4:	f003 fe50 	bl	8004f48 <HAL_GetTick>
 80012a8:	4603      	mov	r3, r0
#else
    return (uint32_t)time(NULL);
#endif
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}

080012ae <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a07      	ldr	r2, [pc, #28]	@ (800130c <vApplicationGetIdleTaskMemory+0x2c>)
 80012f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <vApplicationGetIdleTaskMemory+0x30>)
 80012f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2280      	movs	r2, #128	@ 0x80
 80012fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000560 	.word	0x20000560
 8001310:	200005b8 	.word	0x200005b8

08001314 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// UART DMA 콜백 함수들
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_UART_RxCpltCallback+0x38>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d10e      	bne.n	8001344 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_UART_RxCpltCallback+0x3c>)
 8001328:	2201      	movs	r2, #1
 800132a:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_UART_RxCpltCallback+0x40>)
 800132e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001332:	801a      	strh	r2, [r3, #0]
    LOG_INFO("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8001334:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <HAL_UART_RxCpltCallback+0x40>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	b29b      	uxth	r3, r3
 800133a:	461a      	mov	r2, r3
 800133c:	4906      	ldr	r1, [pc, #24]	@ (8001358 <HAL_UART_RxCpltCallback+0x44>)
 800133e:	2001      	movs	r0, #1
 8001340:	f003 f9d4 	bl	80046ec <LOGGER_SendFormatted>
  }
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40011400 	.word	0x40011400
 8001350:	20001510 	.word	0x20001510
 8001354:	20001512 	.word	0x20001512
 8001358:	0801af6c 	.word	0x0801af6c

0800135c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a05      	ldr	r2, [pc, #20]	@ (8001380 <HAL_UART_RxHalfCpltCallback+0x24>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d103      	bne.n	8001376 <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 800136e:	4905      	ldr	r1, [pc, #20]	@ (8001384 <HAL_UART_RxHalfCpltCallback+0x28>)
 8001370:	2002      	movs	r0, #2
 8001372:	f003 f9bb 	bl	80046ec <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40011400 	.word	0x40011400
 8001384:	0801afa4 	.word	0x0801afa4

08001388 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a3c      	ldr	r2, [pc, #240]	@ (8001488 <HAL_UART_ErrorCallback+0x100>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d171      	bne.n	800147e <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 800139a:	4b3c      	ldr	r3, [pc, #240]	@ (800148c <HAL_UART_ErrorCallback+0x104>)
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 80013a0:	493b      	ldr	r1, [pc, #236]	@ (8001490 <HAL_UART_ErrorCallback+0x108>)
 80013a2:	2002      	movs	r0, #2
 80013a4:	f003 f9a2 	bl	80046ec <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d107      	bne.n	80013c6 <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2208      	movs	r2, #8
 80013bc:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 80013be:	4935      	ldr	r1, [pc, #212]	@ (8001494 <HAL_UART_ErrorCallback+0x10c>)
 80013c0:	2002      	movs	r0, #2
 80013c2:	f003 f993 	bl	80046ec <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69db      	ldr	r3, [r3, #28]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d107      	bne.n	80013e4 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2204      	movs	r2, #4
 80013da:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 80013dc:	492e      	ldr	r1, [pc, #184]	@ (8001498 <HAL_UART_ErrorCallback+0x110>)
 80013de:	2002      	movs	r0, #2
 80013e0:	f003 f984 	bl	80046ec <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d107      	bne.n	8001402 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2202      	movs	r2, #2
 80013f8:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 80013fa:	4928      	ldr	r1, [pc, #160]	@ (800149c <HAL_UART_ErrorCallback+0x114>)
 80013fc:	2002      	movs	r0, #2
 80013fe:	f003 f975 	bl	80046ec <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d107      	bne.n	8001420 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 8001418:	4921      	ldr	r1, [pc, #132]	@ (80014a0 <HAL_UART_ErrorCallback+0x118>)
 800141a:	2002      	movs	r0, #2
 800141c:	f003 f966 	bl	80046ec <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f00d f9c2 	bl	800e7aa <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2220      	movs	r2, #32
 800142a:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2220      	movs	r2, #32
 8001430:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001440:	2201      	movs	r2, #1
 8001442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8001446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800144a:	2100      	movs	r1, #0
 800144c:	4815      	ldr	r0, [pc, #84]	@ (80014a4 <HAL_UART_ErrorCallback+0x11c>)
 800144e:	f018 fccb 	bl	8019de8 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001456:	4913      	ldr	r1, [pc, #76]	@ (80014a4 <HAL_UART_ErrorCallback+0x11c>)
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f00d f962 	bl	800e722 <HAL_UART_Receive_DMA>
 800145e:	4603      	mov	r3, r0
 8001460:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d104      	bne.n	8001472 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 8001468:	490f      	ldr	r1, [pc, #60]	@ (80014a8 <HAL_UART_ErrorCallback+0x120>)
 800146a:	2001      	movs	r0, #1
 800146c:	f003 f93e 	bl	80046ec <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 8001470:	e005      	b.n	800147e <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	461a      	mov	r2, r3
 8001476:	490d      	ldr	r1, [pc, #52]	@ (80014ac <HAL_UART_ErrorCallback+0x124>)
 8001478:	2003      	movs	r0, #3
 800147a:	f003 f937 	bl	80046ec <LOGGER_SendFormatted>
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40011400 	.word	0x40011400
 800148c:	20001511 	.word	0x20001511
 8001490:	0801aff0 	.word	0x0801aff0
 8001494:	0801b01c 	.word	0x0801b01c
 8001498:	0801b038 	.word	0x0801b038
 800149c:	0801b054 	.word	0x0801b054
 80014a0:	0801b070 	.word	0x0801b070
 80014a4:	200010a8 	.word	0x200010a8
 80014a8:	0801b08c 	.word	0x0801b08c
 80014ac:	0801b0c0 	.word	0x0801b0c0

080014b0 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af02      	add	r7, sp, #8
 80014b6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a3e      	ldr	r2, [pc, #248]	@ (80015b8 <USER_UART_IDLECallback+0x108>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d175      	bne.n	80015ae <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d103      	bne.n	80014dc <USER_UART_IDLECallback+0x2c>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d103      	bne.n	80014f2 <USER_UART_IDLECallback+0x42>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f043 0302 	orr.w	r3, r3, #2
 80014f0:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d103      	bne.n	8001508 <USER_UART_IDLECallback+0x58>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b01      	cmp	r3, #1
 8001514:	d103      	bne.n	800151e <USER_UART_IDLECallback+0x6e>
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 8001532:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8001534:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d033      	beq.n	80015a6 <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 800153e:	4b20      	ldr	r3, [pc, #128]	@ (80015c0 <USER_UART_IDLECallback+0x110>)
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	b29b      	uxth	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	491b      	ldr	r1, [pc, #108]	@ (80015c4 <USER_UART_IDLECallback+0x114>)
 8001556:	2002      	movs	r0, #2
 8001558:	f003 f8c8 	bl	80046ec <LOGGER_SendFormatted>
 800155c:	e007      	b.n	800156e <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_INFO("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	461a      	mov	r2, r3
 8001566:	4918      	ldr	r1, [pc, #96]	@ (80015c8 <USER_UART_IDLECallback+0x118>)
 8001568:	2001      	movs	r0, #1
 800156a:	f003 f8bf 	bl	80046ec <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <USER_UART_IDLECallback+0x10c>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	b29b      	uxth	r3, r3
 8001574:	2b03      	cmp	r3, #3
 8001576:	d912      	bls.n	800159e <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <USER_UART_IDLECallback+0x11c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <USER_UART_IDLECallback+0x11c>)
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	4618      	mov	r0, r3
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <USER_UART_IDLECallback+0x11c>)
 8001586:	789b      	ldrb	r3, [r3, #2]
 8001588:	461a      	mov	r2, r3
 800158a:	4b10      	ldr	r3, [pc, #64]	@ (80015cc <USER_UART_IDLECallback+0x11c>)
 800158c:	78db      	ldrb	r3, [r3, #3]
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	9200      	str	r2, [sp, #0]
 8001592:	4603      	mov	r3, r0
 8001594:	460a      	mov	r2, r1
 8001596:	490e      	ldr	r1, [pc, #56]	@ (80015d0 <USER_UART_IDLECallback+0x120>)
 8001598:	2000      	movs	r0, #0
 800159a:	f003 f8a7 	bl	80046ec <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f00d f903 	bl	800e7aa <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 80015a4:	e003      	b.n	80015ae <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 80015a6:	490b      	ldr	r1, [pc, #44]	@ (80015d4 <USER_UART_IDLECallback+0x124>)
 80015a8:	2000      	movs	r0, #0
 80015aa:	f003 f89f 	bl	80046ec <LOGGER_SendFormatted>
}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40011400 	.word	0x40011400
 80015bc:	20001512 	.word	0x20001512
 80015c0:	20001510 	.word	0x20001510
 80015c4:	0801b0f8 	.word	0x0801b0f8
 80015c8:	0801b138 	.word	0x0801b138
 80015cc:	200010a8 	.word	0x200010a8
 80015d0:	0801b160 	.word	0x0801b160
 80015d4:	0801b18c 	.word	0x0801b18c

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b098      	sub	sp, #96	@ 0x60
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015de:	f003 fc92 	bl	8004f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e2:	f000 f8f5 	bl	80017d0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015e6:	f000 f965 	bl	80018b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ea:	f001 f923 	bl	8002834 <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 80015ee:	f001 fdef 	bl	80031d0 <MX_DMA_Init>
//  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
  MX_ADC3_Init();
 80015f2:	f000 f991 	bl	8001918 <MX_ADC3_Init>
  MX_CRC_Init();
 80015f6:	f000 f9e1 	bl	80019bc <MX_CRC_Init>
  MX_DCMI_Init();
 80015fa:	f000 fa01 	bl	8001a00 <MX_DCMI_Init>
  MX_DMA2D_Init();
 80015fe:	f000 fa33 	bl	8001a68 <MX_DMA2D_Init>
  MX_ETH_Init();
 8001602:	f000 fa63 	bl	8001acc <MX_ETH_Init>
  MX_FMC_Init();
 8001606:	f001 f8c5 	bl	8002794 <MX_FMC_Init>
  MX_I2C1_Init();
 800160a:	f000 faad 	bl	8001b68 <MX_I2C1_Init>
  MX_I2C3_Init();
 800160e:	f000 faeb 	bl	8001be8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001612:	f000 fb29 	bl	8001c68 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8001616:	f000 fba9 	bl	8001d6c <MX_QUADSPI_Init>
  MX_RTC_Init();
 800161a:	f000 fbd3 	bl	8001dc4 <MX_RTC_Init>
  MX_SAI2_Init();
 800161e:	f000 fc75 	bl	8001f0c <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8001622:	f000 fd1b 	bl	800205c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8001626:	f000 fd3b 	bl	80020a0 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800162a:	f000 fd69 	bl	8002100 <MX_SPI2_Init>
  MX_TIM1_Init();
 800162e:	f000 fda5 	bl	800217c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001632:	f000 fe4f 	bl	80022d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001636:	f000 fec3 	bl	80023c0 <MX_TIM3_Init>
  MX_TIM5_Init();
 800163a:	f000 ff39 	bl	80024b0 <MX_TIM5_Init>
  MX_TIM8_Init();
 800163e:	f000 ffaf 	bl	80025a0 <MX_TIM8_Init>
  MX_TIM12_Init();
 8001642:	f001 f801 	bl	8002648 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8001646:	f001 f845 	bl	80026d4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800164a:	f001 f873 	bl	8002734 <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 800164e:	4b4d      	ldr	r3, [pc, #308]	@ (8001784 <main+0x1ac>)
 8001650:	4a4d      	ldr	r2, [pc, #308]	@ (8001788 <main+0x1b0>)
 8001652:	675a      	str	r2, [r3, #116]	@ 0x74
 8001654:	4b4c      	ldr	r3, [pc, #304]	@ (8001788 <main+0x1b0>)
 8001656:	4a4b      	ldr	r2, [pc, #300]	@ (8001784 <main+0x1ac>)
 8001658:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800165a:	4b4a      	ldr	r3, [pc, #296]	@ (8001784 <main+0x1ac>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b48      	ldr	r3, [pc, #288]	@ (8001784 <main+0x1ac>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0210 	orr.w	r2, r2, #16
 8001668:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 800166a:	f010 fa15 	bl	8011a98 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 800166e:	2100      	movs	r1, #0
 8001670:	4846      	ldr	r0, [pc, #280]	@ (800178c <main+0x1b4>)
 8001672:	f002 ffdf 	bl	8004634 <LOGGER_Connect>
  
  // SD카드 하드웨어 및 SDMMC 레벨 테스트
  LOG_INFO("=== SD Card Deep Diagnosis ===");
 8001676:	4946      	ldr	r1, [pc, #280]	@ (8001790 <main+0x1b8>)
 8001678:	2001      	movs	r0, #1
 800167a:	f003 f837 	bl	80046ec <LOGGER_SendFormatted>
  
  // 1. SD카드 감지 확인
  GPIO_PinState detect_pin = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800167e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001682:	4844      	ldr	r0, [pc, #272]	@ (8001794 <main+0x1bc>)
 8001684:	f005 fcd0 	bl	8007028 <HAL_GPIO_ReadPin>
 8001688:	4603      	mov	r3, r0
 800168a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  LOG_INFO("SD Detect Pin: %d", detect_pin);
 800168e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001692:	461a      	mov	r2, r3
 8001694:	4940      	ldr	r1, [pc, #256]	@ (8001798 <main+0x1c0>)
 8001696:	2001      	movs	r0, #1
 8001698:	f003 f828 	bl	80046ec <LOGGER_SendFormatted>
  
  // 2. SDMMC 직접 테스트
  HAL_SD_CardInfoTypeDef cardInfo;
  HAL_StatusTypeDef sd_status = HAL_SD_GetCardInfo(&hsd1, &cardInfo);
 800169c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016a0:	4619      	mov	r1, r3
 80016a2:	483e      	ldr	r0, [pc, #248]	@ (800179c <main+0x1c4>)
 80016a4:	f00a fff4 	bl	800c690 <HAL_SD_GetCardInfo>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  LOG_INFO("HAL_SD_GetCardInfo: %d", sd_status);
 80016ae:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80016b2:	461a      	mov	r2, r3
 80016b4:	493a      	ldr	r1, [pc, #232]	@ (80017a0 <main+0x1c8>)
 80016b6:	2001      	movs	r0, #1
 80016b8:	f003 f818 	bl	80046ec <LOGGER_SendFormatted>
  
  if (sd_status == HAL_OK) {
 80016bc:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d114      	bne.n	80016ee <main+0x116>
      LOG_INFO("✅ SD Card detected by SDMMC");
 80016c4:	4937      	ldr	r1, [pc, #220]	@ (80017a4 <main+0x1cc>)
 80016c6:	2001      	movs	r0, #1
 80016c8:	f003 f810 	bl	80046ec <LOGGER_SendFormatted>
      LOG_INFO("Card Type: %lu", cardInfo.CardType);
 80016cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ce:	461a      	mov	r2, r3
 80016d0:	4935      	ldr	r1, [pc, #212]	@ (80017a8 <main+0x1d0>)
 80016d2:	2001      	movs	r0, #1
 80016d4:	f003 f80a 	bl	80046ec <LOGGER_SendFormatted>
      LOG_INFO("Card Size: %lu MB", (cardInfo.LogBlockNbr * cardInfo.LogBlockSize) / (1024*1024));
 80016d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	0d1b      	lsrs	r3, r3, #20
 80016e2:	461a      	mov	r2, r3
 80016e4:	4931      	ldr	r1, [pc, #196]	@ (80017ac <main+0x1d4>)
 80016e6:	2001      	movs	r0, #1
 80016e8:	f003 f800 	bl	80046ec <LOGGER_SendFormatted>
 80016ec:	e003      	b.n	80016f6 <main+0x11e>
  } else {
      LOG_ERROR("❌ SDMMC cannot detect SD card");
 80016ee:	4930      	ldr	r1, [pc, #192]	@ (80017b0 <main+0x1d8>)
 80016f0:	2003      	movs	r0, #3
 80016f2:	f002 fffb 	bl	80046ec <LOGGER_SendFormatted>
  }
  
  // 3. 간단한 결론
  if (sd_status == HAL_OK && cardInfo.LogBlockNbr > 0) {
 80016f6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d107      	bne.n	800170e <main+0x136>
 80016fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <main+0x136>
      LOG_INFO("✅ SD Card hardware OK but may need formatting");
 8001704:	492b      	ldr	r1, [pc, #172]	@ (80017b4 <main+0x1dc>)
 8001706:	2001      	movs	r0, #1
 8001708:	f002 fff0 	bl	80046ec <LOGGER_SendFormatted>
 800170c:	e003      	b.n	8001716 <main+0x13e>
  } else {
      LOG_WARN("❌ SD Card hardware issue detected");
 800170e:	492a      	ldr	r1, [pc, #168]	@ (80017b8 <main+0x1e0>)
 8001710:	2002      	movs	r0, #2
 8001712:	f002 ffeb 	bl	80046ec <LOGGER_SendFormatted>
  }
  
  LOG_INFO("=== SD Card diagnosis complete - continuing with LoRa ===");
 8001716:	4929      	ldr	r1, [pc, #164]	@ (80017bc <main+0x1e4>)
 8001718:	2001      	movs	r0, #1
 800171a:	f002 ffe7 	bl	80046ec <LOGGER_SendFormatted>
  
  // UART6 DMA 초기화 (UART 초기화 후)
  MX_USART6_DMA_Init();
 800171e:	f001 fd7d 	bl	800321c <MX_USART6_DMA_Init>
  
  // IDLE 인터럽트 활성화 (메시지 끝 감지용)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 8001722:	4b18      	ldr	r3, [pc, #96]	@ (8001784 <main+0x1ac>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <main+0x1ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f042 0210 	orr.w	r2, r2, #16
 8001730:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8001732:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <main+0x1e8>)
 8001734:	f107 0420 	add.w	r4, r7, #32
 8001738:	461d      	mov	r5, r3
 800173a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001746:	f107 0320 	add.w	r3, r7, #32
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f015 f833 	bl	80167b8 <osThreadCreate>
 8001752:	4603      	mov	r3, r0
 8001754:	4a1b      	ldr	r2, [pc, #108]	@ (80017c4 <main+0x1ec>)
 8001756:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 생성 - 백그라운드에서 계속 실행 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 2048);
 8001758:	4b1b      	ldr	r3, [pc, #108]	@ (80017c8 <main+0x1f0>)
 800175a:	1d3c      	adds	r4, r7, #4
 800175c:	461d      	mov	r5, r3
 800175e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001762:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f015 f822 	bl	80167b8 <osThreadCreate>
 8001774:	4603      	mov	r3, r0
 8001776:	4a15      	ldr	r2, [pc, #84]	@ (80017cc <main+0x1f4>)
 8001778:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800177a:	f014 fffa 	bl	8016772 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800177e:	bf00      	nop
 8001780:	e7fd      	b.n	800177e <main+0x1a6>
 8001782:	bf00      	nop
 8001784:	20000fe4 	.word	0x20000fe4
 8001788:	200014b0 	.word	0x200014b0
 800178c:	0801b1ac 	.word	0x0801b1ac
 8001790:	0801b1b4 	.word	0x0801b1b4
 8001794:	40020800 	.word	0x40020800
 8001798:	0801b1d4 	.word	0x0801b1d4
 800179c:	20000c60 	.word	0x20000c60
 80017a0:	0801b1e8 	.word	0x0801b1e8
 80017a4:	0801b200 	.word	0x0801b200
 80017a8:	0801b220 	.word	0x0801b220
 80017ac:	0801b230 	.word	0x0801b230
 80017b0:	0801b244 	.word	0x0801b244
 80017b4:	0801b264 	.word	0x0801b264
 80017b8:	0801b294 	.word	0x0801b294
 80017bc:	0801b2b8 	.word	0x0801b2b8
 80017c0:	0801b300 	.word	0x0801b300
 80017c4:	200010a0 	.word	0x200010a0
 80017c8:	0801b328 	.word	0x0801b328
 80017cc:	200010a4 	.word	0x200010a4

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b094      	sub	sp, #80	@ 0x50
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	2230      	movs	r2, #48	@ 0x30
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f018 fb02 	bl	8019de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017f4:	f008 f9c4 	bl	8009b80 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	4b2c      	ldr	r3, [pc, #176]	@ (80018ac <SystemClock_Config+0xdc>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fc:	4a2b      	ldr	r2, [pc, #172]	@ (80018ac <SystemClock_Config+0xdc>)
 80017fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	@ 0x40
 8001804:	4b29      	ldr	r3, [pc, #164]	@ (80018ac <SystemClock_Config+0xdc>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b27      	ldr	r3, [pc, #156]	@ (80018b0 <SystemClock_Config+0xe0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a26      	ldr	r2, [pc, #152]	@ (80018b0 <SystemClock_Config+0xe0>)
 8001816:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b24      	ldr	r3, [pc, #144]	@ (80018b0 <SystemClock_Config+0xe0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001828:	2309      	movs	r3, #9
 800182a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800182c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001832:	2301      	movs	r3, #1
 8001834:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001836:	2302      	movs	r3, #2
 8001838:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800183e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001840:	2319      	movs	r3, #25
 8001842:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001844:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001848:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800184a:	2302      	movs	r3, #2
 800184c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800184e:	2309      	movs	r3, #9
 8001850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	4618      	mov	r0, r3
 8001858:	f008 fab4 	bl	8009dc4 <HAL_RCC_OscConfig>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001862:	f001 fcaf 	bl	80031c4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001866:	f008 f99b 	bl	8009ba0 <HAL_PWREx_EnableOverDrive>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001870:	f001 fca8 	bl	80031c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
 8001876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001878:	2302      	movs	r3, #2
 800187a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001880:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2106      	movs	r1, #6
 8001892:	4618      	mov	r0, r3
 8001894:	f008 fd3a 	bl	800a30c <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800189e:	f001 fc91 	bl	80031c4 <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3750      	adds	r7, #80	@ 0x50
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000

080018b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0a2      	sub	sp, #136	@ 0x88
 80018b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2284      	movs	r2, #132	@ 0x84
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f018 fa91 	bl	8019de8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80018c6:	4b13      	ldr	r3, [pc, #76]	@ (8001914 <PeriphCommonClock_Config+0x60>)
 80018c8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80018ca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80018d0:	2305      	movs	r3, #5
 80018d2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80018d8:	2303      	movs	r3, #3
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80018dc:	2301      	movs	r3, #1
 80018de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80018e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80018e6:	2300      	movs	r3, #0
 80018e8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80018ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80018ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4618      	mov	r0, r3
 80018fc:	f008 ff1e 	bl	800a73c <HAL_RCCEx_PeriphCLKConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001906:	f001 fc5d 	bl	80031c4 <Error_Handler>
  }
}
 800190a:	bf00      	nop
 800190c:	3788      	adds	r7, #136	@ 0x88
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	00b00008 	.word	0x00b00008

08001918 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800192a:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <MX_ADC3_Init+0x98>)
 800192c:	4a21      	ldr	r2, [pc, #132]	@ (80019b4 <MX_ADC3_Init+0x9c>)
 800192e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001930:	4b1f      	ldr	r3, [pc, #124]	@ (80019b0 <MX_ADC3_Init+0x98>)
 8001932:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001936:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <MX_ADC3_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800193e:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <MX_ADC3_Init+0x98>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001944:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <MX_ADC3_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800194a:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <MX_ADC3_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001952:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <MX_ADC3_Init+0x98>)
 8001954:	2200      	movs	r2, #0
 8001956:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <MX_ADC3_Init+0x98>)
 800195a:	4a17      	ldr	r2, [pc, #92]	@ (80019b8 <MX_ADC3_Init+0xa0>)
 800195c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800195e:	4b14      	ldr	r3, [pc, #80]	@ (80019b0 <MX_ADC3_Init+0x98>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <MX_ADC3_Init+0x98>)
 8001966:	2201      	movs	r2, #1
 8001968:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800196a:	4b11      	ldr	r3, [pc, #68]	@ (80019b0 <MX_ADC3_Init+0x98>)
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001972:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <MX_ADC3_Init+0x98>)
 8001974:	2201      	movs	r2, #1
 8001976:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001978:	480d      	ldr	r0, [pc, #52]	@ (80019b0 <MX_ADC3_Init+0x98>)
 800197a:	f003 fb15 	bl	8004fa8 <HAL_ADC_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001984:	f001 fc1e 	bl	80031c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001988:	2304      	movs	r3, #4
 800198a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800198c:	2301      	movs	r3, #1
 800198e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001994:	463b      	mov	r3, r7
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	@ (80019b0 <MX_ADC3_Init+0x98>)
 800199a:	f003 fb49 	bl	8005030 <HAL_ADC_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80019a4:	f001 fc0e 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	200007f0 	.word	0x200007f0
 80019b4:	40012200 	.word	0x40012200
 80019b8:	0f000001 	.word	0x0f000001

080019bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80019c0:	4b0d      	ldr	r3, [pc, #52]	@ (80019f8 <MX_CRC_Init+0x3c>)
 80019c2:	4a0e      	ldr	r2, [pc, #56]	@ (80019fc <MX_CRC_Init+0x40>)
 80019c4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80019c6:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_CRC_Init+0x3c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <MX_CRC_Init+0x3c>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_CRC_Init+0x3c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <MX_CRC_Init+0x3c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_CRC_Init+0x3c>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <MX_CRC_Init+0x3c>)
 80019e6:	f003 fe59 	bl	800569c <HAL_CRC_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80019f0:	f001 fbe8 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000838 	.word	0x20000838
 80019fc:	40023000 	.word	0x40023000

08001a00 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8001a04:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a06:	4a17      	ldr	r2, [pc, #92]	@ (8001a64 <MX_DCMI_Init+0x64>)
 8001a08:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8001a0a:	4b15      	ldr	r3, [pc, #84]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001a28:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001a34:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8001a40:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	@ (8001a60 <MX_DCMI_Init+0x60>)
 8001a4e:	f003 ff17 	bl	8005880 <HAL_DCMI_Init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001a58:	f001 fbb4 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2000085c 	.word	0x2000085c
 8001a64:	50050000 	.word	0x50050000

08001a68 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001a6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <MX_DMA2D_Init+0x60>)
 8001a70:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a9c:	4809      	ldr	r0, [pc, #36]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001a9e:	f004 fbdd 	bl	800625c <HAL_DMA2D_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001aa8:	f001 fb8c 	bl	80031c4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001aac:	2101      	movs	r1, #1
 8001aae:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <MX_DMA2D_Init+0x5c>)
 8001ab0:	f004 fd2e 	bl	8006510 <HAL_DMA2D_ConfigLayer>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001aba:	f001 fb83 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200008ac 	.word	0x200008ac
 8001ac8:	4002b000 	.word	0x4002b000

08001acc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b50 <MX_ETH_Init+0x84>)
 8001ad2:	4a20      	ldr	r2, [pc, #128]	@ (8001b54 <MX_ETH_Init+0x88>)
 8001ad4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <MX_ETH_Init+0x8c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b58 <MX_ETH_Init+0x8c>)
 8001ade:	2280      	movs	r2, #128	@ 0x80
 8001ae0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <MX_ETH_Init+0x8c>)
 8001ae4:	22e1      	movs	r2, #225	@ 0xe1
 8001ae6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <MX_ETH_Init+0x8c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	@ (8001b58 <MX_ETH_Init+0x8c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001af4:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <MX_ETH_Init+0x8c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <MX_ETH_Init+0x84>)
 8001afc:	4a16      	ldr	r2, [pc, #88]	@ (8001b58 <MX_ETH_Init+0x8c>)
 8001afe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b00:	4b13      	ldr	r3, [pc, #76]	@ (8001b50 <MX_ETH_Init+0x84>)
 8001b02:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001b06:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <MX_ETH_Init+0x84>)
 8001b0a:	4a14      	ldr	r2, [pc, #80]	@ (8001b5c <MX_ETH_Init+0x90>)
 8001b0c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001b0e:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <MX_ETH_Init+0x84>)
 8001b10:	4a13      	ldr	r2, [pc, #76]	@ (8001b60 <MX_ETH_Init+0x94>)
 8001b12:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b14:	4b0e      	ldr	r3, [pc, #56]	@ (8001b50 <MX_ETH_Init+0x84>)
 8001b16:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001b1a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b1c:	480c      	ldr	r0, [pc, #48]	@ (8001b50 <MX_ETH_Init+0x84>)
 8001b1e:	f004 fd89 	bl	8006634 <HAL_ETH_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001b28:	f001 fb4c 	bl	80031c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b2c:	2238      	movs	r2, #56	@ 0x38
 8001b2e:	2100      	movs	r1, #0
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <MX_ETH_Init+0x98>)
 8001b32:	f018 f959 	bl	8019de8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b36:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <MX_ETH_Init+0x98>)
 8001b38:	2221      	movs	r2, #33	@ 0x21
 8001b3a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_ETH_Init+0x98>)
 8001b3e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001b42:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_ETH_Init+0x98>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	200008ec 	.word	0x200008ec
 8001b54:	40028000 	.word	0x40028000
 8001b58:	20001514 	.word	0x20001514
 8001b5c:	20000168 	.word	0x20000168
 8001b60:	200000c8 	.word	0x200000c8
 8001b64:	200007b8 	.word	0x200007b8

08001b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001be0 <MX_I2C1_Init+0x78>)
 8001b70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b74:	4a1b      	ldr	r2, [pc, #108]	@ (8001be4 <MX_I2C1_Init+0x7c>)
 8001b76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b78:	4b18      	ldr	r3, [pc, #96]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b7e:	4b17      	ldr	r3, [pc, #92]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b84:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b8a:	4b14      	ldr	r3, [pc, #80]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ba2:	480e      	ldr	r0, [pc, #56]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001ba4:	f007 fba6 	bl	80092f4 <HAL_I2C_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001bae:	f001 fb09 	bl	80031c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4809      	ldr	r0, [pc, #36]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001bb6:	f007 fc39 	bl	800942c <HAL_I2CEx_ConfigAnalogFilter>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bc0:	f001 fb00 	bl	80031c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4805      	ldr	r0, [pc, #20]	@ (8001bdc <MX_I2C1_Init+0x74>)
 8001bc8:	f007 fc7b 	bl	80094c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001bd2:	f001 faf7 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2000099c 	.word	0x2000099c
 8001be0:	40005400 	.word	0x40005400
 8001be4:	00c0eaff 	.word	0x00c0eaff

08001be8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001bee:	4a1c      	ldr	r2, [pc, #112]	@ (8001c60 <MX_I2C3_Init+0x78>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <MX_I2C3_Init+0x7c>)
 8001bf6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001c0a:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c22:	480e      	ldr	r0, [pc, #56]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c24:	f007 fb66 	bl	80092f4 <HAL_I2C_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001c2e:	f001 fac9 	bl	80031c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c32:	2100      	movs	r1, #0
 8001c34:	4809      	ldr	r0, [pc, #36]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c36:	f007 fbf9 	bl	800942c <HAL_I2CEx_ConfigAnalogFilter>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001c40:	f001 fac0 	bl	80031c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c44:	2100      	movs	r1, #0
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <MX_I2C3_Init+0x74>)
 8001c48:	f007 fc3b 	bl	80094c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001c52:	f001 fab7 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200009f0 	.word	0x200009f0
 8001c60:	40005c00 	.word	0x40005c00
 8001c64:	00c0eaff 	.word	0x00c0eaff

08001c68 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08e      	sub	sp, #56	@ 0x38
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2234      	movs	r2, #52	@ 0x34
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f018 f8b7 	bl	8019de8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001c7c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d68 <MX_LTDC_Init+0x100>)
 8001c7e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c80:	4b38      	ldr	r3, [pc, #224]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001c86:	4b37      	ldr	r3, [pc, #220]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c8c:	4b35      	ldr	r3, [pc, #212]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c92:	4b34      	ldr	r3, [pc, #208]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001c98:	4b32      	ldr	r3, [pc, #200]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001c9a:	2228      	movs	r2, #40	@ 0x28
 8001c9c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001c9e:	4b31      	ldr	r3, [pc, #196]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001ca0:	2209      	movs	r2, #9
 8001ca2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001ca6:	2235      	movs	r2, #53	@ 0x35
 8001ca8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001caa:	4b2e      	ldr	r3, [pc, #184]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001cac:	220b      	movs	r2, #11
 8001cae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001cb2:	f240 2215 	movw	r2, #533	@ 0x215
 8001cb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001cb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001cba:	f240 121b 	movw	r2, #283	@ 0x11b
 8001cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001cc0:	4b28      	ldr	r3, [pc, #160]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001cc2:	f240 2235 	movw	r2, #565	@ 0x235
 8001cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001cc8:	4b26      	ldr	r3, [pc, #152]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001cca:	f240 121d 	movw	r2, #285	@ 0x11d
 8001cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001cd0:	4b24      	ldr	r3, [pc, #144]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001cd8:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ce0:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ce8:	481e      	ldr	r0, [pc, #120]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001cea:	f007 fc36 	bl	800955a <HAL_LTDC_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001cf4:	f001 fa66 	bl	80031c4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001cfc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001d00:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001d06:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001d0a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001d10:	23ff      	movs	r3, #255	@ 0xff
 8001d12:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001d18:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d1c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001d1e:	2307      	movs	r3, #7
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001d22:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001d28:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001d2e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001d32:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	@ (8001d64 <MX_LTDC_Init+0xfc>)
 8001d4e:	f007 fd63 	bl	8009818 <HAL_LTDC_ConfigLayer>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001d58:	f001 fa34 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	3738      	adds	r7, #56	@ 0x38
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000a44 	.word	0x20000a44
 8001d68:	40016800 	.word	0x40016800

08001d6c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001d72:	4a13      	ldr	r2, [pc, #76]	@ (8001dc0 <MX_QUADSPI_Init+0x54>)
 8001d74:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001d7e:	2204      	movs	r2, #4
 8001d80:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001d84:	2210      	movs	r2, #16
 8001d86:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001d8a:	2218      	movs	r2, #24
 8001d8c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001d90:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8001d94:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001d96:	4b09      	ldr	r3, [pc, #36]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001d9c:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001da8:	4804      	ldr	r0, [pc, #16]	@ (8001dbc <MX_QUADSPI_Init+0x50>)
 8001daa:	f007 ff49 	bl	8009c40 <HAL_QSPI_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001db4:	f001 fa06 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000aec 	.word	0x20000aec
 8001dc0:	a0001000 	.word	0xa0001000

08001dc4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b090      	sub	sp, #64	@ 0x40
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001dca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
 8001dd8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001dde:	463b      	mov	r3, r7
 8001de0:	2228      	movs	r2, #40	@ 0x28
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f017 ffff 	bl	8019de8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dea:	4b46      	ldr	r3, [pc, #280]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001dec:	4a46      	ldr	r2, [pc, #280]	@ (8001f08 <MX_RTC_Init+0x144>)
 8001dee:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001df0:	4b44      	ldr	r3, [pc, #272]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001df6:	4b43      	ldr	r3, [pc, #268]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001df8:	227f      	movs	r2, #127	@ 0x7f
 8001dfa:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001dfc:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001dfe:	22ff      	movs	r2, #255	@ 0xff
 8001e00:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e02:	4b40      	ldr	r3, [pc, #256]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e08:	4b3e      	ldr	r3, [pc, #248]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e14:	483b      	ldr	r0, [pc, #236]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001e16:	f009 f9c1 	bl	800b19c <HAL_RTC_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001e20:	f001 f9d0 	bl	80031c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001e3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e42:	2201      	movs	r2, #1
 8001e44:	4619      	mov	r1, r3
 8001e46:	482f      	ldr	r0, [pc, #188]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001e48:	f009 fa2a 	bl	800b2a0 <HAL_RTC_SetTime>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001e52:	f001 f9b7 	bl	80031c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e56:	2301      	movs	r3, #1
 8001e58:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001e6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e72:	2201      	movs	r2, #1
 8001e74:	4619      	mov	r1, r3
 8001e76:	4823      	ldr	r0, [pc, #140]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001e78:	f009 fb0a 	bl	800b490 <HAL_RTC_SetDate>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001e82:	f001 f99f 	bl	80031c4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001e86:	2300      	movs	r3, #0
 8001e88:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001eb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4811      	ldr	r0, [pc, #68]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001ebe:	f009 fbbb 	bl	800b638 <HAL_RTC_SetAlarm>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001ec8:	f001 f97c 	bl	80031c4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001ecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	480a      	ldr	r0, [pc, #40]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001eda:	f009 fbad 	bl	800b638 <HAL_RTC_SetAlarm>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8001ee4:	f001 f96e 	bl	80031c4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001ee8:	2202      	movs	r2, #2
 8001eea:	2100      	movs	r1, #0
 8001eec:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_RTC_Init+0x140>)
 8001eee:	f009 fd8b 	bl	800ba08 <HAL_RTCEx_SetTimeStamp>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8001ef8:	f001 f964 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	3740      	adds	r7, #64	@ 0x40
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20000b38 	.word	0x20000b38
 8001f08:	40002800 	.word	0x40002800

08001f0c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001f10:	4b4d      	ldr	r3, [pc, #308]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f12:	4a4e      	ldr	r2, [pc, #312]	@ (800204c <MX_SAI2_Init+0x140>)
 8001f14:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001f16:	4b4c      	ldr	r3, [pc, #304]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001f22:	4b49      	ldr	r3, [pc, #292]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f24:	2240      	movs	r2, #64	@ 0x40
 8001f26:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001f28:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001f2e:	4b46      	ldr	r3, [pc, #280]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001f34:	4b44      	ldr	r3, [pc, #272]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001f3a:	4b43      	ldr	r3, [pc, #268]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001f40:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001f46:	4b40      	ldr	r3, [pc, #256]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f4e:	4a40      	ldr	r2, [pc, #256]	@ (8002050 <MX_SAI2_Init+0x144>)
 8001f50:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001f52:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001f58:	4b3b      	ldr	r3, [pc, #236]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001f64:	4b38      	ldr	r3, [pc, #224]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001f6a:	4b37      	ldr	r3, [pc, #220]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001f70:	4b35      	ldr	r3, [pc, #212]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001f76:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001f7c:	4b32      	ldr	r3, [pc, #200]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001f88:	4b2f      	ldr	r3, [pc, #188]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8001f94:	4b2c      	ldr	r3, [pc, #176]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8001fa0:	4829      	ldr	r0, [pc, #164]	@ (8002048 <MX_SAI2_Init+0x13c>)
 8001fa2:	f009 fd99 	bl	800bad8 <HAL_SAI_Init>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8001fac:	f001 f90a 	bl	80031c4 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8001fb0:	4b28      	ldr	r3, [pc, #160]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fb2:	4a29      	ldr	r2, [pc, #164]	@ (8002058 <MX_SAI2_Init+0x14c>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001fb6:	4b27      	ldr	r3, [pc, #156]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fc4:	2240      	movs	r2, #64	@ 0x40
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001fce:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001ff2:	4b18      	ldr	r3, [pc, #96]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ff8:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <MX_SAI2_Init+0x148>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <MX_SAI2_Init+0x148>)
 8002000:	2208      	movs	r2, #8
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002004:	4b13      	ldr	r3, [pc, #76]	@ (8002054 <MX_SAI2_Init+0x148>)
 8002006:	2201      	movs	r2, #1
 8002008:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <MX_SAI2_Init+0x148>)
 800200c:	2200      	movs	r2, #0
 800200e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002010:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_SAI2_Init+0x148>)
 8002012:	2200      	movs	r2, #0
 8002014:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002016:	4b0f      	ldr	r3, [pc, #60]	@ (8002054 <MX_SAI2_Init+0x148>)
 8002018:	2200      	movs	r2, #0
 800201a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800201c:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <MX_SAI2_Init+0x148>)
 800201e:	2200      	movs	r2, #0
 8002020:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002022:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_SAI2_Init+0x148>)
 8002024:	2200      	movs	r2, #0
 8002026:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002028:	4b0a      	ldr	r3, [pc, #40]	@ (8002054 <MX_SAI2_Init+0x148>)
 800202a:	2201      	movs	r2, #1
 800202c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_SAI2_Init+0x148>)
 8002030:	2200      	movs	r2, #0
 8002032:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002034:	4807      	ldr	r0, [pc, #28]	@ (8002054 <MX_SAI2_Init+0x148>)
 8002036:	f009 fd4f 	bl	800bad8 <HAL_SAI_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002040:	f001 f8c0 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000b58 	.word	0x20000b58
 800204c:	40015c04 	.word	0x40015c04
 8002050:	0002ee00 	.word	0x0002ee00
 8002054:	20000bdc 	.word	0x20000bdc
 8002058:	40015c24 	.word	0x40015c24

0800205c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002060:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <MX_SDMMC1_SD_Init+0x3c>)
 8002062:	4a0e      	ldr	r2, [pc, #56]	@ (800209c <MX_SDMMC1_SD_Init+0x40>)
 8002064:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002066:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <MX_SDMMC1_SD_Init+0x3c>)
 8002068:	2200      	movs	r2, #0
 800206a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800206c:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <MX_SDMMC1_SD_Init+0x3c>)
 800206e:	2200      	movs	r2, #0
 8002070:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <MX_SDMMC1_SD_Init+0x3c>)
 8002074:	2200      	movs	r2, #0
 8002076:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002078:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <MX_SDMMC1_SD_Init+0x3c>)
 800207a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800207e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <MX_SDMMC1_SD_Init+0x3c>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002086:	4b04      	ldr	r3, [pc, #16]	@ (8002098 <MX_SDMMC1_SD_Init+0x3c>)
 8002088:	2200      	movs	r2, #0
 800208a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000c60 	.word	0x20000c60
 800209c:	40012c00 	.word	0x40012c00

080020a0 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 80020a4:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020a6:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80020aa:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 80020ac:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 80020b2:	4b12      	ldr	r3, [pc, #72]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 80020b8:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 80020be:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 80020c4:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 80020dc:	4b07      	ldr	r3, [pc, #28]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 80020e8:	4804      	ldr	r0, [pc, #16]	@ (80020fc <MX_SPDIFRX_Init+0x5c>)
 80020ea:	f00a ff79 	bl	800cfe0 <HAL_SPDIFRX_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 80020f4:	f001 f866 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000ce4 	.word	0x20000ce4

08002100 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002104:	4b1b      	ldr	r3, [pc, #108]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002106:	4a1c      	ldr	r2, [pc, #112]	@ (8002178 <MX_SPI2_Init+0x78>)
 8002108:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800210a:	4b1a      	ldr	r3, [pc, #104]	@ (8002174 <MX_SPI2_Init+0x74>)
 800210c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002110:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002112:	4b18      	ldr	r3, [pc, #96]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002118:	4b16      	ldr	r3, [pc, #88]	@ (8002174 <MX_SPI2_Init+0x74>)
 800211a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800211e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002120:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002126:	4b13      	ldr	r3, [pc, #76]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_SPI2_Init+0x74>)
 800212e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002132:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002134:	4b0f      	ldr	r3, [pc, #60]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_SPI2_Init+0x74>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002148:	2200      	movs	r2, #0
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <MX_SPI2_Init+0x74>)
 800214e:	2207      	movs	r2, #7
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_SPI2_Init+0x74>)
 800215a:	2208      	movs	r2, #8
 800215c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_SPI2_Init+0x74>)
 8002160:	f00a ff9a 	bl	800d098 <HAL_SPI_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800216a:	f001 f82b 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000d30 	.word	0x20000d30
 8002178:	40003800 	.word	0x40003800

0800217c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b09a      	sub	sp, #104	@ 0x68
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
 80021ac:	615a      	str	r2, [r3, #20]
 80021ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	222c      	movs	r2, #44	@ 0x2c
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f017 fe16 	bl	8019de8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021bc:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <MX_TIM1_Init+0x150>)
 80021be:	4a44      	ldr	r2, [pc, #272]	@ (80022d0 <MX_TIM1_Init+0x154>)
 80021c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021c2:	4b42      	ldr	r3, [pc, #264]	@ (80022cc <MX_TIM1_Init+0x150>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <MX_TIM1_Init+0x150>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021ce:	4b3f      	ldr	r3, [pc, #252]	@ (80022cc <MX_TIM1_Init+0x150>)
 80021d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80021d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d6:	4b3d      	ldr	r3, [pc, #244]	@ (80022cc <MX_TIM1_Init+0x150>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021dc:	4b3b      	ldr	r3, [pc, #236]	@ (80022cc <MX_TIM1_Init+0x150>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e2:	4b3a      	ldr	r3, [pc, #232]	@ (80022cc <MX_TIM1_Init+0x150>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021e8:	4838      	ldr	r0, [pc, #224]	@ (80022cc <MX_TIM1_Init+0x150>)
 80021ea:	f00b f800 	bl	800d1ee <HAL_TIM_Base_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80021f4:	f000 ffe6 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002202:	4619      	mov	r1, r3
 8002204:	4831      	ldr	r0, [pc, #196]	@ (80022cc <MX_TIM1_Init+0x150>)
 8002206:	f00b fb33 	bl	800d870 <HAL_TIM_ConfigClockSource>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002210:	f000 ffd8 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002214:	482d      	ldr	r0, [pc, #180]	@ (80022cc <MX_TIM1_Init+0x150>)
 8002216:	f00b f8b9 	bl	800d38c <HAL_TIM_PWM_Init>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002220:	f000 ffd0 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222c:	2300      	movs	r3, #0
 800222e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002230:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002234:	4619      	mov	r1, r3
 8002236:	4825      	ldr	r0, [pc, #148]	@ (80022cc <MX_TIM1_Init+0x150>)
 8002238:	f00b ffaa 	bl	800e190 <HAL_TIMEx_MasterConfigSynchronization>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002242:	f000 ffbf 	bl	80031c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002246:	2360      	movs	r3, #96	@ 0x60
 8002248:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224e:	2300      	movs	r3, #0
 8002250:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002252:	2300      	movs	r3, #0
 8002254:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002262:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002266:	2200      	movs	r2, #0
 8002268:	4619      	mov	r1, r3
 800226a:	4818      	ldr	r0, [pc, #96]	@ (80022cc <MX_TIM1_Init+0x150>)
 800226c:	f00b f9ec 	bl	800d648 <HAL_TIM_PWM_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002276:	f000 ffa5 	bl	80031c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800228e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002292:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800229c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4807      	ldr	r0, [pc, #28]	@ (80022cc <MX_TIM1_Init+0x150>)
 80022b0:	f00b fffc 	bl	800e2ac <HAL_TIMEx_ConfigBreakDeadTime>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80022ba:	f000 ff83 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022be:	4803      	ldr	r0, [pc, #12]	@ (80022cc <MX_TIM1_Init+0x150>)
 80022c0:	f001 fde8 	bl	8003e94 <HAL_TIM_MspPostInit>

}
 80022c4:	bf00      	nop
 80022c6:	3768      	adds	r7, #104	@ 0x68
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000d94 	.word	0x20000d94
 80022d0:	40010000 	.word	0x40010000

080022d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	@ 0x38
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	605a      	str	r2, [r3, #4]
 80022e4:	609a      	str	r2, [r3, #8]
 80022e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e8:	f107 031c 	add.w	r3, r7, #28
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f4:	463b      	mov	r3, r7
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
 8002302:	615a      	str	r2, [r3, #20]
 8002304:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002306:	4b2d      	ldr	r3, [pc, #180]	@ (80023bc <MX_TIM2_Init+0xe8>)
 8002308:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800230c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800230e:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <MX_TIM2_Init+0xe8>)
 8002310:	2200      	movs	r2, #0
 8002312:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b29      	ldr	r3, [pc, #164]	@ (80023bc <MX_TIM2_Init+0xe8>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800231a:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <MX_TIM2_Init+0xe8>)
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002322:	4b26      	ldr	r3, [pc, #152]	@ (80023bc <MX_TIM2_Init+0xe8>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002328:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <MX_TIM2_Init+0xe8>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800232e:	4823      	ldr	r0, [pc, #140]	@ (80023bc <MX_TIM2_Init+0xe8>)
 8002330:	f00a ff5d 	bl	800d1ee <HAL_TIM_Base_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800233a:	f000 ff43 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002344:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002348:	4619      	mov	r1, r3
 800234a:	481c      	ldr	r0, [pc, #112]	@ (80023bc <MX_TIM2_Init+0xe8>)
 800234c:	f00b fa90 	bl	800d870 <HAL_TIM_ConfigClockSource>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002356:	f000 ff35 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800235a:	4818      	ldr	r0, [pc, #96]	@ (80023bc <MX_TIM2_Init+0xe8>)
 800235c:	f00b f816 	bl	800d38c <HAL_TIM_PWM_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002366:	f000 ff2d 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	4619      	mov	r1, r3
 8002378:	4810      	ldr	r0, [pc, #64]	@ (80023bc <MX_TIM2_Init+0xe8>)
 800237a:	f00b ff09 	bl	800e190 <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002384:	f000 ff1e 	bl	80031c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002388:	2360      	movs	r3, #96	@ 0x60
 800238a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002390:	2300      	movs	r3, #0
 8002392:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002394:	2300      	movs	r3, #0
 8002396:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002398:	463b      	mov	r3, r7
 800239a:	2200      	movs	r2, #0
 800239c:	4619      	mov	r1, r3
 800239e:	4807      	ldr	r0, [pc, #28]	@ (80023bc <MX_TIM2_Init+0xe8>)
 80023a0:	f00b f952 	bl	800d648 <HAL_TIM_PWM_ConfigChannel>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80023aa:	f000 ff0b 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80023ae:	4803      	ldr	r0, [pc, #12]	@ (80023bc <MX_TIM2_Init+0xe8>)
 80023b0:	f001 fd70 	bl	8003e94 <HAL_TIM_MspPostInit>

}
 80023b4:	bf00      	nop
 80023b6:	3738      	adds	r7, #56	@ 0x38
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000de0 	.word	0x20000de0

080023c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	@ 0x38
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	609a      	str	r2, [r3, #8]
 80023d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023e0:	463b      	mov	r3, r7
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	609a      	str	r2, [r3, #8]
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	611a      	str	r2, [r3, #16]
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023f2:	4b2d      	ldr	r3, [pc, #180]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 80023f4:	4a2d      	ldr	r2, [pc, #180]	@ (80024ac <MX_TIM3_Init+0xec>)
 80023f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80023f8:	4b2b      	ldr	r3, [pc, #172]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fe:	4b2a      	ldr	r3, [pc, #168]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002404:	4b28      	ldr	r3, [pc, #160]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 8002406:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800240a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240c:	4b26      	ldr	r3, [pc, #152]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 800240e:	2200      	movs	r2, #0
 8002410:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002412:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 8002414:	2200      	movs	r2, #0
 8002416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002418:	4823      	ldr	r0, [pc, #140]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 800241a:	f00a fee8 	bl	800d1ee <HAL_TIM_Base_Init>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002424:	f000 fece 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800242e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002432:	4619      	mov	r1, r3
 8002434:	481c      	ldr	r0, [pc, #112]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 8002436:	f00b fa1b 	bl	800d870 <HAL_TIM_ConfigClockSource>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002440:	f000 fec0 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002444:	4818      	ldr	r0, [pc, #96]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 8002446:	f00a ffa1 	bl	800d38c <HAL_TIM_PWM_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002450:	f000 feb8 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	4619      	mov	r1, r3
 8002462:	4811      	ldr	r0, [pc, #68]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 8002464:	f00b fe94 	bl	800e190 <HAL_TIMEx_MasterConfigSynchronization>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800246e:	f000 fea9 	bl	80031c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002472:	2360      	movs	r3, #96	@ 0x60
 8002474:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800247a:	2300      	movs	r3, #0
 800247c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002482:	463b      	mov	r3, r7
 8002484:	2200      	movs	r2, #0
 8002486:	4619      	mov	r1, r3
 8002488:	4807      	ldr	r0, [pc, #28]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 800248a:	f00b f8dd 	bl	800d648 <HAL_TIM_PWM_ConfigChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002494:	f000 fe96 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002498:	4803      	ldr	r0, [pc, #12]	@ (80024a8 <MX_TIM3_Init+0xe8>)
 800249a:	f001 fcfb 	bl	8003e94 <HAL_TIM_MspPostInit>

}
 800249e:	bf00      	nop
 80024a0:	3738      	adds	r7, #56	@ 0x38
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000e2c 	.word	0x20000e2c
 80024ac:	40000400 	.word	0x40000400

080024b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08e      	sub	sp, #56	@ 0x38
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	f107 031c 	add.w	r3, r7, #28
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024d0:	463b      	mov	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	615a      	str	r2, [r3, #20]
 80024e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024e2:	4b2d      	ldr	r3, [pc, #180]	@ (8002598 <MX_TIM5_Init+0xe8>)
 80024e4:	4a2d      	ldr	r2, [pc, #180]	@ (800259c <MX_TIM5_Init+0xec>)
 80024e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <MX_TIM5_Init+0xe8>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <MX_TIM5_Init+0xe8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80024f4:	4b28      	ldr	r3, [pc, #160]	@ (8002598 <MX_TIM5_Init+0xe8>)
 80024f6:	f04f 32ff 	mov.w	r2, #4294967295
 80024fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fc:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <MX_TIM5_Init+0xe8>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002502:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <MX_TIM5_Init+0xe8>)
 8002504:	2200      	movs	r2, #0
 8002506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002508:	4823      	ldr	r0, [pc, #140]	@ (8002598 <MX_TIM5_Init+0xe8>)
 800250a:	f00a fe70 	bl	800d1ee <HAL_TIM_Base_Init>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8002514:	f000 fe56 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800251e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002522:	4619      	mov	r1, r3
 8002524:	481c      	ldr	r0, [pc, #112]	@ (8002598 <MX_TIM5_Init+0xe8>)
 8002526:	f00b f9a3 	bl	800d870 <HAL_TIM_ConfigClockSource>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8002530:	f000 fe48 	bl	80031c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002534:	4818      	ldr	r0, [pc, #96]	@ (8002598 <MX_TIM5_Init+0xe8>)
 8002536:	f00a ff29 	bl	800d38c <HAL_TIM_PWM_Init>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8002540:	f000 fe40 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002544:	2300      	movs	r3, #0
 8002546:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800254c:	f107 031c 	add.w	r3, r7, #28
 8002550:	4619      	mov	r1, r3
 8002552:	4811      	ldr	r0, [pc, #68]	@ (8002598 <MX_TIM5_Init+0xe8>)
 8002554:	f00b fe1c 	bl	800e190 <HAL_TIMEx_MasterConfigSynchronization>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800255e:	f000 fe31 	bl	80031c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002562:	2360      	movs	r3, #96	@ 0x60
 8002564:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002572:	463b      	mov	r3, r7
 8002574:	220c      	movs	r2, #12
 8002576:	4619      	mov	r1, r3
 8002578:	4807      	ldr	r0, [pc, #28]	@ (8002598 <MX_TIM5_Init+0xe8>)
 800257a:	f00b f865 	bl	800d648 <HAL_TIM_PWM_ConfigChannel>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8002584:	f000 fe1e 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002588:	4803      	ldr	r0, [pc, #12]	@ (8002598 <MX_TIM5_Init+0xe8>)
 800258a:	f001 fc83 	bl	8003e94 <HAL_TIM_MspPostInit>

}
 800258e:	bf00      	nop
 8002590:	3738      	adds	r7, #56	@ 0x38
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000e78 	.word	0x20000e78
 800259c:	40000c00 	.word	0x40000c00

080025a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025a6:	f107 0310 	add.w	r3, r7, #16
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80025be:	4b20      	ldr	r3, [pc, #128]	@ (8002640 <MX_TIM8_Init+0xa0>)
 80025c0:	4a20      	ldr	r2, [pc, #128]	@ (8002644 <MX_TIM8_Init+0xa4>)
 80025c2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80025c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002640 <MX_TIM8_Init+0xa0>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002640 <MX_TIM8_Init+0xa0>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002640 <MX_TIM8_Init+0xa0>)
 80025d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025d6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d8:	4b19      	ldr	r3, [pc, #100]	@ (8002640 <MX_TIM8_Init+0xa0>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80025de:	4b18      	ldr	r3, [pc, #96]	@ (8002640 <MX_TIM8_Init+0xa0>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b16      	ldr	r3, [pc, #88]	@ (8002640 <MX_TIM8_Init+0xa0>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80025ea:	4815      	ldr	r0, [pc, #84]	@ (8002640 <MX_TIM8_Init+0xa0>)
 80025ec:	f00a fdff 	bl	800d1ee <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80025f6:	f000 fde5 	bl	80031c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002600:	f107 0310 	add.w	r3, r7, #16
 8002604:	4619      	mov	r1, r3
 8002606:	480e      	ldr	r0, [pc, #56]	@ (8002640 <MX_TIM8_Init+0xa0>)
 8002608:	f00b f932 	bl	800d870 <HAL_TIM_ConfigClockSource>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8002612:	f000 fdd7 	bl	80031c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002622:	1d3b      	adds	r3, r7, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4806      	ldr	r0, [pc, #24]	@ (8002640 <MX_TIM8_Init+0xa0>)
 8002628:	f00b fdb2 	bl	800e190 <HAL_TIMEx_MasterConfigSynchronization>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002632:	f000 fdc7 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000ec4 	.word	0x20000ec4
 8002644:	40010400 	.word	0x40010400

08002648 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800264e:	1d3b      	adds	r3, r7, #4
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
 800265c:	615a      	str	r2, [r3, #20]
 800265e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <MX_TIM12_Init+0x84>)
 8002662:	4a1b      	ldr	r2, [pc, #108]	@ (80026d0 <MX_TIM12_Init+0x88>)
 8002664:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002666:	4b19      	ldr	r3, [pc, #100]	@ (80026cc <MX_TIM12_Init+0x84>)
 8002668:	2200      	movs	r2, #0
 800266a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <MX_TIM12_Init+0x84>)
 800266e:	2200      	movs	r2, #0
 8002670:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8002672:	4b16      	ldr	r3, [pc, #88]	@ (80026cc <MX_TIM12_Init+0x84>)
 8002674:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002678:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267a:	4b14      	ldr	r3, [pc, #80]	@ (80026cc <MX_TIM12_Init+0x84>)
 800267c:	2200      	movs	r2, #0
 800267e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002680:	4b12      	ldr	r3, [pc, #72]	@ (80026cc <MX_TIM12_Init+0x84>)
 8002682:	2200      	movs	r2, #0
 8002684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002686:	4811      	ldr	r0, [pc, #68]	@ (80026cc <MX_TIM12_Init+0x84>)
 8002688:	f00a fe80 	bl	800d38c <HAL_TIM_PWM_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002692:	f000 fd97 	bl	80031c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002696:	2360      	movs	r3, #96	@ 0x60
 8002698:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2200      	movs	r2, #0
 80026aa:	4619      	mov	r1, r3
 80026ac:	4807      	ldr	r0, [pc, #28]	@ (80026cc <MX_TIM12_Init+0x84>)
 80026ae:	f00a ffcb 	bl	800d648 <HAL_TIM_PWM_ConfigChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80026b8:	f000 fd84 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80026bc:	4803      	ldr	r0, [pc, #12]	@ (80026cc <MX_TIM12_Init+0x84>)
 80026be:	f001 fbe9 	bl	8003e94 <HAL_TIM_MspPostInit>

}
 80026c2:	bf00      	nop
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000f10 	.word	0x20000f10
 80026d0:	40001800 	.word	0x40001800

080026d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026d8:	4b14      	ldr	r3, [pc, #80]	@ (800272c <MX_USART1_UART_Init+0x58>)
 80026da:	4a15      	ldr	r2, [pc, #84]	@ (8002730 <MX_USART1_UART_Init+0x5c>)
 80026dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026de:	4b13      	ldr	r3, [pc, #76]	@ (800272c <MX_USART1_UART_Init+0x58>)
 80026e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026e6:	4b11      	ldr	r3, [pc, #68]	@ (800272c <MX_USART1_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026ec:	4b0f      	ldr	r3, [pc, #60]	@ (800272c <MX_USART1_UART_Init+0x58>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026f2:	4b0e      	ldr	r3, [pc, #56]	@ (800272c <MX_USART1_UART_Init+0x58>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	@ (800272c <MX_USART1_UART_Init+0x58>)
 80026fa:	220c      	movs	r2, #12
 80026fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <MX_USART1_UART_Init+0x58>)
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <MX_USART1_UART_Init+0x58>)
 8002706:	2200      	movs	r2, #0
 8002708:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800270a:	4b08      	ldr	r3, [pc, #32]	@ (800272c <MX_USART1_UART_Init+0x58>)
 800270c:	2200      	movs	r2, #0
 800270e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <MX_USART1_UART_Init+0x58>)
 8002712:	2200      	movs	r2, #0
 8002714:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002716:	4805      	ldr	r0, [pc, #20]	@ (800272c <MX_USART1_UART_Init+0x58>)
 8002718:	f00b fe64 	bl	800e3e4 <HAL_UART_Init>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002722:	f000 fd4f 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000f5c 	.word	0x20000f5c
 8002730:	40011000 	.word	0x40011000

08002734 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002738:	4b14      	ldr	r3, [pc, #80]	@ (800278c <MX_USART6_UART_Init+0x58>)
 800273a:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <MX_USART6_UART_Init+0x5c>)
 800273c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800273e:	4b13      	ldr	r3, [pc, #76]	@ (800278c <MX_USART6_UART_Init+0x58>)
 8002740:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002744:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002746:	4b11      	ldr	r3, [pc, #68]	@ (800278c <MX_USART6_UART_Init+0x58>)
 8002748:	2200      	movs	r2, #0
 800274a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800274c:	4b0f      	ldr	r3, [pc, #60]	@ (800278c <MX_USART6_UART_Init+0x58>)
 800274e:	2200      	movs	r2, #0
 8002750:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <MX_USART6_UART_Init+0x58>)
 8002754:	2200      	movs	r2, #0
 8002756:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <MX_USART6_UART_Init+0x58>)
 800275a:	220c      	movs	r2, #12
 800275c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <MX_USART6_UART_Init+0x58>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002764:	4b09      	ldr	r3, [pc, #36]	@ (800278c <MX_USART6_UART_Init+0x58>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <MX_USART6_UART_Init+0x58>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002770:	4b06      	ldr	r3, [pc, #24]	@ (800278c <MX_USART6_UART_Init+0x58>)
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002776:	4805      	ldr	r0, [pc, #20]	@ (800278c <MX_USART6_UART_Init+0x58>)
 8002778:	f00b fe34 	bl	800e3e4 <HAL_UART_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002782:	f000 fd1f 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000fe4 	.word	0x20000fe4
 8002790:	40011400 	.word	0x40011400

08002794 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
 80027a8:	615a      	str	r2, [r3, #20]
 80027aa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <MX_FMC_Init+0x98>)
 80027ae:	4a20      	ldr	r2, [pc, #128]	@ (8002830 <MX_FMC_Init+0x9c>)
 80027b0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80027b2:	4b1e      	ldr	r3, [pc, #120]	@ (800282c <MX_FMC_Init+0x98>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027b8:	4b1c      	ldr	r3, [pc, #112]	@ (800282c <MX_FMC_Init+0x98>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80027be:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <MX_FMC_Init+0x98>)
 80027c0:	2204      	movs	r2, #4
 80027c2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80027c4:	4b19      	ldr	r3, [pc, #100]	@ (800282c <MX_FMC_Init+0x98>)
 80027c6:	2210      	movs	r2, #16
 80027c8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <MX_FMC_Init+0x98>)
 80027cc:	2240      	movs	r2, #64	@ 0x40
 80027ce:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80027d0:	4b16      	ldr	r3, [pc, #88]	@ (800282c <MX_FMC_Init+0x98>)
 80027d2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80027d6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027d8:	4b14      	ldr	r3, [pc, #80]	@ (800282c <MX_FMC_Init+0x98>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80027de:	4b13      	ldr	r3, [pc, #76]	@ (800282c <MX_FMC_Init+0x98>)
 80027e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027e4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <MX_FMC_Init+0x98>)
 80027e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80027ee:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <MX_FMC_Init+0x98>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80027f4:	2302      	movs	r3, #2
 80027f6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80027f8:	2307      	movs	r3, #7
 80027fa:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80027fc:	2304      	movs	r3, #4
 80027fe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002800:	2307      	movs	r3, #7
 8002802:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002804:	2303      	movs	r3, #3
 8002806:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 800280c:	2302      	movs	r3, #2
 800280e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002810:	1d3b      	adds	r3, r7, #4
 8002812:	4619      	mov	r1, r3
 8002814:	4805      	ldr	r0, [pc, #20]	@ (800282c <MX_FMC_Init+0x98>)
 8002816:	f00a fbae 	bl	800cf76 <HAL_SDRAM_Init>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002820:	f000 fcd0 	bl	80031c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002824:	bf00      	nop
 8002826:	3720      	adds	r7, #32
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	2000106c 	.word	0x2000106c
 8002830:	a0000140 	.word	0xa0000140

08002834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b090      	sub	sp, #64	@ 0x40
 8002838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800284a:	4bb0      	ldr	r3, [pc, #704]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284e:	4aaf      	ldr	r2, [pc, #700]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002850:	f043 0310 	orr.w	r3, r3, #16
 8002854:	6313      	str	r3, [r2, #48]	@ 0x30
 8002856:	4bad      	ldr	r3, [pc, #692]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002862:	4baa      	ldr	r3, [pc, #680]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4aa9      	ldr	r2, [pc, #676]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4ba7      	ldr	r3, [pc, #668]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	4ba4      	ldr	r3, [pc, #656]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4aa3      	ldr	r2, [pc, #652]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4ba1      	ldr	r3, [pc, #644]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002892:	4b9e      	ldr	r3, [pc, #632]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	4a9d      	ldr	r2, [pc, #628]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002898:	f043 0308 	orr.w	r3, r3, #8
 800289c:	6313      	str	r3, [r2, #48]	@ 0x30
 800289e:	4b9b      	ldr	r3, [pc, #620]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028aa:	4b98      	ldr	r3, [pc, #608]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a97      	ldr	r2, [pc, #604]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b95      	ldr	r3, [pc, #596]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c2:	4b92      	ldr	r3, [pc, #584]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a91      	ldr	r2, [pc, #580]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b8f      	ldr	r3, [pc, #572]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80028da:	4b8c      	ldr	r3, [pc, #560]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4a8b      	ldr	r2, [pc, #556]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e6:	4b89      	ldr	r3, [pc, #548]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80028f2:	4b86      	ldr	r3, [pc, #536]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a85      	ldr	r2, [pc, #532]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b83      	ldr	r3, [pc, #524]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800290a:	4b80      	ldr	r3, [pc, #512]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	4a7f      	ldr	r2, [pc, #508]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002910:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002914:	6313      	str	r3, [r2, #48]	@ 0x30
 8002916:	4b7d      	ldr	r3, [pc, #500]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291e:	60bb      	str	r3, [r7, #8]
 8002920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002922:	4b7a      	ldr	r3, [pc, #488]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	4a79      	ldr	r2, [pc, #484]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002928:	f043 0320 	orr.w	r3, r3, #32
 800292c:	6313      	str	r3, [r2, #48]	@ 0x30
 800292e:	4b77      	ldr	r3, [pc, #476]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800293a:	4b74      	ldr	r3, [pc, #464]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a73      	ldr	r2, [pc, #460]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b71      	ldr	r3, [pc, #452]	@ (8002b0c <MX_GPIO_Init+0x2d8>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294e:	603b      	str	r3, [r7, #0]
 8002950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002952:	2201      	movs	r2, #1
 8002954:	2120      	movs	r1, #32
 8002956:	486e      	ldr	r0, [pc, #440]	@ (8002b10 <MX_GPIO_Init+0x2dc>)
 8002958:	f004 fb7e 	bl	8007058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 800295c:	2200      	movs	r2, #0
 800295e:	210c      	movs	r1, #12
 8002960:	486c      	ldr	r0, [pc, #432]	@ (8002b14 <MX_GPIO_Init+0x2e0>)
 8002962:	f004 fb79 	bl	8007058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002966:	2201      	movs	r2, #1
 8002968:	2108      	movs	r1, #8
 800296a:	486b      	ldr	r0, [pc, #428]	@ (8002b18 <MX_GPIO_Init+0x2e4>)
 800296c:	f004 fb74 	bl	8007058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8002970:	2201      	movs	r2, #1
 8002972:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002976:	4867      	ldr	r0, [pc, #412]	@ (8002b14 <MX_GPIO_Init+0x2e0>)
 8002978:	f004 fb6e 	bl	8007058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800297c:	2200      	movs	r2, #0
 800297e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002982:	4866      	ldr	r0, [pc, #408]	@ (8002b1c <MX_GPIO_Init+0x2e8>)
 8002984:	f004 fb68 	bl	8007058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8002988:	2200      	movs	r2, #0
 800298a:	21c8      	movs	r1, #200	@ 0xc8
 800298c:	4864      	ldr	r0, [pc, #400]	@ (8002b20 <MX_GPIO_Init+0x2ec>)
 800298e:	f004 fb63 	bl	8007058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8002992:	2308      	movs	r3, #8
 8002994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002996:	2300      	movs	r3, #0
 8002998:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800299e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029a2:	4619      	mov	r1, r3
 80029a4:	485f      	ldr	r0, [pc, #380]	@ (8002b24 <MX_GPIO_Init+0x2f0>)
 80029a6:	f004 f993 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80029aa:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80029ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b0:	2302      	movs	r3, #2
 80029b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80029bc:	230a      	movs	r3, #10
 80029be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029c4:	4619      	mov	r1, r3
 80029c6:	4858      	ldr	r0, [pc, #352]	@ (8002b28 <MX_GPIO_Init+0x2f4>)
 80029c8:	f004 f982 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80029cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d2:	2300      	movs	r3, #0
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80029da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029de:	4619      	mov	r1, r3
 80029e0:	4852      	ldr	r0, [pc, #328]	@ (8002b2c <MX_GPIO_Init+0x2f8>)
 80029e2:	f004 f975 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80029e6:	2340      	movs	r3, #64	@ 0x40
 80029e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80029ea:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80029ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80029f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029f8:	4619      	mov	r1, r3
 80029fa:	4845      	ldr	r0, [pc, #276]	@ (8002b10 <MX_GPIO_Init+0x2dc>)
 80029fc:	f004 f968 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002a00:	2320      	movs	r3, #32
 8002a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a04:	2301      	movs	r3, #1
 8002a06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002a10:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a14:	4619      	mov	r1, r3
 8002a16:	483e      	ldr	r0, [pc, #248]	@ (8002b10 <MX_GPIO_Init+0x2dc>)
 8002a18:	f004 f95a 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8002a1c:	f241 030c 	movw	r3, #4108	@ 0x100c
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a32:	4619      	mov	r1, r3
 8002a34:	4837      	ldr	r0, [pc, #220]	@ (8002b14 <MX_GPIO_Init+0x2e0>)
 8002a36:	f004 f94b 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a40:	2300      	movs	r3, #0
 8002a42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4838      	ldr	r0, [pc, #224]	@ (8002b30 <MX_GPIO_Init+0x2fc>)
 8002a50:	f004 f93e 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002a54:	2308      	movs	r3, #8
 8002a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a68:	4619      	mov	r1, r3
 8002a6a:	482b      	ldr	r0, [pc, #172]	@ (8002b18 <MX_GPIO_Init+0x2e4>)
 8002a6c:	f004 f930 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002a70:	2310      	movs	r3, #16
 8002a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a74:	2300      	movs	r3, #0
 8002a76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a80:	4619      	mov	r1, r3
 8002a82:	4823      	ldr	r0, [pc, #140]	@ (8002b10 <MX_GPIO_Init+0x2dc>)
 8002a84:	f004 f924 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8002a88:	f248 0304 	movw	r3, #32772	@ 0x8004
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	481f      	ldr	r0, [pc, #124]	@ (8002b1c <MX_GPIO_Init+0x2e8>)
 8002a9e:	f004 f917 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8002aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002ab4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4818      	ldr	r0, [pc, #96]	@ (8002b1c <MX_GPIO_Init+0x2e8>)
 8002abc:	f004 f908 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002ac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002ac6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002acc:	2300      	movs	r3, #0
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	480f      	ldr	r0, [pc, #60]	@ (8002b14 <MX_GPIO_Init+0x2e0>)
 8002ad8:	f004 f8fa 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002adc:	2310      	movs	r3, #16
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002aec:	230a      	movs	r3, #10
 8002aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002af0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	4809      	ldr	r0, [pc, #36]	@ (8002b1c <MX_GPIO_Init+0x2e8>)
 8002af8:	f004 f8ea 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8002afc:	23c8      	movs	r3, #200	@ 0xc8
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b08:	e014      	b.n	8002b34 <MX_GPIO_Init+0x300>
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	40022000 	.word	0x40022000
 8002b18:	40022800 	.word	0x40022800
 8002b1c:	40021c00 	.word	0x40021c00
 8002b20:	40021800 	.word	0x40021800
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40022400 	.word	0x40022400
 8002b30:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4819      	ldr	r0, [pc, #100]	@ (8002ba4 <MX_GPIO_Init+0x370>)
 8002b40:	f004 f8c6 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002b44:	2305      	movs	r3, #5
 8002b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b50:	2303      	movs	r3, #3
 8002b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b54:	230a      	movs	r3, #10
 8002b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4812      	ldr	r0, [pc, #72]	@ (8002ba8 <MX_GPIO_Init+0x374>)
 8002b60:	f004 f8b6 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002b64:	2304      	movs	r3, #4
 8002b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b74:	4619      	mov	r1, r3
 8002b76:	480b      	ldr	r0, [pc, #44]	@ (8002ba4 <MX_GPIO_Init+0x370>)
 8002b78:	f004 f8aa 	bl	8006cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8002b7c:	2328      	movs	r3, #40	@ 0x28
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b80:	2302      	movs	r3, #2
 8002b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002b8c:	230a      	movs	r3, #10
 8002b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b94:	4619      	mov	r1, r3
 8002b96:	4805      	ldr	r0, [pc, #20]	@ (8002bac <MX_GPIO_Init+0x378>)
 8002b98:	f004 f89a 	bl	8006cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002b9c:	bf00      	nop
 8002b9e:	3740      	adds	r7, #64	@ 0x40
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40021800 	.word	0x40021800
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020000 	.word	0x40020000

08002bb0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b098      	sub	sp, #96	@ 0x60
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002bb8:	f016 fccc 	bl	8019554 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  
  // Logger는 이미 SD카드와 연결됨
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8002bbc:	4991      	ldr	r1, [pc, #580]	@ (8002e04 <StartDefaultTask+0x254>)
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f001 fd94 	bl	80046ec <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8002bc4:	4b90      	ldr	r3, [pc, #576]	@ (8002e08 <StartDefaultTask+0x258>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a90      	ldr	r2, [pc, #576]	@ (8002e0c <StartDefaultTask+0x25c>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0c9b      	lsrs	r3, r3, #18
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	498f      	ldr	r1, [pc, #572]	@ (8002e10 <StartDefaultTask+0x260>)
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	f001 fd89 	bl	80046ec <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8002bda:	498e      	ldr	r1, [pc, #568]	@ (8002e14 <StartDefaultTask+0x264>)
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f001 fd85 	bl	80046ec <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8002be2:	498d      	ldr	r1, [pc, #564]	@ (8002e18 <StartDefaultTask+0x268>)
 8002be4:	2001      	movs	r0, #1
 8002be6:	f001 fd81 	bl	80046ec <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8002bea:	498c      	ldr	r1, [pc, #560]	@ (8002e1c <StartDefaultTask+0x26c>)
 8002bec:	2001      	movs	r0, #1
 8002bee:	f001 fd7d 	bl	80046ec <LOGGER_SendFormatted>
  
  // UART 연결 테스트
  LOG_INFO("📤 [TX_TASK] Testing UART6 connection...");
 8002bf2:	498b      	ldr	r1, [pc, #556]	@ (8002e20 <StartDefaultTask+0x270>)
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f001 fd79 	bl	80046ec <LOGGER_SendFormatted>
  
  UartStatus uart_status = UART_Connect("UART6");
 8002bfa:	488a      	ldr	r0, [pc, #552]	@ (8002e24 <StartDefaultTask+0x274>)
 8002bfc:	f001 fe12 	bl	8004824 <UART_Connect>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  if (uart_status == UART_STATUS_OK) {
 8002c06:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <StartDefaultTask+0x72>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 connection SUCCESS");
 8002c0e:	4986      	ldr	r1, [pc, #536]	@ (8002e28 <StartDefaultTask+0x278>)
 8002c10:	2001      	movs	r0, #1
 8002c12:	f001 fd6b 	bl	80046ec <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  // UART 연결 상태 확인
  if (UART_IsConnected()) {
 8002c16:	f001 fedb 	bl	80049d0 <UART_IsConnected>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d04a      	beq.n	8002cb6 <StartDefaultTask+0x106>
 8002c20:	e00b      	b.n	8002c3a <StartDefaultTask+0x8a>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 connection FAILED (status: %d)", uart_status);
 8002c22:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002c26:	461a      	mov	r2, r3
 8002c28:	4980      	ldr	r1, [pc, #512]	@ (8002e2c <StartDefaultTask+0x27c>)
 8002c2a:	2003      	movs	r0, #3
 8002c2c:	f001 fd5e 	bl	80046ec <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002c30:	497f      	ldr	r1, [pc, #508]	@ (8002e30 <StartDefaultTask+0x280>)
 8002c32:	2003      	movs	r0, #3
 8002c34:	f001 fd5a 	bl	80046ec <LOGGER_SendFormatted>
    goto idle_loop;
 8002c38:	e0cd      	b.n	8002dd6 <StartDefaultTask+0x226>
    LOG_INFO("📤 [TX_TASK] ✓ UART6 is CONNECTED and ready");
 8002c3a:	497e      	ldr	r1, [pc, #504]	@ (8002e34 <StartDefaultTask+0x284>)
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f001 fd55 	bl	80046ec <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
    goto idle_loop;
  }
  
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8002c42:	497d      	ldr	r1, [pc, #500]	@ (8002e38 <StartDefaultTask+0x288>)
 8002c44:	2001      	movs	r0, #1
 8002c46:	f001 fd51 	bl	80046ec <LOGGER_SendFormatted>
  LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (10 seconds)...");
 8002c4a:	497c      	ldr	r1, [pc, #496]	@ (8002e3c <StartDefaultTask+0x28c>)
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	f001 fd4d 	bl	80046ec <LOGGER_SendFormatted>
  osDelay(10000); // 10초 대기 (LoRa 모듈 부팅 완료 대기)
 8002c52:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002c56:	f013 fdfb 	bl	8016850 <osDelay>
  
  // LoRa 기본 연결 테스트 + 초기 설정 명령어들
  const char* lora_init_commands[] = {
 8002c5a:	4b79      	ldr	r3, [pc, #484]	@ (8002e40 <StartDefaultTask+0x290>)
 8002c5c:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8002c60:	461d      	mov	r5, r3
 8002c62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c66:	682b      	ldr	r3, [r5, #0]
 8002c68:	6023      	str	r3, [r4, #0]
    "AT+CLASS=A\r\n",   // Class A 설정
    "AT+BAND=7\r\n"     // Asia 923 MHz 대역 설정
  };
  
  // LoraStarter 컨텍스트 초기화
  LoraStarterContext lora_ctx = {
 8002c6a:	f107 0308 	add.w	r3, r7, #8
 8002c6e:	2230      	movs	r2, #48	@ 0x30
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f017 f8b8 	bl	8019de8 <memset>
 8002c78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	2305      	movs	r3, #5
 8002c80:	617b      	str	r3, [r7, #20]
 8002c82:	4b70      	ldr	r3, [pc, #448]	@ (8002e44 <StartDefaultTask+0x294>)
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	4b70      	ldr	r3, [pc, #448]	@ (8002e48 <StartDefaultTask+0x298>)
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    .send_message = "TEST",
    .max_retry_count = 3,
    .send_interval_ms = 300000  // 5분 간격
  };
  
  LOG_INFO("=== LoRa Initialization ===");
 8002c8e:	496f      	ldr	r1, [pc, #444]	@ (8002e4c <StartDefaultTask+0x29c>)
 8002c90:	2001      	movs	r0, #1
 8002c92:	f001 fd2b 	bl	80046ec <LOGGER_SendFormatted>
  LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	496b      	ldr	r1, [pc, #428]	@ (8002e50 <StartDefaultTask+0x2a0>)
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f001 fd22 	bl	80046ec <LOGGER_SendFormatted>
           lora_ctx.num_commands, lora_ctx.send_message, lora_ctx.max_retry_count);
           
  // LoRa 로그를 SD카드에 저장하기 시작
  LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 8002ca8:	496a      	ldr	r1, [pc, #424]	@ (8002e54 <StartDefaultTask+0x2a4>)
 8002caa:	2001      	movs	r0, #1
 8002cac:	f001 fd1e 	bl	80046ec <LOGGER_SendFormatted>
  
  // SD카드 로그 파일 생성
  SDStorage_CreateNewLogFile();
 8002cb0:	f7fe fa3e 	bl	8001130 <SDStorage_CreateNewLogFile>
 8002cb4:	e008      	b.n	8002cc8 <StartDefaultTask+0x118>
    LOG_ERROR("📤 [TX_TASK] ✗ UART6 is NOT CONNECTED");
 8002cb6:	4968      	ldr	r1, [pc, #416]	@ (8002e58 <StartDefaultTask+0x2a8>)
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f001 fd17 	bl	80046ec <LOGGER_SendFormatted>
    LOG_ERROR("📤 [TX_TASK] Program terminated due to UART connection failure");
 8002cbe:	495c      	ldr	r1, [pc, #368]	@ (8002e30 <StartDefaultTask+0x280>)
 8002cc0:	2003      	movs	r0, #3
 8002cc2:	f001 fd13 	bl	80046ec <LOGGER_SendFormatted>
    goto idle_loop;
 8002cc6:	e086      	b.n	8002dd6 <StartDefaultTask+0x226>
  
  // LoRa 프로세스 루프 (초기화 → JOIN → 주기적 전송)
  for(;;)
  {
    // 수신된 응답이 있으면 LoraStarter에 전달
    const char* rx_data = NULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	657b      	str	r3, [r7, #84]	@ 0x54
    if (lora_new_response) {
 8002ccc:	4b63      	ldr	r3, [pc, #396]	@ (8002e5c <StartDefaultTask+0x2ac>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <StartDefaultTask+0x13a>
      rx_data = lora_rx_response;
 8002cd6:	4b62      	ldr	r3, [pc, #392]	@ (8002e60 <StartDefaultTask+0x2b0>)
 8002cd8:	657b      	str	r3, [r7, #84]	@ 0x54
      lora_new_response = false; // 플래그 클리어
 8002cda:	4b60      	ldr	r3, [pc, #384]	@ (8002e5c <StartDefaultTask+0x2ac>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
      LOG_DEBUG("[TX_TASK] Processing LoRa response: %.20s...", rx_data);
 8002ce0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ce2:	4960      	ldr	r1, [pc, #384]	@ (8002e64 <StartDefaultTask+0x2b4>)
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	f001 fd01 	bl	80046ec <LOGGER_SendFormatted>
    }
    
    // LoraStarter 프로세스 실행
    LoraStarter_Process(&lora_ctx, rx_data);
 8002cea:	f107 0308 	add.w	r3, r7, #8
 8002cee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fd51 	bl	8000798 <LoraStarter_Process>
    
    // 상태별 처리 간격 및 디버깅
    LOG_DEBUG("[TX_TASK] LoRa State: %d, cmd_index: %d/%d", 
 8002cf6:	7a3b      	ldrb	r3, [r7, #8]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	460a      	mov	r2, r1
 8002d04:	4958      	ldr	r1, [pc, #352]	@ (8002e68 <StartDefaultTask+0x2b8>)
 8002d06:	2000      	movs	r0, #0
 8002d08:	f001 fcf0 	bl	80046ec <LOGGER_SendFormatted>
              lora_ctx.state, lora_ctx.cmd_index, lora_ctx.num_commands);
    
    switch(lora_ctx.state) {
 8002d0c:	7a3b      	ldrb	r3, [r7, #8]
 8002d0e:	2b0a      	cmp	r3, #10
 8002d10:	d85b      	bhi.n	8002dca <StartDefaultTask+0x21a>
 8002d12:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <StartDefaultTask+0x168>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d45 	.word	0x08002d45
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d67 	.word	0x08002d67
 8002d24:	08002d7f 	.word	0x08002d7f
 8002d28:	08002d89 	.word	0x08002d89
 8002d2c:	08002d7f 	.word	0x08002d7f
 8002d30:	08002d89 	.word	0x08002d89
 8002d34:	08002d93 	.word	0x08002d93
 8002d38:	08002da9 	.word	0x08002da9
 8002d3c:	08002db3 	.word	0x08002db3
 8002d40:	08002db3 	.word	0x08002db3
      case LORA_STATE_INIT:
        osDelay(500); // 초기화 상태는 빠르게
 8002d44:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002d48:	f013 fd82 	bl	8016850 <osDelay>
        break;
 8002d4c:	e042      	b.n	8002dd4 <StartDefaultTask+0x224>
      case LORA_STATE_SEND_CMD:
        LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1c5a      	adds	r2, r3, #1
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	4945      	ldr	r1, [pc, #276]	@ (8002e6c <StartDefaultTask+0x2bc>)
 8002d56:	2001      	movs	r0, #1
 8002d58:	f001 fcc8 	bl	80046ec <LOGGER_SendFormatted>
                lora_ctx.cmd_index + 1, lora_ctx.num_commands);
        osDelay(1000); // 명령어 전송 후 1초 대기
 8002d5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002d60:	f013 fd76 	bl	8016850 <osDelay>
        break;
 8002d64:	e036      	b.n	8002dd4 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_OK:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for OK response to command %d", 
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	4940      	ldr	r1, [pc, #256]	@ (8002e70 <StartDefaultTask+0x2c0>)
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f001 fcbc 	bl	80046ec <LOGGER_SendFormatted>
                 lora_ctx.cmd_index + 1);
        osDelay(2000); // OK 응답 대기 중 2초 간격
 8002d74:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d78:	f013 fd6a 	bl	8016850 <osDelay>
        break;
 8002d7c:	e02a      	b.n	8002dd4 <StartDefaultTask+0x224>
      case LORA_STATE_SEND_JOIN:
      case LORA_STATE_SEND_PERIODIC:
        osDelay(2000); // JOIN/SEND 명령어 전송 후 2초 대기
 8002d7e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002d82:	f013 fd65 	bl	8016850 <osDelay>
        break;
 8002d86:	e025      	b.n	8002dd4 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_JOIN_OK:
      case LORA_STATE_WAIT_SEND_RESPONSE:
        osDelay(3000); // JOIN/SEND 응답 대기 중 3초 간격
 8002d88:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002d8c:	f013 fd60 	bl	8016850 <osDelay>
        break;
 8002d90:	e020      	b.n	8002dd4 <StartDefaultTask+0x224>
      case LORA_STATE_WAIT_SEND_INTERVAL:
        LOG_DEBUG("[TX_TASK] ⏳ Waiting for send interval (%u ms)", lora_ctx.send_interval_ms);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	461a      	mov	r2, r3
 8002d96:	4937      	ldr	r1, [pc, #220]	@ (8002e74 <StartDefaultTask+0x2c4>)
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f001 fca7 	bl	80046ec <LOGGER_SendFormatted>
        osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8002d9e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002da2:	f013 fd55 	bl	8016850 <osDelay>
        break;
 8002da6:	e015      	b.n	8002dd4 <StartDefaultTask+0x224>
      case LORA_STATE_JOIN_RETRY:
        osDelay(5000); // 재시도 대기 5초
 8002da8:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002dac:	f013 fd50 	bl	8016850 <osDelay>
        break;
 8002db0:	e010      	b.n	8002dd4 <StartDefaultTask+0x224>
      case LORA_STATE_DONE:
      case LORA_STATE_ERROR:
        LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8002db2:	7a3b      	ldrb	r3, [r7, #8]
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	d101      	bne.n	8002dbc <StartDefaultTask+0x20c>
 8002db8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e78 <StartDefaultTask+0x2c8>)
 8002dba:	e000      	b.n	8002dbe <StartDefaultTask+0x20e>
 8002dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8002e7c <StartDefaultTask+0x2cc>)
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	492f      	ldr	r1, [pc, #188]	@ (8002e80 <StartDefaultTask+0x2d0>)
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f001 fc92 	bl	80046ec <LOGGER_SendFormatted>
                lora_ctx.state == LORA_STATE_DONE ? "DONE" : "ERROR");
        goto idle_loop;
 8002dc8:	e005      	b.n	8002dd6 <StartDefaultTask+0x226>
      default:
        osDelay(1000);
 8002dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dce:	f013 fd3f 	bl	8016850 <osDelay>
        break;
 8002dd2:	bf00      	nop
  {
 8002dd4:	e778      	b.n	8002cc8 <StartDefaultTask+0x118>
    }
  }

idle_loop:
  /* Infinite idle loop */
  LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8002dd6:	492b      	ldr	r1, [pc, #172]	@ (8002e84 <StartDefaultTask+0x2d4>)
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f001 fc87 	bl	80046ec <LOGGER_SendFormatted>
  uint32_t idle_counter = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	653b      	str	r3, [r7, #80]	@ 0x50
  
  for(;;)
  {
    // 30초마다 idle 상태 표시
    osDelay(30000);
 8002de2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002de6:	f013 fd33 	bl	8016850 <osDelay>
    idle_counter++;
 8002dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dec:	3301      	adds	r3, #1
 8002dee:	653b      	str	r3, [r7, #80]	@ 0x50
    LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8002df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	461a      	mov	r2, r3
 8002df6:	4924      	ldr	r1, [pc, #144]	@ (8002e88 <StartDefaultTask+0x2d8>)
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f001 fc77 	bl	80046ec <LOGGER_SendFormatted>
    osDelay(30000);
 8002dfe:	bf00      	nop
 8002e00:	e7ef      	b.n	8002de2 <StartDefaultTask+0x232>
 8002e02:	bf00      	nop
 8002e04:	0801b344 	.word	0x0801b344
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	0801b370 	.word	0x0801b370
 8002e14:	0801b388 	.word	0x0801b388
 8002e18:	0801b3b0 	.word	0x0801b3b0
 8002e1c:	0801b3fc 	.word	0x0801b3fc
 8002e20:	0801b438 	.word	0x0801b438
 8002e24:	0801b464 	.word	0x0801b464
 8002e28:	0801b46c 	.word	0x0801b46c
 8002e2c:	0801b498 	.word	0x0801b498
 8002e30:	0801b4d0 	.word	0x0801b4d0
 8002e34:	0801b514 	.word	0x0801b514
 8002e38:	0801b570 	.word	0x0801b570
 8002e3c:	0801b5a8 	.word	0x0801b5a8
 8002e40:	0801b838 	.word	0x0801b838
 8002e44:	000493e0 	.word	0x000493e0
 8002e48:	0801b5e8 	.word	0x0801b5e8
 8002e4c:	0801b5f0 	.word	0x0801b5f0
 8002e50:	0801b60c 	.word	0x0801b60c
 8002e54:	0801b63c 	.word	0x0801b63c
 8002e58:	0801b544 	.word	0x0801b544
 8002e5c:	200014ac 	.word	0x200014ac
 8002e60:	200012ac 	.word	0x200012ac
 8002e64:	0801b674 	.word	0x0801b674
 8002e68:	0801b6a4 	.word	0x0801b6a4
 8002e6c:	0801b6d0 	.word	0x0801b6d0
 8002e70:	0801b6f8 	.word	0x0801b6f8
 8002e74:	0801b72c 	.word	0x0801b72c
 8002e78:	0801b75c 	.word	0x0801b75c
 8002e7c:	0801b764 	.word	0x0801b764
 8002e80:	0801b76c 	.word	0x0801b76c
 8002e84:	0801b7a4 	.word	0x0801b7a4
 8002e88:	0801b7cc 	.word	0x0801b7cc

08002e8c <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8002e92:	af04      	add	r7, sp, #16
 8002e94:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002e98:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8002e9c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8002e9e:	49a8      	ldr	r1, [pc, #672]	@ (8003140 <StartReceiveTask+0x2b4>)
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f001 fc23 	bl	80046ec <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8002ea6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002eaa:	f013 fcd1 	bl	8016850 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8002eae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002eb2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8002eba:	f107 0208 	add.w	r2, r7, #8
 8002ebe:	f107 030c 	add.w	r3, r7, #12
 8002ec2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f001 fd28 	bl	800491c <UART_Receive>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8002ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8003144 <StartReceiveTask+0x2b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	4a9a      	ldr	r2, [pc, #616]	@ (8003144 <StartReceiveTask+0x2b8>)
 8002eda:	6013      	str	r3, [r2, #0]
    if (debug_counter % 200 == 0 && status != UART_STATUS_TIMEOUT) {  // 10초마다, 타임아웃 제외
 8002edc:	4b99      	ldr	r3, [pc, #612]	@ (8003144 <StartReceiveTask+0x2b8>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b99      	ldr	r3, [pc, #612]	@ (8003148 <StartReceiveTask+0x2bc>)
 8002ee2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ee6:	099b      	lsrs	r3, r3, #6
 8002ee8:	21c8      	movs	r1, #200	@ 0xc8
 8002eea:	fb01 f303 	mul.w	r3, r1, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d11f      	bne.n	8002f34 <StartReceiveTask+0xa8>
 8002ef4:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d01b      	beq.n	8002f34 <StartReceiveTask+0xa8>
      LOG_INFO("[RX_TASK] Status check #%lu: status=%d, bytes=%d, flags: rx_complete=%d, rx_error=%d", 
 8002efc:	4b91      	ldr	r3, [pc, #580]	@ (8003144 <StartReceiveTask+0x2b8>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a91      	ldr	r2, [pc, #580]	@ (8003148 <StartReceiveTask+0x2bc>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	099a      	lsrs	r2, r3, #6
 8002f08:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8002f0c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f10:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	488d      	ldr	r0, [pc, #564]	@ (800314c <StartReceiveTask+0x2c0>)
 8002f18:	7800      	ldrb	r0, [r0, #0]
 8002f1a:	b2c0      	uxtb	r0, r0
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	488c      	ldr	r0, [pc, #560]	@ (8003150 <StartReceiveTask+0x2c4>)
 8002f20:	7800      	ldrb	r0, [r0, #0]
 8002f22:	b2c0      	uxtb	r0, r0
 8002f24:	9002      	str	r0, [sp, #8]
 8002f26:	9401      	str	r4, [sp, #4]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4989      	ldr	r1, [pc, #548]	@ (8003154 <StartReceiveTask+0x2c8>)
 8002f2e:	2001      	movs	r0, #1
 8002f30:	f001 fbdc 	bl	80046ec <LOGGER_SendFormatted>
               debug_counter / 200, status, local_bytes_received, uart_rx_complete_flag, uart_rx_error_flag);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8002f34:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 80fc 	bne.w	8003136 <StartReceiveTask+0x2aa>
 8002f3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f42:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f340 80f4 	ble.w	8003136 <StartReceiveTask+0x2aa>
      // 수신 완료 - TDD ResponseHandler로 분석
      LOG_INFO("📥 RECV: '%s' (%d bytes)", local_buffer, local_bytes_received);
 8002f4e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8002f52:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f107 020c 	add.w	r2, r7, #12
 8002f5c:	497e      	ldr	r1, [pc, #504]	@ (8003158 <StartReceiveTask+0x2cc>)
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f001 fbc4 	bl	80046ec <LOGGER_SendFormatted>
      
      // TDD ResponseHandler를 사용하여 응답 분석
      if (is_response_ok(local_buffer)) {
 8002f64:	f107 030c 	add.w	r3, r7, #12
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd ff27 	bl	8000dbc <is_response_ok>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <StartReceiveTask+0xf2>
        LOG_INFO("✅ OK response");
 8002f74:	4979      	ldr	r1, [pc, #484]	@ (800315c <StartReceiveTask+0x2d0>)
 8002f76:	2001      	movs	r0, #1
 8002f78:	f001 fbb8 	bl	80046ec <LOGGER_SendFormatted>
 8002f7c:	e049      	b.n	8003012 <StartReceiveTask+0x186>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	4977      	ldr	r1, [pc, #476]	@ (8003160 <StartReceiveTask+0x2d4>)
 8002f84:	4618      	mov	r0, r3
 8002f86:	f016 ff4a 	bl	8019e1e <strstr>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d004      	beq.n	8002f9a <StartReceiveTask+0x10e>
        LOG_INFO("✅ JOIN response");
 8002f90:	4974      	ldr	r1, [pc, #464]	@ (8003164 <StartReceiveTask+0x2d8>)
 8002f92:	2001      	movs	r0, #1
 8002f94:	f001 fbaa 	bl	80046ec <LOGGER_SendFormatted>
 8002f98:	e03b      	b.n	8003012 <StartReceiveTask+0x186>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	4972      	ldr	r1, [pc, #456]	@ (8003168 <StartReceiveTask+0x2dc>)
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f016 ff3c 	bl	8019e1e <strstr>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <StartReceiveTask+0x12a>
        LOG_INFO("📡 LoRa module boot message (ignored)");
 8002fac:	496f      	ldr	r1, [pc, #444]	@ (800316c <StartReceiveTask+0x2e0>)
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f001 fb9c 	bl	80046ec <LOGGER_SendFormatted>
 8002fb4:	e02d      	b.n	8003012 <StartReceiveTask+0x186>
      } else {
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd ffea 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        switch (response_type) {
 8002fc6:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d821      	bhi.n	8003012 <StartReceiveTask+0x186>
 8002fce:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd4 <StartReceiveTask+0x148>)
 8002fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd4:	08002fe5 	.word	0x08002fe5
 8002fd8:	08002fef 	.word	0x08002fef
 8002fdc:	08002ff9 	.word	0x08002ff9
 8002fe0:	08003003 	.word	0x08003003
          case RESPONSE_OK:
            LOG_INFO("✅ OK");
 8002fe4:	4962      	ldr	r1, [pc, #392]	@ (8003170 <StartReceiveTask+0x2e4>)
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f001 fb80 	bl	80046ec <LOGGER_SendFormatted>
            break;
 8002fec:	e011      	b.n	8003012 <StartReceiveTask+0x186>
          case RESPONSE_ERROR:
            LOG_WARN("⚠️ ERROR");
 8002fee:	4961      	ldr	r1, [pc, #388]	@ (8003174 <StartReceiveTask+0x2e8>)
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f001 fb7b 	bl	80046ec <LOGGER_SendFormatted>
            break;
 8002ff6:	e00c      	b.n	8003012 <StartReceiveTask+0x186>
          case RESPONSE_TIMEOUT:
            LOG_WARN("⚠️ TIMEOUT");
 8002ff8:	495f      	ldr	r1, [pc, #380]	@ (8003178 <StartReceiveTask+0x2ec>)
 8002ffa:	2002      	movs	r0, #2
 8002ffc:	f001 fb76 	bl	80046ec <LOGGER_SendFormatted>
            break;
 8003000:	e007      	b.n	8003012 <StartReceiveTask+0x186>
          case RESPONSE_UNKNOWN:
            LOG_INFO("❓ UNKNOWN format: %.20s...", local_buffer);  // 처음 20자만 표시
 8003002:	f107 030c 	add.w	r3, r7, #12
 8003006:	461a      	mov	r2, r3
 8003008:	495c      	ldr	r1, [pc, #368]	@ (800317c <StartReceiveTask+0x2f0>)
 800300a:	2001      	movs	r0, #1
 800300c:	f001 fb6e 	bl	80046ec <LOGGER_SendFormatted>
            break;
 8003010:	bf00      	nop
        }
      }
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003012:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003016:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	f107 030c 	add.w	r3, r7, #12
 8003022:	4619      	mov	r1, r3
 8003024:	4856      	ldr	r0, [pc, #344]	@ (8003180 <StartReceiveTask+0x2f4>)
 8003026:	f016 ff4d 	bl	8019ec4 <memcpy>
      rx_bytes_received = local_bytes_received;
 800302a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800302e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a53      	ldr	r2, [pc, #332]	@ (8003184 <StartReceiveTask+0x2f8>)
 8003036:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 800303e:	f107 030c 	add.w	r3, r7, #12
 8003042:	4618      	mov	r0, r3
 8003044:	f7fd feba 	bl	8000dbc <is_response_ok>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <StartReceiveTask+0x1ca>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003054:	e03f      	b.n	80030d6 <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003056:	f107 030c 	add.w	r3, r7, #12
 800305a:	4941      	ldr	r1, [pc, #260]	@ (8003160 <StartReceiveTask+0x2d4>)
 800305c:	4618      	mov	r0, r3
 800305e:	f016 fede 	bl	8019e1e <strstr>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <StartReceiveTask+0x1e4>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800306e:	e032      	b.n	80030d6 <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	4944      	ldr	r1, [pc, #272]	@ (8003188 <StartReceiveTask+0x2fc>)
 8003076:	4618      	mov	r0, r3
 8003078:	f016 fed1 	bl	8019e1e <strstr>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <StartReceiveTask+0x1fe>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003088:	e025      	b.n	80030d6 <StartReceiveTask+0x24a>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	4936      	ldr	r1, [pc, #216]	@ (8003168 <StartReceiveTask+0x2dc>)
 8003090:	4618      	mov	r0, r3
 8003092:	f016 fec4 	bl	8019e1e <strstr>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d108      	bne.n	80030ae <StartReceiveTask+0x222>
 800309c:	f107 030c 	add.w	r3, r7, #12
 80030a0:	493a      	ldr	r1, [pc, #232]	@ (800318c <StartReceiveTask+0x300>)
 80030a2:	4618      	mov	r0, r3
 80030a4:	f016 febb 	bl	8019e1e <strstr>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <StartReceiveTask+0x22c>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 80030ae:	4938      	ldr	r1, [pc, #224]	@ (8003190 <StartReceiveTask+0x304>)
 80030b0:	2000      	movs	r0, #0
 80030b2:	f001 fb1b 	bl	80046ec <LOGGER_SendFormatted>
 80030b6:	e00e      	b.n	80030d6 <StartReceiveTask+0x24a>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd ff69 	bl	8000f94 <ResponseHandler_ParseSendResponse>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f887 320c 	strb.w	r3, [r7, #524]	@ 0x20c
        if (response_type != RESPONSE_UNKNOWN) {
 80030c8:	f897 320c 	ldrb.w	r3, [r7, #524]	@ 0x20c
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d002      	beq.n	80030d6 <StartReceiveTask+0x24a>
          is_lora_command_response = true;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 80030d6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01d      	beq.n	800311a <StartReceiveTask+0x28e>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 80030de:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030e2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f107 030c 	add.w	r3, r7, #12
 80030ee:	4619      	mov	r1, r3
 80030f0:	4828      	ldr	r0, [pc, #160]	@ (8003194 <StartReceiveTask+0x308>)
 80030f2:	f016 fee7 	bl	8019ec4 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 80030f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80030fa:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a24      	ldr	r2, [pc, #144]	@ (8003194 <StartReceiveTask+0x308>)
 8003102:	2100      	movs	r1, #0
 8003104:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8003106:	4b24      	ldr	r3, [pc, #144]	@ (8003198 <StartReceiveTask+0x30c>)
 8003108:	2201      	movs	r2, #1
 800310a:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 800310c:	f107 030c 	add.w	r3, r7, #12
 8003110:	461a      	mov	r2, r3
 8003112:	4922      	ldr	r1, [pc, #136]	@ (800319c <StartReceiveTask+0x310>)
 8003114:	2000      	movs	r0, #0
 8003116:	f001 fae9 	bl	80046ec <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 800311a:	f107 030c 	add.w	r3, r7, #12
 800311e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f016 fe5f 	bl	8019de8 <memset>
      local_bytes_received = 0;
 800312a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800312e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8003136:	2032      	movs	r0, #50	@ 0x32
 8003138:	f013 fb8a 	bl	8016850 <osDelay>
  {
 800313c:	e6bd      	b.n	8002eba <StartReceiveTask+0x2e>
 800313e:	bf00      	nop
 8003140:	0801b84c 	.word	0x0801b84c
 8003144:	2000151c 	.word	0x2000151c
 8003148:	51eb851f 	.word	0x51eb851f
 800314c:	20001510 	.word	0x20001510
 8003150:	20001511 	.word	0x20001511
 8003154:	0801b874 	.word	0x0801b874
 8003158:	0801b8cc 	.word	0x0801b8cc
 800315c:	0801b8e8 	.word	0x0801b8e8
 8003160:	0801b8f8 	.word	0x0801b8f8
 8003164:	0801b904 	.word	0x0801b904
 8003168:	0801b918 	.word	0x0801b918
 800316c:	0801b924 	.word	0x0801b924
 8003170:	0801b94c 	.word	0x0801b94c
 8003174:	0801b954 	.word	0x0801b954
 8003178:	0801b964 	.word	0x0801b964
 800317c:	0801b974 	.word	0x0801b974
 8003180:	200010a8 	.word	0x200010a8
 8003184:	200012a8 	.word	0x200012a8
 8003188:	0801b994 	.word	0x0801b994
 800318c:	0801b99c 	.word	0x0801b99c
 8003190:	0801b9ac 	.word	0x0801b9ac
 8003194:	200012ac 	.word	0x200012ac
 8003198:	200014ac 	.word	0x200014ac
 800319c:	0801b9e8 	.word	0x0801b9e8

080031a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80031b2:	f001 feb5 	bl	8004f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80031b6:	bf00      	nop
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40001000 	.word	0x40001000

080031c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031c8:	b672      	cpsid	i
}
 80031ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <Error_Handler+0x8>

080031d0 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80031d6:	4b10      	ldr	r3, [pc, #64]	@ (8003218 <MX_DMA_Init+0x48>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	4a0f      	ldr	r2, [pc, #60]	@ (8003218 <MX_DMA_Init+0x48>)
 80031dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003218 <MX_DMA_Init+0x48>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ea:	607b      	str	r3, [r7, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80031ee:	2200      	movs	r2, #0
 80031f0:	2105      	movs	r1, #5
 80031f2:	2039      	movs	r0, #57	@ 0x39
 80031f4:	f002 fa28 	bl	8005648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80031f8:	2039      	movs	r0, #57	@ 0x39
 80031fa:	f002 fa41 	bl	8005680 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80031fe:	2200      	movs	r2, #0
 8003200:	2105      	movs	r1, #5
 8003202:	2047      	movs	r0, #71	@ 0x47
 8003204:	f002 fa20 	bl	8005648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003208:	2047      	movs	r0, #71	@ 0x47
 800320a:	f002 fa39 	bl	8005680 <HAL_NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 8003220:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003222:	4a19      	ldr	r2, [pc, #100]	@ (8003288 <MX_USART6_DMA_Init+0x6c>)
 8003224:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003226:	4b17      	ldr	r3, [pc, #92]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003228:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800322c:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003234:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003236:	2200      	movs	r2, #0
 8003238:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800323a:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 800323c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003240:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003242:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003244:	2200      	movs	r2, #0
 8003246:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003248:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 800324a:	2200      	movs	r2, #0
 800324c:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 800324e:	4b0d      	ldr	r3, [pc, #52]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003250:	2200      	movs	r2, #0
 8003252:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003256:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800325a:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 800325e:	2200      	movs	r2, #0
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003262:	4808      	ldr	r0, [pc, #32]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003264:	f002 fb86 	bl	8005974 <HAL_DMA_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <MX_USART6_DMA_Init+0x56>
  {
    Error_Handler();
 800326e:	f7ff ffa9 	bl	80031c4 <Error_Handler>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8003272:	4b06      	ldr	r3, [pc, #24]	@ (800328c <MX_USART6_DMA_Init+0x70>)
 8003274:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 8003276:	675a      	str	r2, [r3, #116]	@ 0x74
 8003278:	4b02      	ldr	r3, [pc, #8]	@ (8003284 <MX_USART6_DMA_Init+0x68>)
 800327a:	4a04      	ldr	r2, [pc, #16]	@ (800328c <MX_USART6_DMA_Init+0x70>)
 800327c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	200014b0 	.word	0x200014b0
 8003288:	40026428 	.word	0x40026428
 800328c:	20000fe4 	.word	0x20000fe4

08003290 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003296:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <HAL_MspInit+0x4c>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329a:	4a10      	ldr	r2, [pc, #64]	@ (80032dc <HAL_MspInit+0x4c>)
 800329c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032a2:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <HAL_MspInit+0x4c>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ae:	4b0b      	ldr	r3, [pc, #44]	@ (80032dc <HAL_MspInit+0x4c>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_MspInit+0x4c>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ba:	4b08      	ldr	r3, [pc, #32]	@ (80032dc <HAL_MspInit+0x4c>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	210f      	movs	r1, #15
 80032ca:	f06f 0001 	mvn.w	r0, #1
 80032ce:	f002 f9bb 	bl	8005648 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800

080032e0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	@ 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e8:	f107 0314 	add.w	r3, r7, #20
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	60da      	str	r2, [r3, #12]
 80032f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <HAL_ADC_MspInit+0xa4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d13c      	bne.n	800337c <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003302:	4b21      	ldr	r3, [pc, #132]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	4a20      	ldr	r2, [pc, #128]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 8003308:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800330c:	6453      	str	r3, [r2, #68]	@ 0x44
 800330e:	4b1e      	ldr	r3, [pc, #120]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800331a:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	4a1a      	ldr	r2, [pc, #104]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 8003320:	f043 0320 	orr.w	r3, r3, #32
 8003324:	6313      	str	r3, [r2, #48]	@ 0x30
 8003326:	4b18      	ldr	r3, [pc, #96]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003332:	4b15      	ldr	r3, [pc, #84]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003336:	4a14      	ldr	r2, [pc, #80]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6313      	str	r3, [r2, #48]	@ 0x30
 800333e:	4b12      	ldr	r3, [pc, #72]	@ (8003388 <HAL_ADC_MspInit+0xa8>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60bb      	str	r3, [r7, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800334a:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800334e:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003350:	2303      	movs	r3, #3
 8003352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	480b      	ldr	r0, [pc, #44]	@ (800338c <HAL_ADC_MspInit+0xac>)
 8003360:	f003 fcb6 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8003364:	2301      	movs	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003368:	2303      	movs	r3, #3
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8003370:	f107 0314 	add.w	r3, r7, #20
 8003374:	4619      	mov	r1, r3
 8003376:	4806      	ldr	r0, [pc, #24]	@ (8003390 <HAL_ADC_MspInit+0xb0>)
 8003378:	f003 fcaa 	bl	8006cd0 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 800337c:	bf00      	nop
 800337e:	3728      	adds	r7, #40	@ 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40012200 	.word	0x40012200
 8003388:	40023800 	.word	0x40023800
 800338c:	40021400 	.word	0x40021400
 8003390:	40020000 	.word	0x40020000

08003394 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	@ (80033cc <HAL_CRC_MspInit+0x38>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10b      	bne.n	80033be <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80033a6:	4b0a      	ldr	r3, [pc, #40]	@ (80033d0 <HAL_CRC_MspInit+0x3c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <HAL_CRC_MspInit+0x3c>)
 80033ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80033b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b2:	4b07      	ldr	r3, [pc, #28]	@ (80033d0 <HAL_CRC_MspInit+0x3c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80033be:	bf00      	nop
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40023000 	.word	0x40023000
 80033d0:	40023800 	.word	0x40023800

080033d4 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08e      	sub	sp, #56	@ 0x38
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a50      	ldr	r2, [pc, #320]	@ (8003534 <HAL_DCMI_MspInit+0x160>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f040 809a 	bne.w	800352c <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80033f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 80033fe:	f043 0301 	orr.w	r3, r3, #1
 8003402:	6353      	str	r3, [r2, #52]	@ 0x34
 8003404:	4b4c      	ldr	r3, [pc, #304]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003410:	4b49      	ldr	r3, [pc, #292]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	4a48      	ldr	r2, [pc, #288]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003416:	f043 0310 	orr.w	r3, r3, #16
 800341a:	6313      	str	r3, [r2, #48]	@ 0x30
 800341c:	4b46      	ldr	r3, [pc, #280]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 800341e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	61fb      	str	r3, [r7, #28]
 8003426:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003428:	4b43      	ldr	r3, [pc, #268]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342c:	4a42      	ldr	r2, [pc, #264]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 800342e:	f043 0308 	orr.w	r3, r3, #8
 8003432:	6313      	str	r3, [r2, #48]	@ 0x30
 8003434:	4b40      	ldr	r3, [pc, #256]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003440:	4b3d      	ldr	r3, [pc, #244]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	4a3c      	ldr	r2, [pc, #240]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800344a:	6313      	str	r3, [r2, #48]	@ 0x30
 800344c:	4b3a      	ldr	r3, [pc, #232]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003458:	4b37      	ldr	r3, [pc, #220]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 800345a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345c:	4a36      	ldr	r2, [pc, #216]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 800345e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003462:	6313      	str	r3, [r2, #48]	@ 0x30
 8003464:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	4b31      	ldr	r3, [pc, #196]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003474:	4a30      	ldr	r2, [pc, #192]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	6313      	str	r3, [r2, #48]	@ 0x30
 800347c:	4b2e      	ldr	r3, [pc, #184]	@ (8003538 <HAL_DCMI_MspInit+0x164>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8003488:	2360      	movs	r3, #96	@ 0x60
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348c:	2302      	movs	r3, #2
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003494:	2300      	movs	r3, #0
 8003496:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8003498:	230d      	movs	r3, #13
 800349a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800349c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a0:	4619      	mov	r1, r3
 80034a2:	4826      	ldr	r0, [pc, #152]	@ (800353c <HAL_DCMI_MspInit+0x168>)
 80034a4:	f003 fc14 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80034a8:	2308      	movs	r3, #8
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b4:	2300      	movs	r3, #0
 80034b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80034b8:	230d      	movs	r3, #13
 80034ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80034bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034c0:	4619      	mov	r1, r3
 80034c2:	481f      	ldr	r0, [pc, #124]	@ (8003540 <HAL_DCMI_MspInit+0x16c>)
 80034c4:	f003 fc04 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80034c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80034da:	230d      	movs	r3, #13
 80034dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80034de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034e2:	4619      	mov	r1, r3
 80034e4:	4817      	ldr	r0, [pc, #92]	@ (8003544 <HAL_DCMI_MspInit+0x170>)
 80034e6:	f003 fbf3 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 80034ea:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80034fc:	230d      	movs	r3, #13
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	4810      	ldr	r0, [pc, #64]	@ (8003548 <HAL_DCMI_MspInit+0x174>)
 8003508:	f003 fbe2 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800350c:	2350      	movs	r3, #80	@ 0x50
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003510:	2302      	movs	r3, #2
 8003512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	2300      	movs	r3, #0
 800351a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800351c:	230d      	movs	r3, #13
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003520:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003524:	4619      	mov	r1, r3
 8003526:	4809      	ldr	r0, [pc, #36]	@ (800354c <HAL_DCMI_MspInit+0x178>)
 8003528:	f003 fbd2 	bl	8006cd0 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 800352c:	bf00      	nop
 800352e:	3738      	adds	r7, #56	@ 0x38
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	50050000 	.word	0x50050000
 8003538:	40023800 	.word	0x40023800
 800353c:	40021000 	.word	0x40021000
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021800 	.word	0x40021800
 8003548:	40021c00 	.word	0x40021c00
 800354c:	40020000 	.word	0x40020000

08003550 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <HAL_DMA2D_MspInit+0x44>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d113      	bne.n	800358a <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <HAL_DMA2D_MspInit+0x48>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003566:	4a0c      	ldr	r2, [pc, #48]	@ (8003598 <HAL_DMA2D_MspInit+0x48>)
 8003568:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800356c:	6313      	str	r3, [r2, #48]	@ 0x30
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_DMA2D_MspInit+0x48>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2105      	movs	r1, #5
 800357e:	205a      	movs	r0, #90	@ 0x5a
 8003580:	f002 f862 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003584:	205a      	movs	r0, #90	@ 0x5a
 8003586:	f002 f87b 	bl	8005680 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	4002b000 	.word	0x4002b000
 8003598:	40023800 	.word	0x40023800

0800359c <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	@ 0x38
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a3f      	ldr	r2, [pc, #252]	@ (80036b8 <HAL_ETH_MspInit+0x11c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d178      	bne.n	80036b0 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80035be:	4b3f      	ldr	r3, [pc, #252]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	4a3e      	ldr	r2, [pc, #248]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80035c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ca:	4b3c      	ldr	r3, [pc, #240]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d2:	623b      	str	r3, [r7, #32]
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	4b39      	ldr	r3, [pc, #228]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	4a38      	ldr	r2, [pc, #224]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80035e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e2:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	4b33      	ldr	r3, [pc, #204]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	4a32      	ldr	r2, [pc, #200]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80035f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035fa:	4b30      	ldr	r3, [pc, #192]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003606:	4b2d      	ldr	r3, [pc, #180]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	4a2c      	ldr	r2, [pc, #176]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 800360c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003610:	6313      	str	r3, [r2, #48]	@ 0x30
 8003612:	4b2a      	ldr	r3, [pc, #168]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800361e:	4b27      	ldr	r3, [pc, #156]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	4a26      	ldr	r2, [pc, #152]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6313      	str	r3, [r2, #48]	@ 0x30
 800362a:	4b24      	ldr	r3, [pc, #144]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003636:	4b21      	ldr	r3, [pc, #132]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	4a20      	ldr	r2, [pc, #128]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6313      	str	r3, [r2, #48]	@ 0x30
 8003642:	4b1e      	ldr	r3, [pc, #120]	@ (80036bc <HAL_ETH_MspInit+0x120>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800364e:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365c:	2303      	movs	r3, #3
 800365e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003660:	230b      	movs	r3, #11
 8003662:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003668:	4619      	mov	r1, r3
 800366a:	4815      	ldr	r0, [pc, #84]	@ (80036c0 <HAL_ETH_MspInit+0x124>)
 800366c:	f003 fb30 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003670:	2332      	movs	r3, #50	@ 0x32
 8003672:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003674:	2302      	movs	r3, #2
 8003676:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800367c:	2303      	movs	r3, #3
 800367e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003680:	230b      	movs	r3, #11
 8003682:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003688:	4619      	mov	r1, r3
 800368a:	480e      	ldr	r0, [pc, #56]	@ (80036c4 <HAL_ETH_MspInit+0x128>)
 800368c:	f003 fb20 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003690:	2386      	movs	r3, #134	@ 0x86
 8003692:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	2302      	movs	r3, #2
 8003696:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003698:	2300      	movs	r3, #0
 800369a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369c:	2303      	movs	r3, #3
 800369e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80036a0:	230b      	movs	r3, #11
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036a8:	4619      	mov	r1, r3
 80036aa:	4807      	ldr	r0, [pc, #28]	@ (80036c8 <HAL_ETH_MspInit+0x12c>)
 80036ac:	f003 fb10 	bl	8006cd0 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80036b0:	bf00      	nop
 80036b2:	3738      	adds	r7, #56	@ 0x38
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40028000 	.word	0x40028000
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40021800 	.word	0x40021800
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40020000 	.word	0x40020000

080036cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b0ac      	sub	sp, #176	@ 0xb0
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036e4:	f107 0318 	add.w	r3, r7, #24
 80036e8:	2284      	movs	r2, #132	@ 0x84
 80036ea:	2100      	movs	r1, #0
 80036ec:	4618      	mov	r0, r3
 80036ee:	f016 fb7b 	bl	8019de8 <memset>
  if(hi2c->Instance==I2C1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a44      	ldr	r2, [pc, #272]	@ (8003808 <HAL_I2C_MspInit+0x13c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d13d      	bne.n	8003778 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80036fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003700:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003702:	2300      	movs	r3, #0
 8003704:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003706:	f107 0318 	add.w	r3, r7, #24
 800370a:	4618      	mov	r0, r3
 800370c:	f007 f816 	bl	800a73c <HAL_RCCEx_PeriphCLKConfig>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003716:	f7ff fd55 	bl	80031c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	4b3c      	ldr	r3, [pc, #240]	@ (800380c <HAL_I2C_MspInit+0x140>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	4a3b      	ldr	r2, [pc, #236]	@ (800380c <HAL_I2C_MspInit+0x140>)
 8003720:	f043 0302 	orr.w	r3, r3, #2
 8003724:	6313      	str	r3, [r2, #48]	@ 0x30
 8003726:	4b39      	ldr	r3, [pc, #228]	@ (800380c <HAL_I2C_MspInit+0x140>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003732:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800373a:	2312      	movs	r3, #18
 800373c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003740:	2301      	movs	r3, #1
 8003742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800374c:	2304      	movs	r3, #4
 800374e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003752:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003756:	4619      	mov	r1, r3
 8003758:	482d      	ldr	r0, [pc, #180]	@ (8003810 <HAL_I2C_MspInit+0x144>)
 800375a:	f003 fab9 	bl	8006cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800375e:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_I2C_MspInit+0x140>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	4a2a      	ldr	r2, [pc, #168]	@ (800380c <HAL_I2C_MspInit+0x140>)
 8003764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003768:	6413      	str	r3, [r2, #64]	@ 0x40
 800376a:	4b28      	ldr	r3, [pc, #160]	@ (800380c <HAL_I2C_MspInit+0x140>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003776:	e042      	b.n	80037fe <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a25      	ldr	r2, [pc, #148]	@ (8003814 <HAL_I2C_MspInit+0x148>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d13d      	bne.n	80037fe <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003782:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003786:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800378e:	f107 0318 	add.w	r3, r7, #24
 8003792:	4618      	mov	r0, r3
 8003794:	f006 ffd2 	bl	800a73c <HAL_RCCEx_PeriphCLKConfig>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800379e:	f7ff fd11 	bl	80031c4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80037a2:	4b1a      	ldr	r3, [pc, #104]	@ (800380c <HAL_I2C_MspInit+0x140>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	4a19      	ldr	r2, [pc, #100]	@ (800380c <HAL_I2C_MspInit+0x140>)
 80037a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ae:	4b17      	ldr	r3, [pc, #92]	@ (800380c <HAL_I2C_MspInit+0x140>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80037ba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80037be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037c2:	2312      	movs	r3, #18
 80037c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ce:	2303      	movs	r3, #3
 80037d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80037d4:	2304      	movs	r3, #4
 80037d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80037de:	4619      	mov	r1, r3
 80037e0:	480d      	ldr	r0, [pc, #52]	@ (8003818 <HAL_I2C_MspInit+0x14c>)
 80037e2:	f003 fa75 	bl	8006cd0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80037e6:	4b09      	ldr	r3, [pc, #36]	@ (800380c <HAL_I2C_MspInit+0x140>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	4a08      	ldr	r2, [pc, #32]	@ (800380c <HAL_I2C_MspInit+0x140>)
 80037ec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f2:	4b06      	ldr	r3, [pc, #24]	@ (800380c <HAL_I2C_MspInit+0x140>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
}
 80037fe:	bf00      	nop
 8003800:	37b0      	adds	r7, #176	@ 0xb0
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40005400 	.word	0x40005400
 800380c:	40023800 	.word	0x40023800
 8003810:	40020400 	.word	0x40020400
 8003814:	40005c00 	.word	0x40005c00
 8003818:	40021c00 	.word	0x40021c00

0800381c <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08e      	sub	sp, #56	@ 0x38
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a55      	ldr	r2, [pc, #340]	@ (8003990 <HAL_LTDC_MspInit+0x174>)
 800383a:	4293      	cmp	r3, r2
 800383c:	f040 80a3 	bne.w	8003986 <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003840:	4b54      	ldr	r3, [pc, #336]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 8003842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003844:	4a53      	ldr	r2, [pc, #332]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 8003846:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800384a:	6453      	str	r3, [r2, #68]	@ 0x44
 800384c:	4b51      	ldr	r3, [pc, #324]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 800384e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003850:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003858:	4b4e      	ldr	r3, [pc, #312]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800385c:	4a4d      	ldr	r2, [pc, #308]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 800385e:	f043 0310 	orr.w	r3, r3, #16
 8003862:	6313      	str	r3, [r2, #48]	@ 0x30
 8003864:	4b4b      	ldr	r3, [pc, #300]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 8003866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003870:	4b48      	ldr	r3, [pc, #288]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003874:	4a47      	ldr	r2, [pc, #284]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 8003876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800387a:	6313      	str	r3, [r2, #48]	@ 0x30
 800387c:	4b45      	ldr	r3, [pc, #276]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003888:	4b42      	ldr	r3, [pc, #264]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 800388a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800388c:	4a41      	ldr	r2, [pc, #260]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 800388e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003892:	6313      	str	r3, [r2, #48]	@ 0x30
 8003894:	4b3f      	ldr	r3, [pc, #252]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003898:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389c:	617b      	str	r3, [r7, #20]
 800389e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80038a0:	4b3c      	ldr	r3, [pc, #240]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a4:	4a3b      	ldr	r2, [pc, #236]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 80038a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ac:	4b39      	ldr	r3, [pc, #228]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80038b8:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	4a35      	ldr	r2, [pc, #212]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 80038be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80038c4:	4b33      	ldr	r3, [pc, #204]	@ (8003994 <HAL_LTDC_MspInit+0x178>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80038d0:	2310      	movs	r3, #16
 80038d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038dc:	2300      	movs	r3, #0
 80038de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038e0:	230e      	movs	r3, #14
 80038e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80038e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038e8:	4619      	mov	r1, r3
 80038ea:	482b      	ldr	r0, [pc, #172]	@ (8003998 <HAL_LTDC_MspInit+0x17c>)
 80038ec:	f003 f9f0 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80038f0:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003902:	230e      	movs	r3, #14
 8003904:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003906:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800390a:	4619      	mov	r1, r3
 800390c:	4823      	ldr	r0, [pc, #140]	@ (800399c <HAL_LTDC_MspInit+0x180>)
 800390e:	f003 f9df 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003912:	23f7      	movs	r3, #247	@ 0xf7
 8003914:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	2300      	movs	r3, #0
 8003920:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003922:	230e      	movs	r3, #14
 8003924:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800392a:	4619      	mov	r1, r3
 800392c:	481c      	ldr	r0, [pc, #112]	@ (80039a0 <HAL_LTDC_MspInit+0x184>)
 800392e:	f003 f9cf 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003938:	2302      	movs	r3, #2
 800393a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003940:	2300      	movs	r3, #0
 8003942:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003944:	2309      	movs	r3, #9
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003948:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800394c:	4619      	mov	r1, r3
 800394e:	4815      	ldr	r0, [pc, #84]	@ (80039a4 <HAL_LTDC_MspInit+0x188>)
 8003950:	f003 f9be 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003954:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395e:	2300      	movs	r3, #0
 8003960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003962:	2300      	movs	r3, #0
 8003964:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003966:	230e      	movs	r3, #14
 8003968:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800396a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800396e:	4619      	mov	r1, r3
 8003970:	480d      	ldr	r0, [pc, #52]	@ (80039a8 <HAL_LTDC_MspInit+0x18c>)
 8003972:	f003 f9ad 	bl	8006cd0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2105      	movs	r1, #5
 800397a:	2058      	movs	r0, #88	@ 0x58
 800397c:	f001 fe64 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003980:	2058      	movs	r0, #88	@ 0x58
 8003982:	f001 fe7d 	bl	8005680 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003986:	bf00      	nop
 8003988:	3738      	adds	r7, #56	@ 0x38
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40016800 	.word	0x40016800
 8003994:	40023800 	.word	0x40023800
 8003998:	40021000 	.word	0x40021000
 800399c:	40022400 	.word	0x40022400
 80039a0:	40022800 	.word	0x40022800
 80039a4:	40021800 	.word	0x40021800
 80039a8:	40022000 	.word	0x40022000

080039ac <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08c      	sub	sp, #48	@ 0x30
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b4:	f107 031c 	add.w	r3, r7, #28
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ab8 <HAL_QSPI_MspInit+0x10c>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d170      	bne.n	8003ab0 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80039ce:	4b3b      	ldr	r3, [pc, #236]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 80039d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d2:	4a3a      	ldr	r2, [pc, #232]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 80039d4:	f043 0302 	orr.w	r3, r3, #2
 80039d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80039da:	4b38      	ldr	r3, [pc, #224]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 80039dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039e6:	4b35      	ldr	r3, [pc, #212]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	4a34      	ldr	r2, [pc, #208]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 80039ec:	f043 0310 	orr.w	r3, r3, #16
 80039f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039f2:	4b32      	ldr	r3, [pc, #200]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039fe:	4b2f      	ldr	r3, [pc, #188]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	4a2e      	ldr	r2, [pc, #184]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 8003a04:	f043 0302 	orr.w	r3, r3, #2
 8003a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a16:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	4a28      	ldr	r2, [pc, #160]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a22:	4b26      	ldr	r3, [pc, #152]	@ (8003abc <HAL_QSPI_MspInit+0x110>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8003a2e:	2304      	movs	r3, #4
 8003a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a3e:	2309      	movs	r3, #9
 8003a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8003a42:	f107 031c 	add.w	r3, r7, #28
 8003a46:	4619      	mov	r1, r3
 8003a48:	481d      	ldr	r0, [pc, #116]	@ (8003ac0 <HAL_QSPI_MspInit+0x114>)
 8003a4a:	f003 f941 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8003a4e:	2340      	movs	r3, #64	@ 0x40
 8003a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8003a5e:	230a      	movs	r3, #10
 8003a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8003a62:	f107 031c 	add.w	r3, r7, #28
 8003a66:	4619      	mov	r1, r3
 8003a68:	4816      	ldr	r0, [pc, #88]	@ (8003ac4 <HAL_QSPI_MspInit+0x118>)
 8003a6a:	f003 f931 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a6e:	2304      	movs	r3, #4
 8003a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003a7e:	2309      	movs	r3, #9
 8003a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a82:	f107 031c 	add.w	r3, r7, #28
 8003a86:	4619      	mov	r1, r3
 8003a88:	480e      	ldr	r0, [pc, #56]	@ (8003ac4 <HAL_QSPI_MspInit+0x118>)
 8003a8a:	f003 f921 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8003a8e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8003a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a94:	2302      	movs	r3, #2
 8003a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8003aa0:	2309      	movs	r3, #9
 8003aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4807      	ldr	r0, [pc, #28]	@ (8003ac8 <HAL_QSPI_MspInit+0x11c>)
 8003aac:	f003 f910 	bl	8006cd0 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8003ab0:	bf00      	nop
 8003ab2:	3730      	adds	r7, #48	@ 0x30
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	a0001000 	.word	0xa0001000
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40020400 	.word	0x40020400
 8003ac8:	40020c00 	.word	0x40020c00

08003acc <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b0a4      	sub	sp, #144	@ 0x90
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ad4:	f107 030c 	add.w	r3, r7, #12
 8003ad8:	2284      	movs	r2, #132	@ 0x84
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f016 f983 	bl	8019de8 <memset>
  if(hrtc->Instance==RTC)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b20 <HAL_RTC_MspInit+0x54>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d114      	bne.n	8003b16 <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003aec:	2320      	movs	r3, #32
 8003aee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	4618      	mov	r0, r3
 8003afc:	f006 fe1e 	bl	800a73c <HAL_RCCEx_PeriphCLKConfig>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003b06:	f7ff fb5d 	bl	80031c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b0a:	4b06      	ldr	r3, [pc, #24]	@ (8003b24 <HAL_RTC_MspInit+0x58>)
 8003b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0e:	4a05      	ldr	r2, [pc, #20]	@ (8003b24 <HAL_RTC_MspInit+0x58>)
 8003b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b14:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8003b16:	bf00      	nop
 8003b18:	3790      	adds	r7, #144	@ 0x90
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40002800 	.word	0x40002800
 8003b24:	40023800 	.word	0x40023800

08003b28 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b08a      	sub	sp, #40	@ 0x28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a25      	ldr	r2, [pc, #148]	@ (8003bdc <HAL_SD_MspInit+0xb4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d144      	bne.n	8003bd4 <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003b4a:	4b25      	ldr	r3, [pc, #148]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	4a24      	ldr	r2, [pc, #144]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b50:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b56:	4b22      	ldr	r3, [pc, #136]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b62:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b66:	4a1e      	ldr	r2, [pc, #120]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b68:	f043 0304 	orr.w	r3, r3, #4
 8003b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b7a:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	4a18      	ldr	r2, [pc, #96]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b80:	f043 0308 	orr.w	r3, r3, #8
 8003b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b86:	4b16      	ldr	r3, [pc, #88]	@ (8003be0 <HAL_SD_MspInit+0xb8>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	60bb      	str	r3, [r7, #8]
 8003b90:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003b92:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003b96:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003ba4:	230c      	movs	r3, #12
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	4619      	mov	r1, r3
 8003bae:	480d      	ldr	r0, [pc, #52]	@ (8003be4 <HAL_SD_MspInit+0xbc>)
 8003bb0:	f003 f88e 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003bc4:	230c      	movs	r3, #12
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4806      	ldr	r0, [pc, #24]	@ (8003be8 <HAL_SD_MspInit+0xc0>)
 8003bd0:	f003 f87e 	bl	8006cd0 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8003bd4:	bf00      	nop
 8003bd6:	3728      	adds	r7, #40	@ 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	40012c00 	.word	0x40012c00
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40020800 	.word	0x40020800
 8003be8:	40020c00 	.word	0x40020c00

08003bec <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b0aa      	sub	sp, #168	@ 0xa8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c04:	f107 0310 	add.w	r3, r7, #16
 8003c08:	2284      	movs	r2, #132	@ 0x84
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f016 f8eb 	bl	8019de8 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8003c1a:	d143      	bne.n	8003ca4 <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8003c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c20:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8003c22:	2364      	movs	r3, #100	@ 0x64
 8003c24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8003c26:	2302      	movs	r3, #2
 8003c28:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8003c2e:	2302      	movs	r3, #2
 8003c30:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8003c32:	2301      	movs	r3, #1
 8003c34:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c36:	f107 0310 	add.w	r3, r7, #16
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f006 fd7e 	bl	800a73c <HAL_RCCEx_PeriphCLKConfig>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8003c46:	f7ff fabd 	bl	80031c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8003c4a:	4b18      	ldr	r3, [pc, #96]	@ (8003cac <HAL_SPDIFRX_MspInit+0xc0>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	4a17      	ldr	r2, [pc, #92]	@ (8003cac <HAL_SPDIFRX_MspInit+0xc0>)
 8003c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c56:	4b15      	ldr	r3, [pc, #84]	@ (8003cac <HAL_SPDIFRX_MspInit+0xc0>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c62:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <HAL_SPDIFRX_MspInit+0xc0>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	4a11      	ldr	r2, [pc, #68]	@ (8003cac <HAL_SPDIFRX_MspInit+0xc0>)
 8003c68:	f043 0308 	orr.w	r3, r3, #8
 8003c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <HAL_SPDIFRX_MspInit+0xc0>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8003c7a:	2380      	movs	r3, #128	@ 0x80
 8003c7c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c80:	2302      	movs	r3, #2
 8003c82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8003c92:	2308      	movs	r3, #8
 8003c94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8003c98:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4804      	ldr	r0, [pc, #16]	@ (8003cb0 <HAL_SPDIFRX_MspInit+0xc4>)
 8003ca0:	f003 f816 	bl	8006cd0 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8003ca4:	bf00      	nop
 8003ca6:	37a8      	adds	r7, #168	@ 0xa8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	40020c00 	.word	0x40020c00

08003cb4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08a      	sub	sp, #40	@ 0x28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a25      	ldr	r2, [pc, #148]	@ (8003d68 <HAL_SPI_MspInit+0xb4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d144      	bne.n	8003d60 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003cd6:	4b25      	ldr	r3, [pc, #148]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	4a24      	ldr	r2, [pc, #144]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ce2:	4b22      	ldr	r3, [pc, #136]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cee:	4b1f      	ldr	r3, [pc, #124]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d06:	4b19      	ldr	r3, [pc, #100]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	4a18      	ldr	r2, [pc, #96]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003d0c:	f043 0302 	orr.w	r3, r3, #2
 8003d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d12:	4b16      	ldr	r3, [pc, #88]	@ (8003d6c <HAL_SPI_MspInit+0xb8>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d22:	2302      	movs	r3, #2
 8003d24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d2e:	2305      	movs	r3, #5
 8003d30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	4619      	mov	r1, r3
 8003d38:	480d      	ldr	r0, [pc, #52]	@ (8003d70 <HAL_SPI_MspInit+0xbc>)
 8003d3a:	f002 ffc9 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003d3e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d50:	2305      	movs	r3, #5
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d54:	f107 0314 	add.w	r3, r7, #20
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4806      	ldr	r0, [pc, #24]	@ (8003d74 <HAL_SPI_MspInit+0xc0>)
 8003d5c:	f002 ffb8 	bl	8006cd0 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8003d60:	bf00      	nop
 8003d62:	3728      	adds	r7, #40	@ 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40003800 	.word	0x40003800
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40022000 	.word	0x40022000
 8003d74:	40020400 	.word	0x40020400

08003d78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b089      	sub	sp, #36	@ 0x24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a2e      	ldr	r2, [pc, #184]	@ (8003e40 <HAL_TIM_Base_MspInit+0xc8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d10c      	bne.n	8003da4 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d96:	4b2b      	ldr	r3, [pc, #172]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003da2:	e046      	b.n	8003e32 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dac:	d10c      	bne.n	8003dc8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dae:	4b25      	ldr	r3, [pc, #148]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db2:	4a24      	ldr	r2, [pc, #144]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003db4:	f043 0301 	orr.w	r3, r3, #1
 8003db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dba:	4b22      	ldr	r3, [pc, #136]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	69bb      	ldr	r3, [r7, #24]
}
 8003dc6:	e034      	b.n	8003e32 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8003e48 <HAL_TIM_Base_MspInit+0xd0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d10c      	bne.n	8003dec <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dde:	4b19      	ldr	r3, [pc, #100]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	697b      	ldr	r3, [r7, #20]
}
 8003dea:	e022      	b.n	8003e32 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a16      	ldr	r2, [pc, #88]	@ (8003e4c <HAL_TIM_Base_MspInit+0xd4>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10c      	bne.n	8003e10 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003df6:	4b13      	ldr	r3, [pc, #76]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	4a12      	ldr	r2, [pc, #72]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003dfc:	f043 0308 	orr.w	r3, r3, #8
 8003e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e02:	4b10      	ldr	r3, [pc, #64]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]
}
 8003e0e:	e010      	b.n	8003e32 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0e      	ldr	r2, [pc, #56]	@ (8003e50 <HAL_TIM_Base_MspInit+0xd8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10b      	bne.n	8003e32 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	4a09      	ldr	r2, [pc, #36]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e26:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <HAL_TIM_Base_MspInit+0xcc>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
}
 8003e32:	bf00      	nop
 8003e34:	3724      	adds	r7, #36	@ 0x24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40010000 	.word	0x40010000
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000c00 	.word	0x40000c00
 8003e50:	40010400 	.word	0x40010400

08003e54 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a0a      	ldr	r2, [pc, #40]	@ (8003e8c <HAL_TIM_PWM_MspInit+0x38>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d10b      	bne.n	8003e7e <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <HAL_TIM_PWM_MspInit+0x3c>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	4a09      	ldr	r2, [pc, #36]	@ (8003e90 <HAL_TIM_PWM_MspInit+0x3c>)
 8003e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e72:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <HAL_TIM_PWM_MspInit+0x3c>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	40001800 	.word	0x40001800
 8003e90:	40023800 	.word	0x40023800

08003e94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	@ 0x30
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
 8003eaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a56      	ldr	r2, [pc, #344]	@ (800400c <HAL_TIM_MspPostInit+0x178>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d11d      	bne.n	8003ef2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb6:	4b56      	ldr	r3, [pc, #344]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eba:	4a55      	ldr	r2, [pc, #340]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ec2:	4b53      	ldr	r3, [pc, #332]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8003ece:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003edc:	2300      	movs	r3, #0
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8003ee4:	f107 031c 	add.w	r3, r7, #28
 8003ee8:	4619      	mov	r1, r3
 8003eea:	484a      	ldr	r0, [pc, #296]	@ (8004014 <HAL_TIM_MspPostInit+0x180>)
 8003eec:	f002 fef0 	bl	8006cd0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003ef0:	e087      	b.n	8004002 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003efa:	d11d      	bne.n	8003f38 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efc:	4b44      	ldr	r3, [pc, #272]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	4a43      	ldr	r2, [pc, #268]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f08:	4b41      	ldr	r3, [pc, #260]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8003f14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f22:	2300      	movs	r3, #0
 8003f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f26:	2301      	movs	r3, #1
 8003f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8003f2a:	f107 031c 	add.w	r3, r7, #28
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4838      	ldr	r0, [pc, #224]	@ (8004014 <HAL_TIM_MspPostInit+0x180>)
 8003f32:	f002 fecd 	bl	8006cd0 <HAL_GPIO_Init>
}
 8003f36:	e064      	b.n	8004002 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a36      	ldr	r2, [pc, #216]	@ (8004018 <HAL_TIM_MspPostInit+0x184>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d11c      	bne.n	8003f7c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f42:	4b33      	ldr	r3, [pc, #204]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	4a32      	ldr	r2, [pc, #200]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4e:	4b30      	ldr	r3, [pc, #192]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8003f5a:	2310      	movs	r3, #16
 8003f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	2300      	movs	r3, #0
 8003f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8003f6e:	f107 031c 	add.w	r3, r7, #28
 8003f72:	4619      	mov	r1, r3
 8003f74:	4829      	ldr	r0, [pc, #164]	@ (800401c <HAL_TIM_MspPostInit+0x188>)
 8003f76:	f002 feab 	bl	8006cd0 <HAL_GPIO_Init>
}
 8003f7a:	e042      	b.n	8004002 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a27      	ldr	r2, [pc, #156]	@ (8004020 <HAL_TIM_MspPostInit+0x18c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d11c      	bne.n	8003fc0 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f86:	4b22      	ldr	r3, [pc, #136]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	4a21      	ldr	r2, [pc, #132]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f92:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8003fb2:	f107 031c 	add.w	r3, r7, #28
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	481a      	ldr	r0, [pc, #104]	@ (8004024 <HAL_TIM_MspPostInit+0x190>)
 8003fba:	f002 fe89 	bl	8006cd0 <HAL_GPIO_Init>
}
 8003fbe:	e020      	b.n	8004002 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a18      	ldr	r2, [pc, #96]	@ (8004028 <HAL_TIM_MspPostInit+0x194>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d11b      	bne.n	8004002 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fca:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	4a10      	ldr	r2, [pc, #64]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004010 <HAL_TIM_MspPostInit+0x17c>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8003fe2:	2340      	movs	r3, #64	@ 0x40
 8003fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003ff2:	2309      	movs	r3, #9
 8003ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8003ff6:	f107 031c 	add.w	r3, r7, #28
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	480b      	ldr	r0, [pc, #44]	@ (800402c <HAL_TIM_MspPostInit+0x198>)
 8003ffe:	f002 fe67 	bl	8006cd0 <HAL_GPIO_Init>
}
 8004002:	bf00      	nop
 8004004:	3730      	adds	r7, #48	@ 0x30
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40010000 	.word	0x40010000
 8004010:	40023800 	.word	0x40023800
 8004014:	40020000 	.word	0x40020000
 8004018:	40000400 	.word	0x40000400
 800401c:	40020400 	.word	0x40020400
 8004020:	40000c00 	.word	0x40000c00
 8004024:	40022000 	.word	0x40022000
 8004028:	40001800 	.word	0x40001800
 800402c:	40021c00 	.word	0x40021c00

08004030 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b0ae      	sub	sp, #184	@ 0xb8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004038:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004048:	f107 0320 	add.w	r3, r7, #32
 800404c:	2284      	movs	r2, #132	@ 0x84
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f015 fec9 	bl	8019de8 <memset>
  if(huart->Instance==USART1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a53      	ldr	r2, [pc, #332]	@ (80041a8 <HAL_UART_MspInit+0x178>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d15d      	bne.n	800411c <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004060:	2340      	movs	r3, #64	@ 0x40
 8004062:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004064:	2300      	movs	r3, #0
 8004066:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004068:	f107 0320 	add.w	r3, r7, #32
 800406c:	4618      	mov	r0, r3
 800406e:	f006 fb65 	bl	800a73c <HAL_RCCEx_PeriphCLKConfig>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004078:	f7ff f8a4 	bl	80031c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800407c:	4b4b      	ldr	r3, [pc, #300]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 800407e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004080:	4a4a      	ldr	r2, [pc, #296]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 8004082:	f043 0310 	orr.w	r3, r3, #16
 8004086:	6453      	str	r3, [r2, #68]	@ 0x44
 8004088:	4b48      	ldr	r3, [pc, #288]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 800408a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004094:	4b45      	ldr	r3, [pc, #276]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	4a44      	ldr	r2, [pc, #272]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a0:	4b42      	ldr	r3, [pc, #264]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ac:	4b3f      	ldr	r3, [pc, #252]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	4a3e      	ldr	r2, [pc, #248]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b8:	4b3c      	ldr	r3, [pc, #240]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ca:	2302      	movs	r3, #2
 80040cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040dc:	2307      	movs	r3, #7
 80040de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80040e2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80040e6:	4619      	mov	r1, r3
 80040e8:	4831      	ldr	r0, [pc, #196]	@ (80041b0 <HAL_UART_MspInit+0x180>)
 80040ea:	f002 fdf1 	bl	8006cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80040ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	2302      	movs	r3, #2
 80040f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004102:	2300      	movs	r3, #0
 8004104:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004108:	2307      	movs	r3, #7
 800410a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800410e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004112:	4619      	mov	r1, r3
 8004114:	4827      	ldr	r0, [pc, #156]	@ (80041b4 <HAL_UART_MspInit+0x184>)
 8004116:	f002 fddb 	bl	8006cd0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800411a:	e040      	b.n	800419e <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a25      	ldr	r2, [pc, #148]	@ (80041b8 <HAL_UART_MspInit+0x188>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d13b      	bne.n	800419e <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004126:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800412a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800412c:	2300      	movs	r3, #0
 800412e:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004130:	f107 0320 	add.w	r3, r7, #32
 8004134:	4618      	mov	r0, r3
 8004136:	f006 fb01 	bl	800a73c <HAL_RCCEx_PeriphCLKConfig>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_UART_MspInit+0x114>
      Error_Handler();
 8004140:	f7ff f840 	bl	80031c4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004144:	4b19      	ldr	r3, [pc, #100]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 8004146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004148:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 800414a:	f043 0320 	orr.w	r3, r3, #32
 800414e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004150:	4b16      	ldr	r3, [pc, #88]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 8004152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800415c:	4b13      	ldr	r3, [pc, #76]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004160:	4a12      	ldr	r2, [pc, #72]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 8004162:	f043 0304 	orr.w	r3, r3, #4
 8004166:	6313      	str	r3, [r2, #48]	@ 0x30
 8004168:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <HAL_UART_MspInit+0x17c>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004174:	23c0      	movs	r3, #192	@ 0xc0
 8004176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417a:	2302      	movs	r3, #2
 800417c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004186:	2303      	movs	r3, #3
 8004188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800418c:	2308      	movs	r3, #8
 800418e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004192:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004196:	4619      	mov	r1, r3
 8004198:	4808      	ldr	r0, [pc, #32]	@ (80041bc <HAL_UART_MspInit+0x18c>)
 800419a:	f002 fd99 	bl	8006cd0 <HAL_GPIO_Init>
}
 800419e:	bf00      	nop
 80041a0:	37b8      	adds	r7, #184	@ 0xb8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40011000 	.word	0x40011000
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40020400 	.word	0x40020400
 80041b4:	40020000 	.word	0x40020000
 80041b8:	40011400 	.word	0x40011400
 80041bc:	40020800 	.word	0x40020800

080041c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80041d4:	4b3a      	ldr	r3, [pc, #232]	@ (80042c0 <HAL_FMC_MspInit+0x100>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d16d      	bne.n	80042b8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80041dc:	4b38      	ldr	r3, [pc, #224]	@ (80042c0 <HAL_FMC_MspInit+0x100>)
 80041de:	2201      	movs	r2, #1
 80041e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80041e2:	4b38      	ldr	r3, [pc, #224]	@ (80042c4 <HAL_FMC_MspInit+0x104>)
 80041e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e6:	4a37      	ldr	r2, [pc, #220]	@ (80042c4 <HAL_FMC_MspInit+0x104>)
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80041ee:	4b35      	ldr	r3, [pc, #212]	@ (80042c4 <HAL_FMC_MspInit+0x104>)
 80041f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80041fa:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80041fe:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004200:	2302      	movs	r3, #2
 8004202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800420c:	230c      	movs	r3, #12
 800420e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	4619      	mov	r1, r3
 8004214:	482c      	ldr	r0, [pc, #176]	@ (80042c8 <HAL_FMC_MspInit+0x108>)
 8004216:	f002 fd5b 	bl	8006cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800421a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800421e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004220:	2302      	movs	r3, #2
 8004222:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004228:	2303      	movs	r3, #3
 800422a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800422c:	230c      	movs	r3, #12
 800422e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	4619      	mov	r1, r3
 8004234:	4825      	ldr	r0, [pc, #148]	@ (80042cc <HAL_FMC_MspInit+0x10c>)
 8004236:	f002 fd4b 	bl	8006cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800423a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800423e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004240:	2302      	movs	r3, #2
 8004242:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004244:	2300      	movs	r3, #0
 8004246:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004248:	2303      	movs	r3, #3
 800424a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800424c:	230c      	movs	r3, #12
 800424e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004250:	1d3b      	adds	r3, r7, #4
 8004252:	4619      	mov	r1, r3
 8004254:	481e      	ldr	r0, [pc, #120]	@ (80042d0 <HAL_FMC_MspInit+0x110>)
 8004256:	f002 fd3b 	bl	8006cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800425a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800425e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004260:	2302      	movs	r3, #2
 8004262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004268:	2303      	movs	r3, #3
 800426a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800426c:	230c      	movs	r3, #12
 800426e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	4619      	mov	r1, r3
 8004274:	4817      	ldr	r0, [pc, #92]	@ (80042d4 <HAL_FMC_MspInit+0x114>)
 8004276:	f002 fd2b 	bl	8006cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800427a:	2328      	movs	r3, #40	@ 0x28
 800427c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427e:	2302      	movs	r3, #2
 8004280:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004286:	2303      	movs	r3, #3
 8004288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800428a:	230c      	movs	r3, #12
 800428c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800428e:	1d3b      	adds	r3, r7, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4811      	ldr	r0, [pc, #68]	@ (80042d8 <HAL_FMC_MspInit+0x118>)
 8004294:	f002 fd1c 	bl	8006cd0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8004298:	2308      	movs	r3, #8
 800429a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a4:	2303      	movs	r3, #3
 80042a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80042a8:	230c      	movs	r3, #12
 80042aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 80042ac:	1d3b      	adds	r3, r7, #4
 80042ae:	4619      	mov	r1, r3
 80042b0:	480a      	ldr	r0, [pc, #40]	@ (80042dc <HAL_FMC_MspInit+0x11c>)
 80042b2:	f002 fd0d 	bl	8006cd0 <HAL_GPIO_Init>
 80042b6:	e000      	b.n	80042ba <HAL_FMC_MspInit+0xfa>
    return;
 80042b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20001520 	.word	0x20001520
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40021000 	.word	0x40021000
 80042cc:	40021800 	.word	0x40021800
 80042d0:	40020c00 	.word	0x40020c00
 80042d4:	40021400 	.word	0x40021400
 80042d8:	40021c00 	.word	0x40021c00
 80042dc:	40020800 	.word	0x40020800

080042e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80042e8:	f7ff ff6a 	bl	80041c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	@ 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2b      	ldr	r2, [pc, #172]	@ (80043b0 <HAL_SAI_MspInit+0xbc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d124      	bne.n	8004350 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8004306:	4b2b      	ldr	r3, [pc, #172]	@ (80043b4 <HAL_SAI_MspInit+0xc0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10b      	bne.n	8004326 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800430e:	4b2a      	ldr	r3, [pc, #168]	@ (80043b8 <HAL_SAI_MspInit+0xc4>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	4a29      	ldr	r2, [pc, #164]	@ (80043b8 <HAL_SAI_MspInit+0xc4>)
 8004314:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004318:	6453      	str	r3, [r2, #68]	@ 0x44
 800431a:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <HAL_SAI_MspInit+0xc4>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004326:	4b23      	ldr	r3, [pc, #140]	@ (80043b4 <HAL_SAI_MspInit+0xc0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	4a21      	ldr	r2, [pc, #132]	@ (80043b4 <HAL_SAI_MspInit+0xc0>)
 800432e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004330:	23f0      	movs	r3, #240	@ 0xf0
 8004332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004334:	2302      	movs	r3, #2
 8004336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004338:	2300      	movs	r3, #0
 800433a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433c:	2300      	movs	r3, #0
 800433e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004340:	230a      	movs	r3, #10
 8004342:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004344:	f107 0314 	add.w	r3, r7, #20
 8004348:	4619      	mov	r1, r3
 800434a:	481c      	ldr	r0, [pc, #112]	@ (80043bc <HAL_SAI_MspInit+0xc8>)
 800434c:	f002 fcc0 	bl	8006cd0 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1a      	ldr	r2, [pc, #104]	@ (80043c0 <HAL_SAI_MspInit+0xcc>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d125      	bne.n	80043a6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800435a:	4b16      	ldr	r3, [pc, #88]	@ (80043b4 <HAL_SAI_MspInit+0xc0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004362:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <HAL_SAI_MspInit+0xc4>)
 8004364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004366:	4a14      	ldr	r2, [pc, #80]	@ (80043b8 <HAL_SAI_MspInit+0xc4>)
 8004368:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800436c:	6453      	str	r3, [r2, #68]	@ 0x44
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <HAL_SAI_MspInit+0xc4>)
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800437a:	4b0e      	ldr	r3, [pc, #56]	@ (80043b4 <HAL_SAI_MspInit+0xc0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3301      	adds	r3, #1
 8004380:	4a0c      	ldr	r2, [pc, #48]	@ (80043b4 <HAL_SAI_MspInit+0xc0>)
 8004382:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800438a:	2302      	movs	r3, #2
 800438c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004396:	230a      	movs	r3, #10
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800439a:	f107 0314 	add.w	r3, r7, #20
 800439e:	4619      	mov	r1, r3
 80043a0:	4808      	ldr	r0, [pc, #32]	@ (80043c4 <HAL_SAI_MspInit+0xd0>)
 80043a2:	f002 fc95 	bl	8006cd0 <HAL_GPIO_Init>

    }
}
 80043a6:	bf00      	nop
 80043a8:	3728      	adds	r7, #40	@ 0x28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40015c04 	.word	0x40015c04
 80043b4:	20001524 	.word	0x20001524
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40022000 	.word	0x40022000
 80043c0:	40015c24 	.word	0x40015c24
 80043c4:	40021800 	.word	0x40021800

080043c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	@ 0x38
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80043d8:	4b33      	ldr	r3, [pc, #204]	@ (80044a8 <HAL_InitTick+0xe0>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043dc:	4a32      	ldr	r2, [pc, #200]	@ (80044a8 <HAL_InitTick+0xe0>)
 80043de:	f043 0310 	orr.w	r3, r3, #16
 80043e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80043e4:	4b30      	ldr	r3, [pc, #192]	@ (80044a8 <HAL_InitTick+0xe0>)
 80043e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e8:	f003 0310 	and.w	r3, r3, #16
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043f0:	f107 0210 	add.w	r2, r7, #16
 80043f4:	f107 0314 	add.w	r3, r7, #20
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f006 f96c 	bl	800a6d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800440a:	f006 f93d 	bl	800a688 <HAL_RCC_GetPCLK1Freq>
 800440e:	6378      	str	r0, [r7, #52]	@ 0x34
 8004410:	e004      	b.n	800441c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004412:	f006 f939 	bl	800a688 <HAL_RCC_GetPCLK1Freq>
 8004416:	4603      	mov	r3, r0
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800441c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441e:	4a23      	ldr	r2, [pc, #140]	@ (80044ac <HAL_InitTick+0xe4>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	0c9b      	lsrs	r3, r3, #18
 8004426:	3b01      	subs	r3, #1
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800442a:	4b21      	ldr	r3, [pc, #132]	@ (80044b0 <HAL_InitTick+0xe8>)
 800442c:	4a21      	ldr	r2, [pc, #132]	@ (80044b4 <HAL_InitTick+0xec>)
 800442e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004430:	4b1f      	ldr	r3, [pc, #124]	@ (80044b0 <HAL_InitTick+0xe8>)
 8004432:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004436:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004438:	4a1d      	ldr	r2, [pc, #116]	@ (80044b0 <HAL_InitTick+0xe8>)
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800443e:	4b1c      	ldr	r3, [pc, #112]	@ (80044b0 <HAL_InitTick+0xe8>)
 8004440:	2200      	movs	r2, #0
 8004442:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004444:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <HAL_InitTick+0xe8>)
 8004446:	2200      	movs	r2, #0
 8004448:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800444a:	4b19      	ldr	r3, [pc, #100]	@ (80044b0 <HAL_InitTick+0xe8>)
 800444c:	2200      	movs	r2, #0
 800444e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004450:	4817      	ldr	r0, [pc, #92]	@ (80044b0 <HAL_InitTick+0xe8>)
 8004452:	f008 fecc 	bl	800d1ee <HAL_TIM_Base_Init>
 8004456:	4603      	mov	r3, r0
 8004458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800445c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004460:	2b00      	cmp	r3, #0
 8004462:	d11b      	bne.n	800449c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004464:	4812      	ldr	r0, [pc, #72]	@ (80044b0 <HAL_InitTick+0xe8>)
 8004466:	f008 ff19 	bl	800d29c <HAL_TIM_Base_Start_IT>
 800446a:	4603      	mov	r3, r0
 800446c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004470:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004474:	2b00      	cmp	r3, #0
 8004476:	d111      	bne.n	800449c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004478:	2036      	movs	r0, #54	@ 0x36
 800447a:	f001 f901 	bl	8005680 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b0f      	cmp	r3, #15
 8004482:	d808      	bhi.n	8004496 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004484:	2200      	movs	r2, #0
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	2036      	movs	r0, #54	@ 0x36
 800448a:	f001 f8dd 	bl	8005648 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800448e:	4a0a      	ldr	r2, [pc, #40]	@ (80044b8 <HAL_InitTick+0xf0>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	e002      	b.n	800449c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800449c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3738      	adds	r7, #56	@ 0x38
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	431bde83 	.word	0x431bde83
 80044b0:	20001528 	.word	0x20001528
 80044b4:	40001000 	.word	0x40001000
 80044b8:	2000004c 	.word	0x2000004c

080044bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044c0:	bf00      	nop
 80044c2:	e7fd      	b.n	80044c0 <NMI_Handler+0x4>

080044c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <HardFault_Handler+0x4>

080044cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <MemManage_Handler+0x4>

080044d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <BusFault_Handler+0x4>

080044dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044e0:	bf00      	nop
 80044e2:	e7fd      	b.n	80044e0 <UsageFault_Handler+0x4>

080044e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044e8:	bf00      	nop
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80044f8:	4802      	ldr	r0, [pc, #8]	@ (8004504 <TIM6_DAC_IRQHandler+0x10>)
 80044fa:	f008 ff9e 	bl	800d43a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20001528 	.word	0x20001528

08004508 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800450c:	4802      	ldr	r0, [pc, #8]	@ (8004518 <OTG_FS_IRQHandler+0x10>)
 800450e:	f003 f89d 	bl	800764c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20009af4 	.word	0x20009af4

0800451c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004520:	4802      	ldr	r0, [pc, #8]	@ (800452c <LTDC_IRQHandler+0x10>)
 8004522:	f005 f8b7 	bl	8009694 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	20000a44 	.word	0x20000a44

08004530 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004534:	4802      	ldr	r0, [pc, #8]	@ (8004540 <DMA2D_IRQHandler+0x10>)
 8004536:	f001 fedb 	bl	80062f0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	200008ac 	.word	0x200008ac

08004544 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004548:	4802      	ldr	r0, [pc, #8]	@ (8004554 <DMA2_Stream1_IRQHandler+0x10>)
 800454a:	f001 fc11 	bl	8005d70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	200014b0 	.word	0x200014b0

08004558 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 800455c:	4b09      	ldr	r3, [pc, #36]	@ (8004584 <USART6_IRQHandler+0x2c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	2b10      	cmp	r3, #16
 8004568:	d106      	bne.n	8004578 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 800456a:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <USART6_IRQHandler+0x2c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2210      	movs	r2, #16
 8004570:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 8004572:	4804      	ldr	r0, [pc, #16]	@ (8004584 <USART6_IRQHandler+0x2c>)
 8004574:	f7fc ff9c 	bl	80014b0 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004578:	4802      	ldr	r0, [pc, #8]	@ (8004584 <USART6_IRQHandler+0x2c>)
 800457a:	f00a f9a9 	bl	800e8d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000fe4 	.word	0x20000fe4

08004588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004590:	4a14      	ldr	r2, [pc, #80]	@ (80045e4 <_sbrk+0x5c>)
 8004592:	4b15      	ldr	r3, [pc, #84]	@ (80045e8 <_sbrk+0x60>)
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800459c:	4b13      	ldr	r3, [pc, #76]	@ (80045ec <_sbrk+0x64>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80045a4:	4b11      	ldr	r3, [pc, #68]	@ (80045ec <_sbrk+0x64>)
 80045a6:	4a12      	ldr	r2, [pc, #72]	@ (80045f0 <_sbrk+0x68>)
 80045a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80045aa:	4b10      	ldr	r3, [pc, #64]	@ (80045ec <_sbrk+0x64>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4413      	add	r3, r2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d207      	bcs.n	80045c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80045b8:	f015 fc58 	bl	8019e6c <__errno>
 80045bc:	4603      	mov	r3, r0
 80045be:	220c      	movs	r2, #12
 80045c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80045c2:	f04f 33ff 	mov.w	r3, #4294967295
 80045c6:	e009      	b.n	80045dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80045c8:	4b08      	ldr	r3, [pc, #32]	@ (80045ec <_sbrk+0x64>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80045ce:	4b07      	ldr	r3, [pc, #28]	@ (80045ec <_sbrk+0x64>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4413      	add	r3, r2
 80045d6:	4a05      	ldr	r2, [pc, #20]	@ (80045ec <_sbrk+0x64>)
 80045d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045da:	68fb      	ldr	r3, [r7, #12]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	20050000 	.word	0x20050000
 80045e8:	00000400 	.word	0x00000400
 80045ec:	20001574 	.word	0x20001574
 80045f0:	2000a020 	.word	0x2000a020

080045f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045f8:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <SystemInit+0x20>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fe:	4a05      	ldr	r2, [pc, #20]	@ (8004614 <SystemInit+0x20>)
 8004600:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 800461c:	f000 f803 	bl	8004626 <TIME_Platform_GetCurrentMs>
 8004620:	4603      	mov	r3, r0
}
 8004622:	4618      	mov	r0, r3
 8004624:	bd80      	pop	{r7, pc}

08004626 <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 800462a:	f000 fc8d 	bl	8004f48 <HAL_GetTick>
 800462e:	4603      	mov	r3, r0
}
 8004630:	4618      	mov	r0, r3
 8004632:	bd80      	pop	{r7, pc}

08004634 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d102      	bne.n	800464a <LOGGER_Connect+0x16>
 8004644:	f04f 33ff 	mov.w	r3, #4294967295
 8004648:	e016      	b.n	8004678 <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 800464a:	223f      	movs	r2, #63	@ 0x3f
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	480c      	ldr	r0, [pc, #48]	@ (8004680 <LOGGER_Connect+0x4c>)
 8004650:	f015 fbd2 	bl	8019df8 <strncpy>
    current_config.server_port = port;
 8004654:	4a0b      	ldr	r2, [pc, #44]	@ (8004684 <LOGGER_Connect+0x50>)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 800465a:	6839      	ldr	r1, [r7, #0]
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f8a5 	bl	80047ac <LOGGER_Platform_Connect>
 8004662:	4603      	mov	r3, r0
 8004664:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 8004666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d102      	bne.n	8004674 <LOGGER_Connect+0x40>
        logger_connected = true;
 800466e:	4b06      	ldr	r3, [pc, #24]	@ (8004688 <LOGGER_Connect+0x54>)
 8004670:	2201      	movs	r2, #1
 8004672:	701a      	strb	r2, [r3, #0]
    }
    return status;
 8004674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000007 	.word	0x20000007
 8004684:	20000004 	.word	0x20000004
 8004688:	20001578 	.word	0x20001578

0800468c <LOGGER_Send>:
        logger_connected = false;
    }
    return status;
}

LoggerStatus LOGGER_Send(const char* message) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
    if (!logger_connected || message == NULL) return LOGGER_STATUS_ERROR;
 8004694:	4b14      	ldr	r3, [pc, #80]	@ (80046e8 <LOGGER_Send+0x5c>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f083 0301 	eor.w	r3, r3, #1
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d102      	bne.n	80046a8 <LOGGER_Send+0x1c>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d102      	bne.n	80046ae <LOGGER_Send+0x22>
 80046a8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ac:	e017      	b.n	80046de <LOGGER_Send+0x52>
    
    // Network 모듈을 통해 로그 전송 (SD카드 또는 소켓)
    if (Network_IsConnected()) {
 80046ae:	f7fc fb67 	bl	8000d80 <Network_IsConnected>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00e      	beq.n	80046d6 <LOGGER_Send+0x4a>
        int result = Network_SendBinary(message, strlen(message) + 1); // null terminator 포함
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7fb fdb3 	bl	8000224 <strlen>
 80046be:	4603      	mov	r3, r0
 80046c0:	3301      	adds	r3, #1
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fc fb11 	bl	8000cec <Network_SendBinary>
 80046ca:	60f8      	str	r0, [r7, #12]
        if (result == NETWORK_OK) {
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <LOGGER_Send+0x4a>
            return LOGGER_STATUS_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e003      	b.n	80046de <LOGGER_Send+0x52>
        }
    }
    
    // Network 모듈 사용 실패 시 기존 플랫폼 방식 사용
    return LOGGER_Platform_Send(message);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f874 	bl	80047c4 <LOGGER_Platform_Send>
 80046dc:	4603      	mov	r3, r0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20001578 	.word	0x20001578

080046ec <LOGGER_SendFormatted>:

bool LOGGER_IsConnected(void) {
    return logger_connected;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 80046ec:	b40e      	push	{r1, r2, r3}
 80046ee:	b590      	push	{r4, r7, lr}
 80046f0:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4602      	mov	r2, r0
 80046f8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 80046fc:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004700:	701a      	strb	r2, [r3, #0]
    if (level < current_config.level) return;
 8004702:	4b27      	ldr	r3, [pc, #156]	@ (80047a0 <LOGGER_SendFormatted+0xb4>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 800470a:	f2a2 2219 	subw	r2, r2, #537	@ 0x219
 800470e:	7812      	ldrb	r2, [r2, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d33c      	bcc.n	800478e <LOGGER_SendFormatted+0xa2>
    
    char buffer[512];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 8004714:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004718:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800471c:	4a21      	ldr	r2, [pc, #132]	@ (80047a4 <LOGGER_SendFormatted+0xb8>)
 800471e:	461c      	mov	r4, r3
 8004720:	4613      	mov	r3, r2
 8004722:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 레벨 문자열 추가
    int offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8004728:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 800472c:	f2a3 2319 	subw	r3, r3, #537	@ 0x219
 8004730:	781a      	ldrb	r2, [r3, #0]
 8004732:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004736:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800473a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800473e:	f107 001c 	add.w	r0, r7, #28
 8004742:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <LOGGER_SendFormatted+0xbc>)
 8004744:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004748:	f015 faba 	bl	8019cc0 <sniprintf>
 800474c:	f8c7 021c 	str.w	r0, [r7, #540]	@ 0x21c
    
    // 가변 인수 처리
    va_list args;
    va_start(args, format);
 8004750:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8004754:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004758:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800475c:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer + offset, sizeof(buffer) - offset, format, args);
 800475e:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 8004762:	f107 021c 	add.w	r2, r7, #28
 8004766:	18d0      	adds	r0, r2, r3
 8004768:	f8d7 321c 	ldr.w	r3, [r7, #540]	@ 0x21c
 800476c:	f5c3 7100 	rsb	r1, r3, #512	@ 0x200
 8004770:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8004774:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800477e:	f015 fb25 	bl	8019dcc <vsniprintf>
    va_end(args);
    
    LOGGER_Send(buffer);
 8004782:	f107 031c 	add.w	r3, r7, #28
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff ff80 	bl	800468c <LOGGER_Send>
 800478c:	e000      	b.n	8004790 <LOGGER_SendFormatted+0xa4>
    if (level < current_config.level) return;
 800478e:	bf00      	nop
}
 8004790:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8004794:	46bd      	mov	sp, r7
 8004796:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800479a:	b003      	add	sp, #12
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	20000004 	.word	0x20000004
 80047a4:	0801ba54 	.word	0x0801ba54
 80047a8:	0801ba64 	.word	0x0801ba64

080047ac <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d102      	bne.n	80047d8 <LOGGER_Platform_Send+0x14>
 80047d2:	f04f 33ff 	mov.w	r3, #4294967295
 80047d6:	e01c      	b.n	8004812 <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fb fd23 	bl	8000224 <strlen>
 80047de:	4603      	mov	r3, r0
 80047e0:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	dd12      	ble.n	800480e <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	480a      	ldr	r0, [pc, #40]	@ (800481c <LOGGER_Platform_Send+0x58>)
 80047f4:	f009 fe44 	bl	800e480 <HAL_UART_Transmit>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d107      	bne.n	800480e <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80047fe:	2364      	movs	r3, #100	@ 0x64
 8004800:	2202      	movs	r2, #2
 8004802:	4907      	ldr	r1, [pc, #28]	@ (8004820 <LOGGER_Platform_Send+0x5c>)
 8004804:	4805      	ldr	r0, [pc, #20]	@ (800481c <LOGGER_Platform_Send+0x58>)
 8004806:	f009 fe3b 	bl	800e480 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e001      	b.n	8004812 <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 800480e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	20000f5c 	.word	0x20000f5c
 8004820:	0801ba68 	.word	0x0801ba68

08004824 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d105      	bne.n	800483e <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8004832:	4913      	ldr	r1, [pc, #76]	@ (8004880 <UART_Connect+0x5c>)
 8004834:	2003      	movs	r0, #3
 8004836:	f7ff ff59 	bl	80046ec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e01c      	b.n	8004878 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	4910      	ldr	r1, [pc, #64]	@ (8004884 <UART_Connect+0x60>)
 8004842:	2001      	movs	r0, #1
 8004844:	f7ff ff52 	bl	80046ec <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8fb 	bl	8004a44 <UART_Platform_Connect>
 800484e:	4603      	mov	r3, r0
 8004850:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8004852:	7bfb      	ldrb	r3, [r7, #15]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d108      	bne.n	800486a <UART_Connect+0x46>
        uart_connected = true;
 8004858:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <UART_Connect+0x64>)
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	490a      	ldr	r1, [pc, #40]	@ (800488c <UART_Connect+0x68>)
 8004862:	2001      	movs	r0, #1
 8004864:	f7ff ff42 	bl	80046ec <LOGGER_SendFormatted>
 8004868:	e005      	b.n	8004876 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	4908      	ldr	r1, [pc, #32]	@ (8004890 <UART_Connect+0x6c>)
 8004870:	2003      	movs	r0, #3
 8004872:	f7ff ff3b 	bl	80046ec <LOGGER_SendFormatted>
    }

    return status;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	0801ba6c 	.word	0x0801ba6c
 8004884:	0801ba90 	.word	0x0801ba90
 8004888:	20001579 	.word	0x20001579
 800488c:	0801baa8 	.word	0x0801baa8
 8004890:	0801bacc 	.word	0x0801bacc

08004894 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 800489c:	4b19      	ldr	r3, [pc, #100]	@ (8004904 <UART_Send+0x70>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	f083 0301 	eor.w	r3, r3, #1
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 80048aa:	4917      	ldr	r1, [pc, #92]	@ (8004908 <UART_Send+0x74>)
 80048ac:	2003      	movs	r0, #3
 80048ae:	f7ff ff1d 	bl	80046ec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e022      	b.n	80048fc <UART_Send+0x68>
    }

    if (data == NULL) {
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 80048bc:	4913      	ldr	r1, [pc, #76]	@ (800490c <UART_Send+0x78>)
 80048be:	2003      	movs	r0, #3
 80048c0:	f7ff ff14 	bl	80046ec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e019      	b.n	80048fc <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4911      	ldr	r1, [pc, #68]	@ (8004910 <UART_Send+0x7c>)
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7ff ff0d 	bl	80046ec <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f99e 	bl	8004c14 <UART_Platform_Send>
 80048d8:	4603      	mov	r3, r0
 80048da:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d105      	bne.n	80048ee <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	490b      	ldr	r1, [pc, #44]	@ (8004914 <UART_Send+0x80>)
 80048e6:	2000      	movs	r0, #0
 80048e8:	f7ff ff00 	bl	80046ec <LOGGER_SendFormatted>
 80048ec:	e005      	b.n	80048fa <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 80048ee:	7bfb      	ldrb	r3, [r7, #15]
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	4909      	ldr	r1, [pc, #36]	@ (8004918 <UART_Send+0x84>)
 80048f4:	2003      	movs	r0, #3
 80048f6:	f7ff fef9 	bl	80046ec <LOGGER_SendFormatted>
    }

    return status;
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20001579 	.word	0x20001579
 8004908:	0801baf8 	.word	0x0801baf8
 800490c:	0801bb1c 	.word	0x0801bb1c
 8004910:	0801bb3c 	.word	0x0801bb3c
 8004914:	0801bb54 	.word	0x0801bb54
 8004918:	0801bb70 	.word	0x0801bb70

0800491c <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8004928:	4b22      	ldr	r3, [pc, #136]	@ (80049b4 <UART_Receive+0x98>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	f083 0301 	eor.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8004936:	4920      	ldr	r1, [pc, #128]	@ (80049b8 <UART_Receive+0x9c>)
 8004938:	2003      	movs	r0, #3
 800493a:	f7ff fed7 	bl	80046ec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e034      	b.n	80049ac <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <UART_Receive+0x38>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	dd02      	ble.n	8004954 <UART_Receive+0x38>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8004954:	4919      	ldr	r1, [pc, #100]	@ (80049bc <UART_Receive+0xa0>)
 8004956:	2003      	movs	r0, #3
 8004958:	f7ff fec8 	bl	80046ec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e025      	b.n	80049ac <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	4917      	ldr	r1, [pc, #92]	@ (80049c0 <UART_Receive+0xa4>)
 8004964:	2000      	movs	r0, #0
 8004966:	f7ff fec1 	bl	80046ec <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f98c 	bl	8004c8c <UART_Platform_Receive>
 8004974:	4603      	mov	r3, r0
 8004976:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d107      	bne.n	800498e <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	490f      	ldr	r1, [pc, #60]	@ (80049c4 <UART_Receive+0xa8>)
 8004986:	2000      	movs	r0, #0
 8004988:	f7ff feb0 	bl	80046ec <LOGGER_SendFormatted>
 800498c:	e00d      	b.n	80049aa <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	2b02      	cmp	r3, #2
 8004992:	d104      	bne.n	800499e <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8004994:	490c      	ldr	r1, [pc, #48]	@ (80049c8 <UART_Receive+0xac>)
 8004996:	2000      	movs	r0, #0
 8004998:	f7ff fea8 	bl	80046ec <LOGGER_SendFormatted>
 800499c:	e005      	b.n	80049aa <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	461a      	mov	r2, r3
 80049a2:	490a      	ldr	r1, [pc, #40]	@ (80049cc <UART_Receive+0xb0>)
 80049a4:	2003      	movs	r0, #3
 80049a6:	f7ff fea1 	bl	80046ec <LOGGER_SendFormatted>
    }

    return status;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20001579 	.word	0x20001579
 80049b8:	0801bb94 	.word	0x0801bb94
 80049bc:	0801bbbc 	.word	0x0801bbbc
 80049c0:	0801bbe8 	.word	0x0801bbe8
 80049c4:	0801bc10 	.word	0x0801bc10
 80049c8:	0801bc30 	.word	0x0801bc30
 80049cc:	0801bc48 	.word	0x0801bc48

080049d0 <UART_IsConnected>:
    LOG_DEBUG("[UART] Configuration saved (not connected)");
    return UART_STATUS_OK;
}

bool UART_IsConnected(void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
    return uart_connected;
 80049d4:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <UART_IsConnected+0x14>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20001579 	.word	0x20001579

080049e8 <flush_rx_buffer>:
// 전역 변수
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 80049f2:	e007      	b.n	8004a04 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 80049f4:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <flush_rx_buffer+0x58>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3301      	adds	r3, #1
 8004a02:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8004a04:	4b0e      	ldr	r3, [pc, #56]	@ (8004a40 <flush_rx_buffer+0x58>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d106      	bne.n	8004a20 <flush_rx_buffer+0x38>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b63      	cmp	r3, #99	@ 0x63
 8004a16:	dded      	ble.n	80049f4 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004a18:	e002      	b.n	8004a20 <flush_rx_buffer+0x38>
        flush_count++;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8004a20:	1cf9      	adds	r1, r7, #3
 8004a22:	2301      	movs	r3, #1
 8004a24:	2201      	movs	r2, #1
 8004a26:	4806      	ldr	r0, [pc, #24]	@ (8004a40 <flush_rx_buffer+0x58>)
 8004a28:	f009 fdb3 	bl	800e592 <HAL_UART_Receive>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d102      	bne.n	8004a38 <flush_rx_buffer+0x50>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b63      	cmp	r3, #99	@ 0x63
 8004a36:	ddf0      	ble.n	8004a1a <flush_rx_buffer+0x32>
    }
}
 8004a38:	bf00      	nop
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20000fe4 	.word	0x20000fe4

08004a44 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8004a4c:	4b5b      	ldr	r3, [pc, #364]	@ (8004bbc <UART_Platform_Connect+0x178>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8004a52:	4b5b      	ldr	r3, [pc, #364]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004a54:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004a56:	4b5a      	ldr	r3, [pc, #360]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a5c:	4959      	ldr	r1, [pc, #356]	@ (8004bc4 <UART_Platform_Connect+0x180>)
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f7ff fe44 	bl	80046ec <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8004a64:	4b56      	ldr	r3, [pc, #344]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00e      	beq.n	8004a8a <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8004a6c:	4956      	ldr	r1, [pc, #344]	@ (8004bc8 <UART_Platform_Connect+0x184>)
 8004a6e:	2001      	movs	r0, #1
 8004a70:	f7ff fe3c 	bl	80046ec <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8004a74:	4b52      	ldr	r3, [pc, #328]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4952      	ldr	r1, [pc, #328]	@ (8004bcc <UART_Platform_Connect+0x188>)
 8004a82:	2001      	movs	r0, #1
 8004a84:	f7ff fe32 	bl	80046ec <LOGGER_SendFormatted>
 8004a88:	e018      	b.n	8004abc <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8004a8a:	4951      	ldr	r1, [pc, #324]	@ (8004bd0 <UART_Platform_Connect+0x18c>)
 8004a8c:	2003      	movs	r0, #3
 8004a8e:	f7ff fe2d 	bl	80046ec <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8004a92:	4b4b      	ldr	r3, [pc, #300]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004a94:	4a4f      	ldr	r2, [pc, #316]	@ (8004bd4 <UART_Platform_Connect+0x190>)
 8004a96:	675a      	str	r2, [r3, #116]	@ 0x74
 8004a98:	4b4e      	ldr	r3, [pc, #312]	@ (8004bd4 <UART_Platform_Connect+0x190>)
 8004a9a:	4a49      	ldr	r2, [pc, #292]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8004a9e:	4b48      	ldr	r3, [pc, #288]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d004      	beq.n	8004ab0 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8004aa6:	494c      	ldr	r1, [pc, #304]	@ (8004bd8 <UART_Platform_Connect+0x194>)
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	f7ff fe1f 	bl	80046ec <LOGGER_SendFormatted>
 8004aae:	e005      	b.n	8004abc <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8004ab0:	494a      	ldr	r1, [pc, #296]	@ (8004bdc <UART_Platform_Connect+0x198>)
 8004ab2:	2003      	movs	r0, #3
 8004ab4:	f7ff fe1a 	bl	80046ec <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e07a      	b.n	8004bb2 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8004abc:	4b48      	ldr	r3, [pc, #288]	@ (8004be0 <UART_Platform_Connect+0x19c>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8004ac4:	483e      	ldr	r0, [pc, #248]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004ac6:	f009 fe70 	bl	800e7aa <HAL_UART_DMAStop>
        dma_receiving = false;
 8004aca:	4b45      	ldr	r3, [pc, #276]	@ (8004be0 <UART_Platform_Connect+0x19c>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8004ad0:	4944      	ldr	r1, [pc, #272]	@ (8004be4 <UART_Platform_Connect+0x1a0>)
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	f7ff fe0a 	bl	80046ec <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8004ad8:	4b39      	ldr	r3, [pc, #228]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004ada:	2220      	movs	r2, #32
 8004adc:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8004ade:	4b38      	ldr	r3, [pc, #224]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8004ae6:	4b36      	ldr	r3, [pc, #216]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d026      	beq.n	8004b3c <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8004aee:	4b34      	ldr	r3, [pc, #208]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d01a      	beq.n	8004b32 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8004afc:	493a      	ldr	r1, [pc, #232]	@ (8004be8 <UART_Platform_Connect+0x1a4>)
 8004afe:	2001      	movs	r0, #1
 8004b00:	f7ff fdf4 	bl	80046ec <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8004b04:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004b06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 ffe1 	bl	8005ad0 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8004b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b12:	4618      	mov	r0, r3
 8004b14:	f000 ff2e 	bl	8005974 <HAL_DMA_Init>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8004b1e:	4933      	ldr	r1, [pc, #204]	@ (8004bec <UART_Platform_Connect+0x1a8>)
 8004b20:	2003      	movs	r0, #3
 8004b22:	f7ff fde3 	bl	80046ec <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e043      	b.n	8004bb2 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8004b2a:	4931      	ldr	r1, [pc, #196]	@ (8004bf0 <UART_Platform_Connect+0x1ac>)
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	f7ff fddd 	bl	80046ec <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004b32:	4b23      	ldr	r3, [pc, #140]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8004b3c:	f7ff ff54 	bl	80049e8 <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8004b40:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf4 <UART_Platform_Connect+0x1b0>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8004b46:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf8 <UART_Platform_Connect+0x1b4>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8004b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bfc <UART_Platform_Connect+0x1b8>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8004b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b56:	2100      	movs	r1, #0
 8004b58:	4829      	ldr	r0, [pc, #164]	@ (8004c00 <UART_Platform_Connect+0x1bc>)
 8004b5a:	f015 f945 	bl	8019de8 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8004b5e:	4929      	ldr	r1, [pc, #164]	@ (8004c04 <UART_Platform_Connect+0x1c0>)
 8004b60:	2001      	movs	r0, #1
 8004b62:	f7ff fdc3 	bl	80046ec <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004b66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b6a:	4925      	ldr	r1, [pc, #148]	@ (8004c00 <UART_Platform_Connect+0x1bc>)
 8004b6c:	4814      	ldr	r0, [pc, #80]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004b6e:	f009 fdd8 	bl	800e722 <HAL_UART_Receive_DMA>
 8004b72:	4603      	mov	r3, r0
 8004b74:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8004b7c:	4b18      	ldr	r3, [pc, #96]	@ (8004be0 <UART_Platform_Connect+0x19c>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8004b82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b86:	4920      	ldr	r1, [pc, #128]	@ (8004c08 <UART_Platform_Connect+0x1c4>)
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f7ff fdaf 	bl	80046ec <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e00f      	b.n	8004bb2 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8004b92:	7bfb      	ldrb	r3, [r7, #15]
 8004b94:	461a      	mov	r2, r3
 8004b96:	491d      	ldr	r1, [pc, #116]	@ (8004c0c <UART_Platform_Connect+0x1c8>)
 8004b98:	2003      	movs	r0, #3
 8004b9a:	f7ff fda7 	bl	80046ec <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8004b9e:	4b08      	ldr	r3, [pc, #32]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004ba0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004ba2:	4b07      	ldr	r3, [pc, #28]	@ (8004bc0 <UART_Platform_Connect+0x17c>)
 8004ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba8:	4919      	ldr	r1, [pc, #100]	@ (8004c10 <UART_Platform_Connect+0x1cc>)
 8004baa:	2003      	movs	r0, #3
 8004bac:	f7ff fd9e 	bl	80046ec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004bb0:	2301      	movs	r3, #1
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	2000157a 	.word	0x2000157a
 8004bc0:	20000fe4 	.word	0x20000fe4
 8004bc4:	0801be44 	.word	0x0801be44
 8004bc8:	0801be70 	.word	0x0801be70
 8004bcc:	0801be98 	.word	0x0801be98
 8004bd0:	0801beb4 	.word	0x0801beb4
 8004bd4:	200014b0 	.word	0x200014b0
 8004bd8:	0801bef0 	.word	0x0801bef0
 8004bdc:	0801bf1c 	.word	0x0801bf1c
 8004be0:	2000157b 	.word	0x2000157b
 8004be4:	0801bf48 	.word	0x0801bf48
 8004be8:	0801bf74 	.word	0x0801bf74
 8004bec:	0801bfa4 	.word	0x0801bfa4
 8004bf0:	0801bfd0 	.word	0x0801bfd0
 8004bf4:	20001510 	.word	0x20001510
 8004bf8:	20001511 	.word	0x20001511
 8004bfc:	20001512 	.word	0x20001512
 8004c00:	200010a8 	.word	0x200010a8
 8004c04:	0801bffc 	.word	0x0801bffc
 8004c08:	0801c024 	.word	0x0801c024
 8004c0c:	0801c068 	.word	0x0801c068
 8004c10:	0801c0a4 	.word	0x0801c0a4

08004c14 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d006      	beq.n	8004c30 <UART_Platform_Send+0x1c>
 8004c22:	4b17      	ldr	r3, [pc, #92]	@ (8004c80 <UART_Platform_Send+0x6c>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	f083 0301 	eor.w	r3, r3, #1
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <UART_Platform_Send+0x20>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e021      	b.n	8004c78 <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fb faf5 	bl	8000224 <strlen>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <UART_Platform_Send+0x34>
 8004c44:	2300      	movs	r3, #0
 8004c46:	e017      	b.n	8004c78 <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8004c48:	f7ff fece 	bl	80049e8 <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	480b      	ldr	r0, [pc, #44]	@ (8004c84 <UART_Platform_Send+0x70>)
 8004c58:	f009 fc12 	bl	800e480 <HAL_UART_Transmit>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8004c60:	7afb      	ldrb	r3, [r7, #11]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	e006      	b.n	8004c78 <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8004c6a:	7afb      	ldrb	r3, [r7, #11]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	4906      	ldr	r1, [pc, #24]	@ (8004c88 <UART_Platform_Send+0x74>)
 8004c70:	2003      	movs	r0, #3
 8004c72:	f7ff fd3b 	bl	80046ec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004c76:	2301      	movs	r3, #1
    }
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	2000157a 	.word	0x2000157a
 8004c84:	20000fe4 	.word	0x20000fe4
 8004c88:	0801c104 	.word	0x0801c104

08004c8c <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	@ 0x28
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <UART_Platform_Receive+0x26>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d006      	beq.n	8004cb2 <UART_Platform_Receive+0x26>
 8004ca4:	4b74      	ldr	r3, [pc, #464]	@ (8004e78 <UART_Platform_Receive+0x1ec>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	f083 0301 	eor.w	r3, r3, #1
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e0dc      	b.n	8004e70 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	dc04      	bgt.n	8004cc6 <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e0d4      	b.n	8004e70 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8004ccc:	4b6b      	ldr	r3, [pc, #428]	@ (8004e7c <UART_Platform_Receive+0x1f0>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	f083 0301 	eor.w	r3, r3, #1
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0c8      	b.n	8004e70 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8004cde:	4b68      	ldr	r3, [pc, #416]	@ (8004e80 <UART_Platform_Receive+0x1f4>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8004ce8:	4b65      	ldr	r3, [pc, #404]	@ (8004e80 <UART_Platform_Receive+0x1f4>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8004cee:	4965      	ldr	r1, [pc, #404]	@ (8004e84 <UART_Platform_Receive+0x1f8>)
 8004cf0:	2002      	movs	r0, #2
 8004cf2:	f7ff fcfb 	bl	80046ec <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0ba      	b.n	8004e70 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8004cfa:	4b63      	ldr	r3, [pc, #396]	@ (8004e88 <UART_Platform_Receive+0x1fc>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 80b4 	beq.w	8004e6e <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8004d06:	4b60      	ldr	r3, [pc, #384]	@ (8004e88 <UART_Platform_Receive+0x1fc>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8004d0c:	4b5f      	ldr	r3, [pc, #380]	@ (8004e8c <UART_Platform_Receive+0x200>)
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	837b      	strh	r3, [r7, #26]
        LOG_INFO("[UART_STM32] DMA received %d bytes", received_length);
 8004d12:	8b7b      	ldrh	r3, [r7, #26]
 8004d14:	461a      	mov	r2, r3
 8004d16:	495e      	ldr	r1, [pc, #376]	@ (8004e90 <UART_Platform_Receive+0x204>)
 8004d18:	2001      	movs	r0, #1
 8004d1a:	f7ff fce7 	bl	80046ec <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8004d1e:	8b7b      	ldrh	r3, [r7, #26]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 809e 	beq.w	8004e62 <UART_Platform_Receive+0x1d6>
 8004d26:	8b7b      	ldrh	r3, [r7, #26]
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	f340 8099 	ble.w	8004e62 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8004d30:	8b7b      	ldrh	r3, [r7, #26]
 8004d32:	461a      	mov	r2, r3
 8004d34:	4957      	ldr	r1, [pc, #348]	@ (8004e94 <UART_Platform_Receive+0x208>)
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f015 f8c4 	bl	8019ec4 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8004d3c:	8b7b      	ldrh	r3, [r7, #26]
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 8004d46:	8b7a      	ldrh	r2, [r7, #26]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_INFO("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8004d4c:	8b7a      	ldrh	r2, [r7, #26]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	4951      	ldr	r1, [pc, #324]	@ (8004e98 <UART_Platform_Receive+0x20c>)
 8004d52:	2001      	movs	r0, #1
 8004d54:	f7ff fcca 	bl	80046ec <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 8004d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	484d      	ldr	r0, [pc, #308]	@ (8004e94 <UART_Platform_Receive+0x208>)
 8004d60:	f015 f842 	bl	8019de8 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8004d64:	484d      	ldr	r0, [pc, #308]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004d66:	f009 fd20 	bl	800e7aa <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 8004d6a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8004d72:	4b4a      	ldr	r3, [pc, #296]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2202      	movs	r2, #2
 8004d78:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 8004d7a:	4b48      	ldr	r3, [pc, #288]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2204      	movs	r2, #4
 8004d80:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8004d82:	4b46      	ldr	r3, [pc, #280]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2208      	movs	r2, #8
 8004d88:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 8004d8a:	4b44      	ldr	r3, [pc, #272]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8004d92:	4b42      	ldr	r3, [pc, #264]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d025      	beq.n	8004de6 <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 8004d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d9e:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004da0:	e00b      	b.n	8004dba <UART_Platform_Receive+0x12e>
                    timeout--;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e002      	b.n	8004db4 <UART_Platform_Receive+0x128>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	3301      	adds	r3, #1
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b63      	cmp	r3, #99	@ 0x63
 8004db8:	ddf9      	ble.n	8004dae <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8004dba:	4b38      	ldr	r3, [pc, #224]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d002      	beq.n	8004dce <UART_Platform_Receive+0x142>
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	dce9      	bgt.n	8004da2 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d108      	bne.n	8004de6 <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8004dd4:	4932      	ldr	r1, [pc, #200]	@ (8004ea0 <UART_Platform_Receive+0x214>)
 8004dd6:	2002      	movs	r0, #2
 8004dd8:	f7ff fc88 	bl	80046ec <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8004ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004dde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 8004de6:	4b2d      	ldr	r3, [pc, #180]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 8004dee:	4b2b      	ldr	r3, [pc, #172]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004df0:	2220      	movs	r2, #32
 8004df2:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e002      	b.n	8004e00 <UART_Platform_Receive+0x174>
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004e06:	4293      	cmp	r3, r2
 8004e08:	ddf7      	ble.n	8004dfa <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e0e:	4921      	ldr	r1, [pc, #132]	@ (8004e94 <UART_Platform_Receive+0x208>)
 8004e10:	4822      	ldr	r0, [pc, #136]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004e12:	f009 fc86 	bl	800e722 <HAL_UART_Receive_DMA>
 8004e16:	4603      	mov	r3, r0
 8004e18:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 8004e1a:	7e7b      	ldrb	r3, [r7, #25]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d104      	bne.n	8004e2a <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 8004e20:	4920      	ldr	r1, [pc, #128]	@ (8004ea4 <UART_Platform_Receive+0x218>)
 8004e22:	2000      	movs	r0, #0
 8004e24:	f7ff fc62 	bl	80046ec <LOGGER_SendFormatted>
 8004e28:	e019      	b.n	8004e5e <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 8004e2a:	7e7a      	ldrb	r2, [r7, #25]
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004e2e:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 8004e30:	4b1a      	ldr	r3, [pc, #104]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	491b      	ldr	r1, [pc, #108]	@ (8004ea8 <UART_Platform_Receive+0x21c>)
 8004e3c:	2002      	movs	r0, #2
 8004e3e:	f7ff fc55 	bl	80046ec <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8004e42:	4b16      	ldr	r3, [pc, #88]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 8004e4a:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <UART_Platform_Receive+0x210>)
 8004e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	4915      	ldr	r1, [pc, #84]	@ (8004eac <UART_Platform_Receive+0x220>)
 8004e58:	2002      	movs	r0, #2
 8004e5a:	f7ff fc47 	bl	80046ec <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	e006      	b.n	8004e70 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8004e62:	8b7a      	ldrh	r2, [r7, #26]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	4912      	ldr	r1, [pc, #72]	@ (8004eb0 <UART_Platform_Receive+0x224>)
 8004e68:	2002      	movs	r0, #2
 8004e6a:	f7ff fc3f 	bl	80046ec <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8004e6e:	2302      	movs	r3, #2
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3720      	adds	r7, #32
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	2000157a 	.word	0x2000157a
 8004e7c:	2000157b 	.word	0x2000157b
 8004e80:	20001511 	.word	0x20001511
 8004e84:	0801c13c 	.word	0x0801c13c
 8004e88:	20001510 	.word	0x20001510
 8004e8c:	20001512 	.word	0x20001512
 8004e90:	0801c16c 	.word	0x0801c16c
 8004e94:	200010a8 	.word	0x200010a8
 8004e98:	0801c190 	.word	0x0801c190
 8004e9c:	20000fe4 	.word	0x20000fe4
 8004ea0:	0801c1bc 	.word	0x0801c1bc
 8004ea4:	0801c1f8 	.word	0x0801c1f8
 8004ea8:	0801c228 	.word	0x0801c228
 8004eac:	0801c270 	.word	0x0801c270
 8004eb0:	0801c28c 	.word	0x0801c28c

08004eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004eb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004eec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004eb8:	f7ff fb9c 	bl	80045f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ebc:	480c      	ldr	r0, [pc, #48]	@ (8004ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ebe:	490d      	ldr	r1, [pc, #52]	@ (8004ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ec4:	e002      	b.n	8004ecc <LoopCopyDataInit>

08004ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004eca:	3304      	adds	r3, #4

08004ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ed0:	d3f9      	bcc.n	8004ec6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8004efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004ed4:	4c0a      	ldr	r4, [pc, #40]	@ (8004f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ed8:	e001      	b.n	8004ede <LoopFillZerobss>

08004eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004edc:	3204      	adds	r2, #4

08004ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ee0:	d3fb      	bcc.n	8004eda <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004ee2:	f014 ffc9 	bl	8019e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ee6:	f7fc fb77 	bl	80015d8 <main>
  bx  lr    
 8004eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004eec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ef4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004ef8:	0801c458 	.word	0x0801c458
  ldr r2, =_sbss
 8004efc:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8004f00:	2000a01c 	.word	0x2000a01c

08004f04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f04:	e7fe      	b.n	8004f04 <ADC_IRQHandler>

08004f06 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f0a:	2003      	movs	r0, #3
 8004f0c:	f000 fb91 	bl	8005632 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7ff fa59 	bl	80043c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f16:	f7fe f9bb 	bl	8003290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f24:	4b06      	ldr	r3, [pc, #24]	@ (8004f40 <HAL_IncTick+0x20>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4b06      	ldr	r3, [pc, #24]	@ (8004f44 <HAL_IncTick+0x24>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4413      	add	r3, r2
 8004f30:	4a04      	ldr	r2, [pc, #16]	@ (8004f44 <HAL_IncTick+0x24>)
 8004f32:	6013      	str	r3, [r2, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	20000050 	.word	0x20000050
 8004f44:	2000157c 	.word	0x2000157c

08004f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f4c:	4b03      	ldr	r3, [pc, #12]	@ (8004f5c <HAL_GetTick+0x14>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	2000157c 	.word	0x2000157c

08004f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f68:	f7ff ffee 	bl	8004f48 <HAL_GetTick>
 8004f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d005      	beq.n	8004f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <HAL_Delay+0x44>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f86:	bf00      	nop
 8004f88:	f7ff ffde 	bl	8004f48 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d8f7      	bhi.n	8004f88 <HAL_Delay+0x28>
  {
  }
}
 8004f98:	bf00      	nop
 8004f9a:	bf00      	nop
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000050 	.word	0x20000050

08004fa8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e031      	b.n	8005022 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fe f98a 	bl	80032e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fea:	4b10      	ldr	r3, [pc, #64]	@ (800502c <HAL_ADC_Init+0x84>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	f043 0202 	orr.w	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f974 	bl	80052e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f023 0303 	bic.w	r3, r3, #3
 800500a:	f043 0201 	orr.w	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	641a      	str	r2, [r3, #64]	@ 0x40
 8005012:	e001      	b.n	8005018 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	ffffeefd 	.word	0xffffeefd

08005030 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_ADC_ConfigChannel+0x1c>
 8005048:	2302      	movs	r3, #2
 800504a:	e13a      	b.n	80052c2 <HAL_ADC_ConfigChannel+0x292>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b09      	cmp	r3, #9
 800505a:	d93a      	bls.n	80050d2 <HAL_ADC_ConfigChannel+0xa2>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005064:	d035      	beq.n	80050d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68d9      	ldr	r1, [r3, #12]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	461a      	mov	r2, r3
 8005074:	4613      	mov	r3, r2
 8005076:	005b      	lsls	r3, r3, #1
 8005078:	4413      	add	r3, r2
 800507a:	3b1e      	subs	r3, #30
 800507c:	2207      	movs	r2, #7
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43da      	mvns	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	400a      	ands	r2, r1
 800508a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a8f      	ldr	r2, [pc, #572]	@ (80052d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d10a      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68d9      	ldr	r1, [r3, #12]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	061a      	lsls	r2, r3, #24
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050aa:	e039      	b.n	8005120 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68d9      	ldr	r1, [r3, #12]
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	4618      	mov	r0, r3
 80050be:	4603      	mov	r3, r0
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	4403      	add	r3, r0
 80050c4:	3b1e      	subs	r3, #30
 80050c6:	409a      	lsls	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050d0:	e026      	b.n	8005120 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6919      	ldr	r1, [r3, #16]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	4613      	mov	r3, r2
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	4413      	add	r3, r2
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2207      	movs	r2, #7
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43da      	mvns	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	400a      	ands	r2, r1
 80050f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6919      	ldr	r1, [r3, #16]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	4618      	mov	r0, r3
 800510c:	4603      	mov	r3, r0
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4403      	add	r3, r0
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	409a      	lsls	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b06      	cmp	r3, #6
 8005126:	d824      	bhi.n	8005172 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	3b05      	subs	r3, #5
 800513a:	221f      	movs	r2, #31
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43da      	mvns	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	400a      	ands	r2, r1
 8005148:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	4618      	mov	r0, r3
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	4613      	mov	r3, r2
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	3b05      	subs	r3, #5
 8005164:	fa00 f203 	lsl.w	r2, r0, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	430a      	orrs	r2, r1
 800516e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005170:	e04c      	b.n	800520c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2b0c      	cmp	r3, #12
 8005178:	d824      	bhi.n	80051c4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	3b23      	subs	r3, #35	@ 0x23
 800518c:	221f      	movs	r2, #31
 800518e:	fa02 f303 	lsl.w	r3, r2, r3
 8005192:	43da      	mvns	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	400a      	ands	r2, r1
 800519a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	4618      	mov	r0, r3
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	3b23      	subs	r3, #35	@ 0x23
 80051b6:	fa00 f203 	lsl.w	r2, r0, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80051c2:	e023      	b.n	800520c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	3b41      	subs	r3, #65	@ 0x41
 80051d6:	221f      	movs	r2, #31
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43da      	mvns	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	400a      	ands	r2, r1
 80051e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	4618      	mov	r0, r3
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	3b41      	subs	r3, #65	@ 0x41
 8005200:	fa00 f203 	lsl.w	r2, r0, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a30      	ldr	r2, [pc, #192]	@ (80052d4 <HAL_ADC_ConfigChannel+0x2a4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d10a      	bne.n	800522c <HAL_ADC_ConfigChannel+0x1fc>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800521e:	d105      	bne.n	800522c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005220:	4b2d      	ldr	r3, [pc, #180]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4a2c      	ldr	r2, [pc, #176]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005226:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800522a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a28      	ldr	r2, [pc, #160]	@ (80052d4 <HAL_ADC_ConfigChannel+0x2a4>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d10f      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x226>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b12      	cmp	r3, #18
 800523c:	d10b      	bne.n	8005256 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800523e:	4b26      	ldr	r3, [pc, #152]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	4a25      	ldr	r2, [pc, #148]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005244:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005248:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800524a:	4b23      	ldr	r3, [pc, #140]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4a22      	ldr	r2, [pc, #136]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005250:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005254:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1e      	ldr	r2, [pc, #120]	@ (80052d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d12b      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x288>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1a      	ldr	r2, [pc, #104]	@ (80052d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <HAL_ADC_ConfigChannel+0x242>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b11      	cmp	r3, #17
 8005270:	d122      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005272:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4a18      	ldr	r2, [pc, #96]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005278:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800527c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800527e:	4b16      	ldr	r3, [pc, #88]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4a15      	ldr	r2, [pc, #84]	@ (80052d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8005284:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005288:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a10      	ldr	r2, [pc, #64]	@ (80052d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d111      	bne.n	80052b8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005294:	4b11      	ldr	r3, [pc, #68]	@ (80052dc <HAL_ADC_ConfigChannel+0x2ac>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a11      	ldr	r2, [pc, #68]	@ (80052e0 <HAL_ADC_ConfigChannel+0x2b0>)
 800529a:	fba2 2303 	umull	r2, r3, r2, r3
 800529e:	0c9a      	lsrs	r2, r3, #18
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80052aa:	e002      	b.n	80052b2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1f9      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	10000012 	.word	0x10000012
 80052d4:	40012000 	.word	0x40012000
 80052d8:	40012300 	.word	0x40012300
 80052dc:	20000000 	.word	0x20000000
 80052e0:	431bde83 	.word	0x431bde83

080052e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80052ec:	4b78      	ldr	r3, [pc, #480]	@ (80054d0 <ADC_Init+0x1ec>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a77      	ldr	r2, [pc, #476]	@ (80054d0 <ADC_Init+0x1ec>)
 80052f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80052f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80052f8:	4b75      	ldr	r3, [pc, #468]	@ (80054d0 <ADC_Init+0x1ec>)
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	4973      	ldr	r1, [pc, #460]	@ (80054d0 <ADC_Init+0x1ec>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685a      	ldr	r2, [r3, #4]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005314:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6859      	ldr	r1, [r3, #4]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	021a      	lsls	r2, r3, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6859      	ldr	r1, [r3, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800535a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6899      	ldr	r1, [r3, #8]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005372:	4a58      	ldr	r2, [pc, #352]	@ (80054d4 <ADC_Init+0x1f0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005386:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6899      	ldr	r1, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80053a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6899      	ldr	r1, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	e00f      	b.n	80053de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80053dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0202 	bic.w	r2, r2, #2
 80053ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	005a      	lsls	r2, r3, #1
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d01b      	beq.n	8005444 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800541a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800542a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6859      	ldr	r1, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005436:	3b01      	subs	r3, #1
 8005438:	035a      	lsls	r2, r3, #13
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
 8005442:	e007      	b.n	8005454 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005452:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005462:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	3b01      	subs	r3, #1
 8005470:	051a      	lsls	r2, r3, #20
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	430a      	orrs	r2, r1
 8005478:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6899      	ldr	r1, [r3, #8]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005496:	025a      	lsls	r2, r3, #9
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6899      	ldr	r1, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	029a      	lsls	r2, r3, #10
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	40012300 	.word	0x40012300
 80054d4:	0f000001 	.word	0x0f000001

080054d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005518 <__NVIC_SetPriorityGrouping+0x40>)
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054f4:	4013      	ands	r3, r2
 80054f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005500:	4b06      	ldr	r3, [pc, #24]	@ (800551c <__NVIC_SetPriorityGrouping+0x44>)
 8005502:	4313      	orrs	r3, r2
 8005504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005506:	4a04      	ldr	r2, [pc, #16]	@ (8005518 <__NVIC_SetPriorityGrouping+0x40>)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	60d3      	str	r3, [r2, #12]
}
 800550c:	bf00      	nop
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	e000ed00 	.word	0xe000ed00
 800551c:	05fa0000 	.word	0x05fa0000

08005520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005524:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <__NVIC_GetPriorityGrouping+0x18>)
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	0a1b      	lsrs	r3, r3, #8
 800552a:	f003 0307 	and.w	r3, r3, #7
}
 800552e:	4618      	mov	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	e000ed00 	.word	0xe000ed00

0800553c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	4603      	mov	r3, r0
 8005544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554a:	2b00      	cmp	r3, #0
 800554c:	db0b      	blt.n	8005566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800554e:	79fb      	ldrb	r3, [r7, #7]
 8005550:	f003 021f 	and.w	r2, r3, #31
 8005554:	4907      	ldr	r1, [pc, #28]	@ (8005574 <__NVIC_EnableIRQ+0x38>)
 8005556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	2001      	movs	r0, #1
 800555e:	fa00 f202 	lsl.w	r2, r0, r2
 8005562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	e000e100 	.word	0xe000e100

08005578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	4603      	mov	r3, r0
 8005580:	6039      	str	r1, [r7, #0]
 8005582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005588:	2b00      	cmp	r3, #0
 800558a:	db0a      	blt.n	80055a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	b2da      	uxtb	r2, r3
 8005590:	490c      	ldr	r1, [pc, #48]	@ (80055c4 <__NVIC_SetPriority+0x4c>)
 8005592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005596:	0112      	lsls	r2, r2, #4
 8005598:	b2d2      	uxtb	r2, r2
 800559a:	440b      	add	r3, r1
 800559c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055a0:	e00a      	b.n	80055b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	4908      	ldr	r1, [pc, #32]	@ (80055c8 <__NVIC_SetPriority+0x50>)
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	3b04      	subs	r3, #4
 80055b0:	0112      	lsls	r2, r2, #4
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	440b      	add	r3, r1
 80055b6:	761a      	strb	r2, [r3, #24]
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	e000e100 	.word	0xe000e100
 80055c8:	e000ed00 	.word	0xe000ed00

080055cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b089      	sub	sp, #36	@ 0x24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0307 	and.w	r3, r3, #7
 80055de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f1c3 0307 	rsb	r3, r3, #7
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	bf28      	it	cs
 80055ea:	2304      	movcs	r3, #4
 80055ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3304      	adds	r3, #4
 80055f2:	2b06      	cmp	r3, #6
 80055f4:	d902      	bls.n	80055fc <NVIC_EncodePriority+0x30>
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	3b03      	subs	r3, #3
 80055fa:	e000      	b.n	80055fe <NVIC_EncodePriority+0x32>
 80055fc:	2300      	movs	r3, #0
 80055fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005600:	f04f 32ff 	mov.w	r2, #4294967295
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	fa02 f303 	lsl.w	r3, r2, r3
 800560a:	43da      	mvns	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	401a      	ands	r2, r3
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005614:	f04f 31ff 	mov.w	r1, #4294967295
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	fa01 f303 	lsl.w	r3, r1, r3
 800561e:	43d9      	mvns	r1, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005624:	4313      	orrs	r3, r2
         );
}
 8005626:	4618      	mov	r0, r3
 8005628:	3724      	adds	r7, #36	@ 0x24
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b082      	sub	sp, #8
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff ff4c 	bl	80054d8 <__NVIC_SetPriorityGrouping>
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800565a:	f7ff ff61 	bl	8005520 <__NVIC_GetPriorityGrouping>
 800565e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	6978      	ldr	r0, [r7, #20]
 8005666:	f7ff ffb1 	bl	80055cc <NVIC_EncodePriority>
 800566a:	4602      	mov	r2, r0
 800566c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff ff80 	bl	8005578 <__NVIC_SetPriority>
}
 8005678:	bf00      	nop
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	4603      	mov	r3, r0
 8005688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff54 	bl	800553c <__NVIC_EnableIRQ>
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e054      	b.n	8005758 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	7f5b      	ldrb	r3, [r3, #29]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d105      	bne.n	80056c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7fd fe68 	bl	8003394 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	791b      	ldrb	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a22      	ldr	r2, [pc, #136]	@ (8005760 <HAL_CRC_Init+0xc4>)
 80056d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0218 	bic.w	r2, r2, #24
 80056e8:	609a      	str	r2, [r3, #8]
 80056ea:	e00c      	b.n	8005706 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6899      	ldr	r1, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	461a      	mov	r2, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f834 	bl	8005764 <HAL_CRCEx_Polynomial_Set>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e028      	b.n	8005758 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	795b      	ldrb	r3, [r3, #5]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d105      	bne.n	800571a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f04f 32ff 	mov.w	r2, #4294967295
 8005716:	611a      	str	r2, [r3, #16]
 8005718:	e004      	b.n	8005724 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6912      	ldr	r2, [r2, #16]
 8005722:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	04c11db7 	.word	0x04c11db7

08005764 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005774:	231f      	movs	r3, #31
 8005776:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
 8005786:	e063      	b.n	8005850 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005788:	bf00      	nop
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1e5a      	subs	r2, r3, #1
 800578e:	613a      	str	r2, [r7, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <HAL_CRCEx_Polynomial_Set+0x44>
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f003 031f 	and.w	r3, r3, #31
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0f0      	beq.n	800578a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b18      	cmp	r3, #24
 80057ac:	d846      	bhi.n	800583c <HAL_CRCEx_Polynomial_Set+0xd8>
 80057ae:	a201      	add	r2, pc, #4	@ (adr r2, 80057b4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	08005843 	.word	0x08005843
 80057b8:	0800583d 	.word	0x0800583d
 80057bc:	0800583d 	.word	0x0800583d
 80057c0:	0800583d 	.word	0x0800583d
 80057c4:	0800583d 	.word	0x0800583d
 80057c8:	0800583d 	.word	0x0800583d
 80057cc:	0800583d 	.word	0x0800583d
 80057d0:	0800583d 	.word	0x0800583d
 80057d4:	08005831 	.word	0x08005831
 80057d8:	0800583d 	.word	0x0800583d
 80057dc:	0800583d 	.word	0x0800583d
 80057e0:	0800583d 	.word	0x0800583d
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	0800583d 	.word	0x0800583d
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	08005825 	.word	0x08005825
 80057f8:	0800583d 	.word	0x0800583d
 80057fc:	0800583d 	.word	0x0800583d
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	0800583d 	.word	0x0800583d
 800580c:	0800583d 	.word	0x0800583d
 8005810:	0800583d 	.word	0x0800583d
 8005814:	08005819 	.word	0x08005819
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b06      	cmp	r3, #6
 800581c:	d913      	bls.n	8005846 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005822:	e010      	b.n	8005846 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b07      	cmp	r3, #7
 8005828:	d90f      	bls.n	800584a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800582e:	e00c      	b.n	800584a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b0f      	cmp	r3, #15
 8005834:	d90b      	bls.n	800584e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800583a:	e008      	b.n	800584e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	75fb      	strb	r3, [r7, #23]
        break;
 8005840:	e006      	b.n	8005850 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005842:	bf00      	nop
 8005844:	e004      	b.n	8005850 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005846:	bf00      	nop
 8005848:	e002      	b.n	8005850 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800584e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10d      	bne.n	8005872 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f023 0118 	bic.w	r1, r3, #24
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	430a      	orrs	r2, r1
 8005870:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005872:	7dfb      	ldrb	r3, [r7, #23]
}
 8005874:	4618      	mov	r0, r3
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b082      	sub	sp, #8
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e069      	b.n	8005966 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d102      	bne.n	80058a4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd fd98 	bl	80033d4 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6819      	ldr	r1, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005970 <HAL_DCMI_Init+0xf0>)
 80058c6:	400b      	ands	r3, r1
 80058c8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6819      	ldr	r1, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80058de:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80058ea:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80058f6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fc:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8005902:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800590e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b10      	cmp	r3, #16
 800591e:	d112      	bne.n	8005946 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	7f1b      	ldrb	r3, [r3, #28]
 8005924:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	7f5b      	ldrb	r3, [r3, #29]
 800592a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800592c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7f9b      	ldrb	r3, [r3, #30]
 8005932:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8005934:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	7fdb      	ldrb	r3, [r3, #31]
 800593c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8005942:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8005944:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68da      	ldr	r2, [r3, #12]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 021e 	orr.w	r2, r2, #30
 8005954:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	ffe0f007 	.word	0xffe0f007

08005974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b086      	sub	sp, #24
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005980:	f7ff fae2 	bl	8004f48 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e099      	b.n	8005ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2202      	movs	r2, #2
 8005994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0201 	bic.w	r2, r2, #1
 80059ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059b0:	e00f      	b.n	80059d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059b2:	f7ff fac9 	bl	8004f48 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b05      	cmp	r3, #5
 80059be:	d908      	bls.n	80059d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2203      	movs	r2, #3
 80059ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e078      	b.n	8005ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0301 	and.w	r3, r3, #1
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d1e8      	bne.n	80059b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4b38      	ldr	r3, [pc, #224]	@ (8005acc <HAL_DMA_Init+0x158>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d107      	bne.n	8005a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	4313      	orrs	r3, r2
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0307 	bic.w	r3, r3, #7
 8005a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d117      	bne.n	8005a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00e      	beq.n	8005a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fb73 	bl	8006164 <DMA_CheckFifoParam>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2240      	movs	r2, #64	@ 0x40
 8005a88:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005a92:	2301      	movs	r3, #1
 8005a94:	e016      	b.n	8005ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fb2a 	bl	80060f8 <DMA_CalcBaseAndBitshift>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aac:	223f      	movs	r2, #63	@ 0x3f
 8005aae:	409a      	lsls	r2, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	f010803f 	.word	0xf010803f

08005ad0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e050      	b.n	8005b84 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d101      	bne.n	8005af2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
 8005af0:	e048      	b.n	8005b84 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0201 	bic.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2221      	movs	r2, #33	@ 0x21
 8005b30:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fae0 	bl	80060f8 <DMA_CalcBaseAndBitshift>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b40:	223f      	movs	r2, #63	@ 0x3f
 8005b42:	409a      	lsls	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_DMA_Start_IT+0x26>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e048      	b.n	8005c44 <HAL_DMA_Start_IT+0xb8>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d137      	bne.n	8005c36 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 fa5e 	bl	800609c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be4:	223f      	movs	r2, #63	@ 0x3f
 8005be6:	409a      	lsls	r2, r3
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0216 	orr.w	r2, r2, #22
 8005bfa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695a      	ldr	r2, [r3, #20]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005c0a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0201 	orr.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	e005      	b.n	8005c42 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
 8005c40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c58:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005c5a:	f7ff f975 	bl	8004f48 <HAL_GetTick>
 8005c5e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d008      	beq.n	8005c7e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2280      	movs	r2, #128	@ 0x80
 8005c70:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e052      	b.n	8005d24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0216 	bic.w	r2, r2, #22
 8005c8c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695a      	ldr	r2, [r3, #20]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c9c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d103      	bne.n	8005cae <HAL_DMA_Abort+0x62>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d007      	beq.n	8005cbe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0208 	bic.w	r2, r2, #8
 8005cbc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cce:	e013      	b.n	8005cf8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cd0:	f7ff f93a 	bl	8004f48 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b05      	cmp	r3, #5
 8005cdc:	d90c      	bls.n	8005cf8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e015      	b.n	8005d24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e4      	bne.n	8005cd0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0a:	223f      	movs	r2, #63	@ 0x3f
 8005d0c:	409a      	lsls	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d004      	beq.n	8005d4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2280      	movs	r2, #128	@ 0x80
 8005d44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e00c      	b.n	8005d64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2205      	movs	r2, #5
 8005d4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 0201 	bic.w	r2, r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005d7c:	4b8e      	ldr	r3, [pc, #568]	@ (8005fb8 <HAL_DMA_IRQHandler+0x248>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a8e      	ldr	r2, [pc, #568]	@ (8005fbc <HAL_DMA_IRQHandler+0x24c>)
 8005d82:	fba2 2303 	umull	r2, r3, r2, r3
 8005d86:	0a9b      	lsrs	r3, r3, #10
 8005d88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01a      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d013      	beq.n	8005ddc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0204 	bic.w	r2, r2, #4
 8005dc2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc8:	2208      	movs	r2, #8
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd4:	f043 0201 	orr.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de0:	2201      	movs	r2, #1
 8005de2:	409a      	lsls	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4013      	ands	r3, r2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dfe:	2201      	movs	r2, #1
 8005e00:	409a      	lsls	r2, r3
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	f043 0202 	orr.w	r2, r3, #2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e16:	2204      	movs	r2, #4
 8005e18:	409a      	lsls	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d012      	beq.n	8005e48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e34:	2204      	movs	r2, #4
 8005e36:	409a      	lsls	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e40:	f043 0204 	orr.w	r2, r3, #4
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4c:	2210      	movs	r2, #16
 8005e4e:	409a      	lsls	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d043      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d03c      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e6a:	2210      	movs	r2, #16
 8005e6c:	409a      	lsls	r2, r3
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d018      	beq.n	8005eb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d108      	bne.n	8005ea0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d024      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	4798      	blx	r3
 8005e9e:	e01f      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01b      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
 8005eb0:	e016      	b.n	8005ee0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0208 	bic.w	r2, r2, #8
 8005ece:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d003      	beq.n	8005ee0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	409a      	lsls	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 808f 	beq.w	8006010 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0310 	and.w	r3, r3, #16
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 8087 	beq.w	8006010 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f06:	2220      	movs	r2, #32
 8005f08:	409a      	lsls	r2, r3
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d136      	bne.n	8005f88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0216 	bic.w	r2, r2, #22
 8005f28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695a      	ldr	r2, [r3, #20]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <HAL_DMA_IRQHandler+0x1da>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d007      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0208 	bic.w	r2, r2, #8
 8005f58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5e:	223f      	movs	r2, #63	@ 0x3f
 8005f60:	409a      	lsls	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d07e      	beq.n	800607c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
        }
        return;
 8005f86:	e079      	b.n	800607c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01d      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d10d      	bne.n	8005fc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d031      	beq.n	8006010 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
 8005fb4:	e02c      	b.n	8006010 <HAL_DMA_IRQHandler+0x2a0>
 8005fb6:	bf00      	nop
 8005fb8:	20000000 	.word	0x20000000
 8005fbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d023      	beq.n	8006010 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
 8005fd0:	e01e      	b.n	8006010 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10f      	bne.n	8006000 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0210 	bic.w	r2, r2, #16
 8005fee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006014:	2b00      	cmp	r3, #0
 8006016:	d032      	beq.n	800607e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d022      	beq.n	800606a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2205      	movs	r2, #5
 8006028:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	3301      	adds	r3, #1
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	429a      	cmp	r2, r3
 8006046:	d307      	bcc.n	8006058 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0301 	and.w	r3, r3, #1
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f2      	bne.n	800603c <HAL_DMA_IRQHandler+0x2cc>
 8006056:	e000      	b.n	800605a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006058:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	4798      	blx	r3
 800607a:	e000      	b.n	800607e <HAL_DMA_IRQHandler+0x30e>
        return;
 800607c:	bf00      	nop
    }
  }
}
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80060b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d108      	bne.n	80060dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80060da:	e007      	b.n	80060ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]
}
 80060ec:	bf00      	nop
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	3b10      	subs	r3, #16
 8006108:	4a13      	ldr	r2, [pc, #76]	@ (8006158 <DMA_CalcBaseAndBitshift+0x60>)
 800610a:	fba2 2303 	umull	r2, r3, r2, r3
 800610e:	091b      	lsrs	r3, r3, #4
 8006110:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006112:	4a12      	ldr	r2, [pc, #72]	@ (800615c <DMA_CalcBaseAndBitshift+0x64>)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4413      	add	r3, r2
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	461a      	mov	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b03      	cmp	r3, #3
 8006124:	d908      	bls.n	8006138 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	4b0c      	ldr	r3, [pc, #48]	@ (8006160 <DMA_CalcBaseAndBitshift+0x68>)
 800612e:	4013      	ands	r3, r2
 8006130:	1d1a      	adds	r2, r3, #4
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	659a      	str	r2, [r3, #88]	@ 0x58
 8006136:	e006      	b.n	8006146 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	4b08      	ldr	r3, [pc, #32]	@ (8006160 <DMA_CalcBaseAndBitshift+0x68>)
 8006140:	4013      	ands	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800614a:	4618      	mov	r0, r3
 800614c:	3714      	adds	r7, #20
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	aaaaaaab 	.word	0xaaaaaaab
 800615c:	0801c378 	.word	0x0801c378
 8006160:	fffffc00 	.word	0xfffffc00

08006164 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d11f      	bne.n	80061be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b03      	cmp	r3, #3
 8006182:	d856      	bhi.n	8006232 <DMA_CheckFifoParam+0xce>
 8006184:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <DMA_CheckFifoParam+0x28>)
 8006186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618a:	bf00      	nop
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061af 	.word	0x080061af
 8006194:	0800619d 	.word	0x0800619d
 8006198:	08006233 	.word	0x08006233
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d046      	beq.n	8006236 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061ac:	e043      	b.n	8006236 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061b6:	d140      	bne.n	800623a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061bc:	e03d      	b.n	800623a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c6:	d121      	bne.n	800620c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d837      	bhi.n	800623e <DMA_CheckFifoParam+0xda>
 80061ce:	a201      	add	r2, pc, #4	@ (adr r2, 80061d4 <DMA_CheckFifoParam+0x70>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	080061e5 	.word	0x080061e5
 80061d8:	080061eb 	.word	0x080061eb
 80061dc:	080061e5 	.word	0x080061e5
 80061e0:	080061fd 	.word	0x080061fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]
      break;
 80061e8:	e030      	b.n	800624c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d025      	beq.n	8006242 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80061fa:	e022      	b.n	8006242 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006200:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006204:	d11f      	bne.n	8006246 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800620a:	e01c      	b.n	8006246 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d903      	bls.n	800621a <DMA_CheckFifoParam+0xb6>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d003      	beq.n	8006220 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006218:	e018      	b.n	800624c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	73fb      	strb	r3, [r7, #15]
      break;
 800621e:	e015      	b.n	800624c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
      break;
 8006230:	e00b      	b.n	800624a <DMA_CheckFifoParam+0xe6>
      break;
 8006232:	bf00      	nop
 8006234:	e00a      	b.n	800624c <DMA_CheckFifoParam+0xe8>
      break;
 8006236:	bf00      	nop
 8006238:	e008      	b.n	800624c <DMA_CheckFifoParam+0xe8>
      break;
 800623a:	bf00      	nop
 800623c:	e006      	b.n	800624c <DMA_CheckFifoParam+0xe8>
      break;
 800623e:	bf00      	nop
 8006240:	e004      	b.n	800624c <DMA_CheckFifoParam+0xe8>
      break;
 8006242:	bf00      	nop
 8006244:	e002      	b.n	800624c <DMA_CheckFifoParam+0xe8>
      break;   
 8006246:	bf00      	nop
 8006248:	e000      	b.n	800624c <DMA_CheckFifoParam+0xe8>
      break;
 800624a:	bf00      	nop
    }
  } 
  
  return status; 
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3714      	adds	r7, #20
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop

0800625c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e039      	b.n	80062e2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fd f964 	bl	8003550 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ac:	f023 0107 	bic.w	r1, r3, #7
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062c2:	4b0a      	ldr	r3, [pc, #40]	@ (80062ec <HAL_DMA2D_Init+0x90>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68d1      	ldr	r1, [r2, #12]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	6812      	ldr	r2, [r2, #0]
 80062ce:	430b      	orrs	r3, r1
 80062d0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	ffffc000 	.word	0xffffc000

080062f0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d026      	beq.n	8006360 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006318:	2b00      	cmp	r3, #0
 800631a:	d021      	beq.n	8006360 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800632a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006330:	f043 0201 	orr.w	r2, r3, #1
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2201      	movs	r2, #1
 800633e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2204      	movs	r2, #4
 8006344:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	695b      	ldr	r3, [r3, #20]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d026      	beq.n	80063b8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d021      	beq.n	80063b8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006382:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2220      	movs	r2, #32
 800638a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006390:	f043 0202 	orr.w	r2, r3, #2
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2204      	movs	r2, #4
 800639c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	695b      	ldr	r3, [r3, #20]
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d026      	beq.n	8006410 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d021      	beq.n	8006410 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063da:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2208      	movs	r2, #8
 80063e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e8:	f043 0204 	orr.w	r2, r3, #4
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2204      	movs	r2, #4
 80063f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b00      	cmp	r3, #0
 8006418:	d013      	beq.n	8006442 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00e      	beq.n	8006442 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006432:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2204      	movs	r2, #4
 800643a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f853 	bl	80064e8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f003 0302 	and.w	r3, r3, #2
 8006448:	2b00      	cmp	r3, #0
 800644a:	d024      	beq.n	8006496 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006452:	2b00      	cmp	r3, #0
 8006454:	d01f      	beq.n	8006496 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006464:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2202      	movs	r2, #2
 800646c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01f      	beq.n	80064e0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d01a      	beq.n	80064e0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064b8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2210      	movs	r2, #16
 80064c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f80e 	bl	80064fc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_DMA2D_ConfigLayer+0x20>
 800652c:	2302      	movs	r3, #2
 800652e:	e079      	b.n	8006624 <HAL_DMA2D_ConfigLayer+0x114>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	3318      	adds	r3, #24
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4413      	add	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	041b      	lsls	r3, r3, #16
 8006556:	4313      	orrs	r3, r2
 8006558:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800655a:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <HAL_DMA2D_ConfigLayer+0x120>)
 800655c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b0a      	cmp	r3, #10
 8006564:	d003      	beq.n	800656e <HAL_DMA2D_ConfigLayer+0x5e>
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b09      	cmp	r3, #9
 800656c:	d107      	bne.n	800657e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4313      	orrs	r3, r2
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e005      	b.n	800658a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	061b      	lsls	r3, r3, #24
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d120      	bne.n	80065d2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	43db      	mvns	r3, r3
 800659a:	ea02 0103 	and.w	r1, r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b0a      	cmp	r3, #10
 80065b8:	d003      	beq.n	80065c2 <HAL_DMA2D_ConfigLayer+0xb2>
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b09      	cmp	r3, #9
 80065c0:	d127      	bne.n	8006612 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80065ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80065d0:	e01f      	b.n	8006612 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	43db      	mvns	r3, r3
 80065dc:	ea02 0103 	and.w	r1, r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b0a      	cmp	r3, #10
 80065fa:	d003      	beq.n	8006604 <HAL_DMA2D_ConfigLayer+0xf4>
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	2b09      	cmp	r3, #9
 8006602:	d106      	bne.n	8006612 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8006610:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	371c      	adds	r7, #28
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	ff03000f 	.word	0xff03000f

08006634 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e086      	b.n	8006754 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fc ff9f 	bl	800359c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800665e:	4b3f      	ldr	r3, [pc, #252]	@ (800675c <HAL_ETH_Init+0x128>)
 8006660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006662:	4a3e      	ldr	r2, [pc, #248]	@ (800675c <HAL_ETH_Init+0x128>)
 8006664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006668:	6453      	str	r3, [r2, #68]	@ 0x44
 800666a:	4b3c      	ldr	r3, [pc, #240]	@ (800675c <HAL_ETH_Init+0x128>)
 800666c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800666e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006676:	4b3a      	ldr	r3, [pc, #232]	@ (8006760 <HAL_ETH_Init+0x12c>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	4a39      	ldr	r2, [pc, #228]	@ (8006760 <HAL_ETH_Init+0x12c>)
 800667c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006680:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006682:	4b37      	ldr	r3, [pc, #220]	@ (8006760 <HAL_ETH_Init+0x12c>)
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	4935      	ldr	r1, [pc, #212]	@ (8006760 <HAL_ETH_Init+0x12c>)
 800668c:	4313      	orrs	r3, r2
 800668e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8006690:	4b33      	ldr	r3, [pc, #204]	@ (8006760 <HAL_ETH_Init+0x12c>)
 8006692:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	f043 0301 	orr.w	r3, r3, #1
 80066a6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066ac:	f7fe fc4c 	bl	8004f48 <HAL_GetTick>
 80066b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80066b2:	e011      	b.n	80066d8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80066b4:	f7fe fc48 	bl	8004f48 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80066c2:	d909      	bls.n	80066d8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2204      	movs	r2, #4
 80066c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	22e0      	movs	r2, #224	@ 0xe0
 80066d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e03d      	b.n	8006754 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e4      	bne.n	80066b4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f97a 	bl	80069e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 fa25 	bl	8006b40 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa7b 	bl	8006bf2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	461a      	mov	r2, r3
 8006702:	2100      	movs	r1, #0
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f9e3 	bl	8006ad0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8006718:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	4b0f      	ldr	r3, [pc, #60]	@ (8006764 <HAL_ETH_Init+0x130>)
 8006728:	430b      	orrs	r3, r1
 800672a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800673e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2210      	movs	r2, #16
 800674e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	40023800 	.word	0x40023800
 8006760:	40013800 	.word	0x40013800
 8006764:	00020060 	.word	0x00020060

08006768 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4b53      	ldr	r3, [pc, #332]	@ (80068cc <ETH_SetMACConfig+0x164>)
 800677e:	4013      	ands	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	7b9b      	ldrb	r3, [r3, #14]
 8006786:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	2a00      	cmp	r2, #0
 800678e:	d102      	bne.n	8006796 <ETH_SetMACConfig+0x2e>
 8006790:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006794:	e000      	b.n	8006798 <ETH_SetMACConfig+0x30>
 8006796:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006798:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800679a:	683a      	ldr	r2, [r7, #0]
 800679c:	7c52      	ldrb	r2, [r2, #17]
 800679e:	2a00      	cmp	r2, #0
 80067a0:	d102      	bne.n	80067a8 <ETH_SetMACConfig+0x40>
 80067a2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80067a6:	e000      	b.n	80067aa <ETH_SetMACConfig+0x42>
 80067a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80067aa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80067b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	7fdb      	ldrb	r3, [r3, #31]
 80067b6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80067b8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80067be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	7f92      	ldrb	r2, [r2, #30]
 80067c4:	2a00      	cmp	r2, #0
 80067c6:	d102      	bne.n	80067ce <ETH_SetMACConfig+0x66>
 80067c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80067cc:	e000      	b.n	80067d0 <ETH_SetMACConfig+0x68>
 80067ce:	2200      	movs	r2, #0
                        macconf->Speed |
 80067d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	7f1b      	ldrb	r3, [r3, #28]
 80067d6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80067d8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80067de:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	791b      	ldrb	r3, [r3, #4]
 80067e4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80067e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	f892 2020 	ldrb.w	r2, [r2, #32]
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d102      	bne.n	80067f8 <ETH_SetMACConfig+0x90>
 80067f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067f6:	e000      	b.n	80067fa <ETH_SetMACConfig+0x92>
 80067f8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80067fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	7bdb      	ldrb	r3, [r3, #15]
 8006800:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006802:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006808:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006810:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8006812:	4313      	orrs	r3, r2
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800682a:	2001      	movs	r0, #1
 800682c:	f7fe fb98 	bl	8004f60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006846:	4013      	ands	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800684e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006856:	2a00      	cmp	r2, #0
 8006858:	d101      	bne.n	800685e <ETH_SetMACConfig+0xf6>
 800685a:	2280      	movs	r2, #128	@ 0x80
 800685c:	e000      	b.n	8006860 <ETH_SetMACConfig+0xf8>
 800685e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006860:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006866:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800686e:	2a01      	cmp	r2, #1
 8006870:	d101      	bne.n	8006876 <ETH_SetMACConfig+0x10e>
 8006872:	2208      	movs	r2, #8
 8006874:	e000      	b.n	8006878 <ETH_SetMACConfig+0x110>
 8006876:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006878:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8006880:	2a01      	cmp	r2, #1
 8006882:	d101      	bne.n	8006888 <ETH_SetMACConfig+0x120>
 8006884:	2204      	movs	r2, #4
 8006886:	e000      	b.n	800688a <ETH_SetMACConfig+0x122>
 8006888:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800688a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8006892:	2a01      	cmp	r2, #1
 8006894:	d101      	bne.n	800689a <ETH_SetMACConfig+0x132>
 8006896:	2202      	movs	r2, #2
 8006898:	e000      	b.n	800689c <ETH_SetMACConfig+0x134>
 800689a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800689c:	4313      	orrs	r3, r2
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80068b4:	2001      	movs	r0, #1
 80068b6:	f7fe fb53 	bl	8004f60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	619a      	str	r2, [r3, #24]
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	fd20810f 	.word	0xfd20810f

080068d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4b3d      	ldr	r3, [pc, #244]	@ (80069e0 <ETH_SetDMAConfig+0x110>)
 80068ea:	4013      	ands	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	7b1b      	ldrb	r3, [r3, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <ETH_SetDMAConfig+0x2c>
 80068f6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80068fa:	e000      	b.n	80068fe <ETH_SetDMAConfig+0x2e>
 80068fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	7b5b      	ldrb	r3, [r3, #13]
 8006902:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006904:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	7f52      	ldrb	r2, [r2, #29]
 800690a:	2a00      	cmp	r2, #0
 800690c:	d102      	bne.n	8006914 <ETH_SetDMAConfig+0x44>
 800690e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006912:	e000      	b.n	8006916 <ETH_SetDMAConfig+0x46>
 8006914:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006916:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	7b9b      	ldrb	r3, [r3, #14]
 800691c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800691e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006924:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	7f1b      	ldrb	r3, [r3, #28]
 800692a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800692c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	7f9b      	ldrb	r3, [r3, #30]
 8006932:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006934:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800693a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006942:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006944:	4313      	orrs	r3, r2
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4313      	orrs	r3, r2
 800694a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006954:	461a      	mov	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006966:	2001      	movs	r0, #1
 8006968:	f7fe fafa 	bl	8004f60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006974:	461a      	mov	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	791b      	ldrb	r3, [r3, #4]
 800697e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006984:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800698a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8006990:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006998:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800699a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80069a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80069a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80069b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80069b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80069c4:	2001      	movs	r0, #1
 80069c6:	f7fe facb 	bl	8004f60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069d2:	461a      	mov	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6013      	str	r3, [r2, #0]
}
 80069d8:	bf00      	nop
 80069da:	3710      	adds	r7, #16
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	f8de3f23 	.word	0xf8de3f23

080069e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b0a6      	sub	sp, #152	@ 0x98
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80069f8:	2300      	movs	r3, #0
 80069fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80069fc:	2300      	movs	r3, #0
 80069fe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8006a02:	2301      	movs	r3, #1
 8006a04:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8006a20:	2300      	movs	r3, #0
 8006a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006a26:	2300      	movs	r3, #0
 8006a28:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006a4c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a50:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006a52:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006a5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7ff fe7f 	bl	8006768 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8006a80:	2300      	movs	r3, #0
 8006a82:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006a9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a9e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006aa0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006aa4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006aa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006aaa:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006aba:	f107 0308 	add.w	r3, r7, #8
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f7ff ff05 	bl	80068d0 <ETH_SetDMAConfig>
}
 8006ac6:	bf00      	nop
 8006ac8:	3798      	adds	r7, #152	@ 0x98
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3305      	adds	r3, #5
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	3204      	adds	r2, #4
 8006ae8:	7812      	ldrb	r2, [r2, #0]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4b11      	ldr	r3, [pc, #68]	@ (8006b38 <ETH_MACAddressConfig+0x68>)
 8006af2:	4413      	add	r3, r2
 8006af4:	461a      	mov	r2, r3
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3303      	adds	r3, #3
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	061a      	lsls	r2, r3, #24
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	3302      	adds	r3, #2
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3301      	adds	r3, #1
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	021b      	lsls	r3, r3, #8
 8006b14:	4313      	orrs	r3, r2
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	4b06      	ldr	r3, [pc, #24]	@ (8006b3c <ETH_MACAddressConfig+0x6c>)
 8006b22:	4413      	add	r3, r2
 8006b24:	461a      	mov	r2, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	6013      	str	r3, [r2, #0]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	40028040 	.word	0x40028040
 8006b3c:	40028044 	.word	0x40028044

08006b40 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e03e      	b.n	8006bcc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68d9      	ldr	r1, [r3, #12]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	4613      	mov	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	00db      	lsls	r3, r3, #3
 8006b5c:	440b      	add	r3, r1
 8006b5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2200      	movs	r2, #0
 8006b76:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006b78:	68b9      	ldr	r1, [r7, #8]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	3206      	adds	r2, #6
 8006b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d80c      	bhi.n	8006bb0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68d9      	ldr	r1, [r3, #12]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	440b      	add	r3, r1
 8006ba8:	461a      	mov	r2, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	60da      	str	r2, [r3, #12]
 8006bae:	e004      	b.n	8006bba <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d9bd      	bls.n	8006b4e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be4:	611a      	str	r2, [r3, #16]
}
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	e048      	b.n	8006c92 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6919      	ldr	r1, [r3, #16]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4613      	mov	r3, r2
 8006c08:	009b      	lsls	r3, r3, #2
 8006c0a:	4413      	add	r3, r2
 8006c0c:	00db      	lsls	r3, r3, #3
 8006c0e:	440b      	add	r3, r1
 8006c10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	2200      	movs	r2, #0
 8006c22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2200      	movs	r2, #0
 8006c34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c3c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006c56:	68b9      	ldr	r1, [r7, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	3212      	adds	r2, #18
 8006c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d80c      	bhi.n	8006c82 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6919      	ldr	r1, [r3, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	440b      	add	r3, r1
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	60da      	str	r2, [r3, #12]
 8006c80:	e004      	b.n	8006c8c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	461a      	mov	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b03      	cmp	r3, #3
 8006c96:	d9b3      	bls.n	8006c00 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006cc2:	60da      	str	r2, [r3, #12]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b089      	sub	sp, #36	@ 0x24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	e175      	b.n	8006fdc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4013      	ands	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	f040 8164 	bne.w	8006fd6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f003 0303 	and.w	r3, r3, #3
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d005      	beq.n	8006d26 <HAL_GPIO_Init+0x56>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f003 0303 	and.w	r3, r3, #3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d130      	bne.n	8006d88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	2203      	movs	r2, #3
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	43db      	mvns	r3, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	fa02 f303 	lsl.w	r3, r2, r3
 8006d64:	43db      	mvns	r3, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	091b      	lsrs	r3, r3, #4
 8006d72:	f003 0201 	and.w	r2, r3, #1
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 0303 	and.w	r3, r3, #3
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d017      	beq.n	8006dc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	005b      	lsls	r3, r3, #1
 8006d9e:	2203      	movs	r2, #3
 8006da0:	fa02 f303 	lsl.w	r3, r2, r3
 8006da4:	43db      	mvns	r3, r3
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	4013      	ands	r3, r2
 8006daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	fa02 f303 	lsl.w	r3, r2, r3
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d123      	bne.n	8006e18 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	08da      	lsrs	r2, r3, #3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3208      	adds	r2, #8
 8006dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	220f      	movs	r2, #15
 8006de8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dec:	43db      	mvns	r3, r3
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	4013      	ands	r3, r2
 8006df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	fa02 f303 	lsl.w	r3, r2, r3
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	08da      	lsrs	r2, r3, #3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3208      	adds	r2, #8
 8006e12:	69b9      	ldr	r1, [r7, #24]
 8006e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	2203      	movs	r2, #3
 8006e24:	fa02 f303 	lsl.w	r3, r2, r3
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f003 0203 	and.w	r2, r3, #3
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	005b      	lsls	r3, r3, #1
 8006e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e40:	69ba      	ldr	r2, [r7, #24]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69ba      	ldr	r2, [r7, #24]
 8006e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f000 80be 	beq.w	8006fd6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e5a:	4b66      	ldr	r3, [pc, #408]	@ (8006ff4 <HAL_GPIO_Init+0x324>)
 8006e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5e:	4a65      	ldr	r2, [pc, #404]	@ (8006ff4 <HAL_GPIO_Init+0x324>)
 8006e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e66:	4b63      	ldr	r3, [pc, #396]	@ (8006ff4 <HAL_GPIO_Init+0x324>)
 8006e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e6e:	60fb      	str	r3, [r7, #12]
 8006e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006e72:	4a61      	ldr	r2, [pc, #388]	@ (8006ff8 <HAL_GPIO_Init+0x328>)
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	089b      	lsrs	r3, r3, #2
 8006e78:	3302      	adds	r3, #2
 8006e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	220f      	movs	r2, #15
 8006e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8e:	43db      	mvns	r3, r3
 8006e90:	69ba      	ldr	r2, [r7, #24]
 8006e92:	4013      	ands	r3, r2
 8006e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a58      	ldr	r2, [pc, #352]	@ (8006ffc <HAL_GPIO_Init+0x32c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d037      	beq.n	8006f0e <HAL_GPIO_Init+0x23e>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a57      	ldr	r2, [pc, #348]	@ (8007000 <HAL_GPIO_Init+0x330>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d031      	beq.n	8006f0a <HAL_GPIO_Init+0x23a>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a56      	ldr	r2, [pc, #344]	@ (8007004 <HAL_GPIO_Init+0x334>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d02b      	beq.n	8006f06 <HAL_GPIO_Init+0x236>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a55      	ldr	r2, [pc, #340]	@ (8007008 <HAL_GPIO_Init+0x338>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d025      	beq.n	8006f02 <HAL_GPIO_Init+0x232>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a54      	ldr	r2, [pc, #336]	@ (800700c <HAL_GPIO_Init+0x33c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01f      	beq.n	8006efe <HAL_GPIO_Init+0x22e>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a53      	ldr	r2, [pc, #332]	@ (8007010 <HAL_GPIO_Init+0x340>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d019      	beq.n	8006efa <HAL_GPIO_Init+0x22a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a52      	ldr	r2, [pc, #328]	@ (8007014 <HAL_GPIO_Init+0x344>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d013      	beq.n	8006ef6 <HAL_GPIO_Init+0x226>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a51      	ldr	r2, [pc, #324]	@ (8007018 <HAL_GPIO_Init+0x348>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00d      	beq.n	8006ef2 <HAL_GPIO_Init+0x222>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a50      	ldr	r2, [pc, #320]	@ (800701c <HAL_GPIO_Init+0x34c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d007      	beq.n	8006eee <HAL_GPIO_Init+0x21e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a4f      	ldr	r2, [pc, #316]	@ (8007020 <HAL_GPIO_Init+0x350>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <HAL_GPIO_Init+0x21a>
 8006ee6:	2309      	movs	r3, #9
 8006ee8:	e012      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006eea:	230a      	movs	r3, #10
 8006eec:	e010      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006eee:	2308      	movs	r3, #8
 8006ef0:	e00e      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006ef2:	2307      	movs	r3, #7
 8006ef4:	e00c      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006ef6:	2306      	movs	r3, #6
 8006ef8:	e00a      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006efa:	2305      	movs	r3, #5
 8006efc:	e008      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006efe:	2304      	movs	r3, #4
 8006f00:	e006      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006f02:	2303      	movs	r3, #3
 8006f04:	e004      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e002      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e000      	b.n	8006f10 <HAL_GPIO_Init+0x240>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	69fa      	ldr	r2, [r7, #28]
 8006f12:	f002 0203 	and.w	r2, r2, #3
 8006f16:	0092      	lsls	r2, r2, #2
 8006f18:	4093      	lsls	r3, r2
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006f20:	4935      	ldr	r1, [pc, #212]	@ (8006ff8 <HAL_GPIO_Init+0x328>)
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	089b      	lsrs	r3, r3, #2
 8006f26:	3302      	adds	r3, #2
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007024 <HAL_GPIO_Init+0x354>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	43db      	mvns	r3, r3
 8006f38:	69ba      	ldr	r2, [r7, #24]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f52:	4a34      	ldr	r2, [pc, #208]	@ (8007024 <HAL_GPIO_Init+0x354>)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f58:	4b32      	ldr	r3, [pc, #200]	@ (8007024 <HAL_GPIO_Init+0x354>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	43db      	mvns	r3, r3
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	4013      	ands	r3, r2
 8006f66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d003      	beq.n	8006f7c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006f74:	69ba      	ldr	r2, [r7, #24]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f7c:	4a29      	ldr	r2, [pc, #164]	@ (8007024 <HAL_GPIO_Init+0x354>)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f82:	4b28      	ldr	r3, [pc, #160]	@ (8007024 <HAL_GPIO_Init+0x354>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	43db      	mvns	r3, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4013      	ands	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006f9e:	69ba      	ldr	r2, [r7, #24]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8007024 <HAL_GPIO_Init+0x354>)
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fac:	4b1d      	ldr	r3, [pc, #116]	@ (8007024 <HAL_GPIO_Init+0x354>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	43db      	mvns	r3, r3
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006fd0:	4a14      	ldr	r2, [pc, #80]	@ (8007024 <HAL_GPIO_Init+0x354>)
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	2b0f      	cmp	r3, #15
 8006fe0:	f67f ae86 	bls.w	8006cf0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	3724      	adds	r7, #36	@ 0x24
 8006fea:	46bd      	mov	sp, r7
 8006fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	40023800 	.word	0x40023800
 8006ff8:	40013800 	.word	0x40013800
 8006ffc:	40020000 	.word	0x40020000
 8007000:	40020400 	.word	0x40020400
 8007004:	40020800 	.word	0x40020800
 8007008:	40020c00 	.word	0x40020c00
 800700c:	40021000 	.word	0x40021000
 8007010:	40021400 	.word	0x40021400
 8007014:	40021800 	.word	0x40021800
 8007018:	40021c00 	.word	0x40021c00
 800701c:	40022000 	.word	0x40022000
 8007020:	40022400 	.word	0x40022400
 8007024:	40013c00 	.word	0x40013c00

08007028 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691a      	ldr	r2, [r3, #16]
 8007038:	887b      	ldrh	r3, [r7, #2]
 800703a:	4013      	ands	r3, r2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
 8007044:	e001      	b.n	800704a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007046:	2300      	movs	r3, #0
 8007048:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	807b      	strh	r3, [r7, #2]
 8007064:	4613      	mov	r3, r2
 8007066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007068:	787b      	ldrb	r3, [r7, #1]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800706e:	887a      	ldrh	r2, [r7, #2]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007074:	e003      	b.n	800707e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007076:	887b      	ldrh	r3, [r7, #2]
 8007078:	041a      	lsls	r2, r3, #16
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	619a      	str	r2, [r3, #24]
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b086      	sub	sp, #24
 800708e:	af02      	add	r7, sp, #8
 8007090:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d101      	bne.n	800709c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e059      	b.n	8007150 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f012 faa0 	bl	80195fc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2203      	movs	r2, #3
 80070c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070ca:	d102      	bne.n	80070d2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f009 fbeb 	bl	80108b2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	7c1a      	ldrb	r2, [r3, #16]
 80070e4:	f88d 2000 	strb.w	r2, [sp]
 80070e8:	3304      	adds	r3, #4
 80070ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070ec:	f009 fb76 	bl	80107dc <USB_CoreInit>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d005      	beq.n	8007102 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2202      	movs	r2, #2
 80070fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e026      	b.n	8007150 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2101      	movs	r1, #1
 8007108:	4618      	mov	r0, r3
 800710a:	f009 fbe3 	bl	80108d4 <USB_SetCurrentMode>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d005      	beq.n	8007120 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e017      	b.n	8007150 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6818      	ldr	r0, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	7c1a      	ldrb	r2, [r3, #16]
 8007128:	f88d 2000 	strb.w	r2, [sp]
 800712c:	3304      	adds	r3, #4
 800712e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007130:	f009 fd8c 	bl	8010c4c <USB_HostInit>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2202      	movs	r2, #2
 800713e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e004      	b.n	8007150 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007158:	b590      	push	{r4, r7, lr}
 800715a:	b08b      	sub	sp, #44	@ 0x2c
 800715c:	af04      	add	r7, sp, #16
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	4608      	mov	r0, r1
 8007162:	4611      	mov	r1, r2
 8007164:	461a      	mov	r2, r3
 8007166:	4603      	mov	r3, r0
 8007168:	70fb      	strb	r3, [r7, #3]
 800716a:	460b      	mov	r3, r1
 800716c:	70bb      	strb	r3, [r7, #2]
 800716e:	4613      	mov	r3, r2
 8007170:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8007172:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007174:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_HCD_HC_Init+0x2c>
 8007180:	2302      	movs	r3, #2
 8007182:	e09d      	b.n	80072c0 <HAL_HCD_HC_Init+0x168>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800718c:	78fa      	ldrb	r2, [r7, #3]
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	4613      	mov	r3, r2
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	440b      	add	r3, r1
 800719a:	3319      	adds	r3, #25
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80071a0:	78fa      	ldrb	r2, [r7, #3]
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	4613      	mov	r3, r2
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	1a9b      	subs	r3, r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	440b      	add	r3, r1
 80071ae:	3314      	adds	r3, #20
 80071b0:	787a      	ldrb	r2, [r7, #1]
 80071b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80071b4:	78fa      	ldrb	r2, [r7, #3]
 80071b6:	6879      	ldr	r1, [r7, #4]
 80071b8:	4613      	mov	r3, r2
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	1a9b      	subs	r3, r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	440b      	add	r3, r1
 80071c2:	3315      	adds	r3, #21
 80071c4:	78fa      	ldrb	r2, [r7, #3]
 80071c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4613      	mov	r3, r2
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	1a9b      	subs	r3, r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	3326      	adds	r3, #38	@ 0x26
 80071d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80071dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80071de:	78fa      	ldrb	r2, [r7, #3]
 80071e0:	78bb      	ldrb	r3, [r7, #2]
 80071e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e6:	b2d8      	uxtb	r0, r3
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	440b      	add	r3, r1
 80071f4:	3316      	adds	r3, #22
 80071f6:	4602      	mov	r2, r0
 80071f8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 fbc8 	bl	8007994 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8007204:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007208:	2b00      	cmp	r3, #0
 800720a:	da0a      	bge.n	8007222 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800720c:	78fa      	ldrb	r2, [r7, #3]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	3317      	adds	r3, #23
 800721c:	2201      	movs	r2, #1
 800721e:	701a      	strb	r2, [r3, #0]
 8007220:	e009      	b.n	8007236 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	011b      	lsls	r3, r3, #4
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	3317      	adds	r3, #23
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f009 fe5e 	bl	8010efc <USB_GetHostSpeed>
 8007240:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8007242:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007246:	2b01      	cmp	r3, #1
 8007248:	d10b      	bne.n	8007262 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800724a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800724e:	2b01      	cmp	r3, #1
 8007250:	d107      	bne.n	8007262 <HAL_HCD_HC_Init+0x10a>
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d104      	bne.n	8007262 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2bbc      	cmp	r3, #188	@ 0xbc
 800725c:	d901      	bls.n	8007262 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800725e:	23bc      	movs	r3, #188	@ 0xbc
 8007260:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8007262:	78fa      	ldrb	r2, [r7, #3]
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	011b      	lsls	r3, r3, #4
 800726a:	1a9b      	subs	r3, r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	3318      	adds	r3, #24
 8007272:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8007276:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8007278:	78fa      	ldrb	r2, [r7, #3]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	b298      	uxth	r0, r3
 800727e:	6879      	ldr	r1, [r7, #4]
 8007280:	4613      	mov	r3, r2
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	440b      	add	r3, r1
 800728a:	3328      	adds	r3, #40	@ 0x28
 800728c:	4602      	mov	r2, r0
 800728e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	b29b      	uxth	r3, r3
 8007298:	787c      	ldrb	r4, [r7, #1]
 800729a:	78ba      	ldrb	r2, [r7, #2]
 800729c:	78f9      	ldrb	r1, [r7, #3]
 800729e:	9302      	str	r3, [sp, #8]
 80072a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	4623      	mov	r3, r4
 80072ae:	f009 fe4d 	bl	8010f4c <USB_HC_Init>
 80072b2:	4603      	mov	r3, r0
 80072b4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd90      	pop	{r4, r7, pc}

080072c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	460b      	mov	r3, r1
 80072d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_HCD_HC_Halt+0x1e>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e00f      	b.n	8007306 <HAL_HCD_HC_Halt+0x3e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f00a f9df 	bl	80116ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8007304:	7bfb      	ldrb	r3, [r7, #15]
}
 8007306:	4618      	mov	r0, r3
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	4603      	mov	r3, r0
 8007320:	70fb      	strb	r3, [r7, #3]
 8007322:	460b      	mov	r3, r1
 8007324:	70bb      	strb	r3, [r7, #2]
 8007326:	4613      	mov	r3, r2
 8007328:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	3317      	adds	r3, #23
 800733a:	78ba      	ldrb	r2, [r7, #2]
 800733c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800733e:	78fa      	ldrb	r2, [r7, #3]
 8007340:	6879      	ldr	r1, [r7, #4]
 8007342:	4613      	mov	r3, r2
 8007344:	011b      	lsls	r3, r3, #4
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	440b      	add	r3, r1
 800734c:	3326      	adds	r3, #38	@ 0x26
 800734e:	787a      	ldrb	r2, [r7, #1]
 8007350:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8007352:	7c3b      	ldrb	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d114      	bne.n	8007382 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8007358:	78fa      	ldrb	r2, [r7, #3]
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	4613      	mov	r3, r2
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	440b      	add	r3, r1
 8007366:	332a      	adds	r3, #42	@ 0x2a
 8007368:	2203      	movs	r2, #3
 800736a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800736c:	78fa      	ldrb	r2, [r7, #3]
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	3319      	adds	r3, #25
 800737c:	7f3a      	ldrb	r2, [r7, #28]
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e009      	b.n	8007396 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007382:	78fa      	ldrb	r2, [r7, #3]
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4613      	mov	r3, r2
 8007388:	011b      	lsls	r3, r3, #4
 800738a:	1a9b      	subs	r3, r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	440b      	add	r3, r1
 8007390:	332a      	adds	r3, #42	@ 0x2a
 8007392:	2202      	movs	r2, #2
 8007394:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8007396:	787b      	ldrb	r3, [r7, #1]
 8007398:	2b03      	cmp	r3, #3
 800739a:	f200 8102 	bhi.w	80075a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800739e:	a201      	add	r2, pc, #4	@ (adr r2, 80073a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	0800758d 	.word	0x0800758d
 80073ac:	08007479 	.word	0x08007479
 80073b0:	08007503 	.word	0x08007503
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80073b4:	7c3b      	ldrb	r3, [r7, #16]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	f040 80f5 	bne.w	80075a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80073bc:	78bb      	ldrb	r3, [r7, #2]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d12d      	bne.n	800741e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80073c2:	8b3b      	ldrh	r3, [r7, #24]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d109      	bne.n	80073dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80073c8:	78fa      	ldrb	r2, [r7, #3]
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	011b      	lsls	r3, r3, #4
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	333d      	adds	r3, #61	@ 0x3d
 80073d8:	2201      	movs	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80073dc:	78fa      	ldrb	r2, [r7, #3]
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	4613      	mov	r3, r2
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	1a9b      	subs	r3, r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	440b      	add	r3, r1
 80073ea:	333d      	adds	r3, #61	@ 0x3d
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10a      	bne.n	8007408 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	1a9b      	subs	r3, r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	440b      	add	r3, r1
 8007400:	332a      	adds	r3, #42	@ 0x2a
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8007406:	e0ce      	b.n	80075a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007408:	78fa      	ldrb	r2, [r7, #3]
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	4613      	mov	r3, r2
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	1a9b      	subs	r3, r3, r2
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	440b      	add	r3, r1
 8007416:	332a      	adds	r3, #42	@ 0x2a
 8007418:	2202      	movs	r2, #2
 800741a:	701a      	strb	r2, [r3, #0]
      break;
 800741c:	e0c3      	b.n	80075a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800741e:	78fa      	ldrb	r2, [r7, #3]
 8007420:	6879      	ldr	r1, [r7, #4]
 8007422:	4613      	mov	r3, r2
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	1a9b      	subs	r3, r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	440b      	add	r3, r1
 800742c:	331a      	adds	r3, #26
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b01      	cmp	r3, #1
 8007432:	f040 80b8 	bne.w	80075a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	1a9b      	subs	r3, r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	333c      	adds	r3, #60	@ 0x3c
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800744c:	78fa      	ldrb	r2, [r7, #3]
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	4613      	mov	r3, r2
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	440b      	add	r3, r1
 800745a:	332a      	adds	r3, #42	@ 0x2a
 800745c:	2200      	movs	r2, #0
 800745e:	701a      	strb	r2, [r3, #0]
      break;
 8007460:	e0a1      	b.n	80075a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007462:	78fa      	ldrb	r2, [r7, #3]
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	1a9b      	subs	r3, r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	332a      	adds	r3, #42	@ 0x2a
 8007472:	2202      	movs	r2, #2
 8007474:	701a      	strb	r2, [r3, #0]
      break;
 8007476:	e096      	b.n	80075a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8007478:	78bb      	ldrb	r3, [r7, #2]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d120      	bne.n	80074c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800747e:	78fa      	ldrb	r2, [r7, #3]
 8007480:	6879      	ldr	r1, [r7, #4]
 8007482:	4613      	mov	r3, r2
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	1a9b      	subs	r3, r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	440b      	add	r3, r1
 800748c:	333d      	adds	r3, #61	@ 0x3d
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	6879      	ldr	r1, [r7, #4]
 8007498:	4613      	mov	r3, r2
 800749a:	011b      	lsls	r3, r3, #4
 800749c:	1a9b      	subs	r3, r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	440b      	add	r3, r1
 80074a2:	332a      	adds	r3, #42	@ 0x2a
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80074a8:	e07e      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80074aa:	78fa      	ldrb	r2, [r7, #3]
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	4613      	mov	r3, r2
 80074b0:	011b      	lsls	r3, r3, #4
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	332a      	adds	r3, #42	@ 0x2a
 80074ba:	2202      	movs	r2, #2
 80074bc:	701a      	strb	r2, [r3, #0]
      break;
 80074be:	e073      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80074c0:	78fa      	ldrb	r2, [r7, #3]
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	4613      	mov	r3, r2
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	1a9b      	subs	r3, r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	440b      	add	r3, r1
 80074ce:	333c      	adds	r3, #60	@ 0x3c
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80074d6:	78fa      	ldrb	r2, [r7, #3]
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	440b      	add	r3, r1
 80074e4:	332a      	adds	r3, #42	@ 0x2a
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]
      break;
 80074ea:	e05d      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	332a      	adds	r3, #42	@ 0x2a
 80074fc:	2202      	movs	r2, #2
 80074fe:	701a      	strb	r2, [r3, #0]
      break;
 8007500:	e052      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8007502:	78bb      	ldrb	r3, [r7, #2]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d120      	bne.n	800754a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8007508:	78fa      	ldrb	r2, [r7, #3]
 800750a:	6879      	ldr	r1, [r7, #4]
 800750c:	4613      	mov	r3, r2
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	1a9b      	subs	r3, r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	440b      	add	r3, r1
 8007516:	333d      	adds	r3, #61	@ 0x3d
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	4613      	mov	r3, r2
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	440b      	add	r3, r1
 800752c:	332a      	adds	r3, #42	@ 0x2a
 800752e:	2200      	movs	r2, #0
 8007530:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8007532:	e039      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	6879      	ldr	r1, [r7, #4]
 8007538:	4613      	mov	r3, r2
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	440b      	add	r3, r1
 8007542:	332a      	adds	r3, #42	@ 0x2a
 8007544:	2202      	movs	r2, #2
 8007546:	701a      	strb	r2, [r3, #0]
      break;
 8007548:	e02e      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	6879      	ldr	r1, [r7, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	440b      	add	r3, r1
 8007558:	333c      	adds	r3, #60	@ 0x3c
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8007560:	78fa      	ldrb	r2, [r7, #3]
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	4613      	mov	r3, r2
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	1a9b      	subs	r3, r3, r2
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	440b      	add	r3, r1
 800756e:	332a      	adds	r3, #42	@ 0x2a
 8007570:	2200      	movs	r2, #0
 8007572:	701a      	strb	r2, [r3, #0]
      break;
 8007574:	e018      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	1a9b      	subs	r3, r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	332a      	adds	r3, #42	@ 0x2a
 8007586:	2202      	movs	r2, #2
 8007588:	701a      	strb	r2, [r3, #0]
      break;
 800758a:	e00d      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800758c:	78fa      	ldrb	r2, [r7, #3]
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	332a      	adds	r3, #42	@ 0x2a
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
      break;
 80075a0:	e002      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80075a2:	bf00      	nop
 80075a4:	e000      	b.n	80075a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80075a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	1a9b      	subs	r3, r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	332c      	adds	r3, #44	@ 0x2c
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80075bc:	78fa      	ldrb	r2, [r7, #3]
 80075be:	8b39      	ldrh	r1, [r7, #24]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4403      	add	r3, r0
 80075cc:	3334      	adds	r3, #52	@ 0x34
 80075ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80075d0:	78fa      	ldrb	r2, [r7, #3]
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	4613      	mov	r3, r2
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	1a9b      	subs	r3, r3, r2
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	334c      	adds	r3, #76	@ 0x4c
 80075e0:	2200      	movs	r2, #0
 80075e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80075e4:	78fa      	ldrb	r2, [r7, #3]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	011b      	lsls	r3, r3, #4
 80075ec:	1a9b      	subs	r3, r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	3338      	adds	r3, #56	@ 0x38
 80075f4:	2200      	movs	r2, #0
 80075f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	6879      	ldr	r1, [r7, #4]
 80075fc:	4613      	mov	r3, r2
 80075fe:	011b      	lsls	r3, r3, #4
 8007600:	1a9b      	subs	r3, r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	3315      	adds	r3, #21
 8007608:	78fa      	ldrb	r2, [r7, #3]
 800760a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4613      	mov	r3, r2
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	334d      	adds	r3, #77	@ 0x4d
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6818      	ldr	r0, [r3, #0]
 8007624:	78fa      	ldrb	r2, [r7, #3]
 8007626:	4613      	mov	r3, r2
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	3310      	adds	r3, #16
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	4413      	add	r3, r2
 8007634:	1d19      	adds	r1, r3, #4
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	799b      	ldrb	r3, [r3, #6]
 800763a:	461a      	mov	r2, r3
 800763c:	f009 fdb2 	bl	80111a4 <USB_HC_StartXfer>
 8007640:	4603      	mov	r3, r0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop

0800764c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4618      	mov	r0, r3
 8007664:	f009 faac 	bl	8010bc0 <USB_GetMode>
 8007668:	4603      	mov	r3, r0
 800766a:	2b01      	cmp	r3, #1
 800766c:	f040 80fb 	bne.w	8007866 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4618      	mov	r0, r3
 8007676:	f009 fa6f 	bl	8010b58 <USB_ReadInterrupts>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80f1 	beq.w	8007864 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4618      	mov	r0, r3
 8007688:	f009 fa66 	bl	8010b58 <USB_ReadInterrupts>
 800768c:	4603      	mov	r3, r0
 800768e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007696:	d104      	bne.n	80076a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80076a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f009 fa56 	bl	8010b58 <USB_ReadInterrupts>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076b6:	d104      	bne.n	80076c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80076c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f009 fa46 	bl	8010b58 <USB_ReadInterrupts>
 80076cc:	4603      	mov	r3, r0
 80076ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80076d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80076d6:	d104      	bne.n	80076e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80076e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f009 fa36 	bl	8010b58 <USB_ReadInterrupts>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d103      	bne.n	80076fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2202      	movs	r2, #2
 80076fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4618      	mov	r0, r3
 8007704:	f009 fa28 	bl	8010b58 <USB_ReadInterrupts>
 8007708:	4603      	mov	r3, r0
 800770a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800770e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007712:	d120      	bne.n	8007756 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800771c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d113      	bne.n	8007756 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800772e:	2110      	movs	r1, #16
 8007730:	6938      	ldr	r0, [r7, #16]
 8007732:	f009 f91b 	bl	801096c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8007736:	6938      	ldr	r0, [r7, #16]
 8007738:	f009 f94a 	bl	80109d0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	7a5b      	ldrb	r3, [r3, #9]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d105      	bne.n	8007750 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2101      	movs	r1, #1
 800774a:	4618      	mov	r0, r3
 800774c:	f009 fb36 	bl	8010dbc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f011 ffc5 	bl	80196e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4618      	mov	r0, r3
 800775c:	f009 f9fc 	bl	8010b58 <USB_ReadInterrupts>
 8007760:	4603      	mov	r3, r0
 8007762:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007766:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800776a:	d102      	bne.n	8007772 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f001 fd4d 	bl	800920c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4618      	mov	r0, r3
 8007778:	f009 f9ee 	bl	8010b58 <USB_ReadInterrupts>
 800777c:	4603      	mov	r3, r0
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b08      	cmp	r3, #8
 8007784:	d106      	bne.n	8007794 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f011 ff8e 	bl	80196a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2208      	movs	r2, #8
 8007792:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4618      	mov	r0, r3
 800779a:	f009 f9dd 	bl	8010b58 <USB_ReadInterrupts>
 800779e:	4603      	mov	r3, r0
 80077a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077a8:	d139      	bne.n	800781e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f009 ff72 	bl	8011698 <USB_HC_ReadInterrupt>
 80077b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80077b6:	2300      	movs	r3, #0
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	e025      	b.n	8007808 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f003 030f 	and.w	r3, r3, #15
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	fa22 f303 	lsr.w	r3, r2, r3
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d018      	beq.n	8007802 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077e6:	d106      	bne.n	80077f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f905 	bl	80079fe <HCD_HC_IN_IRQHandler>
 80077f4:	e005      	b.n	8007802 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 ff67 	bl	80086d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	3301      	adds	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	795b      	ldrb	r3, [r3, #5]
 800780c:	461a      	mov	r2, r3
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	4293      	cmp	r3, r2
 8007812:	d3d3      	bcc.n	80077bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800781c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4618      	mov	r0, r3
 8007824:	f009 f998 	bl	8010b58 <USB_ReadInterrupts>
 8007828:	4603      	mov	r3, r0
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b10      	cmp	r3, #16
 8007830:	d101      	bne.n	8007836 <HAL_HCD_IRQHandler+0x1ea>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <HAL_HCD_IRQHandler+0x1ec>
 8007836:	2300      	movs	r3, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d014      	beq.n	8007866 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0210 	bic.w	r2, r2, #16
 800784a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 fbfe 	bl	800904e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0210 	orr.w	r2, r2, #16
 8007860:	619a      	str	r2, [r3, #24]
 8007862:	e000      	b.n	8007866 <HAL_HCD_IRQHandler+0x21a>
      return;
 8007864:	bf00      	nop
    }
  }
}
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800787a:	2b01      	cmp	r3, #1
 800787c:	d101      	bne.n	8007882 <HAL_HCD_Start+0x16>
 800787e:	2302      	movs	r3, #2
 8007880:	e013      	b.n	80078aa <HAL_HCD_Start+0x3e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2101      	movs	r1, #1
 8007890:	4618      	mov	r0, r3
 8007892:	f009 fafa 	bl	8010e8a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f008 fff8 	bl	8010890 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3708      	adds	r7, #8
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}

080078b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_HCD_Stop+0x16>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e00d      	b.n	80078e4 <HAL_HCD_Stop+0x32>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f00a f84d 	bl	8011974 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f009 fa9c 	bl	8010e36 <USB_ResetPort>
 80078fe:	4603      	mov	r3, r0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	460b      	mov	r3, r1
 8007912:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007914:	78fa      	ldrb	r2, [r7, #3]
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	4613      	mov	r3, r2
 800791a:	011b      	lsls	r3, r3, #4
 800791c:	1a9b      	subs	r3, r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	440b      	add	r3, r1
 8007922:	334c      	adds	r3, #76	@ 0x4c
 8007924:	781b      	ldrb	r3, [r3, #0]
}
 8007926:	4618      	mov	r0, r3
 8007928:	370c      	adds	r7, #12
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8007932:	b480      	push	{r7}
 8007934:	b083      	sub	sp, #12
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
 800793a:	460b      	mov	r3, r1
 800793c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800793e:	78fa      	ldrb	r2, [r7, #3]
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	1a9b      	subs	r3, r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	3338      	adds	r3, #56	@ 0x38
 800794e:	681b      	ldr	r3, [r3, #0]
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4618      	mov	r0, r3
 800796a:	f009 fade 	bl	8010f2a <USB_GetCurrentFrame>
 800796e:	4603      	mov	r3, r0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4618      	mov	r0, r3
 8007986:	f009 fab9 	bl	8010efc <USB_GetHostSpeed>
 800798a:	4603      	mov	r3, r0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	4613      	mov	r3, r2
 80079a6:	011b      	lsls	r3, r3, #4
 80079a8:	1a9b      	subs	r3, r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	440b      	add	r3, r1
 80079ae:	331a      	adds	r3, #26
 80079b0:	2200      	movs	r2, #0
 80079b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80079b4:	78fa      	ldrb	r2, [r7, #3]
 80079b6:	6879      	ldr	r1, [r7, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	011b      	lsls	r3, r3, #4
 80079bc:	1a9b      	subs	r3, r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	331b      	adds	r3, #27
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80079c8:	78fa      	ldrb	r2, [r7, #3]
 80079ca:	6879      	ldr	r1, [r7, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	440b      	add	r3, r1
 80079d6:	3325      	adds	r3, #37	@ 0x25
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80079dc:	78fa      	ldrb	r2, [r7, #3]
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4613      	mov	r3, r2
 80079e2:	011b      	lsls	r3, r3, #4
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	3324      	adds	r3, #36	@ 0x24
 80079ec:	2200      	movs	r2, #0
 80079ee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	460b      	mov	r3, r1
 8007a08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	78fa      	ldrb	r2, [r7, #3]
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f009 f8ae 	bl	8010b7e <USB_ReadChInterrupts>
 8007a22:	4603      	mov	r3, r0
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b04      	cmp	r3, #4
 8007a2a:	d11a      	bne.n	8007a62 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a38:	461a      	mov	r2, r3
 8007a3a:	2304      	movs	r3, #4
 8007a3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007a3e:	78fa      	ldrb	r2, [r7, #3]
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	4613      	mov	r3, r2
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	1a9b      	subs	r3, r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	440b      	add	r3, r1
 8007a4c:	334d      	adds	r3, #77	@ 0x4d
 8007a4e:	2207      	movs	r2, #7
 8007a50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	78fa      	ldrb	r2, [r7, #3]
 8007a58:	4611      	mov	r1, r2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f009 fe2d 	bl	80116ba <USB_HC_Halt>
 8007a60:	e09e      	b.n	8007ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f009 f887 	bl	8010b7e <USB_ReadChInterrupts>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a7a:	d11b      	bne.n	8007ab4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8007a7c:	78fb      	ldrb	r3, [r7, #3]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8007a90:	78fa      	ldrb	r2, [r7, #3]
 8007a92:	6879      	ldr	r1, [r7, #4]
 8007a94:	4613      	mov	r3, r2
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	1a9b      	subs	r3, r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	440b      	add	r3, r1
 8007a9e:	334d      	adds	r3, #77	@ 0x4d
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	78fa      	ldrb	r2, [r7, #3]
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f009 fe04 	bl	80116ba <USB_HC_Halt>
 8007ab2:	e075      	b.n	8007ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	4611      	mov	r1, r2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f009 f85e 	bl	8010b7e <USB_ReadChInterrupts>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d11a      	bne.n	8007b02 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ad8:	461a      	mov	r2, r3
 8007ada:	2308      	movs	r3, #8
 8007adc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007ade:	78fa      	ldrb	r2, [r7, #3]
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	334d      	adds	r3, #77	@ 0x4d
 8007aee:	2206      	movs	r2, #6
 8007af0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	78fa      	ldrb	r2, [r7, #3]
 8007af8:	4611      	mov	r1, r2
 8007afa:	4618      	mov	r0, r3
 8007afc:	f009 fddd 	bl	80116ba <USB_HC_Halt>
 8007b00:	e04e      	b.n	8007ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	4611      	mov	r1, r2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f009 f837 	bl	8010b7e <USB_ReadChInterrupts>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1a:	d11b      	bne.n	8007b54 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b28:	461a      	mov	r2, r3
 8007b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	6879      	ldr	r1, [r7, #4]
 8007b34:	4613      	mov	r3, r2
 8007b36:	011b      	lsls	r3, r3, #4
 8007b38:	1a9b      	subs	r3, r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	440b      	add	r3, r1
 8007b3e:	334d      	adds	r3, #77	@ 0x4d
 8007b40:	2209      	movs	r2, #9
 8007b42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	78fa      	ldrb	r2, [r7, #3]
 8007b4a:	4611      	mov	r1, r2
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f009 fdb4 	bl	80116ba <USB_HC_Halt>
 8007b52:	e025      	b.n	8007ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f009 f80e 	bl	8010b7e <USB_ReadChInterrupts>
 8007b62:	4603      	mov	r3, r0
 8007b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b68:	2b80      	cmp	r3, #128	@ 0x80
 8007b6a:	d119      	bne.n	8007ba0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007b6c:	78fb      	ldrb	r3, [r7, #3]
 8007b6e:	015a      	lsls	r2, r3, #5
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	4413      	add	r3, r2
 8007b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b78:	461a      	mov	r2, r3
 8007b7a:	2380      	movs	r3, #128	@ 0x80
 8007b7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007b7e:	78fa      	ldrb	r2, [r7, #3]
 8007b80:	6879      	ldr	r1, [r7, #4]
 8007b82:	4613      	mov	r3, r2
 8007b84:	011b      	lsls	r3, r3, #4
 8007b86:	1a9b      	subs	r3, r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	440b      	add	r3, r1
 8007b8c:	334d      	adds	r3, #77	@ 0x4d
 8007b8e:	2207      	movs	r2, #7
 8007b90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f009 fd8d 	bl	80116ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	78fa      	ldrb	r2, [r7, #3]
 8007ba6:	4611      	mov	r1, r2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f008 ffe8 	bl	8010b7e <USB_ReadChInterrupts>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bb8:	d112      	bne.n	8007be0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	78fa      	ldrb	r2, [r7, #3]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f009 fd79 	bl	80116ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007bda:	6093      	str	r3, [r2, #8]
 8007bdc:	f000 bd75 	b.w	80086ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	78fa      	ldrb	r2, [r7, #3]
 8007be6:	4611      	mov	r1, r2
 8007be8:	4618      	mov	r0, r3
 8007bea:	f008 ffc8 	bl	8010b7e <USB_ReadChInterrupts>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	f040 8128 	bne.w	8007e4a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007bfa:	78fb      	ldrb	r3, [r7, #3]
 8007bfc:	015a      	lsls	r2, r3, #5
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	4413      	add	r3, r2
 8007c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c06:	461a      	mov	r2, r3
 8007c08:	2320      	movs	r3, #32
 8007c0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007c0c:	78fa      	ldrb	r2, [r7, #3]
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	1a9b      	subs	r3, r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	331b      	adds	r3, #27
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d119      	bne.n	8007c56 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007c22:	78fa      	ldrb	r2, [r7, #3]
 8007c24:	6879      	ldr	r1, [r7, #4]
 8007c26:	4613      	mov	r3, r2
 8007c28:	011b      	lsls	r3, r3, #4
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	440b      	add	r3, r1
 8007c30:	331b      	adds	r3, #27
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	0151      	lsls	r1, r2, #5
 8007c48:	693a      	ldr	r2, [r7, #16]
 8007c4a:	440a      	add	r2, r1
 8007c4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c54:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	799b      	ldrb	r3, [r3, #6]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01b      	beq.n	8007c96 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8007c5e:	78fa      	ldrb	r2, [r7, #3]
 8007c60:	6879      	ldr	r1, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	3330      	adds	r3, #48	@ 0x30
 8007c6e:	6819      	ldr	r1, [r3, #0]
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c82:	78fa      	ldrb	r2, [r7, #3]
 8007c84:	1ac9      	subs	r1, r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4403      	add	r3, r0
 8007c92:	3338      	adds	r3, #56	@ 0x38
 8007c94:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	4613      	mov	r3, r2
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	440b      	add	r3, r1
 8007ca4:	334d      	adds	r3, #77	@ 0x4d
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8007caa:	78fa      	ldrb	r2, [r7, #3]
 8007cac:	6879      	ldr	r1, [r7, #4]
 8007cae:	4613      	mov	r3, r2
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	1a9b      	subs	r3, r3, r2
 8007cb4:	009b      	lsls	r3, r3, #2
 8007cb6:	440b      	add	r3, r1
 8007cb8:	3344      	adds	r3, #68	@ 0x44
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2301      	movs	r3, #1
 8007cce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007cd0:	78fa      	ldrb	r2, [r7, #3]
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	1a9b      	subs	r3, r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	440b      	add	r3, r1
 8007cde:	3326      	adds	r3, #38	@ 0x26
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007ce6:	78fa      	ldrb	r2, [r7, #3]
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	4613      	mov	r3, r2
 8007cec:	011b      	lsls	r3, r3, #4
 8007cee:	1a9b      	subs	r3, r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	440b      	add	r3, r1
 8007cf4:	3326      	adds	r3, #38	@ 0x26
 8007cf6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d110      	bne.n	8007d1e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f009 fcd8 	bl	80116ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d16:	461a      	mov	r2, r3
 8007d18:	2310      	movs	r3, #16
 8007d1a:	6093      	str	r3, [r2, #8]
 8007d1c:	e03d      	b.n	8007d9a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007d1e:	78fa      	ldrb	r2, [r7, #3]
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	4613      	mov	r3, r2
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	1a9b      	subs	r3, r3, r2
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	3326      	adds	r3, #38	@ 0x26
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b03      	cmp	r3, #3
 8007d32:	d00a      	beq.n	8007d4a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	4613      	mov	r3, r2
 8007d3a:	011b      	lsls	r3, r3, #4
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	440b      	add	r3, r1
 8007d42:	3326      	adds	r3, #38	@ 0x26
 8007d44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d127      	bne.n	8007d9a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	78fa      	ldrb	r2, [r7, #3]
 8007d5a:	0151      	lsls	r1, r2, #5
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	440a      	add	r2, r1
 8007d60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d68:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007d6a:	78fa      	ldrb	r2, [r7, #3]
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	011b      	lsls	r3, r3, #4
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	440b      	add	r3, r1
 8007d78:	334c      	adds	r3, #76	@ 0x4c
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007d7e:	78fa      	ldrb	r2, [r7, #3]
 8007d80:	6879      	ldr	r1, [r7, #4]
 8007d82:	4613      	mov	r3, r2
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	334c      	adds	r3, #76	@ 0x4c
 8007d8e:	781a      	ldrb	r2, [r3, #0]
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	4619      	mov	r1, r3
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f011 fcb1 	bl	80196fc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	799b      	ldrb	r3, [r3, #6]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d13b      	bne.n	8007e1a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007da2:	78fa      	ldrb	r2, [r7, #3]
 8007da4:	6879      	ldr	r1, [r7, #4]
 8007da6:	4613      	mov	r3, r2
 8007da8:	011b      	lsls	r3, r3, #4
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	440b      	add	r3, r1
 8007db0:	3338      	adds	r3, #56	@ 0x38
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	78fa      	ldrb	r2, [r7, #3]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	011b      	lsls	r3, r3, #4
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	4403      	add	r3, r0
 8007dc2:	3328      	adds	r3, #40	@ 0x28
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	440b      	add	r3, r1
 8007dc8:	1e59      	subs	r1, r3, #1
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	011b      	lsls	r3, r3, #4
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4403      	add	r3, r0
 8007dd8:	3328      	adds	r3, #40	@ 0x28
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8470 	beq.w	80086ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8007dea:	78fa      	ldrb	r2, [r7, #3]
 8007dec:	6879      	ldr	r1, [r7, #4]
 8007dee:	4613      	mov	r3, r2
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	440b      	add	r3, r1
 8007df8:	333c      	adds	r3, #60	@ 0x3c
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	78fa      	ldrb	r2, [r7, #3]
 8007dfe:	f083 0301 	eor.w	r3, r3, #1
 8007e02:	b2d8      	uxtb	r0, r3
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	4613      	mov	r3, r2
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	1a9b      	subs	r3, r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	440b      	add	r3, r1
 8007e10:	333c      	adds	r3, #60	@ 0x3c
 8007e12:	4602      	mov	r2, r0
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	f000 bc58 	b.w	80086ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	6879      	ldr	r1, [r7, #4]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	011b      	lsls	r3, r3, #4
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	440b      	add	r3, r1
 8007e28:	333c      	adds	r3, #60	@ 0x3c
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	f083 0301 	eor.w	r3, r3, #1
 8007e32:	b2d8      	uxtb	r0, r3
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	4613      	mov	r3, r2
 8007e38:	011b      	lsls	r3, r3, #4
 8007e3a:	1a9b      	subs	r3, r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	333c      	adds	r3, #60	@ 0x3c
 8007e42:	4602      	mov	r2, r0
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	f000 bc40 	b.w	80086ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	4611      	mov	r1, r2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f008 fe93 	bl	8010b7e <USB_ReadChInterrupts>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b20      	cmp	r3, #32
 8007e60:	d131      	bne.n	8007ec6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e6e:	461a      	mov	r2, r3
 8007e70:	2320      	movs	r3, #32
 8007e72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	1a9b      	subs	r3, r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	440b      	add	r3, r1
 8007e82:	331a      	adds	r3, #26
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	f040 841f 	bne.w	80086ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8007e8c:	78fa      	ldrb	r2, [r7, #3]
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	4613      	mov	r3, r2
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	440b      	add	r3, r1
 8007e9a:	331b      	adds	r3, #27
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007ea0:	78fa      	ldrb	r2, [r7, #3]
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	011b      	lsls	r3, r3, #4
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	440b      	add	r3, r1
 8007eae:	334d      	adds	r3, #77	@ 0x4d
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	78fa      	ldrb	r2, [r7, #3]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f009 fbfc 	bl	80116ba <USB_HC_Halt>
 8007ec2:	f000 bc02 	b.w	80086ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	78fa      	ldrb	r2, [r7, #3]
 8007ecc:	4611      	mov	r1, r2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f008 fe55 	bl	8010b7e <USB_ReadChInterrupts>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	f040 8305 	bne.w	80084ea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	015a      	lsls	r2, r3, #5
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	4413      	add	r3, r2
 8007ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eec:	461a      	mov	r2, r3
 8007eee:	2302      	movs	r3, #2
 8007ef0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007ef2:	78fa      	ldrb	r2, [r7, #3]
 8007ef4:	6879      	ldr	r1, [r7, #4]
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	1a9b      	subs	r3, r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	334d      	adds	r3, #77	@ 0x4d
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d114      	bne.n	8007f32 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	334d      	adds	r3, #77	@ 0x4d
 8007f18:	2202      	movs	r2, #2
 8007f1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007f1c:	78fa      	ldrb	r2, [r7, #3]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	334c      	adds	r3, #76	@ 0x4c
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
 8007f30:	e2cc      	b.n	80084cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	334d      	adds	r3, #77	@ 0x4d
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b06      	cmp	r3, #6
 8007f46:	d114      	bne.n	8007f72 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007f48:	78fa      	ldrb	r2, [r7, #3]
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	011b      	lsls	r3, r3, #4
 8007f50:	1a9b      	subs	r3, r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	334d      	adds	r3, #77	@ 0x4d
 8007f58:	2202      	movs	r2, #2
 8007f5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8007f5c:	78fa      	ldrb	r2, [r7, #3]
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	4613      	mov	r3, r2
 8007f62:	011b      	lsls	r3, r3, #4
 8007f64:	1a9b      	subs	r3, r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	334c      	adds	r3, #76	@ 0x4c
 8007f6c:	2205      	movs	r2, #5
 8007f6e:	701a      	strb	r2, [r3, #0]
 8007f70:	e2ac      	b.n	80084cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007f72:	78fa      	ldrb	r2, [r7, #3]
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	4613      	mov	r3, r2
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	1a9b      	subs	r3, r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	334d      	adds	r3, #77	@ 0x4d
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	2b07      	cmp	r3, #7
 8007f86:	d00b      	beq.n	8007fa0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007f88:	78fa      	ldrb	r2, [r7, #3]
 8007f8a:	6879      	ldr	r1, [r7, #4]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	011b      	lsls	r3, r3, #4
 8007f90:	1a9b      	subs	r3, r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	440b      	add	r3, r1
 8007f96:	334d      	adds	r3, #77	@ 0x4d
 8007f98:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007f9a:	2b09      	cmp	r3, #9
 8007f9c:	f040 80a6 	bne.w	80080ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007fa0:	78fa      	ldrb	r2, [r7, #3]
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	1a9b      	subs	r3, r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	334d      	adds	r3, #77	@ 0x4d
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	1a9b      	subs	r3, r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	440b      	add	r3, r1
 8007fc2:	3344      	adds	r3, #68	@ 0x44
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	1c59      	adds	r1, r3, #1
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	011b      	lsls	r3, r3, #4
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4403      	add	r3, r0
 8007fd4:	3344      	adds	r3, #68	@ 0x44
 8007fd6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007fd8:	78fa      	ldrb	r2, [r7, #3]
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	011b      	lsls	r3, r3, #4
 8007fe0:	1a9b      	subs	r3, r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3344      	adds	r3, #68	@ 0x44
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d943      	bls.n	8008076 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	6879      	ldr	r1, [r7, #4]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	011b      	lsls	r3, r3, #4
 8007ff6:	1a9b      	subs	r3, r3, r2
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	440b      	add	r3, r1
 8007ffc:	3344      	adds	r3, #68	@ 0x44
 8007ffe:	2200      	movs	r2, #0
 8008000:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	6879      	ldr	r1, [r7, #4]
 8008006:	4613      	mov	r3, r2
 8008008:	011b      	lsls	r3, r3, #4
 800800a:	1a9b      	subs	r3, r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	440b      	add	r3, r1
 8008010:	331a      	adds	r3, #26
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d123      	bne.n	8008060 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008018:	78fa      	ldrb	r2, [r7, #3]
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	4613      	mov	r3, r2
 800801e:	011b      	lsls	r3, r3, #4
 8008020:	1a9b      	subs	r3, r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	440b      	add	r3, r1
 8008026:	331b      	adds	r3, #27
 8008028:	2200      	movs	r2, #0
 800802a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800802c:	78fa      	ldrb	r2, [r7, #3]
 800802e:	6879      	ldr	r1, [r7, #4]
 8008030:	4613      	mov	r3, r2
 8008032:	011b      	lsls	r3, r3, #4
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	440b      	add	r3, r1
 800803a:	331c      	adds	r3, #28
 800803c:	2200      	movs	r2, #0
 800803e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	0151      	lsls	r1, r2, #5
 8008052:	693a      	ldr	r2, [r7, #16]
 8008054:	440a      	add	r2, r1
 8008056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800805a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800805e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008060:	78fa      	ldrb	r2, [r7, #3]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4613      	mov	r3, r2
 8008066:	011b      	lsls	r3, r3, #4
 8008068:	1a9b      	subs	r3, r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	440b      	add	r3, r1
 800806e:	334c      	adds	r3, #76	@ 0x4c
 8008070:	2204      	movs	r2, #4
 8008072:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008074:	e229      	b.n	80084ca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	6879      	ldr	r1, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	011b      	lsls	r3, r3, #4
 800807e:	1a9b      	subs	r3, r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	440b      	add	r3, r1
 8008084:	334c      	adds	r3, #76	@ 0x4c
 8008086:	2202      	movs	r2, #2
 8008088:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800808a:	78fa      	ldrb	r2, [r7, #3]
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	4613      	mov	r3, r2
 8008090:	011b      	lsls	r3, r3, #4
 8008092:	1a9b      	subs	r3, r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	440b      	add	r3, r1
 8008098:	3326      	adds	r3, #38	@ 0x26
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00b      	beq.n	80080b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80080a0:	78fa      	ldrb	r2, [r7, #3]
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	4613      	mov	r3, r2
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	440b      	add	r3, r1
 80080ae:	3326      	adds	r3, #38	@ 0x26
 80080b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	f040 8209 	bne.w	80084ca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80080ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e4:	461a      	mov	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80080ea:	e1ee      	b.n	80084ca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	334d      	adds	r3, #77	@ 0x4d
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b05      	cmp	r3, #5
 8008100:	f040 80c8 	bne.w	8008294 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008104:	78fa      	ldrb	r2, [r7, #3]
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	4613      	mov	r3, r2
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	440b      	add	r3, r1
 8008112:	334d      	adds	r3, #77	@ 0x4d
 8008114:	2202      	movs	r2, #2
 8008116:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008118:	78fa      	ldrb	r2, [r7, #3]
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	011b      	lsls	r3, r3, #4
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	331b      	adds	r3, #27
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	2b01      	cmp	r3, #1
 800812c:	f040 81ce 	bne.w	80084cc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008130:	78fa      	ldrb	r2, [r7, #3]
 8008132:	6879      	ldr	r1, [r7, #4]
 8008134:	4613      	mov	r3, r2
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	1a9b      	subs	r3, r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	440b      	add	r3, r1
 800813e:	3326      	adds	r3, #38	@ 0x26
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	2b03      	cmp	r3, #3
 8008144:	d16b      	bne.n	800821e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8008146:	78fa      	ldrb	r2, [r7, #3]
 8008148:	6879      	ldr	r1, [r7, #4]
 800814a:	4613      	mov	r3, r2
 800814c:	011b      	lsls	r3, r3, #4
 800814e:	1a9b      	subs	r3, r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	440b      	add	r3, r1
 8008154:	3348      	adds	r3, #72	@ 0x48
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	1c59      	adds	r1, r3, #1
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4613      	mov	r3, r2
 800815e:	011b      	lsls	r3, r3, #4
 8008160:	1a9b      	subs	r3, r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4403      	add	r3, r0
 8008166:	3348      	adds	r3, #72	@ 0x48
 8008168:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800816a:	78fa      	ldrb	r2, [r7, #3]
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	4613      	mov	r3, r2
 8008170:	011b      	lsls	r3, r3, #4
 8008172:	1a9b      	subs	r3, r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	440b      	add	r3, r1
 8008178:	3348      	adds	r3, #72	@ 0x48
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b02      	cmp	r3, #2
 800817e:	d943      	bls.n	8008208 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8008180:	78fa      	ldrb	r2, [r7, #3]
 8008182:	6879      	ldr	r1, [r7, #4]
 8008184:	4613      	mov	r3, r2
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	3348      	adds	r3, #72	@ 0x48
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8008194:	78fa      	ldrb	r2, [r7, #3]
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	4613      	mov	r3, r2
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	440b      	add	r3, r1
 80081a2:	331b      	adds	r3, #27
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80081a8:	78fa      	ldrb	r2, [r7, #3]
 80081aa:	6879      	ldr	r1, [r7, #4]
 80081ac:	4613      	mov	r3, r2
 80081ae:	011b      	lsls	r3, r3, #4
 80081b0:	1a9b      	subs	r3, r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	440b      	add	r3, r1
 80081b6:	3344      	adds	r3, #68	@ 0x44
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d809      	bhi.n	80081d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	6879      	ldr	r1, [r7, #4]
 80081c2:	4613      	mov	r3, r2
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	1a9b      	subs	r3, r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	440b      	add	r3, r1
 80081cc:	331c      	adds	r3, #28
 80081ce:	2201      	movs	r2, #1
 80081d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	78fa      	ldrb	r2, [r7, #3]
 80081e2:	0151      	lsls	r1, r2, #5
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	440a      	add	r2, r1
 80081e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80081f2:	78fa      	ldrb	r2, [r7, #3]
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	011b      	lsls	r3, r3, #4
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	334c      	adds	r3, #76	@ 0x4c
 8008202:	2204      	movs	r2, #4
 8008204:	701a      	strb	r2, [r3, #0]
 8008206:	e014      	b.n	8008232 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008208:	78fa      	ldrb	r2, [r7, #3]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	334c      	adds	r3, #76	@ 0x4c
 8008218:	2202      	movs	r2, #2
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	e009      	b.n	8008232 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	334c      	adds	r3, #76	@ 0x4c
 800822e:	2202      	movs	r2, #2
 8008230:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	4613      	mov	r3, r2
 8008238:	011b      	lsls	r3, r3, #4
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	440b      	add	r3, r1
 8008240:	3326      	adds	r3, #38	@ 0x26
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00b      	beq.n	8008260 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008248:	78fa      	ldrb	r2, [r7, #3]
 800824a:	6879      	ldr	r1, [r7, #4]
 800824c:	4613      	mov	r3, r2
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	3326      	adds	r3, #38	@ 0x26
 8008258:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800825a:	2b02      	cmp	r3, #2
 800825c:	f040 8136 	bne.w	80084cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	4413      	add	r3, r2
 8008268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008276:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800827e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	4413      	add	r3, r2
 8008288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800828c:	461a      	mov	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6013      	str	r3, [r2, #0]
 8008292:	e11b      	b.n	80084cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	6879      	ldr	r1, [r7, #4]
 8008298:	4613      	mov	r3, r2
 800829a:	011b      	lsls	r3, r3, #4
 800829c:	1a9b      	subs	r3, r3, r2
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	440b      	add	r3, r1
 80082a2:	334d      	adds	r3, #77	@ 0x4d
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	f040 8081 	bne.w	80083ae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	6879      	ldr	r1, [r7, #4]
 80082b0:	4613      	mov	r3, r2
 80082b2:	011b      	lsls	r3, r3, #4
 80082b4:	1a9b      	subs	r3, r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	334d      	adds	r3, #77	@ 0x4d
 80082bc:	2202      	movs	r2, #2
 80082be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80082c0:	78fa      	ldrb	r2, [r7, #3]
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	4613      	mov	r3, r2
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	1a9b      	subs	r3, r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	440b      	add	r3, r1
 80082ce:	331b      	adds	r3, #27
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	f040 80fa 	bne.w	80084cc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	4613      	mov	r3, r2
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	334c      	adds	r3, #76	@ 0x4c
 80082e8:	2202      	movs	r2, #2
 80082ea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80082ec:	78fb      	ldrb	r3, [r7, #3]
 80082ee:	015a      	lsls	r2, r3, #5
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	4413      	add	r3, r2
 80082f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	0151      	lsls	r1, r2, #5
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	440a      	add	r2, r1
 8008302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800830a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	015a      	lsls	r2, r3, #5
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	4413      	add	r3, r2
 8008314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	78fa      	ldrb	r2, [r7, #3]
 800831c:	0151      	lsls	r1, r2, #5
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	440a      	add	r2, r1
 8008322:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800832a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	4413      	add	r3, r2
 8008334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	78fa      	ldrb	r2, [r7, #3]
 800833c:	0151      	lsls	r1, r2, #5
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	440a      	add	r2, r1
 8008342:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008346:	f023 0320 	bic.w	r3, r3, #32
 800834a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	3326      	adds	r3, #38	@ 0x26
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00b      	beq.n	800837a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008362:	78fa      	ldrb	r2, [r7, #3]
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	3326      	adds	r3, #38	@ 0x26
 8008372:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008374:	2b02      	cmp	r3, #2
 8008376:	f040 80a9 	bne.w	80084cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	4413      	add	r3, r2
 8008382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008390:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008398:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083a6:	461a      	mov	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	e08e      	b.n	80084cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	011b      	lsls	r3, r3, #4
 80083b6:	1a9b      	subs	r3, r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	334d      	adds	r3, #77	@ 0x4d
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d143      	bne.n	800844c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	6879      	ldr	r1, [r7, #4]
 80083c8:	4613      	mov	r3, r2
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	1a9b      	subs	r3, r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	334d      	adds	r3, #77	@ 0x4d
 80083d4:	2202      	movs	r2, #2
 80083d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80083d8:	78fa      	ldrb	r2, [r7, #3]
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	4613      	mov	r3, r2
 80083de:	011b      	lsls	r3, r3, #4
 80083e0:	1a9b      	subs	r3, r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	440b      	add	r3, r1
 80083e6:	334c      	adds	r3, #76	@ 0x4c
 80083e8:	2202      	movs	r2, #2
 80083ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80083ec:	78fa      	ldrb	r2, [r7, #3]
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	4613      	mov	r3, r2
 80083f2:	011b      	lsls	r3, r3, #4
 80083f4:	1a9b      	subs	r3, r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	440b      	add	r3, r1
 80083fa:	3326      	adds	r3, #38	@ 0x26
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008402:	78fa      	ldrb	r2, [r7, #3]
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4613      	mov	r3, r2
 8008408:	011b      	lsls	r3, r3, #4
 800840a:	1a9b      	subs	r3, r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	3326      	adds	r3, #38	@ 0x26
 8008412:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008414:	2b02      	cmp	r3, #2
 8008416:	d159      	bne.n	80084cc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008418:	78fb      	ldrb	r3, [r7, #3]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800842e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008436:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	4413      	add	r3, r2
 8008440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008444:	461a      	mov	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	e03f      	b.n	80084cc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	1a9b      	subs	r3, r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	334d      	adds	r3, #77	@ 0x4d
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b08      	cmp	r3, #8
 8008460:	d126      	bne.n	80084b0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	4613      	mov	r3, r2
 8008468:	011b      	lsls	r3, r3, #4
 800846a:	1a9b      	subs	r3, r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	334d      	adds	r3, #77	@ 0x4d
 8008472:	2202      	movs	r2, #2
 8008474:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008476:	78fa      	ldrb	r2, [r7, #3]
 8008478:	6879      	ldr	r1, [r7, #4]
 800847a:	4613      	mov	r3, r2
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	1a9b      	subs	r3, r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	440b      	add	r3, r1
 8008484:	3344      	adds	r3, #68	@ 0x44
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	1c59      	adds	r1, r3, #1
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4403      	add	r3, r0
 8008496:	3344      	adds	r3, #68	@ 0x44
 8008498:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800849a:	78fa      	ldrb	r2, [r7, #3]
 800849c:	6879      	ldr	r1, [r7, #4]
 800849e:	4613      	mov	r3, r2
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	334c      	adds	r3, #76	@ 0x4c
 80084aa:	2204      	movs	r2, #4
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e00d      	b.n	80084cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80084b0:	78fa      	ldrb	r2, [r7, #3]
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	1a9b      	subs	r3, r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	334d      	adds	r3, #77	@ 0x4d
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	f000 8100 	beq.w	80086c8 <HCD_HC_IN_IRQHandler+0xcca>
 80084c8:	e000      	b.n	80084cc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80084ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80084cc:	78fa      	ldrb	r2, [r7, #3]
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4613      	mov	r3, r2
 80084d2:	011b      	lsls	r3, r3, #4
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	440b      	add	r3, r1
 80084da:	334c      	adds	r3, #76	@ 0x4c
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	78fb      	ldrb	r3, [r7, #3]
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f011 f90a 	bl	80196fc <HAL_HCD_HC_NotifyURBChange_Callback>
 80084e8:	e0ef      	b.n	80086ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	78fa      	ldrb	r2, [r7, #3]
 80084f0:	4611      	mov	r1, r2
 80084f2:	4618      	mov	r0, r3
 80084f4:	f008 fb43 	bl	8010b7e <USB_ReadChInterrupts>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084fe:	2b40      	cmp	r3, #64	@ 0x40
 8008500:	d12f      	bne.n	8008562 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8008502:	78fb      	ldrb	r3, [r7, #3]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	4413      	add	r3, r2
 800850a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800850e:	461a      	mov	r2, r3
 8008510:	2340      	movs	r3, #64	@ 0x40
 8008512:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8008514:	78fa      	ldrb	r2, [r7, #3]
 8008516:	6879      	ldr	r1, [r7, #4]
 8008518:	4613      	mov	r3, r2
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	1a9b      	subs	r3, r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	440b      	add	r3, r1
 8008522:	334d      	adds	r3, #77	@ 0x4d
 8008524:	2205      	movs	r2, #5
 8008526:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8008528:	78fa      	ldrb	r2, [r7, #3]
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4613      	mov	r3, r2
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	331a      	adds	r3, #26
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d109      	bne.n	8008552 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800853e:	78fa      	ldrb	r2, [r7, #3]
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	4613      	mov	r3, r2
 8008544:	011b      	lsls	r3, r3, #4
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	3344      	adds	r3, #68	@ 0x44
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	78fa      	ldrb	r2, [r7, #3]
 8008558:	4611      	mov	r1, r2
 800855a:	4618      	mov	r0, r3
 800855c:	f009 f8ad 	bl	80116ba <USB_HC_Halt>
 8008560:	e0b3      	b.n	80086ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f008 fb07 	bl	8010b7e <USB_ReadChInterrupts>
 8008570:	4603      	mov	r3, r0
 8008572:	f003 0310 	and.w	r3, r3, #16
 8008576:	2b10      	cmp	r3, #16
 8008578:	f040 80a7 	bne.w	80086ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800857c:	78fa      	ldrb	r2, [r7, #3]
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	4613      	mov	r3, r2
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	1a9b      	subs	r3, r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	440b      	add	r3, r1
 800858a:	3326      	adds	r3, #38	@ 0x26
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	2b03      	cmp	r3, #3
 8008590:	d11b      	bne.n	80085ca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8008592:	78fa      	ldrb	r2, [r7, #3]
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	4613      	mov	r3, r2
 8008598:	011b      	lsls	r3, r3, #4
 800859a:	1a9b      	subs	r3, r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	440b      	add	r3, r1
 80085a0:	3344      	adds	r3, #68	@ 0x44
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80085a6:	78fa      	ldrb	r2, [r7, #3]
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	4613      	mov	r3, r2
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	1a9b      	subs	r3, r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	440b      	add	r3, r1
 80085b4:	334d      	adds	r3, #77	@ 0x4d
 80085b6:	2204      	movs	r2, #4
 80085b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	4611      	mov	r1, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f009 f879 	bl	80116ba <USB_HC_Halt>
 80085c8:	e03f      	b.n	800864a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	6879      	ldr	r1, [r7, #4]
 80085ce:	4613      	mov	r3, r2
 80085d0:	011b      	lsls	r3, r3, #4
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	440b      	add	r3, r1
 80085d8:	3326      	adds	r3, #38	@ 0x26
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80085e0:	78fa      	ldrb	r2, [r7, #3]
 80085e2:	6879      	ldr	r1, [r7, #4]
 80085e4:	4613      	mov	r3, r2
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	1a9b      	subs	r3, r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	440b      	add	r3, r1
 80085ee:	3326      	adds	r3, #38	@ 0x26
 80085f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d129      	bne.n	800864a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	4613      	mov	r3, r2
 80085fc:	011b      	lsls	r3, r3, #4
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	440b      	add	r3, r1
 8008604:	3344      	adds	r3, #68	@ 0x44
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	799b      	ldrb	r3, [r3, #6]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00a      	beq.n	8008628 <HCD_HC_IN_IRQHandler+0xc2a>
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	4613      	mov	r3, r2
 8008618:	011b      	lsls	r3, r3, #4
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	440b      	add	r3, r1
 8008620:	331b      	adds	r3, #27
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d110      	bne.n	800864a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	4613      	mov	r3, r2
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	1a9b      	subs	r3, r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	440b      	add	r3, r1
 8008636:	334d      	adds	r3, #77	@ 0x4d
 8008638:	2204      	movs	r2, #4
 800863a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	4611      	mov	r1, r2
 8008644:	4618      	mov	r0, r3
 8008646:	f009 f838 	bl	80116ba <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800864a:	78fa      	ldrb	r2, [r7, #3]
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	331b      	adds	r3, #27
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	2b01      	cmp	r3, #1
 800865e:	d129      	bne.n	80086b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	011b      	lsls	r3, r3, #4
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	331b      	adds	r3, #27
 8008670:	2200      	movs	r2, #0
 8008672:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	4413      	add	r3, r2
 800867c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	0151      	lsls	r1, r2, #5
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	440a      	add	r2, r1
 800868a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800868e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008692:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	4413      	add	r3, r2
 800869c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086ae:	f043 0320 	orr.w	r3, r3, #32
 80086b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086c0:	461a      	mov	r2, r3
 80086c2:	2310      	movs	r3, #16
 80086c4:	6093      	str	r3, [r2, #8]
 80086c6:	e000      	b.n	80086ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80086c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f008 fa45 	bl	8010b7e <USB_ReadChInterrupts>
 80086f4:	4603      	mov	r3, r0
 80086f6:	f003 0304 	and.w	r3, r3, #4
 80086fa:	2b04      	cmp	r3, #4
 80086fc:	d11b      	bne.n	8008736 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80086fe:	78fb      	ldrb	r3, [r7, #3]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870a:	461a      	mov	r2, r3
 800870c:	2304      	movs	r3, #4
 800870e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4613      	mov	r3, r2
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	1a9b      	subs	r3, r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	334d      	adds	r3, #77	@ 0x4d
 8008720:	2207      	movs	r2, #7
 8008722:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f008 ffc4 	bl	80116ba <USB_HC_Halt>
 8008732:	f000 bc89 	b.w	8009048 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	78fa      	ldrb	r2, [r7, #3]
 800873c:	4611      	mov	r1, r2
 800873e:	4618      	mov	r0, r3
 8008740:	f008 fa1d 	bl	8010b7e <USB_ReadChInterrupts>
 8008744:	4603      	mov	r3, r0
 8008746:	f003 0320 	and.w	r3, r3, #32
 800874a:	2b20      	cmp	r3, #32
 800874c:	f040 8082 	bne.w	8008854 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008750:	78fb      	ldrb	r3, [r7, #3]
 8008752:	015a      	lsls	r2, r3, #5
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4413      	add	r3, r2
 8008758:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800875c:	461a      	mov	r2, r3
 800875e:	2320      	movs	r3, #32
 8008760:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	3319      	adds	r3, #25
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d124      	bne.n	80087c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8008778:	78fa      	ldrb	r2, [r7, #3]
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	4613      	mov	r3, r2
 800877e:	011b      	lsls	r3, r3, #4
 8008780:	1a9b      	subs	r3, r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	440b      	add	r3, r1
 8008786:	3319      	adds	r3, #25
 8008788:	2200      	movs	r2, #0
 800878a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800878c:	78fa      	ldrb	r2, [r7, #3]
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	4613      	mov	r3, r2
 8008792:	011b      	lsls	r3, r3, #4
 8008794:	1a9b      	subs	r3, r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	440b      	add	r3, r1
 800879a:	334c      	adds	r3, #76	@ 0x4c
 800879c:	2202      	movs	r2, #2
 800879e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80087a0:	78fa      	ldrb	r2, [r7, #3]
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	4613      	mov	r3, r2
 80087a6:	011b      	lsls	r3, r3, #4
 80087a8:	1a9b      	subs	r3, r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	334d      	adds	r3, #77	@ 0x4d
 80087b0:	2203      	movs	r2, #3
 80087b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	78fa      	ldrb	r2, [r7, #3]
 80087ba:	4611      	mov	r1, r2
 80087bc:	4618      	mov	r0, r3
 80087be:	f008 ff7c 	bl	80116ba <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80087c2:	78fa      	ldrb	r2, [r7, #3]
 80087c4:	6879      	ldr	r1, [r7, #4]
 80087c6:	4613      	mov	r3, r2
 80087c8:	011b      	lsls	r3, r3, #4
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	331a      	adds	r3, #26
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	f040 8437 	bne.w	8009048 <HCD_HC_OUT_IRQHandler+0x978>
 80087da:	78fa      	ldrb	r2, [r7, #3]
 80087dc:	6879      	ldr	r1, [r7, #4]
 80087de:	4613      	mov	r3, r2
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	1a9b      	subs	r3, r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	440b      	add	r3, r1
 80087e8:	331b      	adds	r3, #27
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f040 842b 	bne.w	8009048 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	1a9b      	subs	r3, r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	3326      	adds	r3, #38	@ 0x26
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d009      	beq.n	800881c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	6879      	ldr	r1, [r7, #4]
 800880c:	4613      	mov	r3, r2
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	331b      	adds	r3, #27
 8008818:	2201      	movs	r2, #1
 800881a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	6879      	ldr	r1, [r7, #4]
 8008820:	4613      	mov	r3, r2
 8008822:	011b      	lsls	r3, r3, #4
 8008824:	1a9b      	subs	r3, r3, r2
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	440b      	add	r3, r1
 800882a:	334d      	adds	r3, #77	@ 0x4d
 800882c:	2203      	movs	r2, #3
 800882e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	78fa      	ldrb	r2, [r7, #3]
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	f008 ff3e 	bl	80116ba <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800883e:	78fa      	ldrb	r2, [r7, #3]
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	4613      	mov	r3, r2
 8008844:	011b      	lsls	r3, r3, #4
 8008846:	1a9b      	subs	r3, r3, r2
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	440b      	add	r3, r1
 800884c:	3344      	adds	r3, #68	@ 0x44
 800884e:	2200      	movs	r2, #0
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	e3f9      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	4611      	mov	r1, r2
 800885c:	4618      	mov	r0, r3
 800885e:	f008 f98e 	bl	8010b7e <USB_ReadChInterrupts>
 8008862:	4603      	mov	r3, r0
 8008864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800886c:	d111      	bne.n	8008892 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	4413      	add	r3, r2
 8008876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800887a:	461a      	mov	r2, r3
 800887c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008880:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	4611      	mov	r1, r2
 800888a:	4618      	mov	r0, r3
 800888c:	f008 ff15 	bl	80116ba <USB_HC_Halt>
 8008890:	e3da      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	4611      	mov	r1, r2
 800889a:	4618      	mov	r0, r3
 800889c:	f008 f96f 	bl	8010b7e <USB_ReadChInterrupts>
 80088a0:	4603      	mov	r3, r0
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d168      	bne.n	800897c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80088aa:	78fa      	ldrb	r2, [r7, #3]
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	011b      	lsls	r3, r3, #4
 80088b2:	1a9b      	subs	r3, r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	3344      	adds	r3, #68	@ 0x44
 80088ba:	2200      	movs	r2, #0
 80088bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	4611      	mov	r1, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f008 f959 	bl	8010b7e <USB_ReadChInterrupts>
 80088cc:	4603      	mov	r3, r0
 80088ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d2:	2b40      	cmp	r3, #64	@ 0x40
 80088d4:	d112      	bne.n	80088fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80088d6:	78fa      	ldrb	r2, [r7, #3]
 80088d8:	6879      	ldr	r1, [r7, #4]
 80088da:	4613      	mov	r3, r2
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	1a9b      	subs	r3, r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	440b      	add	r3, r1
 80088e4:	3319      	adds	r3, #25
 80088e6:	2201      	movs	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088f6:	461a      	mov	r2, r3
 80088f8:	2340      	movs	r3, #64	@ 0x40
 80088fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80088fc:	78fa      	ldrb	r2, [r7, #3]
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	4613      	mov	r3, r2
 8008902:	011b      	lsls	r3, r3, #4
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	331b      	adds	r3, #27
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d019      	beq.n	8008946 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008912:	78fa      	ldrb	r2, [r7, #3]
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	011b      	lsls	r3, r3, #4
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	331b      	adds	r3, #27
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	4413      	add	r3, r2
 800892e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	78fa      	ldrb	r2, [r7, #3]
 8008936:	0151      	lsls	r1, r2, #5
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	440a      	add	r2, r1
 800893c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008944:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	4413      	add	r3, r2
 800894e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008952:	461a      	mov	r2, r3
 8008954:	2301      	movs	r3, #1
 8008956:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	4613      	mov	r3, r2
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	1a9b      	subs	r3, r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	334d      	adds	r3, #77	@ 0x4d
 8008968:	2201      	movs	r2, #1
 800896a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	78fa      	ldrb	r2, [r7, #3]
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f008 fea0 	bl	80116ba <USB_HC_Halt>
 800897a:	e365      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	4611      	mov	r1, r2
 8008984:	4618      	mov	r0, r3
 8008986:	f008 f8fa 	bl	8010b7e <USB_ReadChInterrupts>
 800898a:	4603      	mov	r3, r0
 800898c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008990:	2b40      	cmp	r3, #64	@ 0x40
 8008992:	d139      	bne.n	8008a08 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8008994:	78fa      	ldrb	r2, [r7, #3]
 8008996:	6879      	ldr	r1, [r7, #4]
 8008998:	4613      	mov	r3, r2
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	1a9b      	subs	r3, r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	440b      	add	r3, r1
 80089a2:	334d      	adds	r3, #77	@ 0x4d
 80089a4:	2205      	movs	r2, #5
 80089a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80089a8:	78fa      	ldrb	r2, [r7, #3]
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	4613      	mov	r3, r2
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	1a9b      	subs	r3, r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	440b      	add	r3, r1
 80089b6:	331a      	adds	r3, #26
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d109      	bne.n	80089d2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80089be:	78fa      	ldrb	r2, [r7, #3]
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4613      	mov	r3, r2
 80089c4:	011b      	lsls	r3, r3, #4
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	440b      	add	r3, r1
 80089cc:	3319      	adds	r3, #25
 80089ce:	2201      	movs	r2, #1
 80089d0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80089d2:	78fa      	ldrb	r2, [r7, #3]
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	1a9b      	subs	r3, r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	440b      	add	r3, r1
 80089e0:	3344      	adds	r3, #68	@ 0x44
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	78fa      	ldrb	r2, [r7, #3]
 80089ec:	4611      	mov	r1, r2
 80089ee:	4618      	mov	r0, r3
 80089f0:	f008 fe63 	bl	80116ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a00:	461a      	mov	r2, r3
 8008a02:	2340      	movs	r3, #64	@ 0x40
 8008a04:	6093      	str	r3, [r2, #8]
 8008a06:	e31f      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	78fa      	ldrb	r2, [r7, #3]
 8008a0e:	4611      	mov	r1, r2
 8008a10:	4618      	mov	r0, r3
 8008a12:	f008 f8b4 	bl	8010b7e <USB_ReadChInterrupts>
 8008a16:	4603      	mov	r3, r0
 8008a18:	f003 0308 	and.w	r3, r3, #8
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d11a      	bne.n	8008a56 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	2308      	movs	r3, #8
 8008a30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008a32:	78fa      	ldrb	r2, [r7, #3]
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	011b      	lsls	r3, r3, #4
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	334d      	adds	r3, #77	@ 0x4d
 8008a42:	2206      	movs	r2, #6
 8008a44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f008 fe33 	bl	80116ba <USB_HC_Halt>
 8008a54:	e2f8      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	78fa      	ldrb	r2, [r7, #3]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f008 f88d 	bl	8010b7e <USB_ReadChInterrupts>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f003 0310 	and.w	r3, r3, #16
 8008a6a:	2b10      	cmp	r3, #16
 8008a6c:	d144      	bne.n	8008af8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8008a6e:	78fa      	ldrb	r2, [r7, #3]
 8008a70:	6879      	ldr	r1, [r7, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	011b      	lsls	r3, r3, #4
 8008a76:	1a9b      	subs	r3, r3, r2
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3344      	adds	r3, #68	@ 0x44
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8008a82:	78fa      	ldrb	r2, [r7, #3]
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	4613      	mov	r3, r2
 8008a88:	011b      	lsls	r3, r3, #4
 8008a8a:	1a9b      	subs	r3, r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	440b      	add	r3, r1
 8008a90:	334d      	adds	r3, #77	@ 0x4d
 8008a92:	2204      	movs	r2, #4
 8008a94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8008a96:	78fa      	ldrb	r2, [r7, #3]
 8008a98:	6879      	ldr	r1, [r7, #4]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	011b      	lsls	r3, r3, #4
 8008a9e:	1a9b      	subs	r3, r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	440b      	add	r3, r1
 8008aa4:	3319      	adds	r3, #25
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d114      	bne.n	8008ad6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8008aac:	78fa      	ldrb	r2, [r7, #3]
 8008aae:	6879      	ldr	r1, [r7, #4]
 8008ab0:	4613      	mov	r3, r2
 8008ab2:	011b      	lsls	r3, r3, #4
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	440b      	add	r3, r1
 8008aba:	3318      	adds	r3, #24
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008ac2:	78fa      	ldrb	r2, [r7, #3]
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	011b      	lsls	r3, r3, #4
 8008aca:	1a9b      	subs	r3, r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	3319      	adds	r3, #25
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	78fa      	ldrb	r2, [r7, #3]
 8008adc:	4611      	mov	r1, r2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f008 fdeb 	bl	80116ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008ae4:	78fb      	ldrb	r3, [r7, #3]
 8008ae6:	015a      	lsls	r2, r3, #5
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	4413      	add	r3, r2
 8008aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af0:	461a      	mov	r2, r3
 8008af2:	2310      	movs	r3, #16
 8008af4:	6093      	str	r3, [r2, #8]
 8008af6:	e2a7      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f008 f83c 	bl	8010b7e <USB_ReadChInterrupts>
 8008b06:	4603      	mov	r3, r0
 8008b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b0c:	2b80      	cmp	r3, #128	@ 0x80
 8008b0e:	f040 8083 	bne.w	8008c18 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	799b      	ldrb	r3, [r3, #6]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d111      	bne.n	8008b3e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8008b1a:	78fa      	ldrb	r2, [r7, #3]
 8008b1c:	6879      	ldr	r1, [r7, #4]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	1a9b      	subs	r3, r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	440b      	add	r3, r1
 8008b28:	334d      	adds	r3, #77	@ 0x4d
 8008b2a:	2207      	movs	r2, #7
 8008b2c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	78fa      	ldrb	r2, [r7, #3]
 8008b34:	4611      	mov	r1, r2
 8008b36:	4618      	mov	r0, r3
 8008b38:	f008 fdbf 	bl	80116ba <USB_HC_Halt>
 8008b3c:	e062      	b.n	8008c04 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	4613      	mov	r3, r2
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	1a9b      	subs	r3, r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	440b      	add	r3, r1
 8008b4c:	3344      	adds	r3, #68	@ 0x44
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	1c59      	adds	r1, r3, #1
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	4613      	mov	r3, r2
 8008b56:	011b      	lsls	r3, r3, #4
 8008b58:	1a9b      	subs	r3, r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	4403      	add	r3, r0
 8008b5e:	3344      	adds	r3, #68	@ 0x44
 8008b60:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	4613      	mov	r3, r2
 8008b68:	011b      	lsls	r3, r3, #4
 8008b6a:	1a9b      	subs	r3, r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	440b      	add	r3, r1
 8008b70:	3344      	adds	r3, #68	@ 0x44
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d922      	bls.n	8008bbe <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	1a9b      	subs	r3, r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	440b      	add	r3, r1
 8008b86:	3344      	adds	r3, #68	@ 0x44
 8008b88:	2200      	movs	r2, #0
 8008b8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008b8c:	78fa      	ldrb	r2, [r7, #3]
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4613      	mov	r3, r2
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	334c      	adds	r3, #76	@ 0x4c
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008ba0:	78fa      	ldrb	r2, [r7, #3]
 8008ba2:	6879      	ldr	r1, [r7, #4]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	011b      	lsls	r3, r3, #4
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	440b      	add	r3, r1
 8008bae:	334c      	adds	r3, #76	@ 0x4c
 8008bb0:	781a      	ldrb	r2, [r3, #0]
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f010 fda0 	bl	80196fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8008bbc:	e022      	b.n	8008c04 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	4613      	mov	r3, r2
 8008bc4:	011b      	lsls	r3, r3, #4
 8008bc6:	1a9b      	subs	r3, r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	440b      	add	r3, r1
 8008bcc:	334c      	adds	r3, #76	@ 0x4c
 8008bce:	2202      	movs	r2, #2
 8008bd0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008be8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bf0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008bf2:	78fb      	ldrb	r3, [r7, #3]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bfe:	461a      	mov	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	015a      	lsls	r2, r3, #5
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c10:	461a      	mov	r2, r3
 8008c12:	2380      	movs	r3, #128	@ 0x80
 8008c14:	6093      	str	r3, [r2, #8]
 8008c16:	e217      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	78fa      	ldrb	r2, [r7, #3]
 8008c1e:	4611      	mov	r1, r2
 8008c20:	4618      	mov	r0, r3
 8008c22:	f007 ffac 	bl	8010b7e <USB_ReadChInterrupts>
 8008c26:	4603      	mov	r3, r0
 8008c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c30:	d11b      	bne.n	8008c6a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	6879      	ldr	r1, [r7, #4]
 8008c36:	4613      	mov	r3, r2
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	1a9b      	subs	r3, r3, r2
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	440b      	add	r3, r1
 8008c40:	334d      	adds	r3, #77	@ 0x4d
 8008c42:	2209      	movs	r2, #9
 8008c44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	78fa      	ldrb	r2, [r7, #3]
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f008 fd33 	bl	80116ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	015a      	lsls	r2, r3, #5
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	4413      	add	r3, r2
 8008c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c60:	461a      	mov	r2, r3
 8008c62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c66:	6093      	str	r3, [r2, #8]
 8008c68:	e1ee      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	4611      	mov	r1, r2
 8008c72:	4618      	mov	r0, r3
 8008c74:	f007 ff83 	bl	8010b7e <USB_ReadChInterrupts>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	f040 81df 	bne.w	8009042 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c90:	461a      	mov	r2, r3
 8008c92:	2302      	movs	r3, #2
 8008c94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	6879      	ldr	r1, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	011b      	lsls	r3, r3, #4
 8008c9e:	1a9b      	subs	r3, r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	440b      	add	r3, r1
 8008ca4:	334d      	adds	r3, #77	@ 0x4d
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	f040 8093 	bne.w	8008dd4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008cae:	78fa      	ldrb	r2, [r7, #3]
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	334d      	adds	r3, #77	@ 0x4d
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008cc2:	78fa      	ldrb	r2, [r7, #3]
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	011b      	lsls	r3, r3, #4
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	334c      	adds	r3, #76	@ 0x4c
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	6879      	ldr	r1, [r7, #4]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	011b      	lsls	r3, r3, #4
 8008cde:	1a9b      	subs	r3, r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	3326      	adds	r3, #38	@ 0x26
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d00b      	beq.n	8008d04 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	6879      	ldr	r1, [r7, #4]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	011b      	lsls	r3, r3, #4
 8008cf4:	1a9b      	subs	r3, r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	440b      	add	r3, r1
 8008cfa:	3326      	adds	r3, #38	@ 0x26
 8008cfc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008cfe:	2b03      	cmp	r3, #3
 8008d00:	f040 8190 	bne.w	8009024 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	799b      	ldrb	r3, [r3, #6]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d115      	bne.n	8008d38 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	4613      	mov	r3, r2
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	333d      	adds	r3, #61	@ 0x3d
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	78fa      	ldrb	r2, [r7, #3]
 8008d20:	f083 0301 	eor.w	r3, r3, #1
 8008d24:	b2d8      	uxtb	r0, r3
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	011b      	lsls	r3, r3, #4
 8008d2c:	1a9b      	subs	r3, r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	440b      	add	r3, r1
 8008d32:	333d      	adds	r3, #61	@ 0x3d
 8008d34:	4602      	mov	r2, r0
 8008d36:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	799b      	ldrb	r3, [r3, #6]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	f040 8171 	bne.w	8009024 <HCD_HC_OUT_IRQHandler+0x954>
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	6879      	ldr	r1, [r7, #4]
 8008d46:	4613      	mov	r3, r2
 8008d48:	011b      	lsls	r3, r3, #4
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	440b      	add	r3, r1
 8008d50:	3334      	adds	r3, #52	@ 0x34
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f000 8165 	beq.w	8009024 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8008d5a:	78fa      	ldrb	r2, [r7, #3]
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	011b      	lsls	r3, r3, #4
 8008d62:	1a9b      	subs	r3, r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	440b      	add	r3, r1
 8008d68:	3334      	adds	r3, #52	@ 0x34
 8008d6a:	6819      	ldr	r1, [r3, #0]
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	4613      	mov	r3, r2
 8008d72:	011b      	lsls	r3, r3, #4
 8008d74:	1a9b      	subs	r3, r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4403      	add	r3, r0
 8008d7a:	3328      	adds	r3, #40	@ 0x28
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	440b      	add	r3, r1
 8008d80:	1e59      	subs	r1, r3, #1
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4613      	mov	r3, r2
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	4403      	add	r3, r0
 8008d90:	3328      	adds	r3, #40	@ 0x28
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d98:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 813f 	beq.w	8009024 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008da6:	78fa      	ldrb	r2, [r7, #3]
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	011b      	lsls	r3, r3, #4
 8008dae:	1a9b      	subs	r3, r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	333d      	adds	r3, #61	@ 0x3d
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	f083 0301 	eor.w	r3, r3, #1
 8008dbe:	b2d8      	uxtb	r0, r3
 8008dc0:	6879      	ldr	r1, [r7, #4]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	1a9b      	subs	r3, r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	440b      	add	r3, r1
 8008dcc:	333d      	adds	r3, #61	@ 0x3d
 8008dce:	4602      	mov	r2, r0
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	e127      	b.n	8009024 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008dd4:	78fa      	ldrb	r2, [r7, #3]
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	1a9b      	subs	r3, r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	334d      	adds	r3, #77	@ 0x4d
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b03      	cmp	r3, #3
 8008de8:	d120      	bne.n	8008e2c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008dea:	78fa      	ldrb	r2, [r7, #3]
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	011b      	lsls	r3, r3, #4
 8008df2:	1a9b      	subs	r3, r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	440b      	add	r3, r1
 8008df8:	334d      	adds	r3, #77	@ 0x4d
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008dfe:	78fa      	ldrb	r2, [r7, #3]
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	4613      	mov	r3, r2
 8008e04:	011b      	lsls	r3, r3, #4
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	440b      	add	r3, r1
 8008e0c:	331b      	adds	r3, #27
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	f040 8107 	bne.w	8009024 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008e16:	78fa      	ldrb	r2, [r7, #3]
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	011b      	lsls	r3, r3, #4
 8008e1e:	1a9b      	subs	r3, r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	440b      	add	r3, r1
 8008e24:	334c      	adds	r3, #76	@ 0x4c
 8008e26:	2202      	movs	r2, #2
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	e0fb      	b.n	8009024 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8008e2c:	78fa      	ldrb	r2, [r7, #3]
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	4613      	mov	r3, r2
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	334d      	adds	r3, #77	@ 0x4d
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d13a      	bne.n	8008eb8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008e42:	78fa      	ldrb	r2, [r7, #3]
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	1a9b      	subs	r3, r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	334d      	adds	r3, #77	@ 0x4d
 8008e52:	2202      	movs	r2, #2
 8008e54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008e56:	78fa      	ldrb	r2, [r7, #3]
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	011b      	lsls	r3, r3, #4
 8008e5e:	1a9b      	subs	r3, r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	334c      	adds	r3, #76	@ 0x4c
 8008e66:	2202      	movs	r2, #2
 8008e68:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	440b      	add	r3, r1
 8008e78:	331b      	adds	r3, #27
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	f040 80d1 	bne.w	8009024 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8008e82:	78fa      	ldrb	r2, [r7, #3]
 8008e84:	6879      	ldr	r1, [r7, #4]
 8008e86:	4613      	mov	r3, r2
 8008e88:	011b      	lsls	r3, r3, #4
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	331b      	adds	r3, #27
 8008e92:	2200      	movs	r2, #0
 8008e94:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	78fa      	ldrb	r2, [r7, #3]
 8008ea6:	0151      	lsls	r1, r2, #5
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	440a      	add	r2, r1
 8008eac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008eb4:	6053      	str	r3, [r2, #4]
 8008eb6:	e0b5      	b.n	8009024 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008eb8:	78fa      	ldrb	r2, [r7, #3]
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	334d      	adds	r3, #77	@ 0x4d
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b05      	cmp	r3, #5
 8008ecc:	d114      	bne.n	8008ef8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	334d      	adds	r3, #77	@ 0x4d
 8008ede:	2202      	movs	r2, #2
 8008ee0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8008ee2:	78fa      	ldrb	r2, [r7, #3]
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	011b      	lsls	r3, r3, #4
 8008eea:	1a9b      	subs	r3, r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	440b      	add	r3, r1
 8008ef0:	334c      	adds	r3, #76	@ 0x4c
 8008ef2:	2202      	movs	r2, #2
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	e095      	b.n	8009024 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4613      	mov	r3, r2
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	1a9b      	subs	r3, r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	334d      	adds	r3, #77	@ 0x4d
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b06      	cmp	r3, #6
 8008f0c:	d114      	bne.n	8008f38 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	4613      	mov	r3, r2
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	1a9b      	subs	r3, r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	334d      	adds	r3, #77	@ 0x4d
 8008f1e:	2202      	movs	r2, #2
 8008f20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	6879      	ldr	r1, [r7, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	011b      	lsls	r3, r3, #4
 8008f2a:	1a9b      	subs	r3, r3, r2
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	440b      	add	r3, r1
 8008f30:	334c      	adds	r3, #76	@ 0x4c
 8008f32:	2205      	movs	r2, #5
 8008f34:	701a      	strb	r2, [r3, #0]
 8008f36:	e075      	b.n	8009024 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	6879      	ldr	r1, [r7, #4]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	1a9b      	subs	r3, r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	334d      	adds	r3, #77	@ 0x4d
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b07      	cmp	r3, #7
 8008f4c:	d00a      	beq.n	8008f64 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008f4e:	78fa      	ldrb	r2, [r7, #3]
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	4613      	mov	r3, r2
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	1a9b      	subs	r3, r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	334d      	adds	r3, #77	@ 0x4d
 8008f5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008f60:	2b09      	cmp	r3, #9
 8008f62:	d170      	bne.n	8009046 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f64:	78fa      	ldrb	r2, [r7, #3]
 8008f66:	6879      	ldr	r1, [r7, #4]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	011b      	lsls	r3, r3, #4
 8008f6c:	1a9b      	subs	r3, r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	334d      	adds	r3, #77	@ 0x4d
 8008f74:	2202      	movs	r2, #2
 8008f76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008f78:	78fa      	ldrb	r2, [r7, #3]
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	1a9b      	subs	r3, r3, r2
 8008f82:	009b      	lsls	r3, r3, #2
 8008f84:	440b      	add	r3, r1
 8008f86:	3344      	adds	r3, #68	@ 0x44
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	1c59      	adds	r1, r3, #1
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	011b      	lsls	r3, r3, #4
 8008f92:	1a9b      	subs	r3, r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4403      	add	r3, r0
 8008f98:	3344      	adds	r3, #68	@ 0x44
 8008f9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008f9c:	78fa      	ldrb	r2, [r7, #3]
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	4613      	mov	r3, r2
 8008fa2:	011b      	lsls	r3, r3, #4
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	440b      	add	r3, r1
 8008faa:	3344      	adds	r3, #68	@ 0x44
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d914      	bls.n	8008fdc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008fb2:	78fa      	ldrb	r2, [r7, #3]
 8008fb4:	6879      	ldr	r1, [r7, #4]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	1a9b      	subs	r3, r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	3344      	adds	r3, #68	@ 0x44
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008fc6:	78fa      	ldrb	r2, [r7, #3]
 8008fc8:	6879      	ldr	r1, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	1a9b      	subs	r3, r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	440b      	add	r3, r1
 8008fd4:	334c      	adds	r3, #76	@ 0x4c
 8008fd6:	2204      	movs	r2, #4
 8008fd8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008fda:	e022      	b.n	8009022 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	011b      	lsls	r3, r3, #4
 8008fe4:	1a9b      	subs	r3, r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	440b      	add	r3, r1
 8008fea:	334c      	adds	r3, #76	@ 0x4c
 8008fec:	2202      	movs	r2, #2
 8008fee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008ff0:	78fb      	ldrb	r3, [r7, #3]
 8008ff2:	015a      	lsls	r2, r3, #5
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009006:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800900e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009010:	78fb      	ldrb	r3, [r7, #3]
 8009012:	015a      	lsls	r2, r3, #5
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	4413      	add	r3, r2
 8009018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800901c:	461a      	mov	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009022:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	6879      	ldr	r1, [r7, #4]
 8009028:	4613      	mov	r3, r2
 800902a:	011b      	lsls	r3, r3, #4
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	440b      	add	r3, r1
 8009032:	334c      	adds	r3, #76	@ 0x4c
 8009034:	781a      	ldrb	r2, [r3, #0]
 8009036:	78fb      	ldrb	r3, [r7, #3]
 8009038:	4619      	mov	r1, r3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f010 fb5e 	bl	80196fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8009040:	e002      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009042:	bf00      	nop
 8009044:	e000      	b.n	8009048 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8009046:	bf00      	nop
  }
}
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b08a      	sub	sp, #40	@ 0x28
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	f003 030f 	and.w	r3, r3, #15
 800906e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	0c5b      	lsrs	r3, r3, #17
 8009074:	f003 030f 	and.w	r3, r3, #15
 8009078:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800907a:	69fb      	ldr	r3, [r7, #28]
 800907c:	091b      	lsrs	r3, r3, #4
 800907e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009082:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d004      	beq.n	8009094 <HCD_RXQLVL_IRQHandler+0x46>
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2b05      	cmp	r3, #5
 800908e:	f000 80b6 	beq.w	80091fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009092:	e0b7      	b.n	8009204 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 80b3 	beq.w	8009202 <HCD_RXQLVL_IRQHandler+0x1b4>
 800909c:	6879      	ldr	r1, [r7, #4]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	4613      	mov	r3, r2
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	009b      	lsls	r3, r3, #2
 80090a8:	440b      	add	r3, r1
 80090aa:	332c      	adds	r3, #44	@ 0x2c
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f000 80a7 	beq.w	8009202 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80090b4:	6879      	ldr	r1, [r7, #4]
 80090b6:	69ba      	ldr	r2, [r7, #24]
 80090b8:	4613      	mov	r3, r2
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	1a9b      	subs	r3, r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	3338      	adds	r3, #56	@ 0x38
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	18d1      	adds	r1, r2, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	4613      	mov	r3, r2
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	1a9b      	subs	r3, r3, r2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4403      	add	r3, r0
 80090d8:	3334      	adds	r3, #52	@ 0x34
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4299      	cmp	r1, r3
 80090de:	f200 8083 	bhi.w	80091e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6818      	ldr	r0, [r3, #0]
 80090e6:	6879      	ldr	r1, [r7, #4]
 80090e8:	69ba      	ldr	r2, [r7, #24]
 80090ea:	4613      	mov	r3, r2
 80090ec:	011b      	lsls	r3, r3, #4
 80090ee:	1a9b      	subs	r3, r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	440b      	add	r3, r1
 80090f4:	332c      	adds	r3, #44	@ 0x2c
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	b292      	uxth	r2, r2
 80090fc:	4619      	mov	r1, r3
 80090fe:	f007 fcd3 	bl	8010aa8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	4613      	mov	r3, r2
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	440b      	add	r3, r1
 8009110:	332c      	adds	r3, #44	@ 0x2c
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	18d1      	adds	r1, r2, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	69ba      	ldr	r2, [r7, #24]
 800911c:	4613      	mov	r3, r2
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	4403      	add	r3, r0
 8009126:	332c      	adds	r3, #44	@ 0x2c
 8009128:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800912a:	6879      	ldr	r1, [r7, #4]
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	4613      	mov	r3, r2
 8009130:	011b      	lsls	r3, r3, #4
 8009132:	1a9b      	subs	r3, r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	3338      	adds	r3, #56	@ 0x38
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	18d1      	adds	r1, r2, r3
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	4613      	mov	r3, r2
 8009146:	011b      	lsls	r3, r3, #4
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4403      	add	r3, r0
 800914e:	3338      	adds	r3, #56	@ 0x38
 8009150:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	4413      	add	r3, r2
 800915a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800915e:	691b      	ldr	r3, [r3, #16]
 8009160:	0cdb      	lsrs	r3, r3, #19
 8009162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009166:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009168:	6879      	ldr	r1, [r7, #4]
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	4613      	mov	r3, r2
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	1a9b      	subs	r3, r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	440b      	add	r3, r1
 8009176:	3328      	adds	r3, #40	@ 0x28
 8009178:	881b      	ldrh	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	4293      	cmp	r3, r2
 8009180:	d13f      	bne.n	8009202 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d03c      	beq.n	8009202 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	4413      	add	r3, r2
 8009190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800919e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091b4:	461a      	mov	r2, r3
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	4613      	mov	r3, r2
 80091c0:	011b      	lsls	r3, r3, #4
 80091c2:	1a9b      	subs	r3, r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	333c      	adds	r3, #60	@ 0x3c
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	f083 0301 	eor.w	r3, r3, #1
 80091d0:	b2d8      	uxtb	r0, r3
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	4613      	mov	r3, r2
 80091d8:	011b      	lsls	r3, r3, #4
 80091da:	1a9b      	subs	r3, r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	333c      	adds	r3, #60	@ 0x3c
 80091e2:	4602      	mov	r2, r0
 80091e4:	701a      	strb	r2, [r3, #0]
      break;
 80091e6:	e00c      	b.n	8009202 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	69ba      	ldr	r2, [r7, #24]
 80091ec:	4613      	mov	r3, r2
 80091ee:	011b      	lsls	r3, r3, #4
 80091f0:	1a9b      	subs	r3, r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	440b      	add	r3, r1
 80091f6:	334c      	adds	r3, #76	@ 0x4c
 80091f8:	2204      	movs	r2, #4
 80091fa:	701a      	strb	r2, [r3, #0]
      break;
 80091fc:	e001      	b.n	8009202 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80091fe:	bf00      	nop
 8009200:	e000      	b.n	8009204 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8009202:	bf00      	nop
  }
}
 8009204:	bf00      	nop
 8009206:	3728      	adds	r7, #40	@ 0x28
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009238:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b02      	cmp	r3, #2
 8009242:	d10b      	bne.n	800925c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f003 0301 	and.w	r3, r3, #1
 800924a:	2b01      	cmp	r3, #1
 800924c:	d102      	bne.n	8009254 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f010 fa38 	bl	80196c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	f043 0302 	orr.w	r3, r3, #2
 800925a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f003 0308 	and.w	r3, r3, #8
 8009262:	2b08      	cmp	r3, #8
 8009264:	d132      	bne.n	80092cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	f043 0308 	orr.w	r3, r3, #8
 800926c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f003 0304 	and.w	r3, r3, #4
 8009274:	2b04      	cmp	r3, #4
 8009276:	d126      	bne.n	80092c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	7a5b      	ldrb	r3, [r3, #9]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d113      	bne.n	80092a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8009286:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800928a:	d106      	bne.n	800929a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2102      	movs	r1, #2
 8009292:	4618      	mov	r0, r3
 8009294:	f007 fd92 	bl	8010dbc <USB_InitFSLSPClkSel>
 8009298:	e011      	b.n	80092be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2101      	movs	r1, #1
 80092a0:	4618      	mov	r0, r3
 80092a2:	f007 fd8b 	bl	8010dbc <USB_InitFSLSPClkSel>
 80092a6:	e00a      	b.n	80092be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	79db      	ldrb	r3, [r3, #7]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d106      	bne.n	80092be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092b6:	461a      	mov	r2, r3
 80092b8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80092bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f010 fa2e 	bl	8019720 <HAL_HCD_PortEnabled_Callback>
 80092c4:	e002      	b.n	80092cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f010 fa38 	bl	801973c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b20      	cmp	r3, #32
 80092d4:	d103      	bne.n	80092de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f043 0320 	orr.w	r3, r3, #32
 80092dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80092e4:	461a      	mov	r2, r3
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	6013      	str	r3, [r2, #0]
}
 80092ea:	bf00      	nop
 80092ec:	3718      	adds	r7, #24
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e08b      	b.n	800941e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7fa f9d6 	bl	80036cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2224      	movs	r2, #36	@ 0x24
 8009324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 0201 	bic.w	r2, r2, #1
 8009336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009344:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009354:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d107      	bne.n	800936e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800936a:	609a      	str	r2, [r3, #8]
 800936c:	e006      	b.n	800937c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	689a      	ldr	r2, [r3, #8]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800937a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d108      	bne.n	8009396 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009392:	605a      	str	r2, [r3, #4]
 8009394:	e007      	b.n	80093a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	685a      	ldr	r2, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6859      	ldr	r1, [r3, #4]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009428 <HAL_I2C_Init+0x134>)
 80093b2:	430b      	orrs	r3, r1
 80093b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68da      	ldr	r2, [r3, #12]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691a      	ldr	r2, [r3, #16]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	430a      	orrs	r2, r1
 80093de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	69d9      	ldr	r1, [r3, #28]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a1a      	ldr	r2, [r3, #32]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	430a      	orrs	r2, r1
 80093ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f042 0201 	orr.w	r2, r2, #1
 80093fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2220      	movs	r2, #32
 800940a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2200      	movs	r2, #0
 8009412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	02008000 	.word	0x02008000

0800942c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800943c:	b2db      	uxtb	r3, r3
 800943e:	2b20      	cmp	r3, #32
 8009440:	d138      	bne.n	80094b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009448:	2b01      	cmp	r3, #1
 800944a:	d101      	bne.n	8009450 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800944c:	2302      	movs	r3, #2
 800944e:	e032      	b.n	80094b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2201      	movs	r2, #1
 8009454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2224      	movs	r2, #36	@ 0x24
 800945c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800947e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6819      	ldr	r1, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	683a      	ldr	r2, [r7, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0201 	orr.w	r2, r2, #1
 800949e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2220      	movs	r2, #32
 80094a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	e000      	b.n	80094b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80094b4:	2302      	movs	r3, #2
  }
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80094c2:	b480      	push	{r7}
 80094c4:	b085      	sub	sp, #20
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b20      	cmp	r3, #32
 80094d6:	d139      	bne.n	800954c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e033      	b.n	800954e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2224      	movs	r2, #36	@ 0x24
 80094f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0201 	bic.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009514:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	021b      	lsls	r3, r3, #8
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4313      	orrs	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0201 	orr.w	r2, r2, #1
 8009536:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2220      	movs	r2, #32
 800953c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	e000      	b.n	800954e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800954c:	2302      	movs	r3, #2
  }
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d101      	bne.n	800956c <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e08f      	b.n	800968c <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d106      	bne.n	8009586 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fa f94b 	bl	800381c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2202      	movs	r2, #2
 800958a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	699a      	ldr	r2, [r3, #24]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800959c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6999      	ldr	r1, [r3, #24]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80095b2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	041b      	lsls	r3, r3, #16
 80095c8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6999      	ldr	r1, [r3, #24]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	430a      	orrs	r2, r1
 80095d6:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	041b      	lsls	r3, r3, #16
 80095de:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a19      	ldr	r1, [r3, #32]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	430a      	orrs	r2, r1
 80095ec:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f2:	041b      	lsls	r3, r3, #16
 80095f4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	430a      	orrs	r2, r1
 8009602:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009608:	041b      	lsls	r3, r3, #16
 800960a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	430a      	orrs	r2, r1
 8009618:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009620:	021b      	lsls	r3, r3, #8
 8009622:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800962a:	041b      	lsls	r3, r3, #16
 800962c:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800963c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	4313      	orrs	r3, r2
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009650:	431a      	orrs	r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f042 0206 	orr.w	r2, r2, #6
 8009668:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	699a      	ldr	r2, [r3, #24]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0201 	orr.w	r2, r2, #1
 8009678:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f003 0304 	and.w	r3, r3, #4
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d023      	beq.n	80096fe <HAL_LTDC_IRQHandler+0x6a>
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01e      	beq.n	80096fe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f022 0204 	bic.w	r2, r2, #4
 80096ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2204      	movs	r2, #4
 80096d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80096de:	f043 0201 	orr.w	r2, r3, #1
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2204      	movs	r2, #4
 80096ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2200      	movs	r2, #0
 80096f4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f86f 	bl	80097dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d023      	beq.n	8009750 <HAL_LTDC_IRQHandler+0xbc>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b00      	cmp	r3, #0
 8009710:	d01e      	beq.n	8009750 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0202 	bic.w	r2, r2, #2
 8009720:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2202      	movs	r2, #2
 8009728:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009730:	f043 0202 	orr.w	r2, r3, #2
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2204      	movs	r2, #4
 800973e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f846 	bl	80097dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d01b      	beq.n	8009792 <HAL_LTDC_IRQHandler+0xfe>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d016      	beq.n	8009792 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f022 0201 	bic.w	r2, r2, #1
 8009772:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2201      	movs	r2, #1
 800977a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f82f 	bl	80097f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	f003 0308 	and.w	r3, r3, #8
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01b      	beq.n	80097d4 <HAL_LTDC_IRQHandler+0x140>
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f003 0308 	and.w	r3, r3, #8
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d016      	beq.n	80097d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f022 0208 	bic.w	r2, r2, #8
 80097b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2208      	movs	r2, #8
 80097bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f818 	bl	8009804 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009818:	b5b0      	push	{r4, r5, r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <HAL_LTDC_ConfigLayer+0x1a>
 800982e:	2302      	movs	r3, #2
 8009830:	e02c      	b.n	800988c <HAL_LTDC_ConfigLayer+0x74>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2201      	movs	r2, #1
 8009836:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2202      	movs	r2, #2
 800983e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2134      	movs	r1, #52	@ 0x34
 8009848:	fb01 f303 	mul.w	r3, r1, r3
 800984c:	4413      	add	r3, r2
 800984e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	4614      	mov	r4, r2
 8009856:	461d      	mov	r5, r3
 8009858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800985a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800985c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800985e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68b9      	ldr	r1, [r7, #8]
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f000 f811 	bl	8009894 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2201      	movs	r2, #1
 8009878:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2201      	movs	r2, #1
 800987e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bdb0      	pop	{r4, r5, r7, pc}

08009894 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009894:	b480      	push	{r7}
 8009896:	b089      	sub	sp, #36	@ 0x24
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	0c1b      	lsrs	r3, r3, #16
 80098ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098b0:	4413      	add	r3, r2
 80098b2:	041b      	lsls	r3, r3, #16
 80098b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	01db      	lsls	r3, r3, #7
 80098c0:	4413      	add	r3, r2
 80098c2:	3384      	adds	r3, #132	@ 0x84
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	6812      	ldr	r2, [r2, #0]
 80098ca:	4611      	mov	r1, r2
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	01d2      	lsls	r2, r2, #7
 80098d0:	440a      	add	r2, r1
 80098d2:	3284      	adds	r2, #132	@ 0x84
 80098d4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80098d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68db      	ldr	r3, [r3, #12]
 80098e4:	0c1b      	lsrs	r3, r3, #16
 80098e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80098ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80098ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4619      	mov	r1, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	01db      	lsls	r3, r3, #7
 80098f8:	440b      	add	r3, r1
 80098fa:	3384      	adds	r3, #132	@ 0x84
 80098fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009902:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	68da      	ldr	r2, [r3, #12]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009912:	4413      	add	r3, r2
 8009914:	041b      	lsls	r3, r3, #16
 8009916:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	01db      	lsls	r3, r3, #7
 8009922:	4413      	add	r3, r2
 8009924:	3384      	adds	r3, #132	@ 0x84
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	6812      	ldr	r2, [r2, #0]
 800992c:	4611      	mov	r1, r2
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	01d2      	lsls	r2, r2, #7
 8009932:	440a      	add	r2, r1
 8009934:	3284      	adds	r2, #132	@ 0x84
 8009936:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800993a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	689a      	ldr	r2, [r3, #8]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800994a:	4413      	add	r3, r2
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4619      	mov	r1, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	01db      	lsls	r3, r3, #7
 8009958:	440b      	add	r3, r1
 800995a:	3384      	adds	r3, #132	@ 0x84
 800995c:	4619      	mov	r1, r3
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4313      	orrs	r3, r2
 8009962:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	01db      	lsls	r3, r3, #7
 800996e:	4413      	add	r3, r2
 8009970:	3384      	adds	r3, #132	@ 0x84
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	6812      	ldr	r2, [r2, #0]
 8009978:	4611      	mov	r1, r2
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	01d2      	lsls	r2, r2, #7
 800997e:	440a      	add	r2, r1
 8009980:	3284      	adds	r2, #132	@ 0x84
 8009982:	f023 0307 	bic.w	r3, r3, #7
 8009986:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	461a      	mov	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	01db      	lsls	r3, r3, #7
 8009992:	4413      	add	r3, r2
 8009994:	3384      	adds	r3, #132	@ 0x84
 8009996:	461a      	mov	r2, r3
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80099ae:	041b      	lsls	r3, r3, #16
 80099b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	061b      	lsls	r3, r3, #24
 80099b8:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099c0:	461a      	mov	r2, r3
 80099c2:	69fb      	ldr	r3, [r7, #28]
 80099c4:	431a      	orrs	r2, r3
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	431a      	orrs	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4619      	mov	r1, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	01db      	lsls	r3, r3, #7
 80099d4:	440b      	add	r3, r1
 80099d6:	3384      	adds	r3, #132	@ 0x84
 80099d8:	4619      	mov	r1, r3
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	4313      	orrs	r3, r2
 80099de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	461a      	mov	r2, r3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	01db      	lsls	r3, r3, #7
 80099ea:	4413      	add	r3, r2
 80099ec:	3384      	adds	r3, #132	@ 0x84
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	6812      	ldr	r2, [r2, #0]
 80099f4:	4611      	mov	r1, r2
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	01d2      	lsls	r2, r2, #7
 80099fa:	440a      	add	r2, r1
 80099fc:	3284      	adds	r2, #132	@ 0x84
 80099fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009a02:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	01db      	lsls	r3, r3, #7
 8009a0e:	4413      	add	r3, r2
 8009a10:	3384      	adds	r3, #132	@ 0x84
 8009a12:	461a      	mov	r2, r3
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	695b      	ldr	r3, [r3, #20]
 8009a18:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	01db      	lsls	r3, r3, #7
 8009a24:	4413      	add	r3, r2
 8009a26:	3384      	adds	r3, #132	@ 0x84
 8009a28:	69da      	ldr	r2, [r3, #28]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	01db      	lsls	r3, r3, #7
 8009a34:	440b      	add	r3, r1
 8009a36:	3384      	adds	r3, #132	@ 0x84
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8009b78 <LTDC_SetConfig+0x2e4>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	69da      	ldr	r2, [r3, #28]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	68f9      	ldr	r1, [r7, #12]
 8009a4a:	6809      	ldr	r1, [r1, #0]
 8009a4c:	4608      	mov	r0, r1
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	01c9      	lsls	r1, r1, #7
 8009a52:	4401      	add	r1, r0
 8009a54:	3184      	adds	r1, #132	@ 0x84
 8009a56:	4313      	orrs	r3, r2
 8009a58:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	01db      	lsls	r3, r3, #7
 8009a64:	4413      	add	r3, r2
 8009a66:	3384      	adds	r3, #132	@ 0x84
 8009a68:	461a      	mov	r2, r3
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6e:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8009a78:	2304      	movs	r3, #4
 8009a7a:	61fb      	str	r3, [r7, #28]
 8009a7c:	e01b      	b.n	8009ab6 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d102      	bne.n	8009a8c <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8009a86:	2303      	movs	r3, #3
 8009a88:	61fb      	str	r3, [r7, #28]
 8009a8a:	e014      	b.n	8009ab6 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b04      	cmp	r3, #4
 8009a92:	d00b      	beq.n	8009aac <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d007      	beq.n	8009aac <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8009aa0:	2b03      	cmp	r3, #3
 8009aa2:	d003      	beq.n	8009aac <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8009aa8:	2b07      	cmp	r3, #7
 8009aaa:	d102      	bne.n	8009ab2 <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8009aac:	2302      	movs	r3, #2
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	e001      	b.n	8009ab6 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	461a      	mov	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	01db      	lsls	r3, r3, #7
 8009ac0:	4413      	add	r3, r2
 8009ac2:	3384      	adds	r3, #132	@ 0x84
 8009ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ac6:	68fa      	ldr	r2, [r7, #12]
 8009ac8:	6812      	ldr	r2, [r2, #0]
 8009aca:	4611      	mov	r1, r2
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	01d2      	lsls	r2, r2, #7
 8009ad0:	440a      	add	r2, r1
 8009ad2:	3284      	adds	r2, #132	@ 0x84
 8009ad4:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8009ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ade:	69fa      	ldr	r2, [r7, #28]
 8009ae0:	fb02 f303 	mul.w	r3, r2, r3
 8009ae4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	6859      	ldr	r1, [r3, #4]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	1acb      	subs	r3, r1, r3
 8009af0:	69f9      	ldr	r1, [r7, #28]
 8009af2:	fb01 f303 	mul.w	r3, r1, r3
 8009af6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8009af8:	68f9      	ldr	r1, [r7, #12]
 8009afa:	6809      	ldr	r1, [r1, #0]
 8009afc:	4608      	mov	r0, r1
 8009afe:	6879      	ldr	r1, [r7, #4]
 8009b00:	01c9      	lsls	r1, r1, #7
 8009b02:	4401      	add	r1, r0
 8009b04:	3184      	adds	r1, #132	@ 0x84
 8009b06:	4313      	orrs	r3, r2
 8009b08:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	01db      	lsls	r3, r3, #7
 8009b14:	4413      	add	r3, r2
 8009b16:	3384      	adds	r3, #132	@ 0x84
 8009b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4619      	mov	r1, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	01db      	lsls	r3, r3, #7
 8009b24:	440b      	add	r3, r1
 8009b26:	3384      	adds	r3, #132	@ 0x84
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4b14      	ldr	r3, [pc, #80]	@ (8009b7c <LTDC_SetConfig+0x2e8>)
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	461a      	mov	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	01db      	lsls	r3, r3, #7
 8009b3a:	4413      	add	r3, r2
 8009b3c:	3384      	adds	r3, #132	@ 0x84
 8009b3e:	461a      	mov	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b44:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	01db      	lsls	r3, r3, #7
 8009b50:	4413      	add	r3, r2
 8009b52:	3384      	adds	r3, #132	@ 0x84
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	6812      	ldr	r2, [r2, #0]
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	01d2      	lsls	r2, r2, #7
 8009b60:	440a      	add	r2, r1
 8009b62:	3284      	adds	r2, #132	@ 0x84
 8009b64:	f043 0301 	orr.w	r3, r3, #1
 8009b68:	6013      	str	r3, [r2, #0]
}
 8009b6a:	bf00      	nop
 8009b6c:	3724      	adds	r7, #36	@ 0x24
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	fffff8f8 	.word	0xfffff8f8
 8009b7c:	fffff800 	.word	0xfffff800

08009b80 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b84:	4b05      	ldr	r3, [pc, #20]	@ (8009b9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a04      	ldr	r2, [pc, #16]	@ (8009b9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b8e:	6013      	str	r3, [r2, #0]
}
 8009b90:	bf00      	nop
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	40007000 	.word	0x40007000

08009ba0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009baa:	4b23      	ldr	r3, [pc, #140]	@ (8009c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8009bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bae:	4a22      	ldr	r2, [pc, #136]	@ (8009c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8009bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8009bb6:	4b20      	ldr	r3, [pc, #128]	@ (8009c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bbe:	603b      	str	r3, [r7, #0]
 8009bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8009c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009bce:	f7fb f9bb 	bl	8004f48 <HAL_GetTick>
 8009bd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009bd4:	e009      	b.n	8009bea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009bd6:	f7fb f9b7 	bl	8004f48 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009be4:	d901      	bls.n	8009bea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e022      	b.n	8009c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009bea:	4b14      	ldr	r3, [pc, #80]	@ (8009c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bf6:	d1ee      	bne.n	8009bd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009bf8:	4b10      	ldr	r3, [pc, #64]	@ (8009c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8009c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c04:	f7fb f9a0 	bl	8004f48 <HAL_GetTick>
 8009c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c0a:	e009      	b.n	8009c20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009c0c:	f7fb f99c 	bl	8004f48 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c1a:	d901      	bls.n	8009c20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e007      	b.n	8009c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009c20:	4b06      	ldr	r3, [pc, #24]	@ (8009c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c2c:	d1ee      	bne.n	8009c0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	40023800 	.word	0x40023800
 8009c3c:	40007000 	.word	0x40007000

08009c40 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8009c48:	f7fb f97e 	bl	8004f48 <HAL_GetTick>
 8009c4c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e067      	b.n	8009d28 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10b      	bne.n	8009c7c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7f9 fe9d 	bl	80039ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8009c72:	f241 3188 	movw	r1, #5000	@ 0x1388
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f85e 	bl	8009d38 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	021a      	lsls	r2, r3, #8
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	430a      	orrs	r2, r1
 8009c94:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	2120      	movs	r1, #32
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f856 	bl	8009d54 <QSPI_WaitFlagStateUntilTimeout>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8009cac:	7afb      	ldrb	r3, [r7, #11]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d135      	bne.n	8009d1e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d30 <HAL_QSPI_Init+0xf0>)
 8009cba:	4013      	ands	r3, r2
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	6852      	ldr	r2, [r2, #4]
 8009cc0:	0611      	lsls	r1, r2, #24
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	68d2      	ldr	r2, [r2, #12]
 8009cc6:	4311      	orrs	r1, r2
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	69d2      	ldr	r2, [r2, #28]
 8009ccc:	4311      	orrs	r1, r2
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	6a12      	ldr	r2, [r2, #32]
 8009cd2:	4311      	orrs	r1, r2
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	6812      	ldr	r2, [r2, #0]
 8009cd8:	430b      	orrs	r3, r1
 8009cda:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	4b14      	ldr	r3, [pc, #80]	@ (8009d34 <HAL_QSPI_Init+0xf4>)
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	6912      	ldr	r2, [r2, #16]
 8009cea:	0411      	lsls	r1, r2, #16
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	6952      	ldr	r2, [r2, #20]
 8009cf0:	4311      	orrs	r1, r2
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	6992      	ldr	r2, [r2, #24]
 8009cf6:	4311      	orrs	r1, r2
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	6812      	ldr	r2, [r2, #0]
 8009cfc:	430b      	orrs	r3, r1
 8009cfe:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f042 0201 	orr.w	r2, r2, #1
 8009d0e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2201      	movs	r2, #1
 8009d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2200      	movs	r2, #0
 8009d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8009d26:	7afb      	ldrb	r3, [r7, #11]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	00ffff2f 	.word	0x00ffff2f
 8009d34:	ffe0f8fe 	.word	0xffe0f8fe

08009d38 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	603b      	str	r3, [r7, #0]
 8009d60:	4613      	mov	r3, r2
 8009d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009d64:	e01a      	b.n	8009d9c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6c:	d016      	beq.n	8009d9c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d6e:	f7fb f8eb 	bl	8004f48 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	69ba      	ldr	r2, [r7, #24]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	d302      	bcc.n	8009d84 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10b      	bne.n	8009d9c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2204      	movs	r2, #4
 8009d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d90:	f043 0201 	orr.w	r2, r3, #1
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e00e      	b.n	8009dba <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	4013      	ands	r3, r2
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	bf14      	ite	ne
 8009daa:	2301      	movne	r3, #1
 8009dac:	2300      	moveq	r3, #0
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	461a      	mov	r2, r3
 8009db2:	79fb      	ldrb	r3, [r7, #7]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	d1d6      	bne.n	8009d66 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3710      	adds	r7, #16
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
	...

08009dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e291      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0301 	and.w	r3, r3, #1
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f000 8087 	beq.w	8009ef6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009de8:	4b96      	ldr	r3, [pc, #600]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f003 030c 	and.w	r3, r3, #12
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d00c      	beq.n	8009e0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009df4:	4b93      	ldr	r3, [pc, #588]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f003 030c 	and.w	r3, r3, #12
 8009dfc:	2b08      	cmp	r3, #8
 8009dfe:	d112      	bne.n	8009e26 <HAL_RCC_OscConfig+0x62>
 8009e00:	4b90      	ldr	r3, [pc, #576]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e0c:	d10b      	bne.n	8009e26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e0e:	4b8d      	ldr	r3, [pc, #564]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d06c      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x130>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d168      	bne.n	8009ef4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e26b      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e2e:	d106      	bne.n	8009e3e <HAL_RCC_OscConfig+0x7a>
 8009e30:	4b84      	ldr	r3, [pc, #528]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a83      	ldr	r2, [pc, #524]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e3a:	6013      	str	r3, [r2, #0]
 8009e3c:	e02e      	b.n	8009e9c <HAL_RCC_OscConfig+0xd8>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	685b      	ldr	r3, [r3, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10c      	bne.n	8009e60 <HAL_RCC_OscConfig+0x9c>
 8009e46:	4b7f      	ldr	r3, [pc, #508]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a7e      	ldr	r2, [pc, #504]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	4b7c      	ldr	r3, [pc, #496]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a7b      	ldr	r2, [pc, #492]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e58:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	e01d      	b.n	8009e9c <HAL_RCC_OscConfig+0xd8>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e68:	d10c      	bne.n	8009e84 <HAL_RCC_OscConfig+0xc0>
 8009e6a:	4b76      	ldr	r3, [pc, #472]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a75      	ldr	r2, [pc, #468]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	4b73      	ldr	r3, [pc, #460]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a72      	ldr	r2, [pc, #456]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	e00b      	b.n	8009e9c <HAL_RCC_OscConfig+0xd8>
 8009e84:	4b6f      	ldr	r3, [pc, #444]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a6e      	ldr	r2, [pc, #440]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	4b6c      	ldr	r3, [pc, #432]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a6b      	ldr	r2, [pc, #428]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d013      	beq.n	8009ecc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ea4:	f7fb f850 	bl	8004f48 <HAL_GetTick>
 8009ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eaa:	e008      	b.n	8009ebe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009eac:	f7fb f84c 	bl	8004f48 <HAL_GetTick>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	1ad3      	subs	r3, r2, r3
 8009eb6:	2b64      	cmp	r3, #100	@ 0x64
 8009eb8:	d901      	bls.n	8009ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009eba:	2303      	movs	r3, #3
 8009ebc:	e21f      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ebe:	4b61      	ldr	r3, [pc, #388]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0f0      	beq.n	8009eac <HAL_RCC_OscConfig+0xe8>
 8009eca:	e014      	b.n	8009ef6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ecc:	f7fb f83c 	bl	8004f48 <HAL_GetTick>
 8009ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ed4:	f7fb f838 	bl	8004f48 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b64      	cmp	r3, #100	@ 0x64
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e20b      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ee6:	4b57      	ldr	r3, [pc, #348]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1f0      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x110>
 8009ef2:	e000      	b.n	8009ef6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d069      	beq.n	8009fd6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009f02:	4b50      	ldr	r3, [pc, #320]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f003 030c 	and.w	r3, r3, #12
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d00b      	beq.n	8009f26 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f0e:	4b4d      	ldr	r3, [pc, #308]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	f003 030c 	and.w	r3, r3, #12
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d11c      	bne.n	8009f54 <HAL_RCC_OscConfig+0x190>
 8009f1a:	4b4a      	ldr	r3, [pc, #296]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d116      	bne.n	8009f54 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f26:	4b47      	ldr	r3, [pc, #284]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 0302 	and.w	r3, r3, #2
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d005      	beq.n	8009f3e <HAL_RCC_OscConfig+0x17a>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d001      	beq.n	8009f3e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e1df      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f3e:	4b41      	ldr	r3, [pc, #260]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	493d      	ldr	r1, [pc, #244]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f52:	e040      	b.n	8009fd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d023      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f5c:	4b39      	ldr	r3, [pc, #228]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a38      	ldr	r2, [pc, #224]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f62:	f043 0301 	orr.w	r3, r3, #1
 8009f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f68:	f7fa ffee 	bl	8004f48 <HAL_GetTick>
 8009f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f6e:	e008      	b.n	8009f82 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f70:	f7fa ffea 	bl	8004f48 <HAL_GetTick>
 8009f74:	4602      	mov	r2, r0
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	1ad3      	subs	r3, r2, r3
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e1bd      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f82:	4b30      	ldr	r3, [pc, #192]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d0f0      	beq.n	8009f70 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f8e:	4b2d      	ldr	r3, [pc, #180]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	4929      	ldr	r1, [pc, #164]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	600b      	str	r3, [r1, #0]
 8009fa2:	e018      	b.n	8009fd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fa4:	4b27      	ldr	r3, [pc, #156]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a26      	ldr	r2, [pc, #152]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009faa:	f023 0301 	bic.w	r3, r3, #1
 8009fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb0:	f7fa ffca 	bl	8004f48 <HAL_GetTick>
 8009fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fb6:	e008      	b.n	8009fca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fb8:	f7fa ffc6 	bl	8004f48 <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e199      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fca:	4b1e      	ldr	r3, [pc, #120]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1f0      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f003 0308 	and.w	r3, r3, #8
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d038      	beq.n	800a054 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d019      	beq.n	800a01e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fea:	4b16      	ldr	r3, [pc, #88]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fee:	4a15      	ldr	r2, [pc, #84]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 8009ff0:	f043 0301 	orr.w	r3, r3, #1
 8009ff4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ff6:	f7fa ffa7 	bl	8004f48 <HAL_GetTick>
 8009ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009ffc:	e008      	b.n	800a010 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ffe:	f7fa ffa3 	bl	8004f48 <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	1ad3      	subs	r3, r2, r3
 800a008:	2b02      	cmp	r3, #2
 800a00a:	d901      	bls.n	800a010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e176      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a010:	4b0c      	ldr	r3, [pc, #48]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 800a012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0f0      	beq.n	8009ffe <HAL_RCC_OscConfig+0x23a>
 800a01c:	e01a      	b.n	800a054 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a01e:	4b09      	ldr	r3, [pc, #36]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 800a020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a022:	4a08      	ldr	r2, [pc, #32]	@ (800a044 <HAL_RCC_OscConfig+0x280>)
 800a024:	f023 0301 	bic.w	r3, r3, #1
 800a028:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a02a:	f7fa ff8d 	bl	8004f48 <HAL_GetTick>
 800a02e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a030:	e00a      	b.n	800a048 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a032:	f7fa ff89 	bl	8004f48 <HAL_GetTick>
 800a036:	4602      	mov	r2, r0
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	1ad3      	subs	r3, r2, r3
 800a03c:	2b02      	cmp	r3, #2
 800a03e:	d903      	bls.n	800a048 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e15c      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
 800a044:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a048:	4b91      	ldr	r3, [pc, #580]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a04a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1ee      	bne.n	800a032 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80a4 	beq.w	800a1aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a062:	4b8b      	ldr	r3, [pc, #556]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10d      	bne.n	800a08a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a06e:	4b88      	ldr	r3, [pc, #544]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a072:	4a87      	ldr	r2, [pc, #540]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a078:	6413      	str	r3, [r2, #64]	@ 0x40
 800a07a:	4b85      	ldr	r3, [pc, #532]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a082:	60bb      	str	r3, [r7, #8]
 800a084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a086:	2301      	movs	r3, #1
 800a088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a08a:	4b82      	ldr	r3, [pc, #520]	@ (800a294 <HAL_RCC_OscConfig+0x4d0>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a092:	2b00      	cmp	r3, #0
 800a094:	d118      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a096:	4b7f      	ldr	r3, [pc, #508]	@ (800a294 <HAL_RCC_OscConfig+0x4d0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a7e      	ldr	r2, [pc, #504]	@ (800a294 <HAL_RCC_OscConfig+0x4d0>)
 800a09c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a0a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0a2:	f7fa ff51 	bl	8004f48 <HAL_GetTick>
 800a0a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0a8:	e008      	b.n	800a0bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0aa:	f7fa ff4d 	bl	8004f48 <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	2b64      	cmp	r3, #100	@ 0x64
 800a0b6:	d901      	bls.n	800a0bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e120      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0bc:	4b75      	ldr	r3, [pc, #468]	@ (800a294 <HAL_RCC_OscConfig+0x4d0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0f0      	beq.n	800a0aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d106      	bne.n	800a0de <HAL_RCC_OscConfig+0x31a>
 800a0d0:	4b6f      	ldr	r3, [pc, #444]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a0d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0d4:	4a6e      	ldr	r2, [pc, #440]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a0d6:	f043 0301 	orr.w	r3, r3, #1
 800a0da:	6713      	str	r3, [r2, #112]	@ 0x70
 800a0dc:	e02d      	b.n	800a13a <HAL_RCC_OscConfig+0x376>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10c      	bne.n	800a100 <HAL_RCC_OscConfig+0x33c>
 800a0e6:	4b6a      	ldr	r3, [pc, #424]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a0e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ea:	4a69      	ldr	r2, [pc, #420]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a0ec:	f023 0301 	bic.w	r3, r3, #1
 800a0f0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a0f2:	4b67      	ldr	r3, [pc, #412]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a0f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0f6:	4a66      	ldr	r2, [pc, #408]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a0f8:	f023 0304 	bic.w	r3, r3, #4
 800a0fc:	6713      	str	r3, [r2, #112]	@ 0x70
 800a0fe:	e01c      	b.n	800a13a <HAL_RCC_OscConfig+0x376>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	2b05      	cmp	r3, #5
 800a106:	d10c      	bne.n	800a122 <HAL_RCC_OscConfig+0x35e>
 800a108:	4b61      	ldr	r3, [pc, #388]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a10a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a10c:	4a60      	ldr	r2, [pc, #384]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a10e:	f043 0304 	orr.w	r3, r3, #4
 800a112:	6713      	str	r3, [r2, #112]	@ 0x70
 800a114:	4b5e      	ldr	r3, [pc, #376]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a116:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a118:	4a5d      	ldr	r2, [pc, #372]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a11a:	f043 0301 	orr.w	r3, r3, #1
 800a11e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a120:	e00b      	b.n	800a13a <HAL_RCC_OscConfig+0x376>
 800a122:	4b5b      	ldr	r3, [pc, #364]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a126:	4a5a      	ldr	r2, [pc, #360]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a128:	f023 0301 	bic.w	r3, r3, #1
 800a12c:	6713      	str	r3, [r2, #112]	@ 0x70
 800a12e:	4b58      	ldr	r3, [pc, #352]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a132:	4a57      	ldr	r2, [pc, #348]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a134:	f023 0304 	bic.w	r3, r3, #4
 800a138:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d015      	beq.n	800a16e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a142:	f7fa ff01 	bl	8004f48 <HAL_GetTick>
 800a146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a148:	e00a      	b.n	800a160 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a14a:	f7fa fefd 	bl	8004f48 <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a158:	4293      	cmp	r3, r2
 800a15a:	d901      	bls.n	800a160 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e0ce      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a160:	4b4b      	ldr	r3, [pc, #300]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a164:	f003 0302 	and.w	r3, r3, #2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d0ee      	beq.n	800a14a <HAL_RCC_OscConfig+0x386>
 800a16c:	e014      	b.n	800a198 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a16e:	f7fa feeb 	bl	8004f48 <HAL_GetTick>
 800a172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a174:	e00a      	b.n	800a18c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a176:	f7fa fee7 	bl	8004f48 <HAL_GetTick>
 800a17a:	4602      	mov	r2, r0
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	1ad3      	subs	r3, r2, r3
 800a180:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a184:	4293      	cmp	r3, r2
 800a186:	d901      	bls.n	800a18c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e0b8      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a18c:	4b40      	ldr	r3, [pc, #256]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a18e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1ee      	bne.n	800a176 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a198:	7dfb      	ldrb	r3, [r7, #23]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d105      	bne.n	800a1aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a19e:	4b3c      	ldr	r3, [pc, #240]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1a2:	4a3b      	ldr	r2, [pc, #236]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a1a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1a8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 80a4 	beq.w	800a2fc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a1b4:	4b36      	ldr	r3, [pc, #216]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	f003 030c 	and.w	r3, r3, #12
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d06b      	beq.n	800a298 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d149      	bne.n	800a25c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1c8:	4b31      	ldr	r3, [pc, #196]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a30      	ldr	r2, [pc, #192]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a1ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1d4:	f7fa feb8 	bl	8004f48 <HAL_GetTick>
 800a1d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1dc:	f7fa feb4 	bl	8004f48 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e087      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1ee:	4b28      	ldr	r3, [pc, #160]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1f0      	bne.n	800a1dc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	69da      	ldr	r2, [r3, #28]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	431a      	orrs	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a208:	019b      	lsls	r3, r3, #6
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a210:	085b      	lsrs	r3, r3, #1
 800a212:	3b01      	subs	r3, #1
 800a214:	041b      	lsls	r3, r3, #16
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21c:	061b      	lsls	r3, r3, #24
 800a21e:	4313      	orrs	r3, r2
 800a220:	4a1b      	ldr	r2, [pc, #108]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a222:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a226:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a228:	4b19      	ldr	r3, [pc, #100]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a18      	ldr	r2, [pc, #96]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a22e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a232:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a234:	f7fa fe88 	bl	8004f48 <HAL_GetTick>
 800a238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a23a:	e008      	b.n	800a24e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a23c:	f7fa fe84 	bl	8004f48 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d901      	bls.n	800a24e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e057      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a24e:	4b10      	ldr	r3, [pc, #64]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0f0      	beq.n	800a23c <HAL_RCC_OscConfig+0x478>
 800a25a:	e04f      	b.n	800a2fc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a25c:	4b0c      	ldr	r3, [pc, #48]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a0b      	ldr	r2, [pc, #44]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a262:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a268:	f7fa fe6e 	bl	8004f48 <HAL_GetTick>
 800a26c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a26e:	e008      	b.n	800a282 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a270:	f7fa fe6a 	bl	8004f48 <HAL_GetTick>
 800a274:	4602      	mov	r2, r0
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d901      	bls.n	800a282 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e03d      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a282:	4b03      	ldr	r3, [pc, #12]	@ (800a290 <HAL_RCC_OscConfig+0x4cc>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1f0      	bne.n	800a270 <HAL_RCC_OscConfig+0x4ac>
 800a28e:	e035      	b.n	800a2fc <HAL_RCC_OscConfig+0x538>
 800a290:	40023800 	.word	0x40023800
 800a294:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a298:	4b1b      	ldr	r3, [pc, #108]	@ (800a308 <HAL_RCC_OscConfig+0x544>)
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	699b      	ldr	r3, [r3, #24]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d028      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d121      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d11a      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a2ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d111      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2de:	085b      	lsrs	r3, r3, #1
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d107      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d001      	beq.n	800a2fc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e000      	b.n	800a2fe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	40023800 	.word	0x40023800

0800a30c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e0d0      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a324:	4b6a      	ldr	r3, [pc, #424]	@ (800a4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 030f 	and.w	r3, r3, #15
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d910      	bls.n	800a354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a332:	4b67      	ldr	r3, [pc, #412]	@ (800a4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f023 020f 	bic.w	r2, r3, #15
 800a33a:	4965      	ldr	r1, [pc, #404]	@ (800a4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	4313      	orrs	r3, r2
 800a340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a342:	4b63      	ldr	r3, [pc, #396]	@ (800a4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 030f 	and.w	r3, r3, #15
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d001      	beq.n	800a354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e0b8      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d020      	beq.n	800a3a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0304 	and.w	r3, r3, #4
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a36c:	4b59      	ldr	r3, [pc, #356]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	4a58      	ldr	r2, [pc, #352]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a372:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a376:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d005      	beq.n	800a390 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a384:	4b53      	ldr	r3, [pc, #332]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	4a52      	ldr	r2, [pc, #328]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a38a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a38e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a390:	4b50      	ldr	r3, [pc, #320]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	494d      	ldr	r1, [pc, #308]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d040      	beq.n	800a430 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d107      	bne.n	800a3c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3b6:	4b47      	ldr	r3, [pc, #284]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d115      	bne.n	800a3ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e07f      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d107      	bne.n	800a3de <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3ce:	4b41      	ldr	r3, [pc, #260]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d109      	bne.n	800a3ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e073      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3de:	4b3d      	ldr	r3, [pc, #244]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e06b      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3ee:	4b39      	ldr	r3, [pc, #228]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f023 0203 	bic.w	r2, r3, #3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	4936      	ldr	r1, [pc, #216]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a400:	f7fa fda2 	bl	8004f48 <HAL_GetTick>
 800a404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a406:	e00a      	b.n	800a41e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a408:	f7fa fd9e 	bl	8004f48 <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a416:	4293      	cmp	r3, r2
 800a418:	d901      	bls.n	800a41e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e053      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a41e:	4b2d      	ldr	r3, [pc, #180]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f003 020c 	and.w	r2, r3, #12
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d1eb      	bne.n	800a408 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a430:	4b27      	ldr	r3, [pc, #156]	@ (800a4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f003 030f 	and.w	r3, r3, #15
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d210      	bcs.n	800a460 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a43e:	4b24      	ldr	r3, [pc, #144]	@ (800a4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f023 020f 	bic.w	r2, r3, #15
 800a446:	4922      	ldr	r1, [pc, #136]	@ (800a4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a44e:	4b20      	ldr	r3, [pc, #128]	@ (800a4d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 030f 	and.w	r3, r3, #15
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d001      	beq.n	800a460 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e032      	b.n	800a4c6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d008      	beq.n	800a47e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a46c:	4b19      	ldr	r3, [pc, #100]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	4916      	ldr	r1, [pc, #88]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a47a:	4313      	orrs	r3, r2
 800a47c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d009      	beq.n	800a49e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a48a:	4b12      	ldr	r3, [pc, #72]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	490e      	ldr	r1, [pc, #56]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a49e:	f000 f821 	bl	800a4e4 <HAL_RCC_GetSysClockFreq>
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	091b      	lsrs	r3, r3, #4
 800a4aa:	f003 030f 	and.w	r3, r3, #15
 800a4ae:	490a      	ldr	r1, [pc, #40]	@ (800a4d8 <HAL_RCC_ClockConfig+0x1cc>)
 800a4b0:	5ccb      	ldrb	r3, [r1, r3]
 800a4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a4b6:	4a09      	ldr	r2, [pc, #36]	@ (800a4dc <HAL_RCC_ClockConfig+0x1d0>)
 800a4b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a4ba:	4b09      	ldr	r3, [pc, #36]	@ (800a4e0 <HAL_RCC_ClockConfig+0x1d4>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7f9 ff82 	bl	80043c8 <HAL_InitTick>

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	40023c00 	.word	0x40023c00
 800a4d4:	40023800 	.word	0x40023800
 800a4d8:	0801c360 	.word	0x0801c360
 800a4dc:	20000000 	.word	0x20000000
 800a4e0:	2000004c 	.word	0x2000004c

0800a4e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4e8:	b090      	sub	sp, #64	@ 0x40
 800a4ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4fc:	4b59      	ldr	r3, [pc, #356]	@ (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f003 030c 	and.w	r3, r3, #12
 800a504:	2b08      	cmp	r3, #8
 800a506:	d00d      	beq.n	800a524 <HAL_RCC_GetSysClockFreq+0x40>
 800a508:	2b08      	cmp	r3, #8
 800a50a:	f200 80a1 	bhi.w	800a650 <HAL_RCC_GetSysClockFreq+0x16c>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <HAL_RCC_GetSysClockFreq+0x34>
 800a512:	2b04      	cmp	r3, #4
 800a514:	d003      	beq.n	800a51e <HAL_RCC_GetSysClockFreq+0x3a>
 800a516:	e09b      	b.n	800a650 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a518:	4b53      	ldr	r3, [pc, #332]	@ (800a668 <HAL_RCC_GetSysClockFreq+0x184>)
 800a51a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a51c:	e09b      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a51e:	4b53      	ldr	r3, [pc, #332]	@ (800a66c <HAL_RCC_GetSysClockFreq+0x188>)
 800a520:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a522:	e098      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a524:	4b4f      	ldr	r3, [pc, #316]	@ (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a52c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a52e:	4b4d      	ldr	r3, [pc, #308]	@ (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d028      	beq.n	800a58c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a53a:	4b4a      	ldr	r3, [pc, #296]	@ (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	099b      	lsrs	r3, r3, #6
 800a540:	2200      	movs	r2, #0
 800a542:	623b      	str	r3, [r7, #32]
 800a544:	627a      	str	r2, [r7, #36]	@ 0x24
 800a546:	6a3b      	ldr	r3, [r7, #32]
 800a548:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a54c:	2100      	movs	r1, #0
 800a54e:	4b47      	ldr	r3, [pc, #284]	@ (800a66c <HAL_RCC_GetSysClockFreq+0x188>)
 800a550:	fb03 f201 	mul.w	r2, r3, r1
 800a554:	2300      	movs	r3, #0
 800a556:	fb00 f303 	mul.w	r3, r0, r3
 800a55a:	4413      	add	r3, r2
 800a55c:	4a43      	ldr	r2, [pc, #268]	@ (800a66c <HAL_RCC_GetSysClockFreq+0x188>)
 800a55e:	fba0 1202 	umull	r1, r2, r0, r2
 800a562:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a564:	460a      	mov	r2, r1
 800a566:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a56a:	4413      	add	r3, r2
 800a56c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a56e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a570:	2200      	movs	r2, #0
 800a572:	61bb      	str	r3, [r7, #24]
 800a574:	61fa      	str	r2, [r7, #28]
 800a576:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a57a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a57e:	f7f5 feaf 	bl	80002e0 <__aeabi_uldivmod>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	4613      	mov	r3, r2
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a58a:	e053      	b.n	800a634 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a58c:	4b35      	ldr	r3, [pc, #212]	@ (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	099b      	lsrs	r3, r3, #6
 800a592:	2200      	movs	r2, #0
 800a594:	613b      	str	r3, [r7, #16]
 800a596:	617a      	str	r2, [r7, #20]
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a59e:	f04f 0b00 	mov.w	fp, #0
 800a5a2:	4652      	mov	r2, sl
 800a5a4:	465b      	mov	r3, fp
 800a5a6:	f04f 0000 	mov.w	r0, #0
 800a5aa:	f04f 0100 	mov.w	r1, #0
 800a5ae:	0159      	lsls	r1, r3, #5
 800a5b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5b4:	0150      	lsls	r0, r2, #5
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	ebb2 080a 	subs.w	r8, r2, sl
 800a5be:	eb63 090b 	sbc.w	r9, r3, fp
 800a5c2:	f04f 0200 	mov.w	r2, #0
 800a5c6:	f04f 0300 	mov.w	r3, #0
 800a5ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a5ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a5d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a5d6:	ebb2 0408 	subs.w	r4, r2, r8
 800a5da:	eb63 0509 	sbc.w	r5, r3, r9
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	00eb      	lsls	r3, r5, #3
 800a5e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5ec:	00e2      	lsls	r2, r4, #3
 800a5ee:	4614      	mov	r4, r2
 800a5f0:	461d      	mov	r5, r3
 800a5f2:	eb14 030a 	adds.w	r3, r4, sl
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	eb45 030b 	adc.w	r3, r5, fp
 800a5fc:	607b      	str	r3, [r7, #4]
 800a5fe:	f04f 0200 	mov.w	r2, #0
 800a602:	f04f 0300 	mov.w	r3, #0
 800a606:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a60a:	4629      	mov	r1, r5
 800a60c:	028b      	lsls	r3, r1, #10
 800a60e:	4621      	mov	r1, r4
 800a610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a614:	4621      	mov	r1, r4
 800a616:	028a      	lsls	r2, r1, #10
 800a618:	4610      	mov	r0, r2
 800a61a:	4619      	mov	r1, r3
 800a61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a61e:	2200      	movs	r2, #0
 800a620:	60bb      	str	r3, [r7, #8]
 800a622:	60fa      	str	r2, [r7, #12]
 800a624:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a628:	f7f5 fe5a 	bl	80002e0 <__aeabi_uldivmod>
 800a62c:	4602      	mov	r2, r0
 800a62e:	460b      	mov	r3, r1
 800a630:	4613      	mov	r3, r2
 800a632:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a634:	4b0b      	ldr	r3, [pc, #44]	@ (800a664 <HAL_RCC_GetSysClockFreq+0x180>)
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	0c1b      	lsrs	r3, r3, #16
 800a63a:	f003 0303 	and.w	r3, r3, #3
 800a63e:	3301      	adds	r3, #1
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800a644:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a64e:	e002      	b.n	800a656 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a650:	4b05      	ldr	r3, [pc, #20]	@ (800a668 <HAL_RCC_GetSysClockFreq+0x184>)
 800a652:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a654:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3740      	adds	r7, #64	@ 0x40
 800a65c:	46bd      	mov	sp, r7
 800a65e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a662:	bf00      	nop
 800a664:	40023800 	.word	0x40023800
 800a668:	00f42400 	.word	0x00f42400
 800a66c:	017d7840 	.word	0x017d7840

0800a670 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a670:	b480      	push	{r7}
 800a672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a674:	4b03      	ldr	r3, [pc, #12]	@ (800a684 <HAL_RCC_GetHCLKFreq+0x14>)
 800a676:	681b      	ldr	r3, [r3, #0]
}
 800a678:	4618      	mov	r0, r3
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20000000 	.word	0x20000000

0800a688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a68c:	f7ff fff0 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a690:	4602      	mov	r2, r0
 800a692:	4b05      	ldr	r3, [pc, #20]	@ (800a6a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	0a9b      	lsrs	r3, r3, #10
 800a698:	f003 0307 	and.w	r3, r3, #7
 800a69c:	4903      	ldr	r1, [pc, #12]	@ (800a6ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800a69e:	5ccb      	ldrb	r3, [r1, r3]
 800a6a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	40023800 	.word	0x40023800
 800a6ac:	0801c370 	.word	0x0801c370

0800a6b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a6b4:	f7ff ffdc 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	4b05      	ldr	r3, [pc, #20]	@ (800a6d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	0b5b      	lsrs	r3, r3, #13
 800a6c0:	f003 0307 	and.w	r3, r3, #7
 800a6c4:	4903      	ldr	r1, [pc, #12]	@ (800a6d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6c6:	5ccb      	ldrb	r3, [r1, r3]
 800a6c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	40023800 	.word	0x40023800
 800a6d4:	0801c370 	.word	0x0801c370

0800a6d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	220f      	movs	r2, #15
 800a6e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a6e8:	4b12      	ldr	r3, [pc, #72]	@ (800a734 <HAL_RCC_GetClockConfig+0x5c>)
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f003 0203 	and.w	r2, r3, #3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a6f4:	4b0f      	ldr	r3, [pc, #60]	@ (800a734 <HAL_RCC_GetClockConfig+0x5c>)
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a700:	4b0c      	ldr	r3, [pc, #48]	@ (800a734 <HAL_RCC_GetClockConfig+0x5c>)
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a70c:	4b09      	ldr	r3, [pc, #36]	@ (800a734 <HAL_RCC_GetClockConfig+0x5c>)
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	08db      	lsrs	r3, r3, #3
 800a712:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a71a:	4b07      	ldr	r3, [pc, #28]	@ (800a738 <HAL_RCC_GetClockConfig+0x60>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 020f 	and.w	r2, r3, #15
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	601a      	str	r2, [r3, #0]
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	40023800 	.word	0x40023800
 800a738:	40023c00 	.word	0x40023c00

0800a73c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a744:	2300      	movs	r3, #0
 800a746:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a750:	2300      	movs	r3, #0
 800a752:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	d012      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a764:	4b69      	ldr	r3, [pc, #420]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	4a68      	ldr	r2, [pc, #416]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a76a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a76e:	6093      	str	r3, [r2, #8]
 800a770:	4b66      	ldr	r3, [pc, #408]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a772:	689a      	ldr	r2, [r3, #8]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a778:	4964      	ldr	r1, [pc, #400]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a77a:	4313      	orrs	r3, r2
 800a77c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a786:	2301      	movs	r3, #1
 800a788:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a792:	2b00      	cmp	r3, #0
 800a794:	d017      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a796:	4b5d      	ldr	r3, [pc, #372]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a798:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a79c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7a4:	4959      	ldr	r1, [pc, #356]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7b4:	d101      	bne.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d101      	bne.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d017      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a7d2:	4b4e      	ldr	r3, [pc, #312]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a7d8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e0:	494a      	ldr	r1, [pc, #296]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7f0:	d101      	bne.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d101      	bne.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a7fe:	2301      	movs	r3, #1
 800a800:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a80e:	2301      	movs	r3, #1
 800a810:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f000 808b 	beq.w	800a936 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a820:	4b3a      	ldr	r3, [pc, #232]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a824:	4a39      	ldr	r2, [pc, #228]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a826:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a82a:	6413      	str	r3, [r2, #64]	@ 0x40
 800a82c:	4b37      	ldr	r3, [pc, #220]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a82e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a830:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a834:	60bb      	str	r3, [r7, #8]
 800a836:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a838:	4b35      	ldr	r3, [pc, #212]	@ (800a910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a34      	ldr	r2, [pc, #208]	@ (800a910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a83e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a844:	f7fa fb80 	bl	8004f48 <HAL_GetTick>
 800a848:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a84a:	e008      	b.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a84c:	f7fa fb7c 	bl	8004f48 <HAL_GetTick>
 800a850:	4602      	mov	r2, r0
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	2b64      	cmp	r3, #100	@ 0x64
 800a858:	d901      	bls.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e357      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800a85e:	4b2c      	ldr	r3, [pc, #176]	@ (800a910 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a866:	2b00      	cmp	r3, #0
 800a868:	d0f0      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a86a:	4b28      	ldr	r3, [pc, #160]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a86c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a86e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a872:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d035      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a87e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a882:	693a      	ldr	r2, [r7, #16]
 800a884:	429a      	cmp	r2, r3
 800a886:	d02e      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a888:	4b20      	ldr	r3, [pc, #128]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a88a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a88c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a890:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a892:	4b1e      	ldr	r3, [pc, #120]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a896:	4a1d      	ldr	r2, [pc, #116]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a89c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a89e:	4b1b      	ldr	r3, [pc, #108]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8a2:	4a1a      	ldr	r2, [pc, #104]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800a8aa:	4a18      	ldr	r2, [pc, #96]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a8b0:	4b16      	ldr	r3, [pc, #88]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d114      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8bc:	f7fa fb44 	bl	8004f48 <HAL_GetTick>
 800a8c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8c2:	e00a      	b.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a8c4:	f7fa fb40 	bl	8004f48 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d901      	bls.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e319      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8da:	4b0c      	ldr	r3, [pc, #48]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d0ee      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a8f2:	d111      	bne.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800a8f4:	4b05      	ldr	r3, [pc, #20]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a900:	4b04      	ldr	r3, [pc, #16]	@ (800a914 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800a902:	400b      	ands	r3, r1
 800a904:	4901      	ldr	r1, [pc, #4]	@ (800a90c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a906:	4313      	orrs	r3, r2
 800a908:	608b      	str	r3, [r1, #8]
 800a90a:	e00b      	b.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800a90c:	40023800 	.word	0x40023800
 800a910:	40007000 	.word	0x40007000
 800a914:	0ffffcff 	.word	0x0ffffcff
 800a918:	4baa      	ldr	r3, [pc, #680]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	4aa9      	ldr	r2, [pc, #676]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a91e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800a922:	6093      	str	r3, [r2, #8]
 800a924:	4ba7      	ldr	r3, [pc, #668]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a926:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a930:	49a4      	ldr	r1, [pc, #656]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a932:	4313      	orrs	r3, r2
 800a934:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0310 	and.w	r3, r3, #16
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d010      	beq.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a942:	4ba0      	ldr	r3, [pc, #640]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a948:	4a9e      	ldr	r2, [pc, #632]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a94a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a94e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800a952:	4b9c      	ldr	r3, [pc, #624]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a954:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95c:	4999      	ldr	r1, [pc, #612]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a95e:	4313      	orrs	r3, r2
 800a960:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a970:	4b94      	ldr	r3, [pc, #592]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a976:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a97e:	4991      	ldr	r1, [pc, #580]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a980:	4313      	orrs	r3, r2
 800a982:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a992:	4b8c      	ldr	r3, [pc, #560]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a998:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9a0:	4988      	ldr	r1, [pc, #544]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a9b4:	4b83      	ldr	r3, [pc, #524]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a9b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9c2:	4980      	ldr	r1, [pc, #512]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a9d6:	4b7b      	ldr	r3, [pc, #492]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9e4:	4977      	ldr	r1, [pc, #476]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a9f8:	4b72      	ldr	r3, [pc, #456]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800a9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9fe:	f023 0203 	bic.w	r2, r3, #3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa06:	496f      	ldr	r1, [pc, #444]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800aa1a:	4b6a      	ldr	r3, [pc, #424]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa20:	f023 020c 	bic.w	r2, r3, #12
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa28:	4966      	ldr	r1, [pc, #408]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00a      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800aa3c:	4b61      	ldr	r3, [pc, #388]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa42:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa4a:	495e      	ldr	r1, [pc, #376]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aa5e:	4b59      	ldr	r3, [pc, #356]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa64:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa6c:	4955      	ldr	r1, [pc, #340]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800aa80:	4b50      	ldr	r3, [pc, #320]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa86:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa8e:	494d      	ldr	r1, [pc, #308]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aa90:	4313      	orrs	r3, r2
 800aa92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800aaa2:	4b48      	ldr	r3, [pc, #288]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaa8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aab0:	4944      	ldr	r1, [pc, #272]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aab2:	4313      	orrs	r3, r2
 800aab4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00a      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800aac4:	4b3f      	ldr	r3, [pc, #252]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aad2:	493c      	ldr	r1, [pc, #240]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aad4:	4313      	orrs	r3, r2
 800aad6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800aae6:	4b37      	ldr	r3, [pc, #220]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaf4:	4933      	ldr	r1, [pc, #204]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d00a      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab08:	4b2e      	ldr	r3, [pc, #184]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab0e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab16:	492b      	ldr	r1, [pc, #172]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d011      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ab2a:	4b26      	ldr	r3, [pc, #152]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab30:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab38:	4922      	ldr	r1, [pc, #136]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab44:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab48:	d101      	bne.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0308 	and.w	r3, r3, #8
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ab6a:	4b16      	ldr	r3, [pc, #88]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab70:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ab78:	4912      	ldr	r1, [pc, #72]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab92:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab9c:	4909      	ldr	r1, [pc, #36]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d006      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	f000 80d9 	beq.w	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800abb8:	4b02      	ldr	r3, [pc, #8]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a01      	ldr	r2, [pc, #4]	@ (800abc4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800abbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800abc2:	e001      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800abc4:	40023800 	.word	0x40023800
 800abc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abca:	f7fa f9bd 	bl	8004f48 <HAL_GetTick>
 800abce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800abd0:	e008      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800abd2:	f7fa f9b9 	bl	8004f48 <HAL_GetTick>
 800abd6:	4602      	mov	r2, r0
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	2b64      	cmp	r3, #100	@ 0x64
 800abde:	d901      	bls.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800abe0:	2303      	movs	r3, #3
 800abe2:	e194      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800abe4:	4b6c      	ldr	r3, [pc, #432]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d1f0      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d021      	beq.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d11d      	bne.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ac04:	4b64      	ldr	r3, [pc, #400]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ac06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac0a:	0c1b      	lsrs	r3, r3, #16
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ac12:	4b61      	ldr	r3, [pc, #388]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ac14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac18:	0e1b      	lsrs	r3, r3, #24
 800ac1a:	f003 030f 	and.w	r3, r3, #15
 800ac1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	019a      	lsls	r2, r3, #6
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	041b      	lsls	r3, r3, #16
 800ac2a:	431a      	orrs	r2, r3
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	061b      	lsls	r3, r3, #24
 800ac30:	431a      	orrs	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	071b      	lsls	r3, r3, #28
 800ac38:	4957      	ldr	r1, [pc, #348]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d004      	beq.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac54:	d00a      	beq.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d02e      	beq.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac6a:	d129      	bne.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ac6c:	4b4a      	ldr	r3, [pc, #296]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ac6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac72:	0c1b      	lsrs	r3, r3, #16
 800ac74:	f003 0303 	and.w	r3, r3, #3
 800ac78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ac7a:	4b47      	ldr	r3, [pc, #284]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ac7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac80:	0f1b      	lsrs	r3, r3, #28
 800ac82:	f003 0307 	and.w	r3, r3, #7
 800ac86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	019a      	lsls	r2, r3, #6
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	041b      	lsls	r3, r3, #16
 800ac92:	431a      	orrs	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	061b      	lsls	r3, r3, #24
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	071b      	lsls	r3, r3, #28
 800aca0:	493d      	ldr	r1, [pc, #244]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aca8:	4b3b      	ldr	r3, [pc, #236]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800acaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acae:	f023 021f 	bic.w	r2, r3, #31
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb6:	3b01      	subs	r3, #1
 800acb8:	4937      	ldr	r1, [pc, #220]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800acba:	4313      	orrs	r3, r2
 800acbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d01d      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800accc:	4b32      	ldr	r3, [pc, #200]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800acce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800acd2:	0e1b      	lsrs	r3, r3, #24
 800acd4:	f003 030f 	and.w	r3, r3, #15
 800acd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800acda:	4b2f      	ldr	r3, [pc, #188]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800acdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ace0:	0f1b      	lsrs	r3, r3, #28
 800ace2:	f003 0307 	and.w	r3, r3, #7
 800ace6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	019a      	lsls	r2, r3, #6
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	041b      	lsls	r3, r3, #16
 800acf4:	431a      	orrs	r2, r3
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	061b      	lsls	r3, r3, #24
 800acfa:	431a      	orrs	r2, r3
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	071b      	lsls	r3, r3, #28
 800ad00:	4925      	ldr	r1, [pc, #148]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad02:	4313      	orrs	r3, r2
 800ad04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d011      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	019a      	lsls	r2, r3, #6
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	041b      	lsls	r3, r3, #16
 800ad20:	431a      	orrs	r2, r3
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	061b      	lsls	r3, r3, #24
 800ad28:	431a      	orrs	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	071b      	lsls	r3, r3, #28
 800ad30:	4919      	ldr	r1, [pc, #100]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad32:	4313      	orrs	r3, r2
 800ad34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ad38:	4b17      	ldr	r3, [pc, #92]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a16      	ldr	r2, [pc, #88]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad44:	f7fa f900 	bl	8004f48 <HAL_GetTick>
 800ad48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ad4a:	e008      	b.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ad4c:	f7fa f8fc 	bl	8004f48 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	2b64      	cmp	r3, #100	@ 0x64
 800ad58:	d901      	bls.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad5a:	2303      	movs	r3, #3
 800ad5c:	e0d7      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ad5e:	4b0e      	ldr	r3, [pc, #56]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d0f0      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	f040 80cd 	bne.w	800af0c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ad72:	4b09      	ldr	r3, [pc, #36]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a08      	ldr	r2, [pc, #32]	@ (800ad98 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ad78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ad7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad7e:	f7fa f8e3 	bl	8004f48 <HAL_GetTick>
 800ad82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ad84:	e00a      	b.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ad86:	f7fa f8df 	bl	8004f48 <HAL_GetTick>
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	1ad3      	subs	r3, r2, r3
 800ad90:	2b64      	cmp	r3, #100	@ 0x64
 800ad92:	d903      	bls.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad94:	2303      	movs	r3, #3
 800ad96:	e0ba      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ad98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ad9c:	4b5e      	ldr	r3, [pc, #376]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ada4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ada8:	d0ed      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d003      	beq.n	800adbe <HAL_RCCEx_PeriphCLKConfig+0x682>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d009      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d02e      	beq.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adce:	2b00      	cmp	r3, #0
 800add0:	d12a      	bne.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800add2:	4b51      	ldr	r3, [pc, #324]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800add4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800add8:	0c1b      	lsrs	r3, r3, #16
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ade0:	4b4d      	ldr	r3, [pc, #308]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ade2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ade6:	0f1b      	lsrs	r3, r3, #28
 800ade8:	f003 0307 	and.w	r3, r3, #7
 800adec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	695b      	ldr	r3, [r3, #20]
 800adf2:	019a      	lsls	r2, r3, #6
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	041b      	lsls	r3, r3, #16
 800adf8:	431a      	orrs	r2, r3
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	061b      	lsls	r3, r3, #24
 800ae00:	431a      	orrs	r2, r3
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	071b      	lsls	r3, r3, #28
 800ae06:	4944      	ldr	r1, [pc, #272]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ae0e:	4b42      	ldr	r3, [pc, #264]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	493d      	ldr	r1, [pc, #244]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae22:	4313      	orrs	r3, r2
 800ae24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d022      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ae38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae3c:	d11d      	bne.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ae3e:	4b36      	ldr	r3, [pc, #216]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae44:	0e1b      	lsrs	r3, r3, #24
 800ae46:	f003 030f 	and.w	r3, r3, #15
 800ae4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ae4c:	4b32      	ldr	r3, [pc, #200]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae52:	0f1b      	lsrs	r3, r3, #28
 800ae54:	f003 0307 	and.w	r3, r3, #7
 800ae58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	019a      	lsls	r2, r3, #6
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	041b      	lsls	r3, r3, #16
 800ae66:	431a      	orrs	r2, r3
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	061b      	lsls	r3, r3, #24
 800ae6c:	431a      	orrs	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	071b      	lsls	r3, r3, #28
 800ae72:	4929      	ldr	r1, [pc, #164]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f003 0308 	and.w	r3, r3, #8
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d028      	beq.n	800aed8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ae86:	4b24      	ldr	r3, [pc, #144]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae8c:	0e1b      	lsrs	r3, r3, #24
 800ae8e:	f003 030f 	and.w	r3, r3, #15
 800ae92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ae94:	4b20      	ldr	r3, [pc, #128]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ae96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae9a:	0c1b      	lsrs	r3, r3, #16
 800ae9c:	f003 0303 	and.w	r3, r3, #3
 800aea0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	695b      	ldr	r3, [r3, #20]
 800aea6:	019a      	lsls	r2, r3, #6
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	041b      	lsls	r3, r3, #16
 800aeac:	431a      	orrs	r2, r3
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	061b      	lsls	r3, r3, #24
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	69db      	ldr	r3, [r3, #28]
 800aeb8:	071b      	lsls	r3, r3, #28
 800aeba:	4917      	ldr	r1, [pc, #92]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aebc:	4313      	orrs	r3, r2
 800aebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800aec2:	4b15      	ldr	r3, [pc, #84]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aec8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed0:	4911      	ldr	r1, [pc, #68]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aed2:	4313      	orrs	r3, r2
 800aed4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800aed8:	4b0f      	ldr	r3, [pc, #60]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a0e      	ldr	r2, [pc, #56]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800aede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aee2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aee4:	f7fa f830 	bl	8004f48 <HAL_GetTick>
 800aee8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aeea:	e008      	b.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800aeec:	f7fa f82c 	bl	8004f48 <HAL_GetTick>
 800aef0:	4602      	mov	r2, r0
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	1ad3      	subs	r3, r2, r3
 800aef6:	2b64      	cmp	r3, #100	@ 0x64
 800aef8:	d901      	bls.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e007      	b.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800aefe:	4b06      	ldr	r3, [pc, #24]	@ (800af18 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af0a:	d1ef      	bne.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3720      	adds	r7, #32
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	40023800 	.word	0x40023800

0800af1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b087      	sub	sp, #28
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800af30:	2300      	movs	r3, #0
 800af32:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800af3a:	f040 808d 	bne.w	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800af3e:	4b93      	ldr	r3, [pc, #588]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af44:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800af4c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af54:	d07c      	beq.n	800b050 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800af5c:	d87b      	bhi.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d004      	beq.n	800af6e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af6a:	d039      	beq.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800af6c:	e073      	b.n	800b056 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800af6e:	4b87      	ldr	r3, [pc, #540]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af76:	2b00      	cmp	r3, #0
 800af78:	d108      	bne.n	800af8c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800af7a:	4b84      	ldr	r3, [pc, #528]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af82:	4a83      	ldr	r2, [pc, #524]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800af84:	fbb2 f3f3 	udiv	r3, r2, r3
 800af88:	613b      	str	r3, [r7, #16]
 800af8a:	e007      	b.n	800af9c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800af8c:	4b7f      	ldr	r3, [pc, #508]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af94:	4a7f      	ldr	r2, [pc, #508]	@ (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800af96:	fbb2 f3f3 	udiv	r3, r2, r3
 800af9a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800af9c:	4b7b      	ldr	r3, [pc, #492]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afa2:	0e1b      	lsrs	r3, r3, #24
 800afa4:	f003 030f 	and.w	r3, r3, #15
 800afa8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800afaa:	4b78      	ldr	r3, [pc, #480]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800afac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afb0:	099b      	lsrs	r3, r3, #6
 800afb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	fb03 f202 	mul.w	r2, r3, r2
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800afc2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800afc4:	4b71      	ldr	r3, [pc, #452]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800afc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afca:	0a1b      	lsrs	r3, r3, #8
 800afcc:	f003 031f 	and.w	r3, r3, #31
 800afd0:	3301      	adds	r3, #1
 800afd2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afdc:	617b      	str	r3, [r7, #20]
        break;
 800afde:	e03b      	b.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800afe0:	4b6a      	ldr	r3, [pc, #424]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d108      	bne.n	800affe <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800afec:	4b67      	ldr	r3, [pc, #412]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aff4:	4a66      	ldr	r2, [pc, #408]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800aff6:	fbb2 f3f3 	udiv	r3, r2, r3
 800affa:	613b      	str	r3, [r7, #16]
 800affc:	e007      	b.n	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800affe:	4b63      	ldr	r3, [pc, #396]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b006:	4a63      	ldr	r2, [pc, #396]	@ (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b008:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b00e:	4b5f      	ldr	r3, [pc, #380]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b014:	0e1b      	lsrs	r3, r3, #24
 800b016:	f003 030f 	and.w	r3, r3, #15
 800b01a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b01c:	4b5b      	ldr	r3, [pc, #364]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b01e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b022:	099b      	lsrs	r3, r3, #6
 800b024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	fb03 f202 	mul.w	r2, r3, r2
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	fbb2 f3f3 	udiv	r3, r2, r3
 800b034:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b036:	4b55      	ldr	r3, [pc, #340]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b038:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b03c:	f003 031f 	and.w	r3, r3, #31
 800b040:	3301      	adds	r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b044:	697a      	ldr	r2, [r7, #20]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	fbb2 f3f3 	udiv	r3, r2, r3
 800b04c:	617b      	str	r3, [r7, #20]
        break;
 800b04e:	e003      	b.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b050:	4b51      	ldr	r3, [pc, #324]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b052:	617b      	str	r3, [r7, #20]
        break;
 800b054:	e000      	b.n	800b058 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800b056:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b05e:	f040 808d 	bne.w	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800b062:	4b4a      	ldr	r3, [pc, #296]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b068:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800b070:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b078:	d07c      	beq.n	800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b080:	d87b      	bhi.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b08e:	d039      	beq.n	800b104 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800b090:	e073      	b.n	800b17a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b092:	4b3e      	ldr	r3, [pc, #248]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d108      	bne.n	800b0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b09e:	4b3b      	ldr	r3, [pc, #236]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0a6:	4a3a      	ldr	r2, [pc, #232]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0ac:	613b      	str	r3, [r7, #16]
 800b0ae:	e007      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b0b0:	4b36      	ldr	r3, [pc, #216]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0b8:	4a36      	ldr	r2, [pc, #216]	@ (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0be:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800b0c0:	4b32      	ldr	r3, [pc, #200]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0c6:	0e1b      	lsrs	r3, r3, #24
 800b0c8:	f003 030f 	and.w	r3, r3, #15
 800b0cc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800b0ce:	4b2f      	ldr	r3, [pc, #188]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0d4:	099b      	lsrs	r3, r3, #6
 800b0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0da:	693a      	ldr	r2, [r7, #16]
 800b0dc:	fb03 f202 	mul.w	r2, r3, r2
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0e6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800b0e8:	4b28      	ldr	r3, [pc, #160]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0ee:	0a1b      	lsrs	r3, r3, #8
 800b0f0:	f003 031f 	and.w	r3, r3, #31
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b100:	617b      	str	r3, [r7, #20]
        break;
 800b102:	e03b      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800b104:	4b21      	ldr	r3, [pc, #132]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d108      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b110:	4b1e      	ldr	r3, [pc, #120]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b118:	4a1d      	ldr	r2, [pc, #116]	@ (800b190 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b11e:	613b      	str	r3, [r7, #16]
 800b120:	e007      	b.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800b122:	4b1a      	ldr	r3, [pc, #104]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b12a:	4a1a      	ldr	r2, [pc, #104]	@ (800b194 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b12c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b130:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800b132:	4b16      	ldr	r3, [pc, #88]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b138:	0e1b      	lsrs	r3, r3, #24
 800b13a:	f003 030f 	and.w	r3, r3, #15
 800b13e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800b140:	4b12      	ldr	r3, [pc, #72]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b146:	099b      	lsrs	r3, r3, #6
 800b148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b14c:	693a      	ldr	r2, [r7, #16]
 800b14e:	fb03 f202 	mul.w	r2, r3, r2
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	fbb2 f3f3 	udiv	r3, r2, r3
 800b158:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800b15a:	4b0c      	ldr	r3, [pc, #48]	@ (800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b15c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b160:	f003 031f 	and.w	r3, r3, #31
 800b164:	3301      	adds	r3, #1
 800b166:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b170:	617b      	str	r3, [r7, #20]
        break;
 800b172:	e003      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800b174:	4b08      	ldr	r3, [pc, #32]	@ (800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b176:	617b      	str	r3, [r7, #20]
        break;
 800b178:	e000      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800b17a:	bf00      	nop
      }
    }
  }

  return frequency;
 800b17c:	697b      	ldr	r3, [r7, #20]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	371c      	adds	r7, #28
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	40023800 	.word	0x40023800
 800b190:	00f42400 	.word	0x00f42400
 800b194:	017d7840 	.word	0x017d7840
 800b198:	00bb8000 	.word	0x00bb8000

0800b19c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d101      	bne.n	800b1ae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e071      	b.n	800b292 <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	7f5b      	ldrb	r3, [r3, #29]
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d105      	bne.n	800b1c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f7f8 fc84 	bl	8003acc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f003 0310 	and.w	r3, r3, #16
 800b1d4:	2b10      	cmp	r3, #16
 800b1d6:	d053      	beq.n	800b280 <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	22ca      	movs	r2, #202	@ 0xca
 800b1de:	625a      	str	r2, [r3, #36]	@ 0x24
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2253      	movs	r2, #83	@ 0x53
 800b1e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fb75 	bl	800b8d8 <RTC_EnterInitMode>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d12a      	bne.n	800b24e <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6899      	ldr	r1, [r3, #8]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	4b26      	ldr	r3, [pc, #152]	@ (800b29c <HAL_RTC_Init+0x100>)
 800b204:	400b      	ands	r3, r1
 800b206:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6899      	ldr	r1, [r3, #8]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685a      	ldr	r2, [r3, #4]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	431a      	orrs	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	431a      	orrs	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	430a      	orrs	r2, r1
 800b224:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	68d2      	ldr	r2, [r2, #12]
 800b22e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	6919      	ldr	r1, [r3, #16]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	689b      	ldr	r3, [r3, #8]
 800b23a:	041a      	lsls	r2, r3, #16
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	430a      	orrs	r2, r1
 800b242:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fb7e 	bl	800b946 <RTC_ExitInitMode>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b24e:	7bfb      	ldrb	r3, [r7, #15]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d110      	bne.n	800b276 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f022 0208 	bic.w	r2, r2, #8
 800b262:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	699a      	ldr	r2, [r3, #24]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	430a      	orrs	r2, r1
 800b274:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	22ff      	movs	r2, #255	@ 0xff
 800b27c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b27e:	e001      	b.n	800b284 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b284:	7bfb      	ldrb	r3, [r7, #15]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d102      	bne.n	800b290 <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2201      	movs	r2, #1
 800b28e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b290:	7bfb      	ldrb	r3, [r7, #15]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3710      	adds	r7, #16
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	ff8fffbf 	.word	0xff8fffbf

0800b2a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b2a0:	b590      	push	{r4, r7, lr}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	7f1b      	ldrb	r3, [r3, #28]
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_RTC_SetTime+0x1c>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e085      	b.n	800b3c8 <HAL_RTC_SetTime+0x128>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2202      	movs	r2, #2
 800b2c6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d126      	bne.n	800b31c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d102      	bne.n	800b2e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f000 fb52 	bl	800b990 <RTC_ByteToBcd2>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	785b      	ldrb	r3, [r3, #1]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 fb4b 	bl	800b990 <RTC_ByteToBcd2>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b2fe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	789b      	ldrb	r3, [r3, #2]
 800b304:	4618      	mov	r0, r3
 800b306:	f000 fb43 	bl	800b990 <RTC_ByteToBcd2>
 800b30a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b30c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	78db      	ldrb	r3, [r3, #3]
 800b314:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b316:	4313      	orrs	r3, r2
 800b318:	617b      	str	r3, [r7, #20]
 800b31a:	e018      	b.n	800b34e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b326:	2b00      	cmp	r3, #0
 800b328:	d102      	bne.n	800b330 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	2200      	movs	r2, #0
 800b32e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	785b      	ldrb	r3, [r3, #1]
 800b33a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b33c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b342:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	78db      	ldrb	r3, [r3, #3]
 800b348:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b34a:	4313      	orrs	r3, r2
 800b34c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	22ca      	movs	r2, #202	@ 0xca
 800b354:	625a      	str	r2, [r3, #36]	@ 0x24
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2253      	movs	r2, #83	@ 0x53
 800b35c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f000 faba 	bl	800b8d8 <RTC_EnterInitMode>
 800b364:	4603      	mov	r3, r0
 800b366:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b368:	7cfb      	ldrb	r3, [r7, #19]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d11e      	bne.n	800b3ac <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	6979      	ldr	r1, [r7, #20]
 800b374:	4b16      	ldr	r3, [pc, #88]	@ (800b3d0 <HAL_RTC_SetTime+0x130>)
 800b376:	400b      	ands	r3, r1
 800b378:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b388:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	6899      	ldr	r1, [r3, #8]
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	68da      	ldr	r2, [r3, #12]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	431a      	orrs	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	430a      	orrs	r2, r1
 800b3a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f000 facf 	bl	800b946 <RTC_ExitInitMode>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b3ac:	7cfb      	ldrb	r3, [r7, #19]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	22ff      	movs	r2, #255	@ 0xff
 800b3be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	771a      	strb	r2, [r3, #28]

  return status;
 800b3c6:	7cfb      	ldrb	r3, [r7, #19]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	371c      	adds	r7, #28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd90      	pop	{r4, r7, pc}
 800b3d0:	007f7f7f 	.word	0x007f7f7f

0800b3d4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b086      	sub	sp, #24
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	60b9      	str	r1, [r7, #8]
 800b3de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	4b22      	ldr	r3, [pc, #136]	@ (800b48c <HAL_RTC_GetTime+0xb8>)
 800b404:	4013      	ands	r3, r2
 800b406:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	0c1b      	lsrs	r3, r3, #16
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b412:	b2da      	uxtb	r2, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	0a1b      	lsrs	r3, r3, #8
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b422:	b2da      	uxtb	r2, r3
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b430:	b2da      	uxtb	r2, r3
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	0d9b      	lsrs	r3, r3, #22
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	f003 0301 	and.w	r3, r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d11a      	bne.n	800b482 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	4618      	mov	r0, r3
 800b452:	f000 fabb 	bl	800b9cc <RTC_Bcd2ToByte>
 800b456:	4603      	mov	r3, r0
 800b458:	461a      	mov	r2, r3
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	785b      	ldrb	r3, [r3, #1]
 800b462:	4618      	mov	r0, r3
 800b464:	f000 fab2 	bl	800b9cc <RTC_Bcd2ToByte>
 800b468:	4603      	mov	r3, r0
 800b46a:	461a      	mov	r2, r3
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	789b      	ldrb	r3, [r3, #2]
 800b474:	4618      	mov	r0, r3
 800b476:	f000 faa9 	bl	800b9cc <RTC_Bcd2ToByte>
 800b47a:	4603      	mov	r3, r0
 800b47c:	461a      	mov	r2, r3
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3718      	adds	r7, #24
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	007f7f7f 	.word	0x007f7f7f

0800b490 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b490:	b590      	push	{r4, r7, lr}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	7f1b      	ldrb	r3, [r3, #28]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d101      	bne.n	800b4ac <HAL_RTC_SetDate+0x1c>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	e06f      	b.n	800b58c <HAL_RTC_SetDate+0xfc>
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2202      	movs	r2, #2
 800b4b6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10e      	bne.n	800b4dc <HAL_RTC_SetDate+0x4c>
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	785b      	ldrb	r3, [r3, #1]
 800b4c2:	f003 0310 	and.w	r3, r3, #16
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d008      	beq.n	800b4dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	785b      	ldrb	r3, [r3, #1]
 800b4ce:	f023 0310 	bic.w	r3, r3, #16
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	330a      	adds	r3, #10
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d11c      	bne.n	800b51c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	78db      	ldrb	r3, [r3, #3]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f000 fa52 	bl	800b990 <RTC_ByteToBcd2>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	785b      	ldrb	r3, [r3, #1]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f000 fa4b 	bl	800b990 <RTC_ByteToBcd2>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b4fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	789b      	ldrb	r3, [r3, #2]
 800b504:	4618      	mov	r0, r3
 800b506:	f000 fa43 	bl	800b990 <RTC_ByteToBcd2>
 800b50a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b50c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b516:	4313      	orrs	r3, r2
 800b518:	617b      	str	r3, [r7, #20]
 800b51a:	e00e      	b.n	800b53a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	78db      	ldrb	r3, [r3, #3]
 800b520:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	785b      	ldrb	r3, [r3, #1]
 800b526:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b528:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b52e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b536:	4313      	orrs	r3, r2
 800b538:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	22ca      	movs	r2, #202	@ 0xca
 800b540:	625a      	str	r2, [r3, #36]	@ 0x24
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2253      	movs	r2, #83	@ 0x53
 800b548:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f000 f9c4 	bl	800b8d8 <RTC_EnterInitMode>
 800b550:	4603      	mov	r3, r0
 800b552:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b554:	7cfb      	ldrb	r3, [r7, #19]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	6979      	ldr	r1, [r7, #20]
 800b560:	4b0c      	ldr	r3, [pc, #48]	@ (800b594 <HAL_RTC_SetDate+0x104>)
 800b562:	400b      	ands	r3, r1
 800b564:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b566:	68f8      	ldr	r0, [r7, #12]
 800b568:	f000 f9ed 	bl	800b946 <RTC_ExitInitMode>
 800b56c:	4603      	mov	r3, r0
 800b56e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b570:	7cfb      	ldrb	r3, [r7, #19]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d102      	bne.n	800b57c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2201      	movs	r2, #1
 800b57a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	22ff      	movs	r2, #255	@ 0xff
 800b582:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2200      	movs	r2, #0
 800b588:	771a      	strb	r2, [r3, #28]

  return status;
 800b58a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	371c      	adds	r7, #28
 800b590:	46bd      	mov	sp, r7
 800b592:	bd90      	pop	{r4, r7, pc}
 800b594:	00ffff3f 	.word	0x00ffff3f

0800b598 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	4b21      	ldr	r3, [pc, #132]	@ (800b634 <HAL_RTC_GetDate+0x9c>)
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	0c1b      	lsrs	r3, r3, #16
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	0a1b      	lsrs	r3, r3, #8
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	f003 031f 	and.w	r3, r3, #31
 800b5c8:	b2da      	uxtb	r2, r3
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b5d6:	b2da      	uxtb	r2, r3
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	0b5b      	lsrs	r3, r3, #13
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	b2da      	uxtb	r2, r3
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d11a      	bne.n	800b628 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b5f2:	68bb      	ldr	r3, [r7, #8]
 800b5f4:	78db      	ldrb	r3, [r3, #3]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 f9e8 	bl	800b9cc <RTC_Bcd2ToByte>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	461a      	mov	r2, r3
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 f9df 	bl	800b9cc <RTC_Bcd2ToByte>
 800b60e:	4603      	mov	r3, r0
 800b610:	461a      	mov	r2, r3
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	789b      	ldrb	r3, [r3, #2]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f9d6 	bl	800b9cc <RTC_Bcd2ToByte>
 800b620:	4603      	mov	r3, r0
 800b622:	461a      	mov	r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop
 800b634:	00ffff3f 	.word	0x00ffff3f

0800b638 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b638:	b590      	push	{r4, r7, lr}
 800b63a:	b089      	sub	sp, #36	@ 0x24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800b648:	2300      	movs	r3, #0
 800b64a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800b64c:	2300      	movs	r3, #0
 800b64e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	7f1b      	ldrb	r3, [r3, #28]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d101      	bne.n	800b65c <HAL_RTC_SetAlarm+0x24>
 800b658:	2302      	movs	r3, #2
 800b65a:	e113      	b.n	800b884 <HAL_RTC_SetAlarm+0x24c>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2201      	movs	r2, #1
 800b660:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2202      	movs	r2, #2
 800b666:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d137      	bne.n	800b6de <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d102      	bne.n	800b682 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	2200      	movs	r2, #0
 800b680:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	4618      	mov	r0, r3
 800b688:	f000 f982 	bl	800b990 <RTC_ByteToBcd2>
 800b68c:	4603      	mov	r3, r0
 800b68e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	785b      	ldrb	r3, [r3, #1]
 800b694:	4618      	mov	r0, r3
 800b696:	f000 f97b 	bl	800b990 <RTC_ByteToBcd2>
 800b69a:	4603      	mov	r3, r0
 800b69c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b69e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	789b      	ldrb	r3, [r3, #2]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 f973 	bl	800b990 <RTC_ByteToBcd2>
 800b6aa:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b6ac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	78db      	ldrb	r3, [r3, #3]
 800b6b4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b6b6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f000 f965 	bl	800b990 <RTC_ByteToBcd2>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800b6ca:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b6d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	61fb      	str	r3, [r7, #28]
 800b6dc:	e023      	b.n	800b726 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d102      	bne.n	800b6f2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	785b      	ldrb	r3, [r3, #1]
 800b6fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b6fe:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b704:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	78db      	ldrb	r3, [r3, #3]
 800b70a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b70c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b714:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800b716:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b71c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b722:	4313      	orrs	r3, r2
 800b724:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b72e:	4313      	orrs	r3, r2
 800b730:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	22ca      	movs	r2, #202	@ 0xca
 800b738:	625a      	str	r2, [r3, #36]	@ 0x24
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	2253      	movs	r2, #83	@ 0x53
 800b740:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b74a:	d148      	bne.n	800b7de <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	689a      	ldr	r2, [r3, #8]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b75a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689a      	ldr	r2, [r3, #8]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b76a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	b2da      	uxtb	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800b77c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b77e:	f7f9 fbe3 	bl	8004f48 <HAL_GetTick>
 800b782:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b784:	e013      	b.n	800b7ae <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b786:	f7f9 fbdf 	bl	8004f48 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b794:	d90b      	bls.n	800b7ae <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	22ff      	movs	r2, #255	@ 0xff
 800b79c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2203      	movs	r2, #3
 800b7a2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e06a      	b.n	800b884 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	f003 0301 	and.w	r3, r3, #1
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d0e4      	beq.n	800b786 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	69fa      	ldr	r2, [r7, #28]
 800b7c2:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	697a      	ldr	r2, [r7, #20]
 800b7ca:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	689a      	ldr	r2, [r3, #8]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7da:	609a      	str	r2, [r3, #8]
 800b7dc:	e047      	b.n	800b86e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	689a      	ldr	r2, [r3, #8]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800b7ec:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	689a      	ldr	r2, [r3, #8]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b7fc:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	b2da      	uxtb	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800b80e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b810:	f7f9 fb9a 	bl	8004f48 <HAL_GetTick>
 800b814:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b816:	e013      	b.n	800b840 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b818:	f7f9 fb96 	bl	8004f48 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b826:	d90b      	bls.n	800b840 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	22ff      	movs	r2, #255	@ 0xff
 800b82e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2203      	movs	r2, #3
 800b834:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800b83c:	2303      	movs	r3, #3
 800b83e:	e021      	b.n	800b884 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d0e4      	beq.n	800b818 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	69fa      	ldr	r2, [r7, #28]
 800b854:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689a      	ldr	r2, [r3, #8]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b86c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	22ff      	movs	r2, #255	@ 0xff
 800b874:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2201      	movs	r2, #1
 800b87a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3724      	adds	r7, #36	@ 0x24
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd90      	pop	{r4, r7, pc}

0800b88c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b894:	2300      	movs	r3, #0
 800b896:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a0d      	ldr	r2, [pc, #52]	@ (800b8d4 <HAL_RTC_WaitForSynchro+0x48>)
 800b89e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b8a0:	f7f9 fb52 	bl	8004f48 <HAL_GetTick>
 800b8a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8a6:	e009      	b.n	800b8bc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b8a8:	f7f9 fb4e 	bl	8004f48 <HAL_GetTick>
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b8b6:	d901      	bls.n	800b8bc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800b8b8:	2303      	movs	r3, #3
 800b8ba:	e007      	b.n	800b8cc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f003 0320 	and.w	r3, r3, #32
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d0ee      	beq.n	800b8a8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	0001ff5f 	.word	0x0001ff5f

0800b8d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b084      	sub	sp, #16
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d122      	bne.n	800b93c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68da      	ldr	r2, [r3, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800b904:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b906:	f7f9 fb1f 	bl	8004f48 <HAL_GetTick>
 800b90a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b90c:	e00c      	b.n	800b928 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b90e:	f7f9 fb1b 	bl	8004f48 <HAL_GetTick>
 800b912:	4602      	mov	r2, r0
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b91c:	d904      	bls.n	800b928 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2204      	movs	r2, #4
 800b922:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
 800b92e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b932:	2b00      	cmp	r3, #0
 800b934:	d102      	bne.n	800b93c <RTC_EnterInitMode+0x64>
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d1e8      	bne.n	800b90e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	68da      	ldr	r2, [r3, #12]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b960:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	f003 0320 	and.w	r3, r3, #32
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d10a      	bne.n	800b986 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff ff8b 	bl	800b88c <HAL_RTC_WaitForSynchro>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d004      	beq.n	800b986 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2204      	movs	r2, #4
 800b980:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b986:	7bfb      	ldrb	r3, [r7, #15]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b990:	b480      	push	{r7}
 800b992:	b085      	sub	sp, #20
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800b99e:	e005      	b.n	800b9ac <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800b9a6:	79fb      	ldrb	r3, [r7, #7]
 800b9a8:	3b0a      	subs	r3, #10
 800b9aa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b9ac:	79fb      	ldrb	r3, [r7, #7]
 800b9ae:	2b09      	cmp	r3, #9
 800b9b0:	d8f6      	bhi.n	800b9a0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	011b      	lsls	r3, r3, #4
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	79fb      	ldrb	r3, [r7, #7]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	b2db      	uxtb	r3, r3
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800b9da:	79fb      	ldrb	r3, [r7, #7]
 800b9dc:	091b      	lsrs	r3, r3, #4
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	4613      	mov	r3, r2
 800b9e4:	009b      	lsls	r3, r3, #2
 800b9e6:	4413      	add	r3, r2
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	79fb      	ldrb	r3, [r7, #7]
 800b9f2:	f003 030f 	and.w	r3, r3, #15
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	4413      	add	r3, r2
 800b9fa:	b2db      	uxtb	r3, r3
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ba14:	2300      	movs	r3, #0
 800ba16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	7f1b      	ldrb	r3, [r3, #28]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d101      	bne.n	800ba24 <HAL_RTCEx_SetTimeStamp+0x1c>
 800ba20:	2302      	movs	r3, #2
 800ba22:	e050      	b.n	800bac6 <HAL_RTCEx_SetTimeStamp+0xbe>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2201      	movs	r2, #1
 800ba28:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 0206 	bic.w	r2, r2, #6
 800ba3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	430a      	orrs	r2, r1
 800ba4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689a      	ldr	r2, [r3, #8]
 800ba56:	4b1f      	ldr	r3, [pc, #124]	@ (800bad4 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	4313      	orrs	r3, r2
 800ba62:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	22ca      	movs	r2, #202	@ 0xca
 800ba6a:	625a      	str	r2, [r3, #36]	@ 0x24
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2253      	movs	r2, #83	@ 0x53
 800ba72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	697a      	ldr	r2, [r7, #20]
 800ba7a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800ba8c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800ba9e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	689a      	ldr	r2, [r3, #8]
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800baae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	22ff      	movs	r2, #255	@ 0xff
 800bab6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2201      	movs	r2, #1
 800babc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	371c      	adds	r7, #28
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	fffff7f7 	.word	0xfffff7f7

0800bad8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800bae4:	2300      	movs	r3, #0
 800bae6:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800bae8:	2300      	movs	r3, #0
 800baea:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e156      	b.n	800bda4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d106      	bne.n	800bb10 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7f8 fbf2 	bl	80042f4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2202      	movs	r2, #2
 800bb14:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f95b 	bl	800bdd4 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	68db      	ldr	r3, [r3, #12]
 800bb22:	2b02      	cmp	r3, #2
 800bb24:	d00c      	beq.n	800bb40 <HAL_SAI_Init+0x68>
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d80d      	bhi.n	800bb46 <HAL_SAI_Init+0x6e>
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d002      	beq.n	800bb34 <HAL_SAI_Init+0x5c>
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d003      	beq.n	800bb3a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800bb32:	e008      	b.n	800bb46 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	61fb      	str	r3, [r7, #28]
      break;
 800bb38:	e006      	b.n	800bb48 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800bb3a:	2310      	movs	r3, #16
 800bb3c:	61fb      	str	r3, [r7, #28]
      break;
 800bb3e:	e003      	b.n	800bb48 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800bb40:	2320      	movs	r3, #32
 800bb42:	61fb      	str	r3, [r7, #28]
      break;
 800bb44:	e000      	b.n	800bb48 <HAL_SAI_Init+0x70>
      break;
 800bb46:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d81e      	bhi.n	800bb8e <HAL_SAI_Init+0xb6>
 800bb50:	a201      	add	r2, pc, #4	@ (adr r2, 800bb58 <HAL_SAI_Init+0x80>)
 800bb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb56:	bf00      	nop
 800bb58:	0800bb69 	.word	0x0800bb69
 800bb5c:	0800bb6f 	.word	0x0800bb6f
 800bb60:	0800bb77 	.word	0x0800bb77
 800bb64:	0800bb7f 	.word	0x0800bb7f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	617b      	str	r3, [r7, #20]
    }
    break;
 800bb6c:	e010      	b.n	800bb90 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800bb6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bb72:	617b      	str	r3, [r7, #20]
    }
    break;
 800bb74:	e00c      	b.n	800bb90 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bb76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb7a:	617b      	str	r3, [r7, #20]
    }
    break;
 800bb7c:	e008      	b.n	800bb90 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800bb7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb82:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	f043 0301 	orr.w	r3, r3, #1
 800bb8a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800bb8c:	e000      	b.n	800bb90 <HAL_SAI_Init+0xb8>
    default:
      break;
 800bb8e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a85      	ldr	r2, [pc, #532]	@ (800bdac <HAL_SAI_Init+0x2d4>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d004      	beq.n	800bba4 <HAL_SAI_Init+0xcc>
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a84      	ldr	r2, [pc, #528]	@ (800bdb0 <HAL_SAI_Init+0x2d8>)
 800bba0:	4293      	cmp	r3, r2
 800bba2:	d103      	bne.n	800bbac <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800bba4:	4a83      	ldr	r2, [pc, #524]	@ (800bdb4 <HAL_SAI_Init+0x2dc>)
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	e002      	b.n	800bbb2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800bbac:	4a82      	ldr	r2, [pc, #520]	@ (800bdb8 <HAL_SAI_Init+0x2e0>)
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	69db      	ldr	r3, [r3, #28]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d04c      	beq.n	800bc54 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a7a      	ldr	r2, [pc, #488]	@ (800bdac <HAL_SAI_Init+0x2d4>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d004      	beq.n	800bbd2 <HAL_SAI_Init+0xfa>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a78      	ldr	r2, [pc, #480]	@ (800bdb0 <HAL_SAI_Init+0x2d8>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d104      	bne.n	800bbdc <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800bbd2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800bbd6:	f7ff f9a1 	bl	800af1c <HAL_RCCEx_GetPeriphCLKFreq>
 800bbda:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a76      	ldr	r2, [pc, #472]	@ (800bdbc <HAL_SAI_Init+0x2e4>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d004      	beq.n	800bbf0 <HAL_SAI_Init+0x118>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a75      	ldr	r2, [pc, #468]	@ (800bdc0 <HAL_SAI_Init+0x2e8>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d104      	bne.n	800bbfa <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800bbf0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800bbf4:	f7ff f992 	bl	800af1c <HAL_RCCEx_GetPeriphCLKFreq>
 800bbf8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800bbfa:	693a      	ldr	r2, [r7, #16]
 800bbfc:	4613      	mov	r3, r2
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	005b      	lsls	r3, r3, #1
 800bc04:	461a      	mov	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	025b      	lsls	r3, r3, #9
 800bc0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc10:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	4a6b      	ldr	r2, [pc, #428]	@ (800bdc4 <HAL_SAI_Init+0x2ec>)
 800bc16:	fba2 2303 	umull	r2, r3, r2, r3
 800bc1a:	08da      	lsrs	r2, r3, #3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800bc20:	68f9      	ldr	r1, [r7, #12]
 800bc22:	4b68      	ldr	r3, [pc, #416]	@ (800bdc4 <HAL_SAI_Init+0x2ec>)
 800bc24:	fba3 2301 	umull	r2, r3, r3, r1
 800bc28:	08da      	lsrs	r2, r3, #3
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	009b      	lsls	r3, r3, #2
 800bc2e:	4413      	add	r3, r2
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	1aca      	subs	r2, r1, r3
 800bc34:	2a08      	cmp	r2, #8
 800bc36:	d904      	bls.n	800bc42 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a1b      	ldr	r3, [r3, #32]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc46:	2b04      	cmp	r3, #4
 800bc48:	d104      	bne.n	800bc54 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6a1b      	ldr	r3, [r3, #32]
 800bc4e:	085a      	lsrs	r2, r3, #1
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d003      	beq.n	800bc64 <HAL_SAI_Init+0x18c>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d109      	bne.n	800bc78 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d101      	bne.n	800bc70 <HAL_SAI_Init+0x198>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	e001      	b.n	800bc74 <HAL_SAI_Init+0x19c>
 800bc70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc74:	61bb      	str	r3, [r7, #24]
 800bc76:	e008      	b.n	800bc8a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d102      	bne.n	800bc86 <HAL_SAI_Init+0x1ae>
 800bc80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc84:	e000      	b.n	800bc88 <HAL_SAI_Init+0x1b0>
 800bc86:	2300      	movs	r3, #0
 800bc88:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	6819      	ldr	r1, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	4b4c      	ldr	r3, [pc, #304]	@ (800bdc8 <HAL_SAI_Init+0x2f0>)
 800bc96:	400b      	ands	r3, r1
 800bc98:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	6819      	ldr	r1, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bca8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bcae:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcb4:	431a      	orrs	r2, r3
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800bcc2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	691b      	ldr	r3, [r3, #16]
 800bcc8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800bcce:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	051b      	lsls	r3, r3, #20
 800bcd6:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	430a      	orrs	r2, r1
 800bcde:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6859      	ldr	r1, [r3, #4]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	4b38      	ldr	r3, [pc, #224]	@ (800bdcc <HAL_SAI_Init+0x2f4>)
 800bcec:	400b      	ands	r3, r1
 800bcee:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6859      	ldr	r1, [r3, #4]
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	699a      	ldr	r2, [r3, #24]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd04:	431a      	orrs	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	6899      	ldr	r1, [r3, #8]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	4b2d      	ldr	r3, [pc, #180]	@ (800bdd0 <HAL_SAI_Init+0x2f8>)
 800bd1a:	400b      	ands	r3, r1
 800bd1c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	6899      	ldr	r1, [r3, #8]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd28:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800bd2e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800bd34:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800bd3a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd40:	3b01      	subs	r3, #1
 800bd42:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800bd44:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	430a      	orrs	r2, r1
 800bd4c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68d9      	ldr	r1, [r3, #12]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800bd5c:	400b      	ands	r3, r1
 800bd5e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	68d9      	ldr	r1, [r3, #12]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd6e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bd74:	041b      	lsls	r3, r3, #16
 800bd76:	431a      	orrs	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	021b      	lsls	r3, r3, #8
 800bd80:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	430a      	orrs	r2, r1
 800bd88:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	40015804 	.word	0x40015804
 800bdb0:	40015824 	.word	0x40015824
 800bdb4:	40015800 	.word	0x40015800
 800bdb8:	40015c00 	.word	0x40015c00
 800bdbc:	40015c04 	.word	0x40015c04
 800bdc0:	40015c24 	.word	0x40015c24
 800bdc4:	cccccccd 	.word	0xcccccccd
 800bdc8:	ff05c010 	.word	0xff05c010
 800bdcc:	ffff1ff0 	.word	0xffff1ff0
 800bdd0:	fff88000 	.word	0xfff88000

0800bdd4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800bddc:	4b17      	ldr	r3, [pc, #92]	@ (800be3c <SAI_Disable+0x68>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4a17      	ldr	r2, [pc, #92]	@ (800be40 <SAI_Disable+0x6c>)
 800bde2:	fba2 2303 	umull	r2, r3, r2, r3
 800bde6:	0b1b      	lsrs	r3, r3, #12
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bdfe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	1e5a      	subs	r2, r3, #1
 800be04:	60fa      	str	r2, [r7, #12]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10a      	bne.n	800be20 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800be10:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	72fb      	strb	r3, [r7, #11]
      break;
 800be1e:	e006      	b.n	800be2e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1e8      	bne.n	800be00 <SAI_Disable+0x2c>

  return status;
 800be2e:	7afb      	ldrb	r3, [r7, #11]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3714      	adds	r7, #20
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr
 800be3c:	20000000 	.word	0x20000000
 800be40:	95cbec1b 	.word	0x95cbec1b

0800be44 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d101      	bne.n	800be56 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e022      	b.n	800be9c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d105      	bne.n	800be6e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7f7 fe5d 	bl	8003b28 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2203      	movs	r2, #3
 800be72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800be76:	6878      	ldr	r0, [r7, #4]
 800be78:	f000 f814 	bl	800bea4 <HAL_SD_InitCard>
 800be7c:	4603      	mov	r3, r0
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e00a      	b.n	800be9c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2200      	movs	r2, #0
 800be90:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2201      	movs	r2, #1
 800be96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bea4:	b5b0      	push	{r4, r5, r7, lr}
 800bea6:	b08e      	sub	sp, #56	@ 0x38
 800bea8:	af04      	add	r7, sp, #16
 800beaa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800beac:	2300      	movs	r3, #0
 800beae:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800beb0:	2300      	movs	r3, #0
 800beb2:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800beb4:	2300      	movs	r3, #0
 800beb6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800beb8:	2300      	movs	r3, #0
 800beba:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bebc:	2300      	movs	r3, #0
 800bebe:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800bec0:	2376      	movs	r3, #118	@ 0x76
 800bec2:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681d      	ldr	r5, [r3, #0]
 800bec8:	466c      	mov	r4, sp
 800beca:	f107 0318 	add.w	r3, r7, #24
 800bece:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bed2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bed6:	f107 030c 	add.w	r3, r7, #12
 800beda:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bedc:	4628      	mov	r0, r5
 800bede:	f003 ff17 	bl	800fd10 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bef0:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f003 ff43 	bl	800fd82 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	685a      	ldr	r2, [r3, #4]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf0a:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800bf0c:	2002      	movs	r0, #2
 800bf0e:	f7f9 f827 	bl	8004f60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fe10 	bl	800cb38 <SD_PowerON>
 800bf18:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00b      	beq.n	800bf38 <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2e:	431a      	orrs	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bf34:	2301      	movs	r3, #1
 800bf36:	e02e      	b.n	800bf96 <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fd2f 	bl	800c99c <SD_InitCard>
 800bf3e:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00b      	beq.n	800bf5e <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf54:	431a      	orrs	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e01b      	b.n	800bf96 <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bf66:	4618      	mov	r0, r3
 800bf68:	f003 ff9e 	bl	800fea8 <SDMMC_CmdBlockLength>
 800bf6c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00f      	beq.n	800bf94 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a09      	ldr	r2, [pc, #36]	@ (800bfa0 <HAL_SD_InitCard+0xfc>)
 800bf7a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bf80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf82:	431a      	orrs	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	e000      	b.n	800bf96 <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3728      	adds	r7, #40	@ 0x28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bdb0      	pop	{r4, r5, r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	004005ff 	.word	0x004005ff

0800bfa4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08c      	sub	sp, #48	@ 0x30
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
 800bfb0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d107      	bne.n	800bfcc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfc0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e0c3      	b.n	800c154 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	f040 80bc 	bne.w	800c152 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800bfe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	441a      	add	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d907      	bls.n	800bffe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bff2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e0aa      	b.n	800c154 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2203      	movs	r2, #3
 800c002:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2200      	movs	r2, #0
 800c00c:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800c01c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c022:	4a4e      	ldr	r2, [pc, #312]	@ (800c15c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c02a:	4a4d      	ldr	r2, [pc, #308]	@ (800c160 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c02c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c032:	2200      	movs	r2, #0
 800c034:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c03a:	2200      	movs	r2, #0
 800c03c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04e:	689a      	ldr	r2, [r3, #8]
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	430a      	orrs	r2, r1
 800c058:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3380      	adds	r3, #128	@ 0x80
 800c064:	4619      	mov	r1, r3
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	025b      	lsls	r3, r3, #9
 800c06c:	089b      	lsrs	r3, r3, #2
 800c06e:	f7f9 fd8d 	bl	8005b8c <HAL_DMA_Start_IT>
 800c072:	4603      	mov	r3, r0
 800c074:	2b00      	cmp	r3, #0
 800c076:	d017      	beq.n	800c0a8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800c086:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a35      	ldr	r2, [pc, #212]	@ (800c164 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c08e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c094:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e055      	b.n	800c154 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f042 0208 	orr.w	r2, r2, #8
 800c0b6:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d002      	beq.n	800c0c6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800c0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0c2:	025b      	lsls	r3, r3, #9
 800c0c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	025b      	lsls	r3, r3, #9
 800c0d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c0d2:	2390      	movs	r3, #144	@ 0x90
 800c0d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c0d6:	2302      	movs	r3, #2
 800c0d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c0de:	2301      	movs	r3, #1
 800c0e0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f107 0210 	add.w	r2, r7, #16
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f003 feaf 	bl	800fe50 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d90a      	bls.n	800c10e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2282      	movs	r2, #130	@ 0x82
 800c0fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c104:	4618      	mov	r0, r3
 800c106:	f003 ff13 	bl	800ff30 <SDMMC_CmdReadMultiBlock>
 800c10a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c10c:	e009      	b.n	800c122 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2281      	movs	r2, #129	@ 0x81
 800c112:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c11a:	4618      	mov	r0, r3
 800c11c:	f003 fee6 	bl	800feec <SDMMC_CmdReadSingleBlock>
 800c120:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c124:	2b00      	cmp	r3, #0
 800c126:	d012      	beq.n	800c14e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a0d      	ldr	r2, [pc, #52]	@ (800c164 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c12e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c136:	431a      	orrs	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e002      	b.n	800c154 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	e000      	b.n	800c154 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800c152:	2302      	movs	r3, #2
  }
}
 800c154:	4618      	mov	r0, r3
 800c156:	3730      	adds	r7, #48	@ 0x30
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	0800c887 	.word	0x0800c887
 800c160:	0800c8f9 	.word	0x0800c8f9
 800c164:	004005ff 	.word	0x004005ff

0800c168 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08c      	sub	sp, #48	@ 0x30
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d107      	bne.n	800c190 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c184:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	e0c6      	b.n	800c31e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b01      	cmp	r3, #1
 800c19a:	f040 80bf 	bne.w	800c31c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c1a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	441a      	add	r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d907      	bls.n	800c1c2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1b6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e0ad      	b.n	800c31e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2203      	movs	r2, #3
 800c1c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f042 021a 	orr.w	r2, r2, #26
 800c1e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1e6:	4a50      	ldr	r2, [pc, #320]	@ (800c328 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c1e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ee:	4a4f      	ldr	r2, [pc, #316]	@ (800c32c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800c1f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d002      	beq.n	800c208 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c204:	025b      	lsls	r3, r3, #9
 800c206:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d90a      	bls.n	800c224 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	22a0      	movs	r2, #160	@ 0xa0
 800c212:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c21a:	4618      	mov	r0, r3
 800c21c:	f003 fecc 	bl	800ffb8 <SDMMC_CmdWriteMultiBlock>
 800c220:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800c222:	e009      	b.n	800c238 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2290      	movs	r2, #144	@ 0x90
 800c228:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c230:	4618      	mov	r0, r3
 800c232:	f003 fe9f 	bl	800ff74 <SDMMC_CmdWriteSingleBlock>
 800c236:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d012      	beq.n	800c264 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4a3b      	ldr	r2, [pc, #236]	@ (800c330 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c244:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24c:	431a      	orrs	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2201      	movs	r2, #1
 800c256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2200      	movs	r2, #0
 800c25e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	e05c      	b.n	800c31e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f042 0208 	orr.w	r2, r2, #8
 800c272:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c278:	2240      	movs	r2, #64	@ 0x40
 800c27a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c28c:	689a      	ldr	r2, [r3, #8]
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	430a      	orrs	r2, r1
 800c296:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	3380      	adds	r3, #128	@ 0x80
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	025b      	lsls	r3, r3, #9
 800c2aa:	089b      	lsrs	r3, r3, #2
 800c2ac:	f7f9 fc6e 	bl	8005b8c <HAL_DMA_Start_IT>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d01a      	beq.n	800c2ec <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f022 021a 	bic.w	r2, r2, #26
 800c2c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a19      	ldr	r2, [pc, #100]	@ (800c330 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800c2cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2d2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	e018      	b.n	800c31e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c2f0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	025b      	lsls	r3, r3, #9
 800c2f6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c2f8:	2390      	movs	r3, #144	@ 0x90
 800c2fa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c300:	2300      	movs	r3, #0
 800c302:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800c304:	2301      	movs	r3, #1
 800c306:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f107 0210 	add.w	r2, r7, #16
 800c310:	4611      	mov	r1, r2
 800c312:	4618      	mov	r0, r3
 800c314:	f003 fd9c 	bl	800fe50 <SDMMC_ConfigData>

      return HAL_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	e000      	b.n	800c31e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c31c:	2302      	movs	r3, #2
  }
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3730      	adds	r7, #48	@ 0x30
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	0800c85d 	.word	0x0800c85d
 800c32c:	0800c8f9 	.word	0x0800c8f9
 800c330:	004005ff 	.word	0x004005ff

0800c334 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c356:	0f9b      	lsrs	r3, r3, #30
 800c358:	b2da      	uxtb	r2, r3
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c362:	0e9b      	lsrs	r3, r3, #26
 800c364:	b2db      	uxtb	r3, r3
 800c366:	f003 030f 	and.w	r3, r3, #15
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c374:	0e1b      	lsrs	r3, r3, #24
 800c376:	b2db      	uxtb	r3, r3
 800c378:	f003 0303 	and.w	r3, r3, #3
 800c37c:	b2da      	uxtb	r2, r3
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c386:	0c1b      	lsrs	r3, r3, #16
 800c388:	b2da      	uxtb	r2, r3
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c392:	0a1b      	lsrs	r3, r3, #8
 800c394:	b2da      	uxtb	r2, r3
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c39e:	b2da      	uxtb	r2, r3
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3a8:	0d1b      	lsrs	r3, r3, #20
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3b4:	0c1b      	lsrs	r3, r3, #16
 800c3b6:	b2db      	uxtb	r3, r3
 800c3b8:	f003 030f 	and.w	r3, r3, #15
 800c3bc:	b2da      	uxtb	r2, r3
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3c6:	0bdb      	lsrs	r3, r3, #15
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	f003 0301 	and.w	r3, r3, #1
 800c3ce:	b2da      	uxtb	r2, r3
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3d8:	0b9b      	lsrs	r3, r3, #14
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	f003 0301 	and.w	r3, r3, #1
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3ea:	0b5b      	lsrs	r3, r3, #13
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	b2da      	uxtb	r2, r3
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c3fc:	0b1b      	lsrs	r3, r3, #12
 800c3fe:	b2db      	uxtb	r3, r3
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	b2da      	uxtb	r2, r3
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2200      	movs	r2, #0
 800c40e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c414:	2b00      	cmp	r3, #0
 800c416:	d163      	bne.n	800c4e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c41c:	009a      	lsls	r2, r3, #2
 800c41e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c422:	4013      	ands	r3, r2
 800c424:	687a      	ldr	r2, [r7, #4]
 800c426:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c428:	0f92      	lsrs	r2, r2, #30
 800c42a:	431a      	orrs	r2, r3
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c434:	0edb      	lsrs	r3, r3, #27
 800c436:	b2db      	uxtb	r3, r3
 800c438:	f003 0307 	and.w	r3, r3, #7
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c446:	0e1b      	lsrs	r3, r3, #24
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	f003 0307 	and.w	r3, r3, #7
 800c44e:	b2da      	uxtb	r2, r3
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c458:	0d5b      	lsrs	r3, r3, #21
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	f003 0307 	and.w	r3, r3, #7
 800c460:	b2da      	uxtb	r2, r3
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c46a:	0c9b      	lsrs	r3, r3, #18
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	f003 0307 	and.w	r3, r3, #7
 800c472:	b2da      	uxtb	r2, r3
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c47c:	0bdb      	lsrs	r3, r3, #15
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	f003 0307 	and.w	r3, r3, #7
 800c484:	b2da      	uxtb	r2, r3
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	1c5a      	adds	r2, r3, #1
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	7e1b      	ldrb	r3, [r3, #24]
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	f003 0307 	and.w	r3, r3, #7
 800c49e:	3302      	adds	r3, #2
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c4aa:	fb03 f202 	mul.w	r2, r3, r2
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	7a1b      	ldrb	r3, [r3, #8]
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	f003 030f 	and.w	r3, r3, #15
 800c4bc:	2201      	movs	r2, #1
 800c4be:	409a      	lsls	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800c4cc:	0a52      	lsrs	r2, r2, #9
 800c4ce:	fb03 f202 	mul.w	r2, r3, r2
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4dc:	661a      	str	r2, [r3, #96]	@ 0x60
 800c4de:	e031      	b.n	800c544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d11d      	bne.n	800c524 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c4ec:	041b      	lsls	r3, r3, #16
 800c4ee:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4f6:	0c1b      	lsrs	r3, r3, #16
 800c4f8:	431a      	orrs	r2, r3
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	3301      	adds	r3, #1
 800c504:	029a      	lsls	r2, r3, #10
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c518:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	661a      	str	r2, [r3, #96]	@ 0x60
 800c522:	e00f      	b.n	800c544 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4a58      	ldr	r2, [pc, #352]	@ (800c68c <HAL_SD_GetCardCSD+0x344>)
 800c52a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c530:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2201      	movs	r2, #1
 800c53c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c540:	2301      	movs	r3, #1
 800c542:	e09d      	b.n	800c680 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c548:	0b9b      	lsrs	r3, r3, #14
 800c54a:	b2db      	uxtb	r3, r3
 800c54c:	f003 0301 	and.w	r3, r3, #1
 800c550:	b2da      	uxtb	r2, r3
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c55a:	09db      	lsrs	r3, r3, #7
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c562:	b2da      	uxtb	r2, r3
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c572:	b2da      	uxtb	r2, r3
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c57c:	0fdb      	lsrs	r3, r3, #31
 800c57e:	b2da      	uxtb	r2, r3
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c588:	0f5b      	lsrs	r3, r3, #29
 800c58a:	b2db      	uxtb	r3, r3
 800c58c:	f003 0303 	and.w	r3, r3, #3
 800c590:	b2da      	uxtb	r2, r3
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c59a:	0e9b      	lsrs	r3, r3, #26
 800c59c:	b2db      	uxtb	r3, r3
 800c59e:	f003 0307 	and.w	r3, r3, #7
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ac:	0d9b      	lsrs	r3, r3, #22
 800c5ae:	b2db      	uxtb	r3, r3
 800c5b0:	f003 030f 	and.w	r3, r3, #15
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5be:	0d5b      	lsrs	r3, r3, #21
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	f003 0301 	and.w	r3, r3, #1
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5da:	0c1b      	lsrs	r3, r3, #16
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ee:	0bdb      	lsrs	r3, r3, #15
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	f003 0301 	and.w	r3, r3, #1
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c602:	0b9b      	lsrs	r3, r3, #14
 800c604:	b2db      	uxtb	r3, r3
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c616:	0b5b      	lsrs	r3, r3, #13
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c62a:	0b1b      	lsrs	r3, r3, #12
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	f003 0301 	and.w	r3, r3, #1
 800c632:	b2da      	uxtb	r2, r3
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c63e:	0a9b      	lsrs	r3, r3, #10
 800c640:	b2db      	uxtb	r3, r3
 800c642:	f003 0303 	and.w	r3, r3, #3
 800c646:	b2da      	uxtb	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c652:	0a1b      	lsrs	r3, r3, #8
 800c654:	b2db      	uxtb	r3, r3
 800c656:	f003 0303 	and.w	r3, r3, #3
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c666:	085b      	lsrs	r3, r3, #1
 800c668:	b2db      	uxtb	r3, r3
 800c66a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2201      	movs	r2, #1
 800c67a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	004005ff 	.word	0x004005ff

0800c690 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c690:	b480      	push	{r7}
 800c692:	b083      	sub	sp, #12
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	370c      	adds	r7, #12
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e6:	4770      	bx	lr

0800c6e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c6e8:	b5b0      	push	{r4, r5, r7, lr}
 800c6ea:	b08e      	sub	sp, #56	@ 0x38
 800c6ec:	af04      	add	r7, sp, #16
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2203      	movs	r2, #3
 800c6fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c704:	2b03      	cmp	r3, #3
 800c706:	d02e      	beq.n	800c766 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c70e:	d106      	bne.n	800c71e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c714:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	639a      	str	r2, [r3, #56]	@ 0x38
 800c71c:	e029      	b.n	800c772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c724:	d10a      	bne.n	800c73c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fabc 	bl	800cca4 <SD_WideBus_Enable>
 800c72c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c732:	6a3b      	ldr	r3, [r7, #32]
 800c734:	431a      	orrs	r2, r3
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	639a      	str	r2, [r3, #56]	@ 0x38
 800c73a:	e01a      	b.n	800c772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10a      	bne.n	800c758 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 faf9 	bl	800cd3a <SD_WideBus_Disable>
 800c748:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c74e:	6a3b      	ldr	r3, [r7, #32]
 800c750:	431a      	orrs	r2, r3
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	639a      	str	r2, [r3, #56]	@ 0x38
 800c756:	e00c      	b.n	800c772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c75c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	639a      	str	r2, [r3, #56]	@ 0x38
 800c764:	e005      	b.n	800c772 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c76a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00b      	beq.n	800c792 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a26      	ldr	r2, [pc, #152]	@ (800c818 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c780:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800c78a:	2301      	movs	r3, #1
 800c78c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c790:	e01f      	b.n	800c7d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	695b      	ldr	r3, [r3, #20]
 800c7ac:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681d      	ldr	r5, [r3, #0]
 800c7b8:	466c      	mov	r4, sp
 800c7ba:	f107 0314 	add.w	r3, r7, #20
 800c7be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c7c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c7c6:	f107 0308 	add.w	r3, r7, #8
 800c7ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	f003 fa9f 	bl	800fd10 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f003 fb64 	bl	800fea8 <SDMMC_CmdBlockLength>
 800c7e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7e2:	6a3b      	ldr	r3, [r7, #32]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00c      	beq.n	800c802 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c818 <HAL_SD_ConfigWideBusOperation+0x130>)
 800c7ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	431a      	orrs	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2201      	movs	r2, #1
 800c806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800c80a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800c80e:	4618      	mov	r0, r3
 800c810:	3728      	adds	r7, #40	@ 0x28
 800c812:	46bd      	mov	sp, r7
 800c814:	bdb0      	pop	{r4, r5, r7, pc}
 800c816:	bf00      	nop
 800c818:	004005ff 	.word	0x004005ff

0800c81c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b086      	sub	sp, #24
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c824:	2300      	movs	r3, #0
 800c826:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c828:	f107 030c 	add.w	r3, r7, #12
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fa10 	bl	800cc54 <SD_SendStatus>
 800c834:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d005      	beq.n	800c848 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	431a      	orrs	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	0a5b      	lsrs	r3, r3, #9
 800c84c:	f003 030f 	and.w	r3, r3, #15
 800c850:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c852:	693b      	ldr	r3, [r7, #16]
}
 800c854:	4618      	mov	r0, r3
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c868:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c878:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800c87a:	bf00      	nop
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b084      	sub	sp, #16
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c892:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c898:	2b82      	cmp	r3, #130	@ 0x82
 800c89a:	d111      	bne.n	800c8c0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f003 fbab 	bl	800fffc <SDMMC_CmdStopTransfer>
 800c8a6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d008      	beq.n	800c8c0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	431a      	orrs	r2, r3
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c8ba:	68f8      	ldr	r0, [r7, #12]
 800c8bc:	f7ff fd3a 	bl	800c334 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f022 0208 	bic.w	r2, r2, #8
 800c8ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c8d8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c8e8:	68f8      	ldr	r0, [r7, #12]
 800c8ea:	f005 f967 	bl	8011bbc <HAL_SD_RxCpltCallback>
#endif
}
 800c8ee:	bf00      	nop
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
	...

0800c8f8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c904:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f7f9 fbbc 	bl	8006084 <HAL_DMA_GetError>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d03e      	beq.n	800c990 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c918:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c91e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c920:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2b01      	cmp	r3, #1
 800c926:	d002      	beq.n	800c92e <SD_DMAError+0x36>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d12d      	bne.n	800c98a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	4a19      	ldr	r2, [pc, #100]	@ (800c998 <SD_DMAError+0xa0>)
 800c934:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800c944:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c94a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c952:	6978      	ldr	r0, [r7, #20]
 800c954:	f7ff ff62 	bl	800c81c <HAL_SD_GetCardState>
 800c958:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2b06      	cmp	r3, #6
 800c95e:	d002      	beq.n	800c966 <SD_DMAError+0x6e>
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b05      	cmp	r3, #5
 800c964:	d10a      	bne.n	800c97c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4618      	mov	r0, r3
 800c96c:	f003 fb46 	bl	800fffc <SDMMC_CmdStopTransfer>
 800c970:	4602      	mov	r2, r0
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c976:	431a      	orrs	r2, r3
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c984:	697b      	ldr	r3, [r7, #20]
 800c986:	2200      	movs	r2, #0
 800c988:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c98a:	6978      	ldr	r0, [r7, #20]
 800c98c:	f7ff fcd2 	bl	800c334 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c990:	bf00      	nop
 800c992:	3718      	adds	r7, #24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	004005ff 	.word	0x004005ff

0800c99c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c99c:	b5b0      	push	{r4, r5, r7, lr}
 800c99e:	b094      	sub	sp, #80	@ 0x50
 800c9a0:	af04      	add	r7, sp, #16
 800c9a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f003 f9f6 	bl	800fd9e <SDMMC_GetPowerState>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d102      	bne.n	800c9be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c9b8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800c9bc:	e0b8      	b.n	800cb30 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d02f      	beq.n	800ca26 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f003 fc21 	bl	8010212 <SDMMC_CmdSendCID>
 800c9d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c9d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d001      	beq.n	800c9dc <SD_InitCard+0x40>
    {
      return errorstate;
 800c9d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9da:	e0a9      	b.n	800cb30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	f003 fa21 	bl	800fe2a <SDMMC_GetResponse>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2104      	movs	r1, #4
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f003 fa18 	bl	800fe2a <SDMMC_GetResponse>
 800c9fa:	4602      	mov	r2, r0
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2108      	movs	r1, #8
 800ca06:	4618      	mov	r0, r3
 800ca08:	f003 fa0f 	bl	800fe2a <SDMMC_GetResponse>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	210c      	movs	r1, #12
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f003 fa06 	bl	800fe2a <SDMMC_GetResponse>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d00d      	beq.n	800ca4a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f107 020e 	add.w	r2, r7, #14
 800ca36:	4611      	mov	r1, r2
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f003 fc27 	bl	801028c <SDMMC_CmdSetRelAdd>
 800ca3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d001      	beq.n	800ca4a <SD_InitCard+0xae>
    {
      return errorstate;
 800ca46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca48:	e072      	b.n	800cb30 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d036      	beq.n	800cac0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ca52:	89fb      	ldrh	r3, [r7, #14]
 800ca54:	461a      	mov	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca62:	041b      	lsls	r3, r3, #16
 800ca64:	4619      	mov	r1, r3
 800ca66:	4610      	mov	r0, r2
 800ca68:	f003 fbf1 	bl	801024e <SDMMC_CmdSendCSD>
 800ca6c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ca74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca76:	e05b      	b.n	800cb30 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f003 f9d3 	bl	800fe2a <SDMMC_GetResponse>
 800ca84:	4602      	mov	r2, r0
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2104      	movs	r1, #4
 800ca90:	4618      	mov	r0, r3
 800ca92:	f003 f9ca 	bl	800fe2a <SDMMC_GetResponse>
 800ca96:	4602      	mov	r2, r0
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	2108      	movs	r1, #8
 800caa2:	4618      	mov	r0, r3
 800caa4:	f003 f9c1 	bl	800fe2a <SDMMC_GetResponse>
 800caa8:	4602      	mov	r2, r0
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	210c      	movs	r1, #12
 800cab4:	4618      	mov	r0, r3
 800cab6:	f003 f9b8 	bl	800fe2a <SDMMC_GetResponse>
 800caba:	4602      	mov	r2, r0
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	2104      	movs	r1, #4
 800cac6:	4618      	mov	r0, r3
 800cac8:	f003 f9af 	bl	800fe2a <SDMMC_GetResponse>
 800cacc:	4603      	mov	r3, r0
 800cace:	0d1a      	lsrs	r2, r3, #20
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800cad4:	f107 0310 	add.w	r3, r7, #16
 800cad8:	4619      	mov	r1, r3
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f7ff fc34 	bl	800c348 <HAL_SD_GetCardCSD>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d002      	beq.n	800caec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cae6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800caea:	e021      	b.n	800cb30 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6819      	ldr	r1, [r3, #0]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800caf4:	041b      	lsls	r3, r3, #16
 800caf6:	2200      	movs	r2, #0
 800caf8:	461c      	mov	r4, r3
 800cafa:	4615      	mov	r5, r2
 800cafc:	4622      	mov	r2, r4
 800cafe:	462b      	mov	r3, r5
 800cb00:	4608      	mov	r0, r1
 800cb02:	f003 fa9d 	bl	8010040 <SDMMC_CmdSelDesel>
 800cb06:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d001      	beq.n	800cb12 <SD_InitCard+0x176>
  {
    return errorstate;
 800cb0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb10:	e00e      	b.n	800cb30 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681d      	ldr	r5, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	466c      	mov	r4, sp
 800cb1a:	f103 0210 	add.w	r2, r3, #16
 800cb1e:	ca07      	ldmia	r2, {r0, r1, r2}
 800cb20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb24:	3304      	adds	r3, #4
 800cb26:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f003 f8f1 	bl	800fd10 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3740      	adds	r7, #64	@ 0x40
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bdb0      	pop	{r4, r5, r7, pc}

0800cb38 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb40:	2300      	movs	r3, #0
 800cb42:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cb44:	2300      	movs	r3, #0
 800cb46:	617b      	str	r3, [r7, #20]
 800cb48:	2300      	movs	r3, #0
 800cb4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4618      	mov	r0, r3
 800cb52:	f003 fa98 	bl	8010086 <SDMMC_CmdGoIdleState>
 800cb56:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	e072      	b.n	800cc48 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4618      	mov	r0, r3
 800cb68:	f003 faab 	bl	80100c2 <SDMMC_CmdOperCond>
 800cb6c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d00d      	beq.n	800cb90 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f003 fa81 	bl	8010086 <SDMMC_CmdGoIdleState>
 800cb84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d004      	beq.n	800cb96 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	e05b      	b.n	800cc48 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d137      	bne.n	800cc0e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2100      	movs	r1, #0
 800cba4:	4618      	mov	r0, r3
 800cba6:	f003 faab 	bl	8010100 <SDMMC_CmdAppCommand>
 800cbaa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d02d      	beq.n	800cc0e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbb2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cbb6:	e047      	b.n	800cc48 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2100      	movs	r1, #0
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f003 fa9e 	bl	8010100 <SDMMC_CmdAppCommand>
 800cbc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <SD_PowerON+0x98>
    {
      return errorstate;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	e03b      	b.n	800cc48 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	491e      	ldr	r1, [pc, #120]	@ (800cc50 <SD_PowerON+0x118>)
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f003 fab4 	bl	8010144 <SDMMC_CmdAppOperCommand>
 800cbdc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d002      	beq.n	800cbea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cbe4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cbe8:	e02e      	b.n	800cc48 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	2100      	movs	r1, #0
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f003 f91a 	bl	800fe2a <SDMMC_GetResponse>
 800cbf6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	0fdb      	lsrs	r3, r3, #31
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d101      	bne.n	800cc04 <SD_PowerON+0xcc>
 800cc00:	2301      	movs	r3, #1
 800cc02:	e000      	b.n	800cc06 <SD_PowerON+0xce>
 800cc04:	2300      	movs	r3, #0
 800cc06:	613b      	str	r3, [r7, #16]

    count++;
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d802      	bhi.n	800cc1e <SD_PowerON+0xe6>
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d0cc      	beq.n	800cbb8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d902      	bls.n	800cc2e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800cc28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800cc2c:	e00c      	b.n	800cc48 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d003      	beq.n	800cc40 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	645a      	str	r2, [r3, #68]	@ 0x44
 800cc3e:	e002      	b.n	800cc46 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800cc46:	2300      	movs	r3, #0
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3718      	adds	r7, #24
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	c1100000 	.word	0xc1100000

0800cc54 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d102      	bne.n	800cc6a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800cc64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc68:	e018      	b.n	800cc9c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc72:	041b      	lsls	r3, r3, #16
 800cc74:	4619      	mov	r1, r3
 800cc76:	4610      	mov	r0, r2
 800cc78:	f003 fb29 	bl	80102ce <SDMMC_CmdSendStatus>
 800cc7c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d001      	beq.n	800cc88 <SD_SendStatus+0x34>
  {
    return errorstate;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	e009      	b.n	800cc9c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f003 f8cb 	bl	800fe2a <SDMMC_GetResponse>
 800cc94:	4602      	mov	r2, r0
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ccac:	2300      	movs	r3, #0
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	2100      	movs	r1, #0
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f003 f8b5 	bl	800fe2a <SDMMC_GetResponse>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ccca:	d102      	bne.n	800ccd2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cccc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ccd0:	e02f      	b.n	800cd32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ccd2:	f107 030c 	add.w	r3, r7, #12
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 f879 	bl	800cdd0 <SD_FindSCR>
 800ccde:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d001      	beq.n	800ccea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	e023      	b.n	800cd32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d01c      	beq.n	800cd2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681a      	ldr	r2, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccfc:	041b      	lsls	r3, r3, #16
 800ccfe:	4619      	mov	r1, r3
 800cd00:	4610      	mov	r0, r2
 800cd02:	f003 f9fd 	bl	8010100 <SDMMC_CmdAppCommand>
 800cd06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	e00f      	b.n	800cd32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2102      	movs	r1, #2
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f003 fa37 	bl	801018c <SDMMC_CmdBusWidth>
 800cd1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d001      	beq.n	800cd2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	e003      	b.n	800cd32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e001      	b.n	800cd32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cd2e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b086      	sub	sp, #24
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800cd42:	2300      	movs	r3, #0
 800cd44:	60fb      	str	r3, [r7, #12]
 800cd46:	2300      	movs	r3, #0
 800cd48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2100      	movs	r1, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f003 f86a 	bl	800fe2a <SDMMC_GetResponse>
 800cd56:	4603      	mov	r3, r0
 800cd58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd60:	d102      	bne.n	800cd68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cd62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cd66:	e02f      	b.n	800cdc8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800cd68:	f107 030c 	add.w	r3, r7, #12
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f000 f82e 	bl	800cdd0 <SD_FindSCR>
 800cd74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d001      	beq.n	800cd80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	e023      	b.n	800cdc8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d01c      	beq.n	800cdc4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd92:	041b      	lsls	r3, r3, #16
 800cd94:	4619      	mov	r1, r3
 800cd96:	4610      	mov	r0, r2
 800cd98:	f003 f9b2 	bl	8010100 <SDMMC_CmdAppCommand>
 800cd9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d001      	beq.n	800cda8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	e00f      	b.n	800cdc8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2100      	movs	r1, #0
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f003 f9ec 	bl	801018c <SDMMC_CmdBusWidth>
 800cdb4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	e003      	b.n	800cdc8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	e001      	b.n	800cdc8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cdc4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3718      	adds	r7, #24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800cdd0:	b590      	push	{r4, r7, lr}
 800cdd2:	b08f      	sub	sp, #60	@ 0x3c
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cdda:	f7f8 f8b5 	bl	8004f48 <HAL_GetTick>
 800cdde:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800cde0:	2300      	movs	r3, #0
 800cde2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800cde4:	2300      	movs	r3, #0
 800cde6:	60bb      	str	r3, [r7, #8]
 800cde8:	2300      	movs	r3, #0
 800cdea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	2108      	movs	r1, #8
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f003 f856 	bl	800fea8 <SDMMC_CmdBlockLength>
 800cdfc:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ce04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce06:	e0b2      	b.n	800cf6e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce10:	041b      	lsls	r3, r3, #16
 800ce12:	4619      	mov	r1, r3
 800ce14:	4610      	mov	r0, r2
 800ce16:	f003 f973 	bl	8010100 <SDMMC_CmdAppCommand>
 800ce1a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ce22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce24:	e0a3      	b.n	800cf6e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce26:	f04f 33ff 	mov.w	r3, #4294967295
 800ce2a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ce2c:	2308      	movs	r3, #8
 800ce2e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ce30:	2330      	movs	r3, #48	@ 0x30
 800ce32:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ce34:	2302      	movs	r3, #2
 800ce36:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f107 0210 	add.w	r2, r7, #16
 800ce48:	4611      	mov	r1, r2
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f003 f800 	bl	800fe50 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f003 f9bb 	bl	80101d0 <SDMMC_CmdSendSCR>
 800ce5a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d02a      	beq.n	800ceb8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800ce62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce64:	e083      	b.n	800cf6e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00f      	beq.n	800ce94 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6819      	ldr	r1, [r3, #0]
 800ce78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce7a:	009b      	lsls	r3, r3, #2
 800ce7c:	f107 0208 	add.w	r2, r7, #8
 800ce80:	18d4      	adds	r4, r2, r3
 800ce82:	4608      	mov	r0, r1
 800ce84:	f002 ff70 	bl	800fd68 <SDMMC_ReadFIFO>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	6023      	str	r3, [r4, #0]
      index++;
 800ce8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce8e:	3301      	adds	r3, #1
 800ce90:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce92:	e006      	b.n	800cea2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d012      	beq.n	800cec8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800cea2:	f7f8 f851 	bl	8004f48 <HAL_GetTick>
 800cea6:	4602      	mov	r2, r0
 800cea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceb0:	d102      	bne.n	800ceb8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ceb2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ceb6:	e05a      	b.n	800cf6e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cebe:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d0cf      	beq.n	800ce66 <SD_FindSCR+0x96>
 800cec6:	e000      	b.n	800ceca <SD_FindSCR+0xfa>
      break;
 800cec8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ced0:	f003 0308 	and.w	r3, r3, #8
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d005      	beq.n	800cee4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2208      	movs	r2, #8
 800cede:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cee0:	2308      	movs	r3, #8
 800cee2:	e044      	b.n	800cf6e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceea:	f003 0302 	and.w	r3, r3, #2
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d005      	beq.n	800cefe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	2202      	movs	r2, #2
 800cef8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cefa:	2302      	movs	r3, #2
 800cefc:	e037      	b.n	800cf6e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf04:	f003 0320 	and.w	r3, r3, #32
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d005      	beq.n	800cf18 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2220      	movs	r2, #32
 800cf12:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800cf14:	2320      	movs	r3, #32
 800cf16:	e02a      	b.n	800cf6e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cf20:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	061a      	lsls	r2, r3, #24
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	021b      	lsls	r3, r3, #8
 800cf2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cf2e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	0a1b      	lsrs	r3, r3, #8
 800cf34:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cf38:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	0e1b      	lsrs	r3, r3, #24
 800cf3e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800cf40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf42:	601a      	str	r2, [r3, #0]
    scr++;
 800cf44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf46:	3304      	adds	r3, #4
 800cf48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	061a      	lsls	r2, r3, #24
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	021b      	lsls	r3, r3, #8
 800cf52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cf56:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	0a1b      	lsrs	r3, r3, #8
 800cf5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cf60:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	0e1b      	lsrs	r3, r3, #24
 800cf66:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800cf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800cf6c:	2300      	movs	r3, #0
}
 800cf6e:	4618      	mov	r0, r3
 800cf70:	373c      	adds	r7, #60	@ 0x3c
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd90      	pop	{r4, r7, pc}

0800cf76 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b082      	sub	sp, #8
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
 800cf7e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d101      	bne.n	800cf8a <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e025      	b.n	800cfd6 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d106      	bne.n	800cfa4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f7f7 f99e 	bl	80042e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2202      	movs	r2, #2
 800cfa8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	3304      	adds	r3, #4
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	f002 fde4 	bl	800fb84 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6818      	ldr	r0, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	6839      	ldr	r1, [r7, #0]
 800cfc8:	f002 fe38 	bl	800fc3c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
	...

0800cfe0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e04c      	b.n	800d08c <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cff8:	b2db      	uxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d106      	bne.n	800d00c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f7f6 fdf0 	bl	8003bec <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2202      	movs	r2, #2
 800d010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f022 0203 	bic.w	r2, r2, #3
 800d022:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4b19      	ldr	r3, [pc, #100]	@ (800d094 <HAL_SPDIFRX_Init+0xb4>)
 800d030:	4013      	ands	r3, r2
 800d032:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800d03c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800d042:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800d048:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800d04e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800d054:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800d05a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800d060:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800d066:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800d06c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	4313      	orrs	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2200      	movs	r2, #0
 800d080:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2201      	movs	r2, #1
 800d086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800d08a:	2300      	movs	r3, #0
}
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	fff88407 	.word	0xfff88407

0800d098 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d101      	bne.n	800d0aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e09d      	b.n	800d1e6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d108      	bne.n	800d0c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d0ba:	d009      	beq.n	800d0d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	61da      	str	r2, [r3, #28]
 800d0c2:	e005      	b.n	800d0d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d106      	bne.n	800d0f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7f6 fde2 	bl	8003cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	681a      	ldr	r2, [r3, #0]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d106:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	68db      	ldr	r3, [r3, #12]
 800d10c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d110:	d902      	bls.n	800d118 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d112:	2300      	movs	r3, #0
 800d114:	60fb      	str	r3, [r7, #12]
 800d116:	e002      	b.n	800d11e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d11c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	68db      	ldr	r3, [r3, #12]
 800d122:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d126:	d007      	beq.n	800d138 <HAL_SPI_Init+0xa0>
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d130:	d002      	beq.n	800d138 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d148:	431a      	orrs	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	691b      	ldr	r3, [r3, #16]
 800d14e:	f003 0302 	and.w	r3, r3, #2
 800d152:	431a      	orrs	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	f003 0301 	and.w	r3, r3, #1
 800d15c:	431a      	orrs	r2, r3
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	699b      	ldr	r3, [r3, #24]
 800d162:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d166:	431a      	orrs	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	69db      	ldr	r3, [r3, #28]
 800d16c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d170:	431a      	orrs	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a1b      	ldr	r3, [r3, #32]
 800d176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d17a:	ea42 0103 	orr.w	r1, r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d182:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	430a      	orrs	r2, r1
 800d18c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	699b      	ldr	r3, [r3, #24]
 800d192:	0c1b      	lsrs	r3, r3, #16
 800d194:	f003 0204 	and.w	r2, r3, #4
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d19c:	f003 0310 	and.w	r3, r3, #16
 800d1a0:	431a      	orrs	r2, r3
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1a6:	f003 0308 	and.w	r3, r3, #8
 800d1aa:	431a      	orrs	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	68db      	ldr	r3, [r3, #12]
 800d1b0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d1b4:	ea42 0103 	orr.w	r1, r2, r3
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	430a      	orrs	r2, r1
 800d1c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	69da      	ldr	r2, [r3, #28]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d1d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2201      	movs	r2, #1
 800d1e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}

0800d1ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d1ee:	b580      	push	{r7, lr}
 800d1f0:	b082      	sub	sp, #8
 800d1f2:	af00      	add	r7, sp, #0
 800d1f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d101      	bne.n	800d200 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e049      	b.n	800d294 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d106      	bne.n	800d21a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2200      	movs	r2, #0
 800d210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f7f6 fdaf 	bl	8003d78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2202      	movs	r2, #2
 800d21e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	3304      	adds	r3, #4
 800d22a:	4619      	mov	r1, r3
 800d22c:	4610      	mov	r0, r2
 800d22e:	f000 fc11 	bl	800da54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2201      	movs	r2, #1
 800d23e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2201      	movs	r2, #1
 800d24e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2201      	movs	r2, #1
 800d256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2201      	movs	r2, #1
 800d266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	2201      	movs	r2, #1
 800d276:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2201      	movs	r2, #1
 800d27e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2201      	movs	r2, #1
 800d28e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b085      	sub	sp, #20
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d001      	beq.n	800d2b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e054      	b.n	800d35e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2202      	movs	r2, #2
 800d2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	68da      	ldr	r2, [r3, #12]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	f042 0201 	orr.w	r2, r2, #1
 800d2ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a26      	ldr	r2, [pc, #152]	@ (800d36c <HAL_TIM_Base_Start_IT+0xd0>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d022      	beq.n	800d31c <HAL_TIM_Base_Start_IT+0x80>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2de:	d01d      	beq.n	800d31c <HAL_TIM_Base_Start_IT+0x80>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a22      	ldr	r2, [pc, #136]	@ (800d370 <HAL_TIM_Base_Start_IT+0xd4>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d018      	beq.n	800d31c <HAL_TIM_Base_Start_IT+0x80>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a21      	ldr	r2, [pc, #132]	@ (800d374 <HAL_TIM_Base_Start_IT+0xd8>)
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d013      	beq.n	800d31c <HAL_TIM_Base_Start_IT+0x80>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a1f      	ldr	r2, [pc, #124]	@ (800d378 <HAL_TIM_Base_Start_IT+0xdc>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d00e      	beq.n	800d31c <HAL_TIM_Base_Start_IT+0x80>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	4a1e      	ldr	r2, [pc, #120]	@ (800d37c <HAL_TIM_Base_Start_IT+0xe0>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d009      	beq.n	800d31c <HAL_TIM_Base_Start_IT+0x80>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a1c      	ldr	r2, [pc, #112]	@ (800d380 <HAL_TIM_Base_Start_IT+0xe4>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d004      	beq.n	800d31c <HAL_TIM_Base_Start_IT+0x80>
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a1b      	ldr	r2, [pc, #108]	@ (800d384 <HAL_TIM_Base_Start_IT+0xe8>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d115      	bne.n	800d348 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	689a      	ldr	r2, [r3, #8]
 800d322:	4b19      	ldr	r3, [pc, #100]	@ (800d388 <HAL_TIM_Base_Start_IT+0xec>)
 800d324:	4013      	ands	r3, r2
 800d326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2b06      	cmp	r3, #6
 800d32c:	d015      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0xbe>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d334:	d011      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	681a      	ldr	r2, [r3, #0]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f042 0201 	orr.w	r2, r2, #1
 800d344:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d346:	e008      	b.n	800d35a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f042 0201 	orr.w	r2, r2, #1
 800d356:	601a      	str	r2, [r3, #0]
 800d358:	e000      	b.n	800d35c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d35a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3714      	adds	r7, #20
 800d362:	46bd      	mov	sp, r7
 800d364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	40010000 	.word	0x40010000
 800d370:	40000400 	.word	0x40000400
 800d374:	40000800 	.word	0x40000800
 800d378:	40000c00 	.word	0x40000c00
 800d37c:	40010400 	.word	0x40010400
 800d380:	40014000 	.word	0x40014000
 800d384:	40001800 	.word	0x40001800
 800d388:	00010007 	.word	0x00010007

0800d38c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b082      	sub	sp, #8
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d101      	bne.n	800d39e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d39a:	2301      	movs	r3, #1
 800d39c:	e049      	b.n	800d432 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7f6 fd4e 	bl	8003e54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	3304      	adds	r3, #4
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	f000 fb42 	bl	800da54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2201      	movs	r2, #1
 800d404:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2201      	movs	r2, #1
 800d40c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2201      	movs	r2, #1
 800d414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	2201      	movs	r2, #1
 800d41c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b084      	sub	sp, #16
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d020      	beq.n	800d49e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f003 0302 	and.w	r3, r3, #2
 800d462:	2b00      	cmp	r3, #0
 800d464:	d01b      	beq.n	800d49e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f06f 0202 	mvn.w	r2, #2
 800d46e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	699b      	ldr	r3, [r3, #24]
 800d47c:	f003 0303 	and.w	r3, r3, #3
 800d480:	2b00      	cmp	r3, #0
 800d482:	d003      	beq.n	800d48c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fac7 	bl	800da18 <HAL_TIM_IC_CaptureCallback>
 800d48a:	e005      	b.n	800d498 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 fab9 	bl	800da04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 faca 	bl	800da2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2200      	movs	r2, #0
 800d49c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	f003 0304 	and.w	r3, r3, #4
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d020      	beq.n	800d4ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f003 0304 	and.w	r3, r3, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d01b      	beq.n	800d4ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f06f 0204 	mvn.w	r2, #4
 800d4ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2202      	movs	r2, #2
 800d4c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	699b      	ldr	r3, [r3, #24]
 800d4c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d003      	beq.n	800d4d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 faa1 	bl	800da18 <HAL_TIM_IC_CaptureCallback>
 800d4d6:	e005      	b.n	800d4e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fa93 	bl	800da04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 faa4 	bl	800da2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	f003 0308 	and.w	r3, r3, #8
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d020      	beq.n	800d536 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f003 0308 	and.w	r3, r3, #8
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d01b      	beq.n	800d536 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f06f 0208 	mvn.w	r2, #8
 800d506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2204      	movs	r2, #4
 800d50c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	69db      	ldr	r3, [r3, #28]
 800d514:	f003 0303 	and.w	r3, r3, #3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d003      	beq.n	800d524 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fa7b 	bl	800da18 <HAL_TIM_IC_CaptureCallback>
 800d522:	e005      	b.n	800d530 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 fa6d 	bl	800da04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fa7e 	bl	800da2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2200      	movs	r2, #0
 800d534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	f003 0310 	and.w	r3, r3, #16
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d020      	beq.n	800d582 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	f003 0310 	and.w	r3, r3, #16
 800d546:	2b00      	cmp	r3, #0
 800d548:	d01b      	beq.n	800d582 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f06f 0210 	mvn.w	r2, #16
 800d552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2208      	movs	r2, #8
 800d558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	69db      	ldr	r3, [r3, #28]
 800d560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d564:	2b00      	cmp	r3, #0
 800d566:	d003      	beq.n	800d570 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fa55 	bl	800da18 <HAL_TIM_IC_CaptureCallback>
 800d56e:	e005      	b.n	800d57c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fa47 	bl	800da04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fa58 	bl	800da2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	f003 0301 	and.w	r3, r3, #1
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d00c      	beq.n	800d5a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f003 0301 	and.w	r3, r3, #1
 800d592:	2b00      	cmp	r3, #0
 800d594:	d007      	beq.n	800d5a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f06f 0201 	mvn.w	r2, #1
 800d59e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7f5 fdfd 	bl	80031a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d104      	bne.n	800d5ba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00c      	beq.n	800d5d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d007      	beq.n	800d5d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d5cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fef4 	bl	800e3bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00c      	beq.n	800d5f8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d007      	beq.n	800d5f8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d5f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 feec 	bl	800e3d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00c      	beq.n	800d61c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 fa12 	bl	800da40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	f003 0320 	and.w	r3, r3, #32
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00c      	beq.n	800d640 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f003 0320 	and.w	r3, r3, #32
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d007      	beq.n	800d640 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f06f 0220 	mvn.w	r2, #32
 800d638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 feb4 	bl	800e3a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d640:	bf00      	nop
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d654:	2300      	movs	r3, #0
 800d656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d101      	bne.n	800d666 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d662:	2302      	movs	r3, #2
 800d664:	e0ff      	b.n	800d866 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2b14      	cmp	r3, #20
 800d672:	f200 80f0 	bhi.w	800d856 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d676:	a201      	add	r2, pc, #4	@ (adr r2, 800d67c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d67c:	0800d6d1 	.word	0x0800d6d1
 800d680:	0800d857 	.word	0x0800d857
 800d684:	0800d857 	.word	0x0800d857
 800d688:	0800d857 	.word	0x0800d857
 800d68c:	0800d711 	.word	0x0800d711
 800d690:	0800d857 	.word	0x0800d857
 800d694:	0800d857 	.word	0x0800d857
 800d698:	0800d857 	.word	0x0800d857
 800d69c:	0800d753 	.word	0x0800d753
 800d6a0:	0800d857 	.word	0x0800d857
 800d6a4:	0800d857 	.word	0x0800d857
 800d6a8:	0800d857 	.word	0x0800d857
 800d6ac:	0800d793 	.word	0x0800d793
 800d6b0:	0800d857 	.word	0x0800d857
 800d6b4:	0800d857 	.word	0x0800d857
 800d6b8:	0800d857 	.word	0x0800d857
 800d6bc:	0800d7d5 	.word	0x0800d7d5
 800d6c0:	0800d857 	.word	0x0800d857
 800d6c4:	0800d857 	.word	0x0800d857
 800d6c8:	0800d857 	.word	0x0800d857
 800d6cc:	0800d815 	.word	0x0800d815
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	68b9      	ldr	r1, [r7, #8]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 fa62 	bl	800dba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	699a      	ldr	r2, [r3, #24]
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f042 0208 	orr.w	r2, r2, #8
 800d6ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	699a      	ldr	r2, [r3, #24]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f022 0204 	bic.w	r2, r2, #4
 800d6fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6999      	ldr	r1, [r3, #24]
 800d702:	68bb      	ldr	r3, [r7, #8]
 800d704:	691a      	ldr	r2, [r3, #16]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	430a      	orrs	r2, r1
 800d70c:	619a      	str	r2, [r3, #24]
      break;
 800d70e:	e0a5      	b.n	800d85c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68b9      	ldr	r1, [r7, #8]
 800d716:	4618      	mov	r0, r3
 800d718:	f000 fab4 	bl	800dc84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	699a      	ldr	r2, [r3, #24]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d72a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	699a      	ldr	r2, [r3, #24]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d73a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	6999      	ldr	r1, [r3, #24]
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	691b      	ldr	r3, [r3, #16]
 800d746:	021a      	lsls	r2, r3, #8
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	430a      	orrs	r2, r1
 800d74e:	619a      	str	r2, [r3, #24]
      break;
 800d750:	e084      	b.n	800d85c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68b9      	ldr	r1, [r7, #8]
 800d758:	4618      	mov	r0, r3
 800d75a:	f000 fb0b 	bl	800dd74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	69da      	ldr	r2, [r3, #28]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f042 0208 	orr.w	r2, r2, #8
 800d76c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	69da      	ldr	r2, [r3, #28]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f022 0204 	bic.w	r2, r2, #4
 800d77c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	69d9      	ldr	r1, [r3, #28]
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	691a      	ldr	r2, [r3, #16]
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	430a      	orrs	r2, r1
 800d78e:	61da      	str	r2, [r3, #28]
      break;
 800d790:	e064      	b.n	800d85c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 fb61 	bl	800de60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	69da      	ldr	r2, [r3, #28]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d7ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	69da      	ldr	r2, [r3, #28]
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d7bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	69d9      	ldr	r1, [r3, #28]
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	691b      	ldr	r3, [r3, #16]
 800d7c8:	021a      	lsls	r2, r3, #8
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	430a      	orrs	r2, r1
 800d7d0:	61da      	str	r2, [r3, #28]
      break;
 800d7d2:	e043      	b.n	800d85c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	68b9      	ldr	r1, [r7, #8]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 fb98 	bl	800df10 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f042 0208 	orr.w	r2, r2, #8
 800d7ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f022 0204 	bic.w	r2, r2, #4
 800d7fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	691a      	ldr	r2, [r3, #16]
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	430a      	orrs	r2, r1
 800d810:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d812:	e023      	b.n	800d85c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68b9      	ldr	r1, [r7, #8]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f000 fbca 	bl	800dfb4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800d82e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d83e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	691b      	ldr	r3, [r3, #16]
 800d84a:	021a      	lsls	r2, r3, #8
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	430a      	orrs	r2, r1
 800d852:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800d854:	e002      	b.n	800d85c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	75fb      	strb	r3, [r7, #23]
      break;
 800d85a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d864:	7dfb      	ldrb	r3, [r7, #23]
}
 800d866:	4618      	mov	r0, r3
 800d868:	3718      	adds	r7, #24
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop

0800d870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b084      	sub	sp, #16
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
 800d878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d884:	2b01      	cmp	r3, #1
 800d886:	d101      	bne.n	800d88c <HAL_TIM_ConfigClockSource+0x1c>
 800d888:	2302      	movs	r3, #2
 800d88a:	e0b4      	b.n	800d9f6 <HAL_TIM_ConfigClockSource+0x186>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2201      	movs	r2, #1
 800d890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2202      	movs	r2, #2
 800d898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d8a4:	68ba      	ldr	r2, [r7, #8]
 800d8a6:	4b56      	ldr	r3, [pc, #344]	@ (800da00 <HAL_TIM_ConfigClockSource+0x190>)
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d8b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8c4:	d03e      	beq.n	800d944 <HAL_TIM_ConfigClockSource+0xd4>
 800d8c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d8ca:	f200 8087 	bhi.w	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
 800d8ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8d2:	f000 8086 	beq.w	800d9e2 <HAL_TIM_ConfigClockSource+0x172>
 800d8d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8da:	d87f      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
 800d8dc:	2b70      	cmp	r3, #112	@ 0x70
 800d8de:	d01a      	beq.n	800d916 <HAL_TIM_ConfigClockSource+0xa6>
 800d8e0:	2b70      	cmp	r3, #112	@ 0x70
 800d8e2:	d87b      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
 800d8e4:	2b60      	cmp	r3, #96	@ 0x60
 800d8e6:	d050      	beq.n	800d98a <HAL_TIM_ConfigClockSource+0x11a>
 800d8e8:	2b60      	cmp	r3, #96	@ 0x60
 800d8ea:	d877      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
 800d8ec:	2b50      	cmp	r3, #80	@ 0x50
 800d8ee:	d03c      	beq.n	800d96a <HAL_TIM_ConfigClockSource+0xfa>
 800d8f0:	2b50      	cmp	r3, #80	@ 0x50
 800d8f2:	d873      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
 800d8f4:	2b40      	cmp	r3, #64	@ 0x40
 800d8f6:	d058      	beq.n	800d9aa <HAL_TIM_ConfigClockSource+0x13a>
 800d8f8:	2b40      	cmp	r3, #64	@ 0x40
 800d8fa:	d86f      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
 800d8fc:	2b30      	cmp	r3, #48	@ 0x30
 800d8fe:	d064      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x15a>
 800d900:	2b30      	cmp	r3, #48	@ 0x30
 800d902:	d86b      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
 800d904:	2b20      	cmp	r3, #32
 800d906:	d060      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x15a>
 800d908:	2b20      	cmp	r3, #32
 800d90a:	d867      	bhi.n	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d05c      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x15a>
 800d910:	2b10      	cmp	r3, #16
 800d912:	d05a      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x15a>
 800d914:	e062      	b.n	800d9dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d926:	f000 fc13 	bl	800e150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	68ba      	ldr	r2, [r7, #8]
 800d940:	609a      	str	r2, [r3, #8]
      break;
 800d942:	e04f      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d954:	f000 fbfc 	bl	800e150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	689a      	ldr	r2, [r3, #8]
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d966:	609a      	str	r2, [r3, #8]
      break;
 800d968:	e03c      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d976:	461a      	mov	r2, r3
 800d978:	f000 fb70 	bl	800e05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2150      	movs	r1, #80	@ 0x50
 800d982:	4618      	mov	r0, r3
 800d984:	f000 fbc9 	bl	800e11a <TIM_ITRx_SetConfig>
      break;
 800d988:	e02c      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d996:	461a      	mov	r2, r3
 800d998:	f000 fb8f 	bl	800e0ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	2160      	movs	r1, #96	@ 0x60
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f000 fbb9 	bl	800e11a <TIM_ITRx_SetConfig>
      break;
 800d9a8:	e01c      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f000 fb50 	bl	800e05c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2140      	movs	r1, #64	@ 0x40
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 fba9 	bl	800e11a <TIM_ITRx_SetConfig>
      break;
 800d9c8:	e00c      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	4610      	mov	r0, r2
 800d9d6:	f000 fba0 	bl	800e11a <TIM_ITRx_SetConfig>
      break;
 800d9da:	e003      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d9dc:	2301      	movs	r3, #1
 800d9de:	73fb      	strb	r3, [r7, #15]
      break;
 800d9e0:	e000      	b.n	800d9e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d9e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	fffeff88 	.word	0xfffeff88

0800da04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800da20:	bf00      	nop
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800da34:	bf00      	nop
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	4a43      	ldr	r2, [pc, #268]	@ (800db74 <TIM_Base_SetConfig+0x120>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d013      	beq.n	800da94 <TIM_Base_SetConfig+0x40>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da72:	d00f      	beq.n	800da94 <TIM_Base_SetConfig+0x40>
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	4a40      	ldr	r2, [pc, #256]	@ (800db78 <TIM_Base_SetConfig+0x124>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d00b      	beq.n	800da94 <TIM_Base_SetConfig+0x40>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	4a3f      	ldr	r2, [pc, #252]	@ (800db7c <TIM_Base_SetConfig+0x128>)
 800da80:	4293      	cmp	r3, r2
 800da82:	d007      	beq.n	800da94 <TIM_Base_SetConfig+0x40>
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4a3e      	ldr	r2, [pc, #248]	@ (800db80 <TIM_Base_SetConfig+0x12c>)
 800da88:	4293      	cmp	r3, r2
 800da8a:	d003      	beq.n	800da94 <TIM_Base_SetConfig+0x40>
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	4a3d      	ldr	r2, [pc, #244]	@ (800db84 <TIM_Base_SetConfig+0x130>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d108      	bne.n	800daa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	685b      	ldr	r3, [r3, #4]
 800daa0:	68fa      	ldr	r2, [r7, #12]
 800daa2:	4313      	orrs	r3, r2
 800daa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	4a32      	ldr	r2, [pc, #200]	@ (800db74 <TIM_Base_SetConfig+0x120>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d02b      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dab4:	d027      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	4a2f      	ldr	r2, [pc, #188]	@ (800db78 <TIM_Base_SetConfig+0x124>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d023      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4a2e      	ldr	r2, [pc, #184]	@ (800db7c <TIM_Base_SetConfig+0x128>)
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d01f      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4a2d      	ldr	r2, [pc, #180]	@ (800db80 <TIM_Base_SetConfig+0x12c>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d01b      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4a2c      	ldr	r2, [pc, #176]	@ (800db84 <TIM_Base_SetConfig+0x130>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d017      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4a2b      	ldr	r2, [pc, #172]	@ (800db88 <TIM_Base_SetConfig+0x134>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d013      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4a2a      	ldr	r2, [pc, #168]	@ (800db8c <TIM_Base_SetConfig+0x138>)
 800dae2:	4293      	cmp	r3, r2
 800dae4:	d00f      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	4a29      	ldr	r2, [pc, #164]	@ (800db90 <TIM_Base_SetConfig+0x13c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	d00b      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4a28      	ldr	r2, [pc, #160]	@ (800db94 <TIM_Base_SetConfig+0x140>)
 800daf2:	4293      	cmp	r3, r2
 800daf4:	d007      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	4a27      	ldr	r2, [pc, #156]	@ (800db98 <TIM_Base_SetConfig+0x144>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d003      	beq.n	800db06 <TIM_Base_SetConfig+0xb2>
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	4a26      	ldr	r2, [pc, #152]	@ (800db9c <TIM_Base_SetConfig+0x148>)
 800db02:	4293      	cmp	r3, r2
 800db04:	d108      	bne.n	800db18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	4313      	orrs	r3, r2
 800db16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	695b      	ldr	r3, [r3, #20]
 800db22:	4313      	orrs	r3, r2
 800db24:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	689a      	ldr	r2, [r3, #8]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a0e      	ldr	r2, [pc, #56]	@ (800db74 <TIM_Base_SetConfig+0x120>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d003      	beq.n	800db46 <TIM_Base_SetConfig+0xf2>
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	4a10      	ldr	r2, [pc, #64]	@ (800db84 <TIM_Base_SetConfig+0x130>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d103      	bne.n	800db4e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	691a      	ldr	r2, [r3, #16]
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f043 0204 	orr.w	r2, r3, #4
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2201      	movs	r2, #1
 800db5e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	601a      	str	r2, [r3, #0]
}
 800db66:	bf00      	nop
 800db68:	3714      	adds	r7, #20
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	40010000 	.word	0x40010000
 800db78:	40000400 	.word	0x40000400
 800db7c:	40000800 	.word	0x40000800
 800db80:	40000c00 	.word	0x40000c00
 800db84:	40010400 	.word	0x40010400
 800db88:	40014000 	.word	0x40014000
 800db8c:	40014400 	.word	0x40014400
 800db90:	40014800 	.word	0x40014800
 800db94:	40001800 	.word	0x40001800
 800db98:	40001c00 	.word	0x40001c00
 800db9c:	40002000 	.word	0x40002000

0800dba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b087      	sub	sp, #28
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a1b      	ldr	r3, [r3, #32]
 800dbb4:	f023 0201 	bic.w	r2, r3, #1
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	685b      	ldr	r3, [r3, #4]
 800dbc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	699b      	ldr	r3, [r3, #24]
 800dbc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	4b2b      	ldr	r3, [pc, #172]	@ (800dc78 <TIM_OC1_SetConfig+0xd8>)
 800dbcc:	4013      	ands	r3, r2
 800dbce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f023 0303 	bic.w	r3, r3, #3
 800dbd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	68fa      	ldr	r2, [r7, #12]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	f023 0302 	bic.w	r3, r3, #2
 800dbe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	697a      	ldr	r2, [r7, #20]
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4a21      	ldr	r2, [pc, #132]	@ (800dc7c <TIM_OC1_SetConfig+0xdc>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d003      	beq.n	800dc04 <TIM_OC1_SetConfig+0x64>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	4a20      	ldr	r2, [pc, #128]	@ (800dc80 <TIM_OC1_SetConfig+0xe0>)
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d10c      	bne.n	800dc1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	f023 0308 	bic.w	r3, r3, #8
 800dc0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	4313      	orrs	r3, r2
 800dc14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	f023 0304 	bic.w	r3, r3, #4
 800dc1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	4a16      	ldr	r2, [pc, #88]	@ (800dc7c <TIM_OC1_SetConfig+0xdc>)
 800dc22:	4293      	cmp	r3, r2
 800dc24:	d003      	beq.n	800dc2e <TIM_OC1_SetConfig+0x8e>
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	4a15      	ldr	r2, [pc, #84]	@ (800dc80 <TIM_OC1_SetConfig+0xe0>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d111      	bne.n	800dc52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800dc3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	693a      	ldr	r2, [r7, #16]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	699b      	ldr	r3, [r3, #24]
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	4313      	orrs	r3, r2
 800dc50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	693a      	ldr	r2, [r7, #16]
 800dc56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	68fa      	ldr	r2, [r7, #12]
 800dc5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	685a      	ldr	r2, [r3, #4]
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	697a      	ldr	r2, [r7, #20]
 800dc6a:	621a      	str	r2, [r3, #32]
}
 800dc6c:	bf00      	nop
 800dc6e:	371c      	adds	r7, #28
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	fffeff8f 	.word	0xfffeff8f
 800dc7c:	40010000 	.word	0x40010000
 800dc80:	40010400 	.word	0x40010400

0800dc84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6a1b      	ldr	r3, [r3, #32]
 800dc92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6a1b      	ldr	r3, [r3, #32]
 800dc98:	f023 0210 	bic.w	r2, r3, #16
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	699b      	ldr	r3, [r3, #24]
 800dcaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	4b2e      	ldr	r3, [pc, #184]	@ (800dd68 <TIM_OC2_SetConfig+0xe4>)
 800dcb0:	4013      	ands	r3, r2
 800dcb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dcba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	021b      	lsls	r3, r3, #8
 800dcc2:	68fa      	ldr	r2, [r7, #12]
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	f023 0320 	bic.w	r3, r3, #32
 800dcce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	011b      	lsls	r3, r3, #4
 800dcd6:	697a      	ldr	r2, [r7, #20]
 800dcd8:	4313      	orrs	r3, r2
 800dcda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	4a23      	ldr	r2, [pc, #140]	@ (800dd6c <TIM_OC2_SetConfig+0xe8>)
 800dce0:	4293      	cmp	r3, r2
 800dce2:	d003      	beq.n	800dcec <TIM_OC2_SetConfig+0x68>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	4a22      	ldr	r2, [pc, #136]	@ (800dd70 <TIM_OC2_SetConfig+0xec>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d10d      	bne.n	800dd08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	68db      	ldr	r3, [r3, #12]
 800dcf8:	011b      	lsls	r3, r3, #4
 800dcfa:	697a      	ldr	r2, [r7, #20]
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dd06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4a18      	ldr	r2, [pc, #96]	@ (800dd6c <TIM_OC2_SetConfig+0xe8>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d003      	beq.n	800dd18 <TIM_OC2_SetConfig+0x94>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a17      	ldr	r2, [pc, #92]	@ (800dd70 <TIM_OC2_SetConfig+0xec>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d113      	bne.n	800dd40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800dd1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dd26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	695b      	ldr	r3, [r3, #20]
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	699b      	ldr	r3, [r3, #24]
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	693a      	ldr	r2, [r7, #16]
 800dd3c:	4313      	orrs	r3, r2
 800dd3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	693a      	ldr	r2, [r7, #16]
 800dd44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	685a      	ldr	r2, [r3, #4]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	621a      	str	r2, [r3, #32]
}
 800dd5a:	bf00      	nop
 800dd5c:	371c      	adds	r7, #28
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	feff8fff 	.word	0xfeff8fff
 800dd6c:	40010000 	.word	0x40010000
 800dd70:	40010400 	.word	0x40010400

0800dd74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b087      	sub	sp, #28
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a1b      	ldr	r3, [r3, #32]
 800dd88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	69db      	ldr	r3, [r3, #28]
 800dd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	4b2d      	ldr	r3, [pc, #180]	@ (800de54 <TIM_OC3_SetConfig+0xe0>)
 800dda0:	4013      	ands	r3, r2
 800dda2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f023 0303 	bic.w	r3, r3, #3
 800ddaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68fa      	ldr	r2, [r7, #12]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ddbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	021b      	lsls	r3, r3, #8
 800ddc4:	697a      	ldr	r2, [r7, #20]
 800ddc6:	4313      	orrs	r3, r2
 800ddc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4a22      	ldr	r2, [pc, #136]	@ (800de58 <TIM_OC3_SetConfig+0xe4>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d003      	beq.n	800ddda <TIM_OC3_SetConfig+0x66>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	4a21      	ldr	r2, [pc, #132]	@ (800de5c <TIM_OC3_SetConfig+0xe8>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d10d      	bne.n	800ddf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800dde0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	021b      	lsls	r3, r3, #8
 800dde8:	697a      	ldr	r2, [r7, #20]
 800ddea:	4313      	orrs	r3, r2
 800ddec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ddf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	4a17      	ldr	r2, [pc, #92]	@ (800de58 <TIM_OC3_SetConfig+0xe4>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d003      	beq.n	800de06 <TIM_OC3_SetConfig+0x92>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	4a16      	ldr	r2, [pc, #88]	@ (800de5c <TIM_OC3_SetConfig+0xe8>)
 800de02:	4293      	cmp	r3, r2
 800de04:	d113      	bne.n	800de2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800de0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800de14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	695b      	ldr	r3, [r3, #20]
 800de1a:	011b      	lsls	r3, r3, #4
 800de1c:	693a      	ldr	r2, [r7, #16]
 800de1e:	4313      	orrs	r3, r2
 800de20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	699b      	ldr	r3, [r3, #24]
 800de26:	011b      	lsls	r3, r3, #4
 800de28:	693a      	ldr	r2, [r7, #16]
 800de2a:	4313      	orrs	r3, r2
 800de2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	685a      	ldr	r2, [r3, #4]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	621a      	str	r2, [r3, #32]
}
 800de48:	bf00      	nop
 800de4a:	371c      	adds	r7, #28
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr
 800de54:	fffeff8f 	.word	0xfffeff8f
 800de58:	40010000 	.word	0x40010000
 800de5c:	40010400 	.word	0x40010400

0800de60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800de60:	b480      	push	{r7}
 800de62:	b087      	sub	sp, #28
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a1b      	ldr	r3, [r3, #32]
 800de6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6a1b      	ldr	r3, [r3, #32]
 800de74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	69db      	ldr	r3, [r3, #28]
 800de86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800de88:	68fa      	ldr	r2, [r7, #12]
 800de8a:	4b1e      	ldr	r3, [pc, #120]	@ (800df04 <TIM_OC4_SetConfig+0xa4>)
 800de8c:	4013      	ands	r3, r2
 800de8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800de96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	021b      	lsls	r3, r3, #8
 800de9e:	68fa      	ldr	r2, [r7, #12]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800deaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	031b      	lsls	r3, r3, #12
 800deb2:	693a      	ldr	r2, [r7, #16]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	4a13      	ldr	r2, [pc, #76]	@ (800df08 <TIM_OC4_SetConfig+0xa8>)
 800debc:	4293      	cmp	r3, r2
 800debe:	d003      	beq.n	800dec8 <TIM_OC4_SetConfig+0x68>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	4a12      	ldr	r2, [pc, #72]	@ (800df0c <TIM_OC4_SetConfig+0xac>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d109      	bne.n	800dedc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dece:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	695b      	ldr	r3, [r3, #20]
 800ded4:	019b      	lsls	r3, r3, #6
 800ded6:	697a      	ldr	r2, [r7, #20]
 800ded8:	4313      	orrs	r3, r2
 800deda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	697a      	ldr	r2, [r7, #20]
 800dee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	685a      	ldr	r2, [r3, #4]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	693a      	ldr	r2, [r7, #16]
 800def4:	621a      	str	r2, [r3, #32]
}
 800def6:	bf00      	nop
 800def8:	371c      	adds	r7, #28
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
 800df02:	bf00      	nop
 800df04:	feff8fff 	.word	0xfeff8fff
 800df08:	40010000 	.word	0x40010000
 800df0c:	40010400 	.word	0x40010400

0800df10 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800df10:	b480      	push	{r7}
 800df12:	b087      	sub	sp, #28
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
 800df18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a1b      	ldr	r3, [r3, #32]
 800df1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a1b      	ldr	r3, [r3, #32]
 800df24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	4b1b      	ldr	r3, [pc, #108]	@ (800dfa8 <TIM_OC5_SetConfig+0x98>)
 800df3c:	4013      	ands	r3, r2
 800df3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	4313      	orrs	r3, r2
 800df48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800df50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	041b      	lsls	r3, r3, #16
 800df58:	693a      	ldr	r2, [r7, #16]
 800df5a:	4313      	orrs	r3, r2
 800df5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	4a12      	ldr	r2, [pc, #72]	@ (800dfac <TIM_OC5_SetConfig+0x9c>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d003      	beq.n	800df6e <TIM_OC5_SetConfig+0x5e>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	4a11      	ldr	r2, [pc, #68]	@ (800dfb0 <TIM_OC5_SetConfig+0xa0>)
 800df6a:	4293      	cmp	r3, r2
 800df6c:	d109      	bne.n	800df82 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800df74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	695b      	ldr	r3, [r3, #20]
 800df7a:	021b      	lsls	r3, r3, #8
 800df7c:	697a      	ldr	r2, [r7, #20]
 800df7e:	4313      	orrs	r3, r2
 800df80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	697a      	ldr	r2, [r7, #20]
 800df86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	685a      	ldr	r2, [r3, #4]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	621a      	str	r2, [r3, #32]
}
 800df9c:	bf00      	nop
 800df9e:	371c      	adds	r7, #28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr
 800dfa8:	fffeff8f 	.word	0xfffeff8f
 800dfac:	40010000 	.word	0x40010000
 800dfb0:	40010400 	.word	0x40010400

0800dfb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b087      	sub	sp, #28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6a1b      	ldr	r3, [r3, #32]
 800dfc2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a1b      	ldr	r3, [r3, #32]
 800dfc8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dfdc:	68fa      	ldr	r2, [r7, #12]
 800dfde:	4b1c      	ldr	r3, [pc, #112]	@ (800e050 <TIM_OC6_SetConfig+0x9c>)
 800dfe0:	4013      	ands	r3, r2
 800dfe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	021b      	lsls	r3, r3, #8
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	689b      	ldr	r3, [r3, #8]
 800dffc:	051b      	lsls	r3, r3, #20
 800dffe:	693a      	ldr	r2, [r7, #16]
 800e000:	4313      	orrs	r3, r2
 800e002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	4a13      	ldr	r2, [pc, #76]	@ (800e054 <TIM_OC6_SetConfig+0xa0>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d003      	beq.n	800e014 <TIM_OC6_SetConfig+0x60>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	4a12      	ldr	r2, [pc, #72]	@ (800e058 <TIM_OC6_SetConfig+0xa4>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d109      	bne.n	800e028 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800e01a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	695b      	ldr	r3, [r3, #20]
 800e020:	029b      	lsls	r3, r3, #10
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	4313      	orrs	r3, r2
 800e026:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	697a      	ldr	r2, [r7, #20]
 800e02c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	685a      	ldr	r2, [r3, #4]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	693a      	ldr	r2, [r7, #16]
 800e040:	621a      	str	r2, [r3, #32]
}
 800e042:	bf00      	nop
 800e044:	371c      	adds	r7, #28
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr
 800e04e:	bf00      	nop
 800e050:	feff8fff 	.word	0xfeff8fff
 800e054:	40010000 	.word	0x40010000
 800e058:	40010400 	.word	0x40010400

0800e05c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b087      	sub	sp, #28
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6a1b      	ldr	r3, [r3, #32]
 800e06c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6a1b      	ldr	r3, [r3, #32]
 800e072:	f023 0201 	bic.w	r2, r3, #1
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	699b      	ldr	r3, [r3, #24]
 800e07e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	011b      	lsls	r3, r3, #4
 800e08c:	693a      	ldr	r2, [r7, #16]
 800e08e:	4313      	orrs	r3, r2
 800e090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	f023 030a 	bic.w	r3, r3, #10
 800e098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e09a:	697a      	ldr	r2, [r7, #20]
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	693a      	ldr	r2, [r7, #16]
 800e0a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	697a      	ldr	r2, [r7, #20]
 800e0ac:	621a      	str	r2, [r3, #32]
}
 800e0ae:	bf00      	nop
 800e0b0:	371c      	adds	r7, #28
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e0ba:	b480      	push	{r7}
 800e0bc:	b087      	sub	sp, #28
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	60f8      	str	r0, [r7, #12]
 800e0c2:	60b9      	str	r1, [r7, #8]
 800e0c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6a1b      	ldr	r3, [r3, #32]
 800e0ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6a1b      	ldr	r3, [r3, #32]
 800e0d0:	f023 0210 	bic.w	r2, r3, #16
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e0e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	031b      	lsls	r3, r3, #12
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e0f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	011b      	lsls	r3, r3, #4
 800e0fc:	697a      	ldr	r2, [r7, #20]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	693a      	ldr	r2, [r7, #16]
 800e106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	697a      	ldr	r2, [r7, #20]
 800e10c:	621a      	str	r2, [r3, #32]
}
 800e10e:	bf00      	nop
 800e110:	371c      	adds	r7, #28
 800e112:	46bd      	mov	sp, r7
 800e114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e11a:	b480      	push	{r7}
 800e11c:	b085      	sub	sp, #20
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	689b      	ldr	r3, [r3, #8]
 800e128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	4313      	orrs	r3, r2
 800e138:	f043 0307 	orr.w	r3, r3, #7
 800e13c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	68fa      	ldr	r2, [r7, #12]
 800e142:	609a      	str	r2, [r3, #8]
}
 800e144:	bf00      	nop
 800e146:	3714      	adds	r7, #20
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e150:	b480      	push	{r7}
 800e152:	b087      	sub	sp, #28
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
 800e15c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e16a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	021a      	lsls	r2, r3, #8
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	431a      	orrs	r2, r3
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	4313      	orrs	r3, r2
 800e178:	697a      	ldr	r2, [r7, #20]
 800e17a:	4313      	orrs	r3, r2
 800e17c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	697a      	ldr	r2, [r7, #20]
 800e182:	609a      	str	r2, [r3, #8]
}
 800e184:	bf00      	nop
 800e186:	371c      	adds	r7, #28
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d101      	bne.n	800e1a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1a4:	2302      	movs	r3, #2
 800e1a6:	e06d      	b.n	800e284 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2202      	movs	r2, #2
 800e1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	689b      	ldr	r3, [r3, #8]
 800e1c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a30      	ldr	r2, [pc, #192]	@ (800e290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d004      	beq.n	800e1dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a2f      	ldr	r2, [pc, #188]	@ (800e294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1d8:	4293      	cmp	r3, r2
 800e1da:	d108      	bne.n	800e1ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e1e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68fa      	ldr	r2, [r7, #12]
 800e1fc:	4313      	orrs	r3, r2
 800e1fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	4a20      	ldr	r2, [pc, #128]	@ (800e290 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e20e:	4293      	cmp	r3, r2
 800e210:	d022      	beq.n	800e258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e21a:	d01d      	beq.n	800e258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4a1d      	ldr	r2, [pc, #116]	@ (800e298 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d018      	beq.n	800e258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a1c      	ldr	r2, [pc, #112]	@ (800e29c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d013      	beq.n	800e258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a1a      	ldr	r2, [pc, #104]	@ (800e2a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e236:	4293      	cmp	r3, r2
 800e238:	d00e      	beq.n	800e258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a15      	ldr	r2, [pc, #84]	@ (800e294 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d009      	beq.n	800e258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a16      	ldr	r2, [pc, #88]	@ (800e2a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d004      	beq.n	800e258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a15      	ldr	r2, [pc, #84]	@ (800e2a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d10c      	bne.n	800e272 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e258:	68bb      	ldr	r3, [r7, #8]
 800e25a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e25e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	68ba      	ldr	r2, [r7, #8]
 800e266:	4313      	orrs	r3, r2
 800e268:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2201      	movs	r2, #1
 800e276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e282:	2300      	movs	r3, #0
}
 800e284:	4618      	mov	r0, r3
 800e286:	3714      	adds	r7, #20
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr
 800e290:	40010000 	.word	0x40010000
 800e294:	40010400 	.word	0x40010400
 800e298:	40000400 	.word	0x40000400
 800e29c:	40000800 	.word	0x40000800
 800e2a0:	40000c00 	.word	0x40000c00
 800e2a4:	40014000 	.word	0x40014000
 800e2a8:	40001800 	.word	0x40001800

0800e2ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d101      	bne.n	800e2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e2c4:	2302      	movs	r3, #2
 800e2c6:	e065      	b.n	800e394 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	689b      	ldr	r3, [r3, #8]
 800e2e8:	4313      	orrs	r3, r2
 800e2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	4313      	orrs	r3, r2
 800e2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4313      	orrs	r3, r2
 800e306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	691b      	ldr	r3, [r3, #16]
 800e312:	4313      	orrs	r3, r2
 800e314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	695b      	ldr	r3, [r3, #20]
 800e320:	4313      	orrs	r3, r2
 800e322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e32e:	4313      	orrs	r3, r2
 800e330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	041b      	lsls	r3, r3, #16
 800e33e:	4313      	orrs	r3, r2
 800e340:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a16      	ldr	r2, [pc, #88]	@ (800e3a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d004      	beq.n	800e356 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a14      	ldr	r2, [pc, #80]	@ (800e3a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d115      	bne.n	800e382 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800e35c:	683b      	ldr	r3, [r7, #0]
 800e35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e360:	051b      	lsls	r3, r3, #20
 800e362:	4313      	orrs	r3, r2
 800e364:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	69db      	ldr	r3, [r3, #28]
 800e370:	4313      	orrs	r3, r2
 800e372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	6a1b      	ldr	r3, [r3, #32]
 800e37e:	4313      	orrs	r3, r2
 800e380:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	68fa      	ldr	r2, [r7, #12]
 800e388:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr
 800e3a0:	40010000 	.word	0x40010000
 800e3a4:	40010400 	.word	0x40010400

0800e3a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b083      	sub	sp, #12
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e3b0:	bf00      	nop
 800e3b2:	370c      	adds	r7, #12
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ba:	4770      	bx	lr

0800e3bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e3bc:	b480      	push	{r7}
 800e3be:	b083      	sub	sp, #12
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e3c4:	bf00      	nop
 800e3c6:	370c      	adds	r7, #12
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e3d0:	b480      	push	{r7}
 800e3d2:	b083      	sub	sp, #12
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e3d8:	bf00      	nop
 800e3da:	370c      	adds	r7, #12
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e2:	4770      	bx	lr

0800e3e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d101      	bne.n	800e3f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e040      	b.n	800e478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d106      	bne.n	800e40c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f7f5 fe12 	bl	8004030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2224      	movs	r2, #36	@ 0x24
 800e410:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f022 0201 	bic.w	r2, r2, #1
 800e420:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e426:	2b00      	cmp	r3, #0
 800e428:	d002      	beq.n	800e430 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 ffb6 	bl	800f39c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fd4f 	bl	800eed4 <UART_SetConfig>
 800e436:	4603      	mov	r3, r0
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d101      	bne.n	800e440 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800e43c:	2301      	movs	r3, #1
 800e43e:	e01b      	b.n	800e478 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	685a      	ldr	r2, [r3, #4]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e44e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	689a      	ldr	r2, [r3, #8]
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e45e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	681a      	ldr	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f042 0201 	orr.w	r2, r2, #1
 800e46e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f001 f835 	bl	800f4e0 <UART_CheckIdleState>
 800e476:	4603      	mov	r3, r0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08a      	sub	sp, #40	@ 0x28
 800e484:	af02      	add	r7, sp, #8
 800e486:	60f8      	str	r0, [r7, #12]
 800e488:	60b9      	str	r1, [r7, #8]
 800e48a:	603b      	str	r3, [r7, #0]
 800e48c:	4613      	mov	r3, r2
 800e48e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e494:	2b20      	cmp	r3, #32
 800e496:	d177      	bne.n	800e588 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d002      	beq.n	800e4a4 <HAL_UART_Transmit+0x24>
 800e49e:	88fb      	ldrh	r3, [r7, #6]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d101      	bne.n	800e4a8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e070      	b.n	800e58a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2221      	movs	r2, #33	@ 0x21
 800e4b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e4b6:	f7f6 fd47 	bl	8004f48 <HAL_GetTick>
 800e4ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	88fa      	ldrh	r2, [r7, #6]
 800e4c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	88fa      	ldrh	r2, [r7, #6]
 800e4c8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	689b      	ldr	r3, [r3, #8]
 800e4d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4d4:	d108      	bne.n	800e4e8 <HAL_UART_Transmit+0x68>
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	691b      	ldr	r3, [r3, #16]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d104      	bne.n	800e4e8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	61bb      	str	r3, [r7, #24]
 800e4e6:	e003      	b.n	800e4f0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e4f0:	e02f      	b.n	800e552 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	9300      	str	r3, [sp, #0]
 800e4f6:	697b      	ldr	r3, [r7, #20]
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	2180      	movs	r1, #128	@ 0x80
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f001 f846 	bl	800f58e <UART_WaitOnFlagUntilTimeout>
 800e502:	4603      	mov	r3, r0
 800e504:	2b00      	cmp	r3, #0
 800e506:	d004      	beq.n	800e512 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2220      	movs	r2, #32
 800e50c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800e50e:	2303      	movs	r3, #3
 800e510:	e03b      	b.n	800e58a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d10b      	bne.n	800e530 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	461a      	mov	r2, r3
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e526:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	3302      	adds	r3, #2
 800e52c:	61bb      	str	r3, [r7, #24]
 800e52e:	e007      	b.n	800e540 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	781a      	ldrb	r2, [r3, #0]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800e53a:	69fb      	ldr	r3, [r7, #28]
 800e53c:	3301      	adds	r3, #1
 800e53e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e546:	b29b      	uxth	r3, r3
 800e548:	3b01      	subs	r3, #1
 800e54a:	b29a      	uxth	r2, r3
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800e558:	b29b      	uxth	r3, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d1c9      	bne.n	800e4f2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	2200      	movs	r2, #0
 800e566:	2140      	movs	r1, #64	@ 0x40
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f001 f810 	bl	800f58e <UART_WaitOnFlagUntilTimeout>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d004      	beq.n	800e57e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	2220      	movs	r2, #32
 800e578:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800e57a:	2303      	movs	r3, #3
 800e57c:	e005      	b.n	800e58a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2220      	movs	r2, #32
 800e582:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800e584:	2300      	movs	r3, #0
 800e586:	e000      	b.n	800e58a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800e588:	2302      	movs	r3, #2
  }
}
 800e58a:	4618      	mov	r0, r3
 800e58c:	3720      	adds	r7, #32
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}

0800e592 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e592:	b580      	push	{r7, lr}
 800e594:	b08a      	sub	sp, #40	@ 0x28
 800e596:	af02      	add	r7, sp, #8
 800e598:	60f8      	str	r0, [r7, #12]
 800e59a:	60b9      	str	r1, [r7, #8]
 800e59c:	603b      	str	r3, [r7, #0]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5a8:	2b20      	cmp	r3, #32
 800e5aa:	f040 80b5 	bne.w	800e718 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <HAL_UART_Receive+0x28>
 800e5b4:	88fb      	ldrh	r3, [r7, #6]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d101      	bne.n	800e5be <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	e0ad      	b.n	800e71a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2222      	movs	r2, #34	@ 0x22
 800e5ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e5d4:	f7f6 fcb8 	bl	8004f48 <HAL_GetTick>
 800e5d8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	88fa      	ldrh	r2, [r7, #6]
 800e5de:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	88fa      	ldrh	r2, [r7, #6]
 800e5e6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	689b      	ldr	r3, [r3, #8]
 800e5ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e5f2:	d10e      	bne.n	800e612 <HAL_UART_Receive+0x80>
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	691b      	ldr	r3, [r3, #16]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d105      	bne.n	800e608 <HAL_UART_Receive+0x76>
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e602:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e606:	e02d      	b.n	800e664 <HAL_UART_Receive+0xd2>
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	22ff      	movs	r2, #255	@ 0xff
 800e60c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e610:	e028      	b.n	800e664 <HAL_UART_Receive+0xd2>
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	689b      	ldr	r3, [r3, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d10d      	bne.n	800e636 <HAL_UART_Receive+0xa4>
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d104      	bne.n	800e62c <HAL_UART_Receive+0x9a>
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	22ff      	movs	r2, #255	@ 0xff
 800e626:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e62a:	e01b      	b.n	800e664 <HAL_UART_Receive+0xd2>
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	227f      	movs	r2, #127	@ 0x7f
 800e630:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e634:	e016      	b.n	800e664 <HAL_UART_Receive+0xd2>
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	689b      	ldr	r3, [r3, #8]
 800e63a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e63e:	d10d      	bne.n	800e65c <HAL_UART_Receive+0xca>
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d104      	bne.n	800e652 <HAL_UART_Receive+0xc0>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	227f      	movs	r2, #127	@ 0x7f
 800e64c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e650:	e008      	b.n	800e664 <HAL_UART_Receive+0xd2>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	223f      	movs	r2, #63	@ 0x3f
 800e656:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800e65a:	e003      	b.n	800e664 <HAL_UART_Receive+0xd2>
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2200      	movs	r2, #0
 800e660:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800e66a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e674:	d108      	bne.n	800e688 <HAL_UART_Receive+0xf6>
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d104      	bne.n	800e688 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	61bb      	str	r3, [r7, #24]
 800e686:	e003      	b.n	800e690 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e68c:	2300      	movs	r3, #0
 800e68e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800e690:	e036      	b.n	800e700 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	697b      	ldr	r3, [r7, #20]
 800e698:	2200      	movs	r2, #0
 800e69a:	2120      	movs	r1, #32
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f000 ff76 	bl	800f58e <UART_WaitOnFlagUntilTimeout>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d005      	beq.n	800e6b4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2220      	movs	r2, #32
 800e6ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800e6b0:	2303      	movs	r3, #3
 800e6b2:	e032      	b.n	800e71a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800e6b4:	69fb      	ldr	r3, [r7, #28]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10c      	bne.n	800e6d4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	8a7b      	ldrh	r3, [r7, #18]
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	b29a      	uxth	r2, r3
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	3302      	adds	r3, #2
 800e6d0:	61bb      	str	r3, [r7, #24]
 800e6d2:	e00c      	b.n	800e6ee <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6da:	b2da      	uxtb	r2, r3
 800e6dc:	8a7b      	ldrh	r3, [r7, #18]
 800e6de:	b2db      	uxtb	r3, r3
 800e6e0:	4013      	ands	r3, r2
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	3b01      	subs	r3, #1
 800e6f8:	b29a      	uxth	r2, r3
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800e706:	b29b      	uxth	r3, r3
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d1c2      	bne.n	800e692 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	2220      	movs	r2, #32
 800e710:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800e714:	2300      	movs	r3, #0
 800e716:	e000      	b.n	800e71a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800e718:	2302      	movs	r3, #2
  }
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3720      	adds	r7, #32
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}

0800e722 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b08a      	sub	sp, #40	@ 0x28
 800e726:	af00      	add	r7, sp, #0
 800e728:	60f8      	str	r0, [r7, #12]
 800e72a:	60b9      	str	r1, [r7, #8]
 800e72c:	4613      	mov	r3, r2
 800e72e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e736:	2b20      	cmp	r3, #32
 800e738:	d132      	bne.n	800e7a0 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d002      	beq.n	800e746 <HAL_UART_Receive_DMA+0x24>
 800e740:	88fb      	ldrh	r3, [r7, #6]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d101      	bne.n	800e74a <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e02b      	b.n	800e7a2 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	685b      	ldr	r3, [r3, #4]
 800e756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d018      	beq.n	800e790 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	e853 3f00 	ldrex	r3, [r3]
 800e76a:	613b      	str	r3, [r7, #16]
   return(result);
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e772:	627b      	str	r3, [r7, #36]	@ 0x24
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	461a      	mov	r2, r3
 800e77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e77c:	623b      	str	r3, [r7, #32]
 800e77e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e780:	69f9      	ldr	r1, [r7, #28]
 800e782:	6a3a      	ldr	r2, [r7, #32]
 800e784:	e841 2300 	strex	r3, r2, [r1]
 800e788:	61bb      	str	r3, [r7, #24]
   return(result);
 800e78a:	69bb      	ldr	r3, [r7, #24]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1e6      	bne.n	800e75e <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e790:	88fb      	ldrh	r3, [r7, #6]
 800e792:	461a      	mov	r2, r3
 800e794:	68b9      	ldr	r1, [r7, #8]
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f000 ff66 	bl	800f668 <UART_Start_Receive_DMA>
 800e79c:	4603      	mov	r3, r0
 800e79e:	e000      	b.n	800e7a2 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800e7a0:	2302      	movs	r3, #2
  }
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3728      	adds	r7, #40	@ 0x28
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b090      	sub	sp, #64	@ 0x40
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e7be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7ca:	2b80      	cmp	r3, #128	@ 0x80
 800e7cc:	d139      	bne.n	800e842 <HAL_UART_DMAStop+0x98>
 800e7ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7d0:	2b21      	cmp	r3, #33	@ 0x21
 800e7d2:	d136      	bne.n	800e842 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	3308      	adds	r3, #8
 800e7da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
 800e7de:	e853 3f00 	ldrex	r3, [r3]
 800e7e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e7ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3308      	adds	r3, #8
 800e7f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e7f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e7f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e7fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e7fc:	e841 2300 	strex	r3, r2, [r1]
 800e800:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e804:	2b00      	cmp	r3, #0
 800e806:	d1e5      	bne.n	800e7d4 <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d015      	beq.n	800e83c <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e814:	4618      	mov	r0, r3
 800e816:	f7f7 fa19 	bl	8005c4c <HAL_DMA_Abort>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00d      	beq.n	800e83c <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e824:	4618      	mov	r0, r3
 800e826:	f7f7 fc2d 	bl	8006084 <HAL_DMA_GetError>
 800e82a:	4603      	mov	r3, r0
 800e82c:	2b20      	cmp	r3, #32
 800e82e:	d105      	bne.n	800e83c <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	2210      	movs	r2, #16
 800e834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e838:	2303      	movs	r3, #3
 800e83a:	e044      	b.n	800e8c6 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 ffb3 	bl	800f7a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e84c:	2b40      	cmp	r3, #64	@ 0x40
 800e84e:	d139      	bne.n	800e8c4 <HAL_UART_DMAStop+0x11a>
 800e850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e852:	2b22      	cmp	r3, #34	@ 0x22
 800e854:	d136      	bne.n	800e8c4 <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	3308      	adds	r3, #8
 800e85c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	e853 3f00 	ldrex	r3, [r3]
 800e864:	60bb      	str	r3, [r7, #8]
   return(result);
 800e866:	68bb      	ldr	r3, [r7, #8]
 800e868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e86c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	3308      	adds	r3, #8
 800e874:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e876:	61ba      	str	r2, [r7, #24]
 800e878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e87a:	6979      	ldr	r1, [r7, #20]
 800e87c:	69ba      	ldr	r2, [r7, #24]
 800e87e:	e841 2300 	strex	r3, r2, [r1]
 800e882:	613b      	str	r3, [r7, #16]
   return(result);
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1e5      	bne.n	800e856 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d015      	beq.n	800e8be <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e896:	4618      	mov	r0, r3
 800e898:	f7f7 f9d8 	bl	8005c4c <HAL_DMA_Abort>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00d      	beq.n	800e8be <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7f7 fbec 	bl	8006084 <HAL_DMA_GetError>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b20      	cmp	r3, #32
 800e8b0:	d105      	bne.n	800e8be <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2210      	movs	r2, #16
 800e8b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e8ba:	2303      	movs	r3, #3
 800e8bc:	e003      	b.n	800e8c6 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 ff98 	bl	800f7f4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e8c4:	2300      	movs	r3, #0
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3740      	adds	r7, #64	@ 0x40
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
	...

0800e8d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b0ba      	sub	sp, #232	@ 0xe8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	69db      	ldr	r3, [r3, #28]
 800e8de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	689b      	ldr	r3, [r3, #8]
 800e8f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e8f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800e8fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 800e8fe:	4013      	ands	r3, r2
 800e900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800e904:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d115      	bne.n	800e938 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e910:	f003 0320 	and.w	r3, r3, #32
 800e914:	2b00      	cmp	r3, #0
 800e916:	d00f      	beq.n	800e938 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e91c:	f003 0320 	and.w	r3, r3, #32
 800e920:	2b00      	cmp	r3, #0
 800e922:	d009      	beq.n	800e938 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 82b1 	beq.w	800ee90 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	4798      	blx	r3
      }
      return;
 800e936:	e2ab      	b.n	800ee90 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f000 8117 	beq.w	800eb70 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800e94e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800e952:	4b85      	ldr	r3, [pc, #532]	@ (800eb68 <HAL_UART_IRQHandler+0x298>)
 800e954:	4013      	ands	r3, r2
 800e956:	2b00      	cmp	r3, #0
 800e958:	f000 810a 	beq.w	800eb70 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e95c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e960:	f003 0301 	and.w	r3, r3, #1
 800e964:	2b00      	cmp	r3, #0
 800e966:	d011      	beq.n	800e98c <HAL_UART_IRQHandler+0xbc>
 800e968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e96c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e970:	2b00      	cmp	r3, #0
 800e972:	d00b      	beq.n	800e98c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	2201      	movs	r2, #1
 800e97a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e982:	f043 0201 	orr.w	r2, r3, #1
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e98c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e990:	f003 0302 	and.w	r3, r3, #2
 800e994:	2b00      	cmp	r3, #0
 800e996:	d011      	beq.n	800e9bc <HAL_UART_IRQHandler+0xec>
 800e998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e99c:	f003 0301 	and.w	r3, r3, #1
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00b      	beq.n	800e9bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2202      	movs	r2, #2
 800e9aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9b2:	f043 0204 	orr.w	r2, r3, #4
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9c0:	f003 0304 	and.w	r3, r3, #4
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d011      	beq.n	800e9ec <HAL_UART_IRQHandler+0x11c>
 800e9c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e9cc:	f003 0301 	and.w	r3, r3, #1
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00b      	beq.n	800e9ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	2204      	movs	r2, #4
 800e9da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e9e2:	f043 0202 	orr.w	r2, r3, #2
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e9ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e9f0:	f003 0308 	and.w	r3, r3, #8
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d017      	beq.n	800ea28 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e9f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e9fc:	f003 0320 	and.w	r3, r3, #32
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d105      	bne.n	800ea10 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ea04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ea08:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d00b      	beq.n	800ea28 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2208      	movs	r2, #8
 800ea16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea1e:	f043 0208 	orr.w	r2, r3, #8
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ea28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d012      	beq.n	800ea5a <HAL_UART_IRQHandler+0x18a>
 800ea34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d00c      	beq.n	800ea5a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ea48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea50:	f043 0220 	orr.w	r2, r3, #32
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f000 8217 	beq.w	800ee94 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ea66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea6a:	f003 0320 	and.w	r3, r3, #32
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d00d      	beq.n	800ea8e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ea72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ea76:	f003 0320 	and.w	r3, r3, #32
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d007      	beq.n	800ea8e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d003      	beq.n	800ea8e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ea94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eaa2:	2b40      	cmp	r3, #64	@ 0x40
 800eaa4:	d005      	beq.n	800eab2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eaa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eaaa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d04f      	beq.n	800eb52 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 fe9e 	bl	800f7f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eac2:	2b40      	cmp	r3, #64	@ 0x40
 800eac4:	d141      	bne.n	800eb4a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	3308      	adds	r3, #8
 800eacc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ead0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ead4:	e853 3f00 	ldrex	r3, [r3]
 800ead8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800eadc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eae4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	3308      	adds	r3, #8
 800eaee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800eaf2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800eaf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800eafe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800eb02:	e841 2300 	strex	r3, r2, [r1]
 800eb06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800eb0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1d9      	bne.n	800eac6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d013      	beq.n	800eb42 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb1e:	4a13      	ldr	r2, [pc, #76]	@ (800eb6c <HAL_UART_IRQHandler+0x29c>)
 800eb20:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb26:	4618      	mov	r0, r3
 800eb28:	f7f7 f900 	bl	8005d2c <HAL_DMA_Abort_IT>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d017      	beq.n	800eb62 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eb36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb40:	e00f      	b.n	800eb62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7f2 fc20 	bl	8001388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb48:	e00b      	b.n	800eb62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7f2 fc1c 	bl	8001388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb50:	e007      	b.n	800eb62 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7f2 fc18 	bl	8001388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800eb60:	e198      	b.n	800ee94 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb62:	bf00      	nop
    return;
 800eb64:	e196      	b.n	800ee94 <HAL_UART_IRQHandler+0x5c4>
 800eb66:	bf00      	nop
 800eb68:	04000120 	.word	0x04000120
 800eb6c:	0800fb0b 	.word	0x0800fb0b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	f040 8166 	bne.w	800ee46 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eb7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb7e:	f003 0310 	and.w	r3, r3, #16
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	f000 815f 	beq.w	800ee46 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eb88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb8c:	f003 0310 	and.w	r3, r3, #16
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f000 8158 	beq.w	800ee46 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	2210      	movs	r2, #16
 800eb9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	689b      	ldr	r3, [r3, #8]
 800eba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eba8:	2b40      	cmp	r3, #64	@ 0x40
 800ebaa:	f040 80d0 	bne.w	800ed4e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ebba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	f000 80ab 	beq.w	800ed1a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ebca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ebce:	429a      	cmp	r2, r3
 800ebd0:	f080 80a3 	bcs.w	800ed1a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ebda:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebe2:	69db      	ldr	r3, [r3, #28]
 800ebe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ebe8:	f000 8086 	beq.w	800ecf8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ebf8:	e853 3f00 	ldrex	r3, [r3]
 800ebfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ec00:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ec04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ec08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	461a      	mov	r2, r3
 800ec12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ec16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ec1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ec22:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ec26:	e841 2300 	strex	r3, r2, [r1]
 800ec2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ec2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1da      	bne.n	800ebec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	3308      	adds	r3, #8
 800ec3c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ec40:	e853 3f00 	ldrex	r3, [r3]
 800ec44:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ec46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec48:	f023 0301 	bic.w	r3, r3, #1
 800ec4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	3308      	adds	r3, #8
 800ec56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ec5a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ec5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec60:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ec62:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ec66:	e841 2300 	strex	r3, r2, [r1]
 800ec6a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ec6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1e1      	bne.n	800ec36 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	3308      	adds	r3, #8
 800ec78:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec7c:	e853 3f00 	ldrex	r3, [r3]
 800ec80:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ec82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3308      	adds	r3, #8
 800ec92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ec96:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ec98:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ec9c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ec9e:	e841 2300 	strex	r3, r2, [r1]
 800eca2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800eca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d1e3      	bne.n	800ec72 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2220      	movs	r2, #32
 800ecae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecc0:	e853 3f00 	ldrex	r3, [r3]
 800ecc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ecc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecc8:	f023 0310 	bic.w	r3, r3, #16
 800eccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ecda:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ecdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ece0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ece2:	e841 2300 	strex	r3, r2, [r1]
 800ece6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ece8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d1e4      	bne.n	800ecb8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f7f6 ffaa 	bl	8005c4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 f8d2 	bl	800eebc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ed18:	e0be      	b.n	800ee98 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ed20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ed24:	429a      	cmp	r2, r3
 800ed26:	f040 80b7 	bne.w	800ee98 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed2e:	69db      	ldr	r3, [r3, #28]
 800ed30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ed34:	f040 80b0 	bne.w	800ee98 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ed44:	4619      	mov	r1, r3
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f8b8 	bl	800eebc <HAL_UARTEx_RxEventCallback>
      return;
 800ed4c:	e0a4      	b.n	800ee98 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ed5a:	b29b      	uxth	r3, r3
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f000 8096 	beq.w	800ee9c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800ed70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	f000 8091 	beq.w	800ee9c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed82:	e853 3f00 	ldrex	r3, [r3]
 800ed86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ed88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ed8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	461a      	mov	r2, r3
 800ed98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ed9c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ed9e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eda0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eda2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eda4:	e841 2300 	strex	r3, r2, [r1]
 800eda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800edaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1e4      	bne.n	800ed7a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	3308      	adds	r3, #8
 800edb6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edba:	e853 3f00 	ldrex	r3, [r3]
 800edbe:	623b      	str	r3, [r7, #32]
   return(result);
 800edc0:	6a3b      	ldr	r3, [r7, #32]
 800edc2:	f023 0301 	bic.w	r3, r3, #1
 800edc6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	3308      	adds	r3, #8
 800edd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800edd4:	633a      	str	r2, [r7, #48]	@ 0x30
 800edd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800edda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eddc:	e841 2300 	strex	r3, r2, [r1]
 800ede0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ede2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1e3      	bne.n	800edb0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2220      	movs	r2, #32
 800edec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2200      	movs	r2, #0
 800edf4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	e853 3f00 	ldrex	r3, [r3]
 800ee08:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	f023 0310 	bic.w	r3, r3, #16
 800ee10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	461a      	mov	r2, r3
 800ee1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ee1e:	61fb      	str	r3, [r7, #28]
 800ee20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee22:	69b9      	ldr	r1, [r7, #24]
 800ee24:	69fa      	ldr	r2, [r7, #28]
 800ee26:	e841 2300 	strex	r3, r2, [r1]
 800ee2a:	617b      	str	r3, [r7, #20]
   return(result);
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d1e4      	bne.n	800edfc <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2202      	movs	r2, #2
 800ee36:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ee38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ee3c:	4619      	mov	r1, r3
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 f83c 	bl	800eebc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ee44:	e02a      	b.n	800ee9c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ee46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00e      	beq.n	800ee70 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ee52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d008      	beq.n	800ee70 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d01c      	beq.n	800eea0 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	4798      	blx	r3
    }
    return;
 800ee6e:	e017      	b.n	800eea0 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ee70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d012      	beq.n	800eea2 <HAL_UART_IRQHandler+0x5d2>
 800ee7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d00c      	beq.n	800eea2 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fe50 	bl	800fb2e <UART_EndTransmit_IT>
    return;
 800ee8e:	e008      	b.n	800eea2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ee90:	bf00      	nop
 800ee92:	e006      	b.n	800eea2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800ee94:	bf00      	nop
 800ee96:	e004      	b.n	800eea2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ee98:	bf00      	nop
 800ee9a:	e002      	b.n	800eea2 <HAL_UART_IRQHandler+0x5d2>
      return;
 800ee9c:	bf00      	nop
 800ee9e:	e000      	b.n	800eea2 <HAL_UART_IRQHandler+0x5d2>
    return;
 800eea0:	bf00      	nop
  }

}
 800eea2:	37e8      	adds	r7, #232	@ 0xe8
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eeb0:	bf00      	nop
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eec8:	bf00      	nop
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b088      	sub	sp, #32
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800eedc:	2300      	movs	r3, #0
 800eede:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	689a      	ldr	r2, [r3, #8]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	691b      	ldr	r3, [r3, #16]
 800eee8:	431a      	orrs	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	695b      	ldr	r3, [r3, #20]
 800eeee:	431a      	orrs	r2, r3
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	69db      	ldr	r3, [r3, #28]
 800eef4:	4313      	orrs	r3, r2
 800eef6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	4ba6      	ldr	r3, [pc, #664]	@ (800f198 <UART_SetConfig+0x2c4>)
 800ef00:	4013      	ands	r3, r2
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	6812      	ldr	r2, [r2, #0]
 800ef06:	6979      	ldr	r1, [r7, #20]
 800ef08:	430b      	orrs	r3, r1
 800ef0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	685b      	ldr	r3, [r3, #4]
 800ef12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	68da      	ldr	r2, [r3, #12]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	430a      	orrs	r2, r1
 800ef20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	699b      	ldr	r3, [r3, #24]
 800ef26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6a1b      	ldr	r3, [r3, #32]
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	697a      	ldr	r2, [r7, #20]
 800ef42:	430a      	orrs	r2, r1
 800ef44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a94      	ldr	r2, [pc, #592]	@ (800f19c <UART_SetConfig+0x2c8>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d120      	bne.n	800ef92 <UART_SetConfig+0xbe>
 800ef50:	4b93      	ldr	r3, [pc, #588]	@ (800f1a0 <UART_SetConfig+0x2cc>)
 800ef52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef56:	f003 0303 	and.w	r3, r3, #3
 800ef5a:	2b03      	cmp	r3, #3
 800ef5c:	d816      	bhi.n	800ef8c <UART_SetConfig+0xb8>
 800ef5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef64 <UART_SetConfig+0x90>)
 800ef60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef64:	0800ef75 	.word	0x0800ef75
 800ef68:	0800ef81 	.word	0x0800ef81
 800ef6c:	0800ef7b 	.word	0x0800ef7b
 800ef70:	0800ef87 	.word	0x0800ef87
 800ef74:	2301      	movs	r3, #1
 800ef76:	77fb      	strb	r3, [r7, #31]
 800ef78:	e150      	b.n	800f21c <UART_SetConfig+0x348>
 800ef7a:	2302      	movs	r3, #2
 800ef7c:	77fb      	strb	r3, [r7, #31]
 800ef7e:	e14d      	b.n	800f21c <UART_SetConfig+0x348>
 800ef80:	2304      	movs	r3, #4
 800ef82:	77fb      	strb	r3, [r7, #31]
 800ef84:	e14a      	b.n	800f21c <UART_SetConfig+0x348>
 800ef86:	2308      	movs	r3, #8
 800ef88:	77fb      	strb	r3, [r7, #31]
 800ef8a:	e147      	b.n	800f21c <UART_SetConfig+0x348>
 800ef8c:	2310      	movs	r3, #16
 800ef8e:	77fb      	strb	r3, [r7, #31]
 800ef90:	e144      	b.n	800f21c <UART_SetConfig+0x348>
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a83      	ldr	r2, [pc, #524]	@ (800f1a4 <UART_SetConfig+0x2d0>)
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d132      	bne.n	800f002 <UART_SetConfig+0x12e>
 800ef9c:	4b80      	ldr	r3, [pc, #512]	@ (800f1a0 <UART_SetConfig+0x2cc>)
 800ef9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efa2:	f003 030c 	and.w	r3, r3, #12
 800efa6:	2b0c      	cmp	r3, #12
 800efa8:	d828      	bhi.n	800effc <UART_SetConfig+0x128>
 800efaa:	a201      	add	r2, pc, #4	@ (adr r2, 800efb0 <UART_SetConfig+0xdc>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efe5 	.word	0x0800efe5
 800efb4:	0800effd 	.word	0x0800effd
 800efb8:	0800effd 	.word	0x0800effd
 800efbc:	0800effd 	.word	0x0800effd
 800efc0:	0800eff1 	.word	0x0800eff1
 800efc4:	0800effd 	.word	0x0800effd
 800efc8:	0800effd 	.word	0x0800effd
 800efcc:	0800effd 	.word	0x0800effd
 800efd0:	0800efeb 	.word	0x0800efeb
 800efd4:	0800effd 	.word	0x0800effd
 800efd8:	0800effd 	.word	0x0800effd
 800efdc:	0800effd 	.word	0x0800effd
 800efe0:	0800eff7 	.word	0x0800eff7
 800efe4:	2300      	movs	r3, #0
 800efe6:	77fb      	strb	r3, [r7, #31]
 800efe8:	e118      	b.n	800f21c <UART_SetConfig+0x348>
 800efea:	2302      	movs	r3, #2
 800efec:	77fb      	strb	r3, [r7, #31]
 800efee:	e115      	b.n	800f21c <UART_SetConfig+0x348>
 800eff0:	2304      	movs	r3, #4
 800eff2:	77fb      	strb	r3, [r7, #31]
 800eff4:	e112      	b.n	800f21c <UART_SetConfig+0x348>
 800eff6:	2308      	movs	r3, #8
 800eff8:	77fb      	strb	r3, [r7, #31]
 800effa:	e10f      	b.n	800f21c <UART_SetConfig+0x348>
 800effc:	2310      	movs	r3, #16
 800effe:	77fb      	strb	r3, [r7, #31]
 800f000:	e10c      	b.n	800f21c <UART_SetConfig+0x348>
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	4a68      	ldr	r2, [pc, #416]	@ (800f1a8 <UART_SetConfig+0x2d4>)
 800f008:	4293      	cmp	r3, r2
 800f00a:	d120      	bne.n	800f04e <UART_SetConfig+0x17a>
 800f00c:	4b64      	ldr	r3, [pc, #400]	@ (800f1a0 <UART_SetConfig+0x2cc>)
 800f00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f012:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f016:	2b30      	cmp	r3, #48	@ 0x30
 800f018:	d013      	beq.n	800f042 <UART_SetConfig+0x16e>
 800f01a:	2b30      	cmp	r3, #48	@ 0x30
 800f01c:	d814      	bhi.n	800f048 <UART_SetConfig+0x174>
 800f01e:	2b20      	cmp	r3, #32
 800f020:	d009      	beq.n	800f036 <UART_SetConfig+0x162>
 800f022:	2b20      	cmp	r3, #32
 800f024:	d810      	bhi.n	800f048 <UART_SetConfig+0x174>
 800f026:	2b00      	cmp	r3, #0
 800f028:	d002      	beq.n	800f030 <UART_SetConfig+0x15c>
 800f02a:	2b10      	cmp	r3, #16
 800f02c:	d006      	beq.n	800f03c <UART_SetConfig+0x168>
 800f02e:	e00b      	b.n	800f048 <UART_SetConfig+0x174>
 800f030:	2300      	movs	r3, #0
 800f032:	77fb      	strb	r3, [r7, #31]
 800f034:	e0f2      	b.n	800f21c <UART_SetConfig+0x348>
 800f036:	2302      	movs	r3, #2
 800f038:	77fb      	strb	r3, [r7, #31]
 800f03a:	e0ef      	b.n	800f21c <UART_SetConfig+0x348>
 800f03c:	2304      	movs	r3, #4
 800f03e:	77fb      	strb	r3, [r7, #31]
 800f040:	e0ec      	b.n	800f21c <UART_SetConfig+0x348>
 800f042:	2308      	movs	r3, #8
 800f044:	77fb      	strb	r3, [r7, #31]
 800f046:	e0e9      	b.n	800f21c <UART_SetConfig+0x348>
 800f048:	2310      	movs	r3, #16
 800f04a:	77fb      	strb	r3, [r7, #31]
 800f04c:	e0e6      	b.n	800f21c <UART_SetConfig+0x348>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	4a56      	ldr	r2, [pc, #344]	@ (800f1ac <UART_SetConfig+0x2d8>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d120      	bne.n	800f09a <UART_SetConfig+0x1c6>
 800f058:	4b51      	ldr	r3, [pc, #324]	@ (800f1a0 <UART_SetConfig+0x2cc>)
 800f05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f05e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f062:	2bc0      	cmp	r3, #192	@ 0xc0
 800f064:	d013      	beq.n	800f08e <UART_SetConfig+0x1ba>
 800f066:	2bc0      	cmp	r3, #192	@ 0xc0
 800f068:	d814      	bhi.n	800f094 <UART_SetConfig+0x1c0>
 800f06a:	2b80      	cmp	r3, #128	@ 0x80
 800f06c:	d009      	beq.n	800f082 <UART_SetConfig+0x1ae>
 800f06e:	2b80      	cmp	r3, #128	@ 0x80
 800f070:	d810      	bhi.n	800f094 <UART_SetConfig+0x1c0>
 800f072:	2b00      	cmp	r3, #0
 800f074:	d002      	beq.n	800f07c <UART_SetConfig+0x1a8>
 800f076:	2b40      	cmp	r3, #64	@ 0x40
 800f078:	d006      	beq.n	800f088 <UART_SetConfig+0x1b4>
 800f07a:	e00b      	b.n	800f094 <UART_SetConfig+0x1c0>
 800f07c:	2300      	movs	r3, #0
 800f07e:	77fb      	strb	r3, [r7, #31]
 800f080:	e0cc      	b.n	800f21c <UART_SetConfig+0x348>
 800f082:	2302      	movs	r3, #2
 800f084:	77fb      	strb	r3, [r7, #31]
 800f086:	e0c9      	b.n	800f21c <UART_SetConfig+0x348>
 800f088:	2304      	movs	r3, #4
 800f08a:	77fb      	strb	r3, [r7, #31]
 800f08c:	e0c6      	b.n	800f21c <UART_SetConfig+0x348>
 800f08e:	2308      	movs	r3, #8
 800f090:	77fb      	strb	r3, [r7, #31]
 800f092:	e0c3      	b.n	800f21c <UART_SetConfig+0x348>
 800f094:	2310      	movs	r3, #16
 800f096:	77fb      	strb	r3, [r7, #31]
 800f098:	e0c0      	b.n	800f21c <UART_SetConfig+0x348>
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4a44      	ldr	r2, [pc, #272]	@ (800f1b0 <UART_SetConfig+0x2dc>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d125      	bne.n	800f0f0 <UART_SetConfig+0x21c>
 800f0a4:	4b3e      	ldr	r3, [pc, #248]	@ (800f1a0 <UART_SetConfig+0x2cc>)
 800f0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f0aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f0ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f0b2:	d017      	beq.n	800f0e4 <UART_SetConfig+0x210>
 800f0b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f0b8:	d817      	bhi.n	800f0ea <UART_SetConfig+0x216>
 800f0ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0be:	d00b      	beq.n	800f0d8 <UART_SetConfig+0x204>
 800f0c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f0c4:	d811      	bhi.n	800f0ea <UART_SetConfig+0x216>
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d003      	beq.n	800f0d2 <UART_SetConfig+0x1fe>
 800f0ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f0ce:	d006      	beq.n	800f0de <UART_SetConfig+0x20a>
 800f0d0:	e00b      	b.n	800f0ea <UART_SetConfig+0x216>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	77fb      	strb	r3, [r7, #31]
 800f0d6:	e0a1      	b.n	800f21c <UART_SetConfig+0x348>
 800f0d8:	2302      	movs	r3, #2
 800f0da:	77fb      	strb	r3, [r7, #31]
 800f0dc:	e09e      	b.n	800f21c <UART_SetConfig+0x348>
 800f0de:	2304      	movs	r3, #4
 800f0e0:	77fb      	strb	r3, [r7, #31]
 800f0e2:	e09b      	b.n	800f21c <UART_SetConfig+0x348>
 800f0e4:	2308      	movs	r3, #8
 800f0e6:	77fb      	strb	r3, [r7, #31]
 800f0e8:	e098      	b.n	800f21c <UART_SetConfig+0x348>
 800f0ea:	2310      	movs	r3, #16
 800f0ec:	77fb      	strb	r3, [r7, #31]
 800f0ee:	e095      	b.n	800f21c <UART_SetConfig+0x348>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a2f      	ldr	r2, [pc, #188]	@ (800f1b4 <UART_SetConfig+0x2e0>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d125      	bne.n	800f146 <UART_SetConfig+0x272>
 800f0fa:	4b29      	ldr	r3, [pc, #164]	@ (800f1a0 <UART_SetConfig+0x2cc>)
 800f0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f100:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f104:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f108:	d017      	beq.n	800f13a <UART_SetConfig+0x266>
 800f10a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f10e:	d817      	bhi.n	800f140 <UART_SetConfig+0x26c>
 800f110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f114:	d00b      	beq.n	800f12e <UART_SetConfig+0x25a>
 800f116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f11a:	d811      	bhi.n	800f140 <UART_SetConfig+0x26c>
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <UART_SetConfig+0x254>
 800f120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f124:	d006      	beq.n	800f134 <UART_SetConfig+0x260>
 800f126:	e00b      	b.n	800f140 <UART_SetConfig+0x26c>
 800f128:	2301      	movs	r3, #1
 800f12a:	77fb      	strb	r3, [r7, #31]
 800f12c:	e076      	b.n	800f21c <UART_SetConfig+0x348>
 800f12e:	2302      	movs	r3, #2
 800f130:	77fb      	strb	r3, [r7, #31]
 800f132:	e073      	b.n	800f21c <UART_SetConfig+0x348>
 800f134:	2304      	movs	r3, #4
 800f136:	77fb      	strb	r3, [r7, #31]
 800f138:	e070      	b.n	800f21c <UART_SetConfig+0x348>
 800f13a:	2308      	movs	r3, #8
 800f13c:	77fb      	strb	r3, [r7, #31]
 800f13e:	e06d      	b.n	800f21c <UART_SetConfig+0x348>
 800f140:	2310      	movs	r3, #16
 800f142:	77fb      	strb	r3, [r7, #31]
 800f144:	e06a      	b.n	800f21c <UART_SetConfig+0x348>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a1b      	ldr	r2, [pc, #108]	@ (800f1b8 <UART_SetConfig+0x2e4>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d138      	bne.n	800f1c2 <UART_SetConfig+0x2ee>
 800f150:	4b13      	ldr	r3, [pc, #76]	@ (800f1a0 <UART_SetConfig+0x2cc>)
 800f152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f156:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f15a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f15e:	d017      	beq.n	800f190 <UART_SetConfig+0x2bc>
 800f160:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f164:	d82a      	bhi.n	800f1bc <UART_SetConfig+0x2e8>
 800f166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f16a:	d00b      	beq.n	800f184 <UART_SetConfig+0x2b0>
 800f16c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f170:	d824      	bhi.n	800f1bc <UART_SetConfig+0x2e8>
 800f172:	2b00      	cmp	r3, #0
 800f174:	d003      	beq.n	800f17e <UART_SetConfig+0x2aa>
 800f176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f17a:	d006      	beq.n	800f18a <UART_SetConfig+0x2b6>
 800f17c:	e01e      	b.n	800f1bc <UART_SetConfig+0x2e8>
 800f17e:	2300      	movs	r3, #0
 800f180:	77fb      	strb	r3, [r7, #31]
 800f182:	e04b      	b.n	800f21c <UART_SetConfig+0x348>
 800f184:	2302      	movs	r3, #2
 800f186:	77fb      	strb	r3, [r7, #31]
 800f188:	e048      	b.n	800f21c <UART_SetConfig+0x348>
 800f18a:	2304      	movs	r3, #4
 800f18c:	77fb      	strb	r3, [r7, #31]
 800f18e:	e045      	b.n	800f21c <UART_SetConfig+0x348>
 800f190:	2308      	movs	r3, #8
 800f192:	77fb      	strb	r3, [r7, #31]
 800f194:	e042      	b.n	800f21c <UART_SetConfig+0x348>
 800f196:	bf00      	nop
 800f198:	efff69f3 	.word	0xefff69f3
 800f19c:	40011000 	.word	0x40011000
 800f1a0:	40023800 	.word	0x40023800
 800f1a4:	40004400 	.word	0x40004400
 800f1a8:	40004800 	.word	0x40004800
 800f1ac:	40004c00 	.word	0x40004c00
 800f1b0:	40005000 	.word	0x40005000
 800f1b4:	40011400 	.word	0x40011400
 800f1b8:	40007800 	.word	0x40007800
 800f1bc:	2310      	movs	r3, #16
 800f1be:	77fb      	strb	r3, [r7, #31]
 800f1c0:	e02c      	b.n	800f21c <UART_SetConfig+0x348>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	4a72      	ldr	r2, [pc, #456]	@ (800f390 <UART_SetConfig+0x4bc>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d125      	bne.n	800f218 <UART_SetConfig+0x344>
 800f1cc:	4b71      	ldr	r3, [pc, #452]	@ (800f394 <UART_SetConfig+0x4c0>)
 800f1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f1d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f1d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f1da:	d017      	beq.n	800f20c <UART_SetConfig+0x338>
 800f1dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f1e0:	d817      	bhi.n	800f212 <UART_SetConfig+0x33e>
 800f1e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1e6:	d00b      	beq.n	800f200 <UART_SetConfig+0x32c>
 800f1e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f1ec:	d811      	bhi.n	800f212 <UART_SetConfig+0x33e>
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d003      	beq.n	800f1fa <UART_SetConfig+0x326>
 800f1f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f1f6:	d006      	beq.n	800f206 <UART_SetConfig+0x332>
 800f1f8:	e00b      	b.n	800f212 <UART_SetConfig+0x33e>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	77fb      	strb	r3, [r7, #31]
 800f1fe:	e00d      	b.n	800f21c <UART_SetConfig+0x348>
 800f200:	2302      	movs	r3, #2
 800f202:	77fb      	strb	r3, [r7, #31]
 800f204:	e00a      	b.n	800f21c <UART_SetConfig+0x348>
 800f206:	2304      	movs	r3, #4
 800f208:	77fb      	strb	r3, [r7, #31]
 800f20a:	e007      	b.n	800f21c <UART_SetConfig+0x348>
 800f20c:	2308      	movs	r3, #8
 800f20e:	77fb      	strb	r3, [r7, #31]
 800f210:	e004      	b.n	800f21c <UART_SetConfig+0x348>
 800f212:	2310      	movs	r3, #16
 800f214:	77fb      	strb	r3, [r7, #31]
 800f216:	e001      	b.n	800f21c <UART_SetConfig+0x348>
 800f218:	2310      	movs	r3, #16
 800f21a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	69db      	ldr	r3, [r3, #28]
 800f220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f224:	d15b      	bne.n	800f2de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f226:	7ffb      	ldrb	r3, [r7, #31]
 800f228:	2b08      	cmp	r3, #8
 800f22a:	d828      	bhi.n	800f27e <UART_SetConfig+0x3aa>
 800f22c:	a201      	add	r2, pc, #4	@ (adr r2, 800f234 <UART_SetConfig+0x360>)
 800f22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f232:	bf00      	nop
 800f234:	0800f259 	.word	0x0800f259
 800f238:	0800f261 	.word	0x0800f261
 800f23c:	0800f269 	.word	0x0800f269
 800f240:	0800f27f 	.word	0x0800f27f
 800f244:	0800f26f 	.word	0x0800f26f
 800f248:	0800f27f 	.word	0x0800f27f
 800f24c:	0800f27f 	.word	0x0800f27f
 800f250:	0800f27f 	.word	0x0800f27f
 800f254:	0800f277 	.word	0x0800f277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f258:	f7fb fa16 	bl	800a688 <HAL_RCC_GetPCLK1Freq>
 800f25c:	61b8      	str	r0, [r7, #24]
        break;
 800f25e:	e013      	b.n	800f288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f260:	f7fb fa26 	bl	800a6b0 <HAL_RCC_GetPCLK2Freq>
 800f264:	61b8      	str	r0, [r7, #24]
        break;
 800f266:	e00f      	b.n	800f288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f268:	4b4b      	ldr	r3, [pc, #300]	@ (800f398 <UART_SetConfig+0x4c4>)
 800f26a:	61bb      	str	r3, [r7, #24]
        break;
 800f26c:	e00c      	b.n	800f288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f26e:	f7fb f939 	bl	800a4e4 <HAL_RCC_GetSysClockFreq>
 800f272:	61b8      	str	r0, [r7, #24]
        break;
 800f274:	e008      	b.n	800f288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f27a:	61bb      	str	r3, [r7, #24]
        break;
 800f27c:	e004      	b.n	800f288 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f27e:	2300      	movs	r3, #0
 800f280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	77bb      	strb	r3, [r7, #30]
        break;
 800f286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f288:	69bb      	ldr	r3, [r7, #24]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d074      	beq.n	800f378 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f28e:	69bb      	ldr	r3, [r7, #24]
 800f290:	005a      	lsls	r2, r3, #1
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	085b      	lsrs	r3, r3, #1
 800f298:	441a      	add	r2, r3
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f2a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	2b0f      	cmp	r3, #15
 800f2a8:	d916      	bls.n	800f2d8 <UART_SetConfig+0x404>
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f2b0:	d212      	bcs.n	800f2d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	b29b      	uxth	r3, r3
 800f2b6:	f023 030f 	bic.w	r3, r3, #15
 800f2ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f2bc:	693b      	ldr	r3, [r7, #16]
 800f2be:	085b      	lsrs	r3, r3, #1
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	f003 0307 	and.w	r3, r3, #7
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	89fb      	ldrh	r3, [r7, #14]
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	89fa      	ldrh	r2, [r7, #14]
 800f2d4:	60da      	str	r2, [r3, #12]
 800f2d6:	e04f      	b.n	800f378 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	77bb      	strb	r3, [r7, #30]
 800f2dc:	e04c      	b.n	800f378 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f2de:	7ffb      	ldrb	r3, [r7, #31]
 800f2e0:	2b08      	cmp	r3, #8
 800f2e2:	d828      	bhi.n	800f336 <UART_SetConfig+0x462>
 800f2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800f2ec <UART_SetConfig+0x418>)
 800f2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ea:	bf00      	nop
 800f2ec:	0800f311 	.word	0x0800f311
 800f2f0:	0800f319 	.word	0x0800f319
 800f2f4:	0800f321 	.word	0x0800f321
 800f2f8:	0800f337 	.word	0x0800f337
 800f2fc:	0800f327 	.word	0x0800f327
 800f300:	0800f337 	.word	0x0800f337
 800f304:	0800f337 	.word	0x0800f337
 800f308:	0800f337 	.word	0x0800f337
 800f30c:	0800f32f 	.word	0x0800f32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f310:	f7fb f9ba 	bl	800a688 <HAL_RCC_GetPCLK1Freq>
 800f314:	61b8      	str	r0, [r7, #24]
        break;
 800f316:	e013      	b.n	800f340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f318:	f7fb f9ca 	bl	800a6b0 <HAL_RCC_GetPCLK2Freq>
 800f31c:	61b8      	str	r0, [r7, #24]
        break;
 800f31e:	e00f      	b.n	800f340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f320:	4b1d      	ldr	r3, [pc, #116]	@ (800f398 <UART_SetConfig+0x4c4>)
 800f322:	61bb      	str	r3, [r7, #24]
        break;
 800f324:	e00c      	b.n	800f340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f326:	f7fb f8dd 	bl	800a4e4 <HAL_RCC_GetSysClockFreq>
 800f32a:	61b8      	str	r0, [r7, #24]
        break;
 800f32c:	e008      	b.n	800f340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f332:	61bb      	str	r3, [r7, #24]
        break;
 800f334:	e004      	b.n	800f340 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f336:	2300      	movs	r3, #0
 800f338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f33a:	2301      	movs	r3, #1
 800f33c:	77bb      	strb	r3, [r7, #30]
        break;
 800f33e:	bf00      	nop
    }

    if (pclk != 0U)
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d018      	beq.n	800f378 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	085a      	lsrs	r2, r3, #1
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	441a      	add	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	fbb2 f3f3 	udiv	r3, r2, r3
 800f358:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f35a:	693b      	ldr	r3, [r7, #16]
 800f35c:	2b0f      	cmp	r3, #15
 800f35e:	d909      	bls.n	800f374 <UART_SetConfig+0x4a0>
 800f360:	693b      	ldr	r3, [r7, #16]
 800f362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f366:	d205      	bcs.n	800f374 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f368:	693b      	ldr	r3, [r7, #16]
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	60da      	str	r2, [r3, #12]
 800f372:	e001      	b.n	800f378 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f374:	2301      	movs	r3, #1
 800f376:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f384:	7fbb      	ldrb	r3, [r7, #30]
}
 800f386:	4618      	mov	r0, r3
 800f388:	3720      	adds	r7, #32
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bd80      	pop	{r7, pc}
 800f38e:	bf00      	nop
 800f390:	40007c00 	.word	0x40007c00
 800f394:	40023800 	.word	0x40023800
 800f398:	00f42400 	.word	0x00f42400

0800f39c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f39c:	b480      	push	{r7}
 800f39e:	b083      	sub	sp, #12
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3a8:	f003 0308 	and.w	r3, r3, #8
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d00a      	beq.n	800f3c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	685b      	ldr	r3, [r3, #4]
 800f3b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	430a      	orrs	r2, r1
 800f3c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3ca:	f003 0301 	and.w	r3, r3, #1
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00a      	beq.n	800f3e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	430a      	orrs	r2, r1
 800f3e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3ec:	f003 0302 	and.w	r3, r3, #2
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00a      	beq.n	800f40a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	430a      	orrs	r2, r1
 800f408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f40e:	f003 0304 	and.w	r3, r3, #4
 800f412:	2b00      	cmp	r3, #0
 800f414:	d00a      	beq.n	800f42c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	430a      	orrs	r2, r1
 800f42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f430:	f003 0310 	and.w	r3, r3, #16
 800f434:	2b00      	cmp	r3, #0
 800f436:	d00a      	beq.n	800f44e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	430a      	orrs	r2, r1
 800f44c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f452:	f003 0320 	and.w	r3, r3, #32
 800f456:	2b00      	cmp	r3, #0
 800f458:	d00a      	beq.n	800f470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	689b      	ldr	r3, [r3, #8]
 800f460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	430a      	orrs	r2, r1
 800f46e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d01a      	beq.n	800f4b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	430a      	orrs	r2, r1
 800f490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f49a:	d10a      	bne.n	800f4b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	430a      	orrs	r2, r1
 800f4b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00a      	beq.n	800f4d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	430a      	orrs	r2, r1
 800f4d2:	605a      	str	r2, [r3, #4]
  }
}
 800f4d4:	bf00      	nop
 800f4d6:	370c      	adds	r7, #12
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b08c      	sub	sp, #48	@ 0x30
 800f4e4:	af02      	add	r7, sp, #8
 800f4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f4f0:	f7f5 fd2a 	bl	8004f48 <HAL_GetTick>
 800f4f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f003 0308 	and.w	r3, r3, #8
 800f500:	2b08      	cmp	r3, #8
 800f502:	d12e      	bne.n	800f562 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f508:	9300      	str	r3, [sp, #0]
 800f50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50c:	2200      	movs	r2, #0
 800f50e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 f83b 	bl	800f58e <UART_WaitOnFlagUntilTimeout>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d021      	beq.n	800f562 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	e853 3f00 	ldrex	r3, [r3]
 800f52a:	60fb      	str	r3, [r7, #12]
   return(result);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f532:	623b      	str	r3, [r7, #32]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	461a      	mov	r2, r3
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	61fb      	str	r3, [r7, #28]
 800f53e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f540:	69b9      	ldr	r1, [r7, #24]
 800f542:	69fa      	ldr	r2, [r7, #28]
 800f544:	e841 2300 	strex	r3, r2, [r1]
 800f548:	617b      	str	r3, [r7, #20]
   return(result);
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d1e6      	bne.n	800f51e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2220      	movs	r2, #32
 800f554:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f55e:	2303      	movs	r3, #3
 800f560:	e011      	b.n	800f586 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	2220      	movs	r2, #32
 800f566:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	2220      	movs	r2, #32
 800f56c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2200      	movs	r2, #0
 800f574:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2200      	movs	r2, #0
 800f57a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	2200      	movs	r2, #0
 800f580:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4618      	mov	r0, r3
 800f588:	3728      	adds	r7, #40	@ 0x28
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}

0800f58e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f58e:	b580      	push	{r7, lr}
 800f590:	b084      	sub	sp, #16
 800f592:	af00      	add	r7, sp, #0
 800f594:	60f8      	str	r0, [r7, #12]
 800f596:	60b9      	str	r1, [r7, #8]
 800f598:	603b      	str	r3, [r7, #0]
 800f59a:	4613      	mov	r3, r2
 800f59c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f59e:	e04f      	b.n	800f640 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5a6:	d04b      	beq.n	800f640 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f5a8:	f7f5 fcce 	bl	8004f48 <HAL_GetTick>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	69ba      	ldr	r2, [r7, #24]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d302      	bcc.n	800f5be <UART_WaitOnFlagUntilTimeout+0x30>
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d101      	bne.n	800f5c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f5be:	2303      	movs	r3, #3
 800f5c0:	e04e      	b.n	800f660 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f003 0304 	and.w	r3, r3, #4
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d037      	beq.n	800f640 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	2b80      	cmp	r3, #128	@ 0x80
 800f5d4:	d034      	beq.n	800f640 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	2b40      	cmp	r3, #64	@ 0x40
 800f5da:	d031      	beq.n	800f640 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	69db      	ldr	r3, [r3, #28]
 800f5e2:	f003 0308 	and.w	r3, r3, #8
 800f5e6:	2b08      	cmp	r3, #8
 800f5e8:	d110      	bne.n	800f60c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2208      	movs	r2, #8
 800f5f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f000 f8fe 	bl	800f7f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2208      	movs	r2, #8
 800f5fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2200      	movs	r2, #0
 800f604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f608:	2301      	movs	r3, #1
 800f60a:	e029      	b.n	800f660 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	69db      	ldr	r3, [r3, #28]
 800f612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f61a:	d111      	bne.n	800f640 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f624:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f000 f8e4 	bl	800f7f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2220      	movs	r2, #32
 800f630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2200      	movs	r2, #0
 800f638:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f63c:	2303      	movs	r3, #3
 800f63e:	e00f      	b.n	800f660 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	69da      	ldr	r2, [r3, #28]
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	4013      	ands	r3, r2
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	bf0c      	ite	eq
 800f650:	2301      	moveq	r3, #1
 800f652:	2300      	movne	r3, #0
 800f654:	b2db      	uxtb	r3, r3
 800f656:	461a      	mov	r2, r3
 800f658:	79fb      	ldrb	r3, [r7, #7]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d0a0      	beq.n	800f5a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f65e:	2300      	movs	r3, #0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b096      	sub	sp, #88	@ 0x58
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	4613      	mov	r3, r2
 800f674:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	68ba      	ldr	r2, [r7, #8]
 800f67a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	88fa      	ldrh	r2, [r7, #6]
 800f680:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	2200      	movs	r2, #0
 800f688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2222      	movs	r2, #34	@ 0x22
 800f690:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d028      	beq.n	800f6ee <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6a0:	4a3e      	ldr	r2, [pc, #248]	@ (800f79c <UART_Start_Receive_DMA+0x134>)
 800f6a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6a8:	4a3d      	ldr	r2, [pc, #244]	@ (800f7a0 <UART_Start_Receive_DMA+0x138>)
 800f6aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6b0:	4a3c      	ldr	r2, [pc, #240]	@ (800f7a4 <UART_Start_Receive_DMA+0x13c>)
 800f6b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	3324      	adds	r3, #36	@ 0x24
 800f6c6:	4619      	mov	r1, r3
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	88fb      	ldrh	r3, [r7, #6]
 800f6d0:	f7f6 fa5c 	bl	8005b8c <HAL_DMA_Start_IT>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d009      	beq.n	800f6ee <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	2210      	movs	r2, #16
 800f6de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	2220      	movs	r2, #32
 800f6e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	e051      	b.n	800f792 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	691b      	ldr	r3, [r3, #16]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d018      	beq.n	800f728 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6fe:	e853 3f00 	ldrex	r3, [r3]
 800f702:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f706:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f70a:	657b      	str	r3, [r7, #84]	@ 0x54
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	461a      	mov	r2, r3
 800f712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f714:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f716:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f718:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f71a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f71c:	e841 2300 	strex	r3, r2, [r1]
 800f720:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800f722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1e6      	bne.n	800f6f6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	3308      	adds	r3, #8
 800f72e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f732:	e853 3f00 	ldrex	r3, [r3]
 800f736:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f73a:	f043 0301 	orr.w	r3, r3, #1
 800f73e:	653b      	str	r3, [r7, #80]	@ 0x50
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	3308      	adds	r3, #8
 800f746:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f748:	637a      	str	r2, [r7, #52]	@ 0x34
 800f74a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f74c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f74e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f750:	e841 2300 	strex	r3, r2, [r1]
 800f754:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800f756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d1e5      	bne.n	800f728 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	3308      	adds	r3, #8
 800f762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	e853 3f00 	ldrex	r3, [r3]
 800f76a:	613b      	str	r3, [r7, #16]
   return(result);
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f772:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	3308      	adds	r3, #8
 800f77a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f77c:	623a      	str	r2, [r7, #32]
 800f77e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f780:	69f9      	ldr	r1, [r7, #28]
 800f782:	6a3a      	ldr	r2, [r7, #32]
 800f784:	e841 2300 	strex	r3, r2, [r1]
 800f788:	61bb      	str	r3, [r7, #24]
   return(result);
 800f78a:	69bb      	ldr	r3, [r7, #24]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d1e5      	bne.n	800f75c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3758      	adds	r7, #88	@ 0x58
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	0800f8bd 	.word	0x0800f8bd
 800f7a0:	0800fa1b 	.word	0x0800fa1b
 800f7a4:	0800fa8d 	.word	0x0800fa8d

0800f7a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b089      	sub	sp, #36	@ 0x24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	e853 3f00 	ldrex	r3, [r3]
 800f7bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f7c4:	61fb      	str	r3, [r7, #28]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	69fb      	ldr	r3, [r7, #28]
 800f7ce:	61bb      	str	r3, [r7, #24]
 800f7d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d2:	6979      	ldr	r1, [r7, #20]
 800f7d4:	69ba      	ldr	r2, [r7, #24]
 800f7d6:	e841 2300 	strex	r3, r2, [r1]
 800f7da:	613b      	str	r3, [r7, #16]
   return(result);
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d1e6      	bne.n	800f7b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2220      	movs	r2, #32
 800f7e6:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800f7e8:	bf00      	nop
 800f7ea:	3724      	adds	r7, #36	@ 0x24
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f2:	4770      	bx	lr

0800f7f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b095      	sub	sp, #84	@ 0x54
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f804:	e853 3f00 	ldrex	r3, [r3]
 800f808:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f810:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	461a      	mov	r2, r3
 800f818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f81a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f81c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f81e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f820:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f822:	e841 2300 	strex	r3, r2, [r1]
 800f826:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d1e6      	bne.n	800f7fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	3308      	adds	r3, #8
 800f834:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	e853 3f00 	ldrex	r3, [r3]
 800f83c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	f023 0301 	bic.w	r3, r3, #1
 800f844:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	3308      	adds	r3, #8
 800f84c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f84e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f850:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f856:	e841 2300 	strex	r3, r2, [r1]
 800f85a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d1e5      	bne.n	800f82e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f866:	2b01      	cmp	r3, #1
 800f868:	d118      	bne.n	800f89c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	e853 3f00 	ldrex	r3, [r3]
 800f876:	60bb      	str	r3, [r7, #8]
   return(result);
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	f023 0310 	bic.w	r3, r3, #16
 800f87e:	647b      	str	r3, [r7, #68]	@ 0x44
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	461a      	mov	r2, r3
 800f886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f888:	61bb      	str	r3, [r7, #24]
 800f88a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f88c:	6979      	ldr	r1, [r7, #20]
 800f88e:	69ba      	ldr	r2, [r7, #24]
 800f890:	e841 2300 	strex	r3, r2, [r1]
 800f894:	613b      	str	r3, [r7, #16]
   return(result);
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d1e6      	bne.n	800f86a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2220      	movs	r2, #32
 800f8a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f8b0:	bf00      	nop
 800f8b2:	3754      	adds	r7, #84	@ 0x54
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr

0800f8bc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b09c      	sub	sp, #112	@ 0x70
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	69db      	ldr	r3, [r3, #28]
 800f8ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f8d2:	d071      	beq.n	800f9b8 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f8d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f8dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8e4:	e853 3f00 	ldrex	r3, [r3]
 800f8e8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f8ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f8f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f8f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f8fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800f8fc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f900:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f902:	e841 2300 	strex	r3, r2, [r1]
 800f906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d1e6      	bne.n	800f8dc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f90e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	3308      	adds	r3, #8
 800f914:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f918:	e853 3f00 	ldrex	r3, [r3]
 800f91c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f920:	f023 0301 	bic.w	r3, r3, #1
 800f924:	667b      	str	r3, [r7, #100]	@ 0x64
 800f926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3308      	adds	r3, #8
 800f92c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f92e:	643a      	str	r2, [r7, #64]	@ 0x40
 800f930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f936:	e841 2300 	strex	r3, r2, [r1]
 800f93a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1e5      	bne.n	800f90e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	3308      	adds	r3, #8
 800f948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94a:	6a3b      	ldr	r3, [r7, #32]
 800f94c:	e853 3f00 	ldrex	r3, [r3]
 800f950:	61fb      	str	r3, [r7, #28]
   return(result);
 800f952:	69fb      	ldr	r3, [r7, #28]
 800f954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f958:	663b      	str	r3, [r7, #96]	@ 0x60
 800f95a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	3308      	adds	r3, #8
 800f960:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f96a:	e841 2300 	strex	r3, r2, [r1]
 800f96e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1e5      	bne.n	800f942 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f978:	2220      	movs	r2, #32
 800f97a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f97e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f982:	2b01      	cmp	r3, #1
 800f984:	d118      	bne.n	800f9b8 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	e853 3f00 	ldrex	r3, [r3]
 800f992:	60bb      	str	r3, [r7, #8]
   return(result);
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	f023 0310 	bic.w	r3, r3, #16
 800f99a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f99c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9a4:	61bb      	str	r3, [r7, #24]
 800f9a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a8:	6979      	ldr	r1, [r7, #20]
 800f9aa:	69ba      	ldr	r2, [r7, #24]
 800f9ac:	e841 2300 	strex	r3, r2, [r1]
 800f9b0:	613b      	str	r3, [r7, #16]
   return(result);
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d1e6      	bne.n	800f986 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f9b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d122      	bne.n	800fa0c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800f9c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800f9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f9de:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d204      	bcs.n	800f9f0 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800f9e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9e8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800f9ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f9f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9f2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800f9f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f9f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	1ad3      	subs	r3, r2, r3
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	4619      	mov	r1, r3
 800fa04:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fa06:	f7ff fa59 	bl	800eebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa0a:	e002      	b.n	800fa12 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800fa0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fa0e:	f7f1 fc81 	bl	8001314 <HAL_UART_RxCpltCallback>
}
 800fa12:	bf00      	nop
 800fa14:	3770      	adds	r7, #112	@ 0x70
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa26:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa32:	2b01      	cmp	r3, #1
 800fa34:	d123      	bne.n	800fa7e <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa3c:	085b      	lsrs	r3, r3, #1
 800fa3e:	b29a      	uxth	r2, r3
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa54:	897a      	ldrh	r2, [r7, #10]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d803      	bhi.n	800fa62 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	897a      	ldrh	r2, [r7, #10]
 800fa5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	1ad3      	subs	r3, r2, r3
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	4619      	mov	r1, r3
 800fa76:	68f8      	ldr	r0, [r7, #12]
 800fa78:	f7ff fa20 	bl	800eebc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fa7c:	e002      	b.n	800fa84 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800fa7e:	68f8      	ldr	r0, [r7, #12]
 800fa80:	f7f1 fc6c 	bl	800135c <HAL_UART_RxHalfCpltCallback>
}
 800fa84:	bf00      	nop
 800fa86:	3710      	adds	r7, #16
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}

0800fa8c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b086      	sub	sp, #24
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa98:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa9e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faa6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	689b      	ldr	r3, [r3, #8]
 800faae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fab2:	2b80      	cmp	r3, #128	@ 0x80
 800fab4:	d109      	bne.n	800faca <UART_DMAError+0x3e>
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	2b21      	cmp	r3, #33	@ 0x21
 800faba:	d106      	bne.n	800faca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800fabc:	697b      	ldr	r3, [r7, #20]
 800fabe:	2200      	movs	r2, #0
 800fac0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800fac4:	6978      	ldr	r0, [r7, #20]
 800fac6:	f7ff fe6f 	bl	800f7a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	689b      	ldr	r3, [r3, #8]
 800fad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fad4:	2b40      	cmp	r3, #64	@ 0x40
 800fad6:	d109      	bne.n	800faec <UART_DMAError+0x60>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2b22      	cmp	r3, #34	@ 0x22
 800fadc:	d106      	bne.n	800faec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800fae6:	6978      	ldr	r0, [r7, #20]
 800fae8:	f7ff fe84 	bl	800f7f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800faf2:	f043 0210 	orr.w	r2, r3, #16
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fafc:	6978      	ldr	r0, [r7, #20]
 800fafe:	f7f1 fc43 	bl	8001388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb02:	bf00      	nop
 800fb04:	3718      	adds	r7, #24
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b084      	sub	sp, #16
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f7f1 fc31 	bl	8001388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb26:	bf00      	nop
 800fb28:	3710      	adds	r7, #16
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fb2e:	b580      	push	{r7, lr}
 800fb30:	b088      	sub	sp, #32
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	e853 3f00 	ldrex	r3, [r3]
 800fb42:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb4a:	61fb      	str	r3, [r7, #28]
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	461a      	mov	r2, r3
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	61bb      	str	r3, [r7, #24]
 800fb56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb58:	6979      	ldr	r1, [r7, #20]
 800fb5a:	69ba      	ldr	r2, [r7, #24]
 800fb5c:	e841 2300 	strex	r3, r2, [r1]
 800fb60:	613b      	str	r3, [r7, #16]
   return(result);
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d1e6      	bne.n	800fb36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2220      	movs	r2, #32
 800fb6c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb74:	6878      	ldr	r0, [r7, #4]
 800fb76:	f7ff f997 	bl	800eea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb7a:	bf00      	nop
 800fb7c:	3720      	adds	r7, #32
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d121      	bne.n	800fbda <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	4b27      	ldr	r3, [pc, #156]	@ (800fc38 <FMC_SDRAM_Init+0xb4>)
 800fb9c:	4013      	ands	r3, r2
 800fb9e:	683a      	ldr	r2, [r7, #0]
 800fba0:	6851      	ldr	r1, [r2, #4]
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	6892      	ldr	r2, [r2, #8]
 800fba6:	4311      	orrs	r1, r2
 800fba8:	683a      	ldr	r2, [r7, #0]
 800fbaa:	68d2      	ldr	r2, [r2, #12]
 800fbac:	4311      	orrs	r1, r2
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	6912      	ldr	r2, [r2, #16]
 800fbb2:	4311      	orrs	r1, r2
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	6952      	ldr	r2, [r2, #20]
 800fbb8:	4311      	orrs	r1, r2
 800fbba:	683a      	ldr	r2, [r7, #0]
 800fbbc:	6992      	ldr	r2, [r2, #24]
 800fbbe:	4311      	orrs	r1, r2
 800fbc0:	683a      	ldr	r2, [r7, #0]
 800fbc2:	69d2      	ldr	r2, [r2, #28]
 800fbc4:	4311      	orrs	r1, r2
 800fbc6:	683a      	ldr	r2, [r7, #0]
 800fbc8:	6a12      	ldr	r2, [r2, #32]
 800fbca:	4311      	orrs	r1, r2
 800fbcc:	683a      	ldr	r2, [r7, #0]
 800fbce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800fbd0:	430a      	orrs	r2, r1
 800fbd2:	431a      	orrs	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	601a      	str	r2, [r3, #0]
 800fbd8:	e026      	b.n	800fc28 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	69d9      	ldr	r1, [r3, #28]
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	6a1b      	ldr	r3, [r3, #32]
 800fbea:	4319      	orrs	r1, r3
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbf0:	430b      	orrs	r3, r1
 800fbf2:	431a      	orrs	r2, r3
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	4b0e      	ldr	r3, [pc, #56]	@ (800fc38 <FMC_SDRAM_Init+0xb4>)
 800fbfe:	4013      	ands	r3, r2
 800fc00:	683a      	ldr	r2, [r7, #0]
 800fc02:	6851      	ldr	r1, [r2, #4]
 800fc04:	683a      	ldr	r2, [r7, #0]
 800fc06:	6892      	ldr	r2, [r2, #8]
 800fc08:	4311      	orrs	r1, r2
 800fc0a:	683a      	ldr	r2, [r7, #0]
 800fc0c:	68d2      	ldr	r2, [r2, #12]
 800fc0e:	4311      	orrs	r1, r2
 800fc10:	683a      	ldr	r2, [r7, #0]
 800fc12:	6912      	ldr	r2, [r2, #16]
 800fc14:	4311      	orrs	r1, r2
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	6952      	ldr	r2, [r2, #20]
 800fc1a:	4311      	orrs	r1, r2
 800fc1c:	683a      	ldr	r2, [r7, #0]
 800fc1e:	6992      	ldr	r2, [r2, #24]
 800fc20:	430a      	orrs	r2, r1
 800fc22:	431a      	orrs	r2, r3
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	370c      	adds	r7, #12
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc34:	4770      	bx	lr
 800fc36:	bf00      	nop
 800fc38:	ffff8000 	.word	0xffff8000

0800fc3c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	60f8      	str	r0, [r7, #12]
 800fc44:	60b9      	str	r1, [r7, #8]
 800fc46:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d128      	bne.n	800fca0 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	1e59      	subs	r1, r3, #1
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	3b01      	subs	r3, #1
 800fc62:	011b      	lsls	r3, r3, #4
 800fc64:	4319      	orrs	r1, r3
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	3b01      	subs	r3, #1
 800fc6c:	021b      	lsls	r3, r3, #8
 800fc6e:	4319      	orrs	r1, r3
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	68db      	ldr	r3, [r3, #12]
 800fc74:	3b01      	subs	r3, #1
 800fc76:	031b      	lsls	r3, r3, #12
 800fc78:	4319      	orrs	r1, r3
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	691b      	ldr	r3, [r3, #16]
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	041b      	lsls	r3, r3, #16
 800fc82:	4319      	orrs	r1, r3
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	695b      	ldr	r3, [r3, #20]
 800fc88:	3b01      	subs	r3, #1
 800fc8a:	051b      	lsls	r3, r3, #20
 800fc8c:	4319      	orrs	r1, r3
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	699b      	ldr	r3, [r3, #24]
 800fc92:	3b01      	subs	r3, #1
 800fc94:	061b      	lsls	r3, r3, #24
 800fc96:	430b      	orrs	r3, r1
 800fc98:	431a      	orrs	r2, r3
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	609a      	str	r2, [r3, #8]
 800fc9e:	e02d      	b.n	800fcfc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	689a      	ldr	r2, [r3, #8]
 800fca4:	4b19      	ldr	r3, [pc, #100]	@ (800fd0c <FMC_SDRAM_Timing_Init+0xd0>)
 800fca6:	4013      	ands	r3, r2
 800fca8:	68ba      	ldr	r2, [r7, #8]
 800fcaa:	68d2      	ldr	r2, [r2, #12]
 800fcac:	3a01      	subs	r2, #1
 800fcae:	0311      	lsls	r1, r2, #12
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	6952      	ldr	r2, [r2, #20]
 800fcb4:	3a01      	subs	r2, #1
 800fcb6:	0512      	lsls	r2, r2, #20
 800fcb8:	430a      	orrs	r2, r1
 800fcba:	431a      	orrs	r2, r3
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	1e59      	subs	r1, r3, #1
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	3b01      	subs	r3, #1
 800fcd4:	011b      	lsls	r3, r3, #4
 800fcd6:	4319      	orrs	r1, r3
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	689b      	ldr	r3, [r3, #8]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	021b      	lsls	r3, r3, #8
 800fce0:	4319      	orrs	r1, r3
 800fce2:	68bb      	ldr	r3, [r7, #8]
 800fce4:	691b      	ldr	r3, [r3, #16]
 800fce6:	3b01      	subs	r3, #1
 800fce8:	041b      	lsls	r3, r3, #16
 800fcea:	4319      	orrs	r1, r3
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	3b01      	subs	r3, #1
 800fcf2:	061b      	lsls	r3, r3, #24
 800fcf4:	430b      	orrs	r3, r1
 800fcf6:	431a      	orrs	r2, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800fcfc:	2300      	movs	r3, #0
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3714      	adds	r7, #20
 800fd02:	46bd      	mov	sp, r7
 800fd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd08:	4770      	bx	lr
 800fd0a:	bf00      	nop
 800fd0c:	ff0f0fff 	.word	0xff0f0fff

0800fd10 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800fd10:	b084      	sub	sp, #16
 800fd12:	b480      	push	{r7}
 800fd14:	b085      	sub	sp, #20
 800fd16:	af00      	add	r7, sp, #0
 800fd18:	6078      	str	r0, [r7, #4]
 800fd1a:	f107 001c 	add.w	r0, r7, #28
 800fd1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fd22:	2300      	movs	r3, #0
 800fd24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fd26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fd28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fd2a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800fd2e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800fd32:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800fd36:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800fd3a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	685a      	ldr	r2, [r3, #4]
 800fd46:	4b07      	ldr	r3, [pc, #28]	@ (800fd64 <SDMMC_Init+0x54>)
 800fd48:	4013      	ands	r3, r2
 800fd4a:	68fa      	ldr	r2, [r7, #12]
 800fd4c:	431a      	orrs	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fd52:	2300      	movs	r3, #0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3714      	adds	r7, #20
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	b004      	add	sp, #16
 800fd60:	4770      	bx	lr
 800fd62:	bf00      	nop
 800fd64:	ffff8100 	.word	0xffff8100

0800fd68 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	370c      	adds	r7, #12
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr

0800fd82 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800fd82:	b480      	push	{r7}
 800fd84:	b083      	sub	sp, #12
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2203      	movs	r2, #3
 800fd8e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	370c      	adds	r7, #12
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr

0800fd9e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800fd9e:	b480      	push	{r7}
 800fda0:	b083      	sub	sp, #12
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	f003 0303 	and.w	r3, r3, #3
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	370c      	adds	r7, #12
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
	...

0800fdbc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fdd6:	683b      	ldr	r3, [r7, #0]
 800fdd8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fdda:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fde0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fde6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fde8:	68fa      	ldr	r2, [r7, #12]
 800fdea:	4313      	orrs	r3, r2
 800fdec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	68da      	ldr	r2, [r3, #12]
 800fdf2:	4b06      	ldr	r3, [pc, #24]	@ (800fe0c <SDMMC_SendCommand+0x50>)
 800fdf4:	4013      	ands	r3, r2
 800fdf6:	68fa      	ldr	r2, [r7, #12]
 800fdf8:	431a      	orrs	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3714      	adds	r7, #20
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr
 800fe0c:	fffff000 	.word	0xfffff000

0800fe10 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	691b      	ldr	r3, [r3, #16]
 800fe1c:	b2db      	uxtb	r3, r3
}
 800fe1e:	4618      	mov	r0, r3
 800fe20:	370c      	adds	r7, #12
 800fe22:	46bd      	mov	sp, r7
 800fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe28:	4770      	bx	lr

0800fe2a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800fe2a:	b480      	push	{r7}
 800fe2c:	b085      	sub	sp, #20
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	6078      	str	r0, [r7, #4]
 800fe32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	3314      	adds	r3, #20
 800fe38:	461a      	mov	r2, r3
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	681b      	ldr	r3, [r3, #0]
}  
 800fe44:	4618      	mov	r0, r3
 800fe46:	3714      	adds	r7, #20
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4e:	4770      	bx	lr

0800fe50 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800fe50:	b480      	push	{r7}
 800fe52:	b085      	sub	sp, #20
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	685a      	ldr	r2, [r3, #4]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fe76:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fe7c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fe7e:	683b      	ldr	r3, [r7, #0]
 800fe80:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fe82:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe8e:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	431a      	orrs	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800fe9a:	2300      	movs	r3, #0

}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3714      	adds	r7, #20
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr

0800fea8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b088      	sub	sp, #32
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800feb6:	2310      	movs	r3, #16
 800feb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800feba:	2340      	movs	r3, #64	@ 0x40
 800febc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800febe:	2300      	movs	r3, #0
 800fec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fec8:	f107 0308 	add.w	r3, r7, #8
 800fecc:	4619      	mov	r1, r3
 800fece:	6878      	ldr	r0, [r7, #4]
 800fed0:	f7ff ff74 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800fed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fed8:	2110      	movs	r1, #16
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 fa1a 	bl	8010314 <SDMMC_GetCmdResp1>
 800fee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fee2:	69fb      	ldr	r3, [r7, #28]
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3720      	adds	r7, #32
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b088      	sub	sp, #32
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
 800fef4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fefa:	2311      	movs	r3, #17
 800fefc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fefe:	2340      	movs	r3, #64	@ 0x40
 800ff00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff02:	2300      	movs	r3, #0
 800ff04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff0c:	f107 0308 	add.w	r3, r7, #8
 800ff10:	4619      	mov	r1, r3
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7ff ff52 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ff18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff1c:	2111      	movs	r1, #17
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f000 f9f8 	bl	8010314 <SDMMC_GetCmdResp1>
 800ff24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff26:	69fb      	ldr	r3, [r7, #28]
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3720      	adds	r7, #32
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}

0800ff30 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b088      	sub	sp, #32
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
 800ff38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ff3e:	2312      	movs	r3, #18
 800ff40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff42:	2340      	movs	r3, #64	@ 0x40
 800ff44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff46:	2300      	movs	r3, #0
 800ff48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff50:	f107 0308 	add.w	r3, r7, #8
 800ff54:	4619      	mov	r1, r3
 800ff56:	6878      	ldr	r0, [r7, #4]
 800ff58:	f7ff ff30 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ff5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff60:	2112      	movs	r1, #18
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 f9d6 	bl	8010314 <SDMMC_GetCmdResp1>
 800ff68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff6a:	69fb      	ldr	r3, [r7, #28]
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3720      	adds	r7, #32
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b088      	sub	sp, #32
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ff82:	2318      	movs	r3, #24
 800ff84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ff86:	2340      	movs	r3, #64	@ 0x40
 800ff88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ff8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ff92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ff94:	f107 0308 	add.w	r3, r7, #8
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6878      	ldr	r0, [r7, #4]
 800ff9c:	f7ff ff0e 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ffa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffa4:	2118      	movs	r1, #24
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 f9b4 	bl	8010314 <SDMMC_GetCmdResp1>
 800ffac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffae:	69fb      	ldr	r3, [r7, #28]
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3720      	adds	r7, #32
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b088      	sub	sp, #32
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ffc6:	2319      	movs	r3, #25
 800ffc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ffca:	2340      	movs	r3, #64	@ 0x40
 800ffcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ffd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ffd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ffd8:	f107 0308 	add.w	r3, r7, #8
 800ffdc:	4619      	mov	r1, r3
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f7ff feec 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ffe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffe8:	2119      	movs	r1, #25
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 f992 	bl	8010314 <SDMMC_GetCmdResp1>
 800fff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fff2:	69fb      	ldr	r3, [r7, #28]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3720      	adds	r7, #32
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b088      	sub	sp, #32
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010004:	2300      	movs	r3, #0
 8010006:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010008:	230c      	movs	r3, #12
 801000a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801000c:	2340      	movs	r3, #64	@ 0x40
 801000e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010010:	2300      	movs	r3, #0
 8010012:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010018:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801001a:	f107 0308 	add.w	r3, r7, #8
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f7ff fecb 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010026:	4a05      	ldr	r2, [pc, #20]	@ (801003c <SDMMC_CmdStopTransfer+0x40>)
 8010028:	210c      	movs	r1, #12
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 f972 	bl	8010314 <SDMMC_GetCmdResp1>
 8010030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010032:	69fb      	ldr	r3, [r7, #28]
}
 8010034:	4618      	mov	r0, r3
 8010036:	3720      	adds	r7, #32
 8010038:	46bd      	mov	sp, r7
 801003a:	bd80      	pop	{r7, pc}
 801003c:	05f5e100 	.word	0x05f5e100

08010040 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b08a      	sub	sp, #40	@ 0x28
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801004c:	683b      	ldr	r3, [r7, #0]
 801004e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010050:	2307      	movs	r3, #7
 8010052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010054:	2340      	movs	r3, #64	@ 0x40
 8010056:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010058:	2300      	movs	r3, #0
 801005a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801005c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010060:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010062:	f107 0310 	add.w	r3, r7, #16
 8010066:	4619      	mov	r1, r3
 8010068:	68f8      	ldr	r0, [r7, #12]
 801006a:	f7ff fea7 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801006e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010072:	2107      	movs	r1, #7
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f000 f94d 	bl	8010314 <SDMMC_GetCmdResp1>
 801007a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 801007c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801007e:	4618      	mov	r0, r3
 8010080:	3728      	adds	r7, #40	@ 0x28
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b088      	sub	sp, #32
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801008e:	2300      	movs	r3, #0
 8010090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010092:	2300      	movs	r3, #0
 8010094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010096:	2300      	movs	r3, #0
 8010098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801009a:	2300      	movs	r3, #0
 801009c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801009e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100a4:	f107 0308 	add.w	r3, r7, #8
 80100a8:	4619      	mov	r1, r3
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7ff fe86 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f000 fb67 	bl	8010784 <SDMMC_GetCmdError>
 80100b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100b8:	69fb      	ldr	r3, [r7, #28]
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3720      	adds	r7, #32
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}

080100c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80100c2:	b580      	push	{r7, lr}
 80100c4:	b088      	sub	sp, #32
 80100c6:	af00      	add	r7, sp, #0
 80100c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80100ca:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80100ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80100d0:	2308      	movs	r3, #8
 80100d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80100d4:	2340      	movs	r3, #64	@ 0x40
 80100d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80100d8:	2300      	movs	r3, #0
 80100da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80100dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80100e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80100e2:	f107 0308 	add.w	r3, r7, #8
 80100e6:	4619      	mov	r1, r3
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7ff fe67 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 fafa 	bl	80106e8 <SDMMC_GetCmdResp7>
 80100f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100f6:	69fb      	ldr	r3, [r7, #28]
}
 80100f8:	4618      	mov	r0, r3
 80100fa:	3720      	adds	r7, #32
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b088      	sub	sp, #32
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801010e:	2337      	movs	r3, #55	@ 0x37
 8010110:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010112:	2340      	movs	r3, #64	@ 0x40
 8010114:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010116:	2300      	movs	r3, #0
 8010118:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801011a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801011e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010120:	f107 0308 	add.w	r3, r7, #8
 8010124:	4619      	mov	r1, r3
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f7ff fe48 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801012c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010130:	2137      	movs	r1, #55	@ 0x37
 8010132:	6878      	ldr	r0, [r7, #4]
 8010134:	f000 f8ee 	bl	8010314 <SDMMC_GetCmdResp1>
 8010138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801013a:	69fb      	ldr	r3, [r7, #28]
}
 801013c:	4618      	mov	r0, r3
 801013e:	3720      	adds	r7, #32
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b088      	sub	sp, #32
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801014e:	683a      	ldr	r2, [r7, #0]
 8010150:	4b0d      	ldr	r3, [pc, #52]	@ (8010188 <SDMMC_CmdAppOperCommand+0x44>)
 8010152:	4313      	orrs	r3, r2
 8010154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010156:	2329      	movs	r3, #41	@ 0x29
 8010158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801015a:	2340      	movs	r3, #64	@ 0x40
 801015c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801015e:	2300      	movs	r3, #0
 8010160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010162:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010166:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010168:	f107 0308 	add.w	r3, r7, #8
 801016c:	4619      	mov	r1, r3
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7ff fe24 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010174:	6878      	ldr	r0, [r7, #4]
 8010176:	f000 fa03 	bl	8010580 <SDMMC_GetCmdResp3>
 801017a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801017c:	69fb      	ldr	r3, [r7, #28]
}
 801017e:	4618      	mov	r0, r3
 8010180:	3720      	adds	r7, #32
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	80100000 	.word	0x80100000

0801018c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801019a:	2306      	movs	r3, #6
 801019c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801019e:	2340      	movs	r3, #64	@ 0x40
 80101a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101a2:	2300      	movs	r3, #0
 80101a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101ac:	f107 0308 	add.w	r3, r7, #8
 80101b0:	4619      	mov	r1, r3
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f7ff fe02 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80101b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101bc:	2106      	movs	r1, #6
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 f8a8 	bl	8010314 <SDMMC_GetCmdResp1>
 80101c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101c6:	69fb      	ldr	r3, [r7, #28]
}
 80101c8:	4618      	mov	r0, r3
 80101ca:	3720      	adds	r7, #32
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b088      	sub	sp, #32
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80101d8:	2300      	movs	r3, #0
 80101da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80101dc:	2333      	movs	r3, #51	@ 0x33
 80101de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80101e0:	2340      	movs	r3, #64	@ 0x40
 80101e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80101e4:	2300      	movs	r3, #0
 80101e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80101e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80101ee:	f107 0308 	add.w	r3, r7, #8
 80101f2:	4619      	mov	r1, r3
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f7ff fde1 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80101fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101fe:	2133      	movs	r1, #51	@ 0x33
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 f887 	bl	8010314 <SDMMC_GetCmdResp1>
 8010206:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010208:	69fb      	ldr	r3, [r7, #28]
}
 801020a:	4618      	mov	r0, r3
 801020c:	3720      	adds	r7, #32
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010212:	b580      	push	{r7, lr}
 8010214:	b088      	sub	sp, #32
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801021a:	2300      	movs	r3, #0
 801021c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801021e:	2302      	movs	r3, #2
 8010220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010222:	23c0      	movs	r3, #192	@ 0xc0
 8010224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010226:	2300      	movs	r3, #0
 8010228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801022a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801022e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010230:	f107 0308 	add.w	r3, r7, #8
 8010234:	4619      	mov	r1, r3
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f7ff fdc0 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f000 f957 	bl	80104f0 <SDMMC_GetCmdResp2>
 8010242:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010244:	69fb      	ldr	r3, [r7, #28]
}
 8010246:	4618      	mov	r0, r3
 8010248:	3720      	adds	r7, #32
 801024a:	46bd      	mov	sp, r7
 801024c:	bd80      	pop	{r7, pc}

0801024e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b088      	sub	sp, #32
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
 8010256:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801025c:	2309      	movs	r3, #9
 801025e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010260:	23c0      	movs	r3, #192	@ 0xc0
 8010262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010264:	2300      	movs	r3, #0
 8010266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801026c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801026e:	f107 0308 	add.w	r3, r7, #8
 8010272:	4619      	mov	r1, r3
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7ff fda1 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 f938 	bl	80104f0 <SDMMC_GetCmdResp2>
 8010280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010282:	69fb      	ldr	r3, [r7, #28]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3720      	adds	r7, #32
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b088      	sub	sp, #32
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
 8010294:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010296:	2300      	movs	r3, #0
 8010298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801029a:	2303      	movs	r3, #3
 801029c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801029e:	2340      	movs	r3, #64	@ 0x40
 80102a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102a2:	2300      	movs	r3, #0
 80102a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102ac:	f107 0308 	add.w	r3, r7, #8
 80102b0:	4619      	mov	r1, r3
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f7ff fd82 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80102b8:	683a      	ldr	r2, [r7, #0]
 80102ba:	2103      	movs	r1, #3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 f99d 	bl	80105fc <SDMMC_GetCmdResp6>
 80102c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102c4:	69fb      	ldr	r3, [r7, #28]
}
 80102c6:	4618      	mov	r0, r3
 80102c8:	3720      	adds	r7, #32
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd80      	pop	{r7, pc}

080102ce <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80102ce:	b580      	push	{r7, lr}
 80102d0:	b088      	sub	sp, #32
 80102d2:	af00      	add	r7, sp, #0
 80102d4:	6078      	str	r0, [r7, #4]
 80102d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80102dc:	230d      	movs	r3, #13
 80102de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102e0:	2340      	movs	r3, #64	@ 0x40
 80102e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102e4:	2300      	movs	r3, #0
 80102e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102ee:	f107 0308 	add.w	r3, r7, #8
 80102f2:	4619      	mov	r1, r3
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7ff fd61 	bl	800fdbc <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80102fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102fe:	210d      	movs	r1, #13
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 f807 	bl	8010314 <SDMMC_GetCmdResp1>
 8010306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010308:	69fb      	ldr	r3, [r7, #28]
}
 801030a:	4618      	mov	r0, r3
 801030c:	3720      	adds	r7, #32
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
	...

08010314 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	460b      	mov	r3, r1
 801031e:	607a      	str	r2, [r7, #4]
 8010320:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010322:	4b70      	ldr	r3, [pc, #448]	@ (80104e4 <SDMMC_GetCmdResp1+0x1d0>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4a70      	ldr	r2, [pc, #448]	@ (80104e8 <SDMMC_GetCmdResp1+0x1d4>)
 8010328:	fba2 2303 	umull	r2, r3, r2, r3
 801032c:	0a5a      	lsrs	r2, r3, #9
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	fb02 f303 	mul.w	r3, r2, r3
 8010334:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010336:	69fb      	ldr	r3, [r7, #28]
 8010338:	1e5a      	subs	r2, r3, #1
 801033a:	61fa      	str	r2, [r7, #28]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d102      	bne.n	8010346 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010340:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010344:	e0c9      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801034a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801034c:	69bb      	ldr	r3, [r7, #24]
 801034e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010352:	2b00      	cmp	r3, #0
 8010354:	d0ef      	beq.n	8010336 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801035c:	2b00      	cmp	r3, #0
 801035e:	d1ea      	bne.n	8010336 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010364:	f003 0304 	and.w	r3, r3, #4
 8010368:	2b00      	cmp	r3, #0
 801036a:	d004      	beq.n	8010376 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2204      	movs	r2, #4
 8010370:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010372:	2304      	movs	r3, #4
 8010374:	e0b1      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801037a:	f003 0301 	and.w	r3, r3, #1
 801037e:	2b00      	cmp	r3, #0
 8010380:	d004      	beq.n	801038c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	2201      	movs	r2, #1
 8010386:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010388:	2301      	movs	r3, #1
 801038a:	e0a6      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	22c5      	movs	r2, #197	@ 0xc5
 8010390:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010392:	68f8      	ldr	r0, [r7, #12]
 8010394:	f7ff fd3c 	bl	800fe10 <SDMMC_GetCommandResponse>
 8010398:	4603      	mov	r3, r0
 801039a:	461a      	mov	r2, r3
 801039c:	7afb      	ldrb	r3, [r7, #11]
 801039e:	4293      	cmp	r3, r2
 80103a0:	d001      	beq.n	80103a6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80103a2:	2301      	movs	r3, #1
 80103a4:	e099      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80103a6:	2100      	movs	r1, #0
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f7ff fd3e 	bl	800fe2a <SDMMC_GetResponse>
 80103ae:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80103b0:	697a      	ldr	r2, [r7, #20]
 80103b2:	4b4e      	ldr	r3, [pc, #312]	@ (80104ec <SDMMC_GetCmdResp1+0x1d8>)
 80103b4:	4013      	ands	r3, r2
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d101      	bne.n	80103be <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80103ba:	2300      	movs	r3, #0
 80103bc:	e08d      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	da02      	bge.n	80103ca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80103c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80103c8:	e087      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d001      	beq.n	80103d8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80103d4:	2340      	movs	r3, #64	@ 0x40
 80103d6:	e080      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80103d8:	697b      	ldr	r3, [r7, #20]
 80103da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d001      	beq.n	80103e6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80103e2:	2380      	movs	r3, #128	@ 0x80
 80103e4:	e079      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d002      	beq.n	80103f6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80103f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80103f4:	e071      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d002      	beq.n	8010406 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010400:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010404:	e069      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010406:	697b      	ldr	r3, [r7, #20]
 8010408:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801040c:	2b00      	cmp	r3, #0
 801040e:	d002      	beq.n	8010416 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010414:	e061      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801041c:	2b00      	cmp	r3, #0
 801041e:	d002      	beq.n	8010426 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010420:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010424:	e059      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801042c:	2b00      	cmp	r3, #0
 801042e:	d002      	beq.n	8010436 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010434:	e051      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801043c:	2b00      	cmp	r3, #0
 801043e:	d002      	beq.n	8010446 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010444:	e049      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010446:	697b      	ldr	r3, [r7, #20]
 8010448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010450:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010454:	e041      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010460:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010464:	e039      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801046c:	2b00      	cmp	r3, #0
 801046e:	d002      	beq.n	8010476 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010470:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010474:	e031      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801047c:	2b00      	cmp	r3, #0
 801047e:	d002      	beq.n	8010486 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010480:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010484:	e029      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801048c:	2b00      	cmp	r3, #0
 801048e:	d002      	beq.n	8010496 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010490:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010494:	e021      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010496:	697b      	ldr	r3, [r7, #20]
 8010498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801049c:	2b00      	cmp	r3, #0
 801049e:	d002      	beq.n	80104a6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80104a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80104a4:	e019      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d002      	beq.n	80104b6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80104b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80104b4:	e011      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d002      	beq.n	80104c6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80104c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80104c4:	e009      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	f003 0308 	and.w	r3, r3, #8
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d002      	beq.n	80104d6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80104d0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80104d4:	e001      	b.n	80104da <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80104d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3720      	adds	r7, #32
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	20000000 	.word	0x20000000
 80104e8:	10624dd3 	.word	0x10624dd3
 80104ec:	fdffe008 	.word	0xfdffe008

080104f0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80104f8:	4b1f      	ldr	r3, [pc, #124]	@ (8010578 <SDMMC_GetCmdResp2+0x88>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4a1f      	ldr	r2, [pc, #124]	@ (801057c <SDMMC_GetCmdResp2+0x8c>)
 80104fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010502:	0a5b      	lsrs	r3, r3, #9
 8010504:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010508:	fb02 f303 	mul.w	r3, r2, r3
 801050c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	1e5a      	subs	r2, r3, #1
 8010512:	60fa      	str	r2, [r7, #12]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d102      	bne.n	801051e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010518:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801051c:	e026      	b.n	801056c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010522:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801052a:	2b00      	cmp	r3, #0
 801052c:	d0ef      	beq.n	801050e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1ea      	bne.n	801050e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801053c:	f003 0304 	and.w	r3, r3, #4
 8010540:	2b00      	cmp	r3, #0
 8010542:	d004      	beq.n	801054e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2204      	movs	r2, #4
 8010548:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801054a:	2304      	movs	r3, #4
 801054c:	e00e      	b.n	801056c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010552:	f003 0301 	and.w	r3, r3, #1
 8010556:	2b00      	cmp	r3, #0
 8010558:	d004      	beq.n	8010564 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2201      	movs	r2, #1
 801055e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010560:	2301      	movs	r3, #1
 8010562:	e003      	b.n	801056c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	22c5      	movs	r2, #197	@ 0xc5
 8010568:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 801056a:	2300      	movs	r3, #0
}
 801056c:	4618      	mov	r0, r3
 801056e:	3714      	adds	r7, #20
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr
 8010578:	20000000 	.word	0x20000000
 801057c:	10624dd3 	.word	0x10624dd3

08010580 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010588:	4b1a      	ldr	r3, [pc, #104]	@ (80105f4 <SDMMC_GetCmdResp3+0x74>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4a1a      	ldr	r2, [pc, #104]	@ (80105f8 <SDMMC_GetCmdResp3+0x78>)
 801058e:	fba2 2303 	umull	r2, r3, r2, r3
 8010592:	0a5b      	lsrs	r3, r3, #9
 8010594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010598:	fb02 f303 	mul.w	r3, r2, r3
 801059c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	1e5a      	subs	r2, r3, #1
 80105a2:	60fa      	str	r2, [r7, #12]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d102      	bne.n	80105ae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80105ac:	e01b      	b.n	80105e6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d0ef      	beq.n	801059e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d1ea      	bne.n	801059e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80105cc:	f003 0304 	and.w	r3, r3, #4
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d004      	beq.n	80105de <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2204      	movs	r2, #4
 80105d8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105da:	2304      	movs	r3, #4
 80105dc:	e003      	b.n	80105e6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	22c5      	movs	r2, #197	@ 0xc5
 80105e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80105e4:	2300      	movs	r3, #0
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	3714      	adds	r7, #20
 80105ea:	46bd      	mov	sp, r7
 80105ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f0:	4770      	bx	lr
 80105f2:	bf00      	nop
 80105f4:	20000000 	.word	0x20000000
 80105f8:	10624dd3 	.word	0x10624dd3

080105fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b088      	sub	sp, #32
 8010600:	af00      	add	r7, sp, #0
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	460b      	mov	r3, r1
 8010606:	607a      	str	r2, [r7, #4]
 8010608:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801060a:	4b35      	ldr	r3, [pc, #212]	@ (80106e0 <SDMMC_GetCmdResp6+0xe4>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	4a35      	ldr	r2, [pc, #212]	@ (80106e4 <SDMMC_GetCmdResp6+0xe8>)
 8010610:	fba2 2303 	umull	r2, r3, r2, r3
 8010614:	0a5b      	lsrs	r3, r3, #9
 8010616:	f241 3288 	movw	r2, #5000	@ 0x1388
 801061a:	fb02 f303 	mul.w	r3, r2, r3
 801061e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010620:	69fb      	ldr	r3, [r7, #28]
 8010622:	1e5a      	subs	r2, r3, #1
 8010624:	61fa      	str	r2, [r7, #28]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d102      	bne.n	8010630 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801062a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801062e:	e052      	b.n	80106d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010634:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010636:	69bb      	ldr	r3, [r7, #24]
 8010638:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801063c:	2b00      	cmp	r3, #0
 801063e:	d0ef      	beq.n	8010620 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010646:	2b00      	cmp	r3, #0
 8010648:	d1ea      	bne.n	8010620 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801064e:	f003 0304 	and.w	r3, r3, #4
 8010652:	2b00      	cmp	r3, #0
 8010654:	d004      	beq.n	8010660 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2204      	movs	r2, #4
 801065a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801065c:	2304      	movs	r3, #4
 801065e:	e03a      	b.n	80106d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010664:	f003 0301 	and.w	r3, r3, #1
 8010668:	2b00      	cmp	r3, #0
 801066a:	d004      	beq.n	8010676 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2201      	movs	r2, #1
 8010670:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010672:	2301      	movs	r3, #1
 8010674:	e02f      	b.n	80106d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	f7ff fbca 	bl	800fe10 <SDMMC_GetCommandResponse>
 801067c:	4603      	mov	r3, r0
 801067e:	461a      	mov	r2, r3
 8010680:	7afb      	ldrb	r3, [r7, #11]
 8010682:	4293      	cmp	r3, r2
 8010684:	d001      	beq.n	801068a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010686:	2301      	movs	r3, #1
 8010688:	e025      	b.n	80106d6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	22c5      	movs	r2, #197	@ 0xc5
 801068e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010690:	2100      	movs	r1, #0
 8010692:	68f8      	ldr	r0, [r7, #12]
 8010694:	f7ff fbc9 	bl	800fe2a <SDMMC_GetResponse>
 8010698:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d106      	bne.n	80106b2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	0c1b      	lsrs	r3, r3, #16
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80106ae:	2300      	movs	r3, #0
 80106b0:	e011      	b.n	80106d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d002      	beq.n	80106c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80106bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80106c0:	e009      	b.n	80106d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d002      	beq.n	80106d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80106cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80106d0:	e001      	b.n	80106d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80106d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3720      	adds	r7, #32
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	20000000 	.word	0x20000000
 80106e4:	10624dd3 	.word	0x10624dd3

080106e8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106f0:	4b22      	ldr	r3, [pc, #136]	@ (801077c <SDMMC_GetCmdResp7+0x94>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	4a22      	ldr	r2, [pc, #136]	@ (8010780 <SDMMC_GetCmdResp7+0x98>)
 80106f6:	fba2 2303 	umull	r2, r3, r2, r3
 80106fa:	0a5b      	lsrs	r3, r3, #9
 80106fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010700:	fb02 f303 	mul.w	r3, r2, r3
 8010704:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	1e5a      	subs	r2, r3, #1
 801070a:	60fa      	str	r2, [r7, #12]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d102      	bne.n	8010716 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010710:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010714:	e02c      	b.n	8010770 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801071a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010722:	2b00      	cmp	r3, #0
 8010724:	d0ef      	beq.n	8010706 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801072c:	2b00      	cmp	r3, #0
 801072e:	d1ea      	bne.n	8010706 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010734:	f003 0304 	and.w	r3, r3, #4
 8010738:	2b00      	cmp	r3, #0
 801073a:	d004      	beq.n	8010746 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2204      	movs	r2, #4
 8010740:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010742:	2304      	movs	r3, #4
 8010744:	e014      	b.n	8010770 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801074a:	f003 0301 	and.w	r3, r3, #1
 801074e:	2b00      	cmp	r3, #0
 8010750:	d004      	beq.n	801075c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2201      	movs	r2, #1
 8010756:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010758:	2301      	movs	r3, #1
 801075a:	e009      	b.n	8010770 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010764:	2b00      	cmp	r3, #0
 8010766:	d002      	beq.n	801076e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2240      	movs	r2, #64	@ 0x40
 801076c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801076e:	2300      	movs	r3, #0
  
}
 8010770:	4618      	mov	r0, r3
 8010772:	3714      	adds	r7, #20
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr
 801077c:	20000000 	.word	0x20000000
 8010780:	10624dd3 	.word	0x10624dd3

08010784 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801078c:	4b11      	ldr	r3, [pc, #68]	@ (80107d4 <SDMMC_GetCmdError+0x50>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4a11      	ldr	r2, [pc, #68]	@ (80107d8 <SDMMC_GetCmdError+0x54>)
 8010792:	fba2 2303 	umull	r2, r3, r2, r3
 8010796:	0a5b      	lsrs	r3, r3, #9
 8010798:	f241 3288 	movw	r2, #5000	@ 0x1388
 801079c:	fb02 f303 	mul.w	r3, r2, r3
 80107a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	1e5a      	subs	r2, r3, #1
 80107a6:	60fa      	str	r2, [r7, #12]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d102      	bne.n	80107b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80107ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80107b0:	e009      	b.n	80107c6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d0f1      	beq.n	80107a2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	22c5      	movs	r2, #197	@ 0xc5
 80107c2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80107c4:	2300      	movs	r3, #0
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3714      	adds	r7, #20
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop
 80107d4:	20000000 	.word	0x20000000
 80107d8:	10624dd3 	.word	0x10624dd3

080107dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80107dc:	b084      	sub	sp, #16
 80107de:	b580      	push	{r7, lr}
 80107e0:	b084      	sub	sp, #16
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
 80107e6:	f107 001c 	add.w	r0, r7, #28
 80107ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80107ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d121      	bne.n	801083a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	68da      	ldr	r2, [r3, #12]
 8010806:	4b21      	ldr	r3, [pc, #132]	@ (801088c <USB_CoreInit+0xb0>)
 8010808:	4013      	ands	r3, r2
 801080a:	687a      	ldr	r2, [r7, #4]
 801080c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801081a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801081e:	2b01      	cmp	r3, #1
 8010820:	d105      	bne.n	801082e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f000 f9d4 	bl	8010bdc <USB_CoreReset>
 8010834:	4603      	mov	r3, r0
 8010836:	73fb      	strb	r3, [r7, #15]
 8010838:	e010      	b.n	801085c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	68db      	ldr	r3, [r3, #12]
 801083e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 f9c8 	bl	8010bdc <USB_CoreReset>
 801084c:	4603      	mov	r3, r0
 801084e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010854:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 801085c:	7fbb      	ldrb	r3, [r7, #30]
 801085e:	2b01      	cmp	r3, #1
 8010860:	d10b      	bne.n	801087a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	689b      	ldr	r3, [r3, #8]
 8010866:	f043 0206 	orr.w	r2, r3, #6
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	689b      	ldr	r3, [r3, #8]
 8010872:	f043 0220 	orr.w	r2, r3, #32
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801087a:	7bfb      	ldrb	r3, [r7, #15]
}
 801087c:	4618      	mov	r0, r3
 801087e:	3710      	adds	r7, #16
 8010880:	46bd      	mov	sp, r7
 8010882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010886:	b004      	add	sp, #16
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	ffbdffbf 	.word	0xffbdffbf

08010890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	f043 0201 	orr.w	r2, r3, #1
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr

080108b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80108b2:	b480      	push	{r7}
 80108b4:	b083      	sub	sp, #12
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	689b      	ldr	r3, [r3, #8]
 80108be:	f023 0201 	bic.w	r2, r3, #1
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80108c6:	2300      	movs	r3, #0
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	370c      	adds	r7, #12
 80108cc:	46bd      	mov	sp, r7
 80108ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d2:	4770      	bx	lr

080108d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	460b      	mov	r3, r1
 80108de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80108e0:	2300      	movs	r3, #0
 80108e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	68db      	ldr	r3, [r3, #12]
 80108e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80108f0:	78fb      	ldrb	r3, [r7, #3]
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d115      	bne.n	8010922 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	68db      	ldr	r3, [r3, #12]
 80108fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010902:	200a      	movs	r0, #10
 8010904:	f7f4 fb2c 	bl	8004f60 <HAL_Delay>
      ms += 10U;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	330a      	adds	r3, #10
 801090c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 801090e:	6878      	ldr	r0, [r7, #4]
 8010910:	f000 f956 	bl	8010bc0 <USB_GetMode>
 8010914:	4603      	mov	r3, r0
 8010916:	2b01      	cmp	r3, #1
 8010918:	d01e      	beq.n	8010958 <USB_SetCurrentMode+0x84>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2bc7      	cmp	r3, #199	@ 0xc7
 801091e:	d9f0      	bls.n	8010902 <USB_SetCurrentMode+0x2e>
 8010920:	e01a      	b.n	8010958 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010922:	78fb      	ldrb	r3, [r7, #3]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d115      	bne.n	8010954 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010934:	200a      	movs	r0, #10
 8010936:	f7f4 fb13 	bl	8004f60 <HAL_Delay>
      ms += 10U;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	330a      	adds	r3, #10
 801093e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f000 f93d 	bl	8010bc0 <USB_GetMode>
 8010946:	4603      	mov	r3, r0
 8010948:	2b00      	cmp	r3, #0
 801094a:	d005      	beq.n	8010958 <USB_SetCurrentMode+0x84>
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	2bc7      	cmp	r3, #199	@ 0xc7
 8010950:	d9f0      	bls.n	8010934 <USB_SetCurrentMode+0x60>
 8010952:	e001      	b.n	8010958 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010954:	2301      	movs	r3, #1
 8010956:	e005      	b.n	8010964 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2bc8      	cmp	r3, #200	@ 0xc8
 801095c:	d101      	bne.n	8010962 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801095e:	2301      	movs	r3, #1
 8010960:	e000      	b.n	8010964 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801096c:	b480      	push	{r7}
 801096e:	b085      	sub	sp, #20
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010976:	2300      	movs	r3, #0
 8010978:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	3301      	adds	r3, #1
 801097e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010986:	d901      	bls.n	801098c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010988:	2303      	movs	r3, #3
 801098a:	e01b      	b.n	80109c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	691b      	ldr	r3, [r3, #16]
 8010990:	2b00      	cmp	r3, #0
 8010992:	daf2      	bge.n	801097a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010994:	2300      	movs	r3, #0
 8010996:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010998:	683b      	ldr	r3, [r7, #0]
 801099a:	019b      	lsls	r3, r3, #6
 801099c:	f043 0220 	orr.w	r2, r3, #32
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	3301      	adds	r3, #1
 80109a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109b0:	d901      	bls.n	80109b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80109b2:	2303      	movs	r3, #3
 80109b4:	e006      	b.n	80109c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	691b      	ldr	r3, [r3, #16]
 80109ba:	f003 0320 	and.w	r3, r3, #32
 80109be:	2b20      	cmp	r3, #32
 80109c0:	d0f0      	beq.n	80109a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80109c2:	2300      	movs	r3, #0
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3714      	adds	r7, #20
 80109c8:	46bd      	mov	sp, r7
 80109ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ce:	4770      	bx	lr

080109d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b085      	sub	sp, #20
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80109d8:	2300      	movs	r3, #0
 80109da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	3301      	adds	r3, #1
 80109e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109e8:	d901      	bls.n	80109ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80109ea:	2303      	movs	r3, #3
 80109ec:	e018      	b.n	8010a20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	691b      	ldr	r3, [r3, #16]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	daf2      	bge.n	80109dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80109f6:	2300      	movs	r3, #0
 80109f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	2210      	movs	r2, #16
 80109fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	3301      	adds	r3, #1
 8010a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a0c:	d901      	bls.n	8010a12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010a0e:	2303      	movs	r3, #3
 8010a10:	e006      	b.n	8010a20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	f003 0310 	and.w	r3, r3, #16
 8010a1a:	2b10      	cmp	r3, #16
 8010a1c:	d0f0      	beq.n	8010a00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010a1e:	2300      	movs	r3, #0
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3714      	adds	r7, #20
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b089      	sub	sp, #36	@ 0x24
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	4611      	mov	r1, r2
 8010a38:	461a      	mov	r2, r3
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	71fb      	strb	r3, [r7, #7]
 8010a3e:	4613      	mov	r3, r2
 8010a40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010a46:	68bb      	ldr	r3, [r7, #8]
 8010a48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d123      	bne.n	8010a9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010a52:	88bb      	ldrh	r3, [r7, #4]
 8010a54:	3303      	adds	r3, #3
 8010a56:	089b      	lsrs	r3, r3, #2
 8010a58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	61bb      	str	r3, [r7, #24]
 8010a5e:	e018      	b.n	8010a92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010a60:	79fb      	ldrb	r3, [r7, #7]
 8010a62:	031a      	lsls	r2, r3, #12
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	4413      	add	r3, r2
 8010a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010a74:	69fb      	ldr	r3, [r7, #28]
 8010a76:	3301      	adds	r3, #1
 8010a78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	3301      	adds	r3, #1
 8010a7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	3301      	adds	r3, #1
 8010a84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a86:	69fb      	ldr	r3, [r7, #28]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010a8c:	69bb      	ldr	r3, [r7, #24]
 8010a8e:	3301      	adds	r3, #1
 8010a90:	61bb      	str	r3, [r7, #24]
 8010a92:	69ba      	ldr	r2, [r7, #24]
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d3e2      	bcc.n	8010a60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010a9a:	2300      	movs	r3, #0
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3724      	adds	r7, #36	@ 0x24
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b08b      	sub	sp, #44	@ 0x2c
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	60f8      	str	r0, [r7, #12]
 8010ab0:	60b9      	str	r1, [r7, #8]
 8010ab2:	4613      	mov	r3, r2
 8010ab4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010abe:	88fb      	ldrh	r3, [r7, #6]
 8010ac0:	089b      	lsrs	r3, r3, #2
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010ac6:	88fb      	ldrh	r3, [r7, #6]
 8010ac8:	f003 0303 	and.w	r3, r3, #3
 8010acc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010ace:	2300      	movs	r3, #0
 8010ad0:	623b      	str	r3, [r7, #32]
 8010ad2:	e014      	b.n	8010afe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010ad4:	69bb      	ldr	r3, [r7, #24]
 8010ad6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ade:	601a      	str	r2, [r3, #0]
    pDest++;
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae2:	3301      	adds	r3, #1
 8010ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae8:	3301      	adds	r3, #1
 8010aea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aee:	3301      	adds	r3, #1
 8010af0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010af4:	3301      	adds	r3, #1
 8010af6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010af8:	6a3b      	ldr	r3, [r7, #32]
 8010afa:	3301      	adds	r3, #1
 8010afc:	623b      	str	r3, [r7, #32]
 8010afe:	6a3a      	ldr	r2, [r7, #32]
 8010b00:	697b      	ldr	r3, [r7, #20]
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d3e6      	bcc.n	8010ad4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010b06:	8bfb      	ldrh	r3, [r7, #30]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d01e      	beq.n	8010b4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010b10:	69bb      	ldr	r3, [r7, #24]
 8010b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010b16:	461a      	mov	r2, r3
 8010b18:	f107 0310 	add.w	r3, r7, #16
 8010b1c:	6812      	ldr	r2, [r2, #0]
 8010b1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010b20:	693a      	ldr	r2, [r7, #16]
 8010b22:	6a3b      	ldr	r3, [r7, #32]
 8010b24:	b2db      	uxtb	r3, r3
 8010b26:	00db      	lsls	r3, r3, #3
 8010b28:	fa22 f303 	lsr.w	r3, r2, r3
 8010b2c:	b2da      	uxtb	r2, r3
 8010b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b30:	701a      	strb	r2, [r3, #0]
      i++;
 8010b32:	6a3b      	ldr	r3, [r7, #32]
 8010b34:	3301      	adds	r3, #1
 8010b36:	623b      	str	r3, [r7, #32]
      pDest++;
 8010b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b3a:	3301      	adds	r3, #1
 8010b3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8010b3e:	8bfb      	ldrh	r3, [r7, #30]
 8010b40:	3b01      	subs	r3, #1
 8010b42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010b44:	8bfb      	ldrh	r3, [r7, #30]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d1ea      	bne.n	8010b20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	372c      	adds	r7, #44	@ 0x2c
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b085      	sub	sp, #20
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	695b      	ldr	r3, [r3, #20]
 8010b64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	699b      	ldr	r3, [r3, #24]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010b70:	68fb      	ldr	r3, [r7, #12]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3714      	adds	r7, #20
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr

08010b7e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8010b7e:	b480      	push	{r7}
 8010b80:	b085      	sub	sp, #20
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
 8010b86:	460b      	mov	r3, r1
 8010b88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8010b8e:	78fb      	ldrb	r3, [r7, #3]
 8010b90:	015a      	lsls	r2, r3, #5
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	4413      	add	r3, r2
 8010b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010b9a:	689b      	ldr	r3, [r3, #8]
 8010b9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8010b9e:	78fb      	ldrb	r3, [r7, #3]
 8010ba0:	015a      	lsls	r2, r3, #5
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	4413      	add	r3, r2
 8010ba6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	68ba      	ldr	r2, [r7, #8]
 8010bae:	4013      	ands	r3, r2
 8010bb0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010bb2:	68bb      	ldr	r3, [r7, #8]
}
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	3714      	adds	r7, #20
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbe:	4770      	bx	lr

08010bc0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b083      	sub	sp, #12
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	695b      	ldr	r3, [r3, #20]
 8010bcc:	f003 0301 	and.w	r3, r3, #1
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	370c      	adds	r7, #12
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr

08010bdc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b085      	sub	sp, #20
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010be4:	2300      	movs	r3, #0
 8010be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	3301      	adds	r3, #1
 8010bec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010bf4:	d901      	bls.n	8010bfa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010bf6:	2303      	movs	r3, #3
 8010bf8:	e022      	b.n	8010c40 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	691b      	ldr	r3, [r3, #16]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	daf2      	bge.n	8010be8 <USB_CoreReset+0xc>

  count = 10U;
 8010c02:	230a      	movs	r3, #10
 8010c04:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8010c06:	e002      	b.n	8010c0e <USB_CoreReset+0x32>
  {
    count--;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d1f9      	bne.n	8010c08 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	691b      	ldr	r3, [r3, #16]
 8010c18:	f043 0201 	orr.w	r2, r3, #1
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	3301      	adds	r3, #1
 8010c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010c2c:	d901      	bls.n	8010c32 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8010c2e:	2303      	movs	r3, #3
 8010c30:	e006      	b.n	8010c40 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	691b      	ldr	r3, [r3, #16]
 8010c36:	f003 0301 	and.w	r3, r3, #1
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d0f0      	beq.n	8010c20 <USB_CoreReset+0x44>

  return HAL_OK;
 8010c3e:	2300      	movs	r3, #0
}
 8010c40:	4618      	mov	r0, r3
 8010c42:	3714      	adds	r7, #20
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010c4c:	b084      	sub	sp, #16
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b086      	sub	sp, #24
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
 8010c56:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010c5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	2300      	movs	r3, #0
 8010c70:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010c76:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d119      	bne.n	8010cbe <USB_HostInit+0x72>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8010c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c8e:	2b01      	cmp	r3, #1
 8010c90:	d10a      	bne.n	8010ca8 <USB_HostInit+0x5c>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	68fa      	ldr	r2, [r7, #12]
 8010c9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010ca0:	f043 0304 	orr.w	r3, r3, #4
 8010ca4:	6013      	str	r3, [r2, #0]
 8010ca6:	e014      	b.n	8010cd2 <USB_HostInit+0x86>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010cb6:	f023 0304 	bic.w	r3, r3, #4
 8010cba:	6013      	str	r3, [r2, #0]
 8010cbc:	e009      	b.n	8010cd2 <USB_HostInit+0x86>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010ccc:	f023 0304 	bic.w	r3, r3, #4
 8010cd0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010cd2:	2110      	movs	r1, #16
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f7ff fe49 	bl	801096c <USB_FlushTxFifo>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d001      	beq.n	8010ce4 <USB_HostInit+0x98>
  {
    ret = HAL_ERROR;
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f7ff fe73 	bl	80109d0 <USB_FlushRxFifo>
 8010cea:	4603      	mov	r3, r0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <USB_HostInit+0xa8>
  {
    ret = HAL_ERROR;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	613b      	str	r3, [r7, #16]
 8010cf8:	e015      	b.n	8010d26 <USB_HostInit+0xda>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	015a      	lsls	r2, r3, #5
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	4413      	add	r3, r2
 8010d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d06:	461a      	mov	r2, r3
 8010d08:	f04f 33ff 	mov.w	r3, #4294967295
 8010d0c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	015a      	lsls	r2, r3, #5
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	4413      	add	r3, r2
 8010d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	3301      	adds	r3, #1
 8010d24:	613b      	str	r3, [r7, #16]
 8010d26:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	4293      	cmp	r3, r2
 8010d30:	d3e3      	bcc.n	8010cfa <USB_HostInit+0xae>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2200      	movs	r2, #0
 8010d36:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8010d3e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	4a18      	ldr	r2, [pc, #96]	@ (8010da4 <USB_HostInit+0x158>)
 8010d44:	4293      	cmp	r3, r2
 8010d46:	d10b      	bne.n	8010d60 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010d4e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	4a15      	ldr	r2, [pc, #84]	@ (8010da8 <USB_HostInit+0x15c>)
 8010d54:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	4a14      	ldr	r2, [pc, #80]	@ (8010dac <USB_HostInit+0x160>)
 8010d5a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8010d5e:	e009      	b.n	8010d74 <USB_HostInit+0x128>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2280      	movs	r2, #128	@ 0x80
 8010d64:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	4a11      	ldr	r2, [pc, #68]	@ (8010db0 <USB_HostInit+0x164>)
 8010d6a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4a11      	ldr	r2, [pc, #68]	@ (8010db4 <USB_HostInit+0x168>)
 8010d70:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010d74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d105      	bne.n	8010d88 <USB_HostInit+0x13c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	699b      	ldr	r3, [r3, #24]
 8010d80:	f043 0210 	orr.w	r2, r3, #16
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	699a      	ldr	r2, [r3, #24]
 8010d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8010db8 <USB_HostInit+0x16c>)
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8010d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3718      	adds	r7, #24
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010da0:	b004      	add	sp, #16
 8010da2:	4770      	bx	lr
 8010da4:	40040000 	.word	0x40040000
 8010da8:	01000200 	.word	0x01000200
 8010dac:	00e00300 	.word	0x00e00300
 8010db0:	00600080 	.word	0x00600080
 8010db4:	004000e0 	.word	0x004000e0
 8010db8:	a3200008 	.word	0xa3200008

08010dbc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b085      	sub	sp, #20
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	460b      	mov	r3, r1
 8010dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	68fa      	ldr	r2, [r7, #12]
 8010dd6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010dda:	f023 0303 	bic.w	r3, r3, #3
 8010dde:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010de6:	681a      	ldr	r2, [r3, #0]
 8010de8:	78fb      	ldrb	r3, [r7, #3]
 8010dea:	f003 0303 	and.w	r3, r3, #3
 8010dee:	68f9      	ldr	r1, [r7, #12]
 8010df0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8010df4:	4313      	orrs	r3, r2
 8010df6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8010df8:	78fb      	ldrb	r3, [r7, #3]
 8010dfa:	2b01      	cmp	r3, #1
 8010dfc:	d107      	bne.n	8010e0e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010e04:	461a      	mov	r2, r3
 8010e06:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8010e0a:	6053      	str	r3, [r2, #4]
 8010e0c:	e00c      	b.n	8010e28 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8010e0e:	78fb      	ldrb	r3, [r7, #3]
 8010e10:	2b02      	cmp	r3, #2
 8010e12:	d107      	bne.n	8010e24 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8010e20:	6053      	str	r3, [r2, #4]
 8010e22:	e001      	b.n	8010e28 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8010e24:	2301      	movs	r3, #1
 8010e26:	e000      	b.n	8010e2a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8010e28:	2300      	movs	r3, #0
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3714      	adds	r7, #20
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr

08010e36 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8010e36:	b580      	push	{r7, lr}
 8010e38:	b084      	sub	sp, #16
 8010e3a:	af00      	add	r7, sp, #0
 8010e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8010e42:	2300      	movs	r3, #0
 8010e44:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010e56:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	68fa      	ldr	r2, [r7, #12]
 8010e5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010e64:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8010e66:	2064      	movs	r0, #100	@ 0x64
 8010e68:	f7f4 f87a 	bl	8004f60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	68fa      	ldr	r2, [r7, #12]
 8010e70:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e78:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8010e7a:	200a      	movs	r0, #10
 8010e7c:	f7f4 f870 	bl	8004f60 <HAL_Delay>

  return HAL_OK;
 8010e80:	2300      	movs	r3, #0
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3710      	adds	r7, #16
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}

08010e8a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8010e8a:	b480      	push	{r7}
 8010e8c:	b085      	sub	sp, #20
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	460b      	mov	r3, r1
 8010e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8010eae:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d109      	bne.n	8010ece <USB_DriveVbus+0x44>
 8010eba:	78fb      	ldrb	r3, [r7, #3]
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d106      	bne.n	8010ece <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010ec8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8010ecc:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8010ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ed8:	d109      	bne.n	8010eee <USB_DriveVbus+0x64>
 8010eda:	78fb      	ldrb	r3, [r7, #3]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d106      	bne.n	8010eee <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	68fa      	ldr	r2, [r7, #12]
 8010ee4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8010ee8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010eec:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8010eee:	2300      	movs	r3, #0
}
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	3714      	adds	r7, #20
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efa:	4770      	bx	lr

08010efc <USB_GetHostSpeed>:
  *            @arg HCD_DEVICE_SPEED_HIGH: High speed mode
  *            @arg HCD_DEVICE_SPEED_FULL: Full speed mode
  *            @arg HCD_DEVICE_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8010efc:	b480      	push	{r7}
 8010efe:	b085      	sub	sp, #20
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	0c5b      	lsrs	r3, r3, #17
 8010f1a:	f003 0303 	and.w	r3, r3, #3
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3714      	adds	r7, #20
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr

08010f2a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8010f2a:	b480      	push	{r7}
 8010f2c:	b085      	sub	sp, #20
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010f3c:	689b      	ldr	r3, [r3, #8]
 8010f3e:	b29b      	uxth	r3, r3
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3714      	adds	r7, #20
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b088      	sub	sp, #32
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	4608      	mov	r0, r1
 8010f56:	4611      	mov	r1, r2
 8010f58:	461a      	mov	r2, r3
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	70fb      	strb	r3, [r7, #3]
 8010f5e:	460b      	mov	r3, r1
 8010f60:	70bb      	strb	r3, [r7, #2]
 8010f62:	4613      	mov	r3, r2
 8010f64:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8010f66:	2300      	movs	r3, #0
 8010f68:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8010f6e:	78fb      	ldrb	r3, [r7, #3]
 8010f70:	015a      	lsls	r2, r3, #5
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	4413      	add	r3, r2
 8010f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010f7a:	461a      	mov	r2, r3
 8010f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8010f80:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8010f82:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010f86:	2b03      	cmp	r3, #3
 8010f88:	d87c      	bhi.n	8011084 <USB_HC_Init+0x138>
 8010f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8010f90 <USB_HC_Init+0x44>)
 8010f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f90:	08010fa1 	.word	0x08010fa1
 8010f94:	08011047 	.word	0x08011047
 8010f98:	08010fa1 	.word	0x08010fa1
 8010f9c:	08011009 	.word	0x08011009
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8010fa0:	78fb      	ldrb	r3, [r7, #3]
 8010fa2:	015a      	lsls	r2, r3, #5
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	4413      	add	r3, r2
 8010fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010fac:	461a      	mov	r2, r3
 8010fae:	f240 439d 	movw	r3, #1181	@ 0x49d
 8010fb2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8010fb4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	da10      	bge.n	8010fde <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8010fbc:	78fb      	ldrb	r3, [r7, #3]
 8010fbe:	015a      	lsls	r2, r3, #5
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	4413      	add	r3, r2
 8010fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	78fa      	ldrb	r2, [r7, #3]
 8010fcc:	0151      	lsls	r1, r2, #5
 8010fce:	693a      	ldr	r2, [r7, #16]
 8010fd0:	440a      	add	r2, r1
 8010fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8010fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010fda:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8010fdc:	e055      	b.n	801108a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4a6f      	ldr	r2, [pc, #444]	@ (80111a0 <USB_HC_Init+0x254>)
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d151      	bne.n	801108a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8010fe6:	78fb      	ldrb	r3, [r7, #3]
 8010fe8:	015a      	lsls	r2, r3, #5
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	4413      	add	r3, r2
 8010fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	78fa      	ldrb	r2, [r7, #3]
 8010ff6:	0151      	lsls	r1, r2, #5
 8010ff8:	693a      	ldr	r2, [r7, #16]
 8010ffa:	440a      	add	r2, r1
 8010ffc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011000:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8011004:	60d3      	str	r3, [r2, #12]
      break;
 8011006:	e040      	b.n	801108a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011008:	78fb      	ldrb	r3, [r7, #3]
 801100a:	015a      	lsls	r2, r3, #5
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	4413      	add	r3, r2
 8011010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011014:	461a      	mov	r2, r3
 8011016:	f240 639d 	movw	r3, #1693	@ 0x69d
 801101a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801101c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8011020:	2b00      	cmp	r3, #0
 8011022:	da34      	bge.n	801108e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8011024:	78fb      	ldrb	r3, [r7, #3]
 8011026:	015a      	lsls	r2, r3, #5
 8011028:	693b      	ldr	r3, [r7, #16]
 801102a:	4413      	add	r3, r2
 801102c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011030:	68db      	ldr	r3, [r3, #12]
 8011032:	78fa      	ldrb	r2, [r7, #3]
 8011034:	0151      	lsls	r1, r2, #5
 8011036:	693a      	ldr	r2, [r7, #16]
 8011038:	440a      	add	r2, r1
 801103a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801103e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011042:	60d3      	str	r3, [r2, #12]
      }

      break;
 8011044:	e023      	b.n	801108e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8011046:	78fb      	ldrb	r3, [r7, #3]
 8011048:	015a      	lsls	r2, r3, #5
 801104a:	693b      	ldr	r3, [r7, #16]
 801104c:	4413      	add	r3, r2
 801104e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011052:	461a      	mov	r2, r3
 8011054:	f240 2325 	movw	r3, #549	@ 0x225
 8011058:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 801105a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 801105e:	2b00      	cmp	r3, #0
 8011060:	da17      	bge.n	8011092 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8011062:	78fb      	ldrb	r3, [r7, #3]
 8011064:	015a      	lsls	r2, r3, #5
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	4413      	add	r3, r2
 801106a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	78fa      	ldrb	r2, [r7, #3]
 8011072:	0151      	lsls	r1, r2, #5
 8011074:	693a      	ldr	r2, [r7, #16]
 8011076:	440a      	add	r2, r1
 8011078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801107c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8011080:	60d3      	str	r3, [r2, #12]
      }
      break;
 8011082:	e006      	b.n	8011092 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8011084:	2301      	movs	r3, #1
 8011086:	77fb      	strb	r3, [r7, #31]
      break;
 8011088:	e004      	b.n	8011094 <USB_HC_Init+0x148>
      break;
 801108a:	bf00      	nop
 801108c:	e002      	b.n	8011094 <USB_HC_Init+0x148>
      break;
 801108e:	bf00      	nop
 8011090:	e000      	b.n	8011094 <USB_HC_Init+0x148>
      break;
 8011092:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011094:	78fb      	ldrb	r3, [r7, #3]
 8011096:	015a      	lsls	r2, r3, #5
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	4413      	add	r3, r2
 801109c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110a0:	461a      	mov	r2, r3
 80110a2:	2300      	movs	r3, #0
 80110a4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80110a6:	78fb      	ldrb	r3, [r7, #3]
 80110a8:	015a      	lsls	r2, r3, #5
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	4413      	add	r3, r2
 80110ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	78fa      	ldrb	r2, [r7, #3]
 80110b6:	0151      	lsls	r1, r2, #5
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	440a      	add	r2, r1
 80110bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80110c0:	f043 0302 	orr.w	r3, r3, #2
 80110c4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80110cc:	699a      	ldr	r2, [r3, #24]
 80110ce:	78fb      	ldrb	r3, [r7, #3]
 80110d0:	f003 030f 	and.w	r3, r3, #15
 80110d4:	2101      	movs	r1, #1
 80110d6:	fa01 f303 	lsl.w	r3, r1, r3
 80110da:	6939      	ldr	r1, [r7, #16]
 80110dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80110e0:	4313      	orrs	r3, r2
 80110e2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	699b      	ldr	r3, [r3, #24]
 80110e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80110f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	da03      	bge.n	8011100 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80110f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80110fc:	61bb      	str	r3, [r7, #24]
 80110fe:	e001      	b.n	8011104 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8011100:	2300      	movs	r3, #0
 8011102:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff fef9 	bl	8010efc <USB_GetHostSpeed>
 801110a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 801110c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011110:	2b02      	cmp	r3, #2
 8011112:	d106      	bne.n	8011122 <USB_HC_Init+0x1d6>
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b02      	cmp	r3, #2
 8011118:	d003      	beq.n	8011122 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 801111a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801111e:	617b      	str	r3, [r7, #20]
 8011120:	e001      	b.n	8011126 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8011122:	2300      	movs	r3, #0
 8011124:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011126:	787b      	ldrb	r3, [r7, #1]
 8011128:	059b      	lsls	r3, r3, #22
 801112a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 801112e:	78bb      	ldrb	r3, [r7, #2]
 8011130:	02db      	lsls	r3, r3, #11
 8011132:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011136:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8011138:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801113c:	049b      	lsls	r3, r3, #18
 801113e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8011142:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8011144:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8011146:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 801114a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	431a      	orrs	r2, r3
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011154:	78fa      	ldrb	r2, [r7, #3]
 8011156:	0151      	lsls	r1, r2, #5
 8011158:	693a      	ldr	r2, [r7, #16]
 801115a:	440a      	add	r2, r1
 801115c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8011160:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8011164:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8011166:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801116a:	2b03      	cmp	r3, #3
 801116c:	d003      	beq.n	8011176 <USB_HC_Init+0x22a>
 801116e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8011172:	2b01      	cmp	r3, #1
 8011174:	d10f      	bne.n	8011196 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8011176:	78fb      	ldrb	r3, [r7, #3]
 8011178:	015a      	lsls	r2, r3, #5
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	4413      	add	r3, r2
 801117e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	78fa      	ldrb	r2, [r7, #3]
 8011186:	0151      	lsls	r1, r2, #5
 8011188:	693a      	ldr	r2, [r7, #16]
 801118a:	440a      	add	r2, r1
 801118c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011190:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011194:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8011196:	7ffb      	ldrb	r3, [r7, #31]
}
 8011198:	4618      	mov	r0, r3
 801119a:	3720      	adds	r7, #32
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}
 80111a0:	40040000 	.word	0x40040000

080111a4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b08c      	sub	sp, #48	@ 0x30
 80111a8:	af02      	add	r7, sp, #8
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	4613      	mov	r3, r2
 80111b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	785b      	ldrb	r3, [r3, #1]
 80111ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80111bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80111c0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	4a5d      	ldr	r2, [pc, #372]	@ (801133c <USB_HC_StartXfer+0x198>)
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d12f      	bne.n	801122a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80111ca:	79fb      	ldrb	r3, [r7, #7]
 80111cc:	2b01      	cmp	r3, #1
 80111ce:	d11c      	bne.n	801120a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	7c9b      	ldrb	r3, [r3, #18]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d003      	beq.n	80111e0 <USB_HC_StartXfer+0x3c>
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	7c9b      	ldrb	r3, [r3, #18]
 80111dc:	2b02      	cmp	r3, #2
 80111de:	d124      	bne.n	801122a <USB_HC_StartXfer+0x86>
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	799b      	ldrb	r3, [r3, #6]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d120      	bne.n	801122a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80111e8:	69fb      	ldr	r3, [r7, #28]
 80111ea:	015a      	lsls	r2, r3, #5
 80111ec:	6a3b      	ldr	r3, [r7, #32]
 80111ee:	4413      	add	r3, r2
 80111f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	69fa      	ldr	r2, [r7, #28]
 80111f8:	0151      	lsls	r1, r2, #5
 80111fa:	6a3a      	ldr	r2, [r7, #32]
 80111fc:	440a      	add	r2, r1
 80111fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011206:	60d3      	str	r3, [r2, #12]
 8011208:	e00f      	b.n	801122a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 801120a:	68bb      	ldr	r3, [r7, #8]
 801120c:	791b      	ldrb	r3, [r3, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10b      	bne.n	801122a <USB_HC_StartXfer+0x86>
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	795b      	ldrb	r3, [r3, #5]
 8011216:	2b01      	cmp	r3, #1
 8011218:	d107      	bne.n	801122a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	785b      	ldrb	r3, [r3, #1]
 801121e:	4619      	mov	r1, r3
 8011220:	68f8      	ldr	r0, [r7, #12]
 8011222:	f000 fb6b 	bl	80118fc <USB_DoPing>
        return HAL_OK;
 8011226:	2300      	movs	r3, #0
 8011228:	e232      	b.n	8011690 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	799b      	ldrb	r3, [r3, #6]
 801122e:	2b01      	cmp	r3, #1
 8011230:	d158      	bne.n	80112e4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8011232:	2301      	movs	r3, #1
 8011234:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8011236:	68bb      	ldr	r3, [r7, #8]
 8011238:	78db      	ldrb	r3, [r3, #3]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d007      	beq.n	801124e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801123e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011240:	68ba      	ldr	r2, [r7, #8]
 8011242:	8a92      	ldrh	r2, [r2, #20]
 8011244:	fb03 f202 	mul.w	r2, r3, r2
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	61da      	str	r2, [r3, #28]
 801124c:	e07c      	b.n	8011348 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 801124e:	68bb      	ldr	r3, [r7, #8]
 8011250:	7c9b      	ldrb	r3, [r3, #18]
 8011252:	2b01      	cmp	r3, #1
 8011254:	d130      	bne.n	80112b8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	6a1b      	ldr	r3, [r3, #32]
 801125a:	2bbc      	cmp	r3, #188	@ 0xbc
 801125c:	d918      	bls.n	8011290 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	8a9b      	ldrh	r3, [r3, #20]
 8011262:	461a      	mov	r2, r3
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	69da      	ldr	r2, [r3, #28]
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	68db      	ldr	r3, [r3, #12]
 8011274:	2b01      	cmp	r3, #1
 8011276:	d003      	beq.n	8011280 <USB_HC_StartXfer+0xdc>
 8011278:	68bb      	ldr	r3, [r7, #8]
 801127a:	68db      	ldr	r3, [r3, #12]
 801127c:	2b02      	cmp	r3, #2
 801127e:	d103      	bne.n	8011288 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8011280:	68bb      	ldr	r3, [r7, #8]
 8011282:	2202      	movs	r2, #2
 8011284:	60da      	str	r2, [r3, #12]
 8011286:	e05f      	b.n	8011348 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	2201      	movs	r2, #1
 801128c:	60da      	str	r2, [r3, #12]
 801128e:	e05b      	b.n	8011348 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8011290:	68bb      	ldr	r3, [r7, #8]
 8011292:	6a1a      	ldr	r2, [r3, #32]
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d007      	beq.n	80112b0 <USB_HC_StartXfer+0x10c>
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	68db      	ldr	r3, [r3, #12]
 80112a4:	2b02      	cmp	r3, #2
 80112a6:	d003      	beq.n	80112b0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	2204      	movs	r2, #4
 80112ac:	60da      	str	r2, [r3, #12]
 80112ae:	e04b      	b.n	8011348 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80112b0:	68bb      	ldr	r3, [r7, #8]
 80112b2:	2203      	movs	r2, #3
 80112b4:	60da      	str	r2, [r3, #12]
 80112b6:	e047      	b.n	8011348 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80112b8:	79fb      	ldrb	r3, [r7, #7]
 80112ba:	2b01      	cmp	r3, #1
 80112bc:	d10d      	bne.n	80112da <USB_HC_StartXfer+0x136>
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	6a1b      	ldr	r3, [r3, #32]
 80112c2:	68ba      	ldr	r2, [r7, #8]
 80112c4:	8a92      	ldrh	r2, [r2, #20]
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d907      	bls.n	80112da <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80112ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80112cc:	68ba      	ldr	r2, [r7, #8]
 80112ce:	8a92      	ldrh	r2, [r2, #20]
 80112d0:	fb03 f202 	mul.w	r2, r3, r2
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	61da      	str	r2, [r3, #28]
 80112d8:	e036      	b.n	8011348 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	6a1a      	ldr	r2, [r3, #32]
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	61da      	str	r2, [r3, #28]
 80112e2:	e031      	b.n	8011348 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	6a1b      	ldr	r3, [r3, #32]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d018      	beq.n	801131e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	6a1b      	ldr	r3, [r3, #32]
 80112f0:	68ba      	ldr	r2, [r7, #8]
 80112f2:	8a92      	ldrh	r2, [r2, #20]
 80112f4:	4413      	add	r3, r2
 80112f6:	3b01      	subs	r3, #1
 80112f8:	68ba      	ldr	r2, [r7, #8]
 80112fa:	8a92      	ldrh	r2, [r2, #20]
 80112fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011300:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8011302:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011304:	8b7b      	ldrh	r3, [r7, #26]
 8011306:	429a      	cmp	r2, r3
 8011308:	d90b      	bls.n	8011322 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 801130a:	8b7b      	ldrh	r3, [r7, #26]
 801130c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801130e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011310:	68ba      	ldr	r2, [r7, #8]
 8011312:	8a92      	ldrh	r2, [r2, #20]
 8011314:	fb03 f202 	mul.w	r2, r3, r2
 8011318:	68bb      	ldr	r3, [r7, #8]
 801131a:	61da      	str	r2, [r3, #28]
 801131c:	e001      	b.n	8011322 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 801131e:	2301      	movs	r3, #1
 8011320:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8011322:	68bb      	ldr	r3, [r7, #8]
 8011324:	78db      	ldrb	r3, [r3, #3]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00a      	beq.n	8011340 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 801132a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801132c:	68ba      	ldr	r2, [r7, #8]
 801132e:	8a92      	ldrh	r2, [r2, #20]
 8011330:	fb03 f202 	mul.w	r2, r3, r2
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	61da      	str	r2, [r3, #28]
 8011338:	e006      	b.n	8011348 <USB_HC_StartXfer+0x1a4>
 801133a:	bf00      	nop
 801133c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	6a1a      	ldr	r2, [r3, #32]
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	69db      	ldr	r3, [r3, #28]
 801134c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011350:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011352:	04d9      	lsls	r1, r3, #19
 8011354:	4ba3      	ldr	r3, [pc, #652]	@ (80115e4 <USB_HC_StartXfer+0x440>)
 8011356:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011358:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	7d9b      	ldrb	r3, [r3, #22]
 801135e:	075b      	lsls	r3, r3, #29
 8011360:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011364:	69f9      	ldr	r1, [r7, #28]
 8011366:	0148      	lsls	r0, r1, #5
 8011368:	6a39      	ldr	r1, [r7, #32]
 801136a:	4401      	add	r1, r0
 801136c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011370:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8011372:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8011374:	79fb      	ldrb	r3, [r7, #7]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d009      	beq.n	801138e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	6999      	ldr	r1, [r3, #24]
 801137e:	69fb      	ldr	r3, [r7, #28]
 8011380:	015a      	lsls	r2, r3, #5
 8011382:	6a3b      	ldr	r3, [r7, #32]
 8011384:	4413      	add	r3, r2
 8011386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801138a:	460a      	mov	r2, r1
 801138c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 801138e:	6a3b      	ldr	r3, [r7, #32]
 8011390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	f003 0301 	and.w	r3, r3, #1
 801139a:	2b00      	cmp	r3, #0
 801139c:	bf0c      	ite	eq
 801139e:	2301      	moveq	r3, #1
 80113a0:	2300      	movne	r3, #0
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80113a6:	69fb      	ldr	r3, [r7, #28]
 80113a8:	015a      	lsls	r2, r3, #5
 80113aa:	6a3b      	ldr	r3, [r7, #32]
 80113ac:	4413      	add	r3, r2
 80113ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	69fa      	ldr	r2, [r7, #28]
 80113b6:	0151      	lsls	r1, r2, #5
 80113b8:	6a3a      	ldr	r2, [r7, #32]
 80113ba:	440a      	add	r2, r1
 80113bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80113c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80113c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	015a      	lsls	r2, r3, #5
 80113ca:	6a3b      	ldr	r3, [r7, #32]
 80113cc:	4413      	add	r3, r2
 80113ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80113d2:	681a      	ldr	r2, [r3, #0]
 80113d4:	7e7b      	ldrb	r3, [r7, #25]
 80113d6:	075b      	lsls	r3, r3, #29
 80113d8:	69f9      	ldr	r1, [r7, #28]
 80113da:	0148      	lsls	r0, r1, #5
 80113dc:	6a39      	ldr	r1, [r7, #32]
 80113de:	4401      	add	r1, r0
 80113e0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80113e4:	4313      	orrs	r3, r2
 80113e6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	799b      	ldrb	r3, [r3, #6]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	f040 80c3 	bne.w	8011578 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	7c5b      	ldrb	r3, [r3, #17]
 80113f6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80113f8:	68ba      	ldr	r2, [r7, #8]
 80113fa:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80113fc:	4313      	orrs	r3, r2
 80113fe:	69fa      	ldr	r2, [r7, #28]
 8011400:	0151      	lsls	r1, r2, #5
 8011402:	6a3a      	ldr	r2, [r7, #32]
 8011404:	440a      	add	r2, r1
 8011406:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 801140a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 801140e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	015a      	lsls	r2, r3, #5
 8011414:	6a3b      	ldr	r3, [r7, #32]
 8011416:	4413      	add	r3, r2
 8011418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801141c:	68db      	ldr	r3, [r3, #12]
 801141e:	69fa      	ldr	r2, [r7, #28]
 8011420:	0151      	lsls	r1, r2, #5
 8011422:	6a3a      	ldr	r2, [r7, #32]
 8011424:	440a      	add	r2, r1
 8011426:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801142a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801142e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	79db      	ldrb	r3, [r3, #7]
 8011434:	2b01      	cmp	r3, #1
 8011436:	d123      	bne.n	8011480 <USB_HC_StartXfer+0x2dc>
 8011438:	68bb      	ldr	r3, [r7, #8]
 801143a:	78db      	ldrb	r3, [r3, #3]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d11f      	bne.n	8011480 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8011440:	69fb      	ldr	r3, [r7, #28]
 8011442:	015a      	lsls	r2, r3, #5
 8011444:	6a3b      	ldr	r3, [r7, #32]
 8011446:	4413      	add	r3, r2
 8011448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801144c:	685b      	ldr	r3, [r3, #4]
 801144e:	69fa      	ldr	r2, [r7, #28]
 8011450:	0151      	lsls	r1, r2, #5
 8011452:	6a3a      	ldr	r2, [r7, #32]
 8011454:	440a      	add	r2, r1
 8011456:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801145a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801145e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8011460:	69fb      	ldr	r3, [r7, #28]
 8011462:	015a      	lsls	r2, r3, #5
 8011464:	6a3b      	ldr	r3, [r7, #32]
 8011466:	4413      	add	r3, r2
 8011468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	69fa      	ldr	r2, [r7, #28]
 8011470:	0151      	lsls	r1, r2, #5
 8011472:	6a3a      	ldr	r2, [r7, #32]
 8011474:	440a      	add	r2, r1
 8011476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801147a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801147e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	7c9b      	ldrb	r3, [r3, #18]
 8011484:	2b01      	cmp	r3, #1
 8011486:	d003      	beq.n	8011490 <USB_HC_StartXfer+0x2ec>
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	7c9b      	ldrb	r3, [r3, #18]
 801148c:	2b03      	cmp	r3, #3
 801148e:	d117      	bne.n	80114c0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8011494:	2b01      	cmp	r3, #1
 8011496:	d113      	bne.n	80114c0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	78db      	ldrb	r3, [r3, #3]
 801149c:	2b01      	cmp	r3, #1
 801149e:	d10f      	bne.n	80114c0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	015a      	lsls	r2, r3, #5
 80114a4:	6a3b      	ldr	r3, [r7, #32]
 80114a6:	4413      	add	r3, r2
 80114a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	69fa      	ldr	r2, [r7, #28]
 80114b0:	0151      	lsls	r1, r2, #5
 80114b2:	6a3a      	ldr	r2, [r7, #32]
 80114b4:	440a      	add	r2, r1
 80114b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80114ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80114be:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	7c9b      	ldrb	r3, [r3, #18]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d162      	bne.n	801158e <USB_HC_StartXfer+0x3ea>
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	78db      	ldrb	r3, [r3, #3]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d15e      	bne.n	801158e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	68db      	ldr	r3, [r3, #12]
 80114d4:	3b01      	subs	r3, #1
 80114d6:	2b03      	cmp	r3, #3
 80114d8:	d858      	bhi.n	801158c <USB_HC_StartXfer+0x3e8>
 80114da:	a201      	add	r2, pc, #4	@ (adr r2, 80114e0 <USB_HC_StartXfer+0x33c>)
 80114dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e0:	080114f1 	.word	0x080114f1
 80114e4:	08011513 	.word	0x08011513
 80114e8:	08011535 	.word	0x08011535
 80114ec:	08011557 	.word	0x08011557
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	015a      	lsls	r2, r3, #5
 80114f4:	6a3b      	ldr	r3, [r7, #32]
 80114f6:	4413      	add	r3, r2
 80114f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	69fa      	ldr	r2, [r7, #28]
 8011500:	0151      	lsls	r1, r2, #5
 8011502:	6a3a      	ldr	r2, [r7, #32]
 8011504:	440a      	add	r2, r1
 8011506:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801150a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801150e:	6053      	str	r3, [r2, #4]
          break;
 8011510:	e03d      	b.n	801158e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	015a      	lsls	r2, r3, #5
 8011516:	6a3b      	ldr	r3, [r7, #32]
 8011518:	4413      	add	r3, r2
 801151a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	69fa      	ldr	r2, [r7, #28]
 8011522:	0151      	lsls	r1, r2, #5
 8011524:	6a3a      	ldr	r2, [r7, #32]
 8011526:	440a      	add	r2, r1
 8011528:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801152c:	f043 030e 	orr.w	r3, r3, #14
 8011530:	6053      	str	r3, [r2, #4]
          break;
 8011532:	e02c      	b.n	801158e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	015a      	lsls	r2, r3, #5
 8011538:	6a3b      	ldr	r3, [r7, #32]
 801153a:	4413      	add	r3, r2
 801153c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	69fa      	ldr	r2, [r7, #28]
 8011544:	0151      	lsls	r1, r2, #5
 8011546:	6a3a      	ldr	r2, [r7, #32]
 8011548:	440a      	add	r2, r1
 801154a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801154e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8011552:	6053      	str	r3, [r2, #4]
          break;
 8011554:	e01b      	b.n	801158e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	015a      	lsls	r2, r3, #5
 801155a:	6a3b      	ldr	r3, [r7, #32]
 801155c:	4413      	add	r3, r2
 801155e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011562:	685b      	ldr	r3, [r3, #4]
 8011564:	69fa      	ldr	r2, [r7, #28]
 8011566:	0151      	lsls	r1, r2, #5
 8011568:	6a3a      	ldr	r2, [r7, #32]
 801156a:	440a      	add	r2, r1
 801156c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011574:	6053      	str	r3, [r2, #4]
          break;
 8011576:	e00a      	b.n	801158e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8011578:	69fb      	ldr	r3, [r7, #28]
 801157a:	015a      	lsls	r2, r3, #5
 801157c:	6a3b      	ldr	r3, [r7, #32]
 801157e:	4413      	add	r3, r2
 8011580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011584:	461a      	mov	r2, r3
 8011586:	2300      	movs	r3, #0
 8011588:	6053      	str	r3, [r2, #4]
 801158a:	e000      	b.n	801158e <USB_HC_StartXfer+0x3ea>
          break;
 801158c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	015a      	lsls	r2, r3, #5
 8011592:	6a3b      	ldr	r3, [r7, #32]
 8011594:	4413      	add	r3, r2
 8011596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80115a4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	78db      	ldrb	r3, [r3, #3]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d004      	beq.n	80115b8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115b4:	613b      	str	r3, [r7, #16]
 80115b6:	e003      	b.n	80115c0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80115be:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80115c6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	015a      	lsls	r2, r3, #5
 80115cc:	6a3b      	ldr	r3, [r7, #32]
 80115ce:	4413      	add	r3, r2
 80115d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80115d4:	461a      	mov	r2, r3
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80115da:	79fb      	ldrb	r3, [r7, #7]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d003      	beq.n	80115e8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80115e0:	2300      	movs	r3, #0
 80115e2:	e055      	b.n	8011690 <USB_HC_StartXfer+0x4ec>
 80115e4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80115e8:	68bb      	ldr	r3, [r7, #8]
 80115ea:	78db      	ldrb	r3, [r3, #3]
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d14e      	bne.n	801168e <USB_HC_StartXfer+0x4ea>
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	6a1b      	ldr	r3, [r3, #32]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d04a      	beq.n	801168e <USB_HC_StartXfer+0x4ea>
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	79db      	ldrb	r3, [r3, #7]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d146      	bne.n	801168e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	7c9b      	ldrb	r3, [r3, #18]
 8011604:	2b03      	cmp	r3, #3
 8011606:	d831      	bhi.n	801166c <USB_HC_StartXfer+0x4c8>
 8011608:	a201      	add	r2, pc, #4	@ (adr r2, 8011610 <USB_HC_StartXfer+0x46c>)
 801160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801160e:	bf00      	nop
 8011610:	08011621 	.word	0x08011621
 8011614:	08011645 	.word	0x08011645
 8011618:	08011621 	.word	0x08011621
 801161c:	08011645 	.word	0x08011645
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	6a1b      	ldr	r3, [r3, #32]
 8011624:	3303      	adds	r3, #3
 8011626:	089b      	lsrs	r3, r3, #2
 8011628:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 801162a:	8afa      	ldrh	r2, [r7, #22]
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011630:	b29b      	uxth	r3, r3
 8011632:	429a      	cmp	r2, r3
 8011634:	d91c      	bls.n	8011670 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	699b      	ldr	r3, [r3, #24]
 801163a:	f043 0220 	orr.w	r2, r3, #32
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	619a      	str	r2, [r3, #24]
        }
        break;
 8011642:	e015      	b.n	8011670 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	6a1b      	ldr	r3, [r3, #32]
 8011648:	3303      	adds	r3, #3
 801164a:	089b      	lsrs	r3, r3, #2
 801164c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 801164e:	8afa      	ldrh	r2, [r7, #22]
 8011650:	6a3b      	ldr	r3, [r7, #32]
 8011652:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011656:	691b      	ldr	r3, [r3, #16]
 8011658:	b29b      	uxth	r3, r3
 801165a:	429a      	cmp	r2, r3
 801165c:	d90a      	bls.n	8011674 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	699b      	ldr	r3, [r3, #24]
 8011662:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	619a      	str	r2, [r3, #24]
        }
        break;
 801166a:	e003      	b.n	8011674 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 801166c:	bf00      	nop
 801166e:	e002      	b.n	8011676 <USB_HC_StartXfer+0x4d2>
        break;
 8011670:	bf00      	nop
 8011672:	e000      	b.n	8011676 <USB_HC_StartXfer+0x4d2>
        break;
 8011674:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	6999      	ldr	r1, [r3, #24]
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	785a      	ldrb	r2, [r3, #1]
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	6a1b      	ldr	r3, [r3, #32]
 8011682:	b29b      	uxth	r3, r3
 8011684:	2000      	movs	r0, #0
 8011686:	9000      	str	r0, [sp, #0]
 8011688:	68f8      	ldr	r0, [r7, #12]
 801168a:	f7ff f9cf 	bl	8010a2c <USB_WritePacket>
  }

  return HAL_OK;
 801168e:	2300      	movs	r3, #0
}
 8011690:	4618      	mov	r0, r3
 8011692:	3728      	adds	r7, #40	@ 0x28
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011698:	b480      	push	{r7}
 801169a:	b085      	sub	sp, #20
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80116aa:	695b      	ldr	r3, [r3, #20]
 80116ac:	b29b      	uxth	r3, r3
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3714      	adds	r7, #20
 80116b2:	46bd      	mov	sp, r7
 80116b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b8:	4770      	bx	lr

080116ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80116ba:	b480      	push	{r7}
 80116bc:	b089      	sub	sp, #36	@ 0x24
 80116be:	af00      	add	r7, sp, #0
 80116c0:	6078      	str	r0, [r7, #4]
 80116c2:	460b      	mov	r3, r1
 80116c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80116ca:	78fb      	ldrb	r3, [r7, #3]
 80116cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80116ce:	2300      	movs	r3, #0
 80116d0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80116d2:	69bb      	ldr	r3, [r7, #24]
 80116d4:	015a      	lsls	r2, r3, #5
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	4413      	add	r3, r2
 80116da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	0c9b      	lsrs	r3, r3, #18
 80116e2:	f003 0303 	and.w	r3, r3, #3
 80116e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80116e8:	69bb      	ldr	r3, [r7, #24]
 80116ea:	015a      	lsls	r2, r3, #5
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	4413      	add	r3, r2
 80116f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	0fdb      	lsrs	r3, r3, #31
 80116f8:	f003 0301 	and.w	r3, r3, #1
 80116fc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80116fe:	69bb      	ldr	r3, [r7, #24]
 8011700:	015a      	lsls	r2, r3, #5
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	4413      	add	r3, r2
 8011706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	0fdb      	lsrs	r3, r3, #31
 801170e:	f003 0301 	and.w	r3, r3, #1
 8011712:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	689b      	ldr	r3, [r3, #8]
 8011718:	f003 0320 	and.w	r3, r3, #32
 801171c:	2b20      	cmp	r3, #32
 801171e:	d10d      	bne.n	801173c <USB_HC_Halt+0x82>
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d10a      	bne.n	801173c <USB_HC_Halt+0x82>
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d005      	beq.n	8011738 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	2b01      	cmp	r3, #1
 8011730:	d002      	beq.n	8011738 <USB_HC_Halt+0x7e>
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	2b03      	cmp	r3, #3
 8011736:	d101      	bne.n	801173c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8011738:	2300      	movs	r3, #0
 801173a:	e0d8      	b.n	80118ee <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d002      	beq.n	8011748 <USB_HC_Halt+0x8e>
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	2b02      	cmp	r3, #2
 8011746:	d173      	bne.n	8011830 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011748:	69bb      	ldr	r3, [r7, #24]
 801174a:	015a      	lsls	r2, r3, #5
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	4413      	add	r3, r2
 8011750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	69ba      	ldr	r2, [r7, #24]
 8011758:	0151      	lsls	r1, r2, #5
 801175a:	69fa      	ldr	r2, [r7, #28]
 801175c:	440a      	add	r2, r1
 801175e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011762:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011766:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	689b      	ldr	r3, [r3, #8]
 801176c:	f003 0320 	and.w	r3, r3, #32
 8011770:	2b00      	cmp	r3, #0
 8011772:	d14a      	bne.n	801180a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011778:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801177c:	2b00      	cmp	r3, #0
 801177e:	d133      	bne.n	80117e8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	015a      	lsls	r2, r3, #5
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	4413      	add	r3, r2
 8011788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	69ba      	ldr	r2, [r7, #24]
 8011790:	0151      	lsls	r1, r2, #5
 8011792:	69fa      	ldr	r2, [r7, #28]
 8011794:	440a      	add	r2, r1
 8011796:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801179a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801179e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80117a0:	69bb      	ldr	r3, [r7, #24]
 80117a2:	015a      	lsls	r2, r3, #5
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	4413      	add	r3, r2
 80117a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	69ba      	ldr	r2, [r7, #24]
 80117b0:	0151      	lsls	r1, r2, #5
 80117b2:	69fa      	ldr	r2, [r7, #28]
 80117b4:	440a      	add	r2, r1
 80117b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80117ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80117be:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	3301      	adds	r3, #1
 80117c4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80117cc:	d82e      	bhi.n	801182c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	015a      	lsls	r2, r3, #5
 80117d2:	69fb      	ldr	r3, [r7, #28]
 80117d4:	4413      	add	r3, r2
 80117d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80117e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80117e4:	d0ec      	beq.n	80117c0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80117e6:	e081      	b.n	80118ec <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	015a      	lsls	r2, r3, #5
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	4413      	add	r3, r2
 80117f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	69ba      	ldr	r2, [r7, #24]
 80117f8:	0151      	lsls	r1, r2, #5
 80117fa:	69fa      	ldr	r2, [r7, #28]
 80117fc:	440a      	add	r2, r1
 80117fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011802:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011806:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011808:	e070      	b.n	80118ec <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	015a      	lsls	r2, r3, #5
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	4413      	add	r3, r2
 8011812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	69ba      	ldr	r2, [r7, #24]
 801181a:	0151      	lsls	r1, r2, #5
 801181c:	69fa      	ldr	r2, [r7, #28]
 801181e:	440a      	add	r2, r1
 8011820:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011824:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011828:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801182a:	e05f      	b.n	80118ec <USB_HC_Halt+0x232>
            break;
 801182c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 801182e:	e05d      	b.n	80118ec <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	015a      	lsls	r2, r3, #5
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	4413      	add	r3, r2
 8011838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	69ba      	ldr	r2, [r7, #24]
 8011840:	0151      	lsls	r1, r2, #5
 8011842:	69fa      	ldr	r2, [r7, #28]
 8011844:	440a      	add	r2, r1
 8011846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801184a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801184e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011856:	691b      	ldr	r3, [r3, #16]
 8011858:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d133      	bne.n	80118c8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	015a      	lsls	r2, r3, #5
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	4413      	add	r3, r2
 8011868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	69ba      	ldr	r2, [r7, #24]
 8011870:	0151      	lsls	r1, r2, #5
 8011872:	69fa      	ldr	r2, [r7, #28]
 8011874:	440a      	add	r2, r1
 8011876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801187a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801187e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	015a      	lsls	r2, r3, #5
 8011884:	69fb      	ldr	r3, [r7, #28]
 8011886:	4413      	add	r3, r2
 8011888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	69ba      	ldr	r2, [r7, #24]
 8011890:	0151      	lsls	r1, r2, #5
 8011892:	69fa      	ldr	r2, [r7, #28]
 8011894:	440a      	add	r2, r1
 8011896:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 801189a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801189e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	3301      	adds	r3, #1
 80118a4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80118ac:	d81d      	bhi.n	80118ea <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80118ae:	69bb      	ldr	r3, [r7, #24]
 80118b0:	015a      	lsls	r2, r3, #5
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	4413      	add	r3, r2
 80118b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80118c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80118c4:	d0ec      	beq.n	80118a0 <USB_HC_Halt+0x1e6>
 80118c6:	e011      	b.n	80118ec <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	015a      	lsls	r2, r3, #5
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	4413      	add	r3, r2
 80118d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	69ba      	ldr	r2, [r7, #24]
 80118d8:	0151      	lsls	r1, r2, #5
 80118da:	69fa      	ldr	r2, [r7, #28]
 80118dc:	440a      	add	r2, r1
 80118de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80118e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80118e6:	6013      	str	r3, [r2, #0]
 80118e8:	e000      	b.n	80118ec <USB_HC_Halt+0x232>
          break;
 80118ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80118ec:	2300      	movs	r3, #0
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3724      	adds	r7, #36	@ 0x24
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr
	...

080118fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b087      	sub	sp, #28
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 801190c:	78fb      	ldrb	r3, [r7, #3]
 801190e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8011910:	2301      	movs	r3, #1
 8011912:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	04da      	lsls	r2, r3, #19
 8011918:	4b15      	ldr	r3, [pc, #84]	@ (8011970 <USB_DoPing+0x74>)
 801191a:	4013      	ands	r3, r2
 801191c:	693a      	ldr	r2, [r7, #16]
 801191e:	0151      	lsls	r1, r2, #5
 8011920:	697a      	ldr	r2, [r7, #20]
 8011922:	440a      	add	r2, r1
 8011924:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011928:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801192c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	015a      	lsls	r2, r3, #5
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	4413      	add	r3, r2
 8011936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011944:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801194c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 801194e:	693b      	ldr	r3, [r7, #16]
 8011950:	015a      	lsls	r2, r3, #5
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	4413      	add	r3, r2
 8011956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 801195a:	461a      	mov	r2, r3
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8011960:	2300      	movs	r3, #0
}
 8011962:	4618      	mov	r0, r3
 8011964:	371c      	adds	r7, #28
 8011966:	46bd      	mov	sp, r7
 8011968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196c:	4770      	bx	lr
 801196e:	bf00      	nop
 8011970:	1ff80000 	.word	0x1ff80000

08011974 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b088      	sub	sp, #32
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 801197c:	2300      	movs	r3, #0
 801197e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011984:	2300      	movs	r3, #0
 8011986:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7fe ff92 	bl	80108b2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801198e:	2110      	movs	r1, #16
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f7fe ffeb 	bl	801096c <USB_FlushTxFifo>
 8011996:	4603      	mov	r3, r0
 8011998:	2b00      	cmp	r3, #0
 801199a:	d001      	beq.n	80119a0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 801199c:	2301      	movs	r3, #1
 801199e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80119a0:	6878      	ldr	r0, [r7, #4]
 80119a2:	f7ff f815 	bl	80109d0 <USB_FlushRxFifo>
 80119a6:	4603      	mov	r3, r0
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d001      	beq.n	80119b0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80119ac:	2301      	movs	r3, #1
 80119ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80119b0:	2300      	movs	r3, #0
 80119b2:	61bb      	str	r3, [r7, #24]
 80119b4:	e01f      	b.n	80119f6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	015a      	lsls	r2, r3, #5
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	4413      	add	r3, r2
 80119be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80119cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80119d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80119dc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80119de:	69bb      	ldr	r3, [r7, #24]
 80119e0:	015a      	lsls	r2, r3, #5
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	4413      	add	r3, r2
 80119e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119ea:	461a      	mov	r2, r3
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	3301      	adds	r3, #1
 80119f4:	61bb      	str	r3, [r7, #24]
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	2b0f      	cmp	r3, #15
 80119fa:	d9dc      	bls.n	80119b6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80119fc:	2300      	movs	r3, #0
 80119fe:	61bb      	str	r3, [r7, #24]
 8011a00:	e034      	b.n	8011a6c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	015a      	lsls	r2, r3, #5
 8011a06:	697b      	ldr	r3, [r7, #20]
 8011a08:	4413      	add	r3, r2
 8011a0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011a18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011a20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011a28:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011a2a:	69bb      	ldr	r3, [r7, #24]
 8011a2c:	015a      	lsls	r2, r3, #5
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	4413      	add	r3, r2
 8011a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a36:	461a      	mov	r2, r3
 8011a38:	693b      	ldr	r3, [r7, #16]
 8011a3a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011a48:	d80c      	bhi.n	8011a64 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011a4a:	69bb      	ldr	r3, [r7, #24]
 8011a4c:	015a      	lsls	r2, r3, #5
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	4413      	add	r3, r2
 8011a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011a60:	d0ec      	beq.n	8011a3c <USB_StopHost+0xc8>
 8011a62:	e000      	b.n	8011a66 <USB_StopHost+0xf2>
        break;
 8011a64:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	3301      	adds	r3, #1
 8011a6a:	61bb      	str	r3, [r7, #24]
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	2b0f      	cmp	r3, #15
 8011a70:	d9c7      	bls.n	8011a02 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011a78:	461a      	mov	r2, r3
 8011a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a7e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f04f 32ff 	mov.w	r2, #4294967295
 8011a86:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f7fe ff01 	bl	8010890 <USB_EnableGlobalInt>

  return ret;
 8011a8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3720      	adds	r7, #32
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011a9c:	4904      	ldr	r1, [pc, #16]	@ (8011ab0 <MX_FATFS_Init+0x18>)
 8011a9e:	4805      	ldr	r0, [pc, #20]	@ (8011ab4 <MX_FATFS_Init+0x1c>)
 8011aa0:	f004 fe0e 	bl	80166c0 <FATFS_LinkDriver>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	4b03      	ldr	r3, [pc, #12]	@ (8011ab8 <MX_FATFS_Init+0x20>)
 8011aaa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011aac:	bf00      	nop
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	20001584 	.word	0x20001584
 8011ab4:	0801c380 	.word	0x0801c380
 8011ab8:	20001580 	.word	0x20001580

08011abc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011abc:	b480      	push	{r7}
 8011abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011ac0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aca:	4770      	bx	lr

08011acc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011ad6:	f000 f87b 	bl	8011bd0 <BSP_SD_IsDetected>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d001      	beq.n	8011ae4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011ae0:	2302      	movs	r3, #2
 8011ae2:	e012      	b.n	8011b0a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011ae4:	480b      	ldr	r0, [pc, #44]	@ (8011b14 <BSP_SD_Init+0x48>)
 8011ae6:	f7fa f9ad 	bl	800be44 <HAL_SD_Init>
 8011aea:	4603      	mov	r3, r0
 8011aec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011aee:	79fb      	ldrb	r3, [r7, #7]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d109      	bne.n	8011b08 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011af4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011af8:	4806      	ldr	r0, [pc, #24]	@ (8011b14 <BSP_SD_Init+0x48>)
 8011afa:	f7fa fdf5 	bl	800c6e8 <HAL_SD_ConfigWideBusOperation>
 8011afe:	4603      	mov	r3, r0
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d001      	beq.n	8011b08 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011b04:	2301      	movs	r3, #1
 8011b06:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011b08:	79fb      	ldrb	r3, [r7, #7]
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	20000c60 	.word	0x20000c60

08011b18 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b086      	sub	sp, #24
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	60f8      	str	r0, [r7, #12]
 8011b20:	60b9      	str	r1, [r7, #8]
 8011b22:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011b24:	2300      	movs	r3, #0
 8011b26:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	68ba      	ldr	r2, [r7, #8]
 8011b2c:	68f9      	ldr	r1, [r7, #12]
 8011b2e:	4806      	ldr	r0, [pc, #24]	@ (8011b48 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011b30:	f7fa fa38 	bl	800bfa4 <HAL_SD_ReadBlocks_DMA>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d001      	beq.n	8011b3e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011b3a:	2301      	movs	r3, #1
 8011b3c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3718      	adds	r7, #24
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	20000c60 	.word	0x20000c60

08011b4c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b086      	sub	sp, #24
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	68ba      	ldr	r2, [r7, #8]
 8011b60:	68f9      	ldr	r1, [r7, #12]
 8011b62:	4806      	ldr	r0, [pc, #24]	@ (8011b7c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011b64:	f7fa fb00 	bl	800c168 <HAL_SD_WriteBlocks_DMA>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d001      	beq.n	8011b72 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3718      	adds	r7, #24
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}
 8011b7c:	20000c60 	.word	0x20000c60

08011b80 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011b84:	4805      	ldr	r0, [pc, #20]	@ (8011b9c <BSP_SD_GetCardState+0x1c>)
 8011b86:	f7fa fe49 	bl	800c81c <HAL_SD_GetCardState>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	2b04      	cmp	r3, #4
 8011b8e:	bf14      	ite	ne
 8011b90:	2301      	movne	r3, #1
 8011b92:	2300      	moveq	r3, #0
 8011b94:	b2db      	uxtb	r3, r3
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	20000c60 	.word	0x20000c60

08011ba0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011ba8:	6879      	ldr	r1, [r7, #4]
 8011baa:	4803      	ldr	r0, [pc, #12]	@ (8011bb8 <BSP_SD_GetCardInfo+0x18>)
 8011bac:	f7fa fd70 	bl	800c690 <HAL_SD_GetCardInfo>
}
 8011bb0:	bf00      	nop
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	20000c60 	.word	0x20000c60

08011bbc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011bc4:	f000 f9b2 	bl	8011f2c <BSP_SD_ReadCpltCallback>
}
 8011bc8:	bf00      	nop
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011bd6:	2301      	movs	r3, #1
 8011bd8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011bda:	f000 f80b 	bl	8011bf4 <BSP_PlatformIsDetected>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d101      	bne.n	8011be8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011be4:	2300      	movs	r3, #0
 8011be6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011be8:	79fb      	ldrb	r3, [r7, #7]
 8011bea:	b2db      	uxtb	r3, r3
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3708      	adds	r7, #8
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b082      	sub	sp, #8
 8011bf8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011bfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011c02:	4806      	ldr	r0, [pc, #24]	@ (8011c1c <BSP_PlatformIsDetected+0x28>)
 8011c04:	f7f5 fa10 	bl	8007028 <HAL_GPIO_ReadPin>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d001      	beq.n	8011c12 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011c12:	79fb      	ldrb	r3, [r7, #7]
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	40020800 	.word	0x40020800

08011c20 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011c28:	f004 fdb6 	bl	8016798 <osKernelSysTick>
 8011c2c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011c2e:	e006      	b.n	8011c3e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011c30:	f7ff ffa6 	bl	8011b80 <BSP_SD_GetCardState>
 8011c34:	4603      	mov	r3, r0
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d101      	bne.n	8011c3e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011c3a:	2300      	movs	r3, #0
 8011c3c:	e009      	b.n	8011c52 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011c3e:	f004 fdab 	bl	8016798 <osKernelSysTick>
 8011c42:	4602      	mov	r2, r0
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	1ad3      	subs	r3, r2, r3
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d8f0      	bhi.n	8011c30 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011c52:	4618      	mov	r0, r3
 8011c54:	3710      	adds	r7, #16
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}
	...

08011c5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	4603      	mov	r3, r0
 8011c64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011c66:	4b0b      	ldr	r3, [pc, #44]	@ (8011c94 <SD_CheckStatus+0x38>)
 8011c68:	2201      	movs	r2, #1
 8011c6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011c6c:	f7ff ff88 	bl	8011b80 <BSP_SD_GetCardState>
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d107      	bne.n	8011c86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011c76:	4b07      	ldr	r3, [pc, #28]	@ (8011c94 <SD_CheckStatus+0x38>)
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	b2db      	uxtb	r3, r3
 8011c7c:	f023 0301 	bic.w	r3, r3, #1
 8011c80:	b2da      	uxtb	r2, r3
 8011c82:	4b04      	ldr	r3, [pc, #16]	@ (8011c94 <SD_CheckStatus+0x38>)
 8011c84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011c86:	4b03      	ldr	r3, [pc, #12]	@ (8011c94 <SD_CheckStatus+0x38>)
 8011c88:	781b      	ldrb	r3, [r3, #0]
 8011c8a:	b2db      	uxtb	r3, r3
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3708      	adds	r7, #8
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	20000051 	.word	0x20000051

08011c98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011c98:	b590      	push	{r4, r7, lr}
 8011c9a:	b087      	sub	sp, #28
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011ca2:	4b20      	ldr	r3, [pc, #128]	@ (8011d24 <SD_initialize+0x8c>)
 8011ca4:	2201      	movs	r2, #1
 8011ca6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8011ca8:	f004 fd6a 	bl	8016780 <osKernelRunning>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d030      	beq.n	8011d14 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8011cb2:	f7ff ff0b 	bl	8011acc <BSP_SD_Init>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d107      	bne.n	8011ccc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8011cbc:	79fb      	ldrb	r3, [r7, #7]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7ff ffcc 	bl	8011c5c <SD_CheckStatus>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	4b16      	ldr	r3, [pc, #88]	@ (8011d24 <SD_initialize+0x8c>)
 8011cca:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011ccc:	4b15      	ldr	r3, [pc, #84]	@ (8011d24 <SD_initialize+0x8c>)
 8011cce:	781b      	ldrb	r3, [r3, #0]
 8011cd0:	b2db      	uxtb	r3, r3
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d01e      	beq.n	8011d14 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8011cd6:	4b14      	ldr	r3, [pc, #80]	@ (8011d28 <SD_initialize+0x90>)
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d10e      	bne.n	8011cfc <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011cde:	4b13      	ldr	r3, [pc, #76]	@ (8011d2c <SD_initialize+0x94>)
 8011ce0:	f107 0408 	add.w	r4, r7, #8
 8011ce4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011ce6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011cea:	f107 0308 	add.w	r3, r7, #8
 8011cee:	2100      	movs	r1, #0
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f004 fe45 	bl	8016980 <osMessageCreate>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8011d28 <SD_initialize+0x90>)
 8011cfa:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8011cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8011d28 <SD_initialize+0x90>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d107      	bne.n	8011d14 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8011d04:	4b07      	ldr	r3, [pc, #28]	@ (8011d24 <SD_initialize+0x8c>)
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	f043 0301 	orr.w	r3, r3, #1
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	4b04      	ldr	r3, [pc, #16]	@ (8011d24 <SD_initialize+0x8c>)
 8011d12:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8011d14:	4b03      	ldr	r3, [pc, #12]	@ (8011d24 <SD_initialize+0x8c>)
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	b2db      	uxtb	r3, r3
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	371c      	adds	r7, #28
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd90      	pop	{r4, r7, pc}
 8011d22:	bf00      	nop
 8011d24:	20000051 	.word	0x20000051
 8011d28:	20001588 	.word	0x20001588
 8011d2c:	0801c2c8 	.word	0x0801c2c8

08011d30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b082      	sub	sp, #8
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	4603      	mov	r3, r0
 8011d38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011d3a:	79fb      	ldrb	r3, [r7, #7]
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	f7ff ff8d 	bl	8011c5c <SD_CheckStatus>
 8011d42:	4603      	mov	r3, r0
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3708      	adds	r7, #8
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b08a      	sub	sp, #40	@ 0x28
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60b9      	str	r1, [r7, #8]
 8011d54:	607a      	str	r2, [r7, #4]
 8011d56:	603b      	str	r3, [r7, #0]
 8011d58:	4603      	mov	r3, r0
 8011d5a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8011d5c:	2301      	movs	r3, #1
 8011d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011d62:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011d66:	f7ff ff5b 	bl	8011c20 <SD_CheckStatusWithTimeout>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	da02      	bge.n	8011d76 <SD_read+0x2a>
  {
    return res;
 8011d70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011d74:	e032      	b.n	8011ddc <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011d76:	683a      	ldr	r2, [r7, #0]
 8011d78:	6879      	ldr	r1, [r7, #4]
 8011d7a:	68b8      	ldr	r0, [r7, #8]
 8011d7c:	f7ff fecc 	bl	8011b18 <BSP_SD_ReadBlocks_DMA>
 8011d80:	4603      	mov	r3, r0
 8011d82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 8011d86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d124      	bne.n	8011dd8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011d8e:	4b15      	ldr	r3, [pc, #84]	@ (8011de4 <SD_read+0x98>)
 8011d90:	6819      	ldr	r1, [r3, #0]
 8011d92:	f107 0314 	add.w	r3, r7, #20
 8011d96:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f004 fe58 	bl	8016a50 <osMessageGet>

    if (event.status == osEventMessage)
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	2b10      	cmp	r3, #16
 8011da4:	d118      	bne.n	8011dd8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	d115      	bne.n	8011dd8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8011dac:	f004 fcf4 	bl	8016798 <osKernelSysTick>
 8011db0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8011db2:	e008      	b.n	8011dc6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011db4:	f7ff fee4 	bl	8011b80 <BSP_SD_GetCardState>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d103      	bne.n	8011dc6 <SD_read+0x7a>
              {
                res = RES_OK;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8011dc4:	e008      	b.n	8011dd8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8011dc6:	f004 fce7 	bl	8016798 <osKernelSysTick>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	6a3b      	ldr	r3, [r7, #32]
 8011dce:	1ad3      	subs	r3, r2, r3
 8011dd0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d9ed      	bls.n	8011db4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8011dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011ddc:	4618      	mov	r0, r3
 8011dde:	3728      	adds	r7, #40	@ 0x28
 8011de0:	46bd      	mov	sp, r7
 8011de2:	bd80      	pop	{r7, pc}
 8011de4:	20001588 	.word	0x20001588

08011de8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b08a      	sub	sp, #40	@ 0x28
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60b9      	str	r1, [r7, #8]
 8011df0:	607a      	str	r2, [r7, #4]
 8011df2:	603b      	str	r3, [r7, #0]
 8011df4:	4603      	mov	r3, r0
 8011df6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011dfe:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011e02:	f7ff ff0d 	bl	8011c20 <SD_CheckStatusWithTimeout>
 8011e06:	4603      	mov	r3, r0
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	da02      	bge.n	8011e12 <SD_write+0x2a>
  {
    return res;
 8011e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011e10:	e02e      	b.n	8011e70 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011e12:	683a      	ldr	r2, [r7, #0]
 8011e14:	6879      	ldr	r1, [r7, #4]
 8011e16:	68b8      	ldr	r0, [r7, #8]
 8011e18:	f7ff fe98 	bl	8011b4c <BSP_SD_WriteBlocks_DMA>
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d124      	bne.n	8011e6c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8011e22:	4b15      	ldr	r3, [pc, #84]	@ (8011e78 <SD_write+0x90>)
 8011e24:	6819      	ldr	r1, [r3, #0]
 8011e26:	f107 0314 	add.w	r3, r7, #20
 8011e2a:	f247 5230 	movw	r2, #30000	@ 0x7530
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f004 fe0e 	bl	8016a50 <osMessageGet>

    if (event.status == osEventMessage)
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	2b10      	cmp	r3, #16
 8011e38:	d118      	bne.n	8011e6c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8011e3a:	69bb      	ldr	r3, [r7, #24]
 8011e3c:	2b02      	cmp	r3, #2
 8011e3e:	d115      	bne.n	8011e6c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8011e40:	f004 fcaa 	bl	8016798 <osKernelSysTick>
 8011e44:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011e46:	e008      	b.n	8011e5a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011e48:	f7ff fe9a 	bl	8011b80 <BSP_SD_GetCardState>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d103      	bne.n	8011e5a <SD_write+0x72>
          {
            res = RES_OK;
 8011e52:	2300      	movs	r3, #0
 8011e54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8011e58:	e008      	b.n	8011e6c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8011e5a:	f004 fc9d 	bl	8016798 <osKernelSysTick>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	6a3b      	ldr	r3, [r7, #32]
 8011e62:	1ad3      	subs	r3, r2, r3
 8011e64:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011e68:	4293      	cmp	r3, r2
 8011e6a:	d9ed      	bls.n	8011e48 <SD_write+0x60>
    }

  }
#endif

  return res;
 8011e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3728      	adds	r7, #40	@ 0x28
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	20001588 	.word	0x20001588

08011e7c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b08c      	sub	sp, #48	@ 0x30
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	4603      	mov	r3, r0
 8011e84:	603a      	str	r2, [r7, #0]
 8011e86:	71fb      	strb	r3, [r7, #7]
 8011e88:	460b      	mov	r3, r1
 8011e8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011e8c:	2301      	movs	r3, #1
 8011e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011e92:	4b25      	ldr	r3, [pc, #148]	@ (8011f28 <SD_ioctl+0xac>)
 8011e94:	781b      	ldrb	r3, [r3, #0]
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	f003 0301 	and.w	r3, r3, #1
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <SD_ioctl+0x28>
 8011ea0:	2303      	movs	r3, #3
 8011ea2:	e03c      	b.n	8011f1e <SD_ioctl+0xa2>

  switch (cmd)
 8011ea4:	79bb      	ldrb	r3, [r7, #6]
 8011ea6:	2b03      	cmp	r3, #3
 8011ea8:	d834      	bhi.n	8011f14 <SD_ioctl+0x98>
 8011eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8011eb0 <SD_ioctl+0x34>)
 8011eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb0:	08011ec1 	.word	0x08011ec1
 8011eb4:	08011ec9 	.word	0x08011ec9
 8011eb8:	08011ee1 	.word	0x08011ee1
 8011ebc:	08011efb 	.word	0x08011efb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ec6:	e028      	b.n	8011f1a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ec8:	f107 030c 	add.w	r3, r7, #12
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7ff fe67 	bl	8011ba0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ede:	e01c      	b.n	8011f1a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ee0:	f107 030c 	add.w	r3, r7, #12
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7ff fe5b 	bl	8011ba0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011ef8:	e00f      	b.n	8011f1a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011efa:	f107 030c 	add.w	r3, r7, #12
 8011efe:	4618      	mov	r0, r3
 8011f00:	f7ff fe4e 	bl	8011ba0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f06:	0a5a      	lsrs	r2, r3, #9
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011f12:	e002      	b.n	8011f1a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011f14:	2304      	movs	r3, #4
 8011f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3730      	adds	r7, #48	@ 0x30
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	20000051 	.word	0x20000051

08011f2c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8011f30:	4b04      	ldr	r3, [pc, #16]	@ (8011f44 <BSP_SD_ReadCpltCallback+0x18>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	2200      	movs	r2, #0
 8011f36:	2101      	movs	r1, #1
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f004 fd49 	bl	80169d0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 8011f3e:	bf00      	nop
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	20001588 	.word	0x20001588

08011f48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8011f48:	b590      	push	{r4, r7, lr}
 8011f4a:	b089      	sub	sp, #36	@ 0x24
 8011f4c:	af04      	add	r7, sp, #16
 8011f4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8011f50:	2301      	movs	r3, #1
 8011f52:	2202      	movs	r2, #2
 8011f54:	2102      	movs	r1, #2
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 fcbd 	bl	80128d6 <USBH_FindInterface>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8011f60:	7bfb      	ldrb	r3, [r7, #15]
 8011f62:	2bff      	cmp	r3, #255	@ 0xff
 8011f64:	d002      	beq.n	8011f6c <USBH_CDC_InterfaceInit+0x24>
 8011f66:	7bfb      	ldrb	r3, [r7, #15]
 8011f68:	2b01      	cmp	r3, #1
 8011f6a:	d901      	bls.n	8011f70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8011f6c:	2302      	movs	r3, #2
 8011f6e:	e13d      	b.n	80121ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8011f70:	7bfb      	ldrb	r3, [r7, #15]
 8011f72:	4619      	mov	r1, r3
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f000 fc92 	bl	801289e <USBH_SelectInterface>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8011f7e:	7bbb      	ldrb	r3, [r7, #14]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d001      	beq.n	8011f88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8011f84:	2302      	movs	r3, #2
 8011f86:	e131      	b.n	80121ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8011f8e:	2050      	movs	r0, #80	@ 0x50
 8011f90:	f007 fdd8 	bl	8019b44 <malloc>
 8011f94:	4603      	mov	r3, r0
 8011f96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8011f9e:	69db      	ldr	r3, [r3, #28]
 8011fa0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8011fa2:	68bb      	ldr	r3, [r7, #8]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d101      	bne.n	8011fac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8011fa8:	2302      	movs	r3, #2
 8011faa:	e11f      	b.n	80121ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8011fac:	2250      	movs	r2, #80	@ 0x50
 8011fae:	2100      	movs	r1, #0
 8011fb0:	68b8      	ldr	r0, [r7, #8]
 8011fb2:	f007 ff19 	bl	8019de8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8011fb6:	7bfb      	ldrb	r3, [r7, #15]
 8011fb8:	687a      	ldr	r2, [r7, #4]
 8011fba:	211a      	movs	r1, #26
 8011fbc:	fb01 f303 	mul.w	r3, r1, r3
 8011fc0:	4413      	add	r3, r2
 8011fc2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	b25b      	sxtb	r3, r3
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	da15      	bge.n	8011ffa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8011fce:	7bfb      	ldrb	r3, [r7, #15]
 8011fd0:	687a      	ldr	r2, [r7, #4]
 8011fd2:	211a      	movs	r1, #26
 8011fd4:	fb01 f303 	mul.w	r3, r1, r3
 8011fd8:	4413      	add	r3, r2
 8011fda:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8011fde:	781a      	ldrb	r2, [r3, #0]
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8011fe4:	7bfb      	ldrb	r3, [r7, #15]
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	211a      	movs	r1, #26
 8011fea:	fb01 f303 	mul.w	r3, r1, r3
 8011fee:	4413      	add	r3, r2
 8011ff0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8011ff4:	881a      	ldrh	r2, [r3, #0]
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	785b      	ldrb	r3, [r3, #1]
 8011ffe:	4619      	mov	r1, r3
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f002 f90c 	bl	801421e <USBH_AllocPipe>
 8012006:	4603      	mov	r3, r0
 8012008:	461a      	mov	r2, r3
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	7819      	ldrb	r1, [r3, #0]
 8012012:	68bb      	ldr	r3, [r7, #8]
 8012014:	7858      	ldrb	r0, [r3, #1]
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012022:	68ba      	ldr	r2, [r7, #8]
 8012024:	8952      	ldrh	r2, [r2, #10]
 8012026:	9202      	str	r2, [sp, #8]
 8012028:	2203      	movs	r2, #3
 801202a:	9201      	str	r2, [sp, #4]
 801202c:	9300      	str	r3, [sp, #0]
 801202e:	4623      	mov	r3, r4
 8012030:	4602      	mov	r2, r0
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f002 f8c4 	bl	80141c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	2200      	movs	r2, #0
 801203e:	4619      	mov	r1, r3
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f007 fcf9 	bl	8019a38 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8012046:	2300      	movs	r3, #0
 8012048:	2200      	movs	r2, #0
 801204a:	210a      	movs	r1, #10
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f000 fc42 	bl	80128d6 <USBH_FindInterface>
 8012052:	4603      	mov	r3, r0
 8012054:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8012056:	7bfb      	ldrb	r3, [r7, #15]
 8012058:	2bff      	cmp	r3, #255	@ 0xff
 801205a:	d002      	beq.n	8012062 <USBH_CDC_InterfaceInit+0x11a>
 801205c:	7bfb      	ldrb	r3, [r7, #15]
 801205e:	2b01      	cmp	r3, #1
 8012060:	d901      	bls.n	8012066 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8012062:	2302      	movs	r3, #2
 8012064:	e0c2      	b.n	80121ec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8012066:	7bfb      	ldrb	r3, [r7, #15]
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	211a      	movs	r1, #26
 801206c:	fb01 f303 	mul.w	r3, r1, r3
 8012070:	4413      	add	r3, r2
 8012072:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	b25b      	sxtb	r3, r3
 801207a:	2b00      	cmp	r3, #0
 801207c:	da16      	bge.n	80120ac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 801207e:	7bfb      	ldrb	r3, [r7, #15]
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	211a      	movs	r1, #26
 8012084:	fb01 f303 	mul.w	r3, r1, r3
 8012088:	4413      	add	r3, r2
 801208a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 801208e:	781a      	ldrb	r2, [r3, #0]
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8012094:	7bfb      	ldrb	r3, [r7, #15]
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	211a      	movs	r1, #26
 801209a:	fb01 f303 	mul.w	r3, r1, r3
 801209e:	4413      	add	r3, r2
 80120a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80120a4:	881a      	ldrh	r2, [r3, #0]
 80120a6:	68bb      	ldr	r3, [r7, #8]
 80120a8:	835a      	strh	r2, [r3, #26]
 80120aa:	e015      	b.n	80120d8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80120ac:	7bfb      	ldrb	r3, [r7, #15]
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	211a      	movs	r1, #26
 80120b2:	fb01 f303 	mul.w	r3, r1, r3
 80120b6:	4413      	add	r3, r2
 80120b8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80120bc:	781a      	ldrb	r2, [r3, #0]
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80120c2:	7bfb      	ldrb	r3, [r7, #15]
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	211a      	movs	r1, #26
 80120c8:	fb01 f303 	mul.w	r3, r1, r3
 80120cc:	4413      	add	r3, r2
 80120ce:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80120d2:	881a      	ldrh	r2, [r3, #0]
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80120d8:	7bfb      	ldrb	r3, [r7, #15]
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	211a      	movs	r1, #26
 80120de:	fb01 f303 	mul.w	r3, r1, r3
 80120e2:	4413      	add	r3, r2
 80120e4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	b25b      	sxtb	r3, r3
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	da16      	bge.n	801211e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80120f0:	7bfb      	ldrb	r3, [r7, #15]
 80120f2:	687a      	ldr	r2, [r7, #4]
 80120f4:	211a      	movs	r1, #26
 80120f6:	fb01 f303 	mul.w	r3, r1, r3
 80120fa:	4413      	add	r3, r2
 80120fc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8012100:	781a      	ldrb	r2, [r3, #0]
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012106:	7bfb      	ldrb	r3, [r7, #15]
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	211a      	movs	r1, #26
 801210c:	fb01 f303 	mul.w	r3, r1, r3
 8012110:	4413      	add	r3, r2
 8012112:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012116:	881a      	ldrh	r2, [r3, #0]
 8012118:	68bb      	ldr	r3, [r7, #8]
 801211a:	835a      	strh	r2, [r3, #26]
 801211c:	e015      	b.n	801214a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 801211e:	7bfb      	ldrb	r3, [r7, #15]
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	211a      	movs	r1, #26
 8012124:	fb01 f303 	mul.w	r3, r1, r3
 8012128:	4413      	add	r3, r2
 801212a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 801212e:	781a      	ldrb	r2, [r3, #0]
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8012134:	7bfb      	ldrb	r3, [r7, #15]
 8012136:	687a      	ldr	r2, [r7, #4]
 8012138:	211a      	movs	r1, #26
 801213a:	fb01 f303 	mul.w	r3, r1, r3
 801213e:	4413      	add	r3, r2
 8012140:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8012144:	881a      	ldrh	r2, [r3, #0]
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	7b9b      	ldrb	r3, [r3, #14]
 801214e:	4619      	mov	r1, r3
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	f002 f864 	bl	801421e <USBH_AllocPipe>
 8012156:	4603      	mov	r3, r0
 8012158:	461a      	mov	r2, r3
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	7bdb      	ldrb	r3, [r3, #15]
 8012162:	4619      	mov	r1, r3
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f002 f85a 	bl	801421e <USBH_AllocPipe>
 801216a:	4603      	mov	r3, r0
 801216c:	461a      	mov	r2, r3
 801216e:	68bb      	ldr	r3, [r7, #8]
 8012170:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	7b59      	ldrb	r1, [r3, #13]
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	7b98      	ldrb	r0, [r3, #14]
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8012186:	68ba      	ldr	r2, [r7, #8]
 8012188:	8b12      	ldrh	r2, [r2, #24]
 801218a:	9202      	str	r2, [sp, #8]
 801218c:	2202      	movs	r2, #2
 801218e:	9201      	str	r2, [sp, #4]
 8012190:	9300      	str	r3, [sp, #0]
 8012192:	4623      	mov	r3, r4
 8012194:	4602      	mov	r2, r0
 8012196:	6878      	ldr	r0, [r7, #4]
 8012198:	f002 f812 	bl	80141c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	7b19      	ldrb	r1, [r3, #12]
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	7bd8      	ldrb	r0, [r3, #15]
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80121b0:	68ba      	ldr	r2, [r7, #8]
 80121b2:	8b52      	ldrh	r2, [r2, #26]
 80121b4:	9202      	str	r2, [sp, #8]
 80121b6:	2202      	movs	r2, #2
 80121b8:	9201      	str	r2, [sp, #4]
 80121ba:	9300      	str	r3, [sp, #0]
 80121bc:	4623      	mov	r3, r4
 80121be:	4602      	mov	r2, r0
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f001 fffd 	bl	80141c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80121c6:	68bb      	ldr	r3, [r7, #8]
 80121c8:	2200      	movs	r2, #0
 80121ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	7b5b      	ldrb	r3, [r3, #13]
 80121d2:	2200      	movs	r2, #0
 80121d4:	4619      	mov	r1, r3
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f007 fc2e 	bl	8019a38 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	7b1b      	ldrb	r3, [r3, #12]
 80121e0:	2200      	movs	r2, #0
 80121e2:	4619      	mov	r1, r3
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f007 fc27 	bl	8019a38 <USBH_LL_SetToggle>

  return USBH_OK;
 80121ea:	2300      	movs	r3, #0
}
 80121ec:	4618      	mov	r0, r3
 80121ee:	3714      	adds	r7, #20
 80121f0:	46bd      	mov	sp, r7
 80121f2:	bd90      	pop	{r4, r7, pc}

080121f4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012202:	69db      	ldr	r3, [r3, #28]
 8012204:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	781b      	ldrb	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d00e      	beq.n	801222c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	781b      	ldrb	r3, [r3, #0]
 8012212:	4619      	mov	r1, r3
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f001 fff2 	bl	80141fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	781b      	ldrb	r3, [r3, #0]
 801221e:	4619      	mov	r1, r3
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f002 f81d 	bl	8014260 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2200      	movs	r2, #0
 801222a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	7b1b      	ldrb	r3, [r3, #12]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d00e      	beq.n	8012252 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	7b1b      	ldrb	r3, [r3, #12]
 8012238:	4619      	mov	r1, r3
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f001 ffdf 	bl	80141fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	7b1b      	ldrb	r3, [r3, #12]
 8012244:	4619      	mov	r1, r3
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f002 f80a 	bl	8014260 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2200      	movs	r2, #0
 8012250:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	7b5b      	ldrb	r3, [r3, #13]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d00e      	beq.n	8012278 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	7b5b      	ldrb	r3, [r3, #13]
 801225e:	4619      	mov	r1, r3
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f001 ffcc 	bl	80141fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	7b5b      	ldrb	r3, [r3, #13]
 801226a:	4619      	mov	r1, r3
 801226c:	6878      	ldr	r0, [r7, #4]
 801226e:	f001 fff7 	bl	8014260 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2200      	movs	r2, #0
 8012276:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801227e:	69db      	ldr	r3, [r3, #28]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d00b      	beq.n	801229c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801228a:	69db      	ldr	r3, [r3, #28]
 801228c:	4618      	mov	r0, r3
 801228e:	f007 fc61 	bl	8019b54 <free>
    phost->pActiveClass->pData = 0U;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012298:	2200      	movs	r2, #0
 801229a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 801229c:	2300      	movs	r3, #0
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3710      	adds	r7, #16
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b084      	sub	sp, #16
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80122b4:	69db      	ldr	r3, [r3, #28]
 80122b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	3340      	adds	r3, #64	@ 0x40
 80122bc:	4619      	mov	r1, r3
 80122be:	6878      	ldr	r0, [r7, #4]
 80122c0:	f000 f8b1 	bl	8012426 <GetLineCoding>
 80122c4:	4603      	mov	r3, r0
 80122c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80122c8:	7afb      	ldrb	r3, [r7, #11]
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d105      	bne.n	80122da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80122d4:	2102      	movs	r1, #2
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80122da:	7afb      	ldrb	r3, [r7, #11]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3710      	adds	r7, #16
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80122ec:	2301      	movs	r3, #1
 80122ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80122f0:	2300      	movs	r3, #0
 80122f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80122fa:	69db      	ldr	r3, [r3, #28]
 80122fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8012304:	2b04      	cmp	r3, #4
 8012306:	d877      	bhi.n	80123f8 <USBH_CDC_Process+0x114>
 8012308:	a201      	add	r2, pc, #4	@ (adr r2, 8012310 <USBH_CDC_Process+0x2c>)
 801230a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801230e:	bf00      	nop
 8012310:	08012325 	.word	0x08012325
 8012314:	0801232b 	.word	0x0801232b
 8012318:	0801235b 	.word	0x0801235b
 801231c:	080123cf 	.word	0x080123cf
 8012320:	080123dd 	.word	0x080123dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	73fb      	strb	r3, [r7, #15]
      break;
 8012328:	e06d      	b.n	8012406 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801232e:	4619      	mov	r1, r3
 8012330:	6878      	ldr	r0, [r7, #4]
 8012332:	f000 f897 	bl	8012464 <SetLineCoding>
 8012336:	4603      	mov	r3, r0
 8012338:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801233a:	7bbb      	ldrb	r3, [r7, #14]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d104      	bne.n	801234a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8012340:	68bb      	ldr	r3, [r7, #8]
 8012342:	2202      	movs	r2, #2
 8012344:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8012348:	e058      	b.n	80123fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801234a:	7bbb      	ldrb	r3, [r7, #14]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d055      	beq.n	80123fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8012350:	68bb      	ldr	r3, [r7, #8]
 8012352:	2204      	movs	r2, #4
 8012354:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8012358:	e050      	b.n	80123fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801235a:	68bb      	ldr	r3, [r7, #8]
 801235c:	3340      	adds	r3, #64	@ 0x40
 801235e:	4619      	mov	r1, r3
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f000 f860 	bl	8012426 <GetLineCoding>
 8012366:	4603      	mov	r3, r0
 8012368:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801236a:	7bbb      	ldrb	r3, [r7, #14]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d126      	bne.n	80123be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	2200      	movs	r2, #0
 8012374:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012382:	791b      	ldrb	r3, [r3, #4]
 8012384:	429a      	cmp	r2, r3
 8012386:	d13b      	bne.n	8012400 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8012388:	68bb      	ldr	r3, [r7, #8]
 801238a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 801238e:	68bb      	ldr	r3, [r7, #8]
 8012390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012392:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8012394:	429a      	cmp	r2, r3
 8012396:	d133      	bne.n	8012400 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d12b      	bne.n	8012400 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80123ac:	68bb      	ldr	r3, [r7, #8]
 80123ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80123b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d124      	bne.n	8012400 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 f96a 	bl	8012690 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80123bc:	e020      	b.n	8012400 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80123be:	7bbb      	ldrb	r3, [r7, #14]
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d01d      	beq.n	8012400 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2204      	movs	r2, #4
 80123c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80123cc:	e018      	b.n	8012400 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f867 	bl	80124a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 f8e6 	bl	80125a6 <CDC_ProcessReception>
      break;
 80123da:	e014      	b.n	8012406 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80123dc:	2100      	movs	r1, #0
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f001 f8ff 	bl	80135e2 <USBH_ClrFeature>
 80123e4:	4603      	mov	r3, r0
 80123e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80123e8:	7bbb      	ldrb	r3, [r7, #14]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d10a      	bne.n	8012404 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2200      	movs	r2, #0
 80123f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80123f6:	e005      	b.n	8012404 <USBH_CDC_Process+0x120>

    default:
      break;
 80123f8:	bf00      	nop
 80123fa:	e004      	b.n	8012406 <USBH_CDC_Process+0x122>
      break;
 80123fc:	bf00      	nop
 80123fe:	e002      	b.n	8012406 <USBH_CDC_Process+0x122>
      break;
 8012400:	bf00      	nop
 8012402:	e000      	b.n	8012406 <USBH_CDC_Process+0x122>
      break;
 8012404:	bf00      	nop

  }

  return status;
 8012406:	7bfb      	ldrb	r3, [r7, #15]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}

08012410 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8012410:	b480      	push	{r7}
 8012412:	b083      	sub	sp, #12
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8012418:	2300      	movs	r3, #0
}
 801241a:	4618      	mov	r0, r3
 801241c:	370c      	adds	r7, #12
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr

08012426 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8012426:	b580      	push	{r7, lr}
 8012428:	b082      	sub	sp, #8
 801242a:	af00      	add	r7, sp, #0
 801242c:	6078      	str	r0, [r7, #4]
 801242e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	22a1      	movs	r2, #161	@ 0xa1
 8012434:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2221      	movs	r2, #33	@ 0x21
 801243a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2200      	movs	r2, #0
 8012440:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2200      	movs	r2, #0
 8012446:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2207      	movs	r2, #7
 801244c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	2207      	movs	r2, #7
 8012452:	4619      	mov	r1, r3
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f001 fbf9 	bl	8013c4c <USBH_CtlReq>
 801245a:	4603      	mov	r3, r0
}
 801245c:	4618      	mov	r0, r3
 801245e:	3708      	adds	r7, #8
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}

08012464 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	2221      	movs	r2, #33	@ 0x21
 8012472:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2220      	movs	r2, #32
 8012478:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2200      	movs	r2, #0
 801247e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2200      	movs	r2, #0
 8012484:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2207      	movs	r2, #7
 801248a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	2207      	movs	r2, #7
 8012490:	4619      	mov	r1, r3
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f001 fbda 	bl	8013c4c <USBH_CtlReq>
 8012498:	4603      	mov	r3, r0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}

080124a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80124a2:	b580      	push	{r7, lr}
 80124a4:	b086      	sub	sp, #24
 80124a6:	af02      	add	r7, sp, #8
 80124a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80124b0:	69db      	ldr	r3, [r3, #28]
 80124b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80124b4:	2300      	movs	r3, #0
 80124b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80124be:	2b01      	cmp	r3, #1
 80124c0:	d002      	beq.n	80124c8 <CDC_ProcessTransmission+0x26>
 80124c2:	2b02      	cmp	r3, #2
 80124c4:	d023      	beq.n	801250e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80124c6:	e06a      	b.n	801259e <CDC_ProcessTransmission+0xfc>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124cc:	68fa      	ldr	r2, [r7, #12]
 80124ce:	8b12      	ldrh	r2, [r2, #24]
 80124d0:	4293      	cmp	r3, r2
 80124d2:	d90b      	bls.n	80124ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	69d9      	ldr	r1, [r3, #28]
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	8b1a      	ldrh	r2, [r3, #24]
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	7b5b      	ldrb	r3, [r3, #13]
 80124e0:	2001      	movs	r0, #1
 80124e2:	9000      	str	r0, [sp, #0]
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f001 fe28 	bl	801413a <USBH_BulkSendData>
 80124ea:	e00b      	b.n	8012504 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80124f4:	b29a      	uxth	r2, r3
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	7b5b      	ldrb	r3, [r3, #13]
 80124fa:	2001      	movs	r0, #1
 80124fc:	9000      	str	r0, [sp, #0]
 80124fe:	6878      	ldr	r0, [r7, #4]
 8012500:	f001 fe1b 	bl	801413a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	2202      	movs	r2, #2
 8012508:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 801250c:	e047      	b.n	801259e <CDC_ProcessTransmission+0xfc>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	7b5b      	ldrb	r3, [r3, #13]
 8012512:	4619      	mov	r1, r3
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f007 fa65 	bl	80199e4 <USBH_LL_GetURBState>
 801251a:	4603      	mov	r3, r0
 801251c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801251e:	7afb      	ldrb	r3, [r7, #11]
 8012520:	2b01      	cmp	r3, #1
 8012522:	d12e      	bne.n	8012582 <CDC_ProcessTransmission+0xe0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	8b12      	ldrh	r2, [r2, #24]
 801252c:	4293      	cmp	r3, r2
 801252e:	d90e      	bls.n	801254e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012534:	68fa      	ldr	r2, [r7, #12]
 8012536:	8b12      	ldrh	r2, [r2, #24]
 8012538:	1a9a      	subs	r2, r3, r2
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	69db      	ldr	r3, [r3, #28]
 8012542:	68fa      	ldr	r2, [r7, #12]
 8012544:	8b12      	ldrh	r2, [r2, #24]
 8012546:	441a      	add	r2, r3
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	61da      	str	r2, [r3, #28]
 801254c:	e002      	b.n	8012554 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	2200      	movs	r2, #0
 8012552:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012558:	2b00      	cmp	r3, #0
 801255a:	d004      	beq.n	8012566 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	2201      	movs	r2, #1
 8012560:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8012564:	e006      	b.n	8012574 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2200      	movs	r2, #0
 801256a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	f000 f87a 	bl	8012668 <USBH_CDC_TransmitCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012574:	2300      	movs	r3, #0
 8012576:	2200      	movs	r2, #0
 8012578:	2104      	movs	r1, #4
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 febc 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8012580:	e00c      	b.n	801259c <CDC_ProcessTransmission+0xfa>
        if (URB_Status == USBH_URB_NOTREADY)
 8012582:	7afb      	ldrb	r3, [r7, #11]
 8012584:	2b02      	cmp	r3, #2
 8012586:	d109      	bne.n	801259c <CDC_ProcessTransmission+0xfa>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	2201      	movs	r2, #1
 801258c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012590:	2300      	movs	r3, #0
 8012592:	2200      	movs	r2, #0
 8012594:	2104      	movs	r1, #4
 8012596:	6878      	ldr	r0, [r7, #4]
 8012598:	f000 feae 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 801259c:	bf00      	nop
  }
}
 801259e:	bf00      	nop
 80125a0:	3710      	adds	r7, #16
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}

080125a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b086      	sub	sp, #24
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80125b4:	69db      	ldr	r3, [r3, #28]
 80125b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80125b8:	2300      	movs	r3, #0
 80125ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80125c2:	2b03      	cmp	r3, #3
 80125c4:	d002      	beq.n	80125cc <CDC_ProcessReception+0x26>
 80125c6:	2b04      	cmp	r3, #4
 80125c8:	d00e      	beq.n	80125e8 <CDC_ProcessReception+0x42>
        /* .. */
      }
      break;

    default:
      break;
 80125ca:	e049      	b.n	8012660 <CDC_ProcessReception+0xba>
      (void)USBH_BulkReceiveData(phost,
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	6a19      	ldr	r1, [r3, #32]
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	8b5a      	ldrh	r2, [r3, #26]
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	7b1b      	ldrb	r3, [r3, #12]
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f001 fdd3 	bl	8014184 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	2204      	movs	r2, #4
 80125e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80125e6:	e03b      	b.n	8012660 <CDC_ProcessReception+0xba>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	7b1b      	ldrb	r3, [r3, #12]
 80125ec:	4619      	mov	r1, r3
 80125ee:	6878      	ldr	r0, [r7, #4]
 80125f0:	f007 f9f8 	bl	80199e4 <USBH_LL_GetURBState>
 80125f4:	4603      	mov	r3, r0
 80125f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80125f8:	7cfb      	ldrb	r3, [r7, #19]
 80125fa:	2b01      	cmp	r3, #1
 80125fc:	d12f      	bne.n	801265e <CDC_ProcessReception+0xb8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	7b1b      	ldrb	r3, [r3, #12]
 8012602:	4619      	mov	r1, r3
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f007 f95b 	bl	80198c0 <USBH_LL_GetLastXferSize>
 801260a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012610:	68fa      	ldr	r2, [r7, #12]
 8012612:	429a      	cmp	r2, r3
 8012614:	d016      	beq.n	8012644 <CDC_ProcessReception+0x9e>
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	8b5b      	ldrh	r3, [r3, #26]
 801261a:	461a      	mov	r2, r3
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	4293      	cmp	r3, r2
 8012620:	d110      	bne.n	8012644 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	1ad2      	subs	r2, r2, r3
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 801262e:	697b      	ldr	r3, [r7, #20]
 8012630:	6a1a      	ldr	r2, [r3, #32]
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	441a      	add	r2, r3
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	2203      	movs	r2, #3
 801263e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8012642:	e006      	b.n	8012652 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	2200      	movs	r2, #0
 8012648:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 f815 	bl	801267c <USBH_CDC_ReceiveCallback>
        USBH_OS_PutMessage(phost, USBH_CLASS_EVENT, 0U, 0U);
 8012652:	2300      	movs	r3, #0
 8012654:	2200      	movs	r2, #0
 8012656:	2104      	movs	r1, #4
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f000 fe4d 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 801265e:	bf00      	nop
  }
}
 8012660:	bf00      	nop
 8012662:	3718      	adds	r7, #24
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012670:	bf00      	nop
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr

0801267c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 801267c:	b480      	push	{r7}
 801267e:	b083      	sub	sp, #12
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012684:	bf00      	nop
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8012698:	bf00      	nop
 801269a:	370c      	adds	r7, #12
 801269c:	46bd      	mov	sp, r7
 801269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a2:	4770      	bx	lr

080126a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80126a4:	b5b0      	push	{r4, r5, r7, lr}
 80126a6:	b090      	sub	sp, #64	@ 0x40
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	4613      	mov	r3, r2
 80126b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d101      	bne.n	80126bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80126b8:	2302      	movs	r3, #2
 80126ba:	e04d      	b.n	8012758 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	79fa      	ldrb	r2, [r7, #7]
 80126c0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	2200      	movs	r2, #0
 80126c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	2200      	movs	r2, #0
 80126d0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80126d4:	68f8      	ldr	r0, [r7, #12]
 80126d6:	f000 f847 	bl	8012768 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2200      	movs	r2, #0
 80126de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2200      	movs	r2, #0
 80126e6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	2200      	movs	r2, #0
 80126ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	2200      	movs	r2, #0
 80126f6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d003      	beq.n	8012708 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	68ba      	ldr	r2, [r7, #8]
 8012704:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8012708:	4b15      	ldr	r3, [pc, #84]	@ (8012760 <USBH_Init+0xbc>)
 801270a:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801270e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8012714:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012718:	2100      	movs	r1, #0
 801271a:	4618      	mov	r0, r3
 801271c:	f004 f930 	bl	8016980 <osMessageCreate>
 8012720:	4602      	mov	r2, r0
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8012728:	4b0e      	ldr	r3, [pc, #56]	@ (8012764 <USBH_Init+0xc0>)
 801272a:	f107 0414 	add.w	r4, r7, #20
 801272e:	461d      	mov	r5, r3
 8012730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 801273c:	f107 0314 	add.w	r3, r7, #20
 8012740:	68f9      	ldr	r1, [r7, #12]
 8012742:	4618      	mov	r0, r3
 8012744:	f004 f838 	bl	80167b8 <osThreadCreate>
 8012748:	4602      	mov	r2, r0
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8012750:	68f8      	ldr	r0, [r7, #12]
 8012752:	f007 f801 	bl	8019758 <USBH_LL_Init>

  return USBH_OK;
 8012756:	2300      	movs	r3, #0
}
 8012758:	4618      	mov	r0, r3
 801275a:	3740      	adds	r7, #64	@ 0x40
 801275c:	46bd      	mov	sp, r7
 801275e:	bdb0      	pop	{r4, r5, r7, pc}
 8012760:	0801c2dc 	.word	0x0801c2dc
 8012764:	0801c2f8 	.word	0x0801c2f8

08012768 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012770:	2300      	movs	r3, #0
 8012772:	60fb      	str	r3, [r7, #12]
 8012774:	e009      	b.n	801278a <DeInitStateMachine+0x22>
  {
    phost->Pipes[i] = 0U;
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	33e0      	adds	r3, #224	@ 0xe0
 801277c:	009b      	lsls	r3, r3, #2
 801277e:	4413      	add	r3, r2
 8012780:	2200      	movs	r2, #0
 8012782:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	3301      	adds	r3, #1
 8012788:	60fb      	str	r3, [r7, #12]
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2b0f      	cmp	r3, #15
 801278e:	d9f2      	bls.n	8012776 <DeInitStateMachine+0xe>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8012790:	2300      	movs	r3, #0
 8012792:	60fb      	str	r3, [r7, #12]
 8012794:	e009      	b.n	80127aa <DeInitStateMachine+0x42>
  {
    phost->device.Data[i] = 0U;
 8012796:	687a      	ldr	r2, [r7, #4]
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	4413      	add	r3, r2
 801279c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80127a0:	2200      	movs	r2, #0
 80127a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	3301      	adds	r3, #1
 80127a8:	60fb      	str	r3, [r7, #12]
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80127b0:	d3f1      	bcc.n	8012796 <DeInitStateMachine+0x2e>
  }

  phost->gState = HOST_IDLE;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	2200      	movs	r2, #0
 80127b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2201      	movs	r2, #1
 80127c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2200      	movs	r2, #0
 80127c8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2201      	movs	r2, #1
 80127d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2240      	movs	r2, #64	@ 0x40
 80127d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	2200      	movs	r2, #0
 80127dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	2200      	movs	r2, #0
 80127e2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	2201      	movs	r2, #1
 80127ea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2200      	movs	r2, #0
 80127f2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2200      	movs	r2, #0
 80127fa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	331c      	adds	r3, #28
 8012802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012806:	2100      	movs	r1, #0
 8012808:	4618      	mov	r0, r3
 801280a:	f007 faed 	bl	8019de8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8012814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012818:	2100      	movs	r1, #0
 801281a:	4618      	mov	r0, r3
 801281c:	f007 fae4 	bl	8019de8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8012826:	2212      	movs	r2, #18
 8012828:	2100      	movs	r1, #0
 801282a:	4618      	mov	r0, r3
 801282c:	f007 fadc 	bl	8019de8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8012836:	223e      	movs	r2, #62	@ 0x3e
 8012838:	2100      	movs	r1, #0
 801283a:	4618      	mov	r0, r3
 801283c:	f007 fad4 	bl	8019de8 <memset>

  return USBH_OK;
 8012840:	2300      	movs	r3, #0
}
 8012842:	4618      	mov	r0, r3
 8012844:	3710      	adds	r7, #16
 8012846:	46bd      	mov	sp, r7
 8012848:	bd80      	pop	{r7, pc}

0801284a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 801284a:	b480      	push	{r7}
 801284c:	b085      	sub	sp, #20
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
 8012852:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8012854:	2300      	movs	r3, #0
 8012856:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d016      	beq.n	801288c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8012864:	2b00      	cmp	r3, #0
 8012866:	d10e      	bne.n	8012886 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 801286e:	1c59      	adds	r1, r3, #1
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8012876:	687a      	ldr	r2, [r7, #4]
 8012878:	33de      	adds	r3, #222	@ 0xde
 801287a:	6839      	ldr	r1, [r7, #0]
 801287c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8012880:	2300      	movs	r3, #0
 8012882:	73fb      	strb	r3, [r7, #15]
 8012884:	e004      	b.n	8012890 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8012886:	2302      	movs	r3, #2
 8012888:	73fb      	strb	r3, [r7, #15]
 801288a:	e001      	b.n	8012890 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801288c:	2302      	movs	r3, #2
 801288e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8012890:	7bfb      	ldrb	r3, [r7, #15]
}
 8012892:	4618      	mov	r0, r3
 8012894:	3714      	adds	r7, #20
 8012896:	46bd      	mov	sp, r7
 8012898:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289c:	4770      	bx	lr

0801289e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801289e:	b480      	push	{r7}
 80128a0:	b085      	sub	sp, #20
 80128a2:	af00      	add	r7, sp, #0
 80128a4:	6078      	str	r0, [r7, #4]
 80128a6:	460b      	mov	r3, r1
 80128a8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80128aa:	2300      	movs	r3, #0
 80128ac:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80128b4:	78fa      	ldrb	r2, [r7, #3]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d204      	bcs.n	80128c4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	78fa      	ldrb	r2, [r7, #3]
 80128be:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80128c2:	e001      	b.n	80128c8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80128c4:	2302      	movs	r3, #2
 80128c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80128c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	3714      	adds	r7, #20
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr

080128d6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80128d6:	b480      	push	{r7}
 80128d8:	b087      	sub	sp, #28
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
 80128de:	4608      	mov	r0, r1
 80128e0:	4611      	mov	r1, r2
 80128e2:	461a      	mov	r2, r3
 80128e4:	4603      	mov	r3, r0
 80128e6:	70fb      	strb	r3, [r7, #3]
 80128e8:	460b      	mov	r3, r1
 80128ea:	70bb      	strb	r3, [r7, #2]
 80128ec:	4613      	mov	r3, r2
 80128ee:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80128f0:	2300      	movs	r3, #0
 80128f2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80128f4:	2300      	movs	r3, #0
 80128f6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80128fe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8012900:	e025      	b.n	801294e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8012902:	7dfb      	ldrb	r3, [r7, #23]
 8012904:	221a      	movs	r2, #26
 8012906:	fb02 f303 	mul.w	r3, r2, r3
 801290a:	3308      	adds	r3, #8
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	4413      	add	r3, r2
 8012910:	3302      	adds	r3, #2
 8012912:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	795b      	ldrb	r3, [r3, #5]
 8012918:	78fa      	ldrb	r2, [r7, #3]
 801291a:	429a      	cmp	r2, r3
 801291c:	d002      	beq.n	8012924 <USBH_FindInterface+0x4e>
 801291e:	78fb      	ldrb	r3, [r7, #3]
 8012920:	2bff      	cmp	r3, #255	@ 0xff
 8012922:	d111      	bne.n	8012948 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012924:	693b      	ldr	r3, [r7, #16]
 8012926:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8012928:	78ba      	ldrb	r2, [r7, #2]
 801292a:	429a      	cmp	r2, r3
 801292c:	d002      	beq.n	8012934 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 801292e:	78bb      	ldrb	r3, [r7, #2]
 8012930:	2bff      	cmp	r3, #255	@ 0xff
 8012932:	d109      	bne.n	8012948 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8012938:	787a      	ldrb	r2, [r7, #1]
 801293a:	429a      	cmp	r2, r3
 801293c:	d002      	beq.n	8012944 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 801293e:	787b      	ldrb	r3, [r7, #1]
 8012940:	2bff      	cmp	r3, #255	@ 0xff
 8012942:	d101      	bne.n	8012948 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8012944:	7dfb      	ldrb	r3, [r7, #23]
 8012946:	e006      	b.n	8012956 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8012948:	7dfb      	ldrb	r3, [r7, #23]
 801294a:	3301      	adds	r3, #1
 801294c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 801294e:	7dfb      	ldrb	r3, [r7, #23]
 8012950:	2b01      	cmp	r3, #1
 8012952:	d9d6      	bls.n	8012902 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8012954:	23ff      	movs	r3, #255	@ 0xff
}
 8012956:	4618      	mov	r0, r3
 8012958:	371c      	adds	r7, #28
 801295a:	46bd      	mov	sp, r7
 801295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012960:	4770      	bx	lr

08012962 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b082      	sub	sp, #8
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f006 ff30 	bl	80197d0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8012970:	2101      	movs	r1, #1
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f007 f849 	bl	8019a0a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8012978:	2300      	movs	r3, #0
}
 801297a:	4618      	mov	r0, r3
 801297c:	3708      	adds	r7, #8
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
	...

08012984 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b088      	sub	sp, #32
 8012988:	af04      	add	r7, sp, #16
 801298a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 801298c:	2302      	movs	r3, #2
 801298e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8012990:	2300      	movs	r3, #0
 8012992:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 801299a:	b2db      	uxtb	r3, r3
 801299c:	2b01      	cmp	r3, #1
 801299e:	d102      	bne.n	80129a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2203      	movs	r2, #3
 80129a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	b2db      	uxtb	r3, r3
 80129ac:	2b0b      	cmp	r3, #11
 80129ae:	f200 81f5 	bhi.w	8012d9c <USBH_Process+0x418>
 80129b2:	a201      	add	r2, pc, #4	@ (adr r2, 80129b8 <USBH_Process+0x34>)
 80129b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129b8:	080129e9 	.word	0x080129e9
 80129bc:	08012a27 	.word	0x08012a27
 80129c0:	08012a9d 	.word	0x08012a9d
 80129c4:	08012d2b 	.word	0x08012d2b
 80129c8:	08012d9d 	.word	0x08012d9d
 80129cc:	08012b49 	.word	0x08012b49
 80129d0:	08012cc5 	.word	0x08012cc5
 80129d4:	08012b8b 	.word	0x08012b8b
 80129d8:	08012bb7 	.word	0x08012bb7
 80129dc:	08012bdf 	.word	0x08012bdf
 80129e0:	08012c2d 	.word	0x08012c2d
 80129e4:	08012d13 	.word	0x08012d13
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	f000 81d5 	beq.w	8012da0 <USBH_Process+0x41c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2201      	movs	r2, #1
 80129fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80129fc:	20c8      	movs	r0, #200	@ 0xc8
 80129fe:	f007 f84e 	bl	8019a9e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f006 ff41 	bl	801988a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	2200      	movs	r2, #0
 8012a14:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012a18:	2300      	movs	r3, #0
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	2101      	movs	r1, #1
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f000 fc6a 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012a24:	e1bc      	b.n	8012da0 <USBH_Process+0x41c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	2b01      	cmp	r3, #1
 8012a30:	d107      	bne.n	8012a42 <USBH_Process+0xbe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2200      	movs	r2, #0
 8012a36:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2202      	movs	r2, #2
 8012a3e:	701a      	strb	r2, [r3, #0]
 8012a40:	e025      	b.n	8012a8e <USBH_Process+0x10a>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012a48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012a4c:	d914      	bls.n	8012a78 <USBH_Process+0xf4>
        {
          phost->device.RstCnt++;
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8012a54:	3301      	adds	r3, #1
 8012a56:	b2da      	uxtb	r2, r3
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8012a64:	2b03      	cmp	r3, #3
 8012a66:	d903      	bls.n	8012a70 <USBH_Process+0xec>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	220d      	movs	r2, #13
 8012a6c:	701a      	strb	r2, [r3, #0]
 8012a6e:	e00e      	b.n	8012a8e <USBH_Process+0x10a>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	2200      	movs	r2, #0
 8012a74:	701a      	strb	r2, [r3, #0]
 8012a76:	e00a      	b.n	8012a8e <USBH_Process+0x10a>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8012a7e:	f103 020a 	add.w	r2, r3, #10
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8012a88:	200a      	movs	r0, #10
 8012a8a:	f007 f808 	bl	8019a9e <USBH_Delay>
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012a8e:	2300      	movs	r3, #0
 8012a90:	2200      	movs	r2, #0
 8012a92:	2101      	movs	r1, #1
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f000 fc2f 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012a9a:	e188      	b.n	8012dae <USBH_Process+0x42a>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d005      	beq.n	8012ab2 <USBH_Process+0x12e>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012aac:	2104      	movs	r1, #4
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8012ab2:	2064      	movs	r0, #100	@ 0x64
 8012ab4:	f006 fff3 	bl	8019a9e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f006 febf 	bl	801983c <USBH_LL_GetSpeed>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimeout = USBH_NAK_SOF_COUNT;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->gState = HOST_ENUMERATION;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2205      	movs	r2, #5
 8012acc:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8012ace:	2100      	movs	r1, #0
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f001 fba4 	bl	801421e <USBH_AllocPipe>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	461a      	mov	r2, r3
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8012ade:	2180      	movs	r1, #128	@ 0x80
 8012ae0:	6878      	ldr	r0, [r7, #4]
 8012ae2:	f001 fb9c 	bl	801421e <USBH_AllocPipe>
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	461a      	mov	r2, r3
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	7919      	ldrb	r1, [r3, #4]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8012b02:	9202      	str	r2, [sp, #8]
 8012b04:	2200      	movs	r2, #0
 8012b06:	9201      	str	r2, [sp, #4]
 8012b08:	9300      	str	r3, [sp, #0]
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	2280      	movs	r2, #128	@ 0x80
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f001 fb56 	bl	80141c0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	7959      	ldrb	r1, [r3, #5]
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8012b24:	687a      	ldr	r2, [r7, #4]
 8012b26:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8012b28:	9202      	str	r2, [sp, #8]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	9201      	str	r2, [sp, #4]
 8012b2e:	9300      	str	r3, [sp, #0]
 8012b30:	4603      	mov	r3, r0
 8012b32:	2200      	movs	r2, #0
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f001 fb43 	bl	80141c0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	2101      	movs	r1, #1
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 fbd9 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012b46:	e132      	b.n	8012dae <USBH_Process+0x42a>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f000 f935 	bl	8012db8 <USBH_HandleEnum>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8012b52:	7bbb      	ldrb	r3, [r7, #14]
 8012b54:	b2db      	uxtb	r3, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f040 8124 	bne.w	8012da4 <USBH_Process+0x420>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	d103      	bne.n	8012b76 <USBH_Process+0x1f2>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2208      	movs	r2, #8
 8012b72:	701a      	strb	r2, [r3, #0]
 8012b74:	e002      	b.n	8012b7c <USBH_Process+0x1f8>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2207      	movs	r2, #7
 8012b7a:	701a      	strb	r2, [r3, #0]
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	2200      	movs	r2, #0
 8012b80:	2105      	movs	r1, #5
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f000 fbb8 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8012b88:	e10c      	b.n	8012da4 <USBH_Process+0x420>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	f000 8109 	beq.w	8012da8 <USBH_Process+0x424>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012b9c:	2101      	movs	r1, #1
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	2208      	movs	r2, #8
 8012ba6:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012ba8:	2300      	movs	r3, #0
 8012baa:	2200      	movs	r2, #0
 8012bac:	2105      	movs	r1, #5
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f000 fba2 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      }
    }
    break;
 8012bb4:	e0f8      	b.n	8012da8 <USBH_Process+0x424>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	6878      	ldr	r0, [r7, #4]
 8012bc0:	f000 fcc8 	bl	8013554 <USBH_SetCfg>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d102      	bne.n	8012bd0 <USBH_Process+0x24c>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2209      	movs	r2, #9
 8012bce:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	2200      	movs	r2, #0
 8012bd4:	2101      	movs	r1, #1
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	f000 fb8e 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012bdc:	e0e7      	b.n	8012dae <USBH_Process+0x42a>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8012be4:	f003 0320 	and.w	r3, r3, #32
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d015      	beq.n	8012c18 <USBH_Process+0x294>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8012bec:	2101      	movs	r1, #1
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f000 fcd3 	bl	801359a <USBH_SetFeature>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8012bf8:	7bbb      	ldrb	r3, [r7, #14]
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d103      	bne.n	8012c08 <USBH_Process+0x284>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	220a      	movs	r2, #10
 8012c04:	701a      	strb	r2, [r3, #0]
 8012c06:	e00a      	b.n	8012c1e <USBH_Process+0x29a>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8012c08:	7bbb      	ldrb	r3, [r7, #14]
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	2b03      	cmp	r3, #3
 8012c0e:	d106      	bne.n	8012c1e <USBH_Process+0x29a>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	220a      	movs	r2, #10
 8012c14:	701a      	strb	r2, [r3, #0]
 8012c16:	e002      	b.n	8012c1e <USBH_Process+0x29a>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	220a      	movs	r2, #10
 8012c1c:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012c1e:	2300      	movs	r3, #0
 8012c20:	2200      	movs	r2, #0
 8012c22:	2101      	movs	r1, #1
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f000 fb67 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012c2a:	e0c0      	b.n	8012dae <USBH_Process+0x42a>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d03f      	beq.n	8012cb6 <USBH_Process+0x332>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012c3e:	2300      	movs	r3, #0
 8012c40:	73fb      	strb	r3, [r7, #15]
 8012c42:	e016      	b.n	8012c72 <USBH_Process+0x2ee>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8012c44:	7bfa      	ldrb	r2, [r7, #15]
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	32de      	adds	r2, #222	@ 0xde
 8012c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c4e:	791a      	ldrb	r2, [r3, #4]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d108      	bne.n	8012c6c <USBH_Process+0x2e8>
          {
            phost->pActiveClass = phost->pClass[idx];
 8012c5a:	7bfa      	ldrb	r2, [r7, #15]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	32de      	adds	r2, #222	@ 0xde
 8012c60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8012c6a:	e005      	b.n	8012c78 <USBH_Process+0x2f4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8012c6c:	7bfb      	ldrb	r3, [r7, #15]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	73fb      	strb	r3, [r7, #15]
 8012c72:	7bfb      	ldrb	r3, [r7, #15]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d0e5      	beq.n	8012c44 <USBH_Process+0x2c0>
          }
        }

        if (phost->pActiveClass != NULL)
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d016      	beq.n	8012cb0 <USBH_Process+0x32c>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012c88:	689b      	ldr	r3, [r3, #8]
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	4798      	blx	r3
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d109      	bne.n	8012ca8 <USBH_Process+0x324>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2206      	movs	r2, #6
 8012c98:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012ca0:	2103      	movs	r1, #3
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	4798      	blx	r3
 8012ca6:	e006      	b.n	8012cb6 <USBH_Process+0x332>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	220d      	movs	r2, #13
 8012cac:	701a      	strb	r2, [r3, #0]
 8012cae:	e002      	b.n	8012cb6 <USBH_Process+0x332>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	220d      	movs	r2, #13
 8012cb4:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	2200      	movs	r2, #0
 8012cba:	2105      	movs	r1, #5
 8012cbc:	6878      	ldr	r0, [r7, #4]
 8012cbe:	f000 fb1b 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012cc2:	e074      	b.n	8012dae <USBH_Process+0x42a>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d017      	beq.n	8012cfe <USBH_Process+0x37a>
      {
        status = phost->pActiveClass->Requests(phost);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012cd4:	691b      	ldr	r3, [r3, #16]
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	4798      	blx	r3
 8012cda:	4603      	mov	r3, r0
 8012cdc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8012cde:	7bbb      	ldrb	r3, [r7, #14]
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d103      	bne.n	8012cee <USBH_Process+0x36a>
        {
          phost->gState = HOST_CLASS;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	220b      	movs	r2, #11
 8012cea:	701a      	strb	r2, [r3, #0]
 8012cec:	e00a      	b.n	8012d04 <USBH_Process+0x380>
        }
        else if (status == USBH_FAIL)
 8012cee:	7bbb      	ldrb	r3, [r7, #14]
 8012cf0:	b2db      	uxtb	r3, r3
 8012cf2:	2b02      	cmp	r3, #2
 8012cf4:	d106      	bne.n	8012d04 <USBH_Process+0x380>
        {
          phost->gState = HOST_ABORT_STATE;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	220d      	movs	r2, #13
 8012cfa:	701a      	strb	r2, [r3, #0]
 8012cfc:	e002      	b.n	8012d04 <USBH_Process+0x380>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	220d      	movs	r2, #13
 8012d02:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8012d04:	2300      	movs	r3, #0
 8012d06:	2200      	movs	r2, #0
 8012d08:	2105      	movs	r1, #5
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f000 faf4 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012d10:	e04d      	b.n	8012dae <USBH_Process+0x42a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d047      	beq.n	8012dac <USBH_Process+0x428>
      {
        phost->pActiveClass->BgndProcess(phost);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d22:	695b      	ldr	r3, [r3, #20]
 8012d24:	6878      	ldr	r0, [r7, #4]
 8012d26:	4798      	blx	r3
      }
      break;
 8012d28:	e040      	b.n	8012dac <USBH_Process+0x428>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f7ff fd18 	bl	8012768 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d009      	beq.n	8012d56 <USBH_Process+0x3d2>
      {
        phost->pActiveClass->DeInit(phost);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012d48:	68db      	ldr	r3, [r3, #12]
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	2200      	movs	r2, #0
 8012d52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d005      	beq.n	8012d6c <USBH_Process+0x3e8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8012d66:	2105      	movs	r1, #5
 8012d68:	6878      	ldr	r0, [r7, #4]
 8012d6a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d107      	bne.n	8012d88 <USBH_Process+0x404>
      {
        phost->device.is_ReEnumerated = 0U;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2200      	movs	r2, #0
 8012d7c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff fdee 	bl	8012962 <USBH_Start>
 8012d86:	e002      	b.n	8012d8e <USBH_Process+0x40a>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8012d88:	6878      	ldr	r0, [r7, #4]
 8012d8a:	f006 fd21 	bl	80197d0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012d8e:	2300      	movs	r3, #0
 8012d90:	2200      	movs	r2, #0
 8012d92:	2101      	movs	r1, #1
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 faaf 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */
      break;
 8012d9a:	e008      	b.n	8012dae <USBH_Process+0x42a>

    case HOST_ABORT_STATE:
    default :
      break;
 8012d9c:	bf00      	nop
 8012d9e:	e006      	b.n	8012dae <USBH_Process+0x42a>
      break;
 8012da0:	bf00      	nop
 8012da2:	e004      	b.n	8012dae <USBH_Process+0x42a>
      break;
 8012da4:	bf00      	nop
 8012da6:	e002      	b.n	8012dae <USBH_Process+0x42a>
    break;
 8012da8:	bf00      	nop
 8012daa:	e000      	b.n	8012dae <USBH_Process+0x42a>
      break;
 8012dac:	bf00      	nop
  }
  return USBH_OK;
 8012dae:	2300      	movs	r3, #0
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3710      	adds	r7, #16
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}

08012db8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b088      	sub	sp, #32
 8012dbc:	af04      	add	r7, sp, #16
 8012dbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	785b      	ldrb	r3, [r3, #1]
 8012dcc:	2b07      	cmp	r3, #7
 8012dce:	f200 81db 	bhi.w	8013188 <USBH_HandleEnum+0x3d0>
 8012dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8012dd8 <USBH_HandleEnum+0x20>)
 8012dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dd8:	08012df9 	.word	0x08012df9
 8012ddc:	08012eb3 	.word	0x08012eb3
 8012de0:	08012f1d 	.word	0x08012f1d
 8012de4:	08012fa7 	.word	0x08012fa7
 8012de8:	08013011 	.word	0x08013011
 8012dec:	08013081 	.word	0x08013081
 8012df0:	080130eb 	.word	0x080130eb
 8012df4:	08013149 	.word	0x08013149
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8012df8:	2108      	movs	r1, #8
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 fac7 	bl	801338e <USBH_Get_DevDesc>
 8012e00:	4603      	mov	r3, r0
 8012e02:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012e04:	7bbb      	ldrb	r3, [r7, #14]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d12e      	bne.n	8012e68 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2201      	movs	r2, #1
 8012e18:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	7919      	ldrb	r1, [r3, #4]
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012e2a:	687a      	ldr	r2, [r7, #4]
 8012e2c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8012e2e:	9202      	str	r2, [sp, #8]
 8012e30:	2200      	movs	r2, #0
 8012e32:	9201      	str	r2, [sp, #4]
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	4603      	mov	r3, r0
 8012e38:	2280      	movs	r2, #128	@ 0x80
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f001 f9c0 	bl	80141c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	7959      	ldrb	r1, [r3, #5]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012e50:	687a      	ldr	r2, [r7, #4]
 8012e52:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012e54:	9202      	str	r2, [sp, #8]
 8012e56:	2200      	movs	r2, #0
 8012e58:	9201      	str	r2, [sp, #4]
 8012e5a:	9300      	str	r3, [sp, #0]
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	2200      	movs	r2, #0
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f001 f9ad 	bl	80141c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012e66:	e191      	b.n	801318c <USBH_HandleEnum+0x3d4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012e68:	7bbb      	ldrb	r3, [r7, #14]
 8012e6a:	2b03      	cmp	r3, #3
 8012e6c:	f040 818e 	bne.w	801318c <USBH_HandleEnum+0x3d4>
        phost->device.EnumCnt++;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012e76:	3301      	adds	r3, #1
 8012e78:	b2da      	uxtb	r2, r3
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012e86:	2b03      	cmp	r3, #3
 8012e88:	d903      	bls.n	8012e92 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	220d      	movs	r2, #13
 8012e8e:	701a      	strb	r2, [r3, #0]
      break;
 8012e90:	e17c      	b.n	801318c <USBH_HandleEnum+0x3d4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	795b      	ldrb	r3, [r3, #5]
 8012e96:	4619      	mov	r1, r3
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f001 f9e1 	bl	8014260 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	791b      	ldrb	r3, [r3, #4]
 8012ea2:	4619      	mov	r1, r3
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f001 f9db 	bl	8014260 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	701a      	strb	r2, [r3, #0]
      break;
 8012eb0:	e16c      	b.n	801318c <USBH_HandleEnum+0x3d4>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8012eb2:	2112      	movs	r1, #18
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 fa6a 	bl	801338e <USBH_Get_DevDesc>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012ebe:	7bbb      	ldrb	r3, [r7, #14]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d103      	bne.n	8012ecc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2202      	movs	r2, #2
 8012ec8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012eca:	e161      	b.n	8013190 <USBH_HandleEnum+0x3d8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012ecc:	7bbb      	ldrb	r3, [r7, #14]
 8012ece:	2b03      	cmp	r3, #3
 8012ed0:	f040 815e 	bne.w	8013190 <USBH_HandleEnum+0x3d8>
        phost->device.EnumCnt++;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012eda:	3301      	adds	r3, #1
 8012edc:	b2da      	uxtb	r2, r3
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012eea:	2b03      	cmp	r3, #3
 8012eec:	d903      	bls.n	8012ef6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	220d      	movs	r2, #13
 8012ef2:	701a      	strb	r2, [r3, #0]
      break;
 8012ef4:	e14c      	b.n	8013190 <USBH_HandleEnum+0x3d8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	795b      	ldrb	r3, [r3, #5]
 8012efa:	4619      	mov	r1, r3
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f001 f9af 	bl	8014260 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	791b      	ldrb	r3, [r3, #4]
 8012f06:	4619      	mov	r1, r3
 8012f08:	6878      	ldr	r0, [r7, #4]
 8012f0a:	f001 f9a9 	bl	8014260 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2200      	movs	r2, #0
 8012f12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	2200      	movs	r2, #0
 8012f18:	701a      	strb	r2, [r3, #0]
      break;
 8012f1a:	e139      	b.n	8013190 <USBH_HandleEnum+0x3d8>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8012f1c:	2101      	movs	r1, #1
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 faf4 	bl	801350c <USBH_SetAddress>
 8012f24:	4603      	mov	r3, r0
 8012f26:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012f28:	7bbb      	ldrb	r3, [r7, #14]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d130      	bne.n	8012f90 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8012f2e:	2002      	movs	r0, #2
 8012f30:	f006 fdb5 	bl	8019a9e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	2201      	movs	r2, #1
 8012f38:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2203      	movs	r2, #3
 8012f40:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	7919      	ldrb	r1, [r3, #4]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8012f56:	9202      	str	r2, [sp, #8]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	9201      	str	r2, [sp, #4]
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	4603      	mov	r3, r0
 8012f60:	2280      	movs	r2, #128	@ 0x80
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f001 f92c 	bl	80141c0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	7959      	ldrb	r1, [r3, #5]
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8012f7c:	9202      	str	r2, [sp, #8]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	9201      	str	r2, [sp, #4]
 8012f82:	9300      	str	r3, [sp, #0]
 8012f84:	4603      	mov	r3, r0
 8012f86:	2200      	movs	r2, #0
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f001 f919 	bl	80141c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8012f8e:	e101      	b.n	8013194 <USBH_HandleEnum+0x3dc>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012f90:	7bbb      	ldrb	r3, [r7, #14]
 8012f92:	2b03      	cmp	r3, #3
 8012f94:	f040 80fe 	bne.w	8013194 <USBH_HandleEnum+0x3dc>
        phost->gState = HOST_ABORT_STATE;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	220d      	movs	r2, #13
 8012f9c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	705a      	strb	r2, [r3, #1]
      break;
 8012fa4:	e0f6      	b.n	8013194 <USBH_HandleEnum+0x3dc>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8012fa6:	2109      	movs	r1, #9
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f000 fa1c 	bl	80133e6 <USBH_Get_CfgDesc>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8012fb2:	7bbb      	ldrb	r3, [r7, #14]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d103      	bne.n	8012fc0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	2204      	movs	r2, #4
 8012fbc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8012fbe:	e0eb      	b.n	8013198 <USBH_HandleEnum+0x3e0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8012fc0:	7bbb      	ldrb	r3, [r7, #14]
 8012fc2:	2b03      	cmp	r3, #3
 8012fc4:	f040 80e8 	bne.w	8013198 <USBH_HandleEnum+0x3e0>
        phost->device.EnumCnt++;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012fce:	3301      	adds	r3, #1
 8012fd0:	b2da      	uxtb	r2, r3
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8012fde:	2b03      	cmp	r3, #3
 8012fe0:	d903      	bls.n	8012fea <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	220d      	movs	r2, #13
 8012fe6:	701a      	strb	r2, [r3, #0]
      break;
 8012fe8:	e0d6      	b.n	8013198 <USBH_HandleEnum+0x3e0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	795b      	ldrb	r3, [r3, #5]
 8012fee:	4619      	mov	r1, r3
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f001 f935 	bl	8014260 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	791b      	ldrb	r3, [r3, #4]
 8012ffa:	4619      	mov	r1, r3
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f001 f92f 	bl	8014260 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2200      	movs	r2, #0
 8013006:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2200      	movs	r2, #0
 801300c:	701a      	strb	r2, [r3, #0]
      break;
 801300e:	e0c3      	b.n	8013198 <USBH_HandleEnum+0x3e0>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8013016:	4619      	mov	r1, r3
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f000 f9e4 	bl	80133e6 <USBH_Get_CfgDesc>
 801301e:	4603      	mov	r3, r0
 8013020:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8013022:	7bbb      	ldrb	r3, [r7, #14]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d103      	bne.n	8013030 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2205      	movs	r2, #5
 801302c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801302e:	e0b5      	b.n	801319c <USBH_HandleEnum+0x3e4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013030:	7bbb      	ldrb	r3, [r7, #14]
 8013032:	2b03      	cmp	r3, #3
 8013034:	f040 80b2 	bne.w	801319c <USBH_HandleEnum+0x3e4>
        phost->device.EnumCnt++;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801303e:	3301      	adds	r3, #1
 8013040:	b2da      	uxtb	r2, r3
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 801304e:	2b03      	cmp	r3, #3
 8013050:	d903      	bls.n	801305a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	220d      	movs	r2, #13
 8013056:	701a      	strb	r2, [r3, #0]
      break;
 8013058:	e0a0      	b.n	801319c <USBH_HandleEnum+0x3e4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	795b      	ldrb	r3, [r3, #5]
 801305e:	4619      	mov	r1, r3
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f001 f8fd 	bl	8014260 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	791b      	ldrb	r3, [r3, #4]
 801306a:	4619      	mov	r1, r3
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f001 f8f7 	bl	8014260 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2200      	movs	r2, #0
 8013076:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2200      	movs	r2, #0
 801307c:	701a      	strb	r2, [r3, #0]
      break;
 801307e:	e08d      	b.n	801319c <USBH_HandleEnum+0x3e4>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8013086:	2b00      	cmp	r3, #0
 8013088:	d025      	beq.n	80130d6 <USBH_HandleEnum+0x31e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8013096:	23ff      	movs	r3, #255	@ 0xff
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f000 f9ce 	bl	801343a <USBH_Get_StringDesc>
 801309e:	4603      	mov	r3, r0
 80130a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80130a2:	7bbb      	ldrb	r3, [r7, #14]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d109      	bne.n	80130bc <USBH_HandleEnum+0x304>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2206      	movs	r2, #6
 80130ac:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80130ae:	2300      	movs	r3, #0
 80130b0:	2200      	movs	r2, #0
 80130b2:	2105      	movs	r1, #5
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f000 f91f 	bl	80132f8 <USBH_OS_PutMessage>

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 80130ba:	e071      	b.n	80131a0 <USBH_HandleEnum+0x3e8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80130bc:	7bbb      	ldrb	r3, [r7, #14]
 80130be:	2b03      	cmp	r3, #3
 80130c0:	d16e      	bne.n	80131a0 <USBH_HandleEnum+0x3e8>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2206      	movs	r2, #6
 80130c6:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80130c8:	2300      	movs	r3, #0
 80130ca:	2200      	movs	r2, #0
 80130cc:	2105      	movs	r1, #5
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 f912 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 80130d4:	e064      	b.n	80131a0 <USBH_HandleEnum+0x3e8>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2206      	movs	r2, #6
 80130da:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 80130dc:	2300      	movs	r3, #0
 80130de:	2200      	movs	r2, #0
 80130e0:	2105      	movs	r1, #5
 80130e2:	6878      	ldr	r0, [r7, #4]
 80130e4:	f000 f908 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 80130e8:	e05a      	b.n	80131a0 <USBH_HandleEnum+0x3e8>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d01f      	beq.n	8013134 <USBH_HandleEnum+0x37c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8013100:	23ff      	movs	r3, #255	@ 0xff
 8013102:	6878      	ldr	r0, [r7, #4]
 8013104:	f000 f999 	bl	801343a <USBH_Get_StringDesc>
 8013108:	4603      	mov	r3, r0
 801310a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801310c:	7bbb      	ldrb	r3, [r7, #14]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d103      	bne.n	801311a <USBH_HandleEnum+0x362>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2207      	movs	r2, #7
 8013116:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      }
      break;
 8013118:	e044      	b.n	80131a4 <USBH_HandleEnum+0x3ec>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801311a:	7bbb      	ldrb	r3, [r7, #14]
 801311c:	2b03      	cmp	r3, #3
 801311e:	d141      	bne.n	80131a4 <USBH_HandleEnum+0x3ec>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2207      	movs	r2, #7
 8013124:	705a      	strb	r2, [r3, #1]
          USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 8013126:	2300      	movs	r3, #0
 8013128:	2200      	movs	r2, #0
 801312a:	2105      	movs	r1, #5
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f000 f8e3 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013132:	e037      	b.n	80131a4 <USBH_HandleEnum+0x3ec>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2207      	movs	r2, #7
 8013138:	705a      	strb	r2, [r3, #1]
        USBH_OS_PutMessage(phost, USBH_STATE_CHANGED_EVENT, 0U, 0U);
 801313a:	2300      	movs	r3, #0
 801313c:	2200      	movs	r2, #0
 801313e:	2105      	movs	r1, #5
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f000 f8d9 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013146:	e02d      	b.n	80131a4 <USBH_HandleEnum+0x3ec>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 801314e:	2b00      	cmp	r3, #0
 8013150:	d017      	beq.n	8013182 <USBH_HandleEnum+0x3ca>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 801315e:	23ff      	movs	r3, #255	@ 0xff
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	f000 f96a 	bl	801343a <USBH_Get_StringDesc>
 8013166:	4603      	mov	r3, r0
 8013168:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801316a:	7bbb      	ldrb	r3, [r7, #14]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d102      	bne.n	8013176 <USBH_HandleEnum+0x3be>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8013170:	2300      	movs	r3, #0
 8013172:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8013174:	e018      	b.n	80131a8 <USBH_HandleEnum+0x3f0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8013176:	7bbb      	ldrb	r3, [r7, #14]
 8013178:	2b03      	cmp	r3, #3
 801317a:	d115      	bne.n	80131a8 <USBH_HandleEnum+0x3f0>
          Status = USBH_OK;
 801317c:	2300      	movs	r3, #0
 801317e:	73fb      	strb	r3, [r7, #15]
      break;
 8013180:	e012      	b.n	80131a8 <USBH_HandleEnum+0x3f0>
        Status = USBH_OK;
 8013182:	2300      	movs	r3, #0
 8013184:	73fb      	strb	r3, [r7, #15]
      break;
 8013186:	e00f      	b.n	80131a8 <USBH_HandleEnum+0x3f0>

    default:
      break;
 8013188:	bf00      	nop
 801318a:	e00e      	b.n	80131aa <USBH_HandleEnum+0x3f2>
      break;
 801318c:	bf00      	nop
 801318e:	e00c      	b.n	80131aa <USBH_HandleEnum+0x3f2>
      break;
 8013190:	bf00      	nop
 8013192:	e00a      	b.n	80131aa <USBH_HandleEnum+0x3f2>
      break;
 8013194:	bf00      	nop
 8013196:	e008      	b.n	80131aa <USBH_HandleEnum+0x3f2>
      break;
 8013198:	bf00      	nop
 801319a:	e006      	b.n	80131aa <USBH_HandleEnum+0x3f2>
      break;
 801319c:	bf00      	nop
 801319e:	e004      	b.n	80131aa <USBH_HandleEnum+0x3f2>
      break;
 80131a0:	bf00      	nop
 80131a2:	e002      	b.n	80131aa <USBH_HandleEnum+0x3f2>
      break;
 80131a4:	bf00      	nop
 80131a6:	e000      	b.n	80131aa <USBH_HandleEnum+0x3f2>
      break;
 80131a8:	bf00      	nop
  }
  return Status;
 80131aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3710      	adds	r7, #16
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}

080131b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b083      	sub	sp, #12
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	683a      	ldr	r2, [r7, #0]
 80131c2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80131c6:	bf00      	nop
 80131c8:	370c      	adds	r7, #12
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr

080131d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b082      	sub	sp, #8
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80131e0:	1c5a      	adds	r2, r3, #1
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f000 f804 	bl	80131f6 <USBH_HandleSof>
}
 80131ee:	bf00      	nop
 80131f0:	3708      	adds	r7, #8
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}

080131f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80131f6:	b580      	push	{r7, lr}
 80131f8:	b082      	sub	sp, #8
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	b2db      	uxtb	r3, r3
 8013204:	2b0b      	cmp	r3, #11
 8013206:	d10a      	bne.n	801321e <USBH_HandleSof+0x28>
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 801320e:	2b00      	cmp	r3, #0
 8013210:	d005      	beq.n	801321e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8013218:	699b      	ldr	r3, [r3, #24]
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	4798      	blx	r3
  }
}
 801321e:	bf00      	nop
 8013220:	3708      	adds	r7, #8
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}

08013226 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8013226:	b580      	push	{r7, lr}
 8013228:	b082      	sub	sp, #8
 801322a:	af00      	add	r7, sp, #0
 801322c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2201      	movs	r2, #1
 8013232:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013236:	2300      	movs	r3, #0
 8013238:	2200      	movs	r2, #0
 801323a:	2101      	movs	r1, #1
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f000 f85b 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 8013242:	bf00      	nop
}
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 801324a:	b480      	push	{r7}
 801324c:	b083      	sub	sp, #12
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2200      	movs	r2, #0
 8013256:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2201      	movs	r2, #1
 801325e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 8013262:	bf00      	nop
}
 8013264:	370c      	adds	r7, #12
 8013266:	46bd      	mov	sp, r7
 8013268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326c:	4770      	bx	lr

0801326e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 801326e:	b580      	push	{r7, lr}
 8013270:	b082      	sub	sp, #8
 8013272:	af00      	add	r7, sp, #0
 8013274:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2201      	movs	r2, #1
 801327a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2200      	movs	r2, #0
 8013282:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2200      	movs	r2, #0
 801328a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801328e:	2300      	movs	r3, #0
 8013290:	2200      	movs	r2, #0
 8013292:	2101      	movs	r1, #1
 8013294:	6878      	ldr	r0, [r7, #4]
 8013296:	f000 f82f 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	3708      	adds	r7, #8
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b082      	sub	sp, #8
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	2201      	movs	r2, #1
 80132b0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2200      	movs	r2, #0
 80132b8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2200      	movs	r2, #0
 80132c0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f006 fa9e 	bl	8019806 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	791b      	ldrb	r3, [r3, #4]
 80132ce:	4619      	mov	r1, r3
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f000 ffc5 	bl	8014260 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	795b      	ldrb	r3, [r3, #5]
 80132da:	4619      	mov	r1, r3
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f000 ffbf 	bl	8014260 <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80132e2:	2300      	movs	r3, #0
 80132e4:	2200      	movs	r2, #0
 80132e6:	2101      	movs	r1, #1
 80132e8:	6878      	ldr	r0, [r7, #4]
 80132ea:	f000 f805 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80132ee:	2300      	movs	r3, #0
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b086      	sub	sp, #24
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	60f8      	str	r0, [r7, #12]
 8013300:	607a      	str	r2, [r7, #4]
 8013302:	603b      	str	r3, [r7, #0]
 8013304:	460b      	mov	r3, r1
 8013306:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8013308:	7afa      	ldrb	r2, [r7, #11]
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8013316:	4618      	mov	r0, r3
 8013318:	f003 fc0e 	bl	8016b38 <osMessageWaiting>
 801331c:	4603      	mov	r3, r0
 801331e:	f1c3 0310 	rsb	r3, r3, #16
 8013322:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d009      	beq.n	801333e <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	4619      	mov	r1, r3
 801333a:	f003 fb49 	bl	80169d0 <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 801333e:	bf00      	nop
 8013340:	3718      	adds	r7, #24
 8013342:	46bd      	mov	sp, r7
 8013344:	bd80      	pop	{r7, pc}

08013346 <USBH_Process_OS>:
  * @param  pvParameters not used
  * @retval None
  */
#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8013346:	b580      	push	{r7, lr}
 8013348:	b086      	sub	sp, #24
 801334a:	af00      	add	r7, sp, #0
 801334c:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8013354:	f107 030c 	add.w	r3, r7, #12
 8013358:	f04f 32ff 	mov.w	r2, #4294967295
 801335c:	4618      	mov	r0, r3
 801335e:	f003 fb77 	bl	8016a50 <osMessageGet>
    if (event.status == osEventMessage)
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	2b10      	cmp	r3, #16
 8013366:	d1f2      	bne.n	801334e <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f7ff fb0b 	bl	8012984 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 801336e:	e7ee      	b.n	801334e <USBH_Process_OS+0x8>

08013370 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b082      	sub	sp, #8
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8013378:	2300      	movs	r3, #0
 801337a:	2200      	movs	r2, #0
 801337c:	2101      	movs	r1, #1
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7ff ffba 	bl	80132f8 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8013384:	2300      	movs	r3, #0
}
 8013386:	4618      	mov	r0, r3
 8013388:	3708      	adds	r7, #8
 801338a:	46bd      	mov	sp, r7
 801338c:	bd80      	pop	{r7, pc}

0801338e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 801338e:	b580      	push	{r7, lr}
 8013390:	b086      	sub	sp, #24
 8013392:	af02      	add	r7, sp, #8
 8013394:	6078      	str	r0, [r7, #4]
 8013396:	460b      	mov	r3, r1
 8013398:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 801339a:	887b      	ldrh	r3, [r7, #2]
 801339c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80133a0:	d901      	bls.n	80133a6 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80133a2:	2303      	movs	r3, #3
 80133a4:	e01b      	b.n	80133de <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80133ac:	887b      	ldrh	r3, [r7, #2]
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	4613      	mov	r3, r2
 80133b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80133b6:	2100      	movs	r1, #0
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f000 f872 	bl	80134a2 <USBH_GetDescriptor>
 80133be:	4603      	mov	r3, r0
 80133c0:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80133c2:	7bfb      	ldrb	r3, [r7, #15]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d109      	bne.n	80133dc <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80133ce:	887a      	ldrh	r2, [r7, #2]
 80133d0:	4619      	mov	r1, r3
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 f92a 	bl	801362c <USBH_ParseDevDesc>
 80133d8:	4603      	mov	r3, r0
 80133da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80133dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80133de:	4618      	mov	r0, r3
 80133e0:	3710      	adds	r7, #16
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}

080133e6 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80133e6:	b580      	push	{r7, lr}
 80133e8:	b086      	sub	sp, #24
 80133ea:	af02      	add	r7, sp, #8
 80133ec:	6078      	str	r0, [r7, #4]
 80133ee:	460b      	mov	r3, r1
 80133f0:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	331c      	adds	r3, #28
 80133f6:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80133f8:	887b      	ldrh	r3, [r7, #2]
 80133fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80133fe:	d901      	bls.n	8013404 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8013400:	2303      	movs	r3, #3
 8013402:	e016      	b.n	8013432 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8013404:	887b      	ldrh	r3, [r7, #2]
 8013406:	9300      	str	r3, [sp, #0]
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801340e:	2100      	movs	r1, #0
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f000 f846 	bl	80134a2 <USBH_GetDescriptor>
 8013416:	4603      	mov	r3, r0
 8013418:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801341a:	7bfb      	ldrb	r3, [r7, #15]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d107      	bne.n	8013430 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8013420:	887b      	ldrh	r3, [r7, #2]
 8013422:	461a      	mov	r2, r3
 8013424:	68b9      	ldr	r1, [r7, #8]
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 f9b0 	bl	801378c <USBH_ParseCfgDesc>
 801342c:	4603      	mov	r3, r0
 801342e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8013430:	7bfb      	ldrb	r3, [r7, #15]
}
 8013432:	4618      	mov	r0, r3
 8013434:	3710      	adds	r7, #16
 8013436:	46bd      	mov	sp, r7
 8013438:	bd80      	pop	{r7, pc}

0801343a <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 801343a:	b580      	push	{r7, lr}
 801343c:	b088      	sub	sp, #32
 801343e:	af02      	add	r7, sp, #8
 8013440:	60f8      	str	r0, [r7, #12]
 8013442:	607a      	str	r2, [r7, #4]
 8013444:	461a      	mov	r2, r3
 8013446:	460b      	mov	r3, r1
 8013448:	72fb      	strb	r3, [r7, #11]
 801344a:	4613      	mov	r3, r2
 801344c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 801344e:	893b      	ldrh	r3, [r7, #8]
 8013450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013454:	d802      	bhi.n	801345c <USBH_Get_StringDesc+0x22>
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d101      	bne.n	8013460 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 801345c:	2303      	movs	r3, #3
 801345e:	e01c      	b.n	801349a <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8013460:	7afb      	ldrb	r3, [r7, #11]
 8013462:	b29b      	uxth	r3, r3
 8013464:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8013468:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8013470:	893b      	ldrh	r3, [r7, #8]
 8013472:	9300      	str	r3, [sp, #0]
 8013474:	460b      	mov	r3, r1
 8013476:	2100      	movs	r1, #0
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f000 f812 	bl	80134a2 <USBH_GetDescriptor>
 801347e:	4603      	mov	r3, r0
 8013480:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8013482:	7dfb      	ldrb	r3, [r7, #23]
 8013484:	2b00      	cmp	r3, #0
 8013486:	d107      	bne.n	8013498 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 801348e:	893a      	ldrh	r2, [r7, #8]
 8013490:	6879      	ldr	r1, [r7, #4]
 8013492:	4618      	mov	r0, r3
 8013494:	f000 fb8d 	bl	8013bb2 <USBH_ParseStringDesc>
  }

  return status;
 8013498:	7dfb      	ldrb	r3, [r7, #23]
}
 801349a:	4618      	mov	r0, r3
 801349c:	3718      	adds	r7, #24
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80134a2:	b580      	push	{r7, lr}
 80134a4:	b084      	sub	sp, #16
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	60f8      	str	r0, [r7, #12]
 80134aa:	607b      	str	r3, [r7, #4]
 80134ac:	460b      	mov	r3, r1
 80134ae:	72fb      	strb	r3, [r7, #11]
 80134b0:	4613      	mov	r3, r2
 80134b2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	789b      	ldrb	r3, [r3, #2]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d11c      	bne.n	80134f6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80134bc:	7afb      	ldrb	r3, [r7, #11]
 80134be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80134c2:	b2da      	uxtb	r2, r3
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2206      	movs	r2, #6
 80134cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	893a      	ldrh	r2, [r7, #8]
 80134d2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80134d4:	893b      	ldrh	r3, [r7, #8]
 80134d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80134da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80134de:	d104      	bne.n	80134ea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	f240 4209 	movw	r2, #1033	@ 0x409
 80134e6:	829a      	strh	r2, [r3, #20]
 80134e8:	e002      	b.n	80134f0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2200      	movs	r2, #0
 80134ee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80134f0:	68fb      	ldr	r3, [r7, #12]
 80134f2:	8b3a      	ldrh	r2, [r7, #24]
 80134f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80134f6:	8b3b      	ldrh	r3, [r7, #24]
 80134f8:	461a      	mov	r2, r3
 80134fa:	6879      	ldr	r1, [r7, #4]
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f000 fba5 	bl	8013c4c <USBH_CtlReq>
 8013502:	4603      	mov	r3, r0
}
 8013504:	4618      	mov	r0, r3
 8013506:	3710      	adds	r7, #16
 8013508:	46bd      	mov	sp, r7
 801350a:	bd80      	pop	{r7, pc}

0801350c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b082      	sub	sp, #8
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	460b      	mov	r3, r1
 8013516:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	789b      	ldrb	r3, [r3, #2]
 801351c:	2b01      	cmp	r3, #1
 801351e:	d10f      	bne.n	8013540 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2200      	movs	r2, #0
 8013524:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2205      	movs	r2, #5
 801352a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801352c:	78fb      	ldrb	r3, [r7, #3]
 801352e:	b29a      	uxth	r2, r3
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2200      	movs	r2, #0
 8013538:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2200      	movs	r2, #0
 801353e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013540:	2200      	movs	r2, #0
 8013542:	2100      	movs	r1, #0
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f000 fb81 	bl	8013c4c <USBH_CtlReq>
 801354a:	4603      	mov	r3, r0
}
 801354c:	4618      	mov	r0, r3
 801354e:	3708      	adds	r7, #8
 8013550:	46bd      	mov	sp, r7
 8013552:	bd80      	pop	{r7, pc}

08013554 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b082      	sub	sp, #8
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	460b      	mov	r3, r1
 801355e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	789b      	ldrb	r3, [r3, #2]
 8013564:	2b01      	cmp	r3, #1
 8013566:	d10e      	bne.n	8013586 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2200      	movs	r2, #0
 801356c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2209      	movs	r2, #9
 8013572:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	887a      	ldrh	r2, [r7, #2]
 8013578:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2200      	movs	r2, #0
 801357e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2200      	movs	r2, #0
 8013584:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013586:	2200      	movs	r2, #0
 8013588:	2100      	movs	r1, #0
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f000 fb5e 	bl	8013c4c <USBH_CtlReq>
 8013590:	4603      	mov	r3, r0
}
 8013592:	4618      	mov	r0, r3
 8013594:	3708      	adds	r7, #8
 8013596:	46bd      	mov	sp, r7
 8013598:	bd80      	pop	{r7, pc}

0801359a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801359a:	b580      	push	{r7, lr}
 801359c:	b082      	sub	sp, #8
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
 80135a2:	460b      	mov	r3, r1
 80135a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	789b      	ldrb	r3, [r3, #2]
 80135aa:	2b01      	cmp	r3, #1
 80135ac:	d10f      	bne.n	80135ce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2200      	movs	r2, #0
 80135b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2203      	movs	r2, #3
 80135b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80135ba:	78fb      	ldrb	r3, [r7, #3]
 80135bc:	b29a      	uxth	r2, r3
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2200      	movs	r2, #0
 80135c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2200      	movs	r2, #0
 80135cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80135ce:	2200      	movs	r2, #0
 80135d0:	2100      	movs	r1, #0
 80135d2:	6878      	ldr	r0, [r7, #4]
 80135d4:	f000 fb3a 	bl	8013c4c <USBH_CtlReq>
 80135d8:	4603      	mov	r3, r0
}
 80135da:	4618      	mov	r0, r3
 80135dc:	3708      	adds	r7, #8
 80135de:	46bd      	mov	sp, r7
 80135e0:	bd80      	pop	{r7, pc}

080135e2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80135e2:	b580      	push	{r7, lr}
 80135e4:	b082      	sub	sp, #8
 80135e6:	af00      	add	r7, sp, #0
 80135e8:	6078      	str	r0, [r7, #4]
 80135ea:	460b      	mov	r3, r1
 80135ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	789b      	ldrb	r3, [r3, #2]
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	d10f      	bne.n	8013616 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	2202      	movs	r2, #2
 80135fa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2201      	movs	r2, #1
 8013600:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2200      	movs	r2, #0
 8013606:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8013608:	78fb      	ldrb	r3, [r7, #3]
 801360a:	b29a      	uxth	r2, r3
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2200      	movs	r2, #0
 8013614:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8013616:	2200      	movs	r2, #0
 8013618:	2100      	movs	r1, #0
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f000 fb16 	bl	8013c4c <USBH_CtlReq>
 8013620:	4603      	mov	r3, r0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3708      	adds	r7, #8
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
	...

0801362c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801362c:	b480      	push	{r7}
 801362e:	b087      	sub	sp, #28
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	4613      	mov	r3, r2
 8013638:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8013640:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8013642:	2300      	movs	r3, #0
 8013644:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d101      	bne.n	8013650 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 801364c:	2302      	movs	r3, #2
 801364e:	e094      	b.n	801377a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	781a      	ldrb	r2, [r3, #0]
 8013654:	693b      	ldr	r3, [r7, #16]
 8013656:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	785a      	ldrb	r2, [r3, #1]
 801365c:	693b      	ldr	r3, [r7, #16]
 801365e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8013660:	68bb      	ldr	r3, [r7, #8]
 8013662:	3302      	adds	r3, #2
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	461a      	mov	r2, r3
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	3303      	adds	r3, #3
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	021b      	lsls	r3, r3, #8
 8013670:	b29b      	uxth	r3, r3
 8013672:	4313      	orrs	r3, r2
 8013674:	b29a      	uxth	r2, r3
 8013676:	693b      	ldr	r3, [r7, #16]
 8013678:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	791a      	ldrb	r2, [r3, #4]
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8013682:	68bb      	ldr	r3, [r7, #8]
 8013684:	795a      	ldrb	r2, [r3, #5]
 8013686:	693b      	ldr	r3, [r7, #16]
 8013688:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	799a      	ldrb	r2, [r3, #6]
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	79da      	ldrb	r2, [r3, #7]
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d004      	beq.n	80136ae <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d11b      	bne.n	80136e6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	79db      	ldrb	r3, [r3, #7]
 80136b2:	2b20      	cmp	r3, #32
 80136b4:	dc0f      	bgt.n	80136d6 <USBH_ParseDevDesc+0xaa>
 80136b6:	2b08      	cmp	r3, #8
 80136b8:	db0f      	blt.n	80136da <USBH_ParseDevDesc+0xae>
 80136ba:	3b08      	subs	r3, #8
 80136bc:	4a32      	ldr	r2, [pc, #200]	@ (8013788 <USBH_ParseDevDesc+0x15c>)
 80136be:	fa22 f303 	lsr.w	r3, r2, r3
 80136c2:	f003 0301 	and.w	r3, r3, #1
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	bf14      	ite	ne
 80136ca:	2301      	movne	r3, #1
 80136cc:	2300      	moveq	r3, #0
 80136ce:	b2db      	uxtb	r3, r3
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d106      	bne.n	80136e2 <USBH_ParseDevDesc+0xb6>
 80136d4:	e001      	b.n	80136da <USBH_ParseDevDesc+0xae>
 80136d6:	2b40      	cmp	r3, #64	@ 0x40
 80136d8:	d003      	beq.n	80136e2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	2208      	movs	r2, #8
 80136de:	71da      	strb	r2, [r3, #7]
        break;
 80136e0:	e000      	b.n	80136e4 <USBH_ParseDevDesc+0xb8>
        break;
 80136e2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80136e4:	e00e      	b.n	8013704 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80136ec:	2b02      	cmp	r3, #2
 80136ee:	d107      	bne.n	8013700 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	79db      	ldrb	r3, [r3, #7]
 80136f4:	2b08      	cmp	r3, #8
 80136f6:	d005      	beq.n	8013704 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	2208      	movs	r2, #8
 80136fc:	71da      	strb	r2, [r3, #7]
 80136fe:	e001      	b.n	8013704 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8013700:	2303      	movs	r3, #3
 8013702:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8013704:	88fb      	ldrh	r3, [r7, #6]
 8013706:	2b08      	cmp	r3, #8
 8013708:	d936      	bls.n	8013778 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	3308      	adds	r3, #8
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	461a      	mov	r2, r3
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	3309      	adds	r3, #9
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	021b      	lsls	r3, r3, #8
 801371a:	b29b      	uxth	r3, r3
 801371c:	4313      	orrs	r3, r2
 801371e:	b29a      	uxth	r2, r3
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8013724:	68bb      	ldr	r3, [r7, #8]
 8013726:	330a      	adds	r3, #10
 8013728:	781b      	ldrb	r3, [r3, #0]
 801372a:	461a      	mov	r2, r3
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	330b      	adds	r3, #11
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	021b      	lsls	r3, r3, #8
 8013734:	b29b      	uxth	r3, r3
 8013736:	4313      	orrs	r3, r2
 8013738:	b29a      	uxth	r2, r3
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	330c      	adds	r3, #12
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	461a      	mov	r2, r3
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	330d      	adds	r3, #13
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	021b      	lsls	r3, r3, #8
 801374e:	b29b      	uxth	r3, r3
 8013750:	4313      	orrs	r3, r2
 8013752:	b29a      	uxth	r2, r3
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	7b9a      	ldrb	r2, [r3, #14]
 801375c:	693b      	ldr	r3, [r7, #16]
 801375e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	7bda      	ldrb	r2, [r3, #15]
 8013764:	693b      	ldr	r3, [r7, #16]
 8013766:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	7c1a      	ldrb	r2, [r3, #16]
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	7c5a      	ldrb	r2, [r3, #17]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8013778:	7dfb      	ldrb	r3, [r7, #23]
}
 801377a:	4618      	mov	r0, r3
 801377c:	371c      	adds	r7, #28
 801377e:	46bd      	mov	sp, r7
 8013780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013784:	4770      	bx	lr
 8013786:	bf00      	nop
 8013788:	01000101 	.word	0x01000101

0801378c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b08c      	sub	sp, #48	@ 0x30
 8013790:	af00      	add	r7, sp, #0
 8013792:	60f8      	str	r0, [r7, #12]
 8013794:	60b9      	str	r1, [r7, #8]
 8013796:	4613      	mov	r3, r2
 8013798:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80137a0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80137a2:	2300      	movs	r3, #0
 80137a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80137a8:	2300      	movs	r3, #0
 80137aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80137ae:	2300      	movs	r3, #0
 80137b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80137b4:	68bb      	ldr	r3, [r7, #8]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d101      	bne.n	80137be <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80137ba:	2302      	movs	r3, #2
 80137bc:	e0de      	b.n	801397c <USBH_ParseCfgDesc+0x1f0>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80137c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	2b09      	cmp	r3, #9
 80137c8:	d002      	beq.n	80137d0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80137ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137cc:	2209      	movs	r2, #9
 80137ce:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	781a      	ldrb	r2, [r3, #0]
 80137d4:	6a3b      	ldr	r3, [r7, #32]
 80137d6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80137d8:	68bb      	ldr	r3, [r7, #8]
 80137da:	785a      	ldrb	r2, [r3, #1]
 80137dc:	6a3b      	ldr	r3, [r7, #32]
 80137de:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	3302      	adds	r3, #2
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	461a      	mov	r2, r3
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	3303      	adds	r3, #3
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	021b      	lsls	r3, r3, #8
 80137f0:	b29b      	uxth	r3, r3
 80137f2:	4313      	orrs	r3, r2
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80137fa:	bf28      	it	cs
 80137fc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8013800:	b29a      	uxth	r2, r3
 8013802:	6a3b      	ldr	r3, [r7, #32]
 8013804:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	791a      	ldrb	r2, [r3, #4]
 801380a:	6a3b      	ldr	r3, [r7, #32]
 801380c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	795a      	ldrb	r2, [r3, #5]
 8013812:	6a3b      	ldr	r3, [r7, #32]
 8013814:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	799a      	ldrb	r2, [r3, #6]
 801381a:	6a3b      	ldr	r3, [r7, #32]
 801381c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	79da      	ldrb	r2, [r3, #7]
 8013822:	6a3b      	ldr	r3, [r7, #32]
 8013824:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	7a1a      	ldrb	r2, [r3, #8]
 801382a:	6a3b      	ldr	r3, [r7, #32]
 801382c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801382e:	88fb      	ldrh	r3, [r7, #6]
 8013830:	2b09      	cmp	r3, #9
 8013832:	f240 80a1 	bls.w	8013978 <USBH_ParseCfgDesc+0x1ec>
  {
    ptr = USB_LEN_CFG_DESC;
 8013836:	2309      	movs	r3, #9
 8013838:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 801383a:	2300      	movs	r3, #0
 801383c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801383e:	e085      	b.n	801394c <USBH_ParseCfgDesc+0x1c0>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8013840:	f107 0316 	add.w	r3, r7, #22
 8013844:	4619      	mov	r1, r3
 8013846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013848:	f000 f9e6 	bl	8013c18 <USBH_GetNextDesc>
 801384c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 801384e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013850:	785b      	ldrb	r3, [r3, #1]
 8013852:	2b04      	cmp	r3, #4
 8013854:	d17a      	bne.n	801394c <USBH_ParseCfgDesc+0x1c0>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8013856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013858:	781b      	ldrb	r3, [r3, #0]
 801385a:	2b09      	cmp	r3, #9
 801385c:	d002      	beq.n	8013864 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013860:	2209      	movs	r2, #9
 8013862:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8013864:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013868:	221a      	movs	r2, #26
 801386a:	fb02 f303 	mul.w	r3, r2, r3
 801386e:	3308      	adds	r3, #8
 8013870:	6a3a      	ldr	r2, [r7, #32]
 8013872:	4413      	add	r3, r2
 8013874:	3302      	adds	r3, #2
 8013876:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8013878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801387a:	69f8      	ldr	r0, [r7, #28]
 801387c:	f000 f882 	bl	8013984 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8013880:	2300      	movs	r3, #0
 8013882:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8013886:	2300      	movs	r3, #0
 8013888:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801388a:	e043      	b.n	8013914 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801388c:	f107 0316 	add.w	r3, r7, #22
 8013890:	4619      	mov	r1, r3
 8013892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013894:	f000 f9c0 	bl	8013c18 <USBH_GetNextDesc>
 8013898:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801389c:	785b      	ldrb	r3, [r3, #1]
 801389e:	2b05      	cmp	r3, #5
 80138a0:	d138      	bne.n	8013914 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80138a2:	69fb      	ldr	r3, [r7, #28]
 80138a4:	795b      	ldrb	r3, [r3, #5]
 80138a6:	2b01      	cmp	r3, #1
 80138a8:	d113      	bne.n	80138d2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80138aa:	69fb      	ldr	r3, [r7, #28]
 80138ac:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80138ae:	2b02      	cmp	r3, #2
 80138b0:	d003      	beq.n	80138ba <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80138b2:	69fb      	ldr	r3, [r7, #28]
 80138b4:	799b      	ldrb	r3, [r3, #6]
 80138b6:	2b03      	cmp	r3, #3
 80138b8:	d10b      	bne.n	80138d2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80138ba:	69fb      	ldr	r3, [r7, #28]
 80138bc:	79db      	ldrb	r3, [r3, #7]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d10b      	bne.n	80138da <USBH_ParseCfgDesc+0x14e>
 80138c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	2b09      	cmp	r3, #9
 80138c8:	d007      	beq.n	80138da <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80138ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138cc:	2209      	movs	r2, #9
 80138ce:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80138d0:	e003      	b.n	80138da <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80138d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138d4:	2207      	movs	r2, #7
 80138d6:	701a      	strb	r2, [r3, #0]
 80138d8:	e000      	b.n	80138dc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80138da:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80138dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80138e0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80138e4:	3201      	adds	r2, #1
 80138e6:	00d2      	lsls	r2, r2, #3
 80138e8:	211a      	movs	r1, #26
 80138ea:	fb01 f303 	mul.w	r3, r1, r3
 80138ee:	4413      	add	r3, r2
 80138f0:	3308      	adds	r3, #8
 80138f2:	6a3a      	ldr	r2, [r7, #32]
 80138f4:	4413      	add	r3, r2
 80138f6:	3304      	adds	r3, #4
 80138f8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80138fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80138fc:	69b9      	ldr	r1, [r7, #24]
 80138fe:	68f8      	ldr	r0, [r7, #12]
 8013900:	f000 f86f 	bl	80139e2 <USBH_ParseEPDesc>
 8013904:	4603      	mov	r3, r0
 8013906:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 801390a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801390e:	3301      	adds	r3, #1
 8013910:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < USBH_MAX_NUM_ENDPOINTS) && (ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8013914:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013918:	2b01      	cmp	r3, #1
 801391a:	d80a      	bhi.n	8013932 <USBH_ParseCfgDesc+0x1a6>
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	791b      	ldrb	r3, [r3, #4]
 8013920:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013924:	429a      	cmp	r2, r3
 8013926:	d204      	bcs.n	8013932 <USBH_ParseCfgDesc+0x1a6>
 8013928:	6a3b      	ldr	r3, [r7, #32]
 801392a:	885a      	ldrh	r2, [r3, #2]
 801392c:	8afb      	ldrh	r3, [r7, #22]
 801392e:	429a      	cmp	r2, r3
 8013930:	d8ac      	bhi.n	801388c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	791b      	ldrb	r3, [r3, #4]
 8013936:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801393a:	429a      	cmp	r2, r3
 801393c:	d201      	bcs.n	8013942 <USBH_ParseCfgDesc+0x1b6>
        {
          return USBH_NOT_SUPPORTED;
 801393e:	2303      	movs	r3, #3
 8013940:	e01c      	b.n	801397c <USBH_ParseCfgDesc+0x1f0>
        }

        if_ix++;
 8013942:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013946:	3301      	adds	r3, #1
 8013948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801394c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013950:	2b01      	cmp	r3, #1
 8013952:	d805      	bhi.n	8013960 <USBH_ParseCfgDesc+0x1d4>
 8013954:	6a3b      	ldr	r3, [r7, #32]
 8013956:	885a      	ldrh	r2, [r3, #2]
 8013958:	8afb      	ldrh	r3, [r7, #22]
 801395a:	429a      	cmp	r2, r3
 801395c:	f63f af70 	bhi.w	8013840 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8013960:	6a3b      	ldr	r3, [r7, #32]
 8013962:	791b      	ldrb	r3, [r3, #4]
 8013964:	2b02      	cmp	r3, #2
 8013966:	bf28      	it	cs
 8013968:	2302      	movcs	r3, #2
 801396a:	b2db      	uxtb	r3, r3
 801396c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8013970:	429a      	cmp	r2, r3
 8013972:	d201      	bcs.n	8013978 <USBH_ParseCfgDesc+0x1ec>
    {
      return USBH_NOT_SUPPORTED;
 8013974:	2303      	movs	r3, #3
 8013976:	e001      	b.n	801397c <USBH_ParseCfgDesc+0x1f0>
    }
  }

  return status;
 8013978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801397c:	4618      	mov	r0, r3
 801397e:	3730      	adds	r7, #48	@ 0x30
 8013980:	46bd      	mov	sp, r7
 8013982:	bd80      	pop	{r7, pc}

08013984 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8013984:	b480      	push	{r7}
 8013986:	b083      	sub	sp, #12
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	781a      	ldrb	r2, [r3, #0]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	785a      	ldrb	r2, [r3, #1]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	789a      	ldrb	r2, [r3, #2]
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	78da      	ldrb	r2, [r3, #3]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4U);
 80139ae:	683b      	ldr	r3, [r7, #0]
 80139b0:	791a      	ldrb	r2, [r3, #4]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80139b6:	683b      	ldr	r3, [r7, #0]
 80139b8:	795a      	ldrb	r2, [r3, #5]
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	799a      	ldrb	r2, [r3, #6]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	79da      	ldrb	r2, [r3, #7]
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	7a1a      	ldrb	r2, [r3, #8]
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	721a      	strb	r2, [r3, #8]
}
 80139d6:	bf00      	nop
 80139d8:	370c      	adds	r7, #12
 80139da:	46bd      	mov	sp, r7
 80139dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e0:	4770      	bx	lr

080139e2 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80139e2:	b480      	push	{r7}
 80139e4:	b087      	sub	sp, #28
 80139e6:	af00      	add	r7, sp, #0
 80139e8:	60f8      	str	r0, [r7, #12]
 80139ea:	60b9      	str	r1, [r7, #8]
 80139ec:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80139ee:	2300      	movs	r3, #0
 80139f0:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	781a      	ldrb	r2, [r3, #0]
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	785a      	ldrb	r2, [r3, #1]
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	789a      	ldrb	r2, [r3, #2]
 8013a06:	68bb      	ldr	r3, [r7, #8]
 8013a08:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	78da      	ldrb	r2, [r3, #3]
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	3304      	adds	r3, #4
 8013a16:	781b      	ldrb	r3, [r3, #0]
 8013a18:	461a      	mov	r2, r3
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	3305      	adds	r3, #5
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	021b      	lsls	r3, r3, #8
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	4313      	orrs	r3, r2
 8013a26:	b29a      	uxth	r2, r3
 8013a28:	68bb      	ldr	r3, [r7, #8]
 8013a2a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	799a      	ldrb	r2, [r3, #6]
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	889b      	ldrh	r3, [r3, #4]
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d009      	beq.n	8013a50 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8013a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013a44:	d804      	bhi.n	8013a50 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8013a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a4e:	d901      	bls.n	8013a54 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8013a50:	2303      	movs	r3, #3
 8013a52:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d136      	bne.n	8013acc <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	78db      	ldrb	r3, [r3, #3]
 8013a62:	f003 0303 	and.w	r3, r3, #3
 8013a66:	2b02      	cmp	r3, #2
 8013a68:	d108      	bne.n	8013a7c <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	889b      	ldrh	r3, [r3, #4]
 8013a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013a72:	f240 8097 	bls.w	8013ba4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013a76:	2303      	movs	r3, #3
 8013a78:	75fb      	strb	r3, [r7, #23]
 8013a7a:	e093      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	78db      	ldrb	r3, [r3, #3]
 8013a80:	f003 0303 	and.w	r3, r3, #3
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d107      	bne.n	8013a98 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	889b      	ldrh	r3, [r3, #4]
 8013a8c:	2b40      	cmp	r3, #64	@ 0x40
 8013a8e:	f240 8089 	bls.w	8013ba4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013a92:	2303      	movs	r3, #3
 8013a94:	75fb      	strb	r3, [r7, #23]
 8013a96:	e085      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	78db      	ldrb	r3, [r3, #3]
 8013a9c:	f003 0303 	and.w	r3, r3, #3
 8013aa0:	2b01      	cmp	r3, #1
 8013aa2:	d005      	beq.n	8013ab0 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8013aa4:	68bb      	ldr	r3, [r7, #8]
 8013aa6:	78db      	ldrb	r3, [r3, #3]
 8013aa8:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8013aac:	2b03      	cmp	r3, #3
 8013aae:	d10a      	bne.n	8013ac6 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	799b      	ldrb	r3, [r3, #6]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d003      	beq.n	8013ac0 <USBH_ParseEPDesc+0xde>
 8013ab8:	68bb      	ldr	r3, [r7, #8]
 8013aba:	799b      	ldrb	r3, [r3, #6]
 8013abc:	2b10      	cmp	r3, #16
 8013abe:	d970      	bls.n	8013ba2 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8013ac0:	2303      	movs	r3, #3
 8013ac2:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013ac4:	e06d      	b.n	8013ba2 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013ac6:	2303      	movs	r3, #3
 8013ac8:	75fb      	strb	r3, [r7, #23]
 8013aca:	e06b      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013ad2:	2b01      	cmp	r3, #1
 8013ad4:	d13c      	bne.n	8013b50 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8013ad6:	68bb      	ldr	r3, [r7, #8]
 8013ad8:	78db      	ldrb	r3, [r3, #3]
 8013ada:	f003 0303 	and.w	r3, r3, #3
 8013ade:	2b02      	cmp	r3, #2
 8013ae0:	d005      	beq.n	8013aee <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	78db      	ldrb	r3, [r3, #3]
 8013ae6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d106      	bne.n	8013afc <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013aee:	68bb      	ldr	r3, [r7, #8]
 8013af0:	889b      	ldrh	r3, [r3, #4]
 8013af2:	2b40      	cmp	r3, #64	@ 0x40
 8013af4:	d956      	bls.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013af6:	2303      	movs	r3, #3
 8013af8:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8013afa:	e053      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8013afc:	68bb      	ldr	r3, [r7, #8]
 8013afe:	78db      	ldrb	r3, [r3, #3]
 8013b00:	f003 0303 	and.w	r3, r3, #3
 8013b04:	2b01      	cmp	r3, #1
 8013b06:	d10e      	bne.n	8013b26 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	799b      	ldrb	r3, [r3, #6]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d007      	beq.n	8013b20 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8013b14:	2b10      	cmp	r3, #16
 8013b16:	d803      	bhi.n	8013b20 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8013b18:	68bb      	ldr	r3, [r7, #8]
 8013b1a:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8013b1c:	2b40      	cmp	r3, #64	@ 0x40
 8013b1e:	d941      	bls.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013b20:	2303      	movs	r3, #3
 8013b22:	75fb      	strb	r3, [r7, #23]
 8013b24:	e03e      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8013b26:	68bb      	ldr	r3, [r7, #8]
 8013b28:	78db      	ldrb	r3, [r3, #3]
 8013b2a:	f003 0303 	and.w	r3, r3, #3
 8013b2e:	2b03      	cmp	r3, #3
 8013b30:	d10b      	bne.n	8013b4a <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	799b      	ldrb	r3, [r3, #6]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d004      	beq.n	8013b44 <USBH_ParseEPDesc+0x162>
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	889b      	ldrh	r3, [r3, #4]
 8013b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013b42:	d32f      	bcc.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013b44:	2303      	movs	r3, #3
 8013b46:	75fb      	strb	r3, [r7, #23]
 8013b48:	e02c      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013b4a:	2303      	movs	r3, #3
 8013b4c:	75fb      	strb	r3, [r7, #23]
 8013b4e:	e029      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8013b56:	2b02      	cmp	r3, #2
 8013b58:	d120      	bne.n	8013b9c <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	78db      	ldrb	r3, [r3, #3]
 8013b5e:	f003 0303 	and.w	r3, r3, #3
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d106      	bne.n	8013b74 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	889b      	ldrh	r3, [r3, #4]
 8013b6a:	2b08      	cmp	r3, #8
 8013b6c:	d01a      	beq.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013b6e:	2303      	movs	r3, #3
 8013b70:	75fb      	strb	r3, [r7, #23]
 8013b72:	e017      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	78db      	ldrb	r3, [r3, #3]
 8013b78:	f003 0303 	and.w	r3, r3, #3
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	d10a      	bne.n	8013b96 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8013b80:	68bb      	ldr	r3, [r7, #8]
 8013b82:	799b      	ldrb	r3, [r3, #6]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d003      	beq.n	8013b90 <USBH_ParseEPDesc+0x1ae>
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	889b      	ldrh	r3, [r3, #4]
 8013b8c:	2b08      	cmp	r3, #8
 8013b8e:	d909      	bls.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8013b90:	2303      	movs	r3, #3
 8013b92:	75fb      	strb	r3, [r7, #23]
 8013b94:	e006      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8013b96:	2303      	movs	r3, #3
 8013b98:	75fb      	strb	r3, [r7, #23]
 8013b9a:	e003      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8013b9c:	2303      	movs	r3, #3
 8013b9e:	75fb      	strb	r3, [r7, #23]
 8013ba0:	e000      	b.n	8013ba4 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8013ba2:	bf00      	nop
  }

  return status;
 8013ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	371c      	adds	r7, #28
 8013baa:	46bd      	mov	sp, r7
 8013bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb0:	4770      	bx	lr

08013bb2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8013bb2:	b480      	push	{r7}
 8013bb4:	b087      	sub	sp, #28
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	60f8      	str	r0, [r7, #12]
 8013bba:	60b9      	str	r1, [r7, #8]
 8013bbc:	4613      	mov	r3, r2
 8013bbe:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	2b03      	cmp	r3, #3
 8013bc8:	d120      	bne.n	8013c0c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	1e9a      	subs	r2, r3, #2
 8013bd0:	88fb      	ldrh	r3, [r7, #6]
 8013bd2:	4293      	cmp	r3, r2
 8013bd4:	bf28      	it	cs
 8013bd6:	4613      	movcs	r3, r2
 8013bd8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	3302      	adds	r3, #2
 8013bde:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8013be0:	2300      	movs	r3, #0
 8013be2:	82fb      	strh	r3, [r7, #22]
 8013be4:	e00b      	b.n	8013bfe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8013be6:	8afb      	ldrh	r3, [r7, #22]
 8013be8:	68fa      	ldr	r2, [r7, #12]
 8013bea:	4413      	add	r3, r2
 8013bec:	781a      	ldrb	r2, [r3, #0]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	701a      	strb	r2, [r3, #0]
      pdest++;
 8013bf2:	68bb      	ldr	r3, [r7, #8]
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8013bf8:	8afb      	ldrh	r3, [r7, #22]
 8013bfa:	3302      	adds	r3, #2
 8013bfc:	82fb      	strh	r3, [r7, #22]
 8013bfe:	8afa      	ldrh	r2, [r7, #22]
 8013c00:	8abb      	ldrh	r3, [r7, #20]
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d3ef      	bcc.n	8013be6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	701a      	strb	r2, [r3, #0]
  }
}
 8013c0c:	bf00      	nop
 8013c0e:	371c      	adds	r7, #28
 8013c10:	46bd      	mov	sp, r7
 8013c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c16:	4770      	bx	lr

08013c18 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013c18:	b480      	push	{r7}
 8013c1a:	b085      	sub	sp, #20
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	881b      	ldrh	r3, [r3, #0]
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	7812      	ldrb	r2, [r2, #0]
 8013c2a:	4413      	add	r3, r2
 8013c2c:	b29a      	uxth	r2, r3
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	781b      	ldrb	r3, [r3, #0]
 8013c36:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4413      	add	r3, r2
 8013c3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013c3e:	68fb      	ldr	r3, [r7, #12]
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3714      	adds	r7, #20
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b086      	sub	sp, #24
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	60f8      	str	r0, [r7, #12]
 8013c54:	60b9      	str	r1, [r7, #8]
 8013c56:	4613      	mov	r3, r2
 8013c58:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8013c5a:	2301      	movs	r3, #1
 8013c5c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	789b      	ldrb	r3, [r3, #2]
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d002      	beq.n	8013c6c <USBH_CtlReq+0x20>
 8013c66:	2b02      	cmp	r3, #2
 8013c68:	d015      	beq.n	8013c96 <USBH_CtlReq+0x4a>
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
      break;

    default:
      break;
 8013c6a:	e033      	b.n	8013cd4 <USBH_CtlReq+0x88>
      phost->Control.buff = buff;
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	68ba      	ldr	r2, [r7, #8]
 8013c70:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	88fa      	ldrh	r2, [r7, #6]
 8013c76:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	2202      	movs	r2, #2
 8013c82:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8013c84:	2301      	movs	r3, #1
 8013c86:	75fb      	strb	r3, [r7, #23]
      USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013c88:	2300      	movs	r3, #0
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	2103      	movs	r1, #3
 8013c8e:	68f8      	ldr	r0, [r7, #12]
 8013c90:	f7ff fb32 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013c94:	e01e      	b.n	8013cd4 <USBH_CtlReq+0x88>
      status = USBH_HandleControl(phost);
 8013c96:	68f8      	ldr	r0, [r7, #12]
 8013c98:	f000 f822 	bl	8013ce0 <USBH_HandleControl>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8013ca0:	7dfb      	ldrb	r3, [r7, #23]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d002      	beq.n	8013cac <USBH_CtlReq+0x60>
 8013ca6:	7dfb      	ldrb	r3, [r7, #23]
 8013ca8:	2b03      	cmp	r3, #3
 8013caa:	d106      	bne.n	8013cba <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	2201      	movs	r2, #1
 8013cb0:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	761a      	strb	r2, [r3, #24]
 8013cb8:	e005      	b.n	8013cc6 <USBH_CtlReq+0x7a>
      else if (status == USBH_FAIL)
 8013cba:	7dfb      	ldrb	r3, [r7, #23]
 8013cbc:	2b02      	cmp	r3, #2
 8013cbe:	d102      	bne.n	8013cc6 <USBH_CtlReq+0x7a>
        phost->RequestState = CMD_SEND;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	709a      	strb	r2, [r3, #2]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	2200      	movs	r2, #0
 8013cca:	2103      	movs	r1, #3
 8013ccc:	68f8      	ldr	r0, [r7, #12]
 8013cce:	f7ff fb13 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013cd2:	bf00      	nop
  }
  return status;
 8013cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3718      	adds	r7, #24
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
	...

08013ce0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b086      	sub	sp, #24
 8013ce4:	af02      	add	r7, sp, #8
 8013ce6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8013ce8:	2301      	movs	r3, #1
 8013cea:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8013cec:	2300      	movs	r3, #0
 8013cee:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	7e1b      	ldrb	r3, [r3, #24]
 8013cf4:	3b01      	subs	r3, #1
 8013cf6:	2b0a      	cmp	r3, #10
 8013cf8:	f200 81b2 	bhi.w	8014060 <USBH_HandleControl+0x380>
 8013cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8013d04 <USBH_HandleControl+0x24>)
 8013cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d02:	bf00      	nop
 8013d04:	08013d31 	.word	0x08013d31
 8013d08:	08013d4b 	.word	0x08013d4b
 8013d0c:	08013dcd 	.word	0x08013dcd
 8013d10:	08013df3 	.word	0x08013df3
 8013d14:	08013e51 	.word	0x08013e51
 8013d18:	08013e7b 	.word	0x08013e7b
 8013d1c:	08013efd 	.word	0x08013efd
 8013d20:	08013f1f 	.word	0x08013f1f
 8013d24:	08013f81 	.word	0x08013f81
 8013d28:	08013fa7 	.word	0x08013fa7
 8013d2c:	08014009 	.word	0x08014009
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f103 0110 	add.w	r1, r3, #16
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	795b      	ldrb	r3, [r3, #5]
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	6878      	ldr	r0, [r7, #4]
 8013d3e:	f000 f99f 	bl	8014080 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2202      	movs	r2, #2
 8013d46:	761a      	strb	r2, [r3, #24]
      break;
 8013d48:	e195      	b.n	8014076 <USBH_HandleControl+0x396>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	795b      	ldrb	r3, [r3, #5]
 8013d4e:	4619      	mov	r1, r3
 8013d50:	6878      	ldr	r0, [r7, #4]
 8013d52:	f005 fe47 	bl	80199e4 <USBH_LL_GetURBState>
 8013d56:	4603      	mov	r3, r0
 8013d58:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8013d5a:	7bbb      	ldrb	r3, [r7, #14]
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	d124      	bne.n	8013daa <USBH_HandleControl+0xca>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	7c1b      	ldrb	r3, [r3, #16]
 8013d64:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013d68:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	8adb      	ldrh	r3, [r3, #22]
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d00a      	beq.n	8013d88 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8013d72:	7b7b      	ldrb	r3, [r7, #13]
 8013d74:	2b80      	cmp	r3, #128	@ 0x80
 8013d76:	d103      	bne.n	8013d80 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2203      	movs	r2, #3
 8013d7c:	761a      	strb	r2, [r3, #24]
 8013d7e:	e00d      	b.n	8013d9c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	2205      	movs	r2, #5
 8013d84:	761a      	strb	r2, [r3, #24]
 8013d86:	e009      	b.n	8013d9c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8013d88:	7b7b      	ldrb	r3, [r7, #13]
 8013d8a:	2b80      	cmp	r3, #128	@ 0x80
 8013d8c:	d103      	bne.n	8013d96 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2209      	movs	r2, #9
 8013d92:	761a      	strb	r2, [r3, #24]
 8013d94:	e002      	b.n	8013d9c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2207      	movs	r2, #7
 8013d9a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	2200      	movs	r2, #0
 8013da0:	2103      	movs	r1, #3
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f7ff faa8 	bl	80132f8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013da8:	e15c      	b.n	8014064 <USBH_HandleControl+0x384>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8013daa:	7bbb      	ldrb	r3, [r7, #14]
 8013dac:	2b04      	cmp	r3, #4
 8013dae:	d003      	beq.n	8013db8 <USBH_HandleControl+0xd8>
 8013db0:	7bbb      	ldrb	r3, [r7, #14]
 8013db2:	2b02      	cmp	r3, #2
 8013db4:	f040 8156 	bne.w	8014064 <USBH_HandleControl+0x384>
          phost->Control.state = CTRL_ERROR;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	220b      	movs	r2, #11
 8013dbc:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	2103      	movs	r1, #3
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f7ff fa97 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013dca:	e14b      	b.n	8014064 <USBH_HandleControl+0x384>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013dd2:	b29a      	uxth	r2, r3
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	81da      	strh	r2, [r3, #14]

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6899      	ldr	r1, [r3, #8]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	899a      	ldrh	r2, [r3, #12]
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	791b      	ldrb	r3, [r3, #4]
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f000 f98a 	bl	80140fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2204      	movs	r2, #4
 8013dee:	761a      	strb	r2, [r3, #24]
      break;
 8013df0:	e141      	b.n	8014076 <USBH_HandleControl+0x396>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	791b      	ldrb	r3, [r3, #4]
 8013df6:	4619      	mov	r1, r3
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f005 fdf3 	bl	80199e4 <USBH_LL_GetURBState>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8013e02:	7bbb      	ldrb	r3, [r7, #14]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d109      	bne.n	8013e1c <USBH_HandleControl+0x13c>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2209      	movs	r2, #9
 8013e0c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013e0e:	2300      	movs	r3, #0
 8013e10:	2200      	movs	r2, #0
 8013e12:	2103      	movs	r1, #3
 8013e14:	6878      	ldr	r0, [r7, #4]
 8013e16:	f7ff fa6f 	bl	80132f8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013e1a:	e125      	b.n	8014068 <USBH_HandleControl+0x388>
      else if (URB_Status == USBH_URB_STALL)
 8013e1c:	7bbb      	ldrb	r3, [r7, #14]
 8013e1e:	2b05      	cmp	r3, #5
 8013e20:	d108      	bne.n	8013e34 <USBH_HandleControl+0x154>
        status = USBH_NOT_SUPPORTED;
 8013e22:	2303      	movs	r3, #3
 8013e24:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013e26:	2300      	movs	r3, #0
 8013e28:	2200      	movs	r2, #0
 8013e2a:	2103      	movs	r1, #3
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f7ff fa63 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013e32:	e119      	b.n	8014068 <USBH_HandleControl+0x388>
        if (URB_Status == USBH_URB_ERROR)
 8013e34:	7bbb      	ldrb	r3, [r7, #14]
 8013e36:	2b04      	cmp	r3, #4
 8013e38:	f040 8116 	bne.w	8014068 <USBH_HandleControl+0x388>
          phost->Control.state = CTRL_ERROR;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	220b      	movs	r2, #11
 8013e40:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013e42:	2300      	movs	r3, #0
 8013e44:	2200      	movs	r2, #0
 8013e46:	2103      	movs	r1, #3
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f7ff fa55 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013e4e:	e10b      	b.n	8014068 <USBH_HandleControl+0x388>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6899      	ldr	r1, [r3, #8]
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	899a      	ldrh	r2, [r3, #12]
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	795b      	ldrb	r3, [r3, #5]
 8013e5c:	2001      	movs	r0, #1
 8013e5e:	9000      	str	r0, [sp, #0]
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f000 f927 	bl	80140b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013e6c:	b29a      	uxth	r2, r3
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	2206      	movs	r2, #6
 8013e76:	761a      	strb	r2, [r3, #24]
      break;
 8013e78:	e0fd      	b.n	8014076 <USBH_HandleControl+0x396>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	795b      	ldrb	r3, [r3, #5]
 8013e7e:	4619      	mov	r1, r3
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f005 fdaf 	bl	80199e4 <USBH_LL_GetURBState>
 8013e86:	4603      	mov	r3, r0
 8013e88:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013e8a:	7bbb      	ldrb	r3, [r7, #14]
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d109      	bne.n	8013ea4 <USBH_HandleControl+0x1c4>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2207      	movs	r2, #7
 8013e94:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013e96:	2300      	movs	r3, #0
 8013e98:	2200      	movs	r2, #0
 8013e9a:	2103      	movs	r1, #3
 8013e9c:	6878      	ldr	r0, [r7, #4]
 8013e9e:	f7ff fa2b 	bl	80132f8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013ea2:	e0e3      	b.n	801406c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_STALL)
 8013ea4:	7bbb      	ldrb	r3, [r7, #14]
 8013ea6:	2b05      	cmp	r3, #5
 8013ea8:	d10b      	bne.n	8013ec2 <USBH_HandleControl+0x1e2>
        phost->Control.state = CTRL_STALLED;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	220c      	movs	r2, #12
 8013eae:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8013eb0:	2303      	movs	r3, #3
 8013eb2:	73fb      	strb	r3, [r7, #15]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	2103      	movs	r1, #3
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7ff fa1c 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013ec0:	e0d4      	b.n	801406c <USBH_HandleControl+0x38c>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013ec2:	7bbb      	ldrb	r3, [r7, #14]
 8013ec4:	2b02      	cmp	r3, #2
 8013ec6:	d109      	bne.n	8013edc <USBH_HandleControl+0x1fc>
        phost->Control.state = CTRL_DATA_OUT;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2205      	movs	r2, #5
 8013ecc:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013ece:	2300      	movs	r3, #0
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	2103      	movs	r1, #3
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f7ff fa0f 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013eda:	e0c7      	b.n	801406c <USBH_HandleControl+0x38c>
        if (URB_Status == USBH_URB_ERROR)
 8013edc:	7bbb      	ldrb	r3, [r7, #14]
 8013ede:	2b04      	cmp	r3, #4
 8013ee0:	f040 80c4 	bne.w	801406c <USBH_HandleControl+0x38c>
          phost->Control.state = CTRL_ERROR;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	220b      	movs	r2, #11
 8013ee8:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8013eea:	2302      	movs	r3, #2
 8013eec:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013eee:	2300      	movs	r3, #0
 8013ef0:	2200      	movs	r2, #0
 8013ef2:	2103      	movs	r1, #3
 8013ef4:	6878      	ldr	r0, [r7, #4]
 8013ef6:	f7ff f9ff 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013efa:	e0b7      	b.n	801406c <USBH_HandleControl+0x38c>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	791b      	ldrb	r3, [r3, #4]
 8013f00:	2200      	movs	r2, #0
 8013f02:	2100      	movs	r1, #0
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	f000 f8fa 	bl	80140fe <USBH_CtlReceiveData>

#if defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U)
      phost->NakTimer = phost->Timer;
#endif  /* defined (USBH_IN_NAK_PROCESS) && (USBH_IN_NAK_PROCESS == 1U) */

      phost->Control.timer = (uint16_t)phost->Timer;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013f10:	b29a      	uxth	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2208      	movs	r2, #8
 8013f1a:	761a      	strb	r2, [r3, #24]

      break;
 8013f1c:	e0ab      	b.n	8014076 <USBH_HandleControl+0x396>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	791b      	ldrb	r3, [r3, #4]
 8013f22:	4619      	mov	r1, r3
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f005 fd5d 	bl	80199e4 <USBH_LL_GetURBState>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8013f2e:	7bbb      	ldrb	r3, [r7, #14]
 8013f30:	2b01      	cmp	r3, #1
 8013f32:	d10b      	bne.n	8013f4c <USBH_HandleControl+0x26c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	220d      	movs	r2, #13
 8013f38:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013f3e:	2300      	movs	r3, #0
 8013f40:	2200      	movs	r2, #0
 8013f42:	2103      	movs	r1, #3
 8013f44:	6878      	ldr	r0, [r7, #4]
 8013f46:	f7ff f9d7 	bl	80132f8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013f4a:	e091      	b.n	8014070 <USBH_HandleControl+0x390>
      else if (URB_Status == USBH_URB_ERROR)
 8013f4c:	7bbb      	ldrb	r3, [r7, #14]
 8013f4e:	2b04      	cmp	r3, #4
 8013f50:	d109      	bne.n	8013f66 <USBH_HandleControl+0x286>
        phost->Control.state = CTRL_ERROR;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	220b      	movs	r2, #11
 8013f56:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013f58:	2300      	movs	r3, #0
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	2103      	movs	r1, #3
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f7ff f9ca 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013f64:	e084      	b.n	8014070 <USBH_HandleControl+0x390>
        if (URB_Status == USBH_URB_STALL)
 8013f66:	7bbb      	ldrb	r3, [r7, #14]
 8013f68:	2b05      	cmp	r3, #5
 8013f6a:	f040 8081 	bne.w	8014070 <USBH_HandleControl+0x390>
          status = USBH_NOT_SUPPORTED;
 8013f6e:	2303      	movs	r3, #3
 8013f70:	73fb      	strb	r3, [r7, #15]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013f72:	2300      	movs	r3, #0
 8013f74:	2200      	movs	r2, #0
 8013f76:	2103      	movs	r1, #3
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f7ff f9bd 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013f7e:	e077      	b.n	8014070 <USBH_HandleControl+0x390>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	795b      	ldrb	r3, [r3, #5]
 8013f84:	2201      	movs	r2, #1
 8013f86:	9200      	str	r2, [sp, #0]
 8013f88:	2200      	movs	r2, #0
 8013f8a:	2100      	movs	r1, #0
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f000 f891 	bl	80140b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8013f98:	b29a      	uxth	r2, r3
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	220a      	movs	r2, #10
 8013fa2:	761a      	strb	r2, [r3, #24]
      break;
 8013fa4:	e067      	b.n	8014076 <USBH_HandleControl+0x396>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	795b      	ldrb	r3, [r3, #5]
 8013faa:	4619      	mov	r1, r3
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f005 fd19 	bl	80199e4 <USBH_LL_GetURBState>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8013fb6:	7bbb      	ldrb	r3, [r7, #14]
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d10b      	bne.n	8013fd4 <USBH_HandleControl+0x2f4>
      {
        status = USBH_OK;
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	220d      	movs	r2, #13
 8013fc4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	2200      	movs	r2, #0
 8013fca:	2103      	movs	r1, #3
 8013fcc:	6878      	ldr	r0, [r7, #4]
 8013fce:	f7ff f993 	bl	80132f8 <USBH_OS_PutMessage>
#if (USBH_USE_OS == 1U)
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
#endif /* (USBH_USE_OS == 1U) */
        }
      }
      break;
 8013fd2:	e04f      	b.n	8014074 <USBH_HandleControl+0x394>
      else if (URB_Status == USBH_URB_NOTREADY)
 8013fd4:	7bbb      	ldrb	r3, [r7, #14]
 8013fd6:	2b02      	cmp	r3, #2
 8013fd8:	d109      	bne.n	8013fee <USBH_HandleControl+0x30e>
        phost->Control.state = CTRL_STATUS_OUT;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	2209      	movs	r2, #9
 8013fde:	761a      	strb	r2, [r3, #24]
        USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	2103      	movs	r1, #3
 8013fe6:	6878      	ldr	r0, [r7, #4]
 8013fe8:	f7ff f986 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8013fec:	e042      	b.n	8014074 <USBH_HandleControl+0x394>
        if (URB_Status == USBH_URB_ERROR)
 8013fee:	7bbb      	ldrb	r3, [r7, #14]
 8013ff0:	2b04      	cmp	r3, #4
 8013ff2:	d13f      	bne.n	8014074 <USBH_HandleControl+0x394>
          phost->Control.state = CTRL_ERROR;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	220b      	movs	r2, #11
 8013ff8:	761a      	strb	r2, [r3, #24]
          USBH_OS_PutMessage(phost, USBH_CONTROL_EVENT, 0U, 0U);
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	2103      	movs	r1, #3
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f7ff f979 	bl	80132f8 <USBH_OS_PutMessage>
      break;
 8014006:	e035      	b.n	8014074 <USBH_HandleControl+0x394>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	7e5b      	ldrb	r3, [r3, #25]
 801400c:	3301      	adds	r3, #1
 801400e:	b2da      	uxtb	r2, r3
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	765a      	strb	r2, [r3, #25]
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	7e5b      	ldrb	r3, [r3, #25]
 8014018:	2b02      	cmp	r3, #2
 801401a:	d806      	bhi.n	801402a <USBH_HandleControl+0x34a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2201      	movs	r2, #1
 8014020:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2201      	movs	r2, #1
 8014026:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8014028:	e025      	b.n	8014076 <USBH_HandleControl+0x396>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8014030:	2106      	movs	r1, #6
 8014032:	6878      	ldr	r0, [r7, #4]
 8014034:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	2200      	movs	r2, #0
 801403a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	795b      	ldrb	r3, [r3, #5]
 8014040:	4619      	mov	r1, r3
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f000 f90c 	bl	8014260 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	791b      	ldrb	r3, [r3, #4]
 801404c:	4619      	mov	r1, r3
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f000 f906 	bl	8014260 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2200      	movs	r2, #0
 8014058:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801405a:	2302      	movs	r3, #2
 801405c:	73fb      	strb	r3, [r7, #15]
      break;
 801405e:	e00a      	b.n	8014076 <USBH_HandleControl+0x396>

    default:
      break;
 8014060:	bf00      	nop
 8014062:	e008      	b.n	8014076 <USBH_HandleControl+0x396>
      break;
 8014064:	bf00      	nop
 8014066:	e006      	b.n	8014076 <USBH_HandleControl+0x396>
      break;
 8014068:	bf00      	nop
 801406a:	e004      	b.n	8014076 <USBH_HandleControl+0x396>
      break;
 801406c:	bf00      	nop
 801406e:	e002      	b.n	8014076 <USBH_HandleControl+0x396>
      break;
 8014070:	bf00      	nop
 8014072:	e000      	b.n	8014076 <USBH_HandleControl+0x396>
      break;
 8014074:	bf00      	nop
  }

  return status;
 8014076:	7bfb      	ldrb	r3, [r7, #15]
}
 8014078:	4618      	mov	r0, r3
 801407a:	3710      	adds	r7, #16
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b088      	sub	sp, #32
 8014084:	af04      	add	r7, sp, #16
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	4613      	mov	r3, r2
 801408c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801408e:	79f9      	ldrb	r1, [r7, #7]
 8014090:	2300      	movs	r3, #0
 8014092:	9303      	str	r3, [sp, #12]
 8014094:	2308      	movs	r3, #8
 8014096:	9302      	str	r3, [sp, #8]
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	9301      	str	r3, [sp, #4]
 801409c:	2300      	movs	r3, #0
 801409e:	9300      	str	r3, [sp, #0]
 80140a0:	2300      	movs	r3, #0
 80140a2:	2200      	movs	r2, #0
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f005 fc6c 	bl	8019982 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80140aa:	2300      	movs	r3, #0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3710      	adds	r7, #16
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}

080140b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b088      	sub	sp, #32
 80140b8:	af04      	add	r7, sp, #16
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	60b9      	str	r1, [r7, #8]
 80140be:	4611      	mov	r1, r2
 80140c0:	461a      	mov	r2, r3
 80140c2:	460b      	mov	r3, r1
 80140c4:	80fb      	strh	r3, [r7, #6]
 80140c6:	4613      	mov	r3, r2
 80140c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d001      	beq.n	80140d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80140d4:	2300      	movs	r3, #0
 80140d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80140d8:	7979      	ldrb	r1, [r7, #5]
 80140da:	7e3b      	ldrb	r3, [r7, #24]
 80140dc:	9303      	str	r3, [sp, #12]
 80140de:	88fb      	ldrh	r3, [r7, #6]
 80140e0:	9302      	str	r3, [sp, #8]
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	9301      	str	r3, [sp, #4]
 80140e6:	2301      	movs	r3, #1
 80140e8:	9300      	str	r3, [sp, #0]
 80140ea:	2300      	movs	r3, #0
 80140ec:	2200      	movs	r2, #0
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	f005 fc47 	bl	8019982 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80140f4:	2300      	movs	r3, #0
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3710      	adds	r7, #16
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}

080140fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b088      	sub	sp, #32
 8014102:	af04      	add	r7, sp, #16
 8014104:	60f8      	str	r0, [r7, #12]
 8014106:	60b9      	str	r1, [r7, #8]
 8014108:	4611      	mov	r1, r2
 801410a:	461a      	mov	r2, r3
 801410c:	460b      	mov	r3, r1
 801410e:	80fb      	strh	r3, [r7, #6]
 8014110:	4613      	mov	r3, r2
 8014112:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8014114:	7979      	ldrb	r1, [r7, #5]
 8014116:	2300      	movs	r3, #0
 8014118:	9303      	str	r3, [sp, #12]
 801411a:	88fb      	ldrh	r3, [r7, #6]
 801411c:	9302      	str	r3, [sp, #8]
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	9301      	str	r3, [sp, #4]
 8014122:	2301      	movs	r3, #1
 8014124:	9300      	str	r3, [sp, #0]
 8014126:	2300      	movs	r3, #0
 8014128:	2201      	movs	r2, #1
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	f005 fc29 	bl	8019982 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8014130:	2300      	movs	r3, #0

}
 8014132:	4618      	mov	r0, r3
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}

0801413a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 801413a:	b580      	push	{r7, lr}
 801413c:	b088      	sub	sp, #32
 801413e:	af04      	add	r7, sp, #16
 8014140:	60f8      	str	r0, [r7, #12]
 8014142:	60b9      	str	r1, [r7, #8]
 8014144:	4611      	mov	r1, r2
 8014146:	461a      	mov	r2, r3
 8014148:	460b      	mov	r3, r1
 801414a:	80fb      	strh	r3, [r7, #6]
 801414c:	4613      	mov	r3, r2
 801414e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8014156:	2b00      	cmp	r3, #0
 8014158:	d001      	beq.n	801415e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 801415a:	2300      	movs	r3, #0
 801415c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801415e:	7979      	ldrb	r1, [r7, #5]
 8014160:	7e3b      	ldrb	r3, [r7, #24]
 8014162:	9303      	str	r3, [sp, #12]
 8014164:	88fb      	ldrh	r3, [r7, #6]
 8014166:	9302      	str	r3, [sp, #8]
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	9301      	str	r3, [sp, #4]
 801416c:	2301      	movs	r3, #1
 801416e:	9300      	str	r3, [sp, #0]
 8014170:	2302      	movs	r3, #2
 8014172:	2200      	movs	r2, #0
 8014174:	68f8      	ldr	r0, [r7, #12]
 8014176:	f005 fc04 	bl	8019982 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 801417a:	2300      	movs	r3, #0
}
 801417c:	4618      	mov	r0, r3
 801417e:	3710      	adds	r7, #16
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}

08014184 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b088      	sub	sp, #32
 8014188:	af04      	add	r7, sp, #16
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	60b9      	str	r1, [r7, #8]
 801418e:	4611      	mov	r1, r2
 8014190:	461a      	mov	r2, r3
 8014192:	460b      	mov	r3, r1
 8014194:	80fb      	strh	r3, [r7, #6]
 8014196:	4613      	mov	r3, r2
 8014198:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801419a:	7979      	ldrb	r1, [r7, #5]
 801419c:	2300      	movs	r3, #0
 801419e:	9303      	str	r3, [sp, #12]
 80141a0:	88fb      	ldrh	r3, [r7, #6]
 80141a2:	9302      	str	r3, [sp, #8]
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	9301      	str	r3, [sp, #4]
 80141a8:	2301      	movs	r3, #1
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	2302      	movs	r3, #2
 80141ae:	2201      	movs	r2, #1
 80141b0:	68f8      	ldr	r0, [r7, #12]
 80141b2:	f005 fbe6 	bl	8019982 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80141b6:	2300      	movs	r3, #0
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3710      	adds	r7, #16
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b086      	sub	sp, #24
 80141c4:	af04      	add	r7, sp, #16
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	4608      	mov	r0, r1
 80141ca:	4611      	mov	r1, r2
 80141cc:	461a      	mov	r2, r3
 80141ce:	4603      	mov	r3, r0
 80141d0:	70fb      	strb	r3, [r7, #3]
 80141d2:	460b      	mov	r3, r1
 80141d4:	70bb      	strb	r3, [r7, #2]
 80141d6:	4613      	mov	r3, r2
 80141d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80141da:	7878      	ldrb	r0, [r7, #1]
 80141dc:	78ba      	ldrb	r2, [r7, #2]
 80141de:	78f9      	ldrb	r1, [r7, #3]
 80141e0:	8b3b      	ldrh	r3, [r7, #24]
 80141e2:	9302      	str	r3, [sp, #8]
 80141e4:	7d3b      	ldrb	r3, [r7, #20]
 80141e6:	9301      	str	r3, [sp, #4]
 80141e8:	7c3b      	ldrb	r3, [r7, #16]
 80141ea:	9300      	str	r3, [sp, #0]
 80141ec:	4603      	mov	r3, r0
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f005 fb79 	bl	80198e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 80141f4:	2300      	movs	r3, #0
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3708      	adds	r7, #8
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}

080141fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b082      	sub	sp, #8
 8014202:	af00      	add	r7, sp, #0
 8014204:	6078      	str	r0, [r7, #4]
 8014206:	460b      	mov	r3, r1
 8014208:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 801420a:	78fb      	ldrb	r3, [r7, #3]
 801420c:	4619      	mov	r1, r3
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f005 fb98 	bl	8019944 <USBH_LL_ClosePipe>

  return USBH_OK;
 8014214:	2300      	movs	r3, #0
}
 8014216:	4618      	mov	r0, r3
 8014218:	3708      	adds	r7, #8
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b084      	sub	sp, #16
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
 8014226:	460b      	mov	r3, r1
 8014228:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f000 f836 	bl	801429c <USBH_GetFreePipe>
 8014230:	4603      	mov	r3, r0
 8014232:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8014234:	89fb      	ldrh	r3, [r7, #14]
 8014236:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801423a:	4293      	cmp	r3, r2
 801423c:	d00a      	beq.n	8014254 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 801423e:	78fa      	ldrb	r2, [r7, #3]
 8014240:	89fb      	ldrh	r3, [r7, #14]
 8014242:	f003 030f 	and.w	r3, r3, #15
 8014246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801424a:	6879      	ldr	r1, [r7, #4]
 801424c:	33e0      	adds	r3, #224	@ 0xe0
 801424e:	009b      	lsls	r3, r3, #2
 8014250:	440b      	add	r3, r1
 8014252:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8014254:	89fb      	ldrh	r3, [r7, #14]
 8014256:	b2db      	uxtb	r3, r3
}
 8014258:	4618      	mov	r0, r3
 801425a:	3710      	adds	r7, #16
 801425c:	46bd      	mov	sp, r7
 801425e:	bd80      	pop	{r7, pc}

08014260 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	460b      	mov	r3, r1
 801426a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 801426c:	78fb      	ldrb	r3, [r7, #3]
 801426e:	2b0f      	cmp	r3, #15
 8014270:	d80d      	bhi.n	801428e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8014272:	78fb      	ldrb	r3, [r7, #3]
 8014274:	687a      	ldr	r2, [r7, #4]
 8014276:	33e0      	adds	r3, #224	@ 0xe0
 8014278:	009b      	lsls	r3, r3, #2
 801427a:	4413      	add	r3, r2
 801427c:	685a      	ldr	r2, [r3, #4]
 801427e:	78fb      	ldrb	r3, [r7, #3]
 8014280:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8014284:	6879      	ldr	r1, [r7, #4]
 8014286:	33e0      	adds	r3, #224	@ 0xe0
 8014288:	009b      	lsls	r3, r3, #2
 801428a:	440b      	add	r3, r1
 801428c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 801428e:	2300      	movs	r3, #0
}
 8014290:	4618      	mov	r0, r3
 8014292:	370c      	adds	r7, #12
 8014294:	46bd      	mov	sp, r7
 8014296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429a:	4770      	bx	lr

0801429c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 801429c:	b480      	push	{r7}
 801429e:	b085      	sub	sp, #20
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80142a4:	2300      	movs	r3, #0
 80142a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80142a8:	2300      	movs	r3, #0
 80142aa:	73fb      	strb	r3, [r7, #15]
 80142ac:	e00f      	b.n	80142ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80142ae:	7bfb      	ldrb	r3, [r7, #15]
 80142b0:	687a      	ldr	r2, [r7, #4]
 80142b2:	33e0      	adds	r3, #224	@ 0xe0
 80142b4:	009b      	lsls	r3, r3, #2
 80142b6:	4413      	add	r3, r2
 80142b8:	685b      	ldr	r3, [r3, #4]
 80142ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d102      	bne.n	80142c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80142c2:	7bfb      	ldrb	r3, [r7, #15]
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	e007      	b.n	80142d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80142c8:	7bfb      	ldrb	r3, [r7, #15]
 80142ca:	3301      	adds	r3, #1
 80142cc:	73fb      	strb	r3, [r7, #15]
 80142ce:	7bfb      	ldrb	r3, [r7, #15]
 80142d0:	2b0f      	cmp	r3, #15
 80142d2:	d9ec      	bls.n	80142ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80142d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3714      	adds	r7, #20
 80142dc:	46bd      	mov	sp, r7
 80142de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e2:	4770      	bx	lr

080142e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	4603      	mov	r3, r0
 80142ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80142ee:	79fb      	ldrb	r3, [r7, #7]
 80142f0:	4a08      	ldr	r2, [pc, #32]	@ (8014314 <disk_status+0x30>)
 80142f2:	009b      	lsls	r3, r3, #2
 80142f4:	4413      	add	r3, r2
 80142f6:	685b      	ldr	r3, [r3, #4]
 80142f8:	685b      	ldr	r3, [r3, #4]
 80142fa:	79fa      	ldrb	r2, [r7, #7]
 80142fc:	4905      	ldr	r1, [pc, #20]	@ (8014314 <disk_status+0x30>)
 80142fe:	440a      	add	r2, r1
 8014300:	7a12      	ldrb	r2, [r2, #8]
 8014302:	4610      	mov	r0, r2
 8014304:	4798      	blx	r3
 8014306:	4603      	mov	r3, r0
 8014308:	73fb      	strb	r3, [r7, #15]
  return stat;
 801430a:	7bfb      	ldrb	r3, [r7, #15]
}
 801430c:	4618      	mov	r0, r3
 801430e:	3710      	adds	r7, #16
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}
 8014314:	200015b4 	.word	0x200015b4

08014318 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b084      	sub	sp, #16
 801431c:	af00      	add	r7, sp, #0
 801431e:	4603      	mov	r3, r0
 8014320:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8014322:	2300      	movs	r3, #0
 8014324:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8014326:	79fb      	ldrb	r3, [r7, #7]
 8014328:	4a0d      	ldr	r2, [pc, #52]	@ (8014360 <disk_initialize+0x48>)
 801432a:	5cd3      	ldrb	r3, [r2, r3]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d111      	bne.n	8014354 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014330:	79fb      	ldrb	r3, [r7, #7]
 8014332:	4a0b      	ldr	r2, [pc, #44]	@ (8014360 <disk_initialize+0x48>)
 8014334:	2101      	movs	r1, #1
 8014336:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8014338:	79fb      	ldrb	r3, [r7, #7]
 801433a:	4a09      	ldr	r2, [pc, #36]	@ (8014360 <disk_initialize+0x48>)
 801433c:	009b      	lsls	r3, r3, #2
 801433e:	4413      	add	r3, r2
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	79fa      	ldrb	r2, [r7, #7]
 8014346:	4906      	ldr	r1, [pc, #24]	@ (8014360 <disk_initialize+0x48>)
 8014348:	440a      	add	r2, r1
 801434a:	7a12      	ldrb	r2, [r2, #8]
 801434c:	4610      	mov	r0, r2
 801434e:	4798      	blx	r3
 8014350:	4603      	mov	r3, r0
 8014352:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8014354:	7bfb      	ldrb	r3, [r7, #15]
}
 8014356:	4618      	mov	r0, r3
 8014358:	3710      	adds	r7, #16
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}
 801435e:	bf00      	nop
 8014360:	200015b4 	.word	0x200015b4

08014364 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8014364:	b590      	push	{r4, r7, lr}
 8014366:	b087      	sub	sp, #28
 8014368:	af00      	add	r7, sp, #0
 801436a:	60b9      	str	r1, [r7, #8]
 801436c:	607a      	str	r2, [r7, #4]
 801436e:	603b      	str	r3, [r7, #0]
 8014370:	4603      	mov	r3, r0
 8014372:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8014374:	7bfb      	ldrb	r3, [r7, #15]
 8014376:	4a0a      	ldr	r2, [pc, #40]	@ (80143a0 <disk_read+0x3c>)
 8014378:	009b      	lsls	r3, r3, #2
 801437a:	4413      	add	r3, r2
 801437c:	685b      	ldr	r3, [r3, #4]
 801437e:	689c      	ldr	r4, [r3, #8]
 8014380:	7bfb      	ldrb	r3, [r7, #15]
 8014382:	4a07      	ldr	r2, [pc, #28]	@ (80143a0 <disk_read+0x3c>)
 8014384:	4413      	add	r3, r2
 8014386:	7a18      	ldrb	r0, [r3, #8]
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	687a      	ldr	r2, [r7, #4]
 801438c:	68b9      	ldr	r1, [r7, #8]
 801438e:	47a0      	blx	r4
 8014390:	4603      	mov	r3, r0
 8014392:	75fb      	strb	r3, [r7, #23]
  return res;
 8014394:	7dfb      	ldrb	r3, [r7, #23]
}
 8014396:	4618      	mov	r0, r3
 8014398:	371c      	adds	r7, #28
 801439a:	46bd      	mov	sp, r7
 801439c:	bd90      	pop	{r4, r7, pc}
 801439e:	bf00      	nop
 80143a0:	200015b4 	.word	0x200015b4

080143a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80143a4:	b590      	push	{r4, r7, lr}
 80143a6:	b087      	sub	sp, #28
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	60b9      	str	r1, [r7, #8]
 80143ac:	607a      	str	r2, [r7, #4]
 80143ae:	603b      	str	r3, [r7, #0]
 80143b0:	4603      	mov	r3, r0
 80143b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80143b4:	7bfb      	ldrb	r3, [r7, #15]
 80143b6:	4a0a      	ldr	r2, [pc, #40]	@ (80143e0 <disk_write+0x3c>)
 80143b8:	009b      	lsls	r3, r3, #2
 80143ba:	4413      	add	r3, r2
 80143bc:	685b      	ldr	r3, [r3, #4]
 80143be:	68dc      	ldr	r4, [r3, #12]
 80143c0:	7bfb      	ldrb	r3, [r7, #15]
 80143c2:	4a07      	ldr	r2, [pc, #28]	@ (80143e0 <disk_write+0x3c>)
 80143c4:	4413      	add	r3, r2
 80143c6:	7a18      	ldrb	r0, [r3, #8]
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	687a      	ldr	r2, [r7, #4]
 80143cc:	68b9      	ldr	r1, [r7, #8]
 80143ce:	47a0      	blx	r4
 80143d0:	4603      	mov	r3, r0
 80143d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80143d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	371c      	adds	r7, #28
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd90      	pop	{r4, r7, pc}
 80143de:	bf00      	nop
 80143e0:	200015b4 	.word	0x200015b4

080143e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b084      	sub	sp, #16
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	4603      	mov	r3, r0
 80143ec:	603a      	str	r2, [r7, #0]
 80143ee:	71fb      	strb	r3, [r7, #7]
 80143f0:	460b      	mov	r3, r1
 80143f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80143f4:	79fb      	ldrb	r3, [r7, #7]
 80143f6:	4a09      	ldr	r2, [pc, #36]	@ (801441c <disk_ioctl+0x38>)
 80143f8:	009b      	lsls	r3, r3, #2
 80143fa:	4413      	add	r3, r2
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	691b      	ldr	r3, [r3, #16]
 8014400:	79fa      	ldrb	r2, [r7, #7]
 8014402:	4906      	ldr	r1, [pc, #24]	@ (801441c <disk_ioctl+0x38>)
 8014404:	440a      	add	r2, r1
 8014406:	7a10      	ldrb	r0, [r2, #8]
 8014408:	79b9      	ldrb	r1, [r7, #6]
 801440a:	683a      	ldr	r2, [r7, #0]
 801440c:	4798      	blx	r3
 801440e:	4603      	mov	r3, r0
 8014410:	73fb      	strb	r3, [r7, #15]
  return res;
 8014412:	7bfb      	ldrb	r3, [r7, #15]
}
 8014414:	4618      	mov	r0, r3
 8014416:	3710      	adds	r7, #16
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}
 801441c:	200015b4 	.word	0x200015b4

08014420 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014420:	b480      	push	{r7}
 8014422:	b085      	sub	sp, #20
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	3301      	adds	r3, #1
 801442c:	781b      	ldrb	r3, [r3, #0]
 801442e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014434:	021b      	lsls	r3, r3, #8
 8014436:	b21a      	sxth	r2, r3
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	781b      	ldrb	r3, [r3, #0]
 801443c:	b21b      	sxth	r3, r3
 801443e:	4313      	orrs	r3, r2
 8014440:	b21b      	sxth	r3, r3
 8014442:	81fb      	strh	r3, [r7, #14]
	return rv;
 8014444:	89fb      	ldrh	r3, [r7, #14]
}
 8014446:	4618      	mov	r0, r3
 8014448:	3714      	adds	r7, #20
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr

08014452 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8014452:	b480      	push	{r7}
 8014454:	b085      	sub	sp, #20
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	3303      	adds	r3, #3
 801445e:	781b      	ldrb	r3, [r3, #0]
 8014460:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	021b      	lsls	r3, r3, #8
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	3202      	adds	r2, #2
 801446a:	7812      	ldrb	r2, [r2, #0]
 801446c:	4313      	orrs	r3, r2
 801446e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	021b      	lsls	r3, r3, #8
 8014474:	687a      	ldr	r2, [r7, #4]
 8014476:	3201      	adds	r2, #1
 8014478:	7812      	ldrb	r2, [r2, #0]
 801447a:	4313      	orrs	r3, r2
 801447c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	021b      	lsls	r3, r3, #8
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	7812      	ldrb	r2, [r2, #0]
 8014486:	4313      	orrs	r3, r2
 8014488:	60fb      	str	r3, [r7, #12]
	return rv;
 801448a:	68fb      	ldr	r3, [r7, #12]
}
 801448c:	4618      	mov	r0, r3
 801448e:	3714      	adds	r7, #20
 8014490:	46bd      	mov	sp, r7
 8014492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014496:	4770      	bx	lr

08014498 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8014498:	b480      	push	{r7}
 801449a:	b083      	sub	sp, #12
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	460b      	mov	r3, r1
 80144a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	1c5a      	adds	r2, r3, #1
 80144a8:	607a      	str	r2, [r7, #4]
 80144aa:	887a      	ldrh	r2, [r7, #2]
 80144ac:	b2d2      	uxtb	r2, r2
 80144ae:	701a      	strb	r2, [r3, #0]
 80144b0:	887b      	ldrh	r3, [r7, #2]
 80144b2:	0a1b      	lsrs	r3, r3, #8
 80144b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	1c5a      	adds	r2, r3, #1
 80144ba:	607a      	str	r2, [r7, #4]
 80144bc:	887a      	ldrh	r2, [r7, #2]
 80144be:	b2d2      	uxtb	r2, r2
 80144c0:	701a      	strb	r2, [r3, #0]
}
 80144c2:	bf00      	nop
 80144c4:	370c      	adds	r7, #12
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr

080144ce <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80144ce:	b480      	push	{r7}
 80144d0:	b083      	sub	sp, #12
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
 80144d6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	1c5a      	adds	r2, r3, #1
 80144dc:	607a      	str	r2, [r7, #4]
 80144de:	683a      	ldr	r2, [r7, #0]
 80144e0:	b2d2      	uxtb	r2, r2
 80144e2:	701a      	strb	r2, [r3, #0]
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	0a1b      	lsrs	r3, r3, #8
 80144e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	1c5a      	adds	r2, r3, #1
 80144ee:	607a      	str	r2, [r7, #4]
 80144f0:	683a      	ldr	r2, [r7, #0]
 80144f2:	b2d2      	uxtb	r2, r2
 80144f4:	701a      	strb	r2, [r3, #0]
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	0a1b      	lsrs	r3, r3, #8
 80144fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	1c5a      	adds	r2, r3, #1
 8014500:	607a      	str	r2, [r7, #4]
 8014502:	683a      	ldr	r2, [r7, #0]
 8014504:	b2d2      	uxtb	r2, r2
 8014506:	701a      	strb	r2, [r3, #0]
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	0a1b      	lsrs	r3, r3, #8
 801450c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	1c5a      	adds	r2, r3, #1
 8014512:	607a      	str	r2, [r7, #4]
 8014514:	683a      	ldr	r2, [r7, #0]
 8014516:	b2d2      	uxtb	r2, r2
 8014518:	701a      	strb	r2, [r3, #0]
}
 801451a:	bf00      	nop
 801451c:	370c      	adds	r7, #12
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr

08014526 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014526:	b480      	push	{r7}
 8014528:	b087      	sub	sp, #28
 801452a:	af00      	add	r7, sp, #0
 801452c:	60f8      	str	r0, [r7, #12]
 801452e:	60b9      	str	r1, [r7, #8]
 8014530:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d00d      	beq.n	801455c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014540:	693a      	ldr	r2, [r7, #16]
 8014542:	1c53      	adds	r3, r2, #1
 8014544:	613b      	str	r3, [r7, #16]
 8014546:	697b      	ldr	r3, [r7, #20]
 8014548:	1c59      	adds	r1, r3, #1
 801454a:	6179      	str	r1, [r7, #20]
 801454c:	7812      	ldrb	r2, [r2, #0]
 801454e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	3b01      	subs	r3, #1
 8014554:	607b      	str	r3, [r7, #4]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d1f1      	bne.n	8014540 <mem_cpy+0x1a>
	}
}
 801455c:	bf00      	nop
 801455e:	371c      	adds	r7, #28
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014568:	b480      	push	{r7}
 801456a:	b087      	sub	sp, #28
 801456c:	af00      	add	r7, sp, #0
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	1c5a      	adds	r2, r3, #1
 801457c:	617a      	str	r2, [r7, #20]
 801457e:	68ba      	ldr	r2, [r7, #8]
 8014580:	b2d2      	uxtb	r2, r2
 8014582:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	3b01      	subs	r3, #1
 8014588:	607b      	str	r3, [r7, #4]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d1f3      	bne.n	8014578 <mem_set+0x10>
}
 8014590:	bf00      	nop
 8014592:	bf00      	nop
 8014594:	371c      	adds	r7, #28
 8014596:	46bd      	mov	sp, r7
 8014598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459c:	4770      	bx	lr

0801459e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801459e:	b480      	push	{r7}
 80145a0:	b089      	sub	sp, #36	@ 0x24
 80145a2:	af00      	add	r7, sp, #0
 80145a4:	60f8      	str	r0, [r7, #12]
 80145a6:	60b9      	str	r1, [r7, #8]
 80145a8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	61fb      	str	r3, [r7, #28]
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80145b2:	2300      	movs	r3, #0
 80145b4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80145b6:	69fb      	ldr	r3, [r7, #28]
 80145b8:	1c5a      	adds	r2, r3, #1
 80145ba:	61fa      	str	r2, [r7, #28]
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	4619      	mov	r1, r3
 80145c0:	69bb      	ldr	r3, [r7, #24]
 80145c2:	1c5a      	adds	r2, r3, #1
 80145c4:	61ba      	str	r2, [r7, #24]
 80145c6:	781b      	ldrb	r3, [r3, #0]
 80145c8:	1acb      	subs	r3, r1, r3
 80145ca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	3b01      	subs	r3, #1
 80145d0:	607b      	str	r3, [r7, #4]
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d002      	beq.n	80145de <mem_cmp+0x40>
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d0eb      	beq.n	80145b6 <mem_cmp+0x18>

	return r;
 80145de:	697b      	ldr	r3, [r7, #20]
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	3724      	adds	r7, #36	@ 0x24
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr

080145ec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80145ec:	b480      	push	{r7}
 80145ee:	b083      	sub	sp, #12
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
 80145f4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80145f6:	e002      	b.n	80145fe <chk_chr+0x12>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	3301      	adds	r3, #1
 80145fc:	607b      	str	r3, [r7, #4]
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d005      	beq.n	8014612 <chk_chr+0x26>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	461a      	mov	r2, r3
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	4293      	cmp	r3, r2
 8014610:	d1f2      	bne.n	80145f8 <chk_chr+0xc>
	return *str;
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	781b      	ldrb	r3, [r3, #0]
}
 8014616:	4618      	mov	r0, r3
 8014618:	370c      	adds	r7, #12
 801461a:	46bd      	mov	sp, r7
 801461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014620:	4770      	bx	lr

08014622 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8014622:	b580      	push	{r7, lr}
 8014624:	b082      	sub	sp, #8
 8014626:	af00      	add	r7, sp, #0
 8014628:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d009      	beq.n	8014644 <lock_fs+0x22>
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	68db      	ldr	r3, [r3, #12]
 8014634:	4618      	mov	r0, r3
 8014636:	f002 f852 	bl	80166de <ff_req_grant>
 801463a:	4603      	mov	r3, r0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d001      	beq.n	8014644 <lock_fs+0x22>
 8014640:	2301      	movs	r3, #1
 8014642:	e000      	b.n	8014646 <lock_fs+0x24>
 8014644:	2300      	movs	r3, #0
}
 8014646:	4618      	mov	r0, r3
 8014648:	3708      	adds	r7, #8
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}

0801464e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 801464e:	b580      	push	{r7, lr}
 8014650:	b082      	sub	sp, #8
 8014652:	af00      	add	r7, sp, #0
 8014654:	6078      	str	r0, [r7, #4]
 8014656:	460b      	mov	r3, r1
 8014658:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00d      	beq.n	801467c <unlock_fs+0x2e>
 8014660:	78fb      	ldrb	r3, [r7, #3]
 8014662:	2b0c      	cmp	r3, #12
 8014664:	d00a      	beq.n	801467c <unlock_fs+0x2e>
 8014666:	78fb      	ldrb	r3, [r7, #3]
 8014668:	2b0b      	cmp	r3, #11
 801466a:	d007      	beq.n	801467c <unlock_fs+0x2e>
 801466c:	78fb      	ldrb	r3, [r7, #3]
 801466e:	2b0f      	cmp	r3, #15
 8014670:	d004      	beq.n	801467c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	68db      	ldr	r3, [r3, #12]
 8014676:	4618      	mov	r0, r3
 8014678:	f002 f846 	bl	8016708 <ff_rel_grant>
	}
}
 801467c:	bf00      	nop
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014684:	b480      	push	{r7}
 8014686:	b085      	sub	sp, #20
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801468e:	2300      	movs	r3, #0
 8014690:	60bb      	str	r3, [r7, #8]
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	60fb      	str	r3, [r7, #12]
 8014696:	e029      	b.n	80146ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8014698:	4a27      	ldr	r2, [pc, #156]	@ (8014738 <chk_lock+0xb4>)
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	011b      	lsls	r3, r3, #4
 801469e:	4413      	add	r3, r2
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d01d      	beq.n	80146e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80146a6:	4a24      	ldr	r2, [pc, #144]	@ (8014738 <chk_lock+0xb4>)
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	011b      	lsls	r3, r3, #4
 80146ac:	4413      	add	r3, r2
 80146ae:	681a      	ldr	r2, [r3, #0]
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d116      	bne.n	80146e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80146b8:	4a1f      	ldr	r2, [pc, #124]	@ (8014738 <chk_lock+0xb4>)
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	011b      	lsls	r3, r3, #4
 80146be:	4413      	add	r3, r2
 80146c0:	3304      	adds	r3, #4
 80146c2:	681a      	ldr	r2, [r3, #0]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d10c      	bne.n	80146e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80146cc:	4a1a      	ldr	r2, [pc, #104]	@ (8014738 <chk_lock+0xb4>)
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	011b      	lsls	r3, r3, #4
 80146d2:	4413      	add	r3, r2
 80146d4:	3308      	adds	r3, #8
 80146d6:	681a      	ldr	r2, [r3, #0]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80146dc:	429a      	cmp	r2, r3
 80146de:	d102      	bne.n	80146e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80146e0:	e007      	b.n	80146f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80146e2:	2301      	movs	r3, #1
 80146e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	3301      	adds	r3, #1
 80146ea:	60fb      	str	r3, [r7, #12]
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2b01      	cmp	r3, #1
 80146f0:	d9d2      	bls.n	8014698 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2b02      	cmp	r3, #2
 80146f6:	d109      	bne.n	801470c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80146f8:	68bb      	ldr	r3, [r7, #8]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d102      	bne.n	8014704 <chk_lock+0x80>
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	2b02      	cmp	r3, #2
 8014702:	d101      	bne.n	8014708 <chk_lock+0x84>
 8014704:	2300      	movs	r3, #0
 8014706:	e010      	b.n	801472a <chk_lock+0xa6>
 8014708:	2312      	movs	r3, #18
 801470a:	e00e      	b.n	801472a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d108      	bne.n	8014724 <chk_lock+0xa0>
 8014712:	4a09      	ldr	r2, [pc, #36]	@ (8014738 <chk_lock+0xb4>)
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	011b      	lsls	r3, r3, #4
 8014718:	4413      	add	r3, r2
 801471a:	330c      	adds	r3, #12
 801471c:	881b      	ldrh	r3, [r3, #0]
 801471e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014722:	d101      	bne.n	8014728 <chk_lock+0xa4>
 8014724:	2310      	movs	r3, #16
 8014726:	e000      	b.n	801472a <chk_lock+0xa6>
 8014728:	2300      	movs	r3, #0
}
 801472a:	4618      	mov	r0, r3
 801472c:	3714      	adds	r7, #20
 801472e:	46bd      	mov	sp, r7
 8014730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014734:	4770      	bx	lr
 8014736:	bf00      	nop
 8014738:	20001594 	.word	0x20001594

0801473c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801473c:	b480      	push	{r7}
 801473e:	b083      	sub	sp, #12
 8014740:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8014742:	2300      	movs	r3, #0
 8014744:	607b      	str	r3, [r7, #4]
 8014746:	e002      	b.n	801474e <enq_lock+0x12>
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	3301      	adds	r3, #1
 801474c:	607b      	str	r3, [r7, #4]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2b01      	cmp	r3, #1
 8014752:	d806      	bhi.n	8014762 <enq_lock+0x26>
 8014754:	4a09      	ldr	r2, [pc, #36]	@ (801477c <enq_lock+0x40>)
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	011b      	lsls	r3, r3, #4
 801475a:	4413      	add	r3, r2
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d1f2      	bne.n	8014748 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2b02      	cmp	r3, #2
 8014766:	bf14      	ite	ne
 8014768:	2301      	movne	r3, #1
 801476a:	2300      	moveq	r3, #0
 801476c:	b2db      	uxtb	r3, r3
}
 801476e:	4618      	mov	r0, r3
 8014770:	370c      	adds	r7, #12
 8014772:	46bd      	mov	sp, r7
 8014774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop
 801477c:	20001594 	.word	0x20001594

08014780 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8014780:	b480      	push	{r7}
 8014782:	b085      	sub	sp, #20
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801478a:	2300      	movs	r3, #0
 801478c:	60fb      	str	r3, [r7, #12]
 801478e:	e01f      	b.n	80147d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8014790:	4a41      	ldr	r2, [pc, #260]	@ (8014898 <inc_lock+0x118>)
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	011b      	lsls	r3, r3, #4
 8014796:	4413      	add	r3, r2
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	429a      	cmp	r2, r3
 80147a0:	d113      	bne.n	80147ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80147a2:	4a3d      	ldr	r2, [pc, #244]	@ (8014898 <inc_lock+0x118>)
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	011b      	lsls	r3, r3, #4
 80147a8:	4413      	add	r3, r2
 80147aa:	3304      	adds	r3, #4
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d109      	bne.n	80147ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80147b6:	4a38      	ldr	r2, [pc, #224]	@ (8014898 <inc_lock+0x118>)
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	011b      	lsls	r3, r3, #4
 80147bc:	4413      	add	r3, r2
 80147be:	3308      	adds	r3, #8
 80147c0:	681a      	ldr	r2, [r3, #0]
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80147c6:	429a      	cmp	r2, r3
 80147c8:	d006      	beq.n	80147d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	3301      	adds	r3, #1
 80147ce:	60fb      	str	r3, [r7, #12]
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	2b01      	cmp	r3, #1
 80147d4:	d9dc      	bls.n	8014790 <inc_lock+0x10>
 80147d6:	e000      	b.n	80147da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80147d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2b02      	cmp	r3, #2
 80147de:	d132      	bne.n	8014846 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80147e0:	2300      	movs	r3, #0
 80147e2:	60fb      	str	r3, [r7, #12]
 80147e4:	e002      	b.n	80147ec <inc_lock+0x6c>
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	3301      	adds	r3, #1
 80147ea:	60fb      	str	r3, [r7, #12]
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	2b01      	cmp	r3, #1
 80147f0:	d806      	bhi.n	8014800 <inc_lock+0x80>
 80147f2:	4a29      	ldr	r2, [pc, #164]	@ (8014898 <inc_lock+0x118>)
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	011b      	lsls	r3, r3, #4
 80147f8:	4413      	add	r3, r2
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d1f2      	bne.n	80147e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2b02      	cmp	r3, #2
 8014804:	d101      	bne.n	801480a <inc_lock+0x8a>
 8014806:	2300      	movs	r3, #0
 8014808:	e040      	b.n	801488c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681a      	ldr	r2, [r3, #0]
 801480e:	4922      	ldr	r1, [pc, #136]	@ (8014898 <inc_lock+0x118>)
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	011b      	lsls	r3, r3, #4
 8014814:	440b      	add	r3, r1
 8014816:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	689a      	ldr	r2, [r3, #8]
 801481c:	491e      	ldr	r1, [pc, #120]	@ (8014898 <inc_lock+0x118>)
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	011b      	lsls	r3, r3, #4
 8014822:	440b      	add	r3, r1
 8014824:	3304      	adds	r3, #4
 8014826:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	695a      	ldr	r2, [r3, #20]
 801482c:	491a      	ldr	r1, [pc, #104]	@ (8014898 <inc_lock+0x118>)
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	011b      	lsls	r3, r3, #4
 8014832:	440b      	add	r3, r1
 8014834:	3308      	adds	r3, #8
 8014836:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8014838:	4a17      	ldr	r2, [pc, #92]	@ (8014898 <inc_lock+0x118>)
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	011b      	lsls	r3, r3, #4
 801483e:	4413      	add	r3, r2
 8014840:	330c      	adds	r3, #12
 8014842:	2200      	movs	r2, #0
 8014844:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d009      	beq.n	8014860 <inc_lock+0xe0>
 801484c:	4a12      	ldr	r2, [pc, #72]	@ (8014898 <inc_lock+0x118>)
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	011b      	lsls	r3, r3, #4
 8014852:	4413      	add	r3, r2
 8014854:	330c      	adds	r3, #12
 8014856:	881b      	ldrh	r3, [r3, #0]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d001      	beq.n	8014860 <inc_lock+0xe0>
 801485c:	2300      	movs	r3, #0
 801485e:	e015      	b.n	801488c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d108      	bne.n	8014878 <inc_lock+0xf8>
 8014866:	4a0c      	ldr	r2, [pc, #48]	@ (8014898 <inc_lock+0x118>)
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	011b      	lsls	r3, r3, #4
 801486c:	4413      	add	r3, r2
 801486e:	330c      	adds	r3, #12
 8014870:	881b      	ldrh	r3, [r3, #0]
 8014872:	3301      	adds	r3, #1
 8014874:	b29a      	uxth	r2, r3
 8014876:	e001      	b.n	801487c <inc_lock+0xfc>
 8014878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801487c:	4906      	ldr	r1, [pc, #24]	@ (8014898 <inc_lock+0x118>)
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	011b      	lsls	r3, r3, #4
 8014882:	440b      	add	r3, r1
 8014884:	330c      	adds	r3, #12
 8014886:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	3301      	adds	r3, #1
}
 801488c:	4618      	mov	r0, r3
 801488e:	3714      	adds	r7, #20
 8014890:	46bd      	mov	sp, r7
 8014892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014896:	4770      	bx	lr
 8014898:	20001594 	.word	0x20001594

0801489c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801489c:	b480      	push	{r7}
 801489e:	b085      	sub	sp, #20
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	3b01      	subs	r3, #1
 80148a8:	607b      	str	r3, [r7, #4]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	2b01      	cmp	r3, #1
 80148ae:	d825      	bhi.n	80148fc <dec_lock+0x60>
		n = Files[i].ctr;
 80148b0:	4a17      	ldr	r2, [pc, #92]	@ (8014910 <dec_lock+0x74>)
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	011b      	lsls	r3, r3, #4
 80148b6:	4413      	add	r3, r2
 80148b8:	330c      	adds	r3, #12
 80148ba:	881b      	ldrh	r3, [r3, #0]
 80148bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80148be:	89fb      	ldrh	r3, [r7, #14]
 80148c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80148c4:	d101      	bne.n	80148ca <dec_lock+0x2e>
 80148c6:	2300      	movs	r3, #0
 80148c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80148ca:	89fb      	ldrh	r3, [r7, #14]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d002      	beq.n	80148d6 <dec_lock+0x3a>
 80148d0:	89fb      	ldrh	r3, [r7, #14]
 80148d2:	3b01      	subs	r3, #1
 80148d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80148d6:	4a0e      	ldr	r2, [pc, #56]	@ (8014910 <dec_lock+0x74>)
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	011b      	lsls	r3, r3, #4
 80148dc:	4413      	add	r3, r2
 80148de:	330c      	adds	r3, #12
 80148e0:	89fa      	ldrh	r2, [r7, #14]
 80148e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80148e4:	89fb      	ldrh	r3, [r7, #14]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d105      	bne.n	80148f6 <dec_lock+0x5a>
 80148ea:	4a09      	ldr	r2, [pc, #36]	@ (8014910 <dec_lock+0x74>)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	011b      	lsls	r3, r3, #4
 80148f0:	4413      	add	r3, r2
 80148f2:	2200      	movs	r2, #0
 80148f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80148f6:	2300      	movs	r3, #0
 80148f8:	737b      	strb	r3, [r7, #13]
 80148fa:	e001      	b.n	8014900 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80148fc:	2302      	movs	r3, #2
 80148fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8014900:	7b7b      	ldrb	r3, [r7, #13]
}
 8014902:	4618      	mov	r0, r3
 8014904:	3714      	adds	r7, #20
 8014906:	46bd      	mov	sp, r7
 8014908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801490c:	4770      	bx	lr
 801490e:	bf00      	nop
 8014910:	20001594 	.word	0x20001594

08014914 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8014914:	b480      	push	{r7}
 8014916:	b085      	sub	sp, #20
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801491c:	2300      	movs	r3, #0
 801491e:	60fb      	str	r3, [r7, #12]
 8014920:	e010      	b.n	8014944 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8014922:	4a0d      	ldr	r2, [pc, #52]	@ (8014958 <clear_lock+0x44>)
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	011b      	lsls	r3, r3, #4
 8014928:	4413      	add	r3, r2
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	429a      	cmp	r2, r3
 8014930:	d105      	bne.n	801493e <clear_lock+0x2a>
 8014932:	4a09      	ldr	r2, [pc, #36]	@ (8014958 <clear_lock+0x44>)
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	011b      	lsls	r3, r3, #4
 8014938:	4413      	add	r3, r2
 801493a:	2200      	movs	r2, #0
 801493c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	3301      	adds	r3, #1
 8014942:	60fb      	str	r3, [r7, #12]
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	2b01      	cmp	r3, #1
 8014948:	d9eb      	bls.n	8014922 <clear_lock+0xe>
	}
}
 801494a:	bf00      	nop
 801494c:	bf00      	nop
 801494e:	3714      	adds	r7, #20
 8014950:	46bd      	mov	sp, r7
 8014952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014956:	4770      	bx	lr
 8014958:	20001594 	.word	0x20001594

0801495c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801495c:	b580      	push	{r7, lr}
 801495e:	b086      	sub	sp, #24
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014964:	2300      	movs	r3, #0
 8014966:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	78db      	ldrb	r3, [r3, #3]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d034      	beq.n	80149da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014974:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	7858      	ldrb	r0, [r3, #1]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014980:	2301      	movs	r3, #1
 8014982:	697a      	ldr	r2, [r7, #20]
 8014984:	f7ff fd0e 	bl	80143a4 <disk_write>
 8014988:	4603      	mov	r3, r0
 801498a:	2b00      	cmp	r3, #0
 801498c:	d002      	beq.n	8014994 <sync_window+0x38>
			res = FR_DISK_ERR;
 801498e:	2301      	movs	r3, #1
 8014990:	73fb      	strb	r3, [r7, #15]
 8014992:	e022      	b.n	80149da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	2200      	movs	r2, #0
 8014998:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801499e:	697a      	ldr	r2, [r7, #20]
 80149a0:	1ad2      	subs	r2, r2, r3
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	69db      	ldr	r3, [r3, #28]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d217      	bcs.n	80149da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	789b      	ldrb	r3, [r3, #2]
 80149ae:	613b      	str	r3, [r7, #16]
 80149b0:	e010      	b.n	80149d4 <sync_window+0x78>
					wsect += fs->fsize;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	69db      	ldr	r3, [r3, #28]
 80149b6:	697a      	ldr	r2, [r7, #20]
 80149b8:	4413      	add	r3, r2
 80149ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	7858      	ldrb	r0, [r3, #1]
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80149c6:	2301      	movs	r3, #1
 80149c8:	697a      	ldr	r2, [r7, #20]
 80149ca:	f7ff fceb 	bl	80143a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	3b01      	subs	r3, #1
 80149d2:	613b      	str	r3, [r7, #16]
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	2b01      	cmp	r3, #1
 80149d8:	d8eb      	bhi.n	80149b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80149da:	7bfb      	ldrb	r3, [r7, #15]
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3718      	adds	r7, #24
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}

080149e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b084      	sub	sp, #16
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80149ee:	2300      	movs	r3, #0
 80149f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149f6:	683a      	ldr	r2, [r7, #0]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d01b      	beq.n	8014a34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80149fc:	6878      	ldr	r0, [r7, #4]
 80149fe:	f7ff ffad 	bl	801495c <sync_window>
 8014a02:	4603      	mov	r3, r0
 8014a04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014a06:	7bfb      	ldrb	r3, [r7, #15]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d113      	bne.n	8014a34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	7858      	ldrb	r0, [r3, #1]
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014a16:	2301      	movs	r3, #1
 8014a18:	683a      	ldr	r2, [r7, #0]
 8014a1a:	f7ff fca3 	bl	8014364 <disk_read>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d004      	beq.n	8014a2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014a24:	f04f 33ff 	mov.w	r3, #4294967295
 8014a28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	683a      	ldr	r2, [r7, #0]
 8014a32:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 8014a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
	...

08014a40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b084      	sub	sp, #16
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f7ff ff87 	bl	801495c <sync_window>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014a52:	7bfb      	ldrb	r3, [r7, #15]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d158      	bne.n	8014b0a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	2b03      	cmp	r3, #3
 8014a5e:	d148      	bne.n	8014af2 <sync_fs+0xb2>
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	791b      	ldrb	r3, [r3, #4]
 8014a64:	2b01      	cmp	r3, #1
 8014a66:	d144      	bne.n	8014af2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	3334      	adds	r3, #52	@ 0x34
 8014a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014a70:	2100      	movs	r1, #0
 8014a72:	4618      	mov	r0, r3
 8014a74:	f7ff fd78 	bl	8014568 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	3334      	adds	r3, #52	@ 0x34
 8014a7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014a80:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014a84:	4618      	mov	r0, r3
 8014a86:	f7ff fd07 	bl	8014498 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	3334      	adds	r3, #52	@ 0x34
 8014a8e:	4921      	ldr	r1, [pc, #132]	@ (8014b14 <sync_fs+0xd4>)
 8014a90:	4618      	mov	r0, r3
 8014a92:	f7ff fd1c 	bl	80144ce <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	3334      	adds	r3, #52	@ 0x34
 8014a9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014a9e:	491e      	ldr	r1, [pc, #120]	@ (8014b18 <sync_fs+0xd8>)
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	f7ff fd14 	bl	80144ce <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	3334      	adds	r3, #52	@ 0x34
 8014aaa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	695b      	ldr	r3, [r3, #20]
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	4610      	mov	r0, r2
 8014ab6:	f7ff fd0a 	bl	80144ce <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	3334      	adds	r3, #52	@ 0x34
 8014abe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	691b      	ldr	r3, [r3, #16]
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	4610      	mov	r0, r2
 8014aca:	f7ff fd00 	bl	80144ce <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6a1b      	ldr	r3, [r3, #32]
 8014ad2:	1c5a      	adds	r2, r3, #1
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	7858      	ldrb	r0, [r3, #1]
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014ae6:	2301      	movs	r3, #1
 8014ae8:	f7ff fc5c 	bl	80143a4 <disk_write>
			fs->fsi_flag = 0;
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	2200      	movs	r2, #0
 8014af0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	785b      	ldrb	r3, [r3, #1]
 8014af6:	2200      	movs	r2, #0
 8014af8:	2100      	movs	r1, #0
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7ff fc72 	bl	80143e4 <disk_ioctl>
 8014b00:	4603      	mov	r3, r0
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d001      	beq.n	8014b0a <sync_fs+0xca>
 8014b06:	2301      	movs	r3, #1
 8014b08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	3710      	adds	r7, #16
 8014b10:	46bd      	mov	sp, r7
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	41615252 	.word	0x41615252
 8014b18:	61417272 	.word	0x61417272

08014b1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b083      	sub	sp, #12
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
 8014b24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	3b02      	subs	r3, #2
 8014b2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	699b      	ldr	r3, [r3, #24]
 8014b30:	3b02      	subs	r3, #2
 8014b32:	683a      	ldr	r2, [r7, #0]
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d301      	bcc.n	8014b3c <clust2sect+0x20>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	e008      	b.n	8014b4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	895b      	ldrh	r3, [r3, #10]
 8014b40:	461a      	mov	r2, r3
 8014b42:	683b      	ldr	r3, [r7, #0]
 8014b44:	fb03 f202 	mul.w	r2, r3, r2
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b4c:	4413      	add	r3, r2
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	370c      	adds	r7, #12
 8014b52:	46bd      	mov	sp, r7
 8014b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b58:	4770      	bx	lr

08014b5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014b5a:	b580      	push	{r7, lr}
 8014b5c:	b086      	sub	sp, #24
 8014b5e:	af00      	add	r7, sp, #0
 8014b60:	6078      	str	r0, [r7, #4]
 8014b62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	2b01      	cmp	r3, #1
 8014b6e:	d904      	bls.n	8014b7a <get_fat+0x20>
 8014b70:	693b      	ldr	r3, [r7, #16]
 8014b72:	699b      	ldr	r3, [r3, #24]
 8014b74:	683a      	ldr	r2, [r7, #0]
 8014b76:	429a      	cmp	r2, r3
 8014b78:	d302      	bcc.n	8014b80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	617b      	str	r3, [r7, #20]
 8014b7e:	e08e      	b.n	8014c9e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014b80:	f04f 33ff 	mov.w	r3, #4294967295
 8014b84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014b86:	693b      	ldr	r3, [r7, #16]
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	2b03      	cmp	r3, #3
 8014b8c:	d061      	beq.n	8014c52 <get_fat+0xf8>
 8014b8e:	2b03      	cmp	r3, #3
 8014b90:	dc7b      	bgt.n	8014c8a <get_fat+0x130>
 8014b92:	2b01      	cmp	r3, #1
 8014b94:	d002      	beq.n	8014b9c <get_fat+0x42>
 8014b96:	2b02      	cmp	r3, #2
 8014b98:	d041      	beq.n	8014c1e <get_fat+0xc4>
 8014b9a:	e076      	b.n	8014c8a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014b9c:	683b      	ldr	r3, [r7, #0]
 8014b9e:	60fb      	str	r3, [r7, #12]
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	085b      	lsrs	r3, r3, #1
 8014ba4:	68fa      	ldr	r2, [r7, #12]
 8014ba6:	4413      	add	r3, r2
 8014ba8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	0a5b      	lsrs	r3, r3, #9
 8014bb2:	4413      	add	r3, r2
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	6938      	ldr	r0, [r7, #16]
 8014bb8:	f7ff ff14 	bl	80149e4 <move_window>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d166      	bne.n	8014c90 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	1c5a      	adds	r2, r3, #1
 8014bc6:	60fa      	str	r2, [r7, #12]
 8014bc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014bcc:	693a      	ldr	r2, [r7, #16]
 8014bce:	4413      	add	r3, r2
 8014bd0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014bd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	0a5b      	lsrs	r3, r3, #9
 8014bde:	4413      	add	r3, r2
 8014be0:	4619      	mov	r1, r3
 8014be2:	6938      	ldr	r0, [r7, #16]
 8014be4:	f7ff fefe 	bl	80149e4 <move_window>
 8014be8:	4603      	mov	r3, r0
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d152      	bne.n	8014c94 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014bf4:	693a      	ldr	r2, [r7, #16]
 8014bf6:	4413      	add	r3, r2
 8014bf8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014bfc:	021b      	lsls	r3, r3, #8
 8014bfe:	68ba      	ldr	r2, [r7, #8]
 8014c00:	4313      	orrs	r3, r2
 8014c02:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	f003 0301 	and.w	r3, r3, #1
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d002      	beq.n	8014c14 <get_fat+0xba>
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	091b      	lsrs	r3, r3, #4
 8014c12:	e002      	b.n	8014c1a <get_fat+0xc0>
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014c1a:	617b      	str	r3, [r7, #20]
			break;
 8014c1c:	e03f      	b.n	8014c9e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c22:	683b      	ldr	r3, [r7, #0]
 8014c24:	0a1b      	lsrs	r3, r3, #8
 8014c26:	4413      	add	r3, r2
 8014c28:	4619      	mov	r1, r3
 8014c2a:	6938      	ldr	r0, [r7, #16]
 8014c2c:	f7ff feda 	bl	80149e4 <move_window>
 8014c30:	4603      	mov	r3, r0
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d130      	bne.n	8014c98 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	005b      	lsls	r3, r3, #1
 8014c40:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8014c44:	4413      	add	r3, r2
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7ff fbea 	bl	8014420 <ld_word>
 8014c4c:	4603      	mov	r3, r0
 8014c4e:	617b      	str	r3, [r7, #20]
			break;
 8014c50:	e025      	b.n	8014c9e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	09db      	lsrs	r3, r3, #7
 8014c5a:	4413      	add	r3, r2
 8014c5c:	4619      	mov	r1, r3
 8014c5e:	6938      	ldr	r0, [r7, #16]
 8014c60:	f7ff fec0 	bl	80149e4 <move_window>
 8014c64:	4603      	mov	r3, r0
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d118      	bne.n	8014c9c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	009b      	lsls	r3, r3, #2
 8014c74:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014c78:	4413      	add	r3, r2
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7ff fbe9 	bl	8014452 <ld_dword>
 8014c80:	4603      	mov	r3, r0
 8014c82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8014c86:	617b      	str	r3, [r7, #20]
			break;
 8014c88:	e009      	b.n	8014c9e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	617b      	str	r3, [r7, #20]
 8014c8e:	e006      	b.n	8014c9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c90:	bf00      	nop
 8014c92:	e004      	b.n	8014c9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014c94:	bf00      	nop
 8014c96:	e002      	b.n	8014c9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014c98:	bf00      	nop
 8014c9a:	e000      	b.n	8014c9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014c9c:	bf00      	nop
		}
	}

	return val;
 8014c9e:	697b      	ldr	r3, [r7, #20]
}
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	3718      	adds	r7, #24
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bd80      	pop	{r7, pc}

08014ca8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014ca8:	b590      	push	{r4, r7, lr}
 8014caa:	b089      	sub	sp, #36	@ 0x24
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	60b9      	str	r1, [r7, #8]
 8014cb2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014cb4:	2302      	movs	r3, #2
 8014cb6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	2b01      	cmp	r3, #1
 8014cbc:	f240 80d9 	bls.w	8014e72 <put_fat+0x1ca>
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	699b      	ldr	r3, [r3, #24]
 8014cc4:	68ba      	ldr	r2, [r7, #8]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	f080 80d3 	bcs.w	8014e72 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	2b03      	cmp	r3, #3
 8014cd2:	f000 8096 	beq.w	8014e02 <put_fat+0x15a>
 8014cd6:	2b03      	cmp	r3, #3
 8014cd8:	f300 80cb 	bgt.w	8014e72 <put_fat+0x1ca>
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	d002      	beq.n	8014ce6 <put_fat+0x3e>
 8014ce0:	2b02      	cmp	r3, #2
 8014ce2:	d06e      	beq.n	8014dc2 <put_fat+0x11a>
 8014ce4:	e0c5      	b.n	8014e72 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	61bb      	str	r3, [r7, #24]
 8014cea:	69bb      	ldr	r3, [r7, #24]
 8014cec:	085b      	lsrs	r3, r3, #1
 8014cee:	69ba      	ldr	r2, [r7, #24]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014cf8:	69bb      	ldr	r3, [r7, #24]
 8014cfa:	0a5b      	lsrs	r3, r3, #9
 8014cfc:	4413      	add	r3, r2
 8014cfe:	4619      	mov	r1, r3
 8014d00:	68f8      	ldr	r0, [r7, #12]
 8014d02:	f7ff fe6f 	bl	80149e4 <move_window>
 8014d06:	4603      	mov	r3, r0
 8014d08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014d0a:	7ffb      	ldrb	r3, [r7, #31]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	f040 80a9 	bne.w	8014e64 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014d18:	69bb      	ldr	r3, [r7, #24]
 8014d1a:	1c59      	adds	r1, r3, #1
 8014d1c:	61b9      	str	r1, [r7, #24]
 8014d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d22:	4413      	add	r3, r2
 8014d24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	f003 0301 	and.w	r3, r3, #1
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d00d      	beq.n	8014d4c <put_fat+0xa4>
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	b25b      	sxtb	r3, r3
 8014d36:	f003 030f 	and.w	r3, r3, #15
 8014d3a:	b25a      	sxtb	r2, r3
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	b25b      	sxtb	r3, r3
 8014d40:	011b      	lsls	r3, r3, #4
 8014d42:	b25b      	sxtb	r3, r3
 8014d44:	4313      	orrs	r3, r2
 8014d46:	b25b      	sxtb	r3, r3
 8014d48:	b2db      	uxtb	r3, r3
 8014d4a:	e001      	b.n	8014d50 <put_fat+0xa8>
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	b2db      	uxtb	r3, r3
 8014d50:	697a      	ldr	r2, [r7, #20]
 8014d52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	2201      	movs	r2, #1
 8014d58:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d5e:	69bb      	ldr	r3, [r7, #24]
 8014d60:	0a5b      	lsrs	r3, r3, #9
 8014d62:	4413      	add	r3, r2
 8014d64:	4619      	mov	r1, r3
 8014d66:	68f8      	ldr	r0, [r7, #12]
 8014d68:	f7ff fe3c 	bl	80149e4 <move_window>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014d70:	7ffb      	ldrb	r3, [r7, #31]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d178      	bne.n	8014e68 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014d7c:	69bb      	ldr	r3, [r7, #24]
 8014d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d82:	4413      	add	r3, r2
 8014d84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	f003 0301 	and.w	r3, r3, #1
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d003      	beq.n	8014d98 <put_fat+0xf0>
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	091b      	lsrs	r3, r3, #4
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	e00e      	b.n	8014db6 <put_fat+0x10e>
 8014d98:	697b      	ldr	r3, [r7, #20]
 8014d9a:	781b      	ldrb	r3, [r3, #0]
 8014d9c:	b25b      	sxtb	r3, r3
 8014d9e:	f023 030f 	bic.w	r3, r3, #15
 8014da2:	b25a      	sxtb	r2, r3
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	0a1b      	lsrs	r3, r3, #8
 8014da8:	b25b      	sxtb	r3, r3
 8014daa:	f003 030f 	and.w	r3, r3, #15
 8014dae:	b25b      	sxtb	r3, r3
 8014db0:	4313      	orrs	r3, r2
 8014db2:	b25b      	sxtb	r3, r3
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	697a      	ldr	r2, [r7, #20]
 8014db8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	2201      	movs	r2, #1
 8014dbe:	70da      	strb	r2, [r3, #3]
			break;
 8014dc0:	e057      	b.n	8014e72 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	0a1b      	lsrs	r3, r3, #8
 8014dca:	4413      	add	r3, r2
 8014dcc:	4619      	mov	r1, r3
 8014dce:	68f8      	ldr	r0, [r7, #12]
 8014dd0:	f7ff fe08 	bl	80149e4 <move_window>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014dd8:	7ffb      	ldrb	r3, [r7, #31]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d146      	bne.n	8014e6c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014de4:	68bb      	ldr	r3, [r7, #8]
 8014de6:	005b      	lsls	r3, r3, #1
 8014de8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8014dec:	4413      	add	r3, r2
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	b292      	uxth	r2, r2
 8014df2:	4611      	mov	r1, r2
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7ff fb4f 	bl	8014498 <st_word>
			fs->wflag = 1;
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2201      	movs	r2, #1
 8014dfe:	70da      	strb	r2, [r3, #3]
			break;
 8014e00:	e037      	b.n	8014e72 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014e06:	68bb      	ldr	r3, [r7, #8]
 8014e08:	09db      	lsrs	r3, r3, #7
 8014e0a:	4413      	add	r3, r2
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	68f8      	ldr	r0, [r7, #12]
 8014e10:	f7ff fde8 	bl	80149e4 <move_window>
 8014e14:	4603      	mov	r3, r0
 8014e16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014e18:	7ffb      	ldrb	r3, [r7, #31]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d128      	bne.n	8014e70 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	009b      	lsls	r3, r3, #2
 8014e2e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014e32:	4413      	add	r3, r2
 8014e34:	4618      	mov	r0, r3
 8014e36:	f7ff fb0c 	bl	8014452 <ld_dword>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8014e40:	4323      	orrs	r3, r4
 8014e42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	009b      	lsls	r3, r3, #2
 8014e4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8014e52:	4413      	add	r3, r2
 8014e54:	6879      	ldr	r1, [r7, #4]
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7ff fb39 	bl	80144ce <st_dword>
			fs->wflag = 1;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	2201      	movs	r2, #1
 8014e60:	70da      	strb	r2, [r3, #3]
			break;
 8014e62:	e006      	b.n	8014e72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014e64:	bf00      	nop
 8014e66:	e004      	b.n	8014e72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014e68:	bf00      	nop
 8014e6a:	e002      	b.n	8014e72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014e6c:	bf00      	nop
 8014e6e:	e000      	b.n	8014e72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8014e70:	bf00      	nop
		}
	}
	return res;
 8014e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3724      	adds	r7, #36	@ 0x24
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd90      	pop	{r4, r7, pc}

08014e7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b088      	sub	sp, #32
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	60f8      	str	r0, [r7, #12]
 8014e84:	60b9      	str	r1, [r7, #8]
 8014e86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	d904      	bls.n	8014ea2 <remove_chain+0x26>
 8014e98:	69bb      	ldr	r3, [r7, #24]
 8014e9a:	699b      	ldr	r3, [r3, #24]
 8014e9c:	68ba      	ldr	r2, [r7, #8]
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d301      	bcc.n	8014ea6 <remove_chain+0x2a>
 8014ea2:	2302      	movs	r3, #2
 8014ea4:	e04b      	b.n	8014f3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d00c      	beq.n	8014ec6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8014eac:	f04f 32ff 	mov.w	r2, #4294967295
 8014eb0:	6879      	ldr	r1, [r7, #4]
 8014eb2:	69b8      	ldr	r0, [r7, #24]
 8014eb4:	f7ff fef8 	bl	8014ca8 <put_fat>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8014ebc:	7ffb      	ldrb	r3, [r7, #31]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d001      	beq.n	8014ec6 <remove_chain+0x4a>
 8014ec2:	7ffb      	ldrb	r3, [r7, #31]
 8014ec4:	e03b      	b.n	8014f3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8014ec6:	68b9      	ldr	r1, [r7, #8]
 8014ec8:	68f8      	ldr	r0, [r7, #12]
 8014eca:	f7ff fe46 	bl	8014b5a <get_fat>
 8014ece:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d031      	beq.n	8014f3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	d101      	bne.n	8014ee0 <remove_chain+0x64>
 8014edc:	2302      	movs	r3, #2
 8014ede:	e02e      	b.n	8014f3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ee6:	d101      	bne.n	8014eec <remove_chain+0x70>
 8014ee8:	2301      	movs	r3, #1
 8014eea:	e028      	b.n	8014f3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8014eec:	2200      	movs	r2, #0
 8014eee:	68b9      	ldr	r1, [r7, #8]
 8014ef0:	69b8      	ldr	r0, [r7, #24]
 8014ef2:	f7ff fed9 	bl	8014ca8 <put_fat>
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8014efa:	7ffb      	ldrb	r3, [r7, #31]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d001      	beq.n	8014f04 <remove_chain+0x88>
 8014f00:	7ffb      	ldrb	r3, [r7, #31]
 8014f02:	e01c      	b.n	8014f3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8014f04:	69bb      	ldr	r3, [r7, #24]
 8014f06:	695a      	ldr	r2, [r3, #20]
 8014f08:	69bb      	ldr	r3, [r7, #24]
 8014f0a:	699b      	ldr	r3, [r3, #24]
 8014f0c:	3b02      	subs	r3, #2
 8014f0e:	429a      	cmp	r2, r3
 8014f10:	d20b      	bcs.n	8014f2a <remove_chain+0xae>
			fs->free_clst++;
 8014f12:	69bb      	ldr	r3, [r7, #24]
 8014f14:	695b      	ldr	r3, [r3, #20]
 8014f16:	1c5a      	adds	r2, r3, #1
 8014f18:	69bb      	ldr	r3, [r7, #24]
 8014f1a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8014f1c:	69bb      	ldr	r3, [r7, #24]
 8014f1e:	791b      	ldrb	r3, [r3, #4]
 8014f20:	f043 0301 	orr.w	r3, r3, #1
 8014f24:	b2da      	uxtb	r2, r3
 8014f26:	69bb      	ldr	r3, [r7, #24]
 8014f28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014f2e:	69bb      	ldr	r3, [r7, #24]
 8014f30:	699b      	ldr	r3, [r3, #24]
 8014f32:	68ba      	ldr	r2, [r7, #8]
 8014f34:	429a      	cmp	r2, r3
 8014f36:	d3c6      	bcc.n	8014ec6 <remove_chain+0x4a>
 8014f38:	e000      	b.n	8014f3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8014f3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8014f3c:	2300      	movs	r3, #0
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	3720      	adds	r7, #32
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}

08014f46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014f46:	b580      	push	{r7, lr}
 8014f48:	b088      	sub	sp, #32
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
 8014f4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d10d      	bne.n	8014f78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	691b      	ldr	r3, [r3, #16]
 8014f60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014f62:	69bb      	ldr	r3, [r7, #24]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d004      	beq.n	8014f72 <create_chain+0x2c>
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	699b      	ldr	r3, [r3, #24]
 8014f6c:	69ba      	ldr	r2, [r7, #24]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d31b      	bcc.n	8014faa <create_chain+0x64>
 8014f72:	2301      	movs	r3, #1
 8014f74:	61bb      	str	r3, [r7, #24]
 8014f76:	e018      	b.n	8014faa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8014f78:	6839      	ldr	r1, [r7, #0]
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f7ff fded 	bl	8014b5a <get_fat>
 8014f80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	2b01      	cmp	r3, #1
 8014f86:	d801      	bhi.n	8014f8c <create_chain+0x46>
 8014f88:	2301      	movs	r3, #1
 8014f8a:	e070      	b.n	801506e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f92:	d101      	bne.n	8014f98 <create_chain+0x52>
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	e06a      	b.n	801506e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8014f98:	693b      	ldr	r3, [r7, #16]
 8014f9a:	699b      	ldr	r3, [r3, #24]
 8014f9c:	68fa      	ldr	r2, [r7, #12]
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d201      	bcs.n	8014fa6 <create_chain+0x60>
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	e063      	b.n	801506e <create_chain+0x128>
		scl = clst;
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8014faa:	69bb      	ldr	r3, [r7, #24]
 8014fac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	699b      	ldr	r3, [r3, #24]
 8014fb8:	69fa      	ldr	r2, [r7, #28]
 8014fba:	429a      	cmp	r2, r3
 8014fbc:	d307      	bcc.n	8014fce <create_chain+0x88>
				ncl = 2;
 8014fbe:	2302      	movs	r3, #2
 8014fc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8014fc2:	69fa      	ldr	r2, [r7, #28]
 8014fc4:	69bb      	ldr	r3, [r7, #24]
 8014fc6:	429a      	cmp	r2, r3
 8014fc8:	d901      	bls.n	8014fce <create_chain+0x88>
 8014fca:	2300      	movs	r3, #0
 8014fcc:	e04f      	b.n	801506e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8014fce:	69f9      	ldr	r1, [r7, #28]
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f7ff fdc2 	bl	8014b5a <get_fat>
 8014fd6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d00e      	beq.n	8014ffc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d003      	beq.n	8014fec <create_chain+0xa6>
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fea:	d101      	bne.n	8014ff0 <create_chain+0xaa>
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	e03e      	b.n	801506e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8014ff0:	69fa      	ldr	r2, [r7, #28]
 8014ff2:	69bb      	ldr	r3, [r7, #24]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d1da      	bne.n	8014fae <create_chain+0x68>
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	e038      	b.n	801506e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8014ffc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8014ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8015002:	69f9      	ldr	r1, [r7, #28]
 8015004:	6938      	ldr	r0, [r7, #16]
 8015006:	f7ff fe4f 	bl	8014ca8 <put_fat>
 801500a:	4603      	mov	r3, r0
 801500c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801500e:	7dfb      	ldrb	r3, [r7, #23]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d109      	bne.n	8015028 <create_chain+0xe2>
 8015014:	683b      	ldr	r3, [r7, #0]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d006      	beq.n	8015028 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801501a:	69fa      	ldr	r2, [r7, #28]
 801501c:	6839      	ldr	r1, [r7, #0]
 801501e:	6938      	ldr	r0, [r7, #16]
 8015020:	f7ff fe42 	bl	8014ca8 <put_fat>
 8015024:	4603      	mov	r3, r0
 8015026:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015028:	7dfb      	ldrb	r3, [r7, #23]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d116      	bne.n	801505c <create_chain+0x116>
		fs->last_clst = ncl;
 801502e:	693b      	ldr	r3, [r7, #16]
 8015030:	69fa      	ldr	r2, [r7, #28]
 8015032:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	695a      	ldr	r2, [r3, #20]
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	699b      	ldr	r3, [r3, #24]
 801503c:	3b02      	subs	r3, #2
 801503e:	429a      	cmp	r2, r3
 8015040:	d804      	bhi.n	801504c <create_chain+0x106>
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	695b      	ldr	r3, [r3, #20]
 8015046:	1e5a      	subs	r2, r3, #1
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801504c:	693b      	ldr	r3, [r7, #16]
 801504e:	791b      	ldrb	r3, [r3, #4]
 8015050:	f043 0301 	orr.w	r3, r3, #1
 8015054:	b2da      	uxtb	r2, r3
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	711a      	strb	r2, [r3, #4]
 801505a:	e007      	b.n	801506c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801505c:	7dfb      	ldrb	r3, [r7, #23]
 801505e:	2b01      	cmp	r3, #1
 8015060:	d102      	bne.n	8015068 <create_chain+0x122>
 8015062:	f04f 33ff 	mov.w	r3, #4294967295
 8015066:	e000      	b.n	801506a <create_chain+0x124>
 8015068:	2301      	movs	r3, #1
 801506a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801506c:	69fb      	ldr	r3, [r7, #28]
}
 801506e:	4618      	mov	r0, r3
 8015070:	3720      	adds	r7, #32
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015076:	b480      	push	{r7}
 8015078:	b087      	sub	sp, #28
 801507a:	af00      	add	r7, sp, #0
 801507c:	6078      	str	r0, [r7, #4]
 801507e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801508a:	3304      	adds	r3, #4
 801508c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801508e:	683b      	ldr	r3, [r7, #0]
 8015090:	0a5b      	lsrs	r3, r3, #9
 8015092:	68fa      	ldr	r2, [r7, #12]
 8015094:	8952      	ldrh	r2, [r2, #10]
 8015096:	fbb3 f3f2 	udiv	r3, r3, r2
 801509a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	1d1a      	adds	r2, r3, #4
 80150a0:	613a      	str	r2, [r7, #16]
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d101      	bne.n	80150b0 <clmt_clust+0x3a>
 80150ac:	2300      	movs	r3, #0
 80150ae:	e010      	b.n	80150d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80150b0:	697a      	ldr	r2, [r7, #20]
 80150b2:	68bb      	ldr	r3, [r7, #8]
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d307      	bcc.n	80150c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80150b8:	697a      	ldr	r2, [r7, #20]
 80150ba:	68bb      	ldr	r3, [r7, #8]
 80150bc:	1ad3      	subs	r3, r2, r3
 80150be:	617b      	str	r3, [r7, #20]
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	3304      	adds	r3, #4
 80150c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80150c6:	e7e9      	b.n	801509c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80150c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	681a      	ldr	r2, [r3, #0]
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	4413      	add	r3, r2
}
 80150d2:	4618      	mov	r0, r3
 80150d4:	371c      	adds	r7, #28
 80150d6:	46bd      	mov	sp, r7
 80150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150dc:	4770      	bx	lr

080150de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b086      	sub	sp, #24
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
 80150e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80150ee:	683b      	ldr	r3, [r7, #0]
 80150f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80150f4:	d204      	bcs.n	8015100 <dir_sdi+0x22>
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	f003 031f 	and.w	r3, r3, #31
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d001      	beq.n	8015104 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015100:	2302      	movs	r3, #2
 8015102:	e063      	b.n	80151cc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	683a      	ldr	r2, [r7, #0]
 8015108:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	689b      	ldr	r3, [r3, #8]
 801510e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d106      	bne.n	8015124 <dir_sdi+0x46>
 8015116:	693b      	ldr	r3, [r7, #16]
 8015118:	781b      	ldrb	r3, [r3, #0]
 801511a:	2b02      	cmp	r3, #2
 801511c:	d902      	bls.n	8015124 <dir_sdi+0x46>
		clst = fs->dirbase;
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015122:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015124:	697b      	ldr	r3, [r7, #20]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d10c      	bne.n	8015144 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801512a:	683b      	ldr	r3, [r7, #0]
 801512c:	095b      	lsrs	r3, r3, #5
 801512e:	693a      	ldr	r2, [r7, #16]
 8015130:	8912      	ldrh	r2, [r2, #8]
 8015132:	4293      	cmp	r3, r2
 8015134:	d301      	bcc.n	801513a <dir_sdi+0x5c>
 8015136:	2302      	movs	r3, #2
 8015138:	e048      	b.n	80151cc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	61da      	str	r2, [r3, #28]
 8015142:	e029      	b.n	8015198 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	895b      	ldrh	r3, [r3, #10]
 8015148:	025b      	lsls	r3, r3, #9
 801514a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801514c:	e019      	b.n	8015182 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6979      	ldr	r1, [r7, #20]
 8015152:	4618      	mov	r0, r3
 8015154:	f7ff fd01 	bl	8014b5a <get_fat>
 8015158:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015160:	d101      	bne.n	8015166 <dir_sdi+0x88>
 8015162:	2301      	movs	r3, #1
 8015164:	e032      	b.n	80151cc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015166:	697b      	ldr	r3, [r7, #20]
 8015168:	2b01      	cmp	r3, #1
 801516a:	d904      	bls.n	8015176 <dir_sdi+0x98>
 801516c:	693b      	ldr	r3, [r7, #16]
 801516e:	699b      	ldr	r3, [r3, #24]
 8015170:	697a      	ldr	r2, [r7, #20]
 8015172:	429a      	cmp	r2, r3
 8015174:	d301      	bcc.n	801517a <dir_sdi+0x9c>
 8015176:	2302      	movs	r3, #2
 8015178:	e028      	b.n	80151cc <dir_sdi+0xee>
			ofs -= csz;
 801517a:	683a      	ldr	r2, [r7, #0]
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	1ad3      	subs	r3, r2, r3
 8015180:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015182:	683a      	ldr	r2, [r7, #0]
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	429a      	cmp	r2, r3
 8015188:	d2e1      	bcs.n	801514e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801518a:	6979      	ldr	r1, [r7, #20]
 801518c:	6938      	ldr	r0, [r7, #16]
 801518e:	f7ff fcc5 	bl	8014b1c <clust2sect>
 8015192:	4602      	mov	r2, r0
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	697a      	ldr	r2, [r7, #20]
 801519c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	69db      	ldr	r3, [r3, #28]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d101      	bne.n	80151aa <dir_sdi+0xcc>
 80151a6:	2302      	movs	r3, #2
 80151a8:	e010      	b.n	80151cc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	69da      	ldr	r2, [r3, #28]
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	0a5b      	lsrs	r3, r3, #9
 80151b2:	441a      	add	r2, r3
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80151b8:	693b      	ldr	r3, [r7, #16]
 80151ba:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80151c4:	441a      	add	r2, r3
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80151ca:	2300      	movs	r3, #0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3718      	adds	r7, #24
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b086      	sub	sp, #24
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	695b      	ldr	r3, [r3, #20]
 80151e8:	3320      	adds	r3, #32
 80151ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	69db      	ldr	r3, [r3, #28]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d003      	beq.n	80151fc <dir_next+0x28>
 80151f4:	68bb      	ldr	r3, [r7, #8]
 80151f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80151fa:	d301      	bcc.n	8015200 <dir_next+0x2c>
 80151fc:	2304      	movs	r3, #4
 80151fe:	e0aa      	b.n	8015356 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015206:	2b00      	cmp	r3, #0
 8015208:	f040 8098 	bne.w	801533c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	69db      	ldr	r3, [r3, #28]
 8015210:	1c5a      	adds	r2, r3, #1
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	699b      	ldr	r3, [r3, #24]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d10b      	bne.n	8015236 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	095b      	lsrs	r3, r3, #5
 8015222:	68fa      	ldr	r2, [r7, #12]
 8015224:	8912      	ldrh	r2, [r2, #8]
 8015226:	4293      	cmp	r3, r2
 8015228:	f0c0 8088 	bcc.w	801533c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	2200      	movs	r2, #0
 8015230:	61da      	str	r2, [r3, #28]
 8015232:	2304      	movs	r3, #4
 8015234:	e08f      	b.n	8015356 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	0a5b      	lsrs	r3, r3, #9
 801523a:	68fa      	ldr	r2, [r7, #12]
 801523c:	8952      	ldrh	r2, [r2, #10]
 801523e:	3a01      	subs	r2, #1
 8015240:	4013      	ands	r3, r2
 8015242:	2b00      	cmp	r3, #0
 8015244:	d17a      	bne.n	801533c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015246:	687a      	ldr	r2, [r7, #4]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	699b      	ldr	r3, [r3, #24]
 801524c:	4619      	mov	r1, r3
 801524e:	4610      	mov	r0, r2
 8015250:	f7ff fc83 	bl	8014b5a <get_fat>
 8015254:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015256:	697b      	ldr	r3, [r7, #20]
 8015258:	2b01      	cmp	r3, #1
 801525a:	d801      	bhi.n	8015260 <dir_next+0x8c>
 801525c:	2302      	movs	r3, #2
 801525e:	e07a      	b.n	8015356 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015266:	d101      	bne.n	801526c <dir_next+0x98>
 8015268:	2301      	movs	r3, #1
 801526a:	e074      	b.n	8015356 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	699b      	ldr	r3, [r3, #24]
 8015270:	697a      	ldr	r2, [r7, #20]
 8015272:	429a      	cmp	r2, r3
 8015274:	d358      	bcc.n	8015328 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015276:	683b      	ldr	r3, [r7, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d104      	bne.n	8015286 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2200      	movs	r2, #0
 8015280:	61da      	str	r2, [r3, #28]
 8015282:	2304      	movs	r3, #4
 8015284:	e067      	b.n	8015356 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015286:	687a      	ldr	r2, [r7, #4]
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	699b      	ldr	r3, [r3, #24]
 801528c:	4619      	mov	r1, r3
 801528e:	4610      	mov	r0, r2
 8015290:	f7ff fe59 	bl	8014f46 <create_chain>
 8015294:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	2b00      	cmp	r3, #0
 801529a:	d101      	bne.n	80152a0 <dir_next+0xcc>
 801529c:	2307      	movs	r3, #7
 801529e:	e05a      	b.n	8015356 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80152a0:	697b      	ldr	r3, [r7, #20]
 80152a2:	2b01      	cmp	r3, #1
 80152a4:	d101      	bne.n	80152aa <dir_next+0xd6>
 80152a6:	2302      	movs	r3, #2
 80152a8:	e055      	b.n	8015356 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80152aa:	697b      	ldr	r3, [r7, #20]
 80152ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152b0:	d101      	bne.n	80152b6 <dir_next+0xe2>
 80152b2:	2301      	movs	r3, #1
 80152b4:	e04f      	b.n	8015356 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80152b6:	68f8      	ldr	r0, [r7, #12]
 80152b8:	f7ff fb50 	bl	801495c <sync_window>
 80152bc:	4603      	mov	r3, r0
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d001      	beq.n	80152c6 <dir_next+0xf2>
 80152c2:	2301      	movs	r3, #1
 80152c4:	e047      	b.n	8015356 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	3334      	adds	r3, #52	@ 0x34
 80152ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80152ce:	2100      	movs	r1, #0
 80152d0:	4618      	mov	r0, r3
 80152d2:	f7ff f949 	bl	8014568 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80152d6:	2300      	movs	r3, #0
 80152d8:	613b      	str	r3, [r7, #16]
 80152da:	6979      	ldr	r1, [r7, #20]
 80152dc:	68f8      	ldr	r0, [r7, #12]
 80152de:	f7ff fc1d 	bl	8014b1c <clust2sect>
 80152e2:	4602      	mov	r2, r0
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80152e8:	e012      	b.n	8015310 <dir_next+0x13c>
						fs->wflag = 1;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	2201      	movs	r2, #1
 80152ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80152f0:	68f8      	ldr	r0, [r7, #12]
 80152f2:	f7ff fb33 	bl	801495c <sync_window>
 80152f6:	4603      	mov	r3, r0
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d001      	beq.n	8015300 <dir_next+0x12c>
 80152fc:	2301      	movs	r3, #1
 80152fe:	e02a      	b.n	8015356 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015300:	693b      	ldr	r3, [r7, #16]
 8015302:	3301      	adds	r3, #1
 8015304:	613b      	str	r3, [r7, #16]
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801530a:	1c5a      	adds	r2, r3, #1
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	631a      	str	r2, [r3, #48]	@ 0x30
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	895b      	ldrh	r3, [r3, #10]
 8015314:	461a      	mov	r2, r3
 8015316:	693b      	ldr	r3, [r7, #16]
 8015318:	4293      	cmp	r3, r2
 801531a:	d3e6      	bcc.n	80152ea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	1ad2      	subs	r2, r2, r3
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	697a      	ldr	r2, [r7, #20]
 801532c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801532e:	6979      	ldr	r1, [r7, #20]
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f7ff fbf3 	bl	8014b1c <clust2sect>
 8015336:	4602      	mov	r2, r0
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	68ba      	ldr	r2, [r7, #8]
 8015340:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015342:	68fb      	ldr	r3, [r7, #12]
 8015344:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801534e:	441a      	add	r2, r3
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8015354:	2300      	movs	r3, #0
}
 8015356:	4618      	mov	r0, r3
 8015358:	3718      	adds	r7, #24
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}

0801535e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801535e:	b580      	push	{r7, lr}
 8015360:	b086      	sub	sp, #24
 8015362:	af00      	add	r7, sp, #0
 8015364:	6078      	str	r0, [r7, #4]
 8015366:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801536e:	2100      	movs	r1, #0
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f7ff feb4 	bl	80150de <dir_sdi>
 8015376:	4603      	mov	r3, r0
 8015378:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801537a:	7dfb      	ldrb	r3, [r7, #23]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d12b      	bne.n	80153d8 <dir_alloc+0x7a>
		n = 0;
 8015380:	2300      	movs	r3, #0
 8015382:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	69db      	ldr	r3, [r3, #28]
 8015388:	4619      	mov	r1, r3
 801538a:	68f8      	ldr	r0, [r7, #12]
 801538c:	f7ff fb2a 	bl	80149e4 <move_window>
 8015390:	4603      	mov	r3, r0
 8015392:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015394:	7dfb      	ldrb	r3, [r7, #23]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d11d      	bne.n	80153d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6a1b      	ldr	r3, [r3, #32]
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	2be5      	cmp	r3, #229	@ 0xe5
 80153a2:	d004      	beq.n	80153ae <dir_alloc+0x50>
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	6a1b      	ldr	r3, [r3, #32]
 80153a8:	781b      	ldrb	r3, [r3, #0]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d107      	bne.n	80153be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80153ae:	693b      	ldr	r3, [r7, #16]
 80153b0:	3301      	adds	r3, #1
 80153b2:	613b      	str	r3, [r7, #16]
 80153b4:	693a      	ldr	r2, [r7, #16]
 80153b6:	683b      	ldr	r3, [r7, #0]
 80153b8:	429a      	cmp	r2, r3
 80153ba:	d102      	bne.n	80153c2 <dir_alloc+0x64>
 80153bc:	e00c      	b.n	80153d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80153be:	2300      	movs	r3, #0
 80153c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80153c2:	2101      	movs	r1, #1
 80153c4:	6878      	ldr	r0, [r7, #4]
 80153c6:	f7ff ff05 	bl	80151d4 <dir_next>
 80153ca:	4603      	mov	r3, r0
 80153cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80153ce:	7dfb      	ldrb	r3, [r7, #23]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d0d7      	beq.n	8015384 <dir_alloc+0x26>
 80153d4:	e000      	b.n	80153d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80153d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80153d8:	7dfb      	ldrb	r3, [r7, #23]
 80153da:	2b04      	cmp	r3, #4
 80153dc:	d101      	bne.n	80153e2 <dir_alloc+0x84>
 80153de:	2307      	movs	r3, #7
 80153e0:	75fb      	strb	r3, [r7, #23]
	return res;
 80153e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80153e4:	4618      	mov	r0, r3
 80153e6:	3718      	adds	r7, #24
 80153e8:	46bd      	mov	sp, r7
 80153ea:	bd80      	pop	{r7, pc}

080153ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	331a      	adds	r3, #26
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7ff f810 	bl	8014420 <ld_word>
 8015400:	4603      	mov	r3, r0
 8015402:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	2b03      	cmp	r3, #3
 801540a:	d109      	bne.n	8015420 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	3314      	adds	r3, #20
 8015410:	4618      	mov	r0, r3
 8015412:	f7ff f805 	bl	8014420 <ld_word>
 8015416:	4603      	mov	r3, r0
 8015418:	041b      	lsls	r3, r3, #16
 801541a:	68fa      	ldr	r2, [r7, #12]
 801541c:	4313      	orrs	r3, r2
 801541e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015420:	68fb      	ldr	r3, [r7, #12]
}
 8015422:	4618      	mov	r0, r3
 8015424:	3710      	adds	r7, #16
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}

0801542a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801542a:	b580      	push	{r7, lr}
 801542c:	b084      	sub	sp, #16
 801542e:	af00      	add	r7, sp, #0
 8015430:	60f8      	str	r0, [r7, #12]
 8015432:	60b9      	str	r1, [r7, #8]
 8015434:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015436:	68bb      	ldr	r3, [r7, #8]
 8015438:	331a      	adds	r3, #26
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	b292      	uxth	r2, r2
 801543e:	4611      	mov	r1, r2
 8015440:	4618      	mov	r0, r3
 8015442:	f7ff f829 	bl	8014498 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	781b      	ldrb	r3, [r3, #0]
 801544a:	2b03      	cmp	r3, #3
 801544c:	d109      	bne.n	8015462 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801544e:	68bb      	ldr	r3, [r7, #8]
 8015450:	f103 0214 	add.w	r2, r3, #20
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	0c1b      	lsrs	r3, r3, #16
 8015458:	b29b      	uxth	r3, r3
 801545a:	4619      	mov	r1, r3
 801545c:	4610      	mov	r0, r2
 801545e:	f7ff f81b 	bl	8014498 <st_word>
	}
}
 8015462:	bf00      	nop
 8015464:	3710      	adds	r7, #16
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}

0801546a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801546a:	b580      	push	{r7, lr}
 801546c:	b086      	sub	sp, #24
 801546e:	af00      	add	r7, sp, #0
 8015470:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015478:	2100      	movs	r1, #0
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	f7ff fe2f 	bl	80150de <dir_sdi>
 8015480:	4603      	mov	r3, r0
 8015482:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015484:	7dfb      	ldrb	r3, [r7, #23]
 8015486:	2b00      	cmp	r3, #0
 8015488:	d001      	beq.n	801548e <dir_find+0x24>
 801548a:	7dfb      	ldrb	r3, [r7, #23]
 801548c:	e03e      	b.n	801550c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	69db      	ldr	r3, [r3, #28]
 8015492:	4619      	mov	r1, r3
 8015494:	6938      	ldr	r0, [r7, #16]
 8015496:	f7ff faa5 	bl	80149e4 <move_window>
 801549a:	4603      	mov	r3, r0
 801549c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801549e:	7dfb      	ldrb	r3, [r7, #23]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d12f      	bne.n	8015504 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	6a1b      	ldr	r3, [r3, #32]
 80154a8:	781b      	ldrb	r3, [r3, #0]
 80154aa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80154ac:	7bfb      	ldrb	r3, [r7, #15]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d102      	bne.n	80154b8 <dir_find+0x4e>
 80154b2:	2304      	movs	r3, #4
 80154b4:	75fb      	strb	r3, [r7, #23]
 80154b6:	e028      	b.n	801550a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	6a1b      	ldr	r3, [r3, #32]
 80154bc:	330b      	adds	r3, #11
 80154be:	781b      	ldrb	r3, [r3, #0]
 80154c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80154c4:	b2da      	uxtb	r2, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	6a1b      	ldr	r3, [r3, #32]
 80154ce:	330b      	adds	r3, #11
 80154d0:	781b      	ldrb	r3, [r3, #0]
 80154d2:	f003 0308 	and.w	r3, r3, #8
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d10a      	bne.n	80154f0 <dir_find+0x86>
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	6a18      	ldr	r0, [r3, #32]
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	3324      	adds	r3, #36	@ 0x24
 80154e2:	220b      	movs	r2, #11
 80154e4:	4619      	mov	r1, r3
 80154e6:	f7ff f85a 	bl	801459e <mem_cmp>
 80154ea:	4603      	mov	r3, r0
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d00b      	beq.n	8015508 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80154f0:	2100      	movs	r1, #0
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7ff fe6e 	bl	80151d4 <dir_next>
 80154f8:	4603      	mov	r3, r0
 80154fa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80154fc:	7dfb      	ldrb	r3, [r7, #23]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d0c5      	beq.n	801548e <dir_find+0x24>
 8015502:	e002      	b.n	801550a <dir_find+0xa0>
		if (res != FR_OK) break;
 8015504:	bf00      	nop
 8015506:	e000      	b.n	801550a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015508:	bf00      	nop

	return res;
 801550a:	7dfb      	ldrb	r3, [r7, #23]
}
 801550c:	4618      	mov	r0, r3
 801550e:	3718      	adds	r7, #24
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}

08015514 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	681b      	ldr	r3, [r3, #0]
 8015520:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8015522:	2101      	movs	r1, #1
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f7ff ff1a 	bl	801535e <dir_alloc>
 801552a:	4603      	mov	r3, r0
 801552c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801552e:	7bfb      	ldrb	r3, [r7, #15]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d11c      	bne.n	801556e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	69db      	ldr	r3, [r3, #28]
 8015538:	4619      	mov	r1, r3
 801553a:	68b8      	ldr	r0, [r7, #8]
 801553c:	f7ff fa52 	bl	80149e4 <move_window>
 8015540:	4603      	mov	r3, r0
 8015542:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015544:	7bfb      	ldrb	r3, [r7, #15]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d111      	bne.n	801556e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	6a1b      	ldr	r3, [r3, #32]
 801554e:	2220      	movs	r2, #32
 8015550:	2100      	movs	r1, #0
 8015552:	4618      	mov	r0, r3
 8015554:	f7ff f808 	bl	8014568 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6a18      	ldr	r0, [r3, #32]
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	3324      	adds	r3, #36	@ 0x24
 8015560:	220b      	movs	r2, #11
 8015562:	4619      	mov	r1, r3
 8015564:	f7fe ffdf 	bl	8014526 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	2201      	movs	r2, #1
 801556c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015570:	4618      	mov	r0, r3
 8015572:	3710      	adds	r7, #16
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}

08015578 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b088      	sub	sp, #32
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	60fb      	str	r3, [r7, #12]
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	3324      	adds	r3, #36	@ 0x24
 801558c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801558e:	220b      	movs	r2, #11
 8015590:	2120      	movs	r1, #32
 8015592:	68b8      	ldr	r0, [r7, #8]
 8015594:	f7fe ffe8 	bl	8014568 <mem_set>
	si = i = 0; ni = 8;
 8015598:	2300      	movs	r3, #0
 801559a:	613b      	str	r3, [r7, #16]
 801559c:	693b      	ldr	r3, [r7, #16]
 801559e:	61fb      	str	r3, [r7, #28]
 80155a0:	2308      	movs	r3, #8
 80155a2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80155a4:	69fb      	ldr	r3, [r7, #28]
 80155a6:	1c5a      	adds	r2, r3, #1
 80155a8:	61fa      	str	r2, [r7, #28]
 80155aa:	68fa      	ldr	r2, [r7, #12]
 80155ac:	4413      	add	r3, r2
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80155b2:	7efb      	ldrb	r3, [r7, #27]
 80155b4:	2b20      	cmp	r3, #32
 80155b6:	d94e      	bls.n	8015656 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80155b8:	7efb      	ldrb	r3, [r7, #27]
 80155ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80155bc:	d006      	beq.n	80155cc <create_name+0x54>
 80155be:	7efb      	ldrb	r3, [r7, #27]
 80155c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80155c2:	d110      	bne.n	80155e6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80155c4:	e002      	b.n	80155cc <create_name+0x54>
 80155c6:	69fb      	ldr	r3, [r7, #28]
 80155c8:	3301      	adds	r3, #1
 80155ca:	61fb      	str	r3, [r7, #28]
 80155cc:	68fa      	ldr	r2, [r7, #12]
 80155ce:	69fb      	ldr	r3, [r7, #28]
 80155d0:	4413      	add	r3, r2
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	2b2f      	cmp	r3, #47	@ 0x2f
 80155d6:	d0f6      	beq.n	80155c6 <create_name+0x4e>
 80155d8:	68fa      	ldr	r2, [r7, #12]
 80155da:	69fb      	ldr	r3, [r7, #28]
 80155dc:	4413      	add	r3, r2
 80155de:	781b      	ldrb	r3, [r3, #0]
 80155e0:	2b5c      	cmp	r3, #92	@ 0x5c
 80155e2:	d0f0      	beq.n	80155c6 <create_name+0x4e>
			break;
 80155e4:	e038      	b.n	8015658 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80155e6:	7efb      	ldrb	r3, [r7, #27]
 80155e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80155ea:	d003      	beq.n	80155f4 <create_name+0x7c>
 80155ec:	693a      	ldr	r2, [r7, #16]
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d30c      	bcc.n	801560e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80155f4:	697b      	ldr	r3, [r7, #20]
 80155f6:	2b0b      	cmp	r3, #11
 80155f8:	d002      	beq.n	8015600 <create_name+0x88>
 80155fa:	7efb      	ldrb	r3, [r7, #27]
 80155fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80155fe:	d001      	beq.n	8015604 <create_name+0x8c>
 8015600:	2306      	movs	r3, #6
 8015602:	e044      	b.n	801568e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8015604:	2308      	movs	r3, #8
 8015606:	613b      	str	r3, [r7, #16]
 8015608:	230b      	movs	r3, #11
 801560a:	617b      	str	r3, [r7, #20]
			continue;
 801560c:	e022      	b.n	8015654 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801560e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015612:	2b00      	cmp	r3, #0
 8015614:	da04      	bge.n	8015620 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8015616:	7efb      	ldrb	r3, [r7, #27]
 8015618:	3b80      	subs	r3, #128	@ 0x80
 801561a:	4a1f      	ldr	r2, [pc, #124]	@ (8015698 <create_name+0x120>)
 801561c:	5cd3      	ldrb	r3, [r2, r3]
 801561e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8015620:	7efb      	ldrb	r3, [r7, #27]
 8015622:	4619      	mov	r1, r3
 8015624:	481d      	ldr	r0, [pc, #116]	@ (801569c <create_name+0x124>)
 8015626:	f7fe ffe1 	bl	80145ec <chk_chr>
 801562a:	4603      	mov	r3, r0
 801562c:	2b00      	cmp	r3, #0
 801562e:	d001      	beq.n	8015634 <create_name+0xbc>
 8015630:	2306      	movs	r3, #6
 8015632:	e02c      	b.n	801568e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8015634:	7efb      	ldrb	r3, [r7, #27]
 8015636:	2b60      	cmp	r3, #96	@ 0x60
 8015638:	d905      	bls.n	8015646 <create_name+0xce>
 801563a:	7efb      	ldrb	r3, [r7, #27]
 801563c:	2b7a      	cmp	r3, #122	@ 0x7a
 801563e:	d802      	bhi.n	8015646 <create_name+0xce>
 8015640:	7efb      	ldrb	r3, [r7, #27]
 8015642:	3b20      	subs	r3, #32
 8015644:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8015646:	693b      	ldr	r3, [r7, #16]
 8015648:	1c5a      	adds	r2, r3, #1
 801564a:	613a      	str	r2, [r7, #16]
 801564c:	68ba      	ldr	r2, [r7, #8]
 801564e:	4413      	add	r3, r2
 8015650:	7efa      	ldrb	r2, [r7, #27]
 8015652:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8015654:	e7a6      	b.n	80155a4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8015656:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8015658:	68fa      	ldr	r2, [r7, #12]
 801565a:	69fb      	ldr	r3, [r7, #28]
 801565c:	441a      	add	r2, r3
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d101      	bne.n	801566c <create_name+0xf4>
 8015668:	2306      	movs	r3, #6
 801566a:	e010      	b.n	801568e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	2be5      	cmp	r3, #229	@ 0xe5
 8015672:	d102      	bne.n	801567a <create_name+0x102>
 8015674:	68bb      	ldr	r3, [r7, #8]
 8015676:	2205      	movs	r2, #5
 8015678:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801567a:	7efb      	ldrb	r3, [r7, #27]
 801567c:	2b20      	cmp	r3, #32
 801567e:	d801      	bhi.n	8015684 <create_name+0x10c>
 8015680:	2204      	movs	r2, #4
 8015682:	e000      	b.n	8015686 <create_name+0x10e>
 8015684:	2200      	movs	r2, #0
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	330b      	adds	r3, #11
 801568a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801568c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801568e:	4618      	mov	r0, r3
 8015690:	3720      	adds	r7, #32
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}
 8015696:	bf00      	nop
 8015698:	0801c394 	.word	0x0801c394
 801569c:	0801c314 	.word	0x0801c314

080156a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80156a0:	b580      	push	{r7, lr}
 80156a2:	b086      	sub	sp, #24
 80156a4:	af00      	add	r7, sp, #0
 80156a6:	6078      	str	r0, [r7, #4]
 80156a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80156b4:	e002      	b.n	80156bc <follow_path+0x1c>
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	3301      	adds	r3, #1
 80156ba:	603b      	str	r3, [r7, #0]
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	2b2f      	cmp	r3, #47	@ 0x2f
 80156c2:	d0f8      	beq.n	80156b6 <follow_path+0x16>
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	781b      	ldrb	r3, [r3, #0]
 80156c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80156ca:	d0f4      	beq.n	80156b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	2200      	movs	r2, #0
 80156d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	781b      	ldrb	r3, [r3, #0]
 80156d6:	2b1f      	cmp	r3, #31
 80156d8:	d80a      	bhi.n	80156f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	2280      	movs	r2, #128	@ 0x80
 80156de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80156e2:	2100      	movs	r1, #0
 80156e4:	6878      	ldr	r0, [r7, #4]
 80156e6:	f7ff fcfa 	bl	80150de <dir_sdi>
 80156ea:	4603      	mov	r3, r0
 80156ec:	75fb      	strb	r3, [r7, #23]
 80156ee:	e043      	b.n	8015778 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80156f0:	463b      	mov	r3, r7
 80156f2:	4619      	mov	r1, r3
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f7ff ff3f 	bl	8015578 <create_name>
 80156fa:	4603      	mov	r3, r0
 80156fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80156fe:	7dfb      	ldrb	r3, [r7, #23]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d134      	bne.n	801576e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8015704:	6878      	ldr	r0, [r7, #4]
 8015706:	f7ff feb0 	bl	801546a <dir_find>
 801570a:	4603      	mov	r3, r0
 801570c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8015714:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8015716:	7dfb      	ldrb	r3, [r7, #23]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d00a      	beq.n	8015732 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801571c:	7dfb      	ldrb	r3, [r7, #23]
 801571e:	2b04      	cmp	r3, #4
 8015720:	d127      	bne.n	8015772 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8015722:	7afb      	ldrb	r3, [r7, #11]
 8015724:	f003 0304 	and.w	r3, r3, #4
 8015728:	2b00      	cmp	r3, #0
 801572a:	d122      	bne.n	8015772 <follow_path+0xd2>
 801572c:	2305      	movs	r3, #5
 801572e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015730:	e01f      	b.n	8015772 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015732:	7afb      	ldrb	r3, [r7, #11]
 8015734:	f003 0304 	and.w	r3, r3, #4
 8015738:	2b00      	cmp	r3, #0
 801573a:	d11c      	bne.n	8015776 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801573c:	693b      	ldr	r3, [r7, #16]
 801573e:	799b      	ldrb	r3, [r3, #6]
 8015740:	f003 0310 	and.w	r3, r3, #16
 8015744:	2b00      	cmp	r3, #0
 8015746:	d102      	bne.n	801574e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015748:	2305      	movs	r3, #5
 801574a:	75fb      	strb	r3, [r7, #23]
 801574c:	e014      	b.n	8015778 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	695b      	ldr	r3, [r3, #20]
 8015758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801575c:	4413      	add	r3, r2
 801575e:	4619      	mov	r1, r3
 8015760:	68f8      	ldr	r0, [r7, #12]
 8015762:	f7ff fe43 	bl	80153ec <ld_clust>
 8015766:	4602      	mov	r2, r0
 8015768:	693b      	ldr	r3, [r7, #16]
 801576a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801576c:	e7c0      	b.n	80156f0 <follow_path+0x50>
			if (res != FR_OK) break;
 801576e:	bf00      	nop
 8015770:	e002      	b.n	8015778 <follow_path+0xd8>
				break;
 8015772:	bf00      	nop
 8015774:	e000      	b.n	8015778 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015776:	bf00      	nop
			}
		}
	}

	return res;
 8015778:	7dfb      	ldrb	r3, [r7, #23]
}
 801577a:	4618      	mov	r0, r3
 801577c:	3718      	adds	r7, #24
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}

08015782 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015782:	b480      	push	{r7}
 8015784:	b087      	sub	sp, #28
 8015786:	af00      	add	r7, sp, #0
 8015788:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801578a:	f04f 33ff 	mov.w	r3, #4294967295
 801578e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d031      	beq.n	80157fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	617b      	str	r3, [r7, #20]
 801579e:	e002      	b.n	80157a6 <get_ldnumber+0x24>
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	3301      	adds	r3, #1
 80157a4:	617b      	str	r3, [r7, #20]
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	2b20      	cmp	r3, #32
 80157ac:	d903      	bls.n	80157b6 <get_ldnumber+0x34>
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	781b      	ldrb	r3, [r3, #0]
 80157b2:	2b3a      	cmp	r3, #58	@ 0x3a
 80157b4:	d1f4      	bne.n	80157a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	781b      	ldrb	r3, [r3, #0]
 80157ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80157bc:	d11c      	bne.n	80157f8 <get_ldnumber+0x76>
			tp = *path;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	1c5a      	adds	r2, r3, #1
 80157c8:	60fa      	str	r2, [r7, #12]
 80157ca:	781b      	ldrb	r3, [r3, #0]
 80157cc:	3b30      	subs	r3, #48	@ 0x30
 80157ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80157d0:	68bb      	ldr	r3, [r7, #8]
 80157d2:	2b09      	cmp	r3, #9
 80157d4:	d80e      	bhi.n	80157f4 <get_ldnumber+0x72>
 80157d6:	68fa      	ldr	r2, [r7, #12]
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	429a      	cmp	r2, r3
 80157dc:	d10a      	bne.n	80157f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d107      	bne.n	80157f4 <get_ldnumber+0x72>
					vol = (int)i;
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	3301      	adds	r3, #1
 80157ec:	617b      	str	r3, [r7, #20]
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	697a      	ldr	r2, [r7, #20]
 80157f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	e002      	b.n	80157fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80157f8:	2300      	movs	r3, #0
 80157fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80157fc:	693b      	ldr	r3, [r7, #16]
}
 80157fe:	4618      	mov	r0, r3
 8015800:	371c      	adds	r7, #28
 8015802:	46bd      	mov	sp, r7
 8015804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015808:	4770      	bx	lr
	...

0801580c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
 8015814:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2200      	movs	r2, #0
 801581a:	70da      	strb	r2, [r3, #3]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f04f 32ff 	mov.w	r2, #4294967295
 8015822:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f7ff f8dc 	bl	80149e4 <move_window>
 801582c:	4603      	mov	r3, r0
 801582e:	2b00      	cmp	r3, #0
 8015830:	d001      	beq.n	8015836 <check_fs+0x2a>
 8015832:	2304      	movs	r3, #4
 8015834:	e038      	b.n	80158a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	3334      	adds	r3, #52	@ 0x34
 801583a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801583e:	4618      	mov	r0, r3
 8015840:	f7fe fdee 	bl	8014420 <ld_word>
 8015844:	4603      	mov	r3, r0
 8015846:	461a      	mov	r2, r3
 8015848:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801584c:	429a      	cmp	r2, r3
 801584e:	d001      	beq.n	8015854 <check_fs+0x48>
 8015850:	2303      	movs	r3, #3
 8015852:	e029      	b.n	80158a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801585a:	2be9      	cmp	r3, #233	@ 0xe9
 801585c:	d009      	beq.n	8015872 <check_fs+0x66>
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015864:	2beb      	cmp	r3, #235	@ 0xeb
 8015866:	d11e      	bne.n	80158a6 <check_fs+0x9a>
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 801586e:	2b90      	cmp	r3, #144	@ 0x90
 8015870:	d119      	bne.n	80158a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	3334      	adds	r3, #52	@ 0x34
 8015876:	3336      	adds	r3, #54	@ 0x36
 8015878:	4618      	mov	r0, r3
 801587a:	f7fe fdea 	bl	8014452 <ld_dword>
 801587e:	4603      	mov	r3, r0
 8015880:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8015884:	4a0a      	ldr	r2, [pc, #40]	@ (80158b0 <check_fs+0xa4>)
 8015886:	4293      	cmp	r3, r2
 8015888:	d101      	bne.n	801588e <check_fs+0x82>
 801588a:	2300      	movs	r3, #0
 801588c:	e00c      	b.n	80158a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	3334      	adds	r3, #52	@ 0x34
 8015892:	3352      	adds	r3, #82	@ 0x52
 8015894:	4618      	mov	r0, r3
 8015896:	f7fe fddc 	bl	8014452 <ld_dword>
 801589a:	4603      	mov	r3, r0
 801589c:	4a05      	ldr	r2, [pc, #20]	@ (80158b4 <check_fs+0xa8>)
 801589e:	4293      	cmp	r3, r2
 80158a0:	d101      	bne.n	80158a6 <check_fs+0x9a>
 80158a2:	2300      	movs	r3, #0
 80158a4:	e000      	b.n	80158a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80158a6:	2302      	movs	r3, #2
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3708      	adds	r7, #8
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	00544146 	.word	0x00544146
 80158b4:	33544146 	.word	0x33544146

080158b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b096      	sub	sp, #88	@ 0x58
 80158bc:	af00      	add	r7, sp, #0
 80158be:	60f8      	str	r0, [r7, #12]
 80158c0:	60b9      	str	r1, [r7, #8]
 80158c2:	4613      	mov	r3, r2
 80158c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	2200      	movs	r2, #0
 80158ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80158cc:	68f8      	ldr	r0, [r7, #12]
 80158ce:	f7ff ff58 	bl	8015782 <get_ldnumber>
 80158d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80158d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	da01      	bge.n	80158de <find_volume+0x26>
 80158da:	230b      	movs	r3, #11
 80158dc:	e235      	b.n	8015d4a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80158de:	4aa5      	ldr	r2, [pc, #660]	@ (8015b74 <find_volume+0x2bc>)
 80158e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80158e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80158e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d101      	bne.n	80158f2 <find_volume+0x3a>
 80158ee:	230c      	movs	r3, #12
 80158f0:	e22b      	b.n	8015d4a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 80158f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80158f4:	f7fe fe95 	bl	8014622 <lock_fs>
 80158f8:	4603      	mov	r3, r0
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d101      	bne.n	8015902 <find_volume+0x4a>
 80158fe:	230f      	movs	r3, #15
 8015900:	e223      	b.n	8015d4a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015906:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8015908:	79fb      	ldrb	r3, [r7, #7]
 801590a:	f023 0301 	bic.w	r3, r3, #1
 801590e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8015910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015912:	781b      	ldrb	r3, [r3, #0]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d01a      	beq.n	801594e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8015918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801591a:	785b      	ldrb	r3, [r3, #1]
 801591c:	4618      	mov	r0, r3
 801591e:	f7fe fce1 	bl	80142e4 <disk_status>
 8015922:	4603      	mov	r3, r0
 8015924:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015928:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801592c:	f003 0301 	and.w	r3, r3, #1
 8015930:	2b00      	cmp	r3, #0
 8015932:	d10c      	bne.n	801594e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015934:	79fb      	ldrb	r3, [r7, #7]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d007      	beq.n	801594a <find_volume+0x92>
 801593a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801593e:	f003 0304 	and.w	r3, r3, #4
 8015942:	2b00      	cmp	r3, #0
 8015944:	d001      	beq.n	801594a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8015946:	230a      	movs	r3, #10
 8015948:	e1ff      	b.n	8015d4a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 801594a:	2300      	movs	r3, #0
 801594c:	e1fd      	b.n	8015d4a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801594e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015950:	2200      	movs	r2, #0
 8015952:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015956:	b2da      	uxtb	r2, r3
 8015958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801595a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801595c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801595e:	785b      	ldrb	r3, [r3, #1]
 8015960:	4618      	mov	r0, r3
 8015962:	f7fe fcd9 	bl	8014318 <disk_initialize>
 8015966:	4603      	mov	r3, r0
 8015968:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801596c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015970:	f003 0301 	and.w	r3, r3, #1
 8015974:	2b00      	cmp	r3, #0
 8015976:	d001      	beq.n	801597c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015978:	2303      	movs	r3, #3
 801597a:	e1e6      	b.n	8015d4a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801597c:	79fb      	ldrb	r3, [r7, #7]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d007      	beq.n	8015992 <find_volume+0xda>
 8015982:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015986:	f003 0304 	and.w	r3, r3, #4
 801598a:	2b00      	cmp	r3, #0
 801598c:	d001      	beq.n	8015992 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801598e:	230a      	movs	r3, #10
 8015990:	e1db      	b.n	8015d4a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015992:	2300      	movs	r3, #0
 8015994:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015996:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015998:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801599a:	f7ff ff37 	bl	801580c <check_fs>
 801599e:	4603      	mov	r3, r0
 80159a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80159a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80159a8:	2b02      	cmp	r3, #2
 80159aa:	d149      	bne.n	8015a40 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80159ac:	2300      	movs	r3, #0
 80159ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80159b0:	e01e      	b.n	80159f0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80159b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159b4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80159b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159ba:	011b      	lsls	r3, r3, #4
 80159bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80159c0:	4413      	add	r3, r2
 80159c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80159c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159c6:	3304      	adds	r3, #4
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d006      	beq.n	80159dc <find_volume+0x124>
 80159ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159d0:	3308      	adds	r3, #8
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7fe fd3d 	bl	8014452 <ld_dword>
 80159d8:	4602      	mov	r2, r0
 80159da:	e000      	b.n	80159de <find_volume+0x126>
 80159dc:	2200      	movs	r2, #0
 80159de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159e0:	009b      	lsls	r3, r3, #2
 80159e2:	3358      	adds	r3, #88	@ 0x58
 80159e4:	443b      	add	r3, r7
 80159e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80159ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159ec:	3301      	adds	r3, #1
 80159ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80159f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159f2:	2b03      	cmp	r3, #3
 80159f4:	d9dd      	bls.n	80159b2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80159f6:	2300      	movs	r3, #0
 80159f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80159fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d002      	beq.n	8015a06 <find_volume+0x14e>
 8015a00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a02:	3b01      	subs	r3, #1
 8015a04:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015a06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a08:	009b      	lsls	r3, r3, #2
 8015a0a:	3358      	adds	r3, #88	@ 0x58
 8015a0c:	443b      	add	r3, r7
 8015a0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015a12:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d005      	beq.n	8015a26 <find_volume+0x16e>
 8015a1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015a1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015a1e:	f7ff fef5 	bl	801580c <check_fs>
 8015a22:	4603      	mov	r3, r0
 8015a24:	e000      	b.n	8015a28 <find_volume+0x170>
 8015a26:	2303      	movs	r3, #3
 8015a28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015a30:	2b01      	cmp	r3, #1
 8015a32:	d905      	bls.n	8015a40 <find_volume+0x188>
 8015a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a36:	3301      	adds	r3, #1
 8015a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8015a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015a3c:	2b03      	cmp	r3, #3
 8015a3e:	d9e2      	bls.n	8015a06 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015a40:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015a44:	2b04      	cmp	r3, #4
 8015a46:	d101      	bne.n	8015a4c <find_volume+0x194>
 8015a48:	2301      	movs	r3, #1
 8015a4a:	e17e      	b.n	8015d4a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015a50:	2b01      	cmp	r3, #1
 8015a52:	d901      	bls.n	8015a58 <find_volume+0x1a0>
 8015a54:	230d      	movs	r3, #13
 8015a56:	e178      	b.n	8015d4a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a5a:	3334      	adds	r3, #52	@ 0x34
 8015a5c:	330b      	adds	r3, #11
 8015a5e:	4618      	mov	r0, r3
 8015a60:	f7fe fcde 	bl	8014420 <ld_word>
 8015a64:	4603      	mov	r3, r0
 8015a66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015a6a:	d001      	beq.n	8015a70 <find_volume+0x1b8>
 8015a6c:	230d      	movs	r3, #13
 8015a6e:	e16c      	b.n	8015d4a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a72:	3334      	adds	r3, #52	@ 0x34
 8015a74:	3316      	adds	r3, #22
 8015a76:	4618      	mov	r0, r3
 8015a78:	f7fe fcd2 	bl	8014420 <ld_word>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d106      	bne.n	8015a94 <find_volume+0x1dc>
 8015a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a88:	3334      	adds	r3, #52	@ 0x34
 8015a8a:	3324      	adds	r3, #36	@ 0x24
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7fe fce0 	bl	8014452 <ld_dword>
 8015a92:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8015a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015a98:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a9c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8015aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015aa2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015aa6:	789b      	ldrb	r3, [r3, #2]
 8015aa8:	2b01      	cmp	r3, #1
 8015aaa:	d005      	beq.n	8015ab8 <find_volume+0x200>
 8015aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015aae:	789b      	ldrb	r3, [r3, #2]
 8015ab0:	2b02      	cmp	r3, #2
 8015ab2:	d001      	beq.n	8015ab8 <find_volume+0x200>
 8015ab4:	230d      	movs	r3, #13
 8015ab6:	e148      	b.n	8015d4a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015aba:	789b      	ldrb	r3, [r3, #2]
 8015abc:	461a      	mov	r2, r3
 8015abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ac0:	fb02 f303 	mul.w	r3, r2, r3
 8015ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8015acc:	461a      	mov	r2, r3
 8015ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ad0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ad4:	895b      	ldrh	r3, [r3, #10]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d008      	beq.n	8015aec <find_volume+0x234>
 8015ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015adc:	895b      	ldrh	r3, [r3, #10]
 8015ade:	461a      	mov	r2, r3
 8015ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ae2:	895b      	ldrh	r3, [r3, #10]
 8015ae4:	3b01      	subs	r3, #1
 8015ae6:	4013      	ands	r3, r2
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d001      	beq.n	8015af0 <find_volume+0x238>
 8015aec:	230d      	movs	r3, #13
 8015aee:	e12c      	b.n	8015d4a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015af2:	3334      	adds	r3, #52	@ 0x34
 8015af4:	3311      	adds	r3, #17
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7fe fc92 	bl	8014420 <ld_word>
 8015afc:	4603      	mov	r3, r0
 8015afe:	461a      	mov	r2, r3
 8015b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b06:	891b      	ldrh	r3, [r3, #8]
 8015b08:	f003 030f 	and.w	r3, r3, #15
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d001      	beq.n	8015b16 <find_volume+0x25e>
 8015b12:	230d      	movs	r3, #13
 8015b14:	e119      	b.n	8015d4a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b18:	3334      	adds	r3, #52	@ 0x34
 8015b1a:	3313      	adds	r3, #19
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	f7fe fc7f 	bl	8014420 <ld_word>
 8015b22:	4603      	mov	r3, r0
 8015b24:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015b26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d106      	bne.n	8015b3a <find_volume+0x282>
 8015b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b2e:	3334      	adds	r3, #52	@ 0x34
 8015b30:	3320      	adds	r3, #32
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7fe fc8d 	bl	8014452 <ld_dword>
 8015b38:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b3c:	3334      	adds	r3, #52	@ 0x34
 8015b3e:	330e      	adds	r3, #14
 8015b40:	4618      	mov	r0, r3
 8015b42:	f7fe fc6d 	bl	8014420 <ld_word>
 8015b46:	4603      	mov	r3, r0
 8015b48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015b4a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d101      	bne.n	8015b54 <find_volume+0x29c>
 8015b50:	230d      	movs	r3, #13
 8015b52:	e0fa      	b.n	8015d4a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015b54:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b58:	4413      	add	r3, r2
 8015b5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b5c:	8912      	ldrh	r2, [r2, #8]
 8015b5e:	0912      	lsrs	r2, r2, #4
 8015b60:	b292      	uxth	r2, r2
 8015b62:	4413      	add	r3, r2
 8015b64:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015b66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b6a:	429a      	cmp	r2, r3
 8015b6c:	d204      	bcs.n	8015b78 <find_volume+0x2c0>
 8015b6e:	230d      	movs	r3, #13
 8015b70:	e0eb      	b.n	8015d4a <find_volume+0x492>
 8015b72:	bf00      	nop
 8015b74:	2000158c 	.word	0x2000158c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015b78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b7c:	1ad3      	subs	r3, r2, r3
 8015b7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015b80:	8952      	ldrh	r2, [r2, #10]
 8015b82:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b86:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d101      	bne.n	8015b92 <find_volume+0x2da>
 8015b8e:	230d      	movs	r3, #13
 8015b90:	e0db      	b.n	8015d4a <find_volume+0x492>
		fmt = FS_FAT32;
 8015b92:	2303      	movs	r3, #3
 8015b94:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b9a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8015b9e:	4293      	cmp	r3, r2
 8015ba0:	d802      	bhi.n	8015ba8 <find_volume+0x2f0>
 8015ba2:	2302      	movs	r3, #2
 8015ba4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015baa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8015bae:	4293      	cmp	r3, r2
 8015bb0:	d802      	bhi.n	8015bb8 <find_volume+0x300>
 8015bb2:	2301      	movs	r3, #1
 8015bb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bba:	1c9a      	adds	r2, r3, #2
 8015bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bbe:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8015bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bc2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015bc4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015bc6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bca:	441a      	add	r2, r3
 8015bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bce:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8015bd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8015bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bd4:	441a      	add	r2, r3
 8015bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 8015bda:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015bde:	2b03      	cmp	r3, #3
 8015be0:	d11e      	bne.n	8015c20 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015be4:	3334      	adds	r3, #52	@ 0x34
 8015be6:	332a      	adds	r3, #42	@ 0x2a
 8015be8:	4618      	mov	r0, r3
 8015bea:	f7fe fc19 	bl	8014420 <ld_word>
 8015bee:	4603      	mov	r3, r0
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d001      	beq.n	8015bf8 <find_volume+0x340>
 8015bf4:	230d      	movs	r3, #13
 8015bf6:	e0a8      	b.n	8015d4a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015bfa:	891b      	ldrh	r3, [r3, #8]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d001      	beq.n	8015c04 <find_volume+0x34c>
 8015c00:	230d      	movs	r3, #13
 8015c02:	e0a2      	b.n	8015d4a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c06:	3334      	adds	r3, #52	@ 0x34
 8015c08:	332c      	adds	r3, #44	@ 0x2c
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	f7fe fc21 	bl	8014452 <ld_dword>
 8015c10:	4602      	mov	r2, r0
 8015c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c14:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c18:	699b      	ldr	r3, [r3, #24]
 8015c1a:	009b      	lsls	r3, r3, #2
 8015c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8015c1e:	e01f      	b.n	8015c60 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c22:	891b      	ldrh	r3, [r3, #8]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d101      	bne.n	8015c2c <find_volume+0x374>
 8015c28:	230d      	movs	r3, #13
 8015c2a:	e08e      	b.n	8015d4a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015c32:	441a      	add	r2, r3
 8015c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c36:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015c38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015c3c:	2b02      	cmp	r3, #2
 8015c3e:	d103      	bne.n	8015c48 <find_volume+0x390>
 8015c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c42:	699b      	ldr	r3, [r3, #24]
 8015c44:	005b      	lsls	r3, r3, #1
 8015c46:	e00a      	b.n	8015c5e <find_volume+0x3a6>
 8015c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c4a:	699a      	ldr	r2, [r3, #24]
 8015c4c:	4613      	mov	r3, r2
 8015c4e:	005b      	lsls	r3, r3, #1
 8015c50:	4413      	add	r3, r2
 8015c52:	085a      	lsrs	r2, r3, #1
 8015c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c56:	699b      	ldr	r3, [r3, #24]
 8015c58:	f003 0301 	and.w	r3, r3, #1
 8015c5c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015c5e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c62:	69da      	ldr	r2, [r3, #28]
 8015c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015c66:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8015c6a:	0a5b      	lsrs	r3, r3, #9
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d201      	bcs.n	8015c74 <find_volume+0x3bc>
 8015c70:	230d      	movs	r3, #13
 8015c72:	e06a      	b.n	8015d4a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c76:	f04f 32ff 	mov.w	r2, #4294967295
 8015c7a:	615a      	str	r2, [r3, #20]
 8015c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c7e:	695a      	ldr	r2, [r3, #20]
 8015c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c82:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8015c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c86:	2280      	movs	r2, #128	@ 0x80
 8015c88:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015c8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8015c8e:	2b03      	cmp	r3, #3
 8015c90:	d149      	bne.n	8015d26 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015c94:	3334      	adds	r3, #52	@ 0x34
 8015c96:	3330      	adds	r3, #48	@ 0x30
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7fe fbc1 	bl	8014420 <ld_word>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	2b01      	cmp	r3, #1
 8015ca2:	d140      	bne.n	8015d26 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015ca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ca6:	3301      	adds	r3, #1
 8015ca8:	4619      	mov	r1, r3
 8015caa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015cac:	f7fe fe9a 	bl	80149e4 <move_window>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d137      	bne.n	8015d26 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8015cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cb8:	2200      	movs	r2, #0
 8015cba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cbe:	3334      	adds	r3, #52	@ 0x34
 8015cc0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f7fe fbab 	bl	8014420 <ld_word>
 8015cca:	4603      	mov	r3, r0
 8015ccc:	461a      	mov	r2, r3
 8015cce:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d127      	bne.n	8015d26 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cd8:	3334      	adds	r3, #52	@ 0x34
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f7fe fbb9 	bl	8014452 <ld_dword>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8015d54 <find_volume+0x49c>)
 8015ce4:	4293      	cmp	r3, r2
 8015ce6:	d11e      	bne.n	8015d26 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cea:	3334      	adds	r3, #52	@ 0x34
 8015cec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	f7fe fbae 	bl	8014452 <ld_dword>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	4a17      	ldr	r2, [pc, #92]	@ (8015d58 <find_volume+0x4a0>)
 8015cfa:	4293      	cmp	r3, r2
 8015cfc:	d113      	bne.n	8015d26 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d00:	3334      	adds	r3, #52	@ 0x34
 8015d02:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8015d06:	4618      	mov	r0, r3
 8015d08:	f7fe fba3 	bl	8014452 <ld_dword>
 8015d0c:	4602      	mov	r2, r0
 8015d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d10:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d14:	3334      	adds	r3, #52	@ 0x34
 8015d16:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7fe fb99 	bl	8014452 <ld_dword>
 8015d20:	4602      	mov	r2, r0
 8015d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d24:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d28:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8015d2c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8015d5c <find_volume+0x4a4>)
 8015d30:	881b      	ldrh	r3, [r3, #0]
 8015d32:	3301      	adds	r3, #1
 8015d34:	b29a      	uxth	r2, r3
 8015d36:	4b09      	ldr	r3, [pc, #36]	@ (8015d5c <find_volume+0x4a4>)
 8015d38:	801a      	strh	r2, [r3, #0]
 8015d3a:	4b08      	ldr	r3, [pc, #32]	@ (8015d5c <find_volume+0x4a4>)
 8015d3c:	881a      	ldrh	r2, [r3, #0]
 8015d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015d40:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8015d42:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015d44:	f7fe fde6 	bl	8014914 <clear_lock>
#endif
	return FR_OK;
 8015d48:	2300      	movs	r3, #0
}
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	3758      	adds	r7, #88	@ 0x58
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	bd80      	pop	{r7, pc}
 8015d52:	bf00      	nop
 8015d54:	41615252 	.word	0x41615252
 8015d58:	61417272 	.word	0x61417272
 8015d5c:	20001590 	.word	0x20001590

08015d60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b084      	sub	sp, #16
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	6078      	str	r0, [r7, #4]
 8015d68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015d6a:	2309      	movs	r3, #9
 8015d6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d02e      	beq.n	8015dd2 <validate+0x72>
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d02a      	beq.n	8015dd2 <validate+0x72>
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	781b      	ldrb	r3, [r3, #0]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d025      	beq.n	8015dd2 <validate+0x72>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	889a      	ldrh	r2, [r3, #4]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	88db      	ldrh	r3, [r3, #6]
 8015d90:	429a      	cmp	r2, r3
 8015d92:	d11e      	bne.n	8015dd2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	681b      	ldr	r3, [r3, #0]
 8015d98:	4618      	mov	r0, r3
 8015d9a:	f7fe fc42 	bl	8014622 <lock_fs>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d014      	beq.n	8015dce <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	785b      	ldrb	r3, [r3, #1]
 8015daa:	4618      	mov	r0, r3
 8015dac:	f7fe fa9a 	bl	80142e4 <disk_status>
 8015db0:	4603      	mov	r3, r0
 8015db2:	f003 0301 	and.w	r3, r3, #1
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d102      	bne.n	8015dc0 <validate+0x60>
				res = FR_OK;
 8015dba:	2300      	movs	r3, #0
 8015dbc:	73fb      	strb	r3, [r7, #15]
 8015dbe:	e008      	b.n	8015dd2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	2100      	movs	r1, #0
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7fe fc41 	bl	801464e <unlock_fs>
 8015dcc:	e001      	b.n	8015dd2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8015dce:	230f      	movs	r3, #15
 8015dd0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015dd2:	7bfb      	ldrb	r3, [r7, #15]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d102      	bne.n	8015dde <validate+0x7e>
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	e000      	b.n	8015de0 <validate+0x80>
 8015dde:	2300      	movs	r3, #0
 8015de0:	683a      	ldr	r2, [r7, #0]
 8015de2:	6013      	str	r3, [r2, #0]
	return res;
 8015de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3710      	adds	r7, #16
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}

08015dee <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015dee:	b580      	push	{r7, lr}
 8015df0:	b098      	sub	sp, #96	@ 0x60
 8015df2:	af00      	add	r7, sp, #0
 8015df4:	60f8      	str	r0, [r7, #12]
 8015df6:	60b9      	str	r1, [r7, #8]
 8015df8:	4613      	mov	r3, r2
 8015dfa:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d101      	bne.n	8015e06 <f_open+0x18>
 8015e02:	2309      	movs	r3, #9
 8015e04:	e1b0      	b.n	8016168 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015e06:	79fb      	ldrb	r3, [r7, #7]
 8015e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015e0c:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015e0e:	79fa      	ldrb	r2, [r7, #7]
 8015e10:	f107 0110 	add.w	r1, r7, #16
 8015e14:	f107 0308 	add.w	r3, r7, #8
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f7ff fd4d 	bl	80158b8 <find_volume>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8015e24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	f040 818d 	bne.w	8016148 <f_open+0x35a>
		dj.obj.fs = fs;
 8015e2e:	693b      	ldr	r3, [r7, #16]
 8015e30:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015e32:	68ba      	ldr	r2, [r7, #8]
 8015e34:	f107 0314 	add.w	r3, r7, #20
 8015e38:	4611      	mov	r1, r2
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7ff fc30 	bl	80156a0 <follow_path>
 8015e40:	4603      	mov	r3, r0
 8015e42:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015e46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d118      	bne.n	8015e80 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015e4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015e52:	b25b      	sxtb	r3, r3
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	da03      	bge.n	8015e60 <f_open+0x72>
				res = FR_INVALID_NAME;
 8015e58:	2306      	movs	r3, #6
 8015e5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015e5e:	e00f      	b.n	8015e80 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015e60:	79fb      	ldrb	r3, [r7, #7]
 8015e62:	2b01      	cmp	r3, #1
 8015e64:	bf8c      	ite	hi
 8015e66:	2301      	movhi	r3, #1
 8015e68:	2300      	movls	r3, #0
 8015e6a:	b2db      	uxtb	r3, r3
 8015e6c:	461a      	mov	r2, r3
 8015e6e:	f107 0314 	add.w	r3, r7, #20
 8015e72:	4611      	mov	r1, r2
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7fe fc05 	bl	8014684 <chk_lock>
 8015e7a:	4603      	mov	r3, r0
 8015e7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015e80:	79fb      	ldrb	r3, [r7, #7]
 8015e82:	f003 031c 	and.w	r3, r3, #28
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d07f      	beq.n	8015f8a <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8015e8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d017      	beq.n	8015ec2 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015e92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015e96:	2b04      	cmp	r3, #4
 8015e98:	d10e      	bne.n	8015eb8 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8015e9a:	f7fe fc4f 	bl	801473c <enq_lock>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d006      	beq.n	8015eb2 <f_open+0xc4>
 8015ea4:	f107 0314 	add.w	r3, r7, #20
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7ff fb33 	bl	8015514 <dir_register>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	e000      	b.n	8015eb4 <f_open+0xc6>
 8015eb2:	2312      	movs	r3, #18
 8015eb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015eb8:	79fb      	ldrb	r3, [r7, #7]
 8015eba:	f043 0308 	orr.w	r3, r3, #8
 8015ebe:	71fb      	strb	r3, [r7, #7]
 8015ec0:	e010      	b.n	8015ee4 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015ec2:	7ebb      	ldrb	r3, [r7, #26]
 8015ec4:	f003 0311 	and.w	r3, r3, #17
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d003      	beq.n	8015ed4 <f_open+0xe6>
					res = FR_DENIED;
 8015ecc:	2307      	movs	r3, #7
 8015ece:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015ed2:	e007      	b.n	8015ee4 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015ed4:	79fb      	ldrb	r3, [r7, #7]
 8015ed6:	f003 0304 	and.w	r3, r3, #4
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d002      	beq.n	8015ee4 <f_open+0xf6>
 8015ede:	2308      	movs	r3, #8
 8015ee0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015ee4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d168      	bne.n	8015fbe <f_open+0x1d0>
 8015eec:	79fb      	ldrb	r3, [r7, #7]
 8015eee:	f003 0308 	and.w	r3, r3, #8
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d063      	beq.n	8015fbe <f_open+0x1d0>
				dw = GET_FATTIME();
 8015ef6:	f7fb fde1 	bl	8011abc <get_fattime>
 8015efa:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015efe:	330e      	adds	r3, #14
 8015f00:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7fe fae3 	bl	80144ce <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f0a:	3316      	adds	r3, #22
 8015f0c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015f0e:	4618      	mov	r0, r3
 8015f10:	f7fe fadd 	bl	80144ce <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8015f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f16:	330b      	adds	r3, #11
 8015f18:	2220      	movs	r2, #32
 8015f1a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8015f1c:	693b      	ldr	r3, [r7, #16]
 8015f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015f20:	4611      	mov	r1, r2
 8015f22:	4618      	mov	r0, r3
 8015f24:	f7ff fa62 	bl	80153ec <ld_clust>
 8015f28:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8015f2a:	693b      	ldr	r3, [r7, #16]
 8015f2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8015f2e:	2200      	movs	r2, #0
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7ff fa7a 	bl	801542a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8015f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f38:	331c      	adds	r3, #28
 8015f3a:	2100      	movs	r1, #0
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f7fe fac6 	bl	80144ce <st_dword>
					fs->wflag = 1;
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	2201      	movs	r2, #1
 8015f46:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8015f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d037      	beq.n	8015fbe <f_open+0x1d0>
						dw = fs->winsect;
 8015f4e:	693b      	ldr	r3, [r7, #16]
 8015f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f52:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8015f54:	f107 0314 	add.w	r3, r7, #20
 8015f58:	2200      	movs	r2, #0
 8015f5a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8015f5c:	4618      	mov	r0, r3
 8015f5e:	f7fe ff8d 	bl	8014e7c <remove_chain>
 8015f62:	4603      	mov	r3, r0
 8015f64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8015f68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d126      	bne.n	8015fbe <f_open+0x1d0>
							res = move_window(fs, dw);
 8015f70:	693b      	ldr	r3, [r7, #16]
 8015f72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7fe fd35 	bl	80149e4 <move_window>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8015f84:	3a01      	subs	r2, #1
 8015f86:	611a      	str	r2, [r3, #16]
 8015f88:	e019      	b.n	8015fbe <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d115      	bne.n	8015fbe <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015f92:	7ebb      	ldrb	r3, [r7, #26]
 8015f94:	f003 0310 	and.w	r3, r3, #16
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d003      	beq.n	8015fa4 <f_open+0x1b6>
					res = FR_NO_FILE;
 8015f9c:	2304      	movs	r3, #4
 8015f9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8015fa2:	e00c      	b.n	8015fbe <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015fa4:	79fb      	ldrb	r3, [r7, #7]
 8015fa6:	f003 0302 	and.w	r3, r3, #2
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d007      	beq.n	8015fbe <f_open+0x1d0>
 8015fae:	7ebb      	ldrb	r3, [r7, #26]
 8015fb0:	f003 0301 	and.w	r3, r3, #1
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d002      	beq.n	8015fbe <f_open+0x1d0>
						res = FR_DENIED;
 8015fb8:	2307      	movs	r3, #7
 8015fba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8015fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d126      	bne.n	8016014 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015fc6:	79fb      	ldrb	r3, [r7, #7]
 8015fc8:	f003 0308 	and.w	r3, r3, #8
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d003      	beq.n	8015fd8 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8015fd0:	79fb      	ldrb	r3, [r7, #7]
 8015fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015fd6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8015fe0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8015fe6:	79fb      	ldrb	r3, [r7, #7]
 8015fe8:	2b01      	cmp	r3, #1
 8015fea:	bf8c      	ite	hi
 8015fec:	2301      	movhi	r3, #1
 8015fee:	2300      	movls	r3, #0
 8015ff0:	b2db      	uxtb	r3, r3
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	f107 0314 	add.w	r3, r7, #20
 8015ff8:	4611      	mov	r1, r2
 8015ffa:	4618      	mov	r0, r3
 8015ffc:	f7fe fbc0 	bl	8014780 <inc_lock>
 8016000:	4602      	mov	r2, r0
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	691b      	ldr	r3, [r3, #16]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d102      	bne.n	8016014 <f_open+0x226>
 801600e:	2302      	movs	r3, #2
 8016010:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016014:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016018:	2b00      	cmp	r3, #0
 801601a:	f040 8095 	bne.w	8016148 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016022:	4611      	mov	r1, r2
 8016024:	4618      	mov	r0, r3
 8016026:	f7ff f9e1 	bl	80153ec <ld_clust>
 801602a:	4602      	mov	r2, r0
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016032:	331c      	adds	r3, #28
 8016034:	4618      	mov	r0, r3
 8016036:	f7fe fa0c 	bl	8014452 <ld_dword>
 801603a:	4602      	mov	r2, r0
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	2200      	movs	r2, #0
 8016044:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016046:	693a      	ldr	r2, [r7, #16]
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	88da      	ldrh	r2, [r3, #6]
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	79fa      	ldrb	r2, [r7, #7]
 8016058:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	2200      	movs	r2, #0
 801605e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	2200      	movs	r2, #0
 8016064:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	2200      	movs	r2, #0
 801606a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	3330      	adds	r3, #48	@ 0x30
 8016070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016074:	2100      	movs	r1, #0
 8016076:	4618      	mov	r0, r3
 8016078:	f7fe fa76 	bl	8014568 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801607c:	79fb      	ldrb	r3, [r7, #7]
 801607e:	f003 0320 	and.w	r3, r3, #32
 8016082:	2b00      	cmp	r3, #0
 8016084:	d060      	beq.n	8016148 <f_open+0x35a>
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	68db      	ldr	r3, [r3, #12]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d05c      	beq.n	8016148 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	68da      	ldr	r2, [r3, #12]
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016096:	693b      	ldr	r3, [r7, #16]
 8016098:	895b      	ldrh	r3, [r3, #10]
 801609a:	025b      	lsls	r3, r3, #9
 801609c:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	689b      	ldr	r3, [r3, #8]
 80160a2:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	68db      	ldr	r3, [r3, #12]
 80160a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80160aa:	e016      	b.n	80160da <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7fe fd52 	bl	8014b5a <get_fat>
 80160b6:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80160b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80160ba:	2b01      	cmp	r3, #1
 80160bc:	d802      	bhi.n	80160c4 <f_open+0x2d6>
 80160be:	2302      	movs	r3, #2
 80160c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80160c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80160c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ca:	d102      	bne.n	80160d2 <f_open+0x2e4>
 80160cc:	2301      	movs	r3, #1
 80160ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80160d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80160d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80160d6:	1ad3      	subs	r3, r2, r3
 80160d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80160da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d103      	bne.n	80160ea <f_open+0x2fc>
 80160e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80160e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80160e6:	429a      	cmp	r2, r3
 80160e8:	d8e0      	bhi.n	80160ac <f_open+0x2be>
				}
				fp->clust = clst;
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80160ee:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80160f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d127      	bne.n	8016148 <f_open+0x35a>
 80160f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d022      	beq.n	8016148 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016102:	693b      	ldr	r3, [r7, #16]
 8016104:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8016106:	4618      	mov	r0, r3
 8016108:	f7fe fd08 	bl	8014b1c <clust2sect>
 801610c:	6478      	str	r0, [r7, #68]	@ 0x44
 801610e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016110:	2b00      	cmp	r3, #0
 8016112:	d103      	bne.n	801611c <f_open+0x32e>
						res = FR_INT_ERR;
 8016114:	2302      	movs	r3, #2
 8016116:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801611a:	e015      	b.n	8016148 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801611c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801611e:	0a5a      	lsrs	r2, r3, #9
 8016120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016122:	441a      	add	r2, r3
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016128:	693b      	ldr	r3, [r7, #16]
 801612a:	7858      	ldrb	r0, [r3, #1]
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	6a1a      	ldr	r2, [r3, #32]
 8016136:	2301      	movs	r3, #1
 8016138:	f7fe f914 	bl	8014364 <disk_read>
 801613c:	4603      	mov	r3, r0
 801613e:	2b00      	cmp	r3, #0
 8016140:	d002      	beq.n	8016148 <f_open+0x35a>
 8016142:	2301      	movs	r3, #1
 8016144:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016148:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801614c:	2b00      	cmp	r3, #0
 801614e:	d002      	beq.n	8016156 <f_open+0x368>
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2200      	movs	r2, #0
 8016154:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801615c:	4611      	mov	r1, r2
 801615e:	4618      	mov	r0, r3
 8016160:	f7fe fa75 	bl	801464e <unlock_fs>
 8016164:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8016168:	4618      	mov	r0, r3
 801616a:	3760      	adds	r7, #96	@ 0x60
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}

08016170 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b08c      	sub	sp, #48	@ 0x30
 8016174:	af00      	add	r7, sp, #0
 8016176:	60f8      	str	r0, [r7, #12]
 8016178:	60b9      	str	r1, [r7, #8]
 801617a:	607a      	str	r2, [r7, #4]
 801617c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	2200      	movs	r2, #0
 8016186:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	f107 0210 	add.w	r2, r7, #16
 801618e:	4611      	mov	r1, r2
 8016190:	4618      	mov	r0, r3
 8016192:	f7ff fde5 	bl	8015d60 <validate>
 8016196:	4603      	mov	r3, r0
 8016198:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801619c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d107      	bne.n	80161b4 <f_write+0x44>
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	7d5b      	ldrb	r3, [r3, #21]
 80161a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80161ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d009      	beq.n	80161c8 <f_write+0x58>
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80161ba:	4611      	mov	r1, r2
 80161bc:	4618      	mov	r0, r3
 80161be:	f7fe fa46 	bl	801464e <unlock_fs>
 80161c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80161c6:	e173      	b.n	80164b0 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	7d1b      	ldrb	r3, [r3, #20]
 80161cc:	f003 0302 	and.w	r3, r3, #2
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d106      	bne.n	80161e2 <f_write+0x72>
 80161d4:	693b      	ldr	r3, [r7, #16]
 80161d6:	2107      	movs	r1, #7
 80161d8:	4618      	mov	r0, r3
 80161da:	f7fe fa38 	bl	801464e <unlock_fs>
 80161de:	2307      	movs	r3, #7
 80161e0:	e166      	b.n	80164b0 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	699a      	ldr	r2, [r3, #24]
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	441a      	add	r2, r3
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	699b      	ldr	r3, [r3, #24]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	f080 814b 	bcs.w	801648a <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	699b      	ldr	r3, [r3, #24]
 80161f8:	43db      	mvns	r3, r3
 80161fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80161fc:	e145      	b.n	801648a <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	699b      	ldr	r3, [r3, #24]
 8016202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016206:	2b00      	cmp	r3, #0
 8016208:	f040 8101 	bne.w	801640e <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	699b      	ldr	r3, [r3, #24]
 8016210:	0a5b      	lsrs	r3, r3, #9
 8016212:	693a      	ldr	r2, [r7, #16]
 8016214:	8952      	ldrh	r2, [r2, #10]
 8016216:	3a01      	subs	r2, #1
 8016218:	4013      	ands	r3, r2
 801621a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801621c:	69bb      	ldr	r3, [r7, #24]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d14d      	bne.n	80162be <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	699b      	ldr	r3, [r3, #24]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d10c      	bne.n	8016244 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	689b      	ldr	r3, [r3, #8]
 801622e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016232:	2b00      	cmp	r3, #0
 8016234:	d11a      	bne.n	801626c <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2100      	movs	r1, #0
 801623a:	4618      	mov	r0, r3
 801623c:	f7fe fe83 	bl	8014f46 <create_chain>
 8016240:	62b8      	str	r0, [r7, #40]	@ 0x28
 8016242:	e013      	b.n	801626c <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016248:	2b00      	cmp	r3, #0
 801624a:	d007      	beq.n	801625c <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	699b      	ldr	r3, [r3, #24]
 8016250:	4619      	mov	r1, r3
 8016252:	68f8      	ldr	r0, [r7, #12]
 8016254:	f7fe ff0f 	bl	8015076 <clmt_clust>
 8016258:	62b8      	str	r0, [r7, #40]	@ 0x28
 801625a:	e007      	b.n	801626c <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801625c:	68fa      	ldr	r2, [r7, #12]
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	69db      	ldr	r3, [r3, #28]
 8016262:	4619      	mov	r1, r3
 8016264:	4610      	mov	r0, r2
 8016266:	f7fe fe6e 	bl	8014f46 <create_chain>
 801626a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801626e:	2b00      	cmp	r3, #0
 8016270:	f000 8110 	beq.w	8016494 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016276:	2b01      	cmp	r3, #1
 8016278:	d109      	bne.n	801628e <f_write+0x11e>
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	2202      	movs	r2, #2
 801627e:	755a      	strb	r2, [r3, #21]
 8016280:	693b      	ldr	r3, [r7, #16]
 8016282:	2102      	movs	r1, #2
 8016284:	4618      	mov	r0, r3
 8016286:	f7fe f9e2 	bl	801464e <unlock_fs>
 801628a:	2302      	movs	r3, #2
 801628c:	e110      	b.n	80164b0 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801628e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016294:	d109      	bne.n	80162aa <f_write+0x13a>
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	2201      	movs	r2, #1
 801629a:	755a      	strb	r2, [r3, #21]
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	2101      	movs	r1, #1
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7fe f9d4 	bl	801464e <unlock_fs>
 80162a6:	2301      	movs	r3, #1
 80162a8:	e102      	b.n	80164b0 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80162ae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	689b      	ldr	r3, [r3, #8]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d102      	bne.n	80162be <f_write+0x14e>
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80162bc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	7d1b      	ldrb	r3, [r3, #20]
 80162c2:	b25b      	sxtb	r3, r3
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	da1d      	bge.n	8016304 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80162c8:	693b      	ldr	r3, [r7, #16]
 80162ca:	7858      	ldrb	r0, [r3, #1]
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	6a1a      	ldr	r2, [r3, #32]
 80162d6:	2301      	movs	r3, #1
 80162d8:	f7fe f864 	bl	80143a4 <disk_write>
 80162dc:	4603      	mov	r3, r0
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d009      	beq.n	80162f6 <f_write+0x186>
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	2201      	movs	r2, #1
 80162e6:	755a      	strb	r2, [r3, #21]
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	2101      	movs	r1, #1
 80162ec:	4618      	mov	r0, r3
 80162ee:	f7fe f9ae 	bl	801464e <unlock_fs>
 80162f2:	2301      	movs	r3, #1
 80162f4:	e0dc      	b.n	80164b0 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	7d1b      	ldrb	r3, [r3, #20]
 80162fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80162fe:	b2da      	uxtb	r2, r3
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016304:	693a      	ldr	r2, [r7, #16]
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	69db      	ldr	r3, [r3, #28]
 801630a:	4619      	mov	r1, r3
 801630c:	4610      	mov	r0, r2
 801630e:	f7fe fc05 	bl	8014b1c <clust2sect>
 8016312:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d109      	bne.n	801632e <f_write+0x1be>
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	2202      	movs	r2, #2
 801631e:	755a      	strb	r2, [r3, #21]
 8016320:	693b      	ldr	r3, [r7, #16]
 8016322:	2102      	movs	r1, #2
 8016324:	4618      	mov	r0, r3
 8016326:	f7fe f992 	bl	801464e <unlock_fs>
 801632a:	2302      	movs	r3, #2
 801632c:	e0c0      	b.n	80164b0 <f_write+0x340>
			sect += csect;
 801632e:	697a      	ldr	r2, [r7, #20]
 8016330:	69bb      	ldr	r3, [r7, #24]
 8016332:	4413      	add	r3, r2
 8016334:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	0a5b      	lsrs	r3, r3, #9
 801633a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801633c:	6a3b      	ldr	r3, [r7, #32]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d041      	beq.n	80163c6 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016342:	69ba      	ldr	r2, [r7, #24]
 8016344:	6a3b      	ldr	r3, [r7, #32]
 8016346:	4413      	add	r3, r2
 8016348:	693a      	ldr	r2, [r7, #16]
 801634a:	8952      	ldrh	r2, [r2, #10]
 801634c:	4293      	cmp	r3, r2
 801634e:	d905      	bls.n	801635c <f_write+0x1ec>
					cc = fs->csize - csect;
 8016350:	693b      	ldr	r3, [r7, #16]
 8016352:	895b      	ldrh	r3, [r3, #10]
 8016354:	461a      	mov	r2, r3
 8016356:	69bb      	ldr	r3, [r7, #24]
 8016358:	1ad3      	subs	r3, r2, r3
 801635a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801635c:	693b      	ldr	r3, [r7, #16]
 801635e:	7858      	ldrb	r0, [r3, #1]
 8016360:	6a3b      	ldr	r3, [r7, #32]
 8016362:	697a      	ldr	r2, [r7, #20]
 8016364:	69f9      	ldr	r1, [r7, #28]
 8016366:	f7fe f81d 	bl	80143a4 <disk_write>
 801636a:	4603      	mov	r3, r0
 801636c:	2b00      	cmp	r3, #0
 801636e:	d009      	beq.n	8016384 <f_write+0x214>
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	2201      	movs	r2, #1
 8016374:	755a      	strb	r2, [r3, #21]
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	2101      	movs	r1, #1
 801637a:	4618      	mov	r0, r3
 801637c:	f7fe f967 	bl	801464e <unlock_fs>
 8016380:	2301      	movs	r3, #1
 8016382:	e095      	b.n	80164b0 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	6a1a      	ldr	r2, [r3, #32]
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	1ad3      	subs	r3, r2, r3
 801638c:	6a3a      	ldr	r2, [r7, #32]
 801638e:	429a      	cmp	r2, r3
 8016390:	d915      	bls.n	80163be <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	6a1a      	ldr	r2, [r3, #32]
 801639c:	697b      	ldr	r3, [r7, #20]
 801639e:	1ad3      	subs	r3, r2, r3
 80163a0:	025b      	lsls	r3, r3, #9
 80163a2:	69fa      	ldr	r2, [r7, #28]
 80163a4:	4413      	add	r3, r2
 80163a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80163aa:	4619      	mov	r1, r3
 80163ac:	f7fe f8bb 	bl	8014526 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	7d1b      	ldrb	r3, [r3, #20]
 80163b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80163b8:	b2da      	uxtb	r2, r3
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80163be:	6a3b      	ldr	r3, [r7, #32]
 80163c0:	025b      	lsls	r3, r3, #9
 80163c2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80163c4:	e044      	b.n	8016450 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	6a1b      	ldr	r3, [r3, #32]
 80163ca:	697a      	ldr	r2, [r7, #20]
 80163cc:	429a      	cmp	r2, r3
 80163ce:	d01b      	beq.n	8016408 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	699a      	ldr	r2, [r3, #24]
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80163d8:	429a      	cmp	r2, r3
 80163da:	d215      	bcs.n	8016408 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80163dc:	693b      	ldr	r3, [r7, #16]
 80163de:	7858      	ldrb	r0, [r3, #1]
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80163e6:	2301      	movs	r3, #1
 80163e8:	697a      	ldr	r2, [r7, #20]
 80163ea:	f7fd ffbb 	bl	8014364 <disk_read>
 80163ee:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d009      	beq.n	8016408 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	2201      	movs	r2, #1
 80163f8:	755a      	strb	r2, [r3, #21]
 80163fa:	693b      	ldr	r3, [r7, #16]
 80163fc:	2101      	movs	r1, #1
 80163fe:	4618      	mov	r0, r3
 8016400:	f7fe f925 	bl	801464e <unlock_fs>
 8016404:	2301      	movs	r3, #1
 8016406:	e053      	b.n	80164b0 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	697a      	ldr	r2, [r7, #20]
 801640c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	699b      	ldr	r3, [r3, #24]
 8016412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016416:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 801641a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801641c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	429a      	cmp	r2, r3
 8016422:	d901      	bls.n	8016428 <f_write+0x2b8>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	699b      	ldr	r3, [r3, #24]
 8016432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016436:	4413      	add	r3, r2
 8016438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801643a:	69f9      	ldr	r1, [r7, #28]
 801643c:	4618      	mov	r0, r3
 801643e:	f7fe f872 	bl	8014526 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	7d1b      	ldrb	r3, [r3, #20]
 8016446:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801644a:	b2da      	uxtb	r2, r3
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016450:	69fa      	ldr	r2, [r7, #28]
 8016452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016454:	4413      	add	r3, r2
 8016456:	61fb      	str	r3, [r7, #28]
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	699a      	ldr	r2, [r3, #24]
 801645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801645e:	441a      	add	r2, r3
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	619a      	str	r2, [r3, #24]
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	68da      	ldr	r2, [r3, #12]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	699b      	ldr	r3, [r3, #24]
 801646c:	429a      	cmp	r2, r3
 801646e:	bf38      	it	cc
 8016470:	461a      	movcc	r2, r3
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	60da      	str	r2, [r3, #12]
 8016476:	683b      	ldr	r3, [r7, #0]
 8016478:	681a      	ldr	r2, [r3, #0]
 801647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801647c:	441a      	add	r2, r3
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	601a      	str	r2, [r3, #0]
 8016482:	687a      	ldr	r2, [r7, #4]
 8016484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016486:	1ad3      	subs	r3, r2, r3
 8016488:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	2b00      	cmp	r3, #0
 801648e:	f47f aeb6 	bne.w	80161fe <f_write+0x8e>
 8016492:	e000      	b.n	8016496 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016494:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	7d1b      	ldrb	r3, [r3, #20]
 801649a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801649e:	b2da      	uxtb	r2, r3
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80164a4:	693b      	ldr	r3, [r7, #16]
 80164a6:	2100      	movs	r1, #0
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7fe f8d0 	bl	801464e <unlock_fs>
 80164ae:	2300      	movs	r3, #0
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	3730      	adds	r7, #48	@ 0x30
 80164b4:	46bd      	mov	sp, r7
 80164b6:	bd80      	pop	{r7, pc}

080164b8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	b086      	sub	sp, #24
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f107 0208 	add.w	r2, r7, #8
 80164c6:	4611      	mov	r1, r2
 80164c8:	4618      	mov	r0, r3
 80164ca:	f7ff fc49 	bl	8015d60 <validate>
 80164ce:	4603      	mov	r3, r0
 80164d0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80164d2:	7dfb      	ldrb	r3, [r7, #23]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d16d      	bne.n	80165b4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	7d1b      	ldrb	r3, [r3, #20]
 80164dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d067      	beq.n	80165b4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	7d1b      	ldrb	r3, [r3, #20]
 80164e8:	b25b      	sxtb	r3, r3
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	da1a      	bge.n	8016524 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	7858      	ldrb	r0, [r3, #1]
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6a1a      	ldr	r2, [r3, #32]
 80164fc:	2301      	movs	r3, #1
 80164fe:	f7fd ff51 	bl	80143a4 <disk_write>
 8016502:	4603      	mov	r3, r0
 8016504:	2b00      	cmp	r3, #0
 8016506:	d006      	beq.n	8016516 <f_sync+0x5e>
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	2101      	movs	r1, #1
 801650c:	4618      	mov	r0, r3
 801650e:	f7fe f89e 	bl	801464e <unlock_fs>
 8016512:	2301      	movs	r3, #1
 8016514:	e055      	b.n	80165c2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	7d1b      	ldrb	r3, [r3, #20]
 801651a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801651e:	b2da      	uxtb	r2, r3
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016524:	f7fb faca 	bl	8011abc <get_fattime>
 8016528:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801652a:	68ba      	ldr	r2, [r7, #8]
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016530:	4619      	mov	r1, r3
 8016532:	4610      	mov	r0, r2
 8016534:	f7fe fa56 	bl	80149e4 <move_window>
 8016538:	4603      	mov	r3, r0
 801653a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801653c:	7dfb      	ldrb	r3, [r7, #23]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d138      	bne.n	80165b4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016546:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016548:	68fb      	ldr	r3, [r7, #12]
 801654a:	330b      	adds	r3, #11
 801654c:	781a      	ldrb	r2, [r3, #0]
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	330b      	adds	r3, #11
 8016552:	f042 0220 	orr.w	r2, r2, #32
 8016556:	b2d2      	uxtb	r2, r2
 8016558:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6818      	ldr	r0, [r3, #0]
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	689b      	ldr	r3, [r3, #8]
 8016562:	461a      	mov	r2, r3
 8016564:	68f9      	ldr	r1, [r7, #12]
 8016566:	f7fe ff60 	bl	801542a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	f103 021c 	add.w	r2, r3, #28
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	68db      	ldr	r3, [r3, #12]
 8016574:	4619      	mov	r1, r3
 8016576:	4610      	mov	r0, r2
 8016578:	f7fd ffa9 	bl	80144ce <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	3316      	adds	r3, #22
 8016580:	6939      	ldr	r1, [r7, #16]
 8016582:	4618      	mov	r0, r3
 8016584:	f7fd ffa3 	bl	80144ce <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	3312      	adds	r3, #18
 801658c:	2100      	movs	r1, #0
 801658e:	4618      	mov	r0, r3
 8016590:	f7fd ff82 	bl	8014498 <st_word>
					fs->wflag = 1;
 8016594:	68bb      	ldr	r3, [r7, #8]
 8016596:	2201      	movs	r2, #1
 8016598:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801659a:	68bb      	ldr	r3, [r7, #8]
 801659c:	4618      	mov	r0, r3
 801659e:	f7fe fa4f 	bl	8014a40 <sync_fs>
 80165a2:	4603      	mov	r3, r0
 80165a4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	7d1b      	ldrb	r3, [r3, #20]
 80165aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80165ae:	b2da      	uxtb	r2, r3
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	7dfa      	ldrb	r2, [r7, #23]
 80165b8:	4611      	mov	r1, r2
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7fe f847 	bl	801464e <unlock_fs>
 80165c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3718      	adds	r7, #24
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}

080165ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80165ca:	b580      	push	{r7, lr}
 80165cc:	b084      	sub	sp, #16
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80165d2:	6878      	ldr	r0, [r7, #4]
 80165d4:	f7ff ff70 	bl	80164b8 <f_sync>
 80165d8:	4603      	mov	r3, r0
 80165da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80165dc:	7bfb      	ldrb	r3, [r7, #15]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d11d      	bne.n	801661e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f107 0208 	add.w	r2, r7, #8
 80165e8:	4611      	mov	r1, r2
 80165ea:	4618      	mov	r0, r3
 80165ec:	f7ff fbb8 	bl	8015d60 <validate>
 80165f0:	4603      	mov	r3, r0
 80165f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80165f4:	7bfb      	ldrb	r3, [r7, #15]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d111      	bne.n	801661e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	691b      	ldr	r3, [r3, #16]
 80165fe:	4618      	mov	r0, r3
 8016600:	f7fe f94c 	bl	801489c <dec_lock>
 8016604:	4603      	mov	r3, r0
 8016606:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8016608:	7bfb      	ldrb	r3, [r7, #15]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d102      	bne.n	8016614 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	2200      	movs	r2, #0
 8016612:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8016614:	68bb      	ldr	r3, [r7, #8]
 8016616:	2100      	movs	r1, #0
 8016618:	4618      	mov	r0, r3
 801661a:	f7fe f818 	bl	801464e <unlock_fs>
#endif
		}
	}
	return res;
 801661e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016620:	4618      	mov	r0, r3
 8016622:	3710      	adds	r7, #16
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}

08016628 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016628:	b480      	push	{r7}
 801662a:	b087      	sub	sp, #28
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	4613      	mov	r3, r2
 8016634:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016636:	2301      	movs	r3, #1
 8016638:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801663a:	2300      	movs	r3, #0
 801663c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801663e:	4b1f      	ldr	r3, [pc, #124]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 8016640:	7a5b      	ldrb	r3, [r3, #9]
 8016642:	b2db      	uxtb	r3, r3
 8016644:	2b00      	cmp	r3, #0
 8016646:	d131      	bne.n	80166ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016648:	4b1c      	ldr	r3, [pc, #112]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 801664a:	7a5b      	ldrb	r3, [r3, #9]
 801664c:	b2db      	uxtb	r3, r3
 801664e:	461a      	mov	r2, r3
 8016650:	4b1a      	ldr	r3, [pc, #104]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 8016652:	2100      	movs	r1, #0
 8016654:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016656:	4b19      	ldr	r3, [pc, #100]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 8016658:	7a5b      	ldrb	r3, [r3, #9]
 801665a:	b2db      	uxtb	r3, r3
 801665c:	4a17      	ldr	r2, [pc, #92]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 801665e:	009b      	lsls	r3, r3, #2
 8016660:	4413      	add	r3, r2
 8016662:	68fa      	ldr	r2, [r7, #12]
 8016664:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016666:	4b15      	ldr	r3, [pc, #84]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 8016668:	7a5b      	ldrb	r3, [r3, #9]
 801666a:	b2db      	uxtb	r3, r3
 801666c:	461a      	mov	r2, r3
 801666e:	4b13      	ldr	r3, [pc, #76]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 8016670:	4413      	add	r3, r2
 8016672:	79fa      	ldrb	r2, [r7, #7]
 8016674:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016676:	4b11      	ldr	r3, [pc, #68]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 8016678:	7a5b      	ldrb	r3, [r3, #9]
 801667a:	b2db      	uxtb	r3, r3
 801667c:	1c5a      	adds	r2, r3, #1
 801667e:	b2d1      	uxtb	r1, r2
 8016680:	4a0e      	ldr	r2, [pc, #56]	@ (80166bc <FATFS_LinkDriverEx+0x94>)
 8016682:	7251      	strb	r1, [r2, #9]
 8016684:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016686:	7dbb      	ldrb	r3, [r7, #22]
 8016688:	3330      	adds	r3, #48	@ 0x30
 801668a:	b2da      	uxtb	r2, r3
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	3301      	adds	r3, #1
 8016694:	223a      	movs	r2, #58	@ 0x3a
 8016696:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	3302      	adds	r3, #2
 801669c:	222f      	movs	r2, #47	@ 0x2f
 801669e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	3303      	adds	r3, #3
 80166a4:	2200      	movs	r2, #0
 80166a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80166a8:	2300      	movs	r3, #0
 80166aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80166ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	371c      	adds	r7, #28
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr
 80166ba:	bf00      	nop
 80166bc:	200015b4 	.word	0x200015b4

080166c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80166ca:	2200      	movs	r2, #0
 80166cc:	6839      	ldr	r1, [r7, #0]
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f7ff ffaa 	bl	8016628 <FATFS_LinkDriverEx>
 80166d4:	4603      	mov	r3, r0
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3708      	adds	r7, #8
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}

080166de <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80166de:	b580      	push	{r7, lr}
 80166e0:	b084      	sub	sp, #16
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80166e6:	2300      	movs	r3, #0
 80166e8:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80166ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80166ee:	6878      	ldr	r0, [r7, #4]
 80166f0:	f000 f8c2 	bl	8016878 <osSemaphoreWait>
 80166f4:	4603      	mov	r3, r0
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d101      	bne.n	80166fe <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80166fa:	2301      	movs	r3, #1
 80166fc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80166fe:	68fb      	ldr	r3, [r7, #12]
}
 8016700:	4618      	mov	r0, r3
 8016702:	3710      	adds	r7, #16
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}

08016708 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8016710:	6878      	ldr	r0, [r7, #4]
 8016712:	f000 f8ff 	bl	8016914 <osSemaphoreRelease>
#endif
}
 8016716:	bf00      	nop
 8016718:	3708      	adds	r7, #8
 801671a:	46bd      	mov	sp, r7
 801671c:	bd80      	pop	{r7, pc}

0801671e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801671e:	b480      	push	{r7}
 8016720:	b085      	sub	sp, #20
 8016722:	af00      	add	r7, sp, #0
 8016724:	4603      	mov	r3, r0
 8016726:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8016728:	2300      	movs	r3, #0
 801672a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801672c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016730:	2b84      	cmp	r3, #132	@ 0x84
 8016732:	d005      	beq.n	8016740 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8016734:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	4413      	add	r3, r2
 801673c:	3303      	adds	r3, #3
 801673e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8016740:	68fb      	ldr	r3, [r7, #12]
}
 8016742:	4618      	mov	r0, r3
 8016744:	3714      	adds	r7, #20
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr

0801674e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801674e:	b480      	push	{r7}
 8016750:	b083      	sub	sp, #12
 8016752:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016754:	f3ef 8305 	mrs	r3, IPSR
 8016758:	607b      	str	r3, [r7, #4]
  return(result);
 801675a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801675c:	2b00      	cmp	r3, #0
 801675e:	bf14      	ite	ne
 8016760:	2301      	movne	r3, #1
 8016762:	2300      	moveq	r3, #0
 8016764:	b2db      	uxtb	r3, r3
}
 8016766:	4618      	mov	r0, r3
 8016768:	370c      	adds	r7, #12
 801676a:	46bd      	mov	sp, r7
 801676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016770:	4770      	bx	lr

08016772 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8016772:	b580      	push	{r7, lr}
 8016774:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8016776:	f001 fc19 	bl	8017fac <vTaskStartScheduler>
  
  return osOK;
 801677a:	2300      	movs	r3, #0
}
 801677c:	4618      	mov	r0, r3
 801677e:	bd80      	pop	{r7, pc}

08016780 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8016780:	b580      	push	{r7, lr}
 8016782:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8016784:	f002 f87a 	bl	801887c <xTaskGetSchedulerState>
 8016788:	4603      	mov	r3, r0
 801678a:	2b01      	cmp	r3, #1
 801678c:	d101      	bne.n	8016792 <osKernelRunning+0x12>
    return 0;
 801678e:	2300      	movs	r3, #0
 8016790:	e000      	b.n	8016794 <osKernelRunning+0x14>
  else
    return 1;
 8016792:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8016794:	4618      	mov	r0, r3
 8016796:	bd80      	pop	{r7, pc}

08016798 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801679c:	f7ff ffd7 	bl	801674e <inHandlerMode>
 80167a0:	4603      	mov	r3, r0
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d003      	beq.n	80167ae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80167a6:	f001 fd25 	bl	80181f4 <xTaskGetTickCountFromISR>
 80167aa:	4603      	mov	r3, r0
 80167ac:	e002      	b.n	80167b4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80167ae:	f001 fd11 	bl	80181d4 <xTaskGetTickCount>
 80167b2:	4603      	mov	r3, r0
  }
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	bd80      	pop	{r7, pc}

080167b8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80167b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167ba:	b089      	sub	sp, #36	@ 0x24
 80167bc:	af04      	add	r7, sp, #16
 80167be:	6078      	str	r0, [r7, #4]
 80167c0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	695b      	ldr	r3, [r3, #20]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d020      	beq.n	801680c <osThreadCreate+0x54>
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	699b      	ldr	r3, [r3, #24]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d01c      	beq.n	801680c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	685c      	ldr	r4, [r3, #4]
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	691e      	ldr	r6, [r3, #16]
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80167e4:	4618      	mov	r0, r3
 80167e6:	f7ff ff9a 	bl	801671e <makeFreeRtosPriority>
 80167ea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	695b      	ldr	r3, [r3, #20]
 80167f0:	687a      	ldr	r2, [r7, #4]
 80167f2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80167f4:	9202      	str	r2, [sp, #8]
 80167f6:	9301      	str	r3, [sp, #4]
 80167f8:	9100      	str	r1, [sp, #0]
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	4632      	mov	r2, r6
 80167fe:	4629      	mov	r1, r5
 8016800:	4620      	mov	r0, r4
 8016802:	f001 f9f1 	bl	8017be8 <xTaskCreateStatic>
 8016806:	4603      	mov	r3, r0
 8016808:	60fb      	str	r3, [r7, #12]
 801680a:	e01c      	b.n	8016846 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	685c      	ldr	r4, [r3, #4]
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016818:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8016820:	4618      	mov	r0, r3
 8016822:	f7ff ff7c 	bl	801671e <makeFreeRtosPriority>
 8016826:	4602      	mov	r2, r0
 8016828:	f107 030c 	add.w	r3, r7, #12
 801682c:	9301      	str	r3, [sp, #4]
 801682e:	9200      	str	r2, [sp, #0]
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	4632      	mov	r2, r6
 8016834:	4629      	mov	r1, r5
 8016836:	4620      	mov	r0, r4
 8016838:	f001 fa3c 	bl	8017cb4 <xTaskCreate>
 801683c:	4603      	mov	r3, r0
 801683e:	2b01      	cmp	r3, #1
 8016840:	d001      	beq.n	8016846 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8016842:	2300      	movs	r3, #0
 8016844:	e000      	b.n	8016848 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8016846:	68fb      	ldr	r3, [r7, #12]
}
 8016848:	4618      	mov	r0, r3
 801684a:	3714      	adds	r7, #20
 801684c:	46bd      	mov	sp, r7
 801684e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016850 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b084      	sub	sp, #16
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d001      	beq.n	8016866 <osDelay+0x16>
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	e000      	b.n	8016868 <osDelay+0x18>
 8016866:	2301      	movs	r3, #1
 8016868:	4618      	mov	r0, r3
 801686a:	f001 fb67 	bl	8017f3c <vTaskDelay>
  
  return osOK;
 801686e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8016870:	4618      	mov	r0, r3
 8016872:	3710      	adds	r7, #16
 8016874:	46bd      	mov	sp, r7
 8016876:	bd80      	pop	{r7, pc}

08016878 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b084      	sub	sp, #16
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
 8016880:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8016882:	2300      	movs	r3, #0
 8016884:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d101      	bne.n	8016890 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801688c:	2380      	movs	r3, #128	@ 0x80
 801688e:	e03a      	b.n	8016906 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8016890:	2300      	movs	r3, #0
 8016892:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801689a:	d103      	bne.n	80168a4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801689c:	f04f 33ff 	mov.w	r3, #4294967295
 80168a0:	60fb      	str	r3, [r7, #12]
 80168a2:	e009      	b.n	80168b8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80168a4:	683b      	ldr	r3, [r7, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d006      	beq.n	80168b8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80168aa:	683b      	ldr	r3, [r7, #0]
 80168ac:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d101      	bne.n	80168b8 <osSemaphoreWait+0x40>
      ticks = 1;
 80168b4:	2301      	movs	r3, #1
 80168b6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80168b8:	f7ff ff49 	bl	801674e <inHandlerMode>
 80168bc:	4603      	mov	r3, r0
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d017      	beq.n	80168f2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80168c2:	f107 0308 	add.w	r3, r7, #8
 80168c6:	461a      	mov	r2, r3
 80168c8:	2100      	movs	r1, #0
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f000 ff9a 	bl	8017804 <xQueueReceiveFromISR>
 80168d0:	4603      	mov	r3, r0
 80168d2:	2b01      	cmp	r3, #1
 80168d4:	d001      	beq.n	80168da <osSemaphoreWait+0x62>
      return osErrorOS;
 80168d6:	23ff      	movs	r3, #255	@ 0xff
 80168d8:	e015      	b.n	8016906 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d011      	beq.n	8016904 <osSemaphoreWait+0x8c>
 80168e0:	4b0b      	ldr	r3, [pc, #44]	@ (8016910 <osSemaphoreWait+0x98>)
 80168e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168e6:	601a      	str	r2, [r3, #0]
 80168e8:	f3bf 8f4f 	dsb	sy
 80168ec:	f3bf 8f6f 	isb	sy
 80168f0:	e008      	b.n	8016904 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80168f2:	68f9      	ldr	r1, [r7, #12]
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f000 fe6d 	bl	80175d4 <xQueueSemaphoreTake>
 80168fa:	4603      	mov	r3, r0
 80168fc:	2b01      	cmp	r3, #1
 80168fe:	d001      	beq.n	8016904 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8016900:	23ff      	movs	r3, #255	@ 0xff
 8016902:	e000      	b.n	8016906 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8016904:	2300      	movs	r3, #0
}
 8016906:	4618      	mov	r0, r3
 8016908:	3710      	adds	r7, #16
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}
 801690e:	bf00      	nop
 8016910:	e000ed04 	.word	0xe000ed04

08016914 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b084      	sub	sp, #16
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 801691c:	2300      	movs	r3, #0
 801691e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8016920:	2300      	movs	r3, #0
 8016922:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8016924:	f7ff ff13 	bl	801674e <inHandlerMode>
 8016928:	4603      	mov	r3, r0
 801692a:	2b00      	cmp	r3, #0
 801692c:	d016      	beq.n	801695c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801692e:	f107 0308 	add.w	r3, r7, #8
 8016932:	4619      	mov	r1, r3
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	f000 fccc 	bl	80172d2 <xQueueGiveFromISR>
 801693a:	4603      	mov	r3, r0
 801693c:	2b01      	cmp	r3, #1
 801693e:	d001      	beq.n	8016944 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8016940:	23ff      	movs	r3, #255	@ 0xff
 8016942:	e017      	b.n	8016974 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d013      	beq.n	8016972 <osSemaphoreRelease+0x5e>
 801694a:	4b0c      	ldr	r3, [pc, #48]	@ (801697c <osSemaphoreRelease+0x68>)
 801694c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016950:	601a      	str	r2, [r3, #0]
 8016952:	f3bf 8f4f 	dsb	sy
 8016956:	f3bf 8f6f 	isb	sy
 801695a:	e00a      	b.n	8016972 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801695c:	2300      	movs	r3, #0
 801695e:	2200      	movs	r2, #0
 8016960:	2100      	movs	r1, #0
 8016962:	6878      	ldr	r0, [r7, #4]
 8016964:	f000 fb08 	bl	8016f78 <xQueueGenericSend>
 8016968:	4603      	mov	r3, r0
 801696a:	2b01      	cmp	r3, #1
 801696c:	d001      	beq.n	8016972 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801696e:	23ff      	movs	r3, #255	@ 0xff
 8016970:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8016972:	68fb      	ldr	r3, [r7, #12]
}
 8016974:	4618      	mov	r0, r3
 8016976:	3710      	adds	r7, #16
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}
 801697c:	e000ed04 	.word	0xe000ed04

08016980 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8016980:	b590      	push	{r4, r7, lr}
 8016982:	b085      	sub	sp, #20
 8016984:	af02      	add	r7, sp, #8
 8016986:	6078      	str	r0, [r7, #4]
 8016988:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	689b      	ldr	r3, [r3, #8]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d011      	beq.n	80169b6 <osMessageCreate+0x36>
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	68db      	ldr	r3, [r3, #12]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d00d      	beq.n	80169b6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	6818      	ldr	r0, [r3, #0]
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	6859      	ldr	r1, [r3, #4]
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	689a      	ldr	r2, [r3, #8]
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	68db      	ldr	r3, [r3, #12]
 80169aa:	2400      	movs	r4, #0
 80169ac:	9400      	str	r4, [sp, #0]
 80169ae:	f000 f9f9 	bl	8016da4 <xQueueGenericCreateStatic>
 80169b2:	4603      	mov	r3, r0
 80169b4:	e008      	b.n	80169c8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	6818      	ldr	r0, [r3, #0]
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	2200      	movs	r2, #0
 80169c0:	4619      	mov	r1, r3
 80169c2:	f000 fa76 	bl	8016eb2 <xQueueGenericCreate>
 80169c6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80169c8:	4618      	mov	r0, r3
 80169ca:	370c      	adds	r7, #12
 80169cc:	46bd      	mov	sp, r7
 80169ce:	bd90      	pop	{r4, r7, pc}

080169d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b086      	sub	sp, #24
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	60f8      	str	r0, [r7, #12]
 80169d8:	60b9      	str	r1, [r7, #8]
 80169da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80169dc:	2300      	movs	r3, #0
 80169de:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d101      	bne.n	80169ee <osMessagePut+0x1e>
    ticks = 1;
 80169ea:	2301      	movs	r3, #1
 80169ec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80169ee:	f7ff feae 	bl	801674e <inHandlerMode>
 80169f2:	4603      	mov	r3, r0
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d018      	beq.n	8016a2a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80169f8:	f107 0210 	add.w	r2, r7, #16
 80169fc:	f107 0108 	add.w	r1, r7, #8
 8016a00:	2300      	movs	r3, #0
 8016a02:	68f8      	ldr	r0, [r7, #12]
 8016a04:	f000 fbc2 	bl	801718c <xQueueGenericSendFromISR>
 8016a08:	4603      	mov	r3, r0
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d001      	beq.n	8016a12 <osMessagePut+0x42>
      return osErrorOS;
 8016a0e:	23ff      	movs	r3, #255	@ 0xff
 8016a10:	e018      	b.n	8016a44 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d014      	beq.n	8016a42 <osMessagePut+0x72>
 8016a18:	4b0c      	ldr	r3, [pc, #48]	@ (8016a4c <osMessagePut+0x7c>)
 8016a1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a1e:	601a      	str	r2, [r3, #0]
 8016a20:	f3bf 8f4f 	dsb	sy
 8016a24:	f3bf 8f6f 	isb	sy
 8016a28:	e00b      	b.n	8016a42 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8016a2a:	f107 0108 	add.w	r1, r7, #8
 8016a2e:	2300      	movs	r3, #0
 8016a30:	697a      	ldr	r2, [r7, #20]
 8016a32:	68f8      	ldr	r0, [r7, #12]
 8016a34:	f000 faa0 	bl	8016f78 <xQueueGenericSend>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	2b01      	cmp	r3, #1
 8016a3c:	d001      	beq.n	8016a42 <osMessagePut+0x72>
      return osErrorOS;
 8016a3e:	23ff      	movs	r3, #255	@ 0xff
 8016a40:	e000      	b.n	8016a44 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8016a42:	2300      	movs	r3, #0
}
 8016a44:	4618      	mov	r0, r3
 8016a46:	3718      	adds	r7, #24
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}
 8016a4c:	e000ed04 	.word	0xe000ed04

08016a50 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8016a50:	b590      	push	{r4, r7, lr}
 8016a52:	b08b      	sub	sp, #44	@ 0x2c
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	60f8      	str	r0, [r7, #12]
 8016a58:	60b9      	str	r1, [r7, #8]
 8016a5a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8016a5c:	68bb      	ldr	r3, [r7, #8]
 8016a5e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8016a60:	2300      	movs	r3, #0
 8016a62:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d10a      	bne.n	8016a80 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8016a6a:	2380      	movs	r3, #128	@ 0x80
 8016a6c:	617b      	str	r3, [r7, #20]
    return event;
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	461c      	mov	r4, r3
 8016a72:	f107 0314 	add.w	r3, r7, #20
 8016a76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016a7e:	e054      	b.n	8016b2a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8016a80:	2300      	movs	r3, #0
 8016a82:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8016a84:	2300      	movs	r3, #0
 8016a86:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a8e:	d103      	bne.n	8016a98 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8016a90:	f04f 33ff 	mov.w	r3, #4294967295
 8016a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8016a96:	e009      	b.n	8016aac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d006      	beq.n	8016aac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8016aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d101      	bne.n	8016aac <osMessageGet+0x5c>
      ticks = 1;
 8016aa8:	2301      	movs	r3, #1
 8016aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8016aac:	f7ff fe4f 	bl	801674e <inHandlerMode>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d01c      	beq.n	8016af0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8016ab6:	f107 0220 	add.w	r2, r7, #32
 8016aba:	f107 0314 	add.w	r3, r7, #20
 8016abe:	3304      	adds	r3, #4
 8016ac0:	4619      	mov	r1, r3
 8016ac2:	68b8      	ldr	r0, [r7, #8]
 8016ac4:	f000 fe9e 	bl	8017804 <xQueueReceiveFromISR>
 8016ac8:	4603      	mov	r3, r0
 8016aca:	2b01      	cmp	r3, #1
 8016acc:	d102      	bne.n	8016ad4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8016ace:	2310      	movs	r3, #16
 8016ad0:	617b      	str	r3, [r7, #20]
 8016ad2:	e001      	b.n	8016ad8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8016ad4:	2300      	movs	r3, #0
 8016ad6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8016ad8:	6a3b      	ldr	r3, [r7, #32]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d01d      	beq.n	8016b1a <osMessageGet+0xca>
 8016ade:	4b15      	ldr	r3, [pc, #84]	@ (8016b34 <osMessageGet+0xe4>)
 8016ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016ae4:	601a      	str	r2, [r3, #0]
 8016ae6:	f3bf 8f4f 	dsb	sy
 8016aea:	f3bf 8f6f 	isb	sy
 8016aee:	e014      	b.n	8016b1a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8016af0:	f107 0314 	add.w	r3, r7, #20
 8016af4:	3304      	adds	r3, #4
 8016af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016af8:	4619      	mov	r1, r3
 8016afa:	68b8      	ldr	r0, [r7, #8]
 8016afc:	f000 fc82 	bl	8017404 <xQueueReceive>
 8016b00:	4603      	mov	r3, r0
 8016b02:	2b01      	cmp	r3, #1
 8016b04:	d102      	bne.n	8016b0c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8016b06:	2310      	movs	r3, #16
 8016b08:	617b      	str	r3, [r7, #20]
 8016b0a:	e006      	b.n	8016b1a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8016b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d101      	bne.n	8016b16 <osMessageGet+0xc6>
 8016b12:	2300      	movs	r3, #0
 8016b14:	e000      	b.n	8016b18 <osMessageGet+0xc8>
 8016b16:	2340      	movs	r3, #64	@ 0x40
 8016b18:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	461c      	mov	r4, r3
 8016b1e:	f107 0314 	add.w	r3, r7, #20
 8016b22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8016b2a:	68f8      	ldr	r0, [r7, #12]
 8016b2c:	372c      	adds	r7, #44	@ 0x2c
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd90      	pop	{r4, r7, pc}
 8016b32:	bf00      	nop
 8016b34:	e000ed04 	.word	0xe000ed04

08016b38 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b082      	sub	sp, #8
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8016b40:	f7ff fe05 	bl	801674e <inHandlerMode>
 8016b44:	4603      	mov	r3, r0
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d004      	beq.n	8016b54 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8016b4a:	6878      	ldr	r0, [r7, #4]
 8016b4c:	f000 ff03 	bl	8017956 <uxQueueMessagesWaitingFromISR>
 8016b50:	4603      	mov	r3, r0
 8016b52:	e003      	b.n	8016b5c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	f000 fedd 	bl	8017914 <uxQueueMessagesWaiting>
 8016b5a:	4603      	mov	r3, r0
  }
}
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	3708      	adds	r7, #8
 8016b60:	46bd      	mov	sp, r7
 8016b62:	bd80      	pop	{r7, pc}

08016b64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8016b64:	b480      	push	{r7}
 8016b66:	b083      	sub	sp, #12
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f103 0208 	add.w	r2, r3, #8
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	f04f 32ff 	mov.w	r2, #4294967295
 8016b7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	f103 0208 	add.w	r2, r3, #8
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	f103 0208 	add.w	r2, r3, #8
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	2200      	movs	r2, #0
 8016b96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016b98:	bf00      	nop
 8016b9a:	370c      	adds	r7, #12
 8016b9c:	46bd      	mov	sp, r7
 8016b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba2:	4770      	bx	lr

08016ba4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	b083      	sub	sp, #12
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	2200      	movs	r2, #0
 8016bb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016bb2:	bf00      	nop
 8016bb4:	370c      	adds	r7, #12
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbc:	4770      	bx	lr

08016bbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016bbe:	b480      	push	{r7}
 8016bc0:	b085      	sub	sp, #20
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
 8016bc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	685b      	ldr	r3, [r3, #4]
 8016bcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	689a      	ldr	r2, [r3, #8]
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	689b      	ldr	r3, [r3, #8]
 8016be0:	683a      	ldr	r2, [r7, #0]
 8016be2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	683a      	ldr	r2, [r7, #0]
 8016be8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	681b      	ldr	r3, [r3, #0]
 8016bf4:	1c5a      	adds	r2, r3, #1
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	601a      	str	r2, [r3, #0]
}
 8016bfa:	bf00      	nop
 8016bfc:	3714      	adds	r7, #20
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c04:	4770      	bx	lr

08016c06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016c06:	b480      	push	{r7}
 8016c08:	b085      	sub	sp, #20
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	6078      	str	r0, [r7, #4]
 8016c0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016c10:	683b      	ldr	r3, [r7, #0]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8016c16:	68bb      	ldr	r3, [r7, #8]
 8016c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c1c:	d103      	bne.n	8016c26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	691b      	ldr	r3, [r3, #16]
 8016c22:	60fb      	str	r3, [r7, #12]
 8016c24:	e00c      	b.n	8016c40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	3308      	adds	r3, #8
 8016c2a:	60fb      	str	r3, [r7, #12]
 8016c2c:	e002      	b.n	8016c34 <vListInsert+0x2e>
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	60fb      	str	r3, [r7, #12]
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	685b      	ldr	r3, [r3, #4]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	68ba      	ldr	r2, [r7, #8]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d2f6      	bcs.n	8016c2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	685a      	ldr	r2, [r3, #4]
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	685b      	ldr	r3, [r3, #4]
 8016c4c:	683a      	ldr	r2, [r7, #0]
 8016c4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8016c50:	683b      	ldr	r3, [r7, #0]
 8016c52:	68fa      	ldr	r2, [r7, #12]
 8016c54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	683a      	ldr	r2, [r7, #0]
 8016c5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8016c5c:	683b      	ldr	r3, [r7, #0]
 8016c5e:	687a      	ldr	r2, [r7, #4]
 8016c60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	1c5a      	adds	r2, r3, #1
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	601a      	str	r2, [r3, #0]
}
 8016c6c:	bf00      	nop
 8016c6e:	3714      	adds	r7, #20
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr

08016c78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016c78:	b480      	push	{r7}
 8016c7a:	b085      	sub	sp, #20
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	691b      	ldr	r3, [r3, #16]
 8016c84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	685b      	ldr	r3, [r3, #4]
 8016c8a:	687a      	ldr	r2, [r7, #4]
 8016c8c:	6892      	ldr	r2, [r2, #8]
 8016c8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	689b      	ldr	r3, [r3, #8]
 8016c94:	687a      	ldr	r2, [r7, #4]
 8016c96:	6852      	ldr	r2, [r2, #4]
 8016c98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016c9a:	68fb      	ldr	r3, [r7, #12]
 8016c9c:	685b      	ldr	r3, [r3, #4]
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	d103      	bne.n	8016cac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	689a      	ldr	r2, [r3, #8]
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2200      	movs	r2, #0
 8016cb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	1e5a      	subs	r2, r3, #1
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	681b      	ldr	r3, [r3, #0]
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	3714      	adds	r7, #20
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr

08016ccc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b084      	sub	sp, #16
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
 8016cd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d10d      	bne.n	8016cfc <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ce4:	b672      	cpsid	i
 8016ce6:	f383 8811 	msr	BASEPRI, r3
 8016cea:	f3bf 8f6f 	isb	sy
 8016cee:	f3bf 8f4f 	dsb	sy
 8016cf2:	b662      	cpsie	i
 8016cf4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8016cf6:	bf00      	nop
 8016cf8:	bf00      	nop
 8016cfa:	e7fd      	b.n	8016cf8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8016cfc:	f002 f90e 	bl	8018f1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	681a      	ldr	r2, [r3, #0]
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016d08:	68f9      	ldr	r1, [r7, #12]
 8016d0a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016d0c:	fb01 f303 	mul.w	r3, r1, r3
 8016d10:	441a      	add	r2, r3
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681a      	ldr	r2, [r3, #0]
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	681a      	ldr	r2, [r3, #0]
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016d2c:	3b01      	subs	r3, #1
 8016d2e:	68f9      	ldr	r1, [r7, #12]
 8016d30:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8016d32:	fb01 f303 	mul.w	r3, r1, r3
 8016d36:	441a      	add	r2, r3
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	22ff      	movs	r2, #255	@ 0xff
 8016d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	22ff      	movs	r2, #255	@ 0xff
 8016d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8016d4c:	683b      	ldr	r3, [r7, #0]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d114      	bne.n	8016d7c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	691b      	ldr	r3, [r3, #16]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d01a      	beq.n	8016d90 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	3310      	adds	r3, #16
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f001 fbc2 	bl	80184e8 <xTaskRemoveFromEventList>
 8016d64:	4603      	mov	r3, r0
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d012      	beq.n	8016d90 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8016d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8016da0 <xQueueGenericReset+0xd4>)
 8016d6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016d70:	601a      	str	r2, [r3, #0]
 8016d72:	f3bf 8f4f 	dsb	sy
 8016d76:	f3bf 8f6f 	isb	sy
 8016d7a:	e009      	b.n	8016d90 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	3310      	adds	r3, #16
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7ff feef 	bl	8016b64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	3324      	adds	r3, #36	@ 0x24
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7ff feea 	bl	8016b64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016d90:	f002 f8fa 	bl	8018f88 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016d94:	2301      	movs	r3, #1
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	3710      	adds	r7, #16
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}
 8016d9e:	bf00      	nop
 8016da0:	e000ed04 	.word	0xe000ed04

08016da4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b08e      	sub	sp, #56	@ 0x38
 8016da8:	af02      	add	r7, sp, #8
 8016daa:	60f8      	str	r0, [r7, #12]
 8016dac:	60b9      	str	r1, [r7, #8]
 8016dae:	607a      	str	r2, [r7, #4]
 8016db0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d10d      	bne.n	8016dd4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8016db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dbc:	b672      	cpsid	i
 8016dbe:	f383 8811 	msr	BASEPRI, r3
 8016dc2:	f3bf 8f6f 	isb	sy
 8016dc6:	f3bf 8f4f 	dsb	sy
 8016dca:	b662      	cpsie	i
 8016dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016dce:	bf00      	nop
 8016dd0:	bf00      	nop
 8016dd2:	e7fd      	b.n	8016dd0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d10d      	bne.n	8016df6 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8016dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016dde:	b672      	cpsid	i
 8016de0:	f383 8811 	msr	BASEPRI, r3
 8016de4:	f3bf 8f6f 	isb	sy
 8016de8:	f3bf 8f4f 	dsb	sy
 8016dec:	b662      	cpsie	i
 8016dee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016df0:	bf00      	nop
 8016df2:	bf00      	nop
 8016df4:	e7fd      	b.n	8016df2 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d002      	beq.n	8016e02 <xQueueGenericCreateStatic+0x5e>
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d001      	beq.n	8016e06 <xQueueGenericCreateStatic+0x62>
 8016e02:	2301      	movs	r3, #1
 8016e04:	e000      	b.n	8016e08 <xQueueGenericCreateStatic+0x64>
 8016e06:	2300      	movs	r3, #0
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d10d      	bne.n	8016e28 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8016e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e10:	b672      	cpsid	i
 8016e12:	f383 8811 	msr	BASEPRI, r3
 8016e16:	f3bf 8f6f 	isb	sy
 8016e1a:	f3bf 8f4f 	dsb	sy
 8016e1e:	b662      	cpsie	i
 8016e20:	623b      	str	r3, [r7, #32]
}
 8016e22:	bf00      	nop
 8016e24:	bf00      	nop
 8016e26:	e7fd      	b.n	8016e24 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d102      	bne.n	8016e34 <xQueueGenericCreateStatic+0x90>
 8016e2e:	68bb      	ldr	r3, [r7, #8]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d101      	bne.n	8016e38 <xQueueGenericCreateStatic+0x94>
 8016e34:	2301      	movs	r3, #1
 8016e36:	e000      	b.n	8016e3a <xQueueGenericCreateStatic+0x96>
 8016e38:	2300      	movs	r3, #0
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d10d      	bne.n	8016e5a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8016e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e42:	b672      	cpsid	i
 8016e44:	f383 8811 	msr	BASEPRI, r3
 8016e48:	f3bf 8f6f 	isb	sy
 8016e4c:	f3bf 8f4f 	dsb	sy
 8016e50:	b662      	cpsie	i
 8016e52:	61fb      	str	r3, [r7, #28]
}
 8016e54:	bf00      	nop
 8016e56:	bf00      	nop
 8016e58:	e7fd      	b.n	8016e56 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016e5a:	2348      	movs	r3, #72	@ 0x48
 8016e5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016e5e:	697b      	ldr	r3, [r7, #20]
 8016e60:	2b48      	cmp	r3, #72	@ 0x48
 8016e62:	d00d      	beq.n	8016e80 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8016e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e68:	b672      	cpsid	i
 8016e6a:	f383 8811 	msr	BASEPRI, r3
 8016e6e:	f3bf 8f6f 	isb	sy
 8016e72:	f3bf 8f4f 	dsb	sy
 8016e76:	b662      	cpsie	i
 8016e78:	61bb      	str	r3, [r7, #24]
}
 8016e7a:	bf00      	nop
 8016e7c:	bf00      	nop
 8016e7e:	e7fd      	b.n	8016e7c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016e80:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8016e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d00d      	beq.n	8016ea8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e8e:	2201      	movs	r2, #1
 8016e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016e94:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8016e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e9a:	9300      	str	r3, [sp, #0]
 8016e9c:	4613      	mov	r3, r2
 8016e9e:	687a      	ldr	r2, [r7, #4]
 8016ea0:	68b9      	ldr	r1, [r7, #8]
 8016ea2:	68f8      	ldr	r0, [r7, #12]
 8016ea4:	f000 f848 	bl	8016f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	3730      	adds	r7, #48	@ 0x30
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd80      	pop	{r7, pc}

08016eb2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016eb2:	b580      	push	{r7, lr}
 8016eb4:	b08a      	sub	sp, #40	@ 0x28
 8016eb6:	af02      	add	r7, sp, #8
 8016eb8:	60f8      	str	r0, [r7, #12]
 8016eba:	60b9      	str	r1, [r7, #8]
 8016ebc:	4613      	mov	r3, r2
 8016ebe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d10d      	bne.n	8016ee2 <xQueueGenericCreate+0x30>
	__asm volatile
 8016ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016eca:	b672      	cpsid	i
 8016ecc:	f383 8811 	msr	BASEPRI, r3
 8016ed0:	f3bf 8f6f 	isb	sy
 8016ed4:	f3bf 8f4f 	dsb	sy
 8016ed8:	b662      	cpsie	i
 8016eda:	613b      	str	r3, [r7, #16]
}
 8016edc:	bf00      	nop
 8016ede:	bf00      	nop
 8016ee0:	e7fd      	b.n	8016ede <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d102      	bne.n	8016eee <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016ee8:	2300      	movs	r3, #0
 8016eea:	61fb      	str	r3, [r7, #28]
 8016eec:	e004      	b.n	8016ef8 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	68ba      	ldr	r2, [r7, #8]
 8016ef2:	fb02 f303 	mul.w	r3, r2, r3
 8016ef6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016ef8:	69fb      	ldr	r3, [r7, #28]
 8016efa:	3348      	adds	r3, #72	@ 0x48
 8016efc:	4618      	mov	r0, r3
 8016efe:	f002 f93b 	bl	8019178 <pvPortMalloc>
 8016f02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016f04:	69bb      	ldr	r3, [r7, #24]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d011      	beq.n	8016f2e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016f0a:	69bb      	ldr	r3, [r7, #24]
 8016f0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016f0e:	697b      	ldr	r3, [r7, #20]
 8016f10:	3348      	adds	r3, #72	@ 0x48
 8016f12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016f14:	69bb      	ldr	r3, [r7, #24]
 8016f16:	2200      	movs	r2, #0
 8016f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016f1c:	79fa      	ldrb	r2, [r7, #7]
 8016f1e:	69bb      	ldr	r3, [r7, #24]
 8016f20:	9300      	str	r3, [sp, #0]
 8016f22:	4613      	mov	r3, r2
 8016f24:	697a      	ldr	r2, [r7, #20]
 8016f26:	68b9      	ldr	r1, [r7, #8]
 8016f28:	68f8      	ldr	r0, [r7, #12]
 8016f2a:	f000 f805 	bl	8016f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3720      	adds	r7, #32
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}

08016f38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	60f8      	str	r0, [r7, #12]
 8016f40:	60b9      	str	r1, [r7, #8]
 8016f42:	607a      	str	r2, [r7, #4]
 8016f44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016f46:	68bb      	ldr	r3, [r7, #8]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d103      	bne.n	8016f54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016f4c:	69bb      	ldr	r3, [r7, #24]
 8016f4e:	69ba      	ldr	r2, [r7, #24]
 8016f50:	601a      	str	r2, [r3, #0]
 8016f52:	e002      	b.n	8016f5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016f54:	69bb      	ldr	r3, [r7, #24]
 8016f56:	687a      	ldr	r2, [r7, #4]
 8016f58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016f5a:	69bb      	ldr	r3, [r7, #24]
 8016f5c:	68fa      	ldr	r2, [r7, #12]
 8016f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016f60:	69bb      	ldr	r3, [r7, #24]
 8016f62:	68ba      	ldr	r2, [r7, #8]
 8016f64:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016f66:	2101      	movs	r1, #1
 8016f68:	69b8      	ldr	r0, [r7, #24]
 8016f6a:	f7ff feaf 	bl	8016ccc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016f6e:	bf00      	nop
 8016f70:	3710      	adds	r7, #16
 8016f72:	46bd      	mov	sp, r7
 8016f74:	bd80      	pop	{r7, pc}
	...

08016f78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b08e      	sub	sp, #56	@ 0x38
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	60f8      	str	r0, [r7, #12]
 8016f80:	60b9      	str	r1, [r7, #8]
 8016f82:	607a      	str	r2, [r7, #4]
 8016f84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016f86:	2300      	movs	r3, #0
 8016f88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8016f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d10d      	bne.n	8016fb0 <xQueueGenericSend+0x38>
	__asm volatile
 8016f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f98:	b672      	cpsid	i
 8016f9a:	f383 8811 	msr	BASEPRI, r3
 8016f9e:	f3bf 8f6f 	isb	sy
 8016fa2:	f3bf 8f4f 	dsb	sy
 8016fa6:	b662      	cpsie	i
 8016fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8016faa:	bf00      	nop
 8016fac:	bf00      	nop
 8016fae:	e7fd      	b.n	8016fac <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016fb0:	68bb      	ldr	r3, [r7, #8]
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d103      	bne.n	8016fbe <xQueueGenericSend+0x46>
 8016fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d101      	bne.n	8016fc2 <xQueueGenericSend+0x4a>
 8016fbe:	2301      	movs	r3, #1
 8016fc0:	e000      	b.n	8016fc4 <xQueueGenericSend+0x4c>
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d10d      	bne.n	8016fe4 <xQueueGenericSend+0x6c>
	__asm volatile
 8016fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fcc:	b672      	cpsid	i
 8016fce:	f383 8811 	msr	BASEPRI, r3
 8016fd2:	f3bf 8f6f 	isb	sy
 8016fd6:	f3bf 8f4f 	dsb	sy
 8016fda:	b662      	cpsie	i
 8016fdc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8016fde:	bf00      	nop
 8016fe0:	bf00      	nop
 8016fe2:	e7fd      	b.n	8016fe0 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016fe4:	683b      	ldr	r3, [r7, #0]
 8016fe6:	2b02      	cmp	r3, #2
 8016fe8:	d103      	bne.n	8016ff2 <xQueueGenericSend+0x7a>
 8016fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016fee:	2b01      	cmp	r3, #1
 8016ff0:	d101      	bne.n	8016ff6 <xQueueGenericSend+0x7e>
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	e000      	b.n	8016ff8 <xQueueGenericSend+0x80>
 8016ff6:	2300      	movs	r3, #0
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d10d      	bne.n	8017018 <xQueueGenericSend+0xa0>
	__asm volatile
 8016ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017000:	b672      	cpsid	i
 8017002:	f383 8811 	msr	BASEPRI, r3
 8017006:	f3bf 8f6f 	isb	sy
 801700a:	f3bf 8f4f 	dsb	sy
 801700e:	b662      	cpsie	i
 8017010:	623b      	str	r3, [r7, #32]
}
 8017012:	bf00      	nop
 8017014:	bf00      	nop
 8017016:	e7fd      	b.n	8017014 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017018:	f001 fc30 	bl	801887c <xTaskGetSchedulerState>
 801701c:	4603      	mov	r3, r0
 801701e:	2b00      	cmp	r3, #0
 8017020:	d102      	bne.n	8017028 <xQueueGenericSend+0xb0>
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d101      	bne.n	801702c <xQueueGenericSend+0xb4>
 8017028:	2301      	movs	r3, #1
 801702a:	e000      	b.n	801702e <xQueueGenericSend+0xb6>
 801702c:	2300      	movs	r3, #0
 801702e:	2b00      	cmp	r3, #0
 8017030:	d10d      	bne.n	801704e <xQueueGenericSend+0xd6>
	__asm volatile
 8017032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017036:	b672      	cpsid	i
 8017038:	f383 8811 	msr	BASEPRI, r3
 801703c:	f3bf 8f6f 	isb	sy
 8017040:	f3bf 8f4f 	dsb	sy
 8017044:	b662      	cpsie	i
 8017046:	61fb      	str	r3, [r7, #28]
}
 8017048:	bf00      	nop
 801704a:	bf00      	nop
 801704c:	e7fd      	b.n	801704a <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801704e:	f001 ff65 	bl	8018f1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8017052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801705a:	429a      	cmp	r2, r3
 801705c:	d302      	bcc.n	8017064 <xQueueGenericSend+0xec>
 801705e:	683b      	ldr	r3, [r7, #0]
 8017060:	2b02      	cmp	r3, #2
 8017062:	d129      	bne.n	80170b8 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017064:	683a      	ldr	r2, [r7, #0]
 8017066:	68b9      	ldr	r1, [r7, #8]
 8017068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801706a:	f000 fcad 	bl	80179c8 <prvCopyDataToQueue>
 801706e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017074:	2b00      	cmp	r3, #0
 8017076:	d010      	beq.n	801709a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801707a:	3324      	adds	r3, #36	@ 0x24
 801707c:	4618      	mov	r0, r3
 801707e:	f001 fa33 	bl	80184e8 <xTaskRemoveFromEventList>
 8017082:	4603      	mov	r3, r0
 8017084:	2b00      	cmp	r3, #0
 8017086:	d013      	beq.n	80170b0 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8017088:	4b3f      	ldr	r3, [pc, #252]	@ (8017188 <xQueueGenericSend+0x210>)
 801708a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801708e:	601a      	str	r2, [r3, #0]
 8017090:	f3bf 8f4f 	dsb	sy
 8017094:	f3bf 8f6f 	isb	sy
 8017098:	e00a      	b.n	80170b0 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801709c:	2b00      	cmp	r3, #0
 801709e:	d007      	beq.n	80170b0 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80170a0:	4b39      	ldr	r3, [pc, #228]	@ (8017188 <xQueueGenericSend+0x210>)
 80170a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80170a6:	601a      	str	r2, [r3, #0]
 80170a8:	f3bf 8f4f 	dsb	sy
 80170ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80170b0:	f001 ff6a 	bl	8018f88 <vPortExitCritical>
				return pdPASS;
 80170b4:	2301      	movs	r3, #1
 80170b6:	e063      	b.n	8017180 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d103      	bne.n	80170c6 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80170be:	f001 ff63 	bl	8018f88 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80170c2:	2300      	movs	r3, #0
 80170c4:	e05c      	b.n	8017180 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80170c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d106      	bne.n	80170da <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80170cc:	f107 0314 	add.w	r3, r7, #20
 80170d0:	4618      	mov	r0, r3
 80170d2:	f001 fa6f 	bl	80185b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80170d6:	2301      	movs	r3, #1
 80170d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80170da:	f001 ff55 	bl	8018f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80170de:	f000 ffcb 	bl	8018078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80170e2:	f001 ff1b 	bl	8018f1c <vPortEnterCritical>
 80170e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80170ec:	b25b      	sxtb	r3, r3
 80170ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80170f2:	d103      	bne.n	80170fc <xQueueGenericSend+0x184>
 80170f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170f6:	2200      	movs	r2, #0
 80170f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80170fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017102:	b25b      	sxtb	r3, r3
 8017104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017108:	d103      	bne.n	8017112 <xQueueGenericSend+0x19a>
 801710a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801710c:	2200      	movs	r2, #0
 801710e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8017112:	f001 ff39 	bl	8018f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017116:	1d3a      	adds	r2, r7, #4
 8017118:	f107 0314 	add.w	r3, r7, #20
 801711c:	4611      	mov	r1, r2
 801711e:	4618      	mov	r0, r3
 8017120:	f001 fa5e 	bl	80185e0 <xTaskCheckForTimeOut>
 8017124:	4603      	mov	r3, r0
 8017126:	2b00      	cmp	r3, #0
 8017128:	d124      	bne.n	8017174 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801712a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801712c:	f000 fd44 	bl	8017bb8 <prvIsQueueFull>
 8017130:	4603      	mov	r3, r0
 8017132:	2b00      	cmp	r3, #0
 8017134:	d018      	beq.n	8017168 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8017136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017138:	3310      	adds	r3, #16
 801713a:	687a      	ldr	r2, [r7, #4]
 801713c:	4611      	mov	r1, r2
 801713e:	4618      	mov	r0, r3
 8017140:	f001 f9aa 	bl	8018498 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8017144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017146:	f000 fccf 	bl	8017ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801714a:	f000 ffa3 	bl	8018094 <xTaskResumeAll>
 801714e:	4603      	mov	r3, r0
 8017150:	2b00      	cmp	r3, #0
 8017152:	f47f af7c 	bne.w	801704e <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8017156:	4b0c      	ldr	r3, [pc, #48]	@ (8017188 <xQueueGenericSend+0x210>)
 8017158:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801715c:	601a      	str	r2, [r3, #0]
 801715e:	f3bf 8f4f 	dsb	sy
 8017162:	f3bf 8f6f 	isb	sy
 8017166:	e772      	b.n	801704e <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801716a:	f000 fcbd 	bl	8017ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801716e:	f000 ff91 	bl	8018094 <xTaskResumeAll>
 8017172:	e76c      	b.n	801704e <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017174:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017176:	f000 fcb7 	bl	8017ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801717a:	f000 ff8b 	bl	8018094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801717e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017180:	4618      	mov	r0, r3
 8017182:	3738      	adds	r7, #56	@ 0x38
 8017184:	46bd      	mov	sp, r7
 8017186:	bd80      	pop	{r7, pc}
 8017188:	e000ed04 	.word	0xe000ed04

0801718c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801718c:	b580      	push	{r7, lr}
 801718e:	b08e      	sub	sp, #56	@ 0x38
 8017190:	af00      	add	r7, sp, #0
 8017192:	60f8      	str	r0, [r7, #12]
 8017194:	60b9      	str	r1, [r7, #8]
 8017196:	607a      	str	r2, [r7, #4]
 8017198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801719e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d10d      	bne.n	80171c0 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80171a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171a8:	b672      	cpsid	i
 80171aa:	f383 8811 	msr	BASEPRI, r3
 80171ae:	f3bf 8f6f 	isb	sy
 80171b2:	f3bf 8f4f 	dsb	sy
 80171b6:	b662      	cpsie	i
 80171b8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80171ba:	bf00      	nop
 80171bc:	bf00      	nop
 80171be:	e7fd      	b.n	80171bc <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d103      	bne.n	80171ce <xQueueGenericSendFromISR+0x42>
 80171c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d101      	bne.n	80171d2 <xQueueGenericSendFromISR+0x46>
 80171ce:	2301      	movs	r3, #1
 80171d0:	e000      	b.n	80171d4 <xQueueGenericSendFromISR+0x48>
 80171d2:	2300      	movs	r3, #0
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d10d      	bne.n	80171f4 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80171d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80171dc:	b672      	cpsid	i
 80171de:	f383 8811 	msr	BASEPRI, r3
 80171e2:	f3bf 8f6f 	isb	sy
 80171e6:	f3bf 8f4f 	dsb	sy
 80171ea:	b662      	cpsie	i
 80171ec:	623b      	str	r3, [r7, #32]
}
 80171ee:	bf00      	nop
 80171f0:	bf00      	nop
 80171f2:	e7fd      	b.n	80171f0 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80171f4:	683b      	ldr	r3, [r7, #0]
 80171f6:	2b02      	cmp	r3, #2
 80171f8:	d103      	bne.n	8017202 <xQueueGenericSendFromISR+0x76>
 80171fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80171fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80171fe:	2b01      	cmp	r3, #1
 8017200:	d101      	bne.n	8017206 <xQueueGenericSendFromISR+0x7a>
 8017202:	2301      	movs	r3, #1
 8017204:	e000      	b.n	8017208 <xQueueGenericSendFromISR+0x7c>
 8017206:	2300      	movs	r3, #0
 8017208:	2b00      	cmp	r3, #0
 801720a:	d10d      	bne.n	8017228 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 801720c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017210:	b672      	cpsid	i
 8017212:	f383 8811 	msr	BASEPRI, r3
 8017216:	f3bf 8f6f 	isb	sy
 801721a:	f3bf 8f4f 	dsb	sy
 801721e:	b662      	cpsie	i
 8017220:	61fb      	str	r3, [r7, #28]
}
 8017222:	bf00      	nop
 8017224:	bf00      	nop
 8017226:	e7fd      	b.n	8017224 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8017228:	f001 ff60 	bl	80190ec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801722c:	f3ef 8211 	mrs	r2, BASEPRI
 8017230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017234:	b672      	cpsid	i
 8017236:	f383 8811 	msr	BASEPRI, r3
 801723a:	f3bf 8f6f 	isb	sy
 801723e:	f3bf 8f4f 	dsb	sy
 8017242:	b662      	cpsie	i
 8017244:	61ba      	str	r2, [r7, #24]
 8017246:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8017248:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801724a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801724c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801724e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017254:	429a      	cmp	r2, r3
 8017256:	d302      	bcc.n	801725e <xQueueGenericSendFromISR+0xd2>
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	2b02      	cmp	r3, #2
 801725c:	d12c      	bne.n	80172b8 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8017268:	683a      	ldr	r2, [r7, #0]
 801726a:	68b9      	ldr	r1, [r7, #8]
 801726c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801726e:	f000 fbab 	bl	80179c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017272:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8017276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801727a:	d112      	bne.n	80172a2 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801727c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801727e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017280:	2b00      	cmp	r3, #0
 8017282:	d016      	beq.n	80172b2 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017286:	3324      	adds	r3, #36	@ 0x24
 8017288:	4618      	mov	r0, r3
 801728a:	f001 f92d 	bl	80184e8 <xTaskRemoveFromEventList>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	d00e      	beq.n	80172b2 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d00b      	beq.n	80172b2 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	2201      	movs	r2, #1
 801729e:	601a      	str	r2, [r3, #0]
 80172a0:	e007      	b.n	80172b2 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80172a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80172a6:	3301      	adds	r3, #1
 80172a8:	b2db      	uxtb	r3, r3
 80172aa:	b25a      	sxtb	r2, r3
 80172ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80172b2:	2301      	movs	r3, #1
 80172b4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80172b6:	e001      	b.n	80172bc <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80172b8:	2300      	movs	r3, #0
 80172ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80172bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172be:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80172c0:	693b      	ldr	r3, [r7, #16]
 80172c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80172c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80172c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3738      	adds	r7, #56	@ 0x38
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}

080172d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80172d2:	b580      	push	{r7, lr}
 80172d4:	b08e      	sub	sp, #56	@ 0x38
 80172d6:	af00      	add	r7, sp, #0
 80172d8:	6078      	str	r0, [r7, #4]
 80172da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80172e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d10d      	bne.n	8017302 <xQueueGiveFromISR+0x30>
	__asm volatile
 80172e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172ea:	b672      	cpsid	i
 80172ec:	f383 8811 	msr	BASEPRI, r3
 80172f0:	f3bf 8f6f 	isb	sy
 80172f4:	f3bf 8f4f 	dsb	sy
 80172f8:	b662      	cpsie	i
 80172fa:	623b      	str	r3, [r7, #32]
}
 80172fc:	bf00      	nop
 80172fe:	bf00      	nop
 8017300:	e7fd      	b.n	80172fe <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017306:	2b00      	cmp	r3, #0
 8017308:	d00d      	beq.n	8017326 <xQueueGiveFromISR+0x54>
	__asm volatile
 801730a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801730e:	b672      	cpsid	i
 8017310:	f383 8811 	msr	BASEPRI, r3
 8017314:	f3bf 8f6f 	isb	sy
 8017318:	f3bf 8f4f 	dsb	sy
 801731c:	b662      	cpsie	i
 801731e:	61fb      	str	r3, [r7, #28]
}
 8017320:	bf00      	nop
 8017322:	bf00      	nop
 8017324:	e7fd      	b.n	8017322 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d103      	bne.n	8017336 <xQueueGiveFromISR+0x64>
 801732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017330:	689b      	ldr	r3, [r3, #8]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d101      	bne.n	801733a <xQueueGiveFromISR+0x68>
 8017336:	2301      	movs	r3, #1
 8017338:	e000      	b.n	801733c <xQueueGiveFromISR+0x6a>
 801733a:	2300      	movs	r3, #0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d10d      	bne.n	801735c <xQueueGiveFromISR+0x8a>
	__asm volatile
 8017340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017344:	b672      	cpsid	i
 8017346:	f383 8811 	msr	BASEPRI, r3
 801734a:	f3bf 8f6f 	isb	sy
 801734e:	f3bf 8f4f 	dsb	sy
 8017352:	b662      	cpsie	i
 8017354:	61bb      	str	r3, [r7, #24]
}
 8017356:	bf00      	nop
 8017358:	bf00      	nop
 801735a:	e7fd      	b.n	8017358 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801735c:	f001 fec6 	bl	80190ec <vPortValidateInterruptPriority>
	__asm volatile
 8017360:	f3ef 8211 	mrs	r2, BASEPRI
 8017364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017368:	b672      	cpsid	i
 801736a:	f383 8811 	msr	BASEPRI, r3
 801736e:	f3bf 8f6f 	isb	sy
 8017372:	f3bf 8f4f 	dsb	sy
 8017376:	b662      	cpsie	i
 8017378:	617a      	str	r2, [r7, #20]
 801737a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801737c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801737e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017384:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801738a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801738c:	429a      	cmp	r2, r3
 801738e:	d22b      	bcs.n	80173e8 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017392:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801739a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801739c:	1c5a      	adds	r2, r3, #1
 801739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173a0:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80173a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80173a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173aa:	d112      	bne.n	80173d2 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80173ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d016      	beq.n	80173e2 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80173b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173b6:	3324      	adds	r3, #36	@ 0x24
 80173b8:	4618      	mov	r0, r3
 80173ba:	f001 f895 	bl	80184e8 <xTaskRemoveFromEventList>
 80173be:	4603      	mov	r3, r0
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d00e      	beq.n	80173e2 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80173c4:	683b      	ldr	r3, [r7, #0]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d00b      	beq.n	80173e2 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80173ca:	683b      	ldr	r3, [r7, #0]
 80173cc:	2201      	movs	r2, #1
 80173ce:	601a      	str	r2, [r3, #0]
 80173d0:	e007      	b.n	80173e2 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80173d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80173d6:	3301      	adds	r3, #1
 80173d8:	b2db      	uxtb	r3, r3
 80173da:	b25a      	sxtb	r2, r3
 80173dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80173e2:	2301      	movs	r3, #1
 80173e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80173e6:	e001      	b.n	80173ec <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80173e8:	2300      	movs	r3, #0
 80173ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80173ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173ee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	f383 8811 	msr	BASEPRI, r3
}
 80173f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80173f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	3738      	adds	r7, #56	@ 0x38
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
	...

08017404 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b08c      	sub	sp, #48	@ 0x30
 8017408:	af00      	add	r7, sp, #0
 801740a:	60f8      	str	r0, [r7, #12]
 801740c:	60b9      	str	r1, [r7, #8]
 801740e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017410:	2300      	movs	r3, #0
 8017412:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801741a:	2b00      	cmp	r3, #0
 801741c:	d10d      	bne.n	801743a <xQueueReceive+0x36>
	__asm volatile
 801741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017422:	b672      	cpsid	i
 8017424:	f383 8811 	msr	BASEPRI, r3
 8017428:	f3bf 8f6f 	isb	sy
 801742c:	f3bf 8f4f 	dsb	sy
 8017430:	b662      	cpsie	i
 8017432:	623b      	str	r3, [r7, #32]
}
 8017434:	bf00      	nop
 8017436:	bf00      	nop
 8017438:	e7fd      	b.n	8017436 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	2b00      	cmp	r3, #0
 801743e:	d103      	bne.n	8017448 <xQueueReceive+0x44>
 8017440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017444:	2b00      	cmp	r3, #0
 8017446:	d101      	bne.n	801744c <xQueueReceive+0x48>
 8017448:	2301      	movs	r3, #1
 801744a:	e000      	b.n	801744e <xQueueReceive+0x4a>
 801744c:	2300      	movs	r3, #0
 801744e:	2b00      	cmp	r3, #0
 8017450:	d10d      	bne.n	801746e <xQueueReceive+0x6a>
	__asm volatile
 8017452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017456:	b672      	cpsid	i
 8017458:	f383 8811 	msr	BASEPRI, r3
 801745c:	f3bf 8f6f 	isb	sy
 8017460:	f3bf 8f4f 	dsb	sy
 8017464:	b662      	cpsie	i
 8017466:	61fb      	str	r3, [r7, #28]
}
 8017468:	bf00      	nop
 801746a:	bf00      	nop
 801746c:	e7fd      	b.n	801746a <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801746e:	f001 fa05 	bl	801887c <xTaskGetSchedulerState>
 8017472:	4603      	mov	r3, r0
 8017474:	2b00      	cmp	r3, #0
 8017476:	d102      	bne.n	801747e <xQueueReceive+0x7a>
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d101      	bne.n	8017482 <xQueueReceive+0x7e>
 801747e:	2301      	movs	r3, #1
 8017480:	e000      	b.n	8017484 <xQueueReceive+0x80>
 8017482:	2300      	movs	r3, #0
 8017484:	2b00      	cmp	r3, #0
 8017486:	d10d      	bne.n	80174a4 <xQueueReceive+0xa0>
	__asm volatile
 8017488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801748c:	b672      	cpsid	i
 801748e:	f383 8811 	msr	BASEPRI, r3
 8017492:	f3bf 8f6f 	isb	sy
 8017496:	f3bf 8f4f 	dsb	sy
 801749a:	b662      	cpsie	i
 801749c:	61bb      	str	r3, [r7, #24]
}
 801749e:	bf00      	nop
 80174a0:	bf00      	nop
 80174a2:	e7fd      	b.n	80174a0 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80174a4:	f001 fd3a 	bl	8018f1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80174a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80174ac:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80174ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d01f      	beq.n	80174f4 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80174b4:	68b9      	ldr	r1, [r7, #8]
 80174b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80174b8:	f000 faf0 	bl	8017a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80174bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174be:	1e5a      	subs	r2, r3, #1
 80174c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174c2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80174c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174c6:	691b      	ldr	r3, [r3, #16]
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d00f      	beq.n	80174ec <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80174cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174ce:	3310      	adds	r3, #16
 80174d0:	4618      	mov	r0, r3
 80174d2:	f001 f809 	bl	80184e8 <xTaskRemoveFromEventList>
 80174d6:	4603      	mov	r3, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d007      	beq.n	80174ec <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80174dc:	4b3c      	ldr	r3, [pc, #240]	@ (80175d0 <xQueueReceive+0x1cc>)
 80174de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80174e2:	601a      	str	r2, [r3, #0]
 80174e4:	f3bf 8f4f 	dsb	sy
 80174e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80174ec:	f001 fd4c 	bl	8018f88 <vPortExitCritical>
				return pdPASS;
 80174f0:	2301      	movs	r3, #1
 80174f2:	e069      	b.n	80175c8 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d103      	bne.n	8017502 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80174fa:	f001 fd45 	bl	8018f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80174fe:	2300      	movs	r3, #0
 8017500:	e062      	b.n	80175c8 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017504:	2b00      	cmp	r3, #0
 8017506:	d106      	bne.n	8017516 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017508:	f107 0310 	add.w	r3, r7, #16
 801750c:	4618      	mov	r0, r3
 801750e:	f001 f851 	bl	80185b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017512:	2301      	movs	r3, #1
 8017514:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017516:	f001 fd37 	bl	8018f88 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801751a:	f000 fdad 	bl	8018078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801751e:	f001 fcfd 	bl	8018f1c <vPortEnterCritical>
 8017522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017524:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017528:	b25b      	sxtb	r3, r3
 801752a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801752e:	d103      	bne.n	8017538 <xQueueReceive+0x134>
 8017530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017532:	2200      	movs	r2, #0
 8017534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801753a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801753e:	b25b      	sxtb	r3, r3
 8017540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017544:	d103      	bne.n	801754e <xQueueReceive+0x14a>
 8017546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017548:	2200      	movs	r2, #0
 801754a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801754e:	f001 fd1b 	bl	8018f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017552:	1d3a      	adds	r2, r7, #4
 8017554:	f107 0310 	add.w	r3, r7, #16
 8017558:	4611      	mov	r1, r2
 801755a:	4618      	mov	r0, r3
 801755c:	f001 f840 	bl	80185e0 <xTaskCheckForTimeOut>
 8017560:	4603      	mov	r3, r0
 8017562:	2b00      	cmp	r3, #0
 8017564:	d123      	bne.n	80175ae <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017568:	f000 fb10 	bl	8017b8c <prvIsQueueEmpty>
 801756c:	4603      	mov	r3, r0
 801756e:	2b00      	cmp	r3, #0
 8017570:	d017      	beq.n	80175a2 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8017572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017574:	3324      	adds	r3, #36	@ 0x24
 8017576:	687a      	ldr	r2, [r7, #4]
 8017578:	4611      	mov	r1, r2
 801757a:	4618      	mov	r0, r3
 801757c:	f000 ff8c 	bl	8018498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017582:	f000 fab1 	bl	8017ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017586:	f000 fd85 	bl	8018094 <xTaskResumeAll>
 801758a:	4603      	mov	r3, r0
 801758c:	2b00      	cmp	r3, #0
 801758e:	d189      	bne.n	80174a4 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8017590:	4b0f      	ldr	r3, [pc, #60]	@ (80175d0 <xQueueReceive+0x1cc>)
 8017592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017596:	601a      	str	r2, [r3, #0]
 8017598:	f3bf 8f4f 	dsb	sy
 801759c:	f3bf 8f6f 	isb	sy
 80175a0:	e780      	b.n	80174a4 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80175a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175a4:	f000 faa0 	bl	8017ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80175a8:	f000 fd74 	bl	8018094 <xTaskResumeAll>
 80175ac:	e77a      	b.n	80174a4 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80175ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175b0:	f000 fa9a 	bl	8017ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80175b4:	f000 fd6e 	bl	8018094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80175b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175ba:	f000 fae7 	bl	8017b8c <prvIsQueueEmpty>
 80175be:	4603      	mov	r3, r0
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	f43f af6f 	beq.w	80174a4 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80175c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3730      	adds	r7, #48	@ 0x30
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}
 80175d0:	e000ed04 	.word	0xe000ed04

080175d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b08e      	sub	sp, #56	@ 0x38
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80175de:	2300      	movs	r3, #0
 80175e0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80175e6:	2300      	movs	r3, #0
 80175e8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80175ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	d10d      	bne.n	801760c <xQueueSemaphoreTake+0x38>
	__asm volatile
 80175f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175f4:	b672      	cpsid	i
 80175f6:	f383 8811 	msr	BASEPRI, r3
 80175fa:	f3bf 8f6f 	isb	sy
 80175fe:	f3bf 8f4f 	dsb	sy
 8017602:	b662      	cpsie	i
 8017604:	623b      	str	r3, [r7, #32]
}
 8017606:	bf00      	nop
 8017608:	bf00      	nop
 801760a:	e7fd      	b.n	8017608 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801760e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017610:	2b00      	cmp	r3, #0
 8017612:	d00d      	beq.n	8017630 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8017614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017618:	b672      	cpsid	i
 801761a:	f383 8811 	msr	BASEPRI, r3
 801761e:	f3bf 8f6f 	isb	sy
 8017622:	f3bf 8f4f 	dsb	sy
 8017626:	b662      	cpsie	i
 8017628:	61fb      	str	r3, [r7, #28]
}
 801762a:	bf00      	nop
 801762c:	bf00      	nop
 801762e:	e7fd      	b.n	801762c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017630:	f001 f924 	bl	801887c <xTaskGetSchedulerState>
 8017634:	4603      	mov	r3, r0
 8017636:	2b00      	cmp	r3, #0
 8017638:	d102      	bne.n	8017640 <xQueueSemaphoreTake+0x6c>
 801763a:	683b      	ldr	r3, [r7, #0]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d101      	bne.n	8017644 <xQueueSemaphoreTake+0x70>
 8017640:	2301      	movs	r3, #1
 8017642:	e000      	b.n	8017646 <xQueueSemaphoreTake+0x72>
 8017644:	2300      	movs	r3, #0
 8017646:	2b00      	cmp	r3, #0
 8017648:	d10d      	bne.n	8017666 <xQueueSemaphoreTake+0x92>
	__asm volatile
 801764a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801764e:	b672      	cpsid	i
 8017650:	f383 8811 	msr	BASEPRI, r3
 8017654:	f3bf 8f6f 	isb	sy
 8017658:	f3bf 8f4f 	dsb	sy
 801765c:	b662      	cpsie	i
 801765e:	61bb      	str	r3, [r7, #24]
}
 8017660:	bf00      	nop
 8017662:	bf00      	nop
 8017664:	e7fd      	b.n	8017662 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017666:	f001 fc59 	bl	8018f1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801766a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801766c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801766e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8017670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017672:	2b00      	cmp	r3, #0
 8017674:	d024      	beq.n	80176c0 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8017676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017678:	1e5a      	subs	r2, r3, #1
 801767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801767c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801767e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d104      	bne.n	8017690 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017686:	f001 fac3 	bl	8018c10 <pvTaskIncrementMutexHeldCount>
 801768a:	4602      	mov	r2, r0
 801768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801768e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017692:	691b      	ldr	r3, [r3, #16]
 8017694:	2b00      	cmp	r3, #0
 8017696:	d00f      	beq.n	80176b8 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801769a:	3310      	adds	r3, #16
 801769c:	4618      	mov	r0, r3
 801769e:	f000 ff23 	bl	80184e8 <xTaskRemoveFromEventList>
 80176a2:	4603      	mov	r3, r0
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d007      	beq.n	80176b8 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80176a8:	4b55      	ldr	r3, [pc, #340]	@ (8017800 <xQueueSemaphoreTake+0x22c>)
 80176aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80176ae:	601a      	str	r2, [r3, #0]
 80176b0:	f3bf 8f4f 	dsb	sy
 80176b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80176b8:	f001 fc66 	bl	8018f88 <vPortExitCritical>
				return pdPASS;
 80176bc:	2301      	movs	r3, #1
 80176be:	e09a      	b.n	80177f6 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80176c0:	683b      	ldr	r3, [r7, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d114      	bne.n	80176f0 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80176c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d00d      	beq.n	80176e8 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80176cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176d0:	b672      	cpsid	i
 80176d2:	f383 8811 	msr	BASEPRI, r3
 80176d6:	f3bf 8f6f 	isb	sy
 80176da:	f3bf 8f4f 	dsb	sy
 80176de:	b662      	cpsie	i
 80176e0:	617b      	str	r3, [r7, #20]
}
 80176e2:	bf00      	nop
 80176e4:	bf00      	nop
 80176e6:	e7fd      	b.n	80176e4 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80176e8:	f001 fc4e 	bl	8018f88 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80176ec:	2300      	movs	r3, #0
 80176ee:	e082      	b.n	80177f6 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80176f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d106      	bne.n	8017704 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80176f6:	f107 030c 	add.w	r3, r7, #12
 80176fa:	4618      	mov	r0, r3
 80176fc:	f000 ff5a 	bl	80185b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017700:	2301      	movs	r3, #1
 8017702:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017704:	f001 fc40 	bl	8018f88 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017708:	f000 fcb6 	bl	8018078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801770c:	f001 fc06 	bl	8018f1c <vPortEnterCritical>
 8017710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017712:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017716:	b25b      	sxtb	r3, r3
 8017718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801771c:	d103      	bne.n	8017726 <xQueueSemaphoreTake+0x152>
 801771e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017720:	2200      	movs	r2, #0
 8017722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8017726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017728:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801772c:	b25b      	sxtb	r3, r3
 801772e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017732:	d103      	bne.n	801773c <xQueueSemaphoreTake+0x168>
 8017734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017736:	2200      	movs	r2, #0
 8017738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801773c:	f001 fc24 	bl	8018f88 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017740:	463a      	mov	r2, r7
 8017742:	f107 030c 	add.w	r3, r7, #12
 8017746:	4611      	mov	r1, r2
 8017748:	4618      	mov	r0, r3
 801774a:	f000 ff49 	bl	80185e0 <xTaskCheckForTimeOut>
 801774e:	4603      	mov	r3, r0
 8017750:	2b00      	cmp	r3, #0
 8017752:	d132      	bne.n	80177ba <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017754:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017756:	f000 fa19 	bl	8017b8c <prvIsQueueEmpty>
 801775a:	4603      	mov	r3, r0
 801775c:	2b00      	cmp	r3, #0
 801775e:	d026      	beq.n	80177ae <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d109      	bne.n	801777c <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8017768:	f001 fbd8 	bl	8018f1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801776c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801776e:	689b      	ldr	r3, [r3, #8]
 8017770:	4618      	mov	r0, r3
 8017772:	f001 f8a1 	bl	80188b8 <xTaskPriorityInherit>
 8017776:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8017778:	f001 fc06 	bl	8018f88 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801777c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801777e:	3324      	adds	r3, #36	@ 0x24
 8017780:	683a      	ldr	r2, [r7, #0]
 8017782:	4611      	mov	r1, r2
 8017784:	4618      	mov	r0, r3
 8017786:	f000 fe87 	bl	8018498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801778a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801778c:	f000 f9ac 	bl	8017ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017790:	f000 fc80 	bl	8018094 <xTaskResumeAll>
 8017794:	4603      	mov	r3, r0
 8017796:	2b00      	cmp	r3, #0
 8017798:	f47f af65 	bne.w	8017666 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 801779c:	4b18      	ldr	r3, [pc, #96]	@ (8017800 <xQueueSemaphoreTake+0x22c>)
 801779e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80177a2:	601a      	str	r2, [r3, #0]
 80177a4:	f3bf 8f4f 	dsb	sy
 80177a8:	f3bf 8f6f 	isb	sy
 80177ac:	e75b      	b.n	8017666 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80177ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177b0:	f000 f99a 	bl	8017ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80177b4:	f000 fc6e 	bl	8018094 <xTaskResumeAll>
 80177b8:	e755      	b.n	8017666 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80177ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177bc:	f000 f994 	bl	8017ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80177c0:	f000 fc68 	bl	8018094 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80177c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177c6:	f000 f9e1 	bl	8017b8c <prvIsQueueEmpty>
 80177ca:	4603      	mov	r3, r0
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	f43f af4a 	beq.w	8017666 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80177d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d00d      	beq.n	80177f4 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80177d8:	f001 fba0 	bl	8018f1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80177dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177de:	f000 f8db 	bl	8017998 <prvGetDisinheritPriorityAfterTimeout>
 80177e2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80177e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80177e6:	689b      	ldr	r3, [r3, #8]
 80177e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80177ea:	4618      	mov	r0, r3
 80177ec:	f001 f970 	bl	8018ad0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80177f0:	f001 fbca 	bl	8018f88 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80177f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3738      	adds	r7, #56	@ 0x38
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}
 80177fe:	bf00      	nop
 8017800:	e000ed04 	.word	0xe000ed04

08017804 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b08e      	sub	sp, #56	@ 0x38
 8017808:	af00      	add	r7, sp, #0
 801780a:	60f8      	str	r0, [r7, #12]
 801780c:	60b9      	str	r1, [r7, #8]
 801780e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8017814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017816:	2b00      	cmp	r3, #0
 8017818:	d10d      	bne.n	8017836 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801781e:	b672      	cpsid	i
 8017820:	f383 8811 	msr	BASEPRI, r3
 8017824:	f3bf 8f6f 	isb	sy
 8017828:	f3bf 8f4f 	dsb	sy
 801782c:	b662      	cpsie	i
 801782e:	623b      	str	r3, [r7, #32]
}
 8017830:	bf00      	nop
 8017832:	bf00      	nop
 8017834:	e7fd      	b.n	8017832 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017836:	68bb      	ldr	r3, [r7, #8]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d103      	bne.n	8017844 <xQueueReceiveFromISR+0x40>
 801783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801783e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017840:	2b00      	cmp	r3, #0
 8017842:	d101      	bne.n	8017848 <xQueueReceiveFromISR+0x44>
 8017844:	2301      	movs	r3, #1
 8017846:	e000      	b.n	801784a <xQueueReceiveFromISR+0x46>
 8017848:	2300      	movs	r3, #0
 801784a:	2b00      	cmp	r3, #0
 801784c:	d10d      	bne.n	801786a <xQueueReceiveFromISR+0x66>
	__asm volatile
 801784e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017852:	b672      	cpsid	i
 8017854:	f383 8811 	msr	BASEPRI, r3
 8017858:	f3bf 8f6f 	isb	sy
 801785c:	f3bf 8f4f 	dsb	sy
 8017860:	b662      	cpsie	i
 8017862:	61fb      	str	r3, [r7, #28]
}
 8017864:	bf00      	nop
 8017866:	bf00      	nop
 8017868:	e7fd      	b.n	8017866 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801786a:	f001 fc3f 	bl	80190ec <vPortValidateInterruptPriority>
	__asm volatile
 801786e:	f3ef 8211 	mrs	r2, BASEPRI
 8017872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017876:	b672      	cpsid	i
 8017878:	f383 8811 	msr	BASEPRI, r3
 801787c:	f3bf 8f6f 	isb	sy
 8017880:	f3bf 8f4f 	dsb	sy
 8017884:	b662      	cpsie	i
 8017886:	61ba      	str	r2, [r7, #24]
 8017888:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801788a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801788c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017892:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017896:	2b00      	cmp	r3, #0
 8017898:	d02f      	beq.n	80178fa <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801789c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80178a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80178a4:	68b9      	ldr	r1, [r7, #8]
 80178a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80178a8:	f000 f8f8 	bl	8017a9c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80178ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178ae:	1e5a      	subs	r2, r3, #1
 80178b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80178b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80178b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178bc:	d112      	bne.n	80178e4 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80178be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178c0:	691b      	ldr	r3, [r3, #16]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d016      	beq.n	80178f4 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80178c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178c8:	3310      	adds	r3, #16
 80178ca:	4618      	mov	r0, r3
 80178cc:	f000 fe0c 	bl	80184e8 <xTaskRemoveFromEventList>
 80178d0:	4603      	mov	r3, r0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d00e      	beq.n	80178f4 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d00b      	beq.n	80178f4 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2201      	movs	r2, #1
 80178e0:	601a      	str	r2, [r3, #0]
 80178e2:	e007      	b.n	80178f4 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80178e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80178e8:	3301      	adds	r3, #1
 80178ea:	b2db      	uxtb	r3, r3
 80178ec:	b25a      	sxtb	r2, r3
 80178ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80178f4:	2301      	movs	r3, #1
 80178f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80178f8:	e001      	b.n	80178fe <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80178fa:	2300      	movs	r3, #0
 80178fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80178fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017900:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017902:	693b      	ldr	r3, [r7, #16]
 8017904:	f383 8811 	msr	BASEPRI, r3
}
 8017908:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801790a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801790c:	4618      	mov	r0, r3
 801790e:	3738      	adds	r7, #56	@ 0x38
 8017910:	46bd      	mov	sp, r7
 8017912:	bd80      	pop	{r7, pc}

08017914 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b084      	sub	sp, #16
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d10d      	bne.n	801793e <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8017922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017926:	b672      	cpsid	i
 8017928:	f383 8811 	msr	BASEPRI, r3
 801792c:	f3bf 8f6f 	isb	sy
 8017930:	f3bf 8f4f 	dsb	sy
 8017934:	b662      	cpsie	i
 8017936:	60bb      	str	r3, [r7, #8]
}
 8017938:	bf00      	nop
 801793a:	bf00      	nop
 801793c:	e7fd      	b.n	801793a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 801793e:	f001 faed 	bl	8018f1c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017946:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8017948:	f001 fb1e 	bl	8018f88 <vPortExitCritical>

	return uxReturn;
 801794c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801794e:	4618      	mov	r0, r3
 8017950:	3710      	adds	r7, #16
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}

08017956 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8017956:	b480      	push	{r7}
 8017958:	b087      	sub	sp, #28
 801795a:	af00      	add	r7, sp, #0
 801795c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8017962:	697b      	ldr	r3, [r7, #20]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d10d      	bne.n	8017984 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8017968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801796c:	b672      	cpsid	i
 801796e:	f383 8811 	msr	BASEPRI, r3
 8017972:	f3bf 8f6f 	isb	sy
 8017976:	f3bf 8f4f 	dsb	sy
 801797a:	b662      	cpsie	i
 801797c:	60fb      	str	r3, [r7, #12]
}
 801797e:	bf00      	nop
 8017980:	bf00      	nop
 8017982:	e7fd      	b.n	8017980 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017988:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801798a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801798c:	4618      	mov	r0, r3
 801798e:	371c      	adds	r7, #28
 8017990:	46bd      	mov	sp, r7
 8017992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017996:	4770      	bx	lr

08017998 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8017998:	b480      	push	{r7}
 801799a:	b085      	sub	sp, #20
 801799c:	af00      	add	r7, sp, #0
 801799e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d006      	beq.n	80179b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	f1c3 0307 	rsb	r3, r3, #7
 80179b2:	60fb      	str	r3, [r7, #12]
 80179b4:	e001      	b.n	80179ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80179b6:	2300      	movs	r3, #0
 80179b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80179ba:	68fb      	ldr	r3, [r7, #12]
	}
 80179bc:	4618      	mov	r0, r3
 80179be:	3714      	adds	r7, #20
 80179c0:	46bd      	mov	sp, r7
 80179c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c6:	4770      	bx	lr

080179c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b086      	sub	sp, #24
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	60f8      	str	r0, [r7, #12]
 80179d0:	60b9      	str	r1, [r7, #8]
 80179d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80179d4:	2300      	movs	r3, #0
 80179d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80179dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d10d      	bne.n	8017a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d14d      	bne.n	8017a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	689b      	ldr	r3, [r3, #8]
 80179f2:	4618      	mov	r0, r3
 80179f4:	f000 ffe0 	bl	80189b8 <xTaskPriorityDisinherit>
 80179f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	2200      	movs	r2, #0
 80179fe:	609a      	str	r2, [r3, #8]
 8017a00:	e043      	b.n	8017a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d119      	bne.n	8017a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	6858      	ldr	r0, [r3, #4]
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a10:	461a      	mov	r2, r3
 8017a12:	68b9      	ldr	r1, [r7, #8]
 8017a14:	f002 fa56 	bl	8019ec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	685a      	ldr	r2, [r3, #4]
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a20:	441a      	add	r2, r3
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	685a      	ldr	r2, [r3, #4]
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	689b      	ldr	r3, [r3, #8]
 8017a2e:	429a      	cmp	r2, r3
 8017a30:	d32b      	bcc.n	8017a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	681a      	ldr	r2, [r3, #0]
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	605a      	str	r2, [r3, #4]
 8017a3a:	e026      	b.n	8017a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	68d8      	ldr	r0, [r3, #12]
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a44:	461a      	mov	r2, r3
 8017a46:	68b9      	ldr	r1, [r7, #8]
 8017a48:	f002 fa3c 	bl	8019ec4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	68da      	ldr	r2, [r3, #12]
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a54:	425b      	negs	r3, r3
 8017a56:	441a      	add	r2, r3
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	68da      	ldr	r2, [r3, #12]
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	429a      	cmp	r2, r3
 8017a66:	d207      	bcs.n	8017a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	689a      	ldr	r2, [r3, #8]
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a70:	425b      	negs	r3, r3
 8017a72:	441a      	add	r2, r3
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2b02      	cmp	r3, #2
 8017a7c:	d105      	bne.n	8017a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017a7e:	693b      	ldr	r3, [r7, #16]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d002      	beq.n	8017a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017a84:	693b      	ldr	r3, [r7, #16]
 8017a86:	3b01      	subs	r3, #1
 8017a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017a8a:	693b      	ldr	r3, [r7, #16]
 8017a8c:	1c5a      	adds	r2, r3, #1
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8017a92:	697b      	ldr	r3, [r7, #20]
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	3718      	adds	r7, #24
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}

08017a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b082      	sub	sp, #8
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	6078      	str	r0, [r7, #4]
 8017aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d018      	beq.n	8017ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	68da      	ldr	r2, [r3, #12]
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017ab6:	441a      	add	r2, r3
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	68da      	ldr	r2, [r3, #12]
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	689b      	ldr	r3, [r3, #8]
 8017ac4:	429a      	cmp	r2, r3
 8017ac6:	d303      	bcc.n	8017ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681a      	ldr	r2, [r3, #0]
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	68d9      	ldr	r1, [r3, #12]
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017ad8:	461a      	mov	r2, r3
 8017ada:	6838      	ldr	r0, [r7, #0]
 8017adc:	f002 f9f2 	bl	8019ec4 <memcpy>
	}
}
 8017ae0:	bf00      	nop
 8017ae2:	3708      	adds	r7, #8
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}

08017ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b084      	sub	sp, #16
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017af0:	f001 fa14 	bl	8018f1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017afc:	e011      	b.n	8017b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d012      	beq.n	8017b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	3324      	adds	r3, #36	@ 0x24
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f000 fcec 	bl	80184e8 <xTaskRemoveFromEventList>
 8017b10:	4603      	mov	r3, r0
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d001      	beq.n	8017b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017b16:	f000 fdcb 	bl	80186b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017b1a:	7bfb      	ldrb	r3, [r7, #15]
 8017b1c:	3b01      	subs	r3, #1
 8017b1e:	b2db      	uxtb	r3, r3
 8017b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	dce9      	bgt.n	8017afe <prvUnlockQueue+0x16>
 8017b2a:	e000      	b.n	8017b2e <prvUnlockQueue+0x46>
					break;
 8017b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	22ff      	movs	r2, #255	@ 0xff
 8017b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8017b36:	f001 fa27 	bl	8018f88 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017b3a:	f001 f9ef 	bl	8018f1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8017b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017b46:	e011      	b.n	8017b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	691b      	ldr	r3, [r3, #16]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d012      	beq.n	8017b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	3310      	adds	r3, #16
 8017b54:	4618      	mov	r0, r3
 8017b56:	f000 fcc7 	bl	80184e8 <xTaskRemoveFromEventList>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d001      	beq.n	8017b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017b60:	f000 fda6 	bl	80186b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017b64:	7bbb      	ldrb	r3, [r7, #14]
 8017b66:	3b01      	subs	r3, #1
 8017b68:	b2db      	uxtb	r3, r3
 8017b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	dce9      	bgt.n	8017b48 <prvUnlockQueue+0x60>
 8017b74:	e000      	b.n	8017b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	22ff      	movs	r2, #255	@ 0xff
 8017b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8017b80:	f001 fa02 	bl	8018f88 <vPortExitCritical>
}
 8017b84:	bf00      	nop
 8017b86:	3710      	adds	r7, #16
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	bd80      	pop	{r7, pc}

08017b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	b084      	sub	sp, #16
 8017b90:	af00      	add	r7, sp, #0
 8017b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017b94:	f001 f9c2 	bl	8018f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d102      	bne.n	8017ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	60fb      	str	r3, [r7, #12]
 8017ba4:	e001      	b.n	8017baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017baa:	f001 f9ed 	bl	8018f88 <vPortExitCritical>

	return xReturn;
 8017bae:	68fb      	ldr	r3, [r7, #12]
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b084      	sub	sp, #16
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017bc0:	f001 f9ac 	bl	8018f1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017bcc:	429a      	cmp	r2, r3
 8017bce:	d102      	bne.n	8017bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	60fb      	str	r3, [r7, #12]
 8017bd4:	e001      	b.n	8017bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017bda:	f001 f9d5 	bl	8018f88 <vPortExitCritical>

	return xReturn;
 8017bde:	68fb      	ldr	r3, [r7, #12]
}
 8017be0:	4618      	mov	r0, r3
 8017be2:	3710      	adds	r7, #16
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b08e      	sub	sp, #56	@ 0x38
 8017bec:	af04      	add	r7, sp, #16
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	60b9      	str	r1, [r7, #8]
 8017bf2:	607a      	str	r2, [r7, #4]
 8017bf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d10d      	bne.n	8017c18 <xTaskCreateStatic+0x30>
	__asm volatile
 8017bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c00:	b672      	cpsid	i
 8017c02:	f383 8811 	msr	BASEPRI, r3
 8017c06:	f3bf 8f6f 	isb	sy
 8017c0a:	f3bf 8f4f 	dsb	sy
 8017c0e:	b662      	cpsie	i
 8017c10:	623b      	str	r3, [r7, #32]
}
 8017c12:	bf00      	nop
 8017c14:	bf00      	nop
 8017c16:	e7fd      	b.n	8017c14 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8017c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d10d      	bne.n	8017c3a <xTaskCreateStatic+0x52>
	__asm volatile
 8017c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c22:	b672      	cpsid	i
 8017c24:	f383 8811 	msr	BASEPRI, r3
 8017c28:	f3bf 8f6f 	isb	sy
 8017c2c:	f3bf 8f4f 	dsb	sy
 8017c30:	b662      	cpsie	i
 8017c32:	61fb      	str	r3, [r7, #28]
}
 8017c34:	bf00      	nop
 8017c36:	bf00      	nop
 8017c38:	e7fd      	b.n	8017c36 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017c3a:	2358      	movs	r3, #88	@ 0x58
 8017c3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017c3e:	693b      	ldr	r3, [r7, #16]
 8017c40:	2b58      	cmp	r3, #88	@ 0x58
 8017c42:	d00d      	beq.n	8017c60 <xTaskCreateStatic+0x78>
	__asm volatile
 8017c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017c48:	b672      	cpsid	i
 8017c4a:	f383 8811 	msr	BASEPRI, r3
 8017c4e:	f3bf 8f6f 	isb	sy
 8017c52:	f3bf 8f4f 	dsb	sy
 8017c56:	b662      	cpsie	i
 8017c58:	61bb      	str	r3, [r7, #24]
}
 8017c5a:	bf00      	nop
 8017c5c:	bf00      	nop
 8017c5e:	e7fd      	b.n	8017c5c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017c60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d01e      	beq.n	8017ca6 <xTaskCreateStatic+0xbe>
 8017c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d01b      	beq.n	8017ca6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017c76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c7a:	2202      	movs	r2, #2
 8017c7c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017c80:	2300      	movs	r3, #0
 8017c82:	9303      	str	r3, [sp, #12]
 8017c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c86:	9302      	str	r3, [sp, #8]
 8017c88:	f107 0314 	add.w	r3, r7, #20
 8017c8c:	9301      	str	r3, [sp, #4]
 8017c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c90:	9300      	str	r3, [sp, #0]
 8017c92:	683b      	ldr	r3, [r7, #0]
 8017c94:	687a      	ldr	r2, [r7, #4]
 8017c96:	68b9      	ldr	r1, [r7, #8]
 8017c98:	68f8      	ldr	r0, [r7, #12]
 8017c9a:	f000 f850 	bl	8017d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017c9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017ca0:	f000 f8e2 	bl	8017e68 <prvAddNewTaskToReadyList>
 8017ca4:	e001      	b.n	8017caa <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017caa:	697b      	ldr	r3, [r7, #20]
	}
 8017cac:	4618      	mov	r0, r3
 8017cae:	3728      	adds	r7, #40	@ 0x28
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b08c      	sub	sp, #48	@ 0x30
 8017cb8:	af04      	add	r7, sp, #16
 8017cba:	60f8      	str	r0, [r7, #12]
 8017cbc:	60b9      	str	r1, [r7, #8]
 8017cbe:	603b      	str	r3, [r7, #0]
 8017cc0:	4613      	mov	r3, r2
 8017cc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017cc4:	88fb      	ldrh	r3, [r7, #6]
 8017cc6:	009b      	lsls	r3, r3, #2
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f001 fa55 	bl	8019178 <pvPortMalloc>
 8017cce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d00e      	beq.n	8017cf4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017cd6:	2058      	movs	r0, #88	@ 0x58
 8017cd8:	f001 fa4e 	bl	8019178 <pvPortMalloc>
 8017cdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017cde:	69fb      	ldr	r3, [r7, #28]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d003      	beq.n	8017cec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017ce4:	69fb      	ldr	r3, [r7, #28]
 8017ce6:	697a      	ldr	r2, [r7, #20]
 8017ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8017cea:	e005      	b.n	8017cf8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017cec:	6978      	ldr	r0, [r7, #20]
 8017cee:	f001 fb15 	bl	801931c <vPortFree>
 8017cf2:	e001      	b.n	8017cf8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017cf4:	2300      	movs	r3, #0
 8017cf6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017cf8:	69fb      	ldr	r3, [r7, #28]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d017      	beq.n	8017d2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017cfe:	69fb      	ldr	r3, [r7, #28]
 8017d00:	2200      	movs	r2, #0
 8017d02:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017d06:	88fa      	ldrh	r2, [r7, #6]
 8017d08:	2300      	movs	r3, #0
 8017d0a:	9303      	str	r3, [sp, #12]
 8017d0c:	69fb      	ldr	r3, [r7, #28]
 8017d0e:	9302      	str	r3, [sp, #8]
 8017d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d12:	9301      	str	r3, [sp, #4]
 8017d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d16:	9300      	str	r3, [sp, #0]
 8017d18:	683b      	ldr	r3, [r7, #0]
 8017d1a:	68b9      	ldr	r1, [r7, #8]
 8017d1c:	68f8      	ldr	r0, [r7, #12]
 8017d1e:	f000 f80e 	bl	8017d3e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017d22:	69f8      	ldr	r0, [r7, #28]
 8017d24:	f000 f8a0 	bl	8017e68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017d28:	2301      	movs	r3, #1
 8017d2a:	61bb      	str	r3, [r7, #24]
 8017d2c:	e002      	b.n	8017d34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017d34:	69bb      	ldr	r3, [r7, #24]
	}
 8017d36:	4618      	mov	r0, r3
 8017d38:	3720      	adds	r7, #32
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}

08017d3e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017d3e:	b580      	push	{r7, lr}
 8017d40:	b088      	sub	sp, #32
 8017d42:	af00      	add	r7, sp, #0
 8017d44:	60f8      	str	r0, [r7, #12]
 8017d46:	60b9      	str	r1, [r7, #8]
 8017d48:	607a      	str	r2, [r7, #4]
 8017d4a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d4e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	009b      	lsls	r3, r3, #2
 8017d54:	461a      	mov	r2, r3
 8017d56:	21a5      	movs	r1, #165	@ 0xa5
 8017d58:	f002 f846 	bl	8019de8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017d5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017d60:	6879      	ldr	r1, [r7, #4]
 8017d62:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8017d66:	440b      	add	r3, r1
 8017d68:	009b      	lsls	r3, r3, #2
 8017d6a:	4413      	add	r3, r2
 8017d6c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017d6e:	69bb      	ldr	r3, [r7, #24]
 8017d70:	f023 0307 	bic.w	r3, r3, #7
 8017d74:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017d76:	69bb      	ldr	r3, [r7, #24]
 8017d78:	f003 0307 	and.w	r3, r3, #7
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d00d      	beq.n	8017d9c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8017d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017d84:	b672      	cpsid	i
 8017d86:	f383 8811 	msr	BASEPRI, r3
 8017d8a:	f3bf 8f6f 	isb	sy
 8017d8e:	f3bf 8f4f 	dsb	sy
 8017d92:	b662      	cpsie	i
 8017d94:	617b      	str	r3, [r7, #20]
}
 8017d96:	bf00      	nop
 8017d98:	bf00      	nop
 8017d9a:	e7fd      	b.n	8017d98 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017d9c:	68bb      	ldr	r3, [r7, #8]
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d01f      	beq.n	8017de2 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017da2:	2300      	movs	r3, #0
 8017da4:	61fb      	str	r3, [r7, #28]
 8017da6:	e012      	b.n	8017dce <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017da8:	68ba      	ldr	r2, [r7, #8]
 8017daa:	69fb      	ldr	r3, [r7, #28]
 8017dac:	4413      	add	r3, r2
 8017dae:	7819      	ldrb	r1, [r3, #0]
 8017db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017db2:	69fb      	ldr	r3, [r7, #28]
 8017db4:	4413      	add	r3, r2
 8017db6:	3334      	adds	r3, #52	@ 0x34
 8017db8:	460a      	mov	r2, r1
 8017dba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017dbc:	68ba      	ldr	r2, [r7, #8]
 8017dbe:	69fb      	ldr	r3, [r7, #28]
 8017dc0:	4413      	add	r3, r2
 8017dc2:	781b      	ldrb	r3, [r3, #0]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d006      	beq.n	8017dd6 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017dc8:	69fb      	ldr	r3, [r7, #28]
 8017dca:	3301      	adds	r3, #1
 8017dcc:	61fb      	str	r3, [r7, #28]
 8017dce:	69fb      	ldr	r3, [r7, #28]
 8017dd0:	2b0f      	cmp	r3, #15
 8017dd2:	d9e9      	bls.n	8017da8 <prvInitialiseNewTask+0x6a>
 8017dd4:	e000      	b.n	8017dd8 <prvInitialiseNewTask+0x9a>
			{
				break;
 8017dd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dda:	2200      	movs	r2, #0
 8017ddc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8017de0:	e003      	b.n	8017dea <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017de4:	2200      	movs	r2, #0
 8017de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dec:	2b06      	cmp	r3, #6
 8017dee:	d901      	bls.n	8017df4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017df0:	2306      	movs	r3, #6
 8017df2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017df6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017df8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017dfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017dfe:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8017e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e02:	2200      	movs	r2, #0
 8017e04:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e08:	3304      	adds	r3, #4
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	f7fe feca 	bl	8016ba4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e12:	3318      	adds	r3, #24
 8017e14:	4618      	mov	r0, r3
 8017e16:	f7fe fec5 	bl	8016ba4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017e1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e22:	f1c3 0207 	rsb	r2, r3, #7
 8017e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017e2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8017e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e32:	2200      	movs	r2, #0
 8017e34:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e38:	2200      	movs	r2, #0
 8017e3a:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e3e:	2200      	movs	r2, #0
 8017e40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017e44:	683a      	ldr	r2, [r7, #0]
 8017e46:	68f9      	ldr	r1, [r7, #12]
 8017e48:	69b8      	ldr	r0, [r7, #24]
 8017e4a:	f000 ff5b 	bl	8018d04 <pxPortInitialiseStack>
 8017e4e:	4602      	mov	r2, r0
 8017e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d002      	beq.n	8017e60 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017e5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017e60:	bf00      	nop
 8017e62:	3720      	adds	r7, #32
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bd80      	pop	{r7, pc}

08017e68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017e70:	f001 f854 	bl	8018f1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017e74:	4b2a      	ldr	r3, [pc, #168]	@ (8017f20 <prvAddNewTaskToReadyList+0xb8>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	3301      	adds	r3, #1
 8017e7a:	4a29      	ldr	r2, [pc, #164]	@ (8017f20 <prvAddNewTaskToReadyList+0xb8>)
 8017e7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017e7e:	4b29      	ldr	r3, [pc, #164]	@ (8017f24 <prvAddNewTaskToReadyList+0xbc>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d109      	bne.n	8017e9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017e86:	4a27      	ldr	r2, [pc, #156]	@ (8017f24 <prvAddNewTaskToReadyList+0xbc>)
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017e8c:	4b24      	ldr	r3, [pc, #144]	@ (8017f20 <prvAddNewTaskToReadyList+0xb8>)
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	2b01      	cmp	r3, #1
 8017e92:	d110      	bne.n	8017eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017e94:	f000 fc32 	bl	80186fc <prvInitialiseTaskLists>
 8017e98:	e00d      	b.n	8017eb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017e9a:	4b23      	ldr	r3, [pc, #140]	@ (8017f28 <prvAddNewTaskToReadyList+0xc0>)
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d109      	bne.n	8017eb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017ea2:	4b20      	ldr	r3, [pc, #128]	@ (8017f24 <prvAddNewTaskToReadyList+0xbc>)
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017eac:	429a      	cmp	r2, r3
 8017eae:	d802      	bhi.n	8017eb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8017f24 <prvAddNewTaskToReadyList+0xbc>)
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8017f2c <prvAddNewTaskToReadyList+0xc4>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	3301      	adds	r3, #1
 8017ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8017f2c <prvAddNewTaskToReadyList+0xc4>)
 8017ebe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ec4:	2201      	movs	r2, #1
 8017ec6:	409a      	lsls	r2, r3
 8017ec8:	4b19      	ldr	r3, [pc, #100]	@ (8017f30 <prvAddNewTaskToReadyList+0xc8>)
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	4313      	orrs	r3, r2
 8017ece:	4a18      	ldr	r2, [pc, #96]	@ (8017f30 <prvAddNewTaskToReadyList+0xc8>)
 8017ed0:	6013      	str	r3, [r2, #0]
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017ed6:	4613      	mov	r3, r2
 8017ed8:	009b      	lsls	r3, r3, #2
 8017eda:	4413      	add	r3, r2
 8017edc:	009b      	lsls	r3, r3, #2
 8017ede:	4a15      	ldr	r2, [pc, #84]	@ (8017f34 <prvAddNewTaskToReadyList+0xcc>)
 8017ee0:	441a      	add	r2, r3
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	3304      	adds	r3, #4
 8017ee6:	4619      	mov	r1, r3
 8017ee8:	4610      	mov	r0, r2
 8017eea:	f7fe fe68 	bl	8016bbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017eee:	f001 f84b 	bl	8018f88 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8017f28 <prvAddNewTaskToReadyList+0xc0>)
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d00e      	beq.n	8017f18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017efa:	4b0a      	ldr	r3, [pc, #40]	@ (8017f24 <prvAddNewTaskToReadyList+0xbc>)
 8017efc:	681b      	ldr	r3, [r3, #0]
 8017efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017f04:	429a      	cmp	r2, r3
 8017f06:	d207      	bcs.n	8017f18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017f08:	4b0b      	ldr	r3, [pc, #44]	@ (8017f38 <prvAddNewTaskToReadyList+0xd0>)
 8017f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f0e:	601a      	str	r2, [r3, #0]
 8017f10:	f3bf 8f4f 	dsb	sy
 8017f14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017f18:	bf00      	nop
 8017f1a:	3708      	adds	r7, #8
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd80      	pop	{r7, pc}
 8017f20:	200016c0 	.word	0x200016c0
 8017f24:	200015c0 	.word	0x200015c0
 8017f28:	200016cc 	.word	0x200016cc
 8017f2c:	200016dc 	.word	0x200016dc
 8017f30:	200016c8 	.word	0x200016c8
 8017f34:	200015c4 	.word	0x200015c4
 8017f38:	e000ed04 	.word	0xe000ed04

08017f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b084      	sub	sp, #16
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017f44:	2300      	movs	r3, #0
 8017f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d01a      	beq.n	8017f84 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017f4e:	4b15      	ldr	r3, [pc, #84]	@ (8017fa4 <vTaskDelay+0x68>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d00d      	beq.n	8017f72 <vTaskDelay+0x36>
	__asm volatile
 8017f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017f5a:	b672      	cpsid	i
 8017f5c:	f383 8811 	msr	BASEPRI, r3
 8017f60:	f3bf 8f6f 	isb	sy
 8017f64:	f3bf 8f4f 	dsb	sy
 8017f68:	b662      	cpsie	i
 8017f6a:	60bb      	str	r3, [r7, #8]
}
 8017f6c:	bf00      	nop
 8017f6e:	bf00      	nop
 8017f70:	e7fd      	b.n	8017f6e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8017f72:	f000 f881 	bl	8018078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017f76:	2100      	movs	r1, #0
 8017f78:	6878      	ldr	r0, [r7, #4]
 8017f7a:	f000 fe5d 	bl	8018c38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017f7e:	f000 f889 	bl	8018094 <xTaskResumeAll>
 8017f82:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d107      	bne.n	8017f9a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8017f8a:	4b07      	ldr	r3, [pc, #28]	@ (8017fa8 <vTaskDelay+0x6c>)
 8017f8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017f90:	601a      	str	r2, [r3, #0]
 8017f92:	f3bf 8f4f 	dsb	sy
 8017f96:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017f9a:	bf00      	nop
 8017f9c:	3710      	adds	r7, #16
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bd80      	pop	{r7, pc}
 8017fa2:	bf00      	nop
 8017fa4:	200016e8 	.word	0x200016e8
 8017fa8:	e000ed04 	.word	0xe000ed04

08017fac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b08a      	sub	sp, #40	@ 0x28
 8017fb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017fba:	463a      	mov	r2, r7
 8017fbc:	1d39      	adds	r1, r7, #4
 8017fbe:	f107 0308 	add.w	r3, r7, #8
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7e9 f98c 	bl	80012e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017fc8:	6839      	ldr	r1, [r7, #0]
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	68ba      	ldr	r2, [r7, #8]
 8017fce:	9202      	str	r2, [sp, #8]
 8017fd0:	9301      	str	r3, [sp, #4]
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	9300      	str	r3, [sp, #0]
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	460a      	mov	r2, r1
 8017fda:	4921      	ldr	r1, [pc, #132]	@ (8018060 <vTaskStartScheduler+0xb4>)
 8017fdc:	4821      	ldr	r0, [pc, #132]	@ (8018064 <vTaskStartScheduler+0xb8>)
 8017fde:	f7ff fe03 	bl	8017be8 <xTaskCreateStatic>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	4a20      	ldr	r2, [pc, #128]	@ (8018068 <vTaskStartScheduler+0xbc>)
 8017fe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8018068 <vTaskStartScheduler+0xbc>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d002      	beq.n	8017ff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017ff0:	2301      	movs	r3, #1
 8017ff2:	617b      	str	r3, [r7, #20]
 8017ff4:	e001      	b.n	8017ffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017ffa:	697b      	ldr	r3, [r7, #20]
 8017ffc:	2b01      	cmp	r3, #1
 8017ffe:	d118      	bne.n	8018032 <vTaskStartScheduler+0x86>
	__asm volatile
 8018000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018004:	b672      	cpsid	i
 8018006:	f383 8811 	msr	BASEPRI, r3
 801800a:	f3bf 8f6f 	isb	sy
 801800e:	f3bf 8f4f 	dsb	sy
 8018012:	b662      	cpsie	i
 8018014:	613b      	str	r3, [r7, #16]
}
 8018016:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018018:	4b14      	ldr	r3, [pc, #80]	@ (801806c <vTaskStartScheduler+0xc0>)
 801801a:	f04f 32ff 	mov.w	r2, #4294967295
 801801e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8018020:	4b13      	ldr	r3, [pc, #76]	@ (8018070 <vTaskStartScheduler+0xc4>)
 8018022:	2201      	movs	r2, #1
 8018024:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018026:	4b13      	ldr	r3, [pc, #76]	@ (8018074 <vTaskStartScheduler+0xc8>)
 8018028:	2200      	movs	r2, #0
 801802a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801802c:	f000 fef8 	bl	8018e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8018030:	e011      	b.n	8018056 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018032:	697b      	ldr	r3, [r7, #20]
 8018034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018038:	d10d      	bne.n	8018056 <vTaskStartScheduler+0xaa>
	__asm volatile
 801803a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801803e:	b672      	cpsid	i
 8018040:	f383 8811 	msr	BASEPRI, r3
 8018044:	f3bf 8f6f 	isb	sy
 8018048:	f3bf 8f4f 	dsb	sy
 801804c:	b662      	cpsie	i
 801804e:	60fb      	str	r3, [r7, #12]
}
 8018050:	bf00      	nop
 8018052:	bf00      	nop
 8018054:	e7fd      	b.n	8018052 <vTaskStartScheduler+0xa6>
}
 8018056:	bf00      	nop
 8018058:	3718      	adds	r7, #24
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}
 801805e:	bf00      	nop
 8018060:	0801c358 	.word	0x0801c358
 8018064:	080186c9 	.word	0x080186c9
 8018068:	200016e4 	.word	0x200016e4
 801806c:	200016e0 	.word	0x200016e0
 8018070:	200016cc 	.word	0x200016cc
 8018074:	200016c4 	.word	0x200016c4

08018078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018078:	b480      	push	{r7}
 801807a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801807c:	4b04      	ldr	r3, [pc, #16]	@ (8018090 <vTaskSuspendAll+0x18>)
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	3301      	adds	r3, #1
 8018082:	4a03      	ldr	r2, [pc, #12]	@ (8018090 <vTaskSuspendAll+0x18>)
 8018084:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8018086:	bf00      	nop
 8018088:	46bd      	mov	sp, r7
 801808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801808e:	4770      	bx	lr
 8018090:	200016e8 	.word	0x200016e8

08018094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8018094:	b580      	push	{r7, lr}
 8018096:	b084      	sub	sp, #16
 8018098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801809a:	2300      	movs	r3, #0
 801809c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801809e:	2300      	movs	r3, #0
 80180a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80180a2:	4b43      	ldr	r3, [pc, #268]	@ (80181b0 <xTaskResumeAll+0x11c>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	2b00      	cmp	r3, #0
 80180a8:	d10d      	bne.n	80180c6 <xTaskResumeAll+0x32>
	__asm volatile
 80180aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80180ae:	b672      	cpsid	i
 80180b0:	f383 8811 	msr	BASEPRI, r3
 80180b4:	f3bf 8f6f 	isb	sy
 80180b8:	f3bf 8f4f 	dsb	sy
 80180bc:	b662      	cpsie	i
 80180be:	603b      	str	r3, [r7, #0]
}
 80180c0:	bf00      	nop
 80180c2:	bf00      	nop
 80180c4:	e7fd      	b.n	80180c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80180c6:	f000 ff29 	bl	8018f1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80180ca:	4b39      	ldr	r3, [pc, #228]	@ (80181b0 <xTaskResumeAll+0x11c>)
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	3b01      	subs	r3, #1
 80180d0:	4a37      	ldr	r2, [pc, #220]	@ (80181b0 <xTaskResumeAll+0x11c>)
 80180d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80180d4:	4b36      	ldr	r3, [pc, #216]	@ (80181b0 <xTaskResumeAll+0x11c>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d161      	bne.n	80181a0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80180dc:	4b35      	ldr	r3, [pc, #212]	@ (80181b4 <xTaskResumeAll+0x120>)
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d05d      	beq.n	80181a0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80180e4:	e02e      	b.n	8018144 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80180e6:	4b34      	ldr	r3, [pc, #208]	@ (80181b8 <xTaskResumeAll+0x124>)
 80180e8:	68db      	ldr	r3, [r3, #12]
 80180ea:	68db      	ldr	r3, [r3, #12]
 80180ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	3318      	adds	r3, #24
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7fe fdc0 	bl	8016c78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	3304      	adds	r3, #4
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7fe fdbb 	bl	8016c78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018106:	2201      	movs	r2, #1
 8018108:	409a      	lsls	r2, r3
 801810a:	4b2c      	ldr	r3, [pc, #176]	@ (80181bc <xTaskResumeAll+0x128>)
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	4313      	orrs	r3, r2
 8018110:	4a2a      	ldr	r2, [pc, #168]	@ (80181bc <xTaskResumeAll+0x128>)
 8018112:	6013      	str	r3, [r2, #0]
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018118:	4613      	mov	r3, r2
 801811a:	009b      	lsls	r3, r3, #2
 801811c:	4413      	add	r3, r2
 801811e:	009b      	lsls	r3, r3, #2
 8018120:	4a27      	ldr	r2, [pc, #156]	@ (80181c0 <xTaskResumeAll+0x12c>)
 8018122:	441a      	add	r2, r3
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	3304      	adds	r3, #4
 8018128:	4619      	mov	r1, r3
 801812a:	4610      	mov	r0, r2
 801812c:	f7fe fd47 	bl	8016bbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018134:	4b23      	ldr	r3, [pc, #140]	@ (80181c4 <xTaskResumeAll+0x130>)
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801813a:	429a      	cmp	r2, r3
 801813c:	d302      	bcc.n	8018144 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 801813e:	4b22      	ldr	r3, [pc, #136]	@ (80181c8 <xTaskResumeAll+0x134>)
 8018140:	2201      	movs	r2, #1
 8018142:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018144:	4b1c      	ldr	r3, [pc, #112]	@ (80181b8 <xTaskResumeAll+0x124>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d1cc      	bne.n	80180e6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	2b00      	cmp	r3, #0
 8018150:	d001      	beq.n	8018156 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018152:	f000 fb73 	bl	801883c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018156:	4b1d      	ldr	r3, [pc, #116]	@ (80181cc <xTaskResumeAll+0x138>)
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d010      	beq.n	8018184 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018162:	f000 f859 	bl	8018218 <xTaskIncrementTick>
 8018166:	4603      	mov	r3, r0
 8018168:	2b00      	cmp	r3, #0
 801816a:	d002      	beq.n	8018172 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 801816c:	4b16      	ldr	r3, [pc, #88]	@ (80181c8 <xTaskResumeAll+0x134>)
 801816e:	2201      	movs	r2, #1
 8018170:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	3b01      	subs	r3, #1
 8018176:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2b00      	cmp	r3, #0
 801817c:	d1f1      	bne.n	8018162 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801817e:	4b13      	ldr	r3, [pc, #76]	@ (80181cc <xTaskResumeAll+0x138>)
 8018180:	2200      	movs	r2, #0
 8018182:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018184:	4b10      	ldr	r3, [pc, #64]	@ (80181c8 <xTaskResumeAll+0x134>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d009      	beq.n	80181a0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801818c:	2301      	movs	r3, #1
 801818e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018190:	4b0f      	ldr	r3, [pc, #60]	@ (80181d0 <xTaskResumeAll+0x13c>)
 8018192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018196:	601a      	str	r2, [r3, #0]
 8018198:	f3bf 8f4f 	dsb	sy
 801819c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80181a0:	f000 fef2 	bl	8018f88 <vPortExitCritical>

	return xAlreadyYielded;
 80181a4:	68bb      	ldr	r3, [r7, #8]
}
 80181a6:	4618      	mov	r0, r3
 80181a8:	3710      	adds	r7, #16
 80181aa:	46bd      	mov	sp, r7
 80181ac:	bd80      	pop	{r7, pc}
 80181ae:	bf00      	nop
 80181b0:	200016e8 	.word	0x200016e8
 80181b4:	200016c0 	.word	0x200016c0
 80181b8:	20001680 	.word	0x20001680
 80181bc:	200016c8 	.word	0x200016c8
 80181c0:	200015c4 	.word	0x200015c4
 80181c4:	200015c0 	.word	0x200015c0
 80181c8:	200016d4 	.word	0x200016d4
 80181cc:	200016d0 	.word	0x200016d0
 80181d0:	e000ed04 	.word	0xe000ed04

080181d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80181d4:	b480      	push	{r7}
 80181d6:	b083      	sub	sp, #12
 80181d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80181da:	4b05      	ldr	r3, [pc, #20]	@ (80181f0 <xTaskGetTickCount+0x1c>)
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80181e0:	687b      	ldr	r3, [r7, #4]
}
 80181e2:	4618      	mov	r0, r3
 80181e4:	370c      	adds	r7, #12
 80181e6:	46bd      	mov	sp, r7
 80181e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181ec:	4770      	bx	lr
 80181ee:	bf00      	nop
 80181f0:	200016c4 	.word	0x200016c4

080181f4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80181f4:	b580      	push	{r7, lr}
 80181f6:	b082      	sub	sp, #8
 80181f8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80181fa:	f000 ff77 	bl	80190ec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80181fe:	2300      	movs	r3, #0
 8018200:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018202:	4b04      	ldr	r3, [pc, #16]	@ (8018214 <xTaskGetTickCountFromISR+0x20>)
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018208:	683b      	ldr	r3, [r7, #0]
}
 801820a:	4618      	mov	r0, r3
 801820c:	3708      	adds	r7, #8
 801820e:	46bd      	mov	sp, r7
 8018210:	bd80      	pop	{r7, pc}
 8018212:	bf00      	nop
 8018214:	200016c4 	.word	0x200016c4

08018218 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b086      	sub	sp, #24
 801821c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801821e:	2300      	movs	r3, #0
 8018220:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018222:	4b50      	ldr	r3, [pc, #320]	@ (8018364 <xTaskIncrementTick+0x14c>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	2b00      	cmp	r3, #0
 8018228:	f040 808b 	bne.w	8018342 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801822c:	4b4e      	ldr	r3, [pc, #312]	@ (8018368 <xTaskIncrementTick+0x150>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	3301      	adds	r3, #1
 8018232:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018234:	4a4c      	ldr	r2, [pc, #304]	@ (8018368 <xTaskIncrementTick+0x150>)
 8018236:	693b      	ldr	r3, [r7, #16]
 8018238:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801823a:	693b      	ldr	r3, [r7, #16]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d123      	bne.n	8018288 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8018240:	4b4a      	ldr	r3, [pc, #296]	@ (801836c <xTaskIncrementTick+0x154>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d00d      	beq.n	8018266 <xTaskIncrementTick+0x4e>
	__asm volatile
 801824a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801824e:	b672      	cpsid	i
 8018250:	f383 8811 	msr	BASEPRI, r3
 8018254:	f3bf 8f6f 	isb	sy
 8018258:	f3bf 8f4f 	dsb	sy
 801825c:	b662      	cpsie	i
 801825e:	603b      	str	r3, [r7, #0]
}
 8018260:	bf00      	nop
 8018262:	bf00      	nop
 8018264:	e7fd      	b.n	8018262 <xTaskIncrementTick+0x4a>
 8018266:	4b41      	ldr	r3, [pc, #260]	@ (801836c <xTaskIncrementTick+0x154>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	60fb      	str	r3, [r7, #12]
 801826c:	4b40      	ldr	r3, [pc, #256]	@ (8018370 <xTaskIncrementTick+0x158>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	4a3e      	ldr	r2, [pc, #248]	@ (801836c <xTaskIncrementTick+0x154>)
 8018272:	6013      	str	r3, [r2, #0]
 8018274:	4a3e      	ldr	r2, [pc, #248]	@ (8018370 <xTaskIncrementTick+0x158>)
 8018276:	68fb      	ldr	r3, [r7, #12]
 8018278:	6013      	str	r3, [r2, #0]
 801827a:	4b3e      	ldr	r3, [pc, #248]	@ (8018374 <xTaskIncrementTick+0x15c>)
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	3301      	adds	r3, #1
 8018280:	4a3c      	ldr	r2, [pc, #240]	@ (8018374 <xTaskIncrementTick+0x15c>)
 8018282:	6013      	str	r3, [r2, #0]
 8018284:	f000 fada 	bl	801883c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018288:	4b3b      	ldr	r3, [pc, #236]	@ (8018378 <xTaskIncrementTick+0x160>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	693a      	ldr	r2, [r7, #16]
 801828e:	429a      	cmp	r2, r3
 8018290:	d348      	bcc.n	8018324 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018292:	4b36      	ldr	r3, [pc, #216]	@ (801836c <xTaskIncrementTick+0x154>)
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d104      	bne.n	80182a6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801829c:	4b36      	ldr	r3, [pc, #216]	@ (8018378 <xTaskIncrementTick+0x160>)
 801829e:	f04f 32ff 	mov.w	r2, #4294967295
 80182a2:	601a      	str	r2, [r3, #0]
					break;
 80182a4:	e03e      	b.n	8018324 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182a6:	4b31      	ldr	r3, [pc, #196]	@ (801836c <xTaskIncrementTick+0x154>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	68db      	ldr	r3, [r3, #12]
 80182ac:	68db      	ldr	r3, [r3, #12]
 80182ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80182b0:	68bb      	ldr	r3, [r7, #8]
 80182b2:	685b      	ldr	r3, [r3, #4]
 80182b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80182b6:	693a      	ldr	r2, [r7, #16]
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	429a      	cmp	r2, r3
 80182bc:	d203      	bcs.n	80182c6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80182be:	4a2e      	ldr	r2, [pc, #184]	@ (8018378 <xTaskIncrementTick+0x160>)
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80182c4:	e02e      	b.n	8018324 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80182c6:	68bb      	ldr	r3, [r7, #8]
 80182c8:	3304      	adds	r3, #4
 80182ca:	4618      	mov	r0, r3
 80182cc:	f7fe fcd4 	bl	8016c78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80182d0:	68bb      	ldr	r3, [r7, #8]
 80182d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d004      	beq.n	80182e2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80182d8:	68bb      	ldr	r3, [r7, #8]
 80182da:	3318      	adds	r3, #24
 80182dc:	4618      	mov	r0, r3
 80182de:	f7fe fccb 	bl	8016c78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80182e2:	68bb      	ldr	r3, [r7, #8]
 80182e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80182e6:	2201      	movs	r2, #1
 80182e8:	409a      	lsls	r2, r3
 80182ea:	4b24      	ldr	r3, [pc, #144]	@ (801837c <xTaskIncrementTick+0x164>)
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	4313      	orrs	r3, r2
 80182f0:	4a22      	ldr	r2, [pc, #136]	@ (801837c <xTaskIncrementTick+0x164>)
 80182f2:	6013      	str	r3, [r2, #0]
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80182f8:	4613      	mov	r3, r2
 80182fa:	009b      	lsls	r3, r3, #2
 80182fc:	4413      	add	r3, r2
 80182fe:	009b      	lsls	r3, r3, #2
 8018300:	4a1f      	ldr	r2, [pc, #124]	@ (8018380 <xTaskIncrementTick+0x168>)
 8018302:	441a      	add	r2, r3
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	3304      	adds	r3, #4
 8018308:	4619      	mov	r1, r3
 801830a:	4610      	mov	r0, r2
 801830c:	f7fe fc57 	bl	8016bbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018310:	68bb      	ldr	r3, [r7, #8]
 8018312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018314:	4b1b      	ldr	r3, [pc, #108]	@ (8018384 <xTaskIncrementTick+0x16c>)
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801831a:	429a      	cmp	r2, r3
 801831c:	d3b9      	bcc.n	8018292 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801831e:	2301      	movs	r3, #1
 8018320:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018322:	e7b6      	b.n	8018292 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018324:	4b17      	ldr	r3, [pc, #92]	@ (8018384 <xTaskIncrementTick+0x16c>)
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801832a:	4915      	ldr	r1, [pc, #84]	@ (8018380 <xTaskIncrementTick+0x168>)
 801832c:	4613      	mov	r3, r2
 801832e:	009b      	lsls	r3, r3, #2
 8018330:	4413      	add	r3, r2
 8018332:	009b      	lsls	r3, r3, #2
 8018334:	440b      	add	r3, r1
 8018336:	681b      	ldr	r3, [r3, #0]
 8018338:	2b01      	cmp	r3, #1
 801833a:	d907      	bls.n	801834c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 801833c:	2301      	movs	r3, #1
 801833e:	617b      	str	r3, [r7, #20]
 8018340:	e004      	b.n	801834c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018342:	4b11      	ldr	r3, [pc, #68]	@ (8018388 <xTaskIncrementTick+0x170>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	3301      	adds	r3, #1
 8018348:	4a0f      	ldr	r2, [pc, #60]	@ (8018388 <xTaskIncrementTick+0x170>)
 801834a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801834c:	4b0f      	ldr	r3, [pc, #60]	@ (801838c <xTaskIncrementTick+0x174>)
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d001      	beq.n	8018358 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8018354:	2301      	movs	r3, #1
 8018356:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8018358:	697b      	ldr	r3, [r7, #20]
}
 801835a:	4618      	mov	r0, r3
 801835c:	3718      	adds	r7, #24
 801835e:	46bd      	mov	sp, r7
 8018360:	bd80      	pop	{r7, pc}
 8018362:	bf00      	nop
 8018364:	200016e8 	.word	0x200016e8
 8018368:	200016c4 	.word	0x200016c4
 801836c:	20001678 	.word	0x20001678
 8018370:	2000167c 	.word	0x2000167c
 8018374:	200016d8 	.word	0x200016d8
 8018378:	200016e0 	.word	0x200016e0
 801837c:	200016c8 	.word	0x200016c8
 8018380:	200015c4 	.word	0x200015c4
 8018384:	200015c0 	.word	0x200015c0
 8018388:	200016d0 	.word	0x200016d0
 801838c:	200016d4 	.word	0x200016d4

08018390 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b088      	sub	sp, #32
 8018394:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018396:	4b3b      	ldr	r3, [pc, #236]	@ (8018484 <vTaskSwitchContext+0xf4>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d003      	beq.n	80183a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801839e:	4b3a      	ldr	r3, [pc, #232]	@ (8018488 <vTaskSwitchContext+0xf8>)
 80183a0:	2201      	movs	r2, #1
 80183a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80183a4:	e069      	b.n	801847a <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80183a6:	4b38      	ldr	r3, [pc, #224]	@ (8018488 <vTaskSwitchContext+0xf8>)
 80183a8:	2200      	movs	r2, #0
 80183aa:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80183ac:	4b37      	ldr	r3, [pc, #220]	@ (801848c <vTaskSwitchContext+0xfc>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183b2:	61fb      	str	r3, [r7, #28]
 80183b4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80183b8:	61bb      	str	r3, [r7, #24]
 80183ba:	69fb      	ldr	r3, [r7, #28]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	69ba      	ldr	r2, [r7, #24]
 80183c0:	429a      	cmp	r2, r3
 80183c2:	d111      	bne.n	80183e8 <vTaskSwitchContext+0x58>
 80183c4:	69fb      	ldr	r3, [r7, #28]
 80183c6:	3304      	adds	r3, #4
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	69ba      	ldr	r2, [r7, #24]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d10b      	bne.n	80183e8 <vTaskSwitchContext+0x58>
 80183d0:	69fb      	ldr	r3, [r7, #28]
 80183d2:	3308      	adds	r3, #8
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	69ba      	ldr	r2, [r7, #24]
 80183d8:	429a      	cmp	r2, r3
 80183da:	d105      	bne.n	80183e8 <vTaskSwitchContext+0x58>
 80183dc:	69fb      	ldr	r3, [r7, #28]
 80183de:	330c      	adds	r3, #12
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	69ba      	ldr	r2, [r7, #24]
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d008      	beq.n	80183fa <vTaskSwitchContext+0x6a>
 80183e8:	4b28      	ldr	r3, [pc, #160]	@ (801848c <vTaskSwitchContext+0xfc>)
 80183ea:	681a      	ldr	r2, [r3, #0]
 80183ec:	4b27      	ldr	r3, [pc, #156]	@ (801848c <vTaskSwitchContext+0xfc>)
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	3334      	adds	r3, #52	@ 0x34
 80183f2:	4619      	mov	r1, r3
 80183f4:	4610      	mov	r0, r2
 80183f6:	f7e8 ff61 	bl	80012bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183fa:	4b25      	ldr	r3, [pc, #148]	@ (8018490 <vTaskSwitchContext+0x100>)
 80183fc:	681b      	ldr	r3, [r3, #0]
 80183fe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	fab3 f383 	clz	r3, r3
 8018406:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018408:	7afb      	ldrb	r3, [r7, #11]
 801840a:	f1c3 031f 	rsb	r3, r3, #31
 801840e:	617b      	str	r3, [r7, #20]
 8018410:	4920      	ldr	r1, [pc, #128]	@ (8018494 <vTaskSwitchContext+0x104>)
 8018412:	697a      	ldr	r2, [r7, #20]
 8018414:	4613      	mov	r3, r2
 8018416:	009b      	lsls	r3, r3, #2
 8018418:	4413      	add	r3, r2
 801841a:	009b      	lsls	r3, r3, #2
 801841c:	440b      	add	r3, r1
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d10d      	bne.n	8018440 <vTaskSwitchContext+0xb0>
	__asm volatile
 8018424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018428:	b672      	cpsid	i
 801842a:	f383 8811 	msr	BASEPRI, r3
 801842e:	f3bf 8f6f 	isb	sy
 8018432:	f3bf 8f4f 	dsb	sy
 8018436:	b662      	cpsie	i
 8018438:	607b      	str	r3, [r7, #4]
}
 801843a:	bf00      	nop
 801843c:	bf00      	nop
 801843e:	e7fd      	b.n	801843c <vTaskSwitchContext+0xac>
 8018440:	697a      	ldr	r2, [r7, #20]
 8018442:	4613      	mov	r3, r2
 8018444:	009b      	lsls	r3, r3, #2
 8018446:	4413      	add	r3, r2
 8018448:	009b      	lsls	r3, r3, #2
 801844a:	4a12      	ldr	r2, [pc, #72]	@ (8018494 <vTaskSwitchContext+0x104>)
 801844c:	4413      	add	r3, r2
 801844e:	613b      	str	r3, [r7, #16]
 8018450:	693b      	ldr	r3, [r7, #16]
 8018452:	685b      	ldr	r3, [r3, #4]
 8018454:	685a      	ldr	r2, [r3, #4]
 8018456:	693b      	ldr	r3, [r7, #16]
 8018458:	605a      	str	r2, [r3, #4]
 801845a:	693b      	ldr	r3, [r7, #16]
 801845c:	685a      	ldr	r2, [r3, #4]
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	3308      	adds	r3, #8
 8018462:	429a      	cmp	r2, r3
 8018464:	d104      	bne.n	8018470 <vTaskSwitchContext+0xe0>
 8018466:	693b      	ldr	r3, [r7, #16]
 8018468:	685b      	ldr	r3, [r3, #4]
 801846a:	685a      	ldr	r2, [r3, #4]
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	605a      	str	r2, [r3, #4]
 8018470:	693b      	ldr	r3, [r7, #16]
 8018472:	685b      	ldr	r3, [r3, #4]
 8018474:	68db      	ldr	r3, [r3, #12]
 8018476:	4a05      	ldr	r2, [pc, #20]	@ (801848c <vTaskSwitchContext+0xfc>)
 8018478:	6013      	str	r3, [r2, #0]
}
 801847a:	bf00      	nop
 801847c:	3720      	adds	r7, #32
 801847e:	46bd      	mov	sp, r7
 8018480:	bd80      	pop	{r7, pc}
 8018482:	bf00      	nop
 8018484:	200016e8 	.word	0x200016e8
 8018488:	200016d4 	.word	0x200016d4
 801848c:	200015c0 	.word	0x200015c0
 8018490:	200016c8 	.word	0x200016c8
 8018494:	200015c4 	.word	0x200015c4

08018498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018498:	b580      	push	{r7, lr}
 801849a:	b084      	sub	sp, #16
 801849c:	af00      	add	r7, sp, #0
 801849e:	6078      	str	r0, [r7, #4]
 80184a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d10d      	bne.n	80184c4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80184a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80184ac:	b672      	cpsid	i
 80184ae:	f383 8811 	msr	BASEPRI, r3
 80184b2:	f3bf 8f6f 	isb	sy
 80184b6:	f3bf 8f4f 	dsb	sy
 80184ba:	b662      	cpsie	i
 80184bc:	60fb      	str	r3, [r7, #12]
}
 80184be:	bf00      	nop
 80184c0:	bf00      	nop
 80184c2:	e7fd      	b.n	80184c0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184c4:	4b07      	ldr	r3, [pc, #28]	@ (80184e4 <vTaskPlaceOnEventList+0x4c>)
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	3318      	adds	r3, #24
 80184ca:	4619      	mov	r1, r3
 80184cc:	6878      	ldr	r0, [r7, #4]
 80184ce:	f7fe fb9a 	bl	8016c06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80184d2:	2101      	movs	r1, #1
 80184d4:	6838      	ldr	r0, [r7, #0]
 80184d6:	f000 fbaf 	bl	8018c38 <prvAddCurrentTaskToDelayedList>
}
 80184da:	bf00      	nop
 80184dc:	3710      	adds	r7, #16
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	200015c0 	.word	0x200015c0

080184e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b086      	sub	sp, #24
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	68db      	ldr	r3, [r3, #12]
 80184f4:	68db      	ldr	r3, [r3, #12]
 80184f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80184f8:	693b      	ldr	r3, [r7, #16]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d10d      	bne.n	801851a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80184fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018502:	b672      	cpsid	i
 8018504:	f383 8811 	msr	BASEPRI, r3
 8018508:	f3bf 8f6f 	isb	sy
 801850c:	f3bf 8f4f 	dsb	sy
 8018510:	b662      	cpsie	i
 8018512:	60fb      	str	r3, [r7, #12]
}
 8018514:	bf00      	nop
 8018516:	bf00      	nop
 8018518:	e7fd      	b.n	8018516 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	3318      	adds	r3, #24
 801851e:	4618      	mov	r0, r3
 8018520:	f7fe fbaa 	bl	8016c78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018524:	4b1d      	ldr	r3, [pc, #116]	@ (801859c <xTaskRemoveFromEventList+0xb4>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d11c      	bne.n	8018566 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801852c:	693b      	ldr	r3, [r7, #16]
 801852e:	3304      	adds	r3, #4
 8018530:	4618      	mov	r0, r3
 8018532:	f7fe fba1 	bl	8016c78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018536:	693b      	ldr	r3, [r7, #16]
 8018538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801853a:	2201      	movs	r2, #1
 801853c:	409a      	lsls	r2, r3
 801853e:	4b18      	ldr	r3, [pc, #96]	@ (80185a0 <xTaskRemoveFromEventList+0xb8>)
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	4313      	orrs	r3, r2
 8018544:	4a16      	ldr	r2, [pc, #88]	@ (80185a0 <xTaskRemoveFromEventList+0xb8>)
 8018546:	6013      	str	r3, [r2, #0]
 8018548:	693b      	ldr	r3, [r7, #16]
 801854a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801854c:	4613      	mov	r3, r2
 801854e:	009b      	lsls	r3, r3, #2
 8018550:	4413      	add	r3, r2
 8018552:	009b      	lsls	r3, r3, #2
 8018554:	4a13      	ldr	r2, [pc, #76]	@ (80185a4 <xTaskRemoveFromEventList+0xbc>)
 8018556:	441a      	add	r2, r3
 8018558:	693b      	ldr	r3, [r7, #16]
 801855a:	3304      	adds	r3, #4
 801855c:	4619      	mov	r1, r3
 801855e:	4610      	mov	r0, r2
 8018560:	f7fe fb2d 	bl	8016bbe <vListInsertEnd>
 8018564:	e005      	b.n	8018572 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018566:	693b      	ldr	r3, [r7, #16]
 8018568:	3318      	adds	r3, #24
 801856a:	4619      	mov	r1, r3
 801856c:	480e      	ldr	r0, [pc, #56]	@ (80185a8 <xTaskRemoveFromEventList+0xc0>)
 801856e:	f7fe fb26 	bl	8016bbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018572:	693b      	ldr	r3, [r7, #16]
 8018574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018576:	4b0d      	ldr	r3, [pc, #52]	@ (80185ac <xTaskRemoveFromEventList+0xc4>)
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801857c:	429a      	cmp	r2, r3
 801857e:	d905      	bls.n	801858c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018580:	2301      	movs	r3, #1
 8018582:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8018584:	4b0a      	ldr	r3, [pc, #40]	@ (80185b0 <xTaskRemoveFromEventList+0xc8>)
 8018586:	2201      	movs	r2, #1
 8018588:	601a      	str	r2, [r3, #0]
 801858a:	e001      	b.n	8018590 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 801858c:	2300      	movs	r3, #0
 801858e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018590:	697b      	ldr	r3, [r7, #20]
}
 8018592:	4618      	mov	r0, r3
 8018594:	3718      	adds	r7, #24
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}
 801859a:	bf00      	nop
 801859c:	200016e8 	.word	0x200016e8
 80185a0:	200016c8 	.word	0x200016c8
 80185a4:	200015c4 	.word	0x200015c4
 80185a8:	20001680 	.word	0x20001680
 80185ac:	200015c0 	.word	0x200015c0
 80185b0:	200016d4 	.word	0x200016d4

080185b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80185b4:	b480      	push	{r7}
 80185b6:	b083      	sub	sp, #12
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80185bc:	4b06      	ldr	r3, [pc, #24]	@ (80185d8 <vTaskInternalSetTimeOutState+0x24>)
 80185be:	681a      	ldr	r2, [r3, #0]
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80185c4:	4b05      	ldr	r3, [pc, #20]	@ (80185dc <vTaskInternalSetTimeOutState+0x28>)
 80185c6:	681a      	ldr	r2, [r3, #0]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	605a      	str	r2, [r3, #4]
}
 80185cc:	bf00      	nop
 80185ce:	370c      	adds	r7, #12
 80185d0:	46bd      	mov	sp, r7
 80185d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d6:	4770      	bx	lr
 80185d8:	200016d8 	.word	0x200016d8
 80185dc:	200016c4 	.word	0x200016c4

080185e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b088      	sub	sp, #32
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
 80185e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d10d      	bne.n	801860c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80185f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80185f4:	b672      	cpsid	i
 80185f6:	f383 8811 	msr	BASEPRI, r3
 80185fa:	f3bf 8f6f 	isb	sy
 80185fe:	f3bf 8f4f 	dsb	sy
 8018602:	b662      	cpsie	i
 8018604:	613b      	str	r3, [r7, #16]
}
 8018606:	bf00      	nop
 8018608:	bf00      	nop
 801860a:	e7fd      	b.n	8018608 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801860c:	683b      	ldr	r3, [r7, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d10d      	bne.n	801862e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8018612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018616:	b672      	cpsid	i
 8018618:	f383 8811 	msr	BASEPRI, r3
 801861c:	f3bf 8f6f 	isb	sy
 8018620:	f3bf 8f4f 	dsb	sy
 8018624:	b662      	cpsie	i
 8018626:	60fb      	str	r3, [r7, #12]
}
 8018628:	bf00      	nop
 801862a:	bf00      	nop
 801862c:	e7fd      	b.n	801862a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801862e:	f000 fc75 	bl	8018f1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8018632:	4b1d      	ldr	r3, [pc, #116]	@ (80186a8 <xTaskCheckForTimeOut+0xc8>)
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	685b      	ldr	r3, [r3, #4]
 801863c:	69ba      	ldr	r2, [r7, #24]
 801863e:	1ad3      	subs	r3, r2, r3
 8018640:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	681b      	ldr	r3, [r3, #0]
 8018646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801864a:	d102      	bne.n	8018652 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801864c:	2300      	movs	r3, #0
 801864e:	61fb      	str	r3, [r7, #28]
 8018650:	e023      	b.n	801869a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681a      	ldr	r2, [r3, #0]
 8018656:	4b15      	ldr	r3, [pc, #84]	@ (80186ac <xTaskCheckForTimeOut+0xcc>)
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	429a      	cmp	r2, r3
 801865c:	d007      	beq.n	801866e <xTaskCheckForTimeOut+0x8e>
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	685b      	ldr	r3, [r3, #4]
 8018662:	69ba      	ldr	r2, [r7, #24]
 8018664:	429a      	cmp	r2, r3
 8018666:	d302      	bcc.n	801866e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018668:	2301      	movs	r3, #1
 801866a:	61fb      	str	r3, [r7, #28]
 801866c:	e015      	b.n	801869a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	697a      	ldr	r2, [r7, #20]
 8018674:	429a      	cmp	r2, r3
 8018676:	d20b      	bcs.n	8018690 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018678:	683b      	ldr	r3, [r7, #0]
 801867a:	681a      	ldr	r2, [r3, #0]
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	1ad2      	subs	r2, r2, r3
 8018680:	683b      	ldr	r3, [r7, #0]
 8018682:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018684:	6878      	ldr	r0, [r7, #4]
 8018686:	f7ff ff95 	bl	80185b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801868a:	2300      	movs	r3, #0
 801868c:	61fb      	str	r3, [r7, #28]
 801868e:	e004      	b.n	801869a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	2200      	movs	r2, #0
 8018694:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018696:	2301      	movs	r3, #1
 8018698:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801869a:	f000 fc75 	bl	8018f88 <vPortExitCritical>

	return xReturn;
 801869e:	69fb      	ldr	r3, [r7, #28]
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	3720      	adds	r7, #32
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}
 80186a8:	200016c4 	.word	0x200016c4
 80186ac:	200016d8 	.word	0x200016d8

080186b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80186b0:	b480      	push	{r7}
 80186b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80186b4:	4b03      	ldr	r3, [pc, #12]	@ (80186c4 <vTaskMissedYield+0x14>)
 80186b6:	2201      	movs	r2, #1
 80186b8:	601a      	str	r2, [r3, #0]
}
 80186ba:	bf00      	nop
 80186bc:	46bd      	mov	sp, r7
 80186be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186c2:	4770      	bx	lr
 80186c4:	200016d4 	.word	0x200016d4

080186c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80186c8:	b580      	push	{r7, lr}
 80186ca:	b082      	sub	sp, #8
 80186cc:	af00      	add	r7, sp, #0
 80186ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80186d0:	f000 f854 	bl	801877c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80186d4:	4b07      	ldr	r3, [pc, #28]	@ (80186f4 <prvIdleTask+0x2c>)
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	2b01      	cmp	r3, #1
 80186da:	d907      	bls.n	80186ec <prvIdleTask+0x24>
			{
				taskYIELD();
 80186dc:	4b06      	ldr	r3, [pc, #24]	@ (80186f8 <prvIdleTask+0x30>)
 80186de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80186e2:	601a      	str	r2, [r3, #0]
 80186e4:	f3bf 8f4f 	dsb	sy
 80186e8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80186ec:	f7e8 fddf 	bl	80012ae <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80186f0:	e7ee      	b.n	80186d0 <prvIdleTask+0x8>
 80186f2:	bf00      	nop
 80186f4:	200015c4 	.word	0x200015c4
 80186f8:	e000ed04 	.word	0xe000ed04

080186fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b082      	sub	sp, #8
 8018700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018702:	2300      	movs	r3, #0
 8018704:	607b      	str	r3, [r7, #4]
 8018706:	e00c      	b.n	8018722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018708:	687a      	ldr	r2, [r7, #4]
 801870a:	4613      	mov	r3, r2
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	4413      	add	r3, r2
 8018710:	009b      	lsls	r3, r3, #2
 8018712:	4a12      	ldr	r2, [pc, #72]	@ (801875c <prvInitialiseTaskLists+0x60>)
 8018714:	4413      	add	r3, r2
 8018716:	4618      	mov	r0, r3
 8018718:	f7fe fa24 	bl	8016b64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	3301      	adds	r3, #1
 8018720:	607b      	str	r3, [r7, #4]
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	2b06      	cmp	r3, #6
 8018726:	d9ef      	bls.n	8018708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018728:	480d      	ldr	r0, [pc, #52]	@ (8018760 <prvInitialiseTaskLists+0x64>)
 801872a:	f7fe fa1b 	bl	8016b64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801872e:	480d      	ldr	r0, [pc, #52]	@ (8018764 <prvInitialiseTaskLists+0x68>)
 8018730:	f7fe fa18 	bl	8016b64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018734:	480c      	ldr	r0, [pc, #48]	@ (8018768 <prvInitialiseTaskLists+0x6c>)
 8018736:	f7fe fa15 	bl	8016b64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801873a:	480c      	ldr	r0, [pc, #48]	@ (801876c <prvInitialiseTaskLists+0x70>)
 801873c:	f7fe fa12 	bl	8016b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018740:	480b      	ldr	r0, [pc, #44]	@ (8018770 <prvInitialiseTaskLists+0x74>)
 8018742:	f7fe fa0f 	bl	8016b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018746:	4b0b      	ldr	r3, [pc, #44]	@ (8018774 <prvInitialiseTaskLists+0x78>)
 8018748:	4a05      	ldr	r2, [pc, #20]	@ (8018760 <prvInitialiseTaskLists+0x64>)
 801874a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801874c:	4b0a      	ldr	r3, [pc, #40]	@ (8018778 <prvInitialiseTaskLists+0x7c>)
 801874e:	4a05      	ldr	r2, [pc, #20]	@ (8018764 <prvInitialiseTaskLists+0x68>)
 8018750:	601a      	str	r2, [r3, #0]
}
 8018752:	bf00      	nop
 8018754:	3708      	adds	r7, #8
 8018756:	46bd      	mov	sp, r7
 8018758:	bd80      	pop	{r7, pc}
 801875a:	bf00      	nop
 801875c:	200015c4 	.word	0x200015c4
 8018760:	20001650 	.word	0x20001650
 8018764:	20001664 	.word	0x20001664
 8018768:	20001680 	.word	0x20001680
 801876c:	20001694 	.word	0x20001694
 8018770:	200016ac 	.word	0x200016ac
 8018774:	20001678 	.word	0x20001678
 8018778:	2000167c 	.word	0x2000167c

0801877c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b082      	sub	sp, #8
 8018780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018782:	e019      	b.n	80187b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018784:	f000 fbca 	bl	8018f1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018788:	4b10      	ldr	r3, [pc, #64]	@ (80187cc <prvCheckTasksWaitingTermination+0x50>)
 801878a:	68db      	ldr	r3, [r3, #12]
 801878c:	68db      	ldr	r3, [r3, #12]
 801878e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	3304      	adds	r3, #4
 8018794:	4618      	mov	r0, r3
 8018796:	f7fe fa6f 	bl	8016c78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801879a:	4b0d      	ldr	r3, [pc, #52]	@ (80187d0 <prvCheckTasksWaitingTermination+0x54>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	3b01      	subs	r3, #1
 80187a0:	4a0b      	ldr	r2, [pc, #44]	@ (80187d0 <prvCheckTasksWaitingTermination+0x54>)
 80187a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80187a4:	4b0b      	ldr	r3, [pc, #44]	@ (80187d4 <prvCheckTasksWaitingTermination+0x58>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	3b01      	subs	r3, #1
 80187aa:	4a0a      	ldr	r2, [pc, #40]	@ (80187d4 <prvCheckTasksWaitingTermination+0x58>)
 80187ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80187ae:	f000 fbeb 	bl	8018f88 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f000 f810 	bl	80187d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80187b8:	4b06      	ldr	r3, [pc, #24]	@ (80187d4 <prvCheckTasksWaitingTermination+0x58>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d1e1      	bne.n	8018784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80187c0:	bf00      	nop
 80187c2:	bf00      	nop
 80187c4:	3708      	adds	r7, #8
 80187c6:	46bd      	mov	sp, r7
 80187c8:	bd80      	pop	{r7, pc}
 80187ca:	bf00      	nop
 80187cc:	20001694 	.word	0x20001694
 80187d0:	200016c0 	.word	0x200016c0
 80187d4:	200016a8 	.word	0x200016a8

080187d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80187d8:	b580      	push	{r7, lr}
 80187da:	b084      	sub	sp, #16
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d108      	bne.n	80187fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80187ea:	687b      	ldr	r3, [r7, #4]
 80187ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80187ee:	4618      	mov	r0, r3
 80187f0:	f000 fd94 	bl	801931c <vPortFree>
				vPortFree( pxTCB );
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f000 fd91 	bl	801931c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80187fa:	e01b      	b.n	8018834 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018802:	2b01      	cmp	r3, #1
 8018804:	d103      	bne.n	801880e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f000 fd88 	bl	801931c <vPortFree>
	}
 801880c:	e012      	b.n	8018834 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018814:	2b02      	cmp	r3, #2
 8018816:	d00d      	beq.n	8018834 <prvDeleteTCB+0x5c>
	__asm volatile
 8018818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801881c:	b672      	cpsid	i
 801881e:	f383 8811 	msr	BASEPRI, r3
 8018822:	f3bf 8f6f 	isb	sy
 8018826:	f3bf 8f4f 	dsb	sy
 801882a:	b662      	cpsie	i
 801882c:	60fb      	str	r3, [r7, #12]
}
 801882e:	bf00      	nop
 8018830:	bf00      	nop
 8018832:	e7fd      	b.n	8018830 <prvDeleteTCB+0x58>
	}
 8018834:	bf00      	nop
 8018836:	3710      	adds	r7, #16
 8018838:	46bd      	mov	sp, r7
 801883a:	bd80      	pop	{r7, pc}

0801883c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801883c:	b480      	push	{r7}
 801883e:	b083      	sub	sp, #12
 8018840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018842:	4b0c      	ldr	r3, [pc, #48]	@ (8018874 <prvResetNextTaskUnblockTime+0x38>)
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d104      	bne.n	8018856 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801884c:	4b0a      	ldr	r3, [pc, #40]	@ (8018878 <prvResetNextTaskUnblockTime+0x3c>)
 801884e:	f04f 32ff 	mov.w	r2, #4294967295
 8018852:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018854:	e008      	b.n	8018868 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018856:	4b07      	ldr	r3, [pc, #28]	@ (8018874 <prvResetNextTaskUnblockTime+0x38>)
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	68db      	ldr	r3, [r3, #12]
 801885c:	68db      	ldr	r3, [r3, #12]
 801885e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	685b      	ldr	r3, [r3, #4]
 8018864:	4a04      	ldr	r2, [pc, #16]	@ (8018878 <prvResetNextTaskUnblockTime+0x3c>)
 8018866:	6013      	str	r3, [r2, #0]
}
 8018868:	bf00      	nop
 801886a:	370c      	adds	r7, #12
 801886c:	46bd      	mov	sp, r7
 801886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018872:	4770      	bx	lr
 8018874:	20001678 	.word	0x20001678
 8018878:	200016e0 	.word	0x200016e0

0801887c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801887c:	b480      	push	{r7}
 801887e:	b083      	sub	sp, #12
 8018880:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018882:	4b0b      	ldr	r3, [pc, #44]	@ (80188b0 <xTaskGetSchedulerState+0x34>)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d102      	bne.n	8018890 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801888a:	2301      	movs	r3, #1
 801888c:	607b      	str	r3, [r7, #4]
 801888e:	e008      	b.n	80188a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018890:	4b08      	ldr	r3, [pc, #32]	@ (80188b4 <xTaskGetSchedulerState+0x38>)
 8018892:	681b      	ldr	r3, [r3, #0]
 8018894:	2b00      	cmp	r3, #0
 8018896:	d102      	bne.n	801889e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8018898:	2302      	movs	r3, #2
 801889a:	607b      	str	r3, [r7, #4]
 801889c:	e001      	b.n	80188a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801889e:	2300      	movs	r3, #0
 80188a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80188a2:	687b      	ldr	r3, [r7, #4]
	}
 80188a4:	4618      	mov	r0, r3
 80188a6:	370c      	adds	r7, #12
 80188a8:	46bd      	mov	sp, r7
 80188aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ae:	4770      	bx	lr
 80188b0:	200016cc 	.word	0x200016cc
 80188b4:	200016e8 	.word	0x200016e8

080188b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80188b8:	b580      	push	{r7, lr}
 80188ba:	b084      	sub	sp, #16
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80188c4:	2300      	movs	r3, #0
 80188c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d069      	beq.n	80189a2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80188ce:	68bb      	ldr	r3, [r7, #8]
 80188d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80188d2:	4b36      	ldr	r3, [pc, #216]	@ (80189ac <xTaskPriorityInherit+0xf4>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188d8:	429a      	cmp	r2, r3
 80188da:	d259      	bcs.n	8018990 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80188dc:	68bb      	ldr	r3, [r7, #8]
 80188de:	699b      	ldr	r3, [r3, #24]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	db06      	blt.n	80188f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80188e4:	4b31      	ldr	r3, [pc, #196]	@ (80189ac <xTaskPriorityInherit+0xf4>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188ea:	f1c3 0207 	rsb	r2, r3, #7
 80188ee:	68bb      	ldr	r3, [r7, #8]
 80188f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80188f2:	68bb      	ldr	r3, [r7, #8]
 80188f4:	6959      	ldr	r1, [r3, #20]
 80188f6:	68bb      	ldr	r3, [r7, #8]
 80188f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80188fa:	4613      	mov	r3, r2
 80188fc:	009b      	lsls	r3, r3, #2
 80188fe:	4413      	add	r3, r2
 8018900:	009b      	lsls	r3, r3, #2
 8018902:	4a2b      	ldr	r2, [pc, #172]	@ (80189b0 <xTaskPriorityInherit+0xf8>)
 8018904:	4413      	add	r3, r2
 8018906:	4299      	cmp	r1, r3
 8018908:	d13a      	bne.n	8018980 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801890a:	68bb      	ldr	r3, [r7, #8]
 801890c:	3304      	adds	r3, #4
 801890e:	4618      	mov	r0, r3
 8018910:	f7fe f9b2 	bl	8016c78 <uxListRemove>
 8018914:	4603      	mov	r3, r0
 8018916:	2b00      	cmp	r3, #0
 8018918:	d115      	bne.n	8018946 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801891e:	4924      	ldr	r1, [pc, #144]	@ (80189b0 <xTaskPriorityInherit+0xf8>)
 8018920:	4613      	mov	r3, r2
 8018922:	009b      	lsls	r3, r3, #2
 8018924:	4413      	add	r3, r2
 8018926:	009b      	lsls	r3, r3, #2
 8018928:	440b      	add	r3, r1
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d10a      	bne.n	8018946 <xTaskPriorityInherit+0x8e>
 8018930:	68bb      	ldr	r3, [r7, #8]
 8018932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018934:	2201      	movs	r2, #1
 8018936:	fa02 f303 	lsl.w	r3, r2, r3
 801893a:	43da      	mvns	r2, r3
 801893c:	4b1d      	ldr	r3, [pc, #116]	@ (80189b4 <xTaskPriorityInherit+0xfc>)
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	4013      	ands	r3, r2
 8018942:	4a1c      	ldr	r2, [pc, #112]	@ (80189b4 <xTaskPriorityInherit+0xfc>)
 8018944:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018946:	4b19      	ldr	r3, [pc, #100]	@ (80189ac <xTaskPriorityInherit+0xf4>)
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801894c:	68bb      	ldr	r3, [r7, #8]
 801894e:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018954:	2201      	movs	r2, #1
 8018956:	409a      	lsls	r2, r3
 8018958:	4b16      	ldr	r3, [pc, #88]	@ (80189b4 <xTaskPriorityInherit+0xfc>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	4313      	orrs	r3, r2
 801895e:	4a15      	ldr	r2, [pc, #84]	@ (80189b4 <xTaskPriorityInherit+0xfc>)
 8018960:	6013      	str	r3, [r2, #0]
 8018962:	68bb      	ldr	r3, [r7, #8]
 8018964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018966:	4613      	mov	r3, r2
 8018968:	009b      	lsls	r3, r3, #2
 801896a:	4413      	add	r3, r2
 801896c:	009b      	lsls	r3, r3, #2
 801896e:	4a10      	ldr	r2, [pc, #64]	@ (80189b0 <xTaskPriorityInherit+0xf8>)
 8018970:	441a      	add	r2, r3
 8018972:	68bb      	ldr	r3, [r7, #8]
 8018974:	3304      	adds	r3, #4
 8018976:	4619      	mov	r1, r3
 8018978:	4610      	mov	r0, r2
 801897a:	f7fe f920 	bl	8016bbe <vListInsertEnd>
 801897e:	e004      	b.n	801898a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018980:	4b0a      	ldr	r3, [pc, #40]	@ (80189ac <xTaskPriorityInherit+0xf4>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801898a:	2301      	movs	r3, #1
 801898c:	60fb      	str	r3, [r7, #12]
 801898e:	e008      	b.n	80189a2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018994:	4b05      	ldr	r3, [pc, #20]	@ (80189ac <xTaskPriorityInherit+0xf4>)
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801899a:	429a      	cmp	r2, r3
 801899c:	d201      	bcs.n	80189a2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801899e:	2301      	movs	r3, #1
 80189a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80189a2:	68fb      	ldr	r3, [r7, #12]
	}
 80189a4:	4618      	mov	r0, r3
 80189a6:	3710      	adds	r7, #16
 80189a8:	46bd      	mov	sp, r7
 80189aa:	bd80      	pop	{r7, pc}
 80189ac:	200015c0 	.word	0x200015c0
 80189b0:	200015c4 	.word	0x200015c4
 80189b4:	200016c8 	.word	0x200016c8

080189b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80189b8:	b580      	push	{r7, lr}
 80189ba:	b086      	sub	sp, #24
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80189c4:	2300      	movs	r3, #0
 80189c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d074      	beq.n	8018ab8 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80189ce:	4b3d      	ldr	r3, [pc, #244]	@ (8018ac4 <xTaskPriorityDisinherit+0x10c>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	693a      	ldr	r2, [r7, #16]
 80189d4:	429a      	cmp	r2, r3
 80189d6:	d00d      	beq.n	80189f4 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80189d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189dc:	b672      	cpsid	i
 80189de:	f383 8811 	msr	BASEPRI, r3
 80189e2:	f3bf 8f6f 	isb	sy
 80189e6:	f3bf 8f4f 	dsb	sy
 80189ea:	b662      	cpsie	i
 80189ec:	60fb      	str	r3, [r7, #12]
}
 80189ee:	bf00      	nop
 80189f0:	bf00      	nop
 80189f2:	e7fd      	b.n	80189f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80189f4:	693b      	ldr	r3, [r7, #16]
 80189f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	d10d      	bne.n	8018a18 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80189fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018a00:	b672      	cpsid	i
 8018a02:	f383 8811 	msr	BASEPRI, r3
 8018a06:	f3bf 8f6f 	isb	sy
 8018a0a:	f3bf 8f4f 	dsb	sy
 8018a0e:	b662      	cpsie	i
 8018a10:	60bb      	str	r3, [r7, #8]
}
 8018a12:	bf00      	nop
 8018a14:	bf00      	nop
 8018a16:	e7fd      	b.n	8018a14 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8018a18:	693b      	ldr	r3, [r7, #16]
 8018a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018a1c:	1e5a      	subs	r2, r3, #1
 8018a1e:	693b      	ldr	r3, [r7, #16]
 8018a20:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a26:	693b      	ldr	r3, [r7, #16]
 8018a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018a2a:	429a      	cmp	r2, r3
 8018a2c:	d044      	beq.n	8018ab8 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018a2e:	693b      	ldr	r3, [r7, #16]
 8018a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d140      	bne.n	8018ab8 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a36:	693b      	ldr	r3, [r7, #16]
 8018a38:	3304      	adds	r3, #4
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	f7fe f91c 	bl	8016c78 <uxListRemove>
 8018a40:	4603      	mov	r3, r0
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d115      	bne.n	8018a72 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018a46:	693b      	ldr	r3, [r7, #16]
 8018a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a4a:	491f      	ldr	r1, [pc, #124]	@ (8018ac8 <xTaskPriorityDisinherit+0x110>)
 8018a4c:	4613      	mov	r3, r2
 8018a4e:	009b      	lsls	r3, r3, #2
 8018a50:	4413      	add	r3, r2
 8018a52:	009b      	lsls	r3, r3, #2
 8018a54:	440b      	add	r3, r1
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	2b00      	cmp	r3, #0
 8018a5a:	d10a      	bne.n	8018a72 <xTaskPriorityDisinherit+0xba>
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a60:	2201      	movs	r2, #1
 8018a62:	fa02 f303 	lsl.w	r3, r2, r3
 8018a66:	43da      	mvns	r2, r3
 8018a68:	4b18      	ldr	r3, [pc, #96]	@ (8018acc <xTaskPriorityDisinherit+0x114>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	4013      	ands	r3, r2
 8018a6e:	4a17      	ldr	r2, [pc, #92]	@ (8018acc <xTaskPriorityDisinherit+0x114>)
 8018a70:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018a72:	693b      	ldr	r3, [r7, #16]
 8018a74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018a76:	693b      	ldr	r3, [r7, #16]
 8018a78:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a7a:	693b      	ldr	r3, [r7, #16]
 8018a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a7e:	f1c3 0207 	rsb	r2, r3, #7
 8018a82:	693b      	ldr	r3, [r7, #16]
 8018a84:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018a86:	693b      	ldr	r3, [r7, #16]
 8018a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a8a:	2201      	movs	r2, #1
 8018a8c:	409a      	lsls	r2, r3
 8018a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8018acc <xTaskPriorityDisinherit+0x114>)
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	4313      	orrs	r3, r2
 8018a94:	4a0d      	ldr	r2, [pc, #52]	@ (8018acc <xTaskPriorityDisinherit+0x114>)
 8018a96:	6013      	str	r3, [r2, #0]
 8018a98:	693b      	ldr	r3, [r7, #16]
 8018a9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a9c:	4613      	mov	r3, r2
 8018a9e:	009b      	lsls	r3, r3, #2
 8018aa0:	4413      	add	r3, r2
 8018aa2:	009b      	lsls	r3, r3, #2
 8018aa4:	4a08      	ldr	r2, [pc, #32]	@ (8018ac8 <xTaskPriorityDisinherit+0x110>)
 8018aa6:	441a      	add	r2, r3
 8018aa8:	693b      	ldr	r3, [r7, #16]
 8018aaa:	3304      	adds	r3, #4
 8018aac:	4619      	mov	r1, r3
 8018aae:	4610      	mov	r0, r2
 8018ab0:	f7fe f885 	bl	8016bbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018ab4:	2301      	movs	r3, #1
 8018ab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018ab8:	697b      	ldr	r3, [r7, #20]
	}
 8018aba:	4618      	mov	r0, r3
 8018abc:	3718      	adds	r7, #24
 8018abe:	46bd      	mov	sp, r7
 8018ac0:	bd80      	pop	{r7, pc}
 8018ac2:	bf00      	nop
 8018ac4:	200015c0 	.word	0x200015c0
 8018ac8:	200015c4 	.word	0x200015c4
 8018acc:	200016c8 	.word	0x200016c8

08018ad0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b088      	sub	sp, #32
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
 8018ad8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018ada:	687b      	ldr	r3, [r7, #4]
 8018adc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018ade:	2301      	movs	r3, #1
 8018ae0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	f000 8089 	beq.w	8018bfc <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018aea:	69bb      	ldr	r3, [r7, #24]
 8018aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d10d      	bne.n	8018b0e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8018af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018af6:	b672      	cpsid	i
 8018af8:	f383 8811 	msr	BASEPRI, r3
 8018afc:	f3bf 8f6f 	isb	sy
 8018b00:	f3bf 8f4f 	dsb	sy
 8018b04:	b662      	cpsie	i
 8018b06:	60fb      	str	r3, [r7, #12]
}
 8018b08:	bf00      	nop
 8018b0a:	bf00      	nop
 8018b0c:	e7fd      	b.n	8018b0a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018b0e:	69bb      	ldr	r3, [r7, #24]
 8018b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b12:	683a      	ldr	r2, [r7, #0]
 8018b14:	429a      	cmp	r2, r3
 8018b16:	d902      	bls.n	8018b1e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018b18:	683b      	ldr	r3, [r7, #0]
 8018b1a:	61fb      	str	r3, [r7, #28]
 8018b1c:	e002      	b.n	8018b24 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018b22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018b24:	69bb      	ldr	r3, [r7, #24]
 8018b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b28:	69fa      	ldr	r2, [r7, #28]
 8018b2a:	429a      	cmp	r2, r3
 8018b2c:	d066      	beq.n	8018bfc <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018b2e:	69bb      	ldr	r3, [r7, #24]
 8018b30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018b32:	697a      	ldr	r2, [r7, #20]
 8018b34:	429a      	cmp	r2, r3
 8018b36:	d161      	bne.n	8018bfc <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018b38:	4b32      	ldr	r3, [pc, #200]	@ (8018c04 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	69ba      	ldr	r2, [r7, #24]
 8018b3e:	429a      	cmp	r2, r3
 8018b40:	d10d      	bne.n	8018b5e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8018b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b46:	b672      	cpsid	i
 8018b48:	f383 8811 	msr	BASEPRI, r3
 8018b4c:	f3bf 8f6f 	isb	sy
 8018b50:	f3bf 8f4f 	dsb	sy
 8018b54:	b662      	cpsie	i
 8018b56:	60bb      	str	r3, [r7, #8]
}
 8018b58:	bf00      	nop
 8018b5a:	bf00      	nop
 8018b5c:	e7fd      	b.n	8018b5a <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018b5e:	69bb      	ldr	r3, [r7, #24]
 8018b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b62:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018b64:	69bb      	ldr	r3, [r7, #24]
 8018b66:	69fa      	ldr	r2, [r7, #28]
 8018b68:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018b6a:	69bb      	ldr	r3, [r7, #24]
 8018b6c:	699b      	ldr	r3, [r3, #24]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	db04      	blt.n	8018b7c <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018b72:	69fb      	ldr	r3, [r7, #28]
 8018b74:	f1c3 0207 	rsb	r2, r3, #7
 8018b78:	69bb      	ldr	r3, [r7, #24]
 8018b7a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018b7c:	69bb      	ldr	r3, [r7, #24]
 8018b7e:	6959      	ldr	r1, [r3, #20]
 8018b80:	693a      	ldr	r2, [r7, #16]
 8018b82:	4613      	mov	r3, r2
 8018b84:	009b      	lsls	r3, r3, #2
 8018b86:	4413      	add	r3, r2
 8018b88:	009b      	lsls	r3, r3, #2
 8018b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8018c08 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018b8c:	4413      	add	r3, r2
 8018b8e:	4299      	cmp	r1, r3
 8018b90:	d134      	bne.n	8018bfc <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b92:	69bb      	ldr	r3, [r7, #24]
 8018b94:	3304      	adds	r3, #4
 8018b96:	4618      	mov	r0, r3
 8018b98:	f7fe f86e 	bl	8016c78 <uxListRemove>
 8018b9c:	4603      	mov	r3, r0
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d115      	bne.n	8018bce <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8018ba2:	69bb      	ldr	r3, [r7, #24]
 8018ba4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018ba6:	4918      	ldr	r1, [pc, #96]	@ (8018c08 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018ba8:	4613      	mov	r3, r2
 8018baa:	009b      	lsls	r3, r3, #2
 8018bac:	4413      	add	r3, r2
 8018bae:	009b      	lsls	r3, r3, #2
 8018bb0:	440b      	add	r3, r1
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d10a      	bne.n	8018bce <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8018bb8:	69bb      	ldr	r3, [r7, #24]
 8018bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bbc:	2201      	movs	r2, #1
 8018bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8018bc2:	43da      	mvns	r2, r3
 8018bc4:	4b11      	ldr	r3, [pc, #68]	@ (8018c0c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	4013      	ands	r3, r2
 8018bca:	4a10      	ldr	r2, [pc, #64]	@ (8018c0c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018bcc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018bce:	69bb      	ldr	r3, [r7, #24]
 8018bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	409a      	lsls	r2, r3
 8018bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8018c0c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	4313      	orrs	r3, r2
 8018bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8018c0c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8018bde:	6013      	str	r3, [r2, #0]
 8018be0:	69bb      	ldr	r3, [r7, #24]
 8018be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018be4:	4613      	mov	r3, r2
 8018be6:	009b      	lsls	r3, r3, #2
 8018be8:	4413      	add	r3, r2
 8018bea:	009b      	lsls	r3, r3, #2
 8018bec:	4a06      	ldr	r2, [pc, #24]	@ (8018c08 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8018bee:	441a      	add	r2, r3
 8018bf0:	69bb      	ldr	r3, [r7, #24]
 8018bf2:	3304      	adds	r3, #4
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	4610      	mov	r0, r2
 8018bf8:	f7fd ffe1 	bl	8016bbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018bfc:	bf00      	nop
 8018bfe:	3720      	adds	r7, #32
 8018c00:	46bd      	mov	sp, r7
 8018c02:	bd80      	pop	{r7, pc}
 8018c04:	200015c0 	.word	0x200015c0
 8018c08:	200015c4 	.word	0x200015c4
 8018c0c:	200016c8 	.word	0x200016c8

08018c10 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018c10:	b480      	push	{r7}
 8018c12:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018c14:	4b07      	ldr	r3, [pc, #28]	@ (8018c34 <pvTaskIncrementMutexHeldCount+0x24>)
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d004      	beq.n	8018c26 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018c1c:	4b05      	ldr	r3, [pc, #20]	@ (8018c34 <pvTaskIncrementMutexHeldCount+0x24>)
 8018c1e:	681b      	ldr	r3, [r3, #0]
 8018c20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018c22:	3201      	adds	r2, #1
 8018c24:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8018c26:	4b03      	ldr	r3, [pc, #12]	@ (8018c34 <pvTaskIncrementMutexHeldCount+0x24>)
 8018c28:	681b      	ldr	r3, [r3, #0]
	}
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	46bd      	mov	sp, r7
 8018c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c32:	4770      	bx	lr
 8018c34:	200015c0 	.word	0x200015c0

08018c38 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b084      	sub	sp, #16
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
 8018c40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018c42:	4b29      	ldr	r3, [pc, #164]	@ (8018ce8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018c48:	4b28      	ldr	r3, [pc, #160]	@ (8018cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	3304      	adds	r3, #4
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f7fe f812 	bl	8016c78 <uxListRemove>
 8018c54:	4603      	mov	r3, r0
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d10b      	bne.n	8018c72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018c5a:	4b24      	ldr	r3, [pc, #144]	@ (8018cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018c60:	2201      	movs	r2, #1
 8018c62:	fa02 f303 	lsl.w	r3, r2, r3
 8018c66:	43da      	mvns	r2, r3
 8018c68:	4b21      	ldr	r3, [pc, #132]	@ (8018cf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	4013      	ands	r3, r2
 8018c6e:	4a20      	ldr	r2, [pc, #128]	@ (8018cf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018c70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c78:	d10a      	bne.n	8018c90 <prvAddCurrentTaskToDelayedList+0x58>
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d007      	beq.n	8018c90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c80:	4b1a      	ldr	r3, [pc, #104]	@ (8018cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	3304      	adds	r3, #4
 8018c86:	4619      	mov	r1, r3
 8018c88:	481a      	ldr	r0, [pc, #104]	@ (8018cf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 8018c8a:	f7fd ff98 	bl	8016bbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018c8e:	e026      	b.n	8018cde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018c90:	68fa      	ldr	r2, [r7, #12]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	4413      	add	r3, r2
 8018c96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018c98:	4b14      	ldr	r3, [pc, #80]	@ (8018cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	68ba      	ldr	r2, [r7, #8]
 8018c9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018ca0:	68ba      	ldr	r2, [r7, #8]
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d209      	bcs.n	8018cbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ca8:	4b13      	ldr	r3, [pc, #76]	@ (8018cf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018caa:	681a      	ldr	r2, [r3, #0]
 8018cac:	4b0f      	ldr	r3, [pc, #60]	@ (8018cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	3304      	adds	r3, #4
 8018cb2:	4619      	mov	r1, r3
 8018cb4:	4610      	mov	r0, r2
 8018cb6:	f7fd ffa6 	bl	8016c06 <vListInsert>
}
 8018cba:	e010      	b.n	8018cde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8018cfc <prvAddCurrentTaskToDelayedList+0xc4>)
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8018cec <prvAddCurrentTaskToDelayedList+0xb4>)
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	3304      	adds	r3, #4
 8018cc6:	4619      	mov	r1, r3
 8018cc8:	4610      	mov	r0, r2
 8018cca:	f7fd ff9c 	bl	8016c06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018cce:	4b0c      	ldr	r3, [pc, #48]	@ (8018d00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	68ba      	ldr	r2, [r7, #8]
 8018cd4:	429a      	cmp	r2, r3
 8018cd6:	d202      	bcs.n	8018cde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018cd8:	4a09      	ldr	r2, [pc, #36]	@ (8018d00 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018cda:	68bb      	ldr	r3, [r7, #8]
 8018cdc:	6013      	str	r3, [r2, #0]
}
 8018cde:	bf00      	nop
 8018ce0:	3710      	adds	r7, #16
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}
 8018ce6:	bf00      	nop
 8018ce8:	200016c4 	.word	0x200016c4
 8018cec:	200015c0 	.word	0x200015c0
 8018cf0:	200016c8 	.word	0x200016c8
 8018cf4:	200016ac 	.word	0x200016ac
 8018cf8:	2000167c 	.word	0x2000167c
 8018cfc:	20001678 	.word	0x20001678
 8018d00:	200016e0 	.word	0x200016e0

08018d04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018d04:	b480      	push	{r7}
 8018d06:	b085      	sub	sp, #20
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	60f8      	str	r0, [r7, #12]
 8018d0c:	60b9      	str	r1, [r7, #8]
 8018d0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	3b04      	subs	r3, #4
 8018d14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018d16:	68fb      	ldr	r3, [r7, #12]
 8018d18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	3b04      	subs	r3, #4
 8018d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018d24:	68bb      	ldr	r3, [r7, #8]
 8018d26:	f023 0201 	bic.w	r2, r3, #1
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	3b04      	subs	r3, #4
 8018d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018d34:	4a0c      	ldr	r2, [pc, #48]	@ (8018d68 <pxPortInitialiseStack+0x64>)
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	3b14      	subs	r3, #20
 8018d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	68fb      	ldr	r3, [r7, #12]
 8018d44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	3b04      	subs	r3, #4
 8018d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	f06f 0202 	mvn.w	r2, #2
 8018d52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	3b20      	subs	r3, #32
 8018d58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018d5a:	68fb      	ldr	r3, [r7, #12]
}
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	3714      	adds	r7, #20
 8018d60:	46bd      	mov	sp, r7
 8018d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d66:	4770      	bx	lr
 8018d68:	08018d6d 	.word	0x08018d6d

08018d6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018d6c:	b480      	push	{r7}
 8018d6e:	b085      	sub	sp, #20
 8018d70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018d72:	2300      	movs	r3, #0
 8018d74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018d76:	4b15      	ldr	r3, [pc, #84]	@ (8018dcc <prvTaskExitError+0x60>)
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d7e:	d00d      	beq.n	8018d9c <prvTaskExitError+0x30>
	__asm volatile
 8018d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018d84:	b672      	cpsid	i
 8018d86:	f383 8811 	msr	BASEPRI, r3
 8018d8a:	f3bf 8f6f 	isb	sy
 8018d8e:	f3bf 8f4f 	dsb	sy
 8018d92:	b662      	cpsie	i
 8018d94:	60fb      	str	r3, [r7, #12]
}
 8018d96:	bf00      	nop
 8018d98:	bf00      	nop
 8018d9a:	e7fd      	b.n	8018d98 <prvTaskExitError+0x2c>
	__asm volatile
 8018d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018da0:	b672      	cpsid	i
 8018da2:	f383 8811 	msr	BASEPRI, r3
 8018da6:	f3bf 8f6f 	isb	sy
 8018daa:	f3bf 8f4f 	dsb	sy
 8018dae:	b662      	cpsie	i
 8018db0:	60bb      	str	r3, [r7, #8]
}
 8018db2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018db4:	bf00      	nop
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d0fc      	beq.n	8018db6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018dbc:	bf00      	nop
 8018dbe:	bf00      	nop
 8018dc0:	3714      	adds	r7, #20
 8018dc2:	46bd      	mov	sp, r7
 8018dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc8:	4770      	bx	lr
 8018dca:	bf00      	nop
 8018dcc:	20000074 	.word	0x20000074

08018dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018dd0:	4b07      	ldr	r3, [pc, #28]	@ (8018df0 <pxCurrentTCBConst2>)
 8018dd2:	6819      	ldr	r1, [r3, #0]
 8018dd4:	6808      	ldr	r0, [r1, #0]
 8018dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dda:	f380 8809 	msr	PSP, r0
 8018dde:	f3bf 8f6f 	isb	sy
 8018de2:	f04f 0000 	mov.w	r0, #0
 8018de6:	f380 8811 	msr	BASEPRI, r0
 8018dea:	4770      	bx	lr
 8018dec:	f3af 8000 	nop.w

08018df0 <pxCurrentTCBConst2>:
 8018df0:	200015c0 	.word	0x200015c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018df4:	bf00      	nop
 8018df6:	bf00      	nop

08018df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018df8:	4808      	ldr	r0, [pc, #32]	@ (8018e1c <prvPortStartFirstTask+0x24>)
 8018dfa:	6800      	ldr	r0, [r0, #0]
 8018dfc:	6800      	ldr	r0, [r0, #0]
 8018dfe:	f380 8808 	msr	MSP, r0
 8018e02:	f04f 0000 	mov.w	r0, #0
 8018e06:	f380 8814 	msr	CONTROL, r0
 8018e0a:	b662      	cpsie	i
 8018e0c:	b661      	cpsie	f
 8018e0e:	f3bf 8f4f 	dsb	sy
 8018e12:	f3bf 8f6f 	isb	sy
 8018e16:	df00      	svc	0
 8018e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018e1a:	bf00      	nop
 8018e1c:	e000ed08 	.word	0xe000ed08

08018e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b084      	sub	sp, #16
 8018e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018e26:	4b37      	ldr	r3, [pc, #220]	@ (8018f04 <xPortStartScheduler+0xe4>)
 8018e28:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	781b      	ldrb	r3, [r3, #0]
 8018e2e:	b2db      	uxtb	r3, r3
 8018e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	22ff      	movs	r2, #255	@ 0xff
 8018e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	781b      	ldrb	r3, [r3, #0]
 8018e3c:	b2db      	uxtb	r3, r3
 8018e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018e40:	78fb      	ldrb	r3, [r7, #3]
 8018e42:	b2db      	uxtb	r3, r3
 8018e44:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018e48:	b2da      	uxtb	r2, r3
 8018e4a:	4b2f      	ldr	r3, [pc, #188]	@ (8018f08 <xPortStartScheduler+0xe8>)
 8018e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018e4e:	4b2f      	ldr	r3, [pc, #188]	@ (8018f0c <xPortStartScheduler+0xec>)
 8018e50:	2207      	movs	r2, #7
 8018e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018e54:	e009      	b.n	8018e6a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8018e56:	4b2d      	ldr	r3, [pc, #180]	@ (8018f0c <xPortStartScheduler+0xec>)
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	3b01      	subs	r3, #1
 8018e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8018f0c <xPortStartScheduler+0xec>)
 8018e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018e60:	78fb      	ldrb	r3, [r7, #3]
 8018e62:	b2db      	uxtb	r3, r3
 8018e64:	005b      	lsls	r3, r3, #1
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018e6a:	78fb      	ldrb	r3, [r7, #3]
 8018e6c:	b2db      	uxtb	r3, r3
 8018e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018e72:	2b80      	cmp	r3, #128	@ 0x80
 8018e74:	d0ef      	beq.n	8018e56 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018e76:	4b25      	ldr	r3, [pc, #148]	@ (8018f0c <xPortStartScheduler+0xec>)
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	f1c3 0307 	rsb	r3, r3, #7
 8018e7e:	2b04      	cmp	r3, #4
 8018e80:	d00d      	beq.n	8018e9e <xPortStartScheduler+0x7e>
	__asm volatile
 8018e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e86:	b672      	cpsid	i
 8018e88:	f383 8811 	msr	BASEPRI, r3
 8018e8c:	f3bf 8f6f 	isb	sy
 8018e90:	f3bf 8f4f 	dsb	sy
 8018e94:	b662      	cpsie	i
 8018e96:	60bb      	str	r3, [r7, #8]
}
 8018e98:	bf00      	nop
 8018e9a:	bf00      	nop
 8018e9c:	e7fd      	b.n	8018e9a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8018f0c <xPortStartScheduler+0xec>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	021b      	lsls	r3, r3, #8
 8018ea4:	4a19      	ldr	r2, [pc, #100]	@ (8018f0c <xPortStartScheduler+0xec>)
 8018ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018ea8:	4b18      	ldr	r3, [pc, #96]	@ (8018f0c <xPortStartScheduler+0xec>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018eb0:	4a16      	ldr	r2, [pc, #88]	@ (8018f0c <xPortStartScheduler+0xec>)
 8018eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	b2da      	uxtb	r2, r3
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018ebc:	4b14      	ldr	r3, [pc, #80]	@ (8018f10 <xPortStartScheduler+0xf0>)
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	4a13      	ldr	r2, [pc, #76]	@ (8018f10 <xPortStartScheduler+0xf0>)
 8018ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018ec8:	4b11      	ldr	r3, [pc, #68]	@ (8018f10 <xPortStartScheduler+0xf0>)
 8018eca:	681b      	ldr	r3, [r3, #0]
 8018ecc:	4a10      	ldr	r2, [pc, #64]	@ (8018f10 <xPortStartScheduler+0xf0>)
 8018ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8018ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018ed4:	f000 f8dc 	bl	8019090 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8018f14 <xPortStartScheduler+0xf4>)
 8018eda:	2200      	movs	r2, #0
 8018edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018ede:	f000 f8fb 	bl	80190d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8018f18 <xPortStartScheduler+0xf8>)
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8018f18 <xPortStartScheduler+0xf8>)
 8018ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8018eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018eee:	f7ff ff83 	bl	8018df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018ef2:	f7ff fa4d 	bl	8018390 <vTaskSwitchContext>
	prvTaskExitError();
 8018ef6:	f7ff ff39 	bl	8018d6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018efa:	2300      	movs	r3, #0
}
 8018efc:	4618      	mov	r0, r3
 8018efe:	3710      	adds	r7, #16
 8018f00:	46bd      	mov	sp, r7
 8018f02:	bd80      	pop	{r7, pc}
 8018f04:	e000e400 	.word	0xe000e400
 8018f08:	200016ec 	.word	0x200016ec
 8018f0c:	200016f0 	.word	0x200016f0
 8018f10:	e000ed20 	.word	0xe000ed20
 8018f14:	20000074 	.word	0x20000074
 8018f18:	e000ef34 	.word	0xe000ef34

08018f1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018f1c:	b480      	push	{r7}
 8018f1e:	b083      	sub	sp, #12
 8018f20:	af00      	add	r7, sp, #0
	__asm volatile
 8018f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f26:	b672      	cpsid	i
 8018f28:	f383 8811 	msr	BASEPRI, r3
 8018f2c:	f3bf 8f6f 	isb	sy
 8018f30:	f3bf 8f4f 	dsb	sy
 8018f34:	b662      	cpsie	i
 8018f36:	607b      	str	r3, [r7, #4]
}
 8018f38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018f3a:	4b11      	ldr	r3, [pc, #68]	@ (8018f80 <vPortEnterCritical+0x64>)
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	3301      	adds	r3, #1
 8018f40:	4a0f      	ldr	r2, [pc, #60]	@ (8018f80 <vPortEnterCritical+0x64>)
 8018f42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018f44:	4b0e      	ldr	r3, [pc, #56]	@ (8018f80 <vPortEnterCritical+0x64>)
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	2b01      	cmp	r3, #1
 8018f4a:	d112      	bne.n	8018f72 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8018f84 <vPortEnterCritical+0x68>)
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	b2db      	uxtb	r3, r3
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d00d      	beq.n	8018f72 <vPortEnterCritical+0x56>
	__asm volatile
 8018f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f5a:	b672      	cpsid	i
 8018f5c:	f383 8811 	msr	BASEPRI, r3
 8018f60:	f3bf 8f6f 	isb	sy
 8018f64:	f3bf 8f4f 	dsb	sy
 8018f68:	b662      	cpsie	i
 8018f6a:	603b      	str	r3, [r7, #0]
}
 8018f6c:	bf00      	nop
 8018f6e:	bf00      	nop
 8018f70:	e7fd      	b.n	8018f6e <vPortEnterCritical+0x52>
	}
}
 8018f72:	bf00      	nop
 8018f74:	370c      	adds	r7, #12
 8018f76:	46bd      	mov	sp, r7
 8018f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f7c:	4770      	bx	lr
 8018f7e:	bf00      	nop
 8018f80:	20000074 	.word	0x20000074
 8018f84:	e000ed04 	.word	0xe000ed04

08018f88 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018f88:	b480      	push	{r7}
 8018f8a:	b083      	sub	sp, #12
 8018f8c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018f8e:	4b13      	ldr	r3, [pc, #76]	@ (8018fdc <vPortExitCritical+0x54>)
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d10d      	bne.n	8018fb2 <vPortExitCritical+0x2a>
	__asm volatile
 8018f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f9a:	b672      	cpsid	i
 8018f9c:	f383 8811 	msr	BASEPRI, r3
 8018fa0:	f3bf 8f6f 	isb	sy
 8018fa4:	f3bf 8f4f 	dsb	sy
 8018fa8:	b662      	cpsie	i
 8018faa:	607b      	str	r3, [r7, #4]
}
 8018fac:	bf00      	nop
 8018fae:	bf00      	nop
 8018fb0:	e7fd      	b.n	8018fae <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8018fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8018fdc <vPortExitCritical+0x54>)
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	3b01      	subs	r3, #1
 8018fb8:	4a08      	ldr	r2, [pc, #32]	@ (8018fdc <vPortExitCritical+0x54>)
 8018fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018fbc:	4b07      	ldr	r3, [pc, #28]	@ (8018fdc <vPortExitCritical+0x54>)
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d105      	bne.n	8018fd0 <vPortExitCritical+0x48>
 8018fc4:	2300      	movs	r3, #0
 8018fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	f383 8811 	msr	BASEPRI, r3
}
 8018fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018fd0:	bf00      	nop
 8018fd2:	370c      	adds	r7, #12
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fda:	4770      	bx	lr
 8018fdc:	20000074 	.word	0x20000074

08018fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018fe0:	f3ef 8009 	mrs	r0, PSP
 8018fe4:	f3bf 8f6f 	isb	sy
 8018fe8:	4b15      	ldr	r3, [pc, #84]	@ (8019040 <pxCurrentTCBConst>)
 8018fea:	681a      	ldr	r2, [r3, #0]
 8018fec:	f01e 0f10 	tst.w	lr, #16
 8018ff0:	bf08      	it	eq
 8018ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ffa:	6010      	str	r0, [r2, #0]
 8018ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019004:	b672      	cpsid	i
 8019006:	f380 8811 	msr	BASEPRI, r0
 801900a:	f3bf 8f4f 	dsb	sy
 801900e:	f3bf 8f6f 	isb	sy
 8019012:	b662      	cpsie	i
 8019014:	f7ff f9bc 	bl	8018390 <vTaskSwitchContext>
 8019018:	f04f 0000 	mov.w	r0, #0
 801901c:	f380 8811 	msr	BASEPRI, r0
 8019020:	bc09      	pop	{r0, r3}
 8019022:	6819      	ldr	r1, [r3, #0]
 8019024:	6808      	ldr	r0, [r1, #0]
 8019026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801902a:	f01e 0f10 	tst.w	lr, #16
 801902e:	bf08      	it	eq
 8019030:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019034:	f380 8809 	msr	PSP, r0
 8019038:	f3bf 8f6f 	isb	sy
 801903c:	4770      	bx	lr
 801903e:	bf00      	nop

08019040 <pxCurrentTCBConst>:
 8019040:	200015c0 	.word	0x200015c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019044:	bf00      	nop
 8019046:	bf00      	nop

08019048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019048:	b580      	push	{r7, lr}
 801904a:	b082      	sub	sp, #8
 801904c:	af00      	add	r7, sp, #0
	__asm volatile
 801904e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019052:	b672      	cpsid	i
 8019054:	f383 8811 	msr	BASEPRI, r3
 8019058:	f3bf 8f6f 	isb	sy
 801905c:	f3bf 8f4f 	dsb	sy
 8019060:	b662      	cpsie	i
 8019062:	607b      	str	r3, [r7, #4]
}
 8019064:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019066:	f7ff f8d7 	bl	8018218 <xTaskIncrementTick>
 801906a:	4603      	mov	r3, r0
 801906c:	2b00      	cmp	r3, #0
 801906e:	d003      	beq.n	8019078 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019070:	4b06      	ldr	r3, [pc, #24]	@ (801908c <SysTick_Handler+0x44>)
 8019072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8019076:	601a      	str	r2, [r3, #0]
 8019078:	2300      	movs	r3, #0
 801907a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801907c:	683b      	ldr	r3, [r7, #0]
 801907e:	f383 8811 	msr	BASEPRI, r3
}
 8019082:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019084:	bf00      	nop
 8019086:	3708      	adds	r7, #8
 8019088:	46bd      	mov	sp, r7
 801908a:	bd80      	pop	{r7, pc}
 801908c:	e000ed04 	.word	0xe000ed04

08019090 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8019090:	b480      	push	{r7}
 8019092:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019094:	4b0b      	ldr	r3, [pc, #44]	@ (80190c4 <vPortSetupTimerInterrupt+0x34>)
 8019096:	2200      	movs	r2, #0
 8019098:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801909a:	4b0b      	ldr	r3, [pc, #44]	@ (80190c8 <vPortSetupTimerInterrupt+0x38>)
 801909c:	2200      	movs	r2, #0
 801909e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80190a0:	4b0a      	ldr	r3, [pc, #40]	@ (80190cc <vPortSetupTimerInterrupt+0x3c>)
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	4a0a      	ldr	r2, [pc, #40]	@ (80190d0 <vPortSetupTimerInterrupt+0x40>)
 80190a6:	fba2 2303 	umull	r2, r3, r2, r3
 80190aa:	099b      	lsrs	r3, r3, #6
 80190ac:	4a09      	ldr	r2, [pc, #36]	@ (80190d4 <vPortSetupTimerInterrupt+0x44>)
 80190ae:	3b01      	subs	r3, #1
 80190b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80190b2:	4b04      	ldr	r3, [pc, #16]	@ (80190c4 <vPortSetupTimerInterrupt+0x34>)
 80190b4:	2207      	movs	r2, #7
 80190b6:	601a      	str	r2, [r3, #0]
}
 80190b8:	bf00      	nop
 80190ba:	46bd      	mov	sp, r7
 80190bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c0:	4770      	bx	lr
 80190c2:	bf00      	nop
 80190c4:	e000e010 	.word	0xe000e010
 80190c8:	e000e018 	.word	0xe000e018
 80190cc:	20000000 	.word	0x20000000
 80190d0:	10624dd3 	.word	0x10624dd3
 80190d4:	e000e014 	.word	0xe000e014

080190d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80190d8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80190e8 <vPortEnableVFP+0x10>
 80190dc:	6801      	ldr	r1, [r0, #0]
 80190de:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80190e2:	6001      	str	r1, [r0, #0]
 80190e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80190e6:	bf00      	nop
 80190e8:	e000ed88 	.word	0xe000ed88

080190ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80190ec:	b480      	push	{r7}
 80190ee:	b085      	sub	sp, #20
 80190f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80190f2:	f3ef 8305 	mrs	r3, IPSR
 80190f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	2b0f      	cmp	r3, #15
 80190fc:	d917      	bls.n	801912e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80190fe:	4a1a      	ldr	r2, [pc, #104]	@ (8019168 <vPortValidateInterruptPriority+0x7c>)
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	4413      	add	r3, r2
 8019104:	781b      	ldrb	r3, [r3, #0]
 8019106:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019108:	4b18      	ldr	r3, [pc, #96]	@ (801916c <vPortValidateInterruptPriority+0x80>)
 801910a:	781b      	ldrb	r3, [r3, #0]
 801910c:	7afa      	ldrb	r2, [r7, #11]
 801910e:	429a      	cmp	r2, r3
 8019110:	d20d      	bcs.n	801912e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8019112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019116:	b672      	cpsid	i
 8019118:	f383 8811 	msr	BASEPRI, r3
 801911c:	f3bf 8f6f 	isb	sy
 8019120:	f3bf 8f4f 	dsb	sy
 8019124:	b662      	cpsie	i
 8019126:	607b      	str	r3, [r7, #4]
}
 8019128:	bf00      	nop
 801912a:	bf00      	nop
 801912c:	e7fd      	b.n	801912a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801912e:	4b10      	ldr	r3, [pc, #64]	@ (8019170 <vPortValidateInterruptPriority+0x84>)
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8019136:	4b0f      	ldr	r3, [pc, #60]	@ (8019174 <vPortValidateInterruptPriority+0x88>)
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	429a      	cmp	r2, r3
 801913c:	d90d      	bls.n	801915a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801913e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019142:	b672      	cpsid	i
 8019144:	f383 8811 	msr	BASEPRI, r3
 8019148:	f3bf 8f6f 	isb	sy
 801914c:	f3bf 8f4f 	dsb	sy
 8019150:	b662      	cpsie	i
 8019152:	603b      	str	r3, [r7, #0]
}
 8019154:	bf00      	nop
 8019156:	bf00      	nop
 8019158:	e7fd      	b.n	8019156 <vPortValidateInterruptPriority+0x6a>
	}
 801915a:	bf00      	nop
 801915c:	3714      	adds	r7, #20
 801915e:	46bd      	mov	sp, r7
 8019160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019164:	4770      	bx	lr
 8019166:	bf00      	nop
 8019168:	e000e3f0 	.word	0xe000e3f0
 801916c:	200016ec 	.word	0x200016ec
 8019170:	e000ed0c 	.word	0xe000ed0c
 8019174:	200016f0 	.word	0x200016f0

08019178 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b08a      	sub	sp, #40	@ 0x28
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019180:	2300      	movs	r3, #0
 8019182:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019184:	f7fe ff78 	bl	8018078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019188:	4b5f      	ldr	r3, [pc, #380]	@ (8019308 <pvPortMalloc+0x190>)
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	2b00      	cmp	r3, #0
 801918e:	d101      	bne.n	8019194 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019190:	f000 f924 	bl	80193dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019194:	4b5d      	ldr	r3, [pc, #372]	@ (801930c <pvPortMalloc+0x194>)
 8019196:	681a      	ldr	r2, [r3, #0]
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	4013      	ands	r3, r2
 801919c:	2b00      	cmp	r3, #0
 801919e:	f040 8094 	bne.w	80192ca <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d020      	beq.n	80191ea <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80191a8:	2208      	movs	r2, #8
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	4413      	add	r3, r2
 80191ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	f003 0307 	and.w	r3, r3, #7
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d017      	beq.n	80191ea <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	f023 0307 	bic.w	r3, r3, #7
 80191c0:	3308      	adds	r3, #8
 80191c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f003 0307 	and.w	r3, r3, #7
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d00d      	beq.n	80191ea <pvPortMalloc+0x72>
	__asm volatile
 80191ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80191d2:	b672      	cpsid	i
 80191d4:	f383 8811 	msr	BASEPRI, r3
 80191d8:	f3bf 8f6f 	isb	sy
 80191dc:	f3bf 8f4f 	dsb	sy
 80191e0:	b662      	cpsie	i
 80191e2:	617b      	str	r3, [r7, #20]
}
 80191e4:	bf00      	nop
 80191e6:	bf00      	nop
 80191e8:	e7fd      	b.n	80191e6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d06c      	beq.n	80192ca <pvPortMalloc+0x152>
 80191f0:	4b47      	ldr	r3, [pc, #284]	@ (8019310 <pvPortMalloc+0x198>)
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	687a      	ldr	r2, [r7, #4]
 80191f6:	429a      	cmp	r2, r3
 80191f8:	d867      	bhi.n	80192ca <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80191fa:	4b46      	ldr	r3, [pc, #280]	@ (8019314 <pvPortMalloc+0x19c>)
 80191fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80191fe:	4b45      	ldr	r3, [pc, #276]	@ (8019314 <pvPortMalloc+0x19c>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019204:	e004      	b.n	8019210 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8019206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019212:	685b      	ldr	r3, [r3, #4]
 8019214:	687a      	ldr	r2, [r7, #4]
 8019216:	429a      	cmp	r2, r3
 8019218:	d903      	bls.n	8019222 <pvPortMalloc+0xaa>
 801921a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d1f1      	bne.n	8019206 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019222:	4b39      	ldr	r3, [pc, #228]	@ (8019308 <pvPortMalloc+0x190>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019228:	429a      	cmp	r2, r3
 801922a:	d04e      	beq.n	80192ca <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801922c:	6a3b      	ldr	r3, [r7, #32]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	2208      	movs	r2, #8
 8019232:	4413      	add	r3, r2
 8019234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019238:	681a      	ldr	r2, [r3, #0]
 801923a:	6a3b      	ldr	r3, [r7, #32]
 801923c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019240:	685a      	ldr	r2, [r3, #4]
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	1ad2      	subs	r2, r2, r3
 8019246:	2308      	movs	r3, #8
 8019248:	005b      	lsls	r3, r3, #1
 801924a:	429a      	cmp	r2, r3
 801924c:	d922      	bls.n	8019294 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801924e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	4413      	add	r3, r2
 8019254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019256:	69bb      	ldr	r3, [r7, #24]
 8019258:	f003 0307 	and.w	r3, r3, #7
 801925c:	2b00      	cmp	r3, #0
 801925e:	d00d      	beq.n	801927c <pvPortMalloc+0x104>
	__asm volatile
 8019260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019264:	b672      	cpsid	i
 8019266:	f383 8811 	msr	BASEPRI, r3
 801926a:	f3bf 8f6f 	isb	sy
 801926e:	f3bf 8f4f 	dsb	sy
 8019272:	b662      	cpsie	i
 8019274:	613b      	str	r3, [r7, #16]
}
 8019276:	bf00      	nop
 8019278:	bf00      	nop
 801927a:	e7fd      	b.n	8019278 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801927e:	685a      	ldr	r2, [r3, #4]
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	1ad2      	subs	r2, r2, r3
 8019284:	69bb      	ldr	r3, [r7, #24]
 8019286:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801928a:	687a      	ldr	r2, [r7, #4]
 801928c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801928e:	69b8      	ldr	r0, [r7, #24]
 8019290:	f000 f906 	bl	80194a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019294:	4b1e      	ldr	r3, [pc, #120]	@ (8019310 <pvPortMalloc+0x198>)
 8019296:	681a      	ldr	r2, [r3, #0]
 8019298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801929a:	685b      	ldr	r3, [r3, #4]
 801929c:	1ad3      	subs	r3, r2, r3
 801929e:	4a1c      	ldr	r2, [pc, #112]	@ (8019310 <pvPortMalloc+0x198>)
 80192a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80192a2:	4b1b      	ldr	r3, [pc, #108]	@ (8019310 <pvPortMalloc+0x198>)
 80192a4:	681a      	ldr	r2, [r3, #0]
 80192a6:	4b1c      	ldr	r3, [pc, #112]	@ (8019318 <pvPortMalloc+0x1a0>)
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d203      	bcs.n	80192b6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80192ae:	4b18      	ldr	r3, [pc, #96]	@ (8019310 <pvPortMalloc+0x198>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	4a19      	ldr	r2, [pc, #100]	@ (8019318 <pvPortMalloc+0x1a0>)
 80192b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80192b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192b8:	685a      	ldr	r2, [r3, #4]
 80192ba:	4b14      	ldr	r3, [pc, #80]	@ (801930c <pvPortMalloc+0x194>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	431a      	orrs	r2, r3
 80192c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80192c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192c6:	2200      	movs	r2, #0
 80192c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80192ca:	f7fe fee3 	bl	8018094 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80192ce:	69fb      	ldr	r3, [r7, #28]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d101      	bne.n	80192d8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80192d4:	f7e7 fffd 	bl	80012d2 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80192d8:	69fb      	ldr	r3, [r7, #28]
 80192da:	f003 0307 	and.w	r3, r3, #7
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d00d      	beq.n	80192fe <pvPortMalloc+0x186>
	__asm volatile
 80192e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80192e6:	b672      	cpsid	i
 80192e8:	f383 8811 	msr	BASEPRI, r3
 80192ec:	f3bf 8f6f 	isb	sy
 80192f0:	f3bf 8f4f 	dsb	sy
 80192f4:	b662      	cpsie	i
 80192f6:	60fb      	str	r3, [r7, #12]
}
 80192f8:	bf00      	nop
 80192fa:	bf00      	nop
 80192fc:	e7fd      	b.n	80192fa <pvPortMalloc+0x182>
	return pvReturn;
 80192fe:	69fb      	ldr	r3, [r7, #28]
}
 8019300:	4618      	mov	r0, r3
 8019302:	3728      	adds	r7, #40	@ 0x28
 8019304:	46bd      	mov	sp, r7
 8019306:	bd80      	pop	{r7, pc}
 8019308:	200096fc 	.word	0x200096fc
 801930c:	20009708 	.word	0x20009708
 8019310:	20009700 	.word	0x20009700
 8019314:	200096f4 	.word	0x200096f4
 8019318:	20009704 	.word	0x20009704

0801931c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b086      	sub	sp, #24
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	2b00      	cmp	r3, #0
 801932c:	d04e      	beq.n	80193cc <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801932e:	2308      	movs	r3, #8
 8019330:	425b      	negs	r3, r3
 8019332:	697a      	ldr	r2, [r7, #20]
 8019334:	4413      	add	r3, r2
 8019336:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019338:	697b      	ldr	r3, [r7, #20]
 801933a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801933c:	693b      	ldr	r3, [r7, #16]
 801933e:	685a      	ldr	r2, [r3, #4]
 8019340:	4b24      	ldr	r3, [pc, #144]	@ (80193d4 <vPortFree+0xb8>)
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	4013      	ands	r3, r2
 8019346:	2b00      	cmp	r3, #0
 8019348:	d10d      	bne.n	8019366 <vPortFree+0x4a>
	__asm volatile
 801934a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801934e:	b672      	cpsid	i
 8019350:	f383 8811 	msr	BASEPRI, r3
 8019354:	f3bf 8f6f 	isb	sy
 8019358:	f3bf 8f4f 	dsb	sy
 801935c:	b662      	cpsie	i
 801935e:	60fb      	str	r3, [r7, #12]
}
 8019360:	bf00      	nop
 8019362:	bf00      	nop
 8019364:	e7fd      	b.n	8019362 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019366:	693b      	ldr	r3, [r7, #16]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d00d      	beq.n	801938a <vPortFree+0x6e>
	__asm volatile
 801936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019372:	b672      	cpsid	i
 8019374:	f383 8811 	msr	BASEPRI, r3
 8019378:	f3bf 8f6f 	isb	sy
 801937c:	f3bf 8f4f 	dsb	sy
 8019380:	b662      	cpsie	i
 8019382:	60bb      	str	r3, [r7, #8]
}
 8019384:	bf00      	nop
 8019386:	bf00      	nop
 8019388:	e7fd      	b.n	8019386 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801938a:	693b      	ldr	r3, [r7, #16]
 801938c:	685a      	ldr	r2, [r3, #4]
 801938e:	4b11      	ldr	r3, [pc, #68]	@ (80193d4 <vPortFree+0xb8>)
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	4013      	ands	r3, r2
 8019394:	2b00      	cmp	r3, #0
 8019396:	d019      	beq.n	80193cc <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019398:	693b      	ldr	r3, [r7, #16]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	2b00      	cmp	r3, #0
 801939e:	d115      	bne.n	80193cc <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	685a      	ldr	r2, [r3, #4]
 80193a4:	4b0b      	ldr	r3, [pc, #44]	@ (80193d4 <vPortFree+0xb8>)
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	43db      	mvns	r3, r3
 80193aa:	401a      	ands	r2, r3
 80193ac:	693b      	ldr	r3, [r7, #16]
 80193ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80193b0:	f7fe fe62 	bl	8018078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80193b4:	693b      	ldr	r3, [r7, #16]
 80193b6:	685a      	ldr	r2, [r3, #4]
 80193b8:	4b07      	ldr	r3, [pc, #28]	@ (80193d8 <vPortFree+0xbc>)
 80193ba:	681b      	ldr	r3, [r3, #0]
 80193bc:	4413      	add	r3, r2
 80193be:	4a06      	ldr	r2, [pc, #24]	@ (80193d8 <vPortFree+0xbc>)
 80193c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80193c2:	6938      	ldr	r0, [r7, #16]
 80193c4:	f000 f86c 	bl	80194a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80193c8:	f7fe fe64 	bl	8018094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80193cc:	bf00      	nop
 80193ce:	3718      	adds	r7, #24
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd80      	pop	{r7, pc}
 80193d4:	20009708 	.word	0x20009708
 80193d8:	20009700 	.word	0x20009700

080193dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80193dc:	b480      	push	{r7}
 80193de:	b085      	sub	sp, #20
 80193e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80193e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80193e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80193e8:	4b27      	ldr	r3, [pc, #156]	@ (8019488 <prvHeapInit+0xac>)
 80193ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	f003 0307 	and.w	r3, r3, #7
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d00c      	beq.n	8019410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	3307      	adds	r3, #7
 80193fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	f023 0307 	bic.w	r3, r3, #7
 8019402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019404:	68ba      	ldr	r2, [r7, #8]
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	1ad3      	subs	r3, r2, r3
 801940a:	4a1f      	ldr	r2, [pc, #124]	@ (8019488 <prvHeapInit+0xac>)
 801940c:	4413      	add	r3, r2
 801940e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019414:	4a1d      	ldr	r2, [pc, #116]	@ (801948c <prvHeapInit+0xb0>)
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801941a:	4b1c      	ldr	r3, [pc, #112]	@ (801948c <prvHeapInit+0xb0>)
 801941c:	2200      	movs	r2, #0
 801941e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	68ba      	ldr	r2, [r7, #8]
 8019424:	4413      	add	r3, r2
 8019426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019428:	2208      	movs	r2, #8
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	1a9b      	subs	r3, r3, r2
 801942e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	f023 0307 	bic.w	r3, r3, #7
 8019436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	4a15      	ldr	r2, [pc, #84]	@ (8019490 <prvHeapInit+0xb4>)
 801943c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801943e:	4b14      	ldr	r3, [pc, #80]	@ (8019490 <prvHeapInit+0xb4>)
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	2200      	movs	r2, #0
 8019444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019446:	4b12      	ldr	r3, [pc, #72]	@ (8019490 <prvHeapInit+0xb4>)
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	2200      	movs	r2, #0
 801944c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019452:	683b      	ldr	r3, [r7, #0]
 8019454:	68fa      	ldr	r2, [r7, #12]
 8019456:	1ad2      	subs	r2, r2, r3
 8019458:	683b      	ldr	r3, [r7, #0]
 801945a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801945c:	4b0c      	ldr	r3, [pc, #48]	@ (8019490 <prvHeapInit+0xb4>)
 801945e:	681a      	ldr	r2, [r3, #0]
 8019460:	683b      	ldr	r3, [r7, #0]
 8019462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019464:	683b      	ldr	r3, [r7, #0]
 8019466:	685b      	ldr	r3, [r3, #4]
 8019468:	4a0a      	ldr	r2, [pc, #40]	@ (8019494 <prvHeapInit+0xb8>)
 801946a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801946c:	683b      	ldr	r3, [r7, #0]
 801946e:	685b      	ldr	r3, [r3, #4]
 8019470:	4a09      	ldr	r2, [pc, #36]	@ (8019498 <prvHeapInit+0xbc>)
 8019472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019474:	4b09      	ldr	r3, [pc, #36]	@ (801949c <prvHeapInit+0xc0>)
 8019476:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801947a:	601a      	str	r2, [r3, #0]
}
 801947c:	bf00      	nop
 801947e:	3714      	adds	r7, #20
 8019480:	46bd      	mov	sp, r7
 8019482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019486:	4770      	bx	lr
 8019488:	200016f4 	.word	0x200016f4
 801948c:	200096f4 	.word	0x200096f4
 8019490:	200096fc 	.word	0x200096fc
 8019494:	20009704 	.word	0x20009704
 8019498:	20009700 	.word	0x20009700
 801949c:	20009708 	.word	0x20009708

080194a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80194a0:	b480      	push	{r7}
 80194a2:	b085      	sub	sp, #20
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80194a8:	4b28      	ldr	r3, [pc, #160]	@ (801954c <prvInsertBlockIntoFreeList+0xac>)
 80194aa:	60fb      	str	r3, [r7, #12]
 80194ac:	e002      	b.n	80194b4 <prvInsertBlockIntoFreeList+0x14>
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	60fb      	str	r3, [r7, #12]
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	687a      	ldr	r2, [r7, #4]
 80194ba:	429a      	cmp	r2, r3
 80194bc:	d8f7      	bhi.n	80194ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	685b      	ldr	r3, [r3, #4]
 80194c6:	68ba      	ldr	r2, [r7, #8]
 80194c8:	4413      	add	r3, r2
 80194ca:	687a      	ldr	r2, [r7, #4]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d108      	bne.n	80194e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	685a      	ldr	r2, [r3, #4]
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	685b      	ldr	r3, [r3, #4]
 80194d8:	441a      	add	r2, r3
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80194de:	68fb      	ldr	r3, [r7, #12]
 80194e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	685b      	ldr	r3, [r3, #4]
 80194ea:	68ba      	ldr	r2, [r7, #8]
 80194ec:	441a      	add	r2, r3
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	429a      	cmp	r2, r3
 80194f4:	d118      	bne.n	8019528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	681a      	ldr	r2, [r3, #0]
 80194fa:	4b15      	ldr	r3, [pc, #84]	@ (8019550 <prvInsertBlockIntoFreeList+0xb0>)
 80194fc:	681b      	ldr	r3, [r3, #0]
 80194fe:	429a      	cmp	r2, r3
 8019500:	d00d      	beq.n	801951e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	685a      	ldr	r2, [r3, #4]
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	685b      	ldr	r3, [r3, #4]
 801950c:	441a      	add	r2, r3
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	681a      	ldr	r2, [r3, #0]
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	601a      	str	r2, [r3, #0]
 801951c:	e008      	b.n	8019530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801951e:	4b0c      	ldr	r3, [pc, #48]	@ (8019550 <prvInsertBlockIntoFreeList+0xb0>)
 8019520:	681a      	ldr	r2, [r3, #0]
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	601a      	str	r2, [r3, #0]
 8019526:	e003      	b.n	8019530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019528:	68fb      	ldr	r3, [r7, #12]
 801952a:	681a      	ldr	r2, [r3, #0]
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019530:	68fa      	ldr	r2, [r7, #12]
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	429a      	cmp	r2, r3
 8019536:	d002      	beq.n	801953e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	687a      	ldr	r2, [r7, #4]
 801953c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801953e:	bf00      	nop
 8019540:	3714      	adds	r7, #20
 8019542:	46bd      	mov	sp, r7
 8019544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019548:	4770      	bx	lr
 801954a:	bf00      	nop
 801954c:	200096f4 	.word	0x200096f4
 8019550:	200096fc 	.word	0x200096fc

08019554 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019554:	b580      	push	{r7, lr}
 8019556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8019558:	2201      	movs	r2, #1
 801955a:	490e      	ldr	r1, [pc, #56]	@ (8019594 <MX_USB_HOST_Init+0x40>)
 801955c:	480e      	ldr	r0, [pc, #56]	@ (8019598 <MX_USB_HOST_Init+0x44>)
 801955e:	f7f9 f8a1 	bl	80126a4 <USBH_Init>
 8019562:	4603      	mov	r3, r0
 8019564:	2b00      	cmp	r3, #0
 8019566:	d001      	beq.n	801956c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019568:	f7e9 fe2c 	bl	80031c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801956c:	490b      	ldr	r1, [pc, #44]	@ (801959c <MX_USB_HOST_Init+0x48>)
 801956e:	480a      	ldr	r0, [pc, #40]	@ (8019598 <MX_USB_HOST_Init+0x44>)
 8019570:	f7f9 f96b 	bl	801284a <USBH_RegisterClass>
 8019574:	4603      	mov	r3, r0
 8019576:	2b00      	cmp	r3, #0
 8019578:	d001      	beq.n	801957e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801957a:	f7e9 fe23 	bl	80031c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801957e:	4806      	ldr	r0, [pc, #24]	@ (8019598 <MX_USB_HOST_Init+0x44>)
 8019580:	f7f9 f9ef 	bl	8012962 <USBH_Start>
 8019584:	4603      	mov	r3, r0
 8019586:	2b00      	cmp	r3, #0
 8019588:	d001      	beq.n	801958e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801958a:	f7e9 fe1b 	bl	80031c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801958e:	bf00      	nop
 8019590:	bd80      	pop	{r7, pc}
 8019592:	bf00      	nop
 8019594:	080195a1 	.word	0x080195a1
 8019598:	2000970c 	.word	0x2000970c
 801959c:	20000054 	.word	0x20000054

080195a0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80195a0:	b480      	push	{r7}
 80195a2:	b083      	sub	sp, #12
 80195a4:	af00      	add	r7, sp, #0
 80195a6:	6078      	str	r0, [r7, #4]
 80195a8:	460b      	mov	r3, r1
 80195aa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80195ac:	78fb      	ldrb	r3, [r7, #3]
 80195ae:	3b01      	subs	r3, #1
 80195b0:	2b04      	cmp	r3, #4
 80195b2:	d819      	bhi.n	80195e8 <USBH_UserProcess+0x48>
 80195b4:	a201      	add	r2, pc, #4	@ (adr r2, 80195bc <USBH_UserProcess+0x1c>)
 80195b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80195ba:	bf00      	nop
 80195bc:	080195e9 	.word	0x080195e9
 80195c0:	080195d9 	.word	0x080195d9
 80195c4:	080195e9 	.word	0x080195e9
 80195c8:	080195e1 	.word	0x080195e1
 80195cc:	080195d1 	.word	0x080195d1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80195d0:	4b09      	ldr	r3, [pc, #36]	@ (80195f8 <USBH_UserProcess+0x58>)
 80195d2:	2203      	movs	r2, #3
 80195d4:	701a      	strb	r2, [r3, #0]
  break;
 80195d6:	e008      	b.n	80195ea <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80195d8:	4b07      	ldr	r3, [pc, #28]	@ (80195f8 <USBH_UserProcess+0x58>)
 80195da:	2202      	movs	r2, #2
 80195dc:	701a      	strb	r2, [r3, #0]
  break;
 80195de:	e004      	b.n	80195ea <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80195e0:	4b05      	ldr	r3, [pc, #20]	@ (80195f8 <USBH_UserProcess+0x58>)
 80195e2:	2201      	movs	r2, #1
 80195e4:	701a      	strb	r2, [r3, #0]
  break;
 80195e6:	e000      	b.n	80195ea <USBH_UserProcess+0x4a>

  default:
  break;
 80195e8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80195ea:	bf00      	nop
 80195ec:	370c      	adds	r7, #12
 80195ee:	46bd      	mov	sp, r7
 80195f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f4:	4770      	bx	lr
 80195f6:	bf00      	nop
 80195f8:	20009af0 	.word	0x20009af0

080195fc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80195fc:	b580      	push	{r7, lr}
 80195fe:	b08a      	sub	sp, #40	@ 0x28
 8019600:	af00      	add	r7, sp, #0
 8019602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019604:	f107 0314 	add.w	r3, r7, #20
 8019608:	2200      	movs	r2, #0
 801960a:	601a      	str	r2, [r3, #0]
 801960c:	605a      	str	r2, [r3, #4]
 801960e:	609a      	str	r2, [r3, #8]
 8019610:	60da      	str	r2, [r3, #12]
 8019612:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019614:	687b      	ldr	r3, [r7, #4]
 8019616:	681b      	ldr	r3, [r3, #0]
 8019618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801961c:	d13c      	bne.n	8019698 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801961e:	4b20      	ldr	r3, [pc, #128]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 8019620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019622:	4a1f      	ldr	r2, [pc, #124]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 8019624:	f043 0301 	orr.w	r3, r3, #1
 8019628:	6313      	str	r3, [r2, #48]	@ 0x30
 801962a:	4b1d      	ldr	r3, [pc, #116]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 801962c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801962e:	f003 0301 	and.w	r3, r3, #1
 8019632:	613b      	str	r3, [r7, #16]
 8019634:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8019636:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 801963a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801963c:	2302      	movs	r3, #2
 801963e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019640:	2300      	movs	r3, #0
 8019642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019644:	2303      	movs	r3, #3
 8019646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019648:	230a      	movs	r3, #10
 801964a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801964c:	f107 0314 	add.w	r3, r7, #20
 8019650:	4619      	mov	r1, r3
 8019652:	4814      	ldr	r0, [pc, #80]	@ (80196a4 <HAL_HCD_MspInit+0xa8>)
 8019654:	f7ed fb3c 	bl	8006cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019658:	4b11      	ldr	r3, [pc, #68]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 801965a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801965c:	4a10      	ldr	r2, [pc, #64]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 801965e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019662:	6353      	str	r3, [r2, #52]	@ 0x34
 8019664:	4b0e      	ldr	r3, [pc, #56]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 8019666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801966c:	60fb      	str	r3, [r7, #12]
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	4b0b      	ldr	r3, [pc, #44]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 8019672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019674:	4a0a      	ldr	r2, [pc, #40]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 8019676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801967a:	6453      	str	r3, [r2, #68]	@ 0x44
 801967c:	4b08      	ldr	r3, [pc, #32]	@ (80196a0 <HAL_HCD_MspInit+0xa4>)
 801967e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019680:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019684:	60bb      	str	r3, [r7, #8]
 8019686:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019688:	2200      	movs	r2, #0
 801968a:	2105      	movs	r1, #5
 801968c:	2043      	movs	r0, #67	@ 0x43
 801968e:	f7eb ffdb 	bl	8005648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019692:	2043      	movs	r0, #67	@ 0x43
 8019694:	f7eb fff4 	bl	8005680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019698:	bf00      	nop
 801969a:	3728      	adds	r7, #40	@ 0x28
 801969c:	46bd      	mov	sp, r7
 801969e:	bd80      	pop	{r7, pc}
 80196a0:	40023800 	.word	0x40023800
 80196a4:	40020000 	.word	0x40020000

080196a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b082      	sub	sp, #8
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80196b6:	4618      	mov	r0, r3
 80196b8:	f7f9 fd8b 	bl	80131d2 <USBH_LL_IncTimer>
}
 80196bc:	bf00      	nop
 80196be:	3708      	adds	r7, #8
 80196c0:	46bd      	mov	sp, r7
 80196c2:	bd80      	pop	{r7, pc}

080196c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b082      	sub	sp, #8
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80196d2:	4618      	mov	r0, r3
 80196d4:	f7f9 fdcb 	bl	801326e <USBH_LL_Connect>
}
 80196d8:	bf00      	nop
 80196da:	3708      	adds	r7, #8
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}

080196e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80196e0:	b580      	push	{r7, lr}
 80196e2:	b082      	sub	sp, #8
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80196ee:	4618      	mov	r0, r3
 80196f0:	f7f9 fdd8 	bl	80132a4 <USBH_LL_Disconnect>
}
 80196f4:	bf00      	nop
 80196f6:	3708      	adds	r7, #8
 80196f8:	46bd      	mov	sp, r7
 80196fa:	bd80      	pop	{r7, pc}

080196fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b082      	sub	sp, #8
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
 8019704:	460b      	mov	r3, r1
 8019706:	70fb      	strb	r3, [r7, #3]
 8019708:	4613      	mov	r3, r2
 801970a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8019712:	4618      	mov	r0, r3
 8019714:	f7f9 fe2c 	bl	8013370 <USBH_LL_NotifyURBChange>
#endif
}
 8019718:	bf00      	nop
 801971a:	3708      	adds	r7, #8
 801971c:	46bd      	mov	sp, r7
 801971e:	bd80      	pop	{r7, pc}

08019720 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019720:	b580      	push	{r7, lr}
 8019722:	b082      	sub	sp, #8
 8019724:	af00      	add	r7, sp, #0
 8019726:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801972e:	4618      	mov	r0, r3
 8019730:	f7f9 fd79 	bl	8013226 <USBH_LL_PortEnabled>
}
 8019734:	bf00      	nop
 8019736:	3708      	adds	r7, #8
 8019738:	46bd      	mov	sp, r7
 801973a:	bd80      	pop	{r7, pc}

0801973c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801973c:	b580      	push	{r7, lr}
 801973e:	b082      	sub	sp, #8
 8019740:	af00      	add	r7, sp, #0
 8019742:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801974a:	4618      	mov	r0, r3
 801974c:	f7f9 fd7d 	bl	801324a <USBH_LL_PortDisabled>
}
 8019750:	bf00      	nop
 8019752:	3708      	adds	r7, #8
 8019754:	46bd      	mov	sp, r7
 8019756:	bd80      	pop	{r7, pc}

08019758 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019758:	b580      	push	{r7, lr}
 801975a:	b082      	sub	sp, #8
 801975c:	af00      	add	r7, sp, #0
 801975e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8019766:	2b01      	cmp	r3, #1
 8019768:	d12a      	bne.n	80197c0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801976a:	4a18      	ldr	r2, [pc, #96]	@ (80197cc <USBH_LL_Init+0x74>)
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	4a15      	ldr	r2, [pc, #84]	@ (80197cc <USBH_LL_Init+0x74>)
 8019776:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801977a:	4b14      	ldr	r3, [pc, #80]	@ (80197cc <USBH_LL_Init+0x74>)
 801977c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8019780:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019782:	4b12      	ldr	r3, [pc, #72]	@ (80197cc <USBH_LL_Init+0x74>)
 8019784:	2208      	movs	r2, #8
 8019786:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019788:	4b10      	ldr	r3, [pc, #64]	@ (80197cc <USBH_LL_Init+0x74>)
 801978a:	2201      	movs	r2, #1
 801978c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801978e:	4b0f      	ldr	r3, [pc, #60]	@ (80197cc <USBH_LL_Init+0x74>)
 8019790:	2200      	movs	r2, #0
 8019792:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019794:	4b0d      	ldr	r3, [pc, #52]	@ (80197cc <USBH_LL_Init+0x74>)
 8019796:	2202      	movs	r2, #2
 8019798:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801979a:	4b0c      	ldr	r3, [pc, #48]	@ (80197cc <USBH_LL_Init+0x74>)
 801979c:	2200      	movs	r2, #0
 801979e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80197a0:	480a      	ldr	r0, [pc, #40]	@ (80197cc <USBH_LL_Init+0x74>)
 80197a2:	f7ed fc72 	bl	800708a <HAL_HCD_Init>
 80197a6:	4603      	mov	r3, r0
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d001      	beq.n	80197b0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80197ac:	f7e9 fd0a 	bl	80031c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80197b0:	4806      	ldr	r0, [pc, #24]	@ (80197cc <USBH_LL_Init+0x74>)
 80197b2:	f7ee f8d3 	bl	800795c <HAL_HCD_GetCurrentFrame>
 80197b6:	4603      	mov	r3, r0
 80197b8:	4619      	mov	r1, r3
 80197ba:	6878      	ldr	r0, [r7, #4]
 80197bc:	f7f9 fcfa 	bl	80131b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80197c0:	2300      	movs	r3, #0
}
 80197c2:	4618      	mov	r0, r3
 80197c4:	3708      	adds	r7, #8
 80197c6:	46bd      	mov	sp, r7
 80197c8:	bd80      	pop	{r7, pc}
 80197ca:	bf00      	nop
 80197cc:	20009af4 	.word	0x20009af4

080197d0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b084      	sub	sp, #16
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197d8:	2300      	movs	r3, #0
 80197da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80197dc:	2300      	movs	r3, #0
 80197de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80197e6:	4618      	mov	r0, r3
 80197e8:	f7ee f840 	bl	800786c <HAL_HCD_Start>
 80197ec:	4603      	mov	r3, r0
 80197ee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80197f0:	7bfb      	ldrb	r3, [r7, #15]
 80197f2:	4618      	mov	r0, r3
 80197f4:	f000 f95e 	bl	8019ab4 <USBH_Get_USB_Status>
 80197f8:	4603      	mov	r3, r0
 80197fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80197fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80197fe:	4618      	mov	r0, r3
 8019800:	3710      	adds	r7, #16
 8019802:	46bd      	mov	sp, r7
 8019804:	bd80      	pop	{r7, pc}

08019806 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019806:	b580      	push	{r7, lr}
 8019808:	b084      	sub	sp, #16
 801980a:	af00      	add	r7, sp, #0
 801980c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801980e:	2300      	movs	r3, #0
 8019810:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019812:	2300      	movs	r3, #0
 8019814:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801981c:	4618      	mov	r0, r3
 801981e:	f7ee f848 	bl	80078b2 <HAL_HCD_Stop>
 8019822:	4603      	mov	r3, r0
 8019824:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019826:	7bfb      	ldrb	r3, [r7, #15]
 8019828:	4618      	mov	r0, r3
 801982a:	f000 f943 	bl	8019ab4 <USBH_Get_USB_Status>
 801982e:	4603      	mov	r3, r0
 8019830:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019832:	7bbb      	ldrb	r3, [r7, #14]
}
 8019834:	4618      	mov	r0, r3
 8019836:	3710      	adds	r7, #16
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}

0801983c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b084      	sub	sp, #16
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019844:	2301      	movs	r3, #1
 8019846:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801984e:	4618      	mov	r0, r3
 8019850:	f7ee f892 	bl	8007978 <HAL_HCD_GetCurrentSpeed>
 8019854:	4603      	mov	r3, r0
 8019856:	2b02      	cmp	r3, #2
 8019858:	d00c      	beq.n	8019874 <USBH_LL_GetSpeed+0x38>
 801985a:	2b02      	cmp	r3, #2
 801985c:	d80d      	bhi.n	801987a <USBH_LL_GetSpeed+0x3e>
 801985e:	2b00      	cmp	r3, #0
 8019860:	d002      	beq.n	8019868 <USBH_LL_GetSpeed+0x2c>
 8019862:	2b01      	cmp	r3, #1
 8019864:	d003      	beq.n	801986e <USBH_LL_GetSpeed+0x32>
 8019866:	e008      	b.n	801987a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019868:	2300      	movs	r3, #0
 801986a:	73fb      	strb	r3, [r7, #15]
    break;
 801986c:	e008      	b.n	8019880 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801986e:	2301      	movs	r3, #1
 8019870:	73fb      	strb	r3, [r7, #15]
    break;
 8019872:	e005      	b.n	8019880 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019874:	2302      	movs	r3, #2
 8019876:	73fb      	strb	r3, [r7, #15]
    break;
 8019878:	e002      	b.n	8019880 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801987a:	2301      	movs	r3, #1
 801987c:	73fb      	strb	r3, [r7, #15]
    break;
 801987e:	bf00      	nop
  }
  return  speed;
 8019880:	7bfb      	ldrb	r3, [r7, #15]
}
 8019882:	4618      	mov	r0, r3
 8019884:	3710      	adds	r7, #16
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}

0801988a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801988a:	b580      	push	{r7, lr}
 801988c:	b084      	sub	sp, #16
 801988e:	af00      	add	r7, sp, #0
 8019890:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019892:	2300      	movs	r3, #0
 8019894:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019896:	2300      	movs	r3, #0
 8019898:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80198a0:	4618      	mov	r0, r3
 80198a2:	f7ee f823 	bl	80078ec <HAL_HCD_ResetPort>
 80198a6:	4603      	mov	r3, r0
 80198a8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80198aa:	7bfb      	ldrb	r3, [r7, #15]
 80198ac:	4618      	mov	r0, r3
 80198ae:	f000 f901 	bl	8019ab4 <USBH_Get_USB_Status>
 80198b2:	4603      	mov	r3, r0
 80198b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80198b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80198b8:	4618      	mov	r0, r3
 80198ba:	3710      	adds	r7, #16
 80198bc:	46bd      	mov	sp, r7
 80198be:	bd80      	pop	{r7, pc}

080198c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b082      	sub	sp, #8
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
 80198c8:	460b      	mov	r3, r1
 80198ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80198d2:	78fa      	ldrb	r2, [r7, #3]
 80198d4:	4611      	mov	r1, r2
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7ee f82b 	bl	8007932 <HAL_HCD_HC_GetXferCount>
 80198dc:	4603      	mov	r3, r0
}
 80198de:	4618      	mov	r0, r3
 80198e0:	3708      	adds	r7, #8
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd80      	pop	{r7, pc}

080198e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80198e6:	b590      	push	{r4, r7, lr}
 80198e8:	b089      	sub	sp, #36	@ 0x24
 80198ea:	af04      	add	r7, sp, #16
 80198ec:	6078      	str	r0, [r7, #4]
 80198ee:	4608      	mov	r0, r1
 80198f0:	4611      	mov	r1, r2
 80198f2:	461a      	mov	r2, r3
 80198f4:	4603      	mov	r3, r0
 80198f6:	70fb      	strb	r3, [r7, #3]
 80198f8:	460b      	mov	r3, r1
 80198fa:	70bb      	strb	r3, [r7, #2]
 80198fc:	4613      	mov	r3, r2
 80198fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019900:	2300      	movs	r3, #0
 8019902:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019904:	2300      	movs	r3, #0
 8019906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801990e:	787c      	ldrb	r4, [r7, #1]
 8019910:	78ba      	ldrb	r2, [r7, #2]
 8019912:	78f9      	ldrb	r1, [r7, #3]
 8019914:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019916:	9302      	str	r3, [sp, #8]
 8019918:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801991c:	9301      	str	r3, [sp, #4]
 801991e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019922:	9300      	str	r3, [sp, #0]
 8019924:	4623      	mov	r3, r4
 8019926:	f7ed fc17 	bl	8007158 <HAL_HCD_HC_Init>
 801992a:	4603      	mov	r3, r0
 801992c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801992e:	7bfb      	ldrb	r3, [r7, #15]
 8019930:	4618      	mov	r0, r3
 8019932:	f000 f8bf 	bl	8019ab4 <USBH_Get_USB_Status>
 8019936:	4603      	mov	r3, r0
 8019938:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801993a:	7bbb      	ldrb	r3, [r7, #14]
}
 801993c:	4618      	mov	r0, r3
 801993e:	3714      	adds	r7, #20
 8019940:	46bd      	mov	sp, r7
 8019942:	bd90      	pop	{r4, r7, pc}

08019944 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019944:	b580      	push	{r7, lr}
 8019946:	b084      	sub	sp, #16
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
 801994c:	460b      	mov	r3, r1
 801994e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019950:	2300      	movs	r3, #0
 8019952:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019954:	2300      	movs	r3, #0
 8019956:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801995e:	78fa      	ldrb	r2, [r7, #3]
 8019960:	4611      	mov	r1, r2
 8019962:	4618      	mov	r0, r3
 8019964:	f7ed fcb0 	bl	80072c8 <HAL_HCD_HC_Halt>
 8019968:	4603      	mov	r3, r0
 801996a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801996c:	7bfb      	ldrb	r3, [r7, #15]
 801996e:	4618      	mov	r0, r3
 8019970:	f000 f8a0 	bl	8019ab4 <USBH_Get_USB_Status>
 8019974:	4603      	mov	r3, r0
 8019976:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019978:	7bbb      	ldrb	r3, [r7, #14]
}
 801997a:	4618      	mov	r0, r3
 801997c:	3710      	adds	r7, #16
 801997e:	46bd      	mov	sp, r7
 8019980:	bd80      	pop	{r7, pc}

08019982 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019982:	b590      	push	{r4, r7, lr}
 8019984:	b089      	sub	sp, #36	@ 0x24
 8019986:	af04      	add	r7, sp, #16
 8019988:	6078      	str	r0, [r7, #4]
 801998a:	4608      	mov	r0, r1
 801998c:	4611      	mov	r1, r2
 801998e:	461a      	mov	r2, r3
 8019990:	4603      	mov	r3, r0
 8019992:	70fb      	strb	r3, [r7, #3]
 8019994:	460b      	mov	r3, r1
 8019996:	70bb      	strb	r3, [r7, #2]
 8019998:	4613      	mov	r3, r2
 801999a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801999c:	2300      	movs	r3, #0
 801999e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80199a0:	2300      	movs	r3, #0
 80199a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80199aa:	787c      	ldrb	r4, [r7, #1]
 80199ac:	78ba      	ldrb	r2, [r7, #2]
 80199ae:	78f9      	ldrb	r1, [r7, #3]
 80199b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80199b4:	9303      	str	r3, [sp, #12]
 80199b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80199b8:	9302      	str	r3, [sp, #8]
 80199ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199bc:	9301      	str	r3, [sp, #4]
 80199be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80199c2:	9300      	str	r3, [sp, #0]
 80199c4:	4623      	mov	r3, r4
 80199c6:	f7ed fca3 	bl	8007310 <HAL_HCD_HC_SubmitRequest>
 80199ca:	4603      	mov	r3, r0
 80199cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80199ce:	7bfb      	ldrb	r3, [r7, #15]
 80199d0:	4618      	mov	r0, r3
 80199d2:	f000 f86f 	bl	8019ab4 <USBH_Get_USB_Status>
 80199d6:	4603      	mov	r3, r0
 80199d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199da:	7bbb      	ldrb	r3, [r7, #14]
}
 80199dc:	4618      	mov	r0, r3
 80199de:	3714      	adds	r7, #20
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bd90      	pop	{r4, r7, pc}

080199e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80199e4:	b580      	push	{r7, lr}
 80199e6:	b082      	sub	sp, #8
 80199e8:	af00      	add	r7, sp, #0
 80199ea:	6078      	str	r0, [r7, #4]
 80199ec:	460b      	mov	r3, r1
 80199ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80199f6:	78fa      	ldrb	r2, [r7, #3]
 80199f8:	4611      	mov	r1, r2
 80199fa:	4618      	mov	r0, r3
 80199fc:	f7ed ff84 	bl	8007908 <HAL_HCD_HC_GetURBState>
 8019a00:	4603      	mov	r3, r0
}
 8019a02:	4618      	mov	r0, r3
 8019a04:	3708      	adds	r7, #8
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd80      	pop	{r7, pc}

08019a0a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019a0a:	b580      	push	{r7, lr}
 8019a0c:	b082      	sub	sp, #8
 8019a0e:	af00      	add	r7, sp, #0
 8019a10:	6078      	str	r0, [r7, #4]
 8019a12:	460b      	mov	r3, r1
 8019a14:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8019a1c:	2b01      	cmp	r3, #1
 8019a1e:	d103      	bne.n	8019a28 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019a20:	78fb      	ldrb	r3, [r7, #3]
 8019a22:	4618      	mov	r0, r3
 8019a24:	f000 f872 	bl	8019b0c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019a28:	20c8      	movs	r0, #200	@ 0xc8
 8019a2a:	f7eb fa99 	bl	8004f60 <HAL_Delay>
  return USBH_OK;
 8019a2e:	2300      	movs	r3, #0
}
 8019a30:	4618      	mov	r0, r3
 8019a32:	3708      	adds	r7, #8
 8019a34:	46bd      	mov	sp, r7
 8019a36:	bd80      	pop	{r7, pc}

08019a38 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019a38:	b480      	push	{r7}
 8019a3a:	b085      	sub	sp, #20
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	6078      	str	r0, [r7, #4]
 8019a40:	460b      	mov	r3, r1
 8019a42:	70fb      	strb	r3, [r7, #3]
 8019a44:	4613      	mov	r3, r2
 8019a46:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8019a4e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019a50:	78fa      	ldrb	r2, [r7, #3]
 8019a52:	68f9      	ldr	r1, [r7, #12]
 8019a54:	4613      	mov	r3, r2
 8019a56:	011b      	lsls	r3, r3, #4
 8019a58:	1a9b      	subs	r3, r3, r2
 8019a5a:	009b      	lsls	r3, r3, #2
 8019a5c:	440b      	add	r3, r1
 8019a5e:	3317      	adds	r3, #23
 8019a60:	781b      	ldrb	r3, [r3, #0]
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d00a      	beq.n	8019a7c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019a66:	78fa      	ldrb	r2, [r7, #3]
 8019a68:	68f9      	ldr	r1, [r7, #12]
 8019a6a:	4613      	mov	r3, r2
 8019a6c:	011b      	lsls	r3, r3, #4
 8019a6e:	1a9b      	subs	r3, r3, r2
 8019a70:	009b      	lsls	r3, r3, #2
 8019a72:	440b      	add	r3, r1
 8019a74:	333c      	adds	r3, #60	@ 0x3c
 8019a76:	78ba      	ldrb	r2, [r7, #2]
 8019a78:	701a      	strb	r2, [r3, #0]
 8019a7a:	e009      	b.n	8019a90 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019a7c:	78fa      	ldrb	r2, [r7, #3]
 8019a7e:	68f9      	ldr	r1, [r7, #12]
 8019a80:	4613      	mov	r3, r2
 8019a82:	011b      	lsls	r3, r3, #4
 8019a84:	1a9b      	subs	r3, r3, r2
 8019a86:	009b      	lsls	r3, r3, #2
 8019a88:	440b      	add	r3, r1
 8019a8a:	333d      	adds	r3, #61	@ 0x3d
 8019a8c:	78ba      	ldrb	r2, [r7, #2]
 8019a8e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019a90:	2300      	movs	r3, #0
}
 8019a92:	4618      	mov	r0, r3
 8019a94:	3714      	adds	r7, #20
 8019a96:	46bd      	mov	sp, r7
 8019a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9c:	4770      	bx	lr

08019a9e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019a9e:	b580      	push	{r7, lr}
 8019aa0:	b082      	sub	sp, #8
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019aa6:	6878      	ldr	r0, [r7, #4]
 8019aa8:	f7eb fa5a 	bl	8004f60 <HAL_Delay>
}
 8019aac:	bf00      	nop
 8019aae:	3708      	adds	r7, #8
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	bd80      	pop	{r7, pc}

08019ab4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019ab4:	b480      	push	{r7}
 8019ab6:	b085      	sub	sp, #20
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	4603      	mov	r3, r0
 8019abc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019abe:	2300      	movs	r3, #0
 8019ac0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019ac2:	79fb      	ldrb	r3, [r7, #7]
 8019ac4:	2b03      	cmp	r3, #3
 8019ac6:	d817      	bhi.n	8019af8 <USBH_Get_USB_Status+0x44>
 8019ac8:	a201      	add	r2, pc, #4	@ (adr r2, 8019ad0 <USBH_Get_USB_Status+0x1c>)
 8019aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ace:	bf00      	nop
 8019ad0:	08019ae1 	.word	0x08019ae1
 8019ad4:	08019ae7 	.word	0x08019ae7
 8019ad8:	08019aed 	.word	0x08019aed
 8019adc:	08019af3 	.word	0x08019af3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8019ae4:	e00b      	b.n	8019afe <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019ae6:	2302      	movs	r3, #2
 8019ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8019aea:	e008      	b.n	8019afe <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019aec:	2301      	movs	r3, #1
 8019aee:	73fb      	strb	r3, [r7, #15]
    break;
 8019af0:	e005      	b.n	8019afe <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019af2:	2302      	movs	r3, #2
 8019af4:	73fb      	strb	r3, [r7, #15]
    break;
 8019af6:	e002      	b.n	8019afe <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019af8:	2302      	movs	r3, #2
 8019afa:	73fb      	strb	r3, [r7, #15]
    break;
 8019afc:	bf00      	nop
  }
  return usb_status;
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b00:	4618      	mov	r0, r3
 8019b02:	3714      	adds	r7, #20
 8019b04:	46bd      	mov	sp, r7
 8019b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b0a:	4770      	bx	lr

08019b0c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b084      	sub	sp, #16
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	4603      	mov	r3, r0
 8019b14:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8019b16:	79fb      	ldrb	r3, [r7, #7]
 8019b18:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019b1a:	79fb      	ldrb	r3, [r7, #7]
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d102      	bne.n	8019b26 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8019b20:	2300      	movs	r3, #0
 8019b22:	73fb      	strb	r3, [r7, #15]
 8019b24:	e001      	b.n	8019b2a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8019b26:	2301      	movs	r3, #1
 8019b28:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8019b2a:	7bfb      	ldrb	r3, [r7, #15]
 8019b2c:	461a      	mov	r2, r3
 8019b2e:	2120      	movs	r1, #32
 8019b30:	4803      	ldr	r0, [pc, #12]	@ (8019b40 <MX_DriverVbusFS+0x34>)
 8019b32:	f7ed fa91 	bl	8007058 <HAL_GPIO_WritePin>
}
 8019b36:	bf00      	nop
 8019b38:	3710      	adds	r7, #16
 8019b3a:	46bd      	mov	sp, r7
 8019b3c:	bd80      	pop	{r7, pc}
 8019b3e:	bf00      	nop
 8019b40:	40020c00 	.word	0x40020c00

08019b44 <malloc>:
 8019b44:	4b02      	ldr	r3, [pc, #8]	@ (8019b50 <malloc+0xc>)
 8019b46:	4601      	mov	r1, r0
 8019b48:	6818      	ldr	r0, [r3, #0]
 8019b4a:	f000 b82d 	b.w	8019ba8 <_malloc_r>
 8019b4e:	bf00      	nop
 8019b50:	20000078 	.word	0x20000078

08019b54 <free>:
 8019b54:	4b02      	ldr	r3, [pc, #8]	@ (8019b60 <free+0xc>)
 8019b56:	4601      	mov	r1, r0
 8019b58:	6818      	ldr	r0, [r3, #0]
 8019b5a:	f000 b9c1 	b.w	8019ee0 <_free_r>
 8019b5e:	bf00      	nop
 8019b60:	20000078 	.word	0x20000078

08019b64 <sbrk_aligned>:
 8019b64:	b570      	push	{r4, r5, r6, lr}
 8019b66:	4e0f      	ldr	r6, [pc, #60]	@ (8019ba4 <sbrk_aligned+0x40>)
 8019b68:	460c      	mov	r4, r1
 8019b6a:	6831      	ldr	r1, [r6, #0]
 8019b6c:	4605      	mov	r5, r0
 8019b6e:	b911      	cbnz	r1, 8019b76 <sbrk_aligned+0x12>
 8019b70:	f000 f96c 	bl	8019e4c <_sbrk_r>
 8019b74:	6030      	str	r0, [r6, #0]
 8019b76:	4621      	mov	r1, r4
 8019b78:	4628      	mov	r0, r5
 8019b7a:	f000 f967 	bl	8019e4c <_sbrk_r>
 8019b7e:	1c43      	adds	r3, r0, #1
 8019b80:	d103      	bne.n	8019b8a <sbrk_aligned+0x26>
 8019b82:	f04f 34ff 	mov.w	r4, #4294967295
 8019b86:	4620      	mov	r0, r4
 8019b88:	bd70      	pop	{r4, r5, r6, pc}
 8019b8a:	1cc4      	adds	r4, r0, #3
 8019b8c:	f024 0403 	bic.w	r4, r4, #3
 8019b90:	42a0      	cmp	r0, r4
 8019b92:	d0f8      	beq.n	8019b86 <sbrk_aligned+0x22>
 8019b94:	1a21      	subs	r1, r4, r0
 8019b96:	4628      	mov	r0, r5
 8019b98:	f000 f958 	bl	8019e4c <_sbrk_r>
 8019b9c:	3001      	adds	r0, #1
 8019b9e:	d1f2      	bne.n	8019b86 <sbrk_aligned+0x22>
 8019ba0:	e7ef      	b.n	8019b82 <sbrk_aligned+0x1e>
 8019ba2:	bf00      	nop
 8019ba4:	20009ed4 	.word	0x20009ed4

08019ba8 <_malloc_r>:
 8019ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bac:	1ccd      	adds	r5, r1, #3
 8019bae:	f025 0503 	bic.w	r5, r5, #3
 8019bb2:	3508      	adds	r5, #8
 8019bb4:	2d0c      	cmp	r5, #12
 8019bb6:	bf38      	it	cc
 8019bb8:	250c      	movcc	r5, #12
 8019bba:	2d00      	cmp	r5, #0
 8019bbc:	4606      	mov	r6, r0
 8019bbe:	db01      	blt.n	8019bc4 <_malloc_r+0x1c>
 8019bc0:	42a9      	cmp	r1, r5
 8019bc2:	d904      	bls.n	8019bce <_malloc_r+0x26>
 8019bc4:	230c      	movs	r3, #12
 8019bc6:	6033      	str	r3, [r6, #0]
 8019bc8:	2000      	movs	r0, #0
 8019bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019ca4 <_malloc_r+0xfc>
 8019bd2:	f000 f869 	bl	8019ca8 <__malloc_lock>
 8019bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8019bda:	461c      	mov	r4, r3
 8019bdc:	bb44      	cbnz	r4, 8019c30 <_malloc_r+0x88>
 8019bde:	4629      	mov	r1, r5
 8019be0:	4630      	mov	r0, r6
 8019be2:	f7ff ffbf 	bl	8019b64 <sbrk_aligned>
 8019be6:	1c43      	adds	r3, r0, #1
 8019be8:	4604      	mov	r4, r0
 8019bea:	d158      	bne.n	8019c9e <_malloc_r+0xf6>
 8019bec:	f8d8 4000 	ldr.w	r4, [r8]
 8019bf0:	4627      	mov	r7, r4
 8019bf2:	2f00      	cmp	r7, #0
 8019bf4:	d143      	bne.n	8019c7e <_malloc_r+0xd6>
 8019bf6:	2c00      	cmp	r4, #0
 8019bf8:	d04b      	beq.n	8019c92 <_malloc_r+0xea>
 8019bfa:	6823      	ldr	r3, [r4, #0]
 8019bfc:	4639      	mov	r1, r7
 8019bfe:	4630      	mov	r0, r6
 8019c00:	eb04 0903 	add.w	r9, r4, r3
 8019c04:	f000 f922 	bl	8019e4c <_sbrk_r>
 8019c08:	4581      	cmp	r9, r0
 8019c0a:	d142      	bne.n	8019c92 <_malloc_r+0xea>
 8019c0c:	6821      	ldr	r1, [r4, #0]
 8019c0e:	1a6d      	subs	r5, r5, r1
 8019c10:	4629      	mov	r1, r5
 8019c12:	4630      	mov	r0, r6
 8019c14:	f7ff ffa6 	bl	8019b64 <sbrk_aligned>
 8019c18:	3001      	adds	r0, #1
 8019c1a:	d03a      	beq.n	8019c92 <_malloc_r+0xea>
 8019c1c:	6823      	ldr	r3, [r4, #0]
 8019c1e:	442b      	add	r3, r5
 8019c20:	6023      	str	r3, [r4, #0]
 8019c22:	f8d8 3000 	ldr.w	r3, [r8]
 8019c26:	685a      	ldr	r2, [r3, #4]
 8019c28:	bb62      	cbnz	r2, 8019c84 <_malloc_r+0xdc>
 8019c2a:	f8c8 7000 	str.w	r7, [r8]
 8019c2e:	e00f      	b.n	8019c50 <_malloc_r+0xa8>
 8019c30:	6822      	ldr	r2, [r4, #0]
 8019c32:	1b52      	subs	r2, r2, r5
 8019c34:	d420      	bmi.n	8019c78 <_malloc_r+0xd0>
 8019c36:	2a0b      	cmp	r2, #11
 8019c38:	d917      	bls.n	8019c6a <_malloc_r+0xc2>
 8019c3a:	1961      	adds	r1, r4, r5
 8019c3c:	42a3      	cmp	r3, r4
 8019c3e:	6025      	str	r5, [r4, #0]
 8019c40:	bf18      	it	ne
 8019c42:	6059      	strne	r1, [r3, #4]
 8019c44:	6863      	ldr	r3, [r4, #4]
 8019c46:	bf08      	it	eq
 8019c48:	f8c8 1000 	streq.w	r1, [r8]
 8019c4c:	5162      	str	r2, [r4, r5]
 8019c4e:	604b      	str	r3, [r1, #4]
 8019c50:	4630      	mov	r0, r6
 8019c52:	f000 f82f 	bl	8019cb4 <__malloc_unlock>
 8019c56:	f104 000b 	add.w	r0, r4, #11
 8019c5a:	1d23      	adds	r3, r4, #4
 8019c5c:	f020 0007 	bic.w	r0, r0, #7
 8019c60:	1ac2      	subs	r2, r0, r3
 8019c62:	bf1c      	itt	ne
 8019c64:	1a1b      	subne	r3, r3, r0
 8019c66:	50a3      	strne	r3, [r4, r2]
 8019c68:	e7af      	b.n	8019bca <_malloc_r+0x22>
 8019c6a:	6862      	ldr	r2, [r4, #4]
 8019c6c:	42a3      	cmp	r3, r4
 8019c6e:	bf0c      	ite	eq
 8019c70:	f8c8 2000 	streq.w	r2, [r8]
 8019c74:	605a      	strne	r2, [r3, #4]
 8019c76:	e7eb      	b.n	8019c50 <_malloc_r+0xa8>
 8019c78:	4623      	mov	r3, r4
 8019c7a:	6864      	ldr	r4, [r4, #4]
 8019c7c:	e7ae      	b.n	8019bdc <_malloc_r+0x34>
 8019c7e:	463c      	mov	r4, r7
 8019c80:	687f      	ldr	r7, [r7, #4]
 8019c82:	e7b6      	b.n	8019bf2 <_malloc_r+0x4a>
 8019c84:	461a      	mov	r2, r3
 8019c86:	685b      	ldr	r3, [r3, #4]
 8019c88:	42a3      	cmp	r3, r4
 8019c8a:	d1fb      	bne.n	8019c84 <_malloc_r+0xdc>
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	6053      	str	r3, [r2, #4]
 8019c90:	e7de      	b.n	8019c50 <_malloc_r+0xa8>
 8019c92:	230c      	movs	r3, #12
 8019c94:	6033      	str	r3, [r6, #0]
 8019c96:	4630      	mov	r0, r6
 8019c98:	f000 f80c 	bl	8019cb4 <__malloc_unlock>
 8019c9c:	e794      	b.n	8019bc8 <_malloc_r+0x20>
 8019c9e:	6005      	str	r5, [r0, #0]
 8019ca0:	e7d6      	b.n	8019c50 <_malloc_r+0xa8>
 8019ca2:	bf00      	nop
 8019ca4:	20009ed8 	.word	0x20009ed8

08019ca8 <__malloc_lock>:
 8019ca8:	4801      	ldr	r0, [pc, #4]	@ (8019cb0 <__malloc_lock+0x8>)
 8019caa:	f000 b909 	b.w	8019ec0 <__retarget_lock_acquire_recursive>
 8019cae:	bf00      	nop
 8019cb0:	2000a018 	.word	0x2000a018

08019cb4 <__malloc_unlock>:
 8019cb4:	4801      	ldr	r0, [pc, #4]	@ (8019cbc <__malloc_unlock+0x8>)
 8019cb6:	f000 b904 	b.w	8019ec2 <__retarget_lock_release_recursive>
 8019cba:	bf00      	nop
 8019cbc:	2000a018 	.word	0x2000a018

08019cc0 <sniprintf>:
 8019cc0:	b40c      	push	{r2, r3}
 8019cc2:	b530      	push	{r4, r5, lr}
 8019cc4:	4b18      	ldr	r3, [pc, #96]	@ (8019d28 <sniprintf+0x68>)
 8019cc6:	1e0c      	subs	r4, r1, #0
 8019cc8:	681d      	ldr	r5, [r3, #0]
 8019cca:	b09d      	sub	sp, #116	@ 0x74
 8019ccc:	da08      	bge.n	8019ce0 <sniprintf+0x20>
 8019cce:	238b      	movs	r3, #139	@ 0x8b
 8019cd0:	602b      	str	r3, [r5, #0]
 8019cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8019cd6:	b01d      	add	sp, #116	@ 0x74
 8019cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019cdc:	b002      	add	sp, #8
 8019cde:	4770      	bx	lr
 8019ce0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8019ce8:	f04f 0300 	mov.w	r3, #0
 8019cec:	931b      	str	r3, [sp, #108]	@ 0x6c
 8019cee:	bf14      	ite	ne
 8019cf0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019cf4:	4623      	moveq	r3, r4
 8019cf6:	9304      	str	r3, [sp, #16]
 8019cf8:	9307      	str	r3, [sp, #28]
 8019cfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019cfe:	9002      	str	r0, [sp, #8]
 8019d00:	9006      	str	r0, [sp, #24]
 8019d02:	f8ad 3016 	strh.w	r3, [sp, #22]
 8019d06:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8019d08:	ab21      	add	r3, sp, #132	@ 0x84
 8019d0a:	a902      	add	r1, sp, #8
 8019d0c:	4628      	mov	r0, r5
 8019d0e:	9301      	str	r3, [sp, #4]
 8019d10:	f000 f98c 	bl	801a02c <_svfiprintf_r>
 8019d14:	1c43      	adds	r3, r0, #1
 8019d16:	bfbc      	itt	lt
 8019d18:	238b      	movlt	r3, #139	@ 0x8b
 8019d1a:	602b      	strlt	r3, [r5, #0]
 8019d1c:	2c00      	cmp	r4, #0
 8019d1e:	d0da      	beq.n	8019cd6 <sniprintf+0x16>
 8019d20:	9b02      	ldr	r3, [sp, #8]
 8019d22:	2200      	movs	r2, #0
 8019d24:	701a      	strb	r2, [r3, #0]
 8019d26:	e7d6      	b.n	8019cd6 <sniprintf+0x16>
 8019d28:	20000078 	.word	0x20000078

08019d2c <siprintf>:
 8019d2c:	b40e      	push	{r1, r2, r3}
 8019d2e:	b510      	push	{r4, lr}
 8019d30:	b09d      	sub	sp, #116	@ 0x74
 8019d32:	ab1f      	add	r3, sp, #124	@ 0x7c
 8019d34:	9002      	str	r0, [sp, #8]
 8019d36:	9006      	str	r0, [sp, #24]
 8019d38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8019d3c:	480a      	ldr	r0, [pc, #40]	@ (8019d68 <siprintf+0x3c>)
 8019d3e:	9107      	str	r1, [sp, #28]
 8019d40:	9104      	str	r1, [sp, #16]
 8019d42:	490a      	ldr	r1, [pc, #40]	@ (8019d6c <siprintf+0x40>)
 8019d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8019d48:	9105      	str	r1, [sp, #20]
 8019d4a:	2400      	movs	r4, #0
 8019d4c:	a902      	add	r1, sp, #8
 8019d4e:	6800      	ldr	r0, [r0, #0]
 8019d50:	9301      	str	r3, [sp, #4]
 8019d52:	941b      	str	r4, [sp, #108]	@ 0x6c
 8019d54:	f000 f96a 	bl	801a02c <_svfiprintf_r>
 8019d58:	9b02      	ldr	r3, [sp, #8]
 8019d5a:	701c      	strb	r4, [r3, #0]
 8019d5c:	b01d      	add	sp, #116	@ 0x74
 8019d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d62:	b003      	add	sp, #12
 8019d64:	4770      	bx	lr
 8019d66:	bf00      	nop
 8019d68:	20000078 	.word	0x20000078
 8019d6c:	ffff0208 	.word	0xffff0208

08019d70 <_vsniprintf_r>:
 8019d70:	b530      	push	{r4, r5, lr}
 8019d72:	4614      	mov	r4, r2
 8019d74:	2c00      	cmp	r4, #0
 8019d76:	b09b      	sub	sp, #108	@ 0x6c
 8019d78:	4605      	mov	r5, r0
 8019d7a:	461a      	mov	r2, r3
 8019d7c:	da05      	bge.n	8019d8a <_vsniprintf_r+0x1a>
 8019d7e:	238b      	movs	r3, #139	@ 0x8b
 8019d80:	6003      	str	r3, [r0, #0]
 8019d82:	f04f 30ff 	mov.w	r0, #4294967295
 8019d86:	b01b      	add	sp, #108	@ 0x6c
 8019d88:	bd30      	pop	{r4, r5, pc}
 8019d8a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8019d8e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019d92:	f04f 0300 	mov.w	r3, #0
 8019d96:	9319      	str	r3, [sp, #100]	@ 0x64
 8019d98:	bf14      	ite	ne
 8019d9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8019d9e:	4623      	moveq	r3, r4
 8019da0:	9302      	str	r3, [sp, #8]
 8019da2:	9305      	str	r3, [sp, #20]
 8019da4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019da8:	9100      	str	r1, [sp, #0]
 8019daa:	9104      	str	r1, [sp, #16]
 8019dac:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019db0:	4669      	mov	r1, sp
 8019db2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019db4:	f000 f93a 	bl	801a02c <_svfiprintf_r>
 8019db8:	1c43      	adds	r3, r0, #1
 8019dba:	bfbc      	itt	lt
 8019dbc:	238b      	movlt	r3, #139	@ 0x8b
 8019dbe:	602b      	strlt	r3, [r5, #0]
 8019dc0:	2c00      	cmp	r4, #0
 8019dc2:	d0e0      	beq.n	8019d86 <_vsniprintf_r+0x16>
 8019dc4:	9b00      	ldr	r3, [sp, #0]
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	701a      	strb	r2, [r3, #0]
 8019dca:	e7dc      	b.n	8019d86 <_vsniprintf_r+0x16>

08019dcc <vsniprintf>:
 8019dcc:	b507      	push	{r0, r1, r2, lr}
 8019dce:	9300      	str	r3, [sp, #0]
 8019dd0:	4613      	mov	r3, r2
 8019dd2:	460a      	mov	r2, r1
 8019dd4:	4601      	mov	r1, r0
 8019dd6:	4803      	ldr	r0, [pc, #12]	@ (8019de4 <vsniprintf+0x18>)
 8019dd8:	6800      	ldr	r0, [r0, #0]
 8019dda:	f7ff ffc9 	bl	8019d70 <_vsniprintf_r>
 8019dde:	b003      	add	sp, #12
 8019de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8019de4:	20000078 	.word	0x20000078

08019de8 <memset>:
 8019de8:	4402      	add	r2, r0
 8019dea:	4603      	mov	r3, r0
 8019dec:	4293      	cmp	r3, r2
 8019dee:	d100      	bne.n	8019df2 <memset+0xa>
 8019df0:	4770      	bx	lr
 8019df2:	f803 1b01 	strb.w	r1, [r3], #1
 8019df6:	e7f9      	b.n	8019dec <memset+0x4>

08019df8 <strncpy>:
 8019df8:	b510      	push	{r4, lr}
 8019dfa:	3901      	subs	r1, #1
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	b132      	cbz	r2, 8019e0e <strncpy+0x16>
 8019e00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019e04:	f803 4b01 	strb.w	r4, [r3], #1
 8019e08:	3a01      	subs	r2, #1
 8019e0a:	2c00      	cmp	r4, #0
 8019e0c:	d1f7      	bne.n	8019dfe <strncpy+0x6>
 8019e0e:	441a      	add	r2, r3
 8019e10:	2100      	movs	r1, #0
 8019e12:	4293      	cmp	r3, r2
 8019e14:	d100      	bne.n	8019e18 <strncpy+0x20>
 8019e16:	bd10      	pop	{r4, pc}
 8019e18:	f803 1b01 	strb.w	r1, [r3], #1
 8019e1c:	e7f9      	b.n	8019e12 <strncpy+0x1a>

08019e1e <strstr>:
 8019e1e:	780a      	ldrb	r2, [r1, #0]
 8019e20:	b570      	push	{r4, r5, r6, lr}
 8019e22:	b96a      	cbnz	r2, 8019e40 <strstr+0x22>
 8019e24:	bd70      	pop	{r4, r5, r6, pc}
 8019e26:	429a      	cmp	r2, r3
 8019e28:	d109      	bne.n	8019e3e <strstr+0x20>
 8019e2a:	460c      	mov	r4, r1
 8019e2c:	4605      	mov	r5, r0
 8019e2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d0f6      	beq.n	8019e24 <strstr+0x6>
 8019e36:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8019e3a:	429e      	cmp	r6, r3
 8019e3c:	d0f7      	beq.n	8019e2e <strstr+0x10>
 8019e3e:	3001      	adds	r0, #1
 8019e40:	7803      	ldrb	r3, [r0, #0]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d1ef      	bne.n	8019e26 <strstr+0x8>
 8019e46:	4618      	mov	r0, r3
 8019e48:	e7ec      	b.n	8019e24 <strstr+0x6>
	...

08019e4c <_sbrk_r>:
 8019e4c:	b538      	push	{r3, r4, r5, lr}
 8019e4e:	4d06      	ldr	r5, [pc, #24]	@ (8019e68 <_sbrk_r+0x1c>)
 8019e50:	2300      	movs	r3, #0
 8019e52:	4604      	mov	r4, r0
 8019e54:	4608      	mov	r0, r1
 8019e56:	602b      	str	r3, [r5, #0]
 8019e58:	f7ea fb96 	bl	8004588 <_sbrk>
 8019e5c:	1c43      	adds	r3, r0, #1
 8019e5e:	d102      	bne.n	8019e66 <_sbrk_r+0x1a>
 8019e60:	682b      	ldr	r3, [r5, #0]
 8019e62:	b103      	cbz	r3, 8019e66 <_sbrk_r+0x1a>
 8019e64:	6023      	str	r3, [r4, #0]
 8019e66:	bd38      	pop	{r3, r4, r5, pc}
 8019e68:	2000a014 	.word	0x2000a014

08019e6c <__errno>:
 8019e6c:	4b01      	ldr	r3, [pc, #4]	@ (8019e74 <__errno+0x8>)
 8019e6e:	6818      	ldr	r0, [r3, #0]
 8019e70:	4770      	bx	lr
 8019e72:	bf00      	nop
 8019e74:	20000078 	.word	0x20000078

08019e78 <__libc_init_array>:
 8019e78:	b570      	push	{r4, r5, r6, lr}
 8019e7a:	4d0d      	ldr	r5, [pc, #52]	@ (8019eb0 <__libc_init_array+0x38>)
 8019e7c:	4c0d      	ldr	r4, [pc, #52]	@ (8019eb4 <__libc_init_array+0x3c>)
 8019e7e:	1b64      	subs	r4, r4, r5
 8019e80:	10a4      	asrs	r4, r4, #2
 8019e82:	2600      	movs	r6, #0
 8019e84:	42a6      	cmp	r6, r4
 8019e86:	d109      	bne.n	8019e9c <__libc_init_array+0x24>
 8019e88:	4d0b      	ldr	r5, [pc, #44]	@ (8019eb8 <__libc_init_array+0x40>)
 8019e8a:	4c0c      	ldr	r4, [pc, #48]	@ (8019ebc <__libc_init_array+0x44>)
 8019e8c:	f000 fba6 	bl	801a5dc <_init>
 8019e90:	1b64      	subs	r4, r4, r5
 8019e92:	10a4      	asrs	r4, r4, #2
 8019e94:	2600      	movs	r6, #0
 8019e96:	42a6      	cmp	r6, r4
 8019e98:	d105      	bne.n	8019ea6 <__libc_init_array+0x2e>
 8019e9a:	bd70      	pop	{r4, r5, r6, pc}
 8019e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ea0:	4798      	blx	r3
 8019ea2:	3601      	adds	r6, #1
 8019ea4:	e7ee      	b.n	8019e84 <__libc_init_array+0xc>
 8019ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8019eaa:	4798      	blx	r3
 8019eac:	3601      	adds	r6, #1
 8019eae:	e7f2      	b.n	8019e96 <__libc_init_array+0x1e>
 8019eb0:	0801c450 	.word	0x0801c450
 8019eb4:	0801c450 	.word	0x0801c450
 8019eb8:	0801c450 	.word	0x0801c450
 8019ebc:	0801c454 	.word	0x0801c454

08019ec0 <__retarget_lock_acquire_recursive>:
 8019ec0:	4770      	bx	lr

08019ec2 <__retarget_lock_release_recursive>:
 8019ec2:	4770      	bx	lr

08019ec4 <memcpy>:
 8019ec4:	440a      	add	r2, r1
 8019ec6:	4291      	cmp	r1, r2
 8019ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8019ecc:	d100      	bne.n	8019ed0 <memcpy+0xc>
 8019ece:	4770      	bx	lr
 8019ed0:	b510      	push	{r4, lr}
 8019ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019eda:	4291      	cmp	r1, r2
 8019edc:	d1f9      	bne.n	8019ed2 <memcpy+0xe>
 8019ede:	bd10      	pop	{r4, pc}

08019ee0 <_free_r>:
 8019ee0:	b538      	push	{r3, r4, r5, lr}
 8019ee2:	4605      	mov	r5, r0
 8019ee4:	2900      	cmp	r1, #0
 8019ee6:	d041      	beq.n	8019f6c <_free_r+0x8c>
 8019ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019eec:	1f0c      	subs	r4, r1, #4
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	bfb8      	it	lt
 8019ef2:	18e4      	addlt	r4, r4, r3
 8019ef4:	f7ff fed8 	bl	8019ca8 <__malloc_lock>
 8019ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8019f70 <_free_r+0x90>)
 8019efa:	6813      	ldr	r3, [r2, #0]
 8019efc:	b933      	cbnz	r3, 8019f0c <_free_r+0x2c>
 8019efe:	6063      	str	r3, [r4, #4]
 8019f00:	6014      	str	r4, [r2, #0]
 8019f02:	4628      	mov	r0, r5
 8019f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f08:	f7ff bed4 	b.w	8019cb4 <__malloc_unlock>
 8019f0c:	42a3      	cmp	r3, r4
 8019f0e:	d908      	bls.n	8019f22 <_free_r+0x42>
 8019f10:	6820      	ldr	r0, [r4, #0]
 8019f12:	1821      	adds	r1, r4, r0
 8019f14:	428b      	cmp	r3, r1
 8019f16:	bf01      	itttt	eq
 8019f18:	6819      	ldreq	r1, [r3, #0]
 8019f1a:	685b      	ldreq	r3, [r3, #4]
 8019f1c:	1809      	addeq	r1, r1, r0
 8019f1e:	6021      	streq	r1, [r4, #0]
 8019f20:	e7ed      	b.n	8019efe <_free_r+0x1e>
 8019f22:	461a      	mov	r2, r3
 8019f24:	685b      	ldr	r3, [r3, #4]
 8019f26:	b10b      	cbz	r3, 8019f2c <_free_r+0x4c>
 8019f28:	42a3      	cmp	r3, r4
 8019f2a:	d9fa      	bls.n	8019f22 <_free_r+0x42>
 8019f2c:	6811      	ldr	r1, [r2, #0]
 8019f2e:	1850      	adds	r0, r2, r1
 8019f30:	42a0      	cmp	r0, r4
 8019f32:	d10b      	bne.n	8019f4c <_free_r+0x6c>
 8019f34:	6820      	ldr	r0, [r4, #0]
 8019f36:	4401      	add	r1, r0
 8019f38:	1850      	adds	r0, r2, r1
 8019f3a:	4283      	cmp	r3, r0
 8019f3c:	6011      	str	r1, [r2, #0]
 8019f3e:	d1e0      	bne.n	8019f02 <_free_r+0x22>
 8019f40:	6818      	ldr	r0, [r3, #0]
 8019f42:	685b      	ldr	r3, [r3, #4]
 8019f44:	6053      	str	r3, [r2, #4]
 8019f46:	4408      	add	r0, r1
 8019f48:	6010      	str	r0, [r2, #0]
 8019f4a:	e7da      	b.n	8019f02 <_free_r+0x22>
 8019f4c:	d902      	bls.n	8019f54 <_free_r+0x74>
 8019f4e:	230c      	movs	r3, #12
 8019f50:	602b      	str	r3, [r5, #0]
 8019f52:	e7d6      	b.n	8019f02 <_free_r+0x22>
 8019f54:	6820      	ldr	r0, [r4, #0]
 8019f56:	1821      	adds	r1, r4, r0
 8019f58:	428b      	cmp	r3, r1
 8019f5a:	bf04      	itt	eq
 8019f5c:	6819      	ldreq	r1, [r3, #0]
 8019f5e:	685b      	ldreq	r3, [r3, #4]
 8019f60:	6063      	str	r3, [r4, #4]
 8019f62:	bf04      	itt	eq
 8019f64:	1809      	addeq	r1, r1, r0
 8019f66:	6021      	streq	r1, [r4, #0]
 8019f68:	6054      	str	r4, [r2, #4]
 8019f6a:	e7ca      	b.n	8019f02 <_free_r+0x22>
 8019f6c:	bd38      	pop	{r3, r4, r5, pc}
 8019f6e:	bf00      	nop
 8019f70:	20009ed8 	.word	0x20009ed8

08019f74 <__ssputs_r>:
 8019f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f78:	688e      	ldr	r6, [r1, #8]
 8019f7a:	461f      	mov	r7, r3
 8019f7c:	42be      	cmp	r6, r7
 8019f7e:	680b      	ldr	r3, [r1, #0]
 8019f80:	4682      	mov	sl, r0
 8019f82:	460c      	mov	r4, r1
 8019f84:	4690      	mov	r8, r2
 8019f86:	d82d      	bhi.n	8019fe4 <__ssputs_r+0x70>
 8019f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019f90:	d026      	beq.n	8019fe0 <__ssputs_r+0x6c>
 8019f92:	6965      	ldr	r5, [r4, #20]
 8019f94:	6909      	ldr	r1, [r1, #16]
 8019f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f9a:	eba3 0901 	sub.w	r9, r3, r1
 8019f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019fa2:	1c7b      	adds	r3, r7, #1
 8019fa4:	444b      	add	r3, r9
 8019fa6:	106d      	asrs	r5, r5, #1
 8019fa8:	429d      	cmp	r5, r3
 8019faa:	bf38      	it	cc
 8019fac:	461d      	movcc	r5, r3
 8019fae:	0553      	lsls	r3, r2, #21
 8019fb0:	d527      	bpl.n	801a002 <__ssputs_r+0x8e>
 8019fb2:	4629      	mov	r1, r5
 8019fb4:	f7ff fdf8 	bl	8019ba8 <_malloc_r>
 8019fb8:	4606      	mov	r6, r0
 8019fba:	b360      	cbz	r0, 801a016 <__ssputs_r+0xa2>
 8019fbc:	6921      	ldr	r1, [r4, #16]
 8019fbe:	464a      	mov	r2, r9
 8019fc0:	f7ff ff80 	bl	8019ec4 <memcpy>
 8019fc4:	89a3      	ldrh	r3, [r4, #12]
 8019fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019fce:	81a3      	strh	r3, [r4, #12]
 8019fd0:	6126      	str	r6, [r4, #16]
 8019fd2:	6165      	str	r5, [r4, #20]
 8019fd4:	444e      	add	r6, r9
 8019fd6:	eba5 0509 	sub.w	r5, r5, r9
 8019fda:	6026      	str	r6, [r4, #0]
 8019fdc:	60a5      	str	r5, [r4, #8]
 8019fde:	463e      	mov	r6, r7
 8019fe0:	42be      	cmp	r6, r7
 8019fe2:	d900      	bls.n	8019fe6 <__ssputs_r+0x72>
 8019fe4:	463e      	mov	r6, r7
 8019fe6:	6820      	ldr	r0, [r4, #0]
 8019fe8:	4632      	mov	r2, r6
 8019fea:	4641      	mov	r1, r8
 8019fec:	f000 faa6 	bl	801a53c <memmove>
 8019ff0:	68a3      	ldr	r3, [r4, #8]
 8019ff2:	1b9b      	subs	r3, r3, r6
 8019ff4:	60a3      	str	r3, [r4, #8]
 8019ff6:	6823      	ldr	r3, [r4, #0]
 8019ff8:	4433      	add	r3, r6
 8019ffa:	6023      	str	r3, [r4, #0]
 8019ffc:	2000      	movs	r0, #0
 8019ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a002:	462a      	mov	r2, r5
 801a004:	f000 fab4 	bl	801a570 <_realloc_r>
 801a008:	4606      	mov	r6, r0
 801a00a:	2800      	cmp	r0, #0
 801a00c:	d1e0      	bne.n	8019fd0 <__ssputs_r+0x5c>
 801a00e:	6921      	ldr	r1, [r4, #16]
 801a010:	4650      	mov	r0, sl
 801a012:	f7ff ff65 	bl	8019ee0 <_free_r>
 801a016:	230c      	movs	r3, #12
 801a018:	f8ca 3000 	str.w	r3, [sl]
 801a01c:	89a3      	ldrh	r3, [r4, #12]
 801a01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a022:	81a3      	strh	r3, [r4, #12]
 801a024:	f04f 30ff 	mov.w	r0, #4294967295
 801a028:	e7e9      	b.n	8019ffe <__ssputs_r+0x8a>
	...

0801a02c <_svfiprintf_r>:
 801a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a030:	4698      	mov	r8, r3
 801a032:	898b      	ldrh	r3, [r1, #12]
 801a034:	061b      	lsls	r3, r3, #24
 801a036:	b09d      	sub	sp, #116	@ 0x74
 801a038:	4607      	mov	r7, r0
 801a03a:	460d      	mov	r5, r1
 801a03c:	4614      	mov	r4, r2
 801a03e:	d510      	bpl.n	801a062 <_svfiprintf_r+0x36>
 801a040:	690b      	ldr	r3, [r1, #16]
 801a042:	b973      	cbnz	r3, 801a062 <_svfiprintf_r+0x36>
 801a044:	2140      	movs	r1, #64	@ 0x40
 801a046:	f7ff fdaf 	bl	8019ba8 <_malloc_r>
 801a04a:	6028      	str	r0, [r5, #0]
 801a04c:	6128      	str	r0, [r5, #16]
 801a04e:	b930      	cbnz	r0, 801a05e <_svfiprintf_r+0x32>
 801a050:	230c      	movs	r3, #12
 801a052:	603b      	str	r3, [r7, #0]
 801a054:	f04f 30ff 	mov.w	r0, #4294967295
 801a058:	b01d      	add	sp, #116	@ 0x74
 801a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a05e:	2340      	movs	r3, #64	@ 0x40
 801a060:	616b      	str	r3, [r5, #20]
 801a062:	2300      	movs	r3, #0
 801a064:	9309      	str	r3, [sp, #36]	@ 0x24
 801a066:	2320      	movs	r3, #32
 801a068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a06c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a070:	2330      	movs	r3, #48	@ 0x30
 801a072:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a210 <_svfiprintf_r+0x1e4>
 801a076:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a07a:	f04f 0901 	mov.w	r9, #1
 801a07e:	4623      	mov	r3, r4
 801a080:	469a      	mov	sl, r3
 801a082:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a086:	b10a      	cbz	r2, 801a08c <_svfiprintf_r+0x60>
 801a088:	2a25      	cmp	r2, #37	@ 0x25
 801a08a:	d1f9      	bne.n	801a080 <_svfiprintf_r+0x54>
 801a08c:	ebba 0b04 	subs.w	fp, sl, r4
 801a090:	d00b      	beq.n	801a0aa <_svfiprintf_r+0x7e>
 801a092:	465b      	mov	r3, fp
 801a094:	4622      	mov	r2, r4
 801a096:	4629      	mov	r1, r5
 801a098:	4638      	mov	r0, r7
 801a09a:	f7ff ff6b 	bl	8019f74 <__ssputs_r>
 801a09e:	3001      	adds	r0, #1
 801a0a0:	f000 80a7 	beq.w	801a1f2 <_svfiprintf_r+0x1c6>
 801a0a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a0a6:	445a      	add	r2, fp
 801a0a8:	9209      	str	r2, [sp, #36]	@ 0x24
 801a0aa:	f89a 3000 	ldrb.w	r3, [sl]
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	f000 809f 	beq.w	801a1f2 <_svfiprintf_r+0x1c6>
 801a0b4:	2300      	movs	r3, #0
 801a0b6:	f04f 32ff 	mov.w	r2, #4294967295
 801a0ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0be:	f10a 0a01 	add.w	sl, sl, #1
 801a0c2:	9304      	str	r3, [sp, #16]
 801a0c4:	9307      	str	r3, [sp, #28]
 801a0c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a0ca:	931a      	str	r3, [sp, #104]	@ 0x68
 801a0cc:	4654      	mov	r4, sl
 801a0ce:	2205      	movs	r2, #5
 801a0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a0d4:	484e      	ldr	r0, [pc, #312]	@ (801a210 <_svfiprintf_r+0x1e4>)
 801a0d6:	f7e6 f8b3 	bl	8000240 <memchr>
 801a0da:	9a04      	ldr	r2, [sp, #16]
 801a0dc:	b9d8      	cbnz	r0, 801a116 <_svfiprintf_r+0xea>
 801a0de:	06d0      	lsls	r0, r2, #27
 801a0e0:	bf44      	itt	mi
 801a0e2:	2320      	movmi	r3, #32
 801a0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a0e8:	0711      	lsls	r1, r2, #28
 801a0ea:	bf44      	itt	mi
 801a0ec:	232b      	movmi	r3, #43	@ 0x2b
 801a0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a0f2:	f89a 3000 	ldrb.w	r3, [sl]
 801a0f6:	2b2a      	cmp	r3, #42	@ 0x2a
 801a0f8:	d015      	beq.n	801a126 <_svfiprintf_r+0xfa>
 801a0fa:	9a07      	ldr	r2, [sp, #28]
 801a0fc:	4654      	mov	r4, sl
 801a0fe:	2000      	movs	r0, #0
 801a100:	f04f 0c0a 	mov.w	ip, #10
 801a104:	4621      	mov	r1, r4
 801a106:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a10a:	3b30      	subs	r3, #48	@ 0x30
 801a10c:	2b09      	cmp	r3, #9
 801a10e:	d94b      	bls.n	801a1a8 <_svfiprintf_r+0x17c>
 801a110:	b1b0      	cbz	r0, 801a140 <_svfiprintf_r+0x114>
 801a112:	9207      	str	r2, [sp, #28]
 801a114:	e014      	b.n	801a140 <_svfiprintf_r+0x114>
 801a116:	eba0 0308 	sub.w	r3, r0, r8
 801a11a:	fa09 f303 	lsl.w	r3, r9, r3
 801a11e:	4313      	orrs	r3, r2
 801a120:	9304      	str	r3, [sp, #16]
 801a122:	46a2      	mov	sl, r4
 801a124:	e7d2      	b.n	801a0cc <_svfiprintf_r+0xa0>
 801a126:	9b03      	ldr	r3, [sp, #12]
 801a128:	1d19      	adds	r1, r3, #4
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	9103      	str	r1, [sp, #12]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	bfbb      	ittet	lt
 801a132:	425b      	neglt	r3, r3
 801a134:	f042 0202 	orrlt.w	r2, r2, #2
 801a138:	9307      	strge	r3, [sp, #28]
 801a13a:	9307      	strlt	r3, [sp, #28]
 801a13c:	bfb8      	it	lt
 801a13e:	9204      	strlt	r2, [sp, #16]
 801a140:	7823      	ldrb	r3, [r4, #0]
 801a142:	2b2e      	cmp	r3, #46	@ 0x2e
 801a144:	d10a      	bne.n	801a15c <_svfiprintf_r+0x130>
 801a146:	7863      	ldrb	r3, [r4, #1]
 801a148:	2b2a      	cmp	r3, #42	@ 0x2a
 801a14a:	d132      	bne.n	801a1b2 <_svfiprintf_r+0x186>
 801a14c:	9b03      	ldr	r3, [sp, #12]
 801a14e:	1d1a      	adds	r2, r3, #4
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	9203      	str	r2, [sp, #12]
 801a154:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a158:	3402      	adds	r4, #2
 801a15a:	9305      	str	r3, [sp, #20]
 801a15c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a220 <_svfiprintf_r+0x1f4>
 801a160:	7821      	ldrb	r1, [r4, #0]
 801a162:	2203      	movs	r2, #3
 801a164:	4650      	mov	r0, sl
 801a166:	f7e6 f86b 	bl	8000240 <memchr>
 801a16a:	b138      	cbz	r0, 801a17c <_svfiprintf_r+0x150>
 801a16c:	9b04      	ldr	r3, [sp, #16]
 801a16e:	eba0 000a 	sub.w	r0, r0, sl
 801a172:	2240      	movs	r2, #64	@ 0x40
 801a174:	4082      	lsls	r2, r0
 801a176:	4313      	orrs	r3, r2
 801a178:	3401      	adds	r4, #1
 801a17a:	9304      	str	r3, [sp, #16]
 801a17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a180:	4824      	ldr	r0, [pc, #144]	@ (801a214 <_svfiprintf_r+0x1e8>)
 801a182:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a186:	2206      	movs	r2, #6
 801a188:	f7e6 f85a 	bl	8000240 <memchr>
 801a18c:	2800      	cmp	r0, #0
 801a18e:	d036      	beq.n	801a1fe <_svfiprintf_r+0x1d2>
 801a190:	4b21      	ldr	r3, [pc, #132]	@ (801a218 <_svfiprintf_r+0x1ec>)
 801a192:	bb1b      	cbnz	r3, 801a1dc <_svfiprintf_r+0x1b0>
 801a194:	9b03      	ldr	r3, [sp, #12]
 801a196:	3307      	adds	r3, #7
 801a198:	f023 0307 	bic.w	r3, r3, #7
 801a19c:	3308      	adds	r3, #8
 801a19e:	9303      	str	r3, [sp, #12]
 801a1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1a2:	4433      	add	r3, r6
 801a1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801a1a6:	e76a      	b.n	801a07e <_svfiprintf_r+0x52>
 801a1a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1ac:	460c      	mov	r4, r1
 801a1ae:	2001      	movs	r0, #1
 801a1b0:	e7a8      	b.n	801a104 <_svfiprintf_r+0xd8>
 801a1b2:	2300      	movs	r3, #0
 801a1b4:	3401      	adds	r4, #1
 801a1b6:	9305      	str	r3, [sp, #20]
 801a1b8:	4619      	mov	r1, r3
 801a1ba:	f04f 0c0a 	mov.w	ip, #10
 801a1be:	4620      	mov	r0, r4
 801a1c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1c4:	3a30      	subs	r2, #48	@ 0x30
 801a1c6:	2a09      	cmp	r2, #9
 801a1c8:	d903      	bls.n	801a1d2 <_svfiprintf_r+0x1a6>
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d0c6      	beq.n	801a15c <_svfiprintf_r+0x130>
 801a1ce:	9105      	str	r1, [sp, #20]
 801a1d0:	e7c4      	b.n	801a15c <_svfiprintf_r+0x130>
 801a1d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801a1d6:	4604      	mov	r4, r0
 801a1d8:	2301      	movs	r3, #1
 801a1da:	e7f0      	b.n	801a1be <_svfiprintf_r+0x192>
 801a1dc:	ab03      	add	r3, sp, #12
 801a1de:	9300      	str	r3, [sp, #0]
 801a1e0:	462a      	mov	r2, r5
 801a1e2:	4b0e      	ldr	r3, [pc, #56]	@ (801a21c <_svfiprintf_r+0x1f0>)
 801a1e4:	a904      	add	r1, sp, #16
 801a1e6:	4638      	mov	r0, r7
 801a1e8:	f3af 8000 	nop.w
 801a1ec:	1c42      	adds	r2, r0, #1
 801a1ee:	4606      	mov	r6, r0
 801a1f0:	d1d6      	bne.n	801a1a0 <_svfiprintf_r+0x174>
 801a1f2:	89ab      	ldrh	r3, [r5, #12]
 801a1f4:	065b      	lsls	r3, r3, #25
 801a1f6:	f53f af2d 	bmi.w	801a054 <_svfiprintf_r+0x28>
 801a1fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a1fc:	e72c      	b.n	801a058 <_svfiprintf_r+0x2c>
 801a1fe:	ab03      	add	r3, sp, #12
 801a200:	9300      	str	r3, [sp, #0]
 801a202:	462a      	mov	r2, r5
 801a204:	4b05      	ldr	r3, [pc, #20]	@ (801a21c <_svfiprintf_r+0x1f0>)
 801a206:	a904      	add	r1, sp, #16
 801a208:	4638      	mov	r0, r7
 801a20a:	f000 f879 	bl	801a300 <_printf_i>
 801a20e:	e7ed      	b.n	801a1ec <_svfiprintf_r+0x1c0>
 801a210:	0801c414 	.word	0x0801c414
 801a214:	0801c41e 	.word	0x0801c41e
 801a218:	00000000 	.word	0x00000000
 801a21c:	08019f75 	.word	0x08019f75
 801a220:	0801c41a 	.word	0x0801c41a

0801a224 <_printf_common>:
 801a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a228:	4616      	mov	r6, r2
 801a22a:	4698      	mov	r8, r3
 801a22c:	688a      	ldr	r2, [r1, #8]
 801a22e:	690b      	ldr	r3, [r1, #16]
 801a230:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a234:	4293      	cmp	r3, r2
 801a236:	bfb8      	it	lt
 801a238:	4613      	movlt	r3, r2
 801a23a:	6033      	str	r3, [r6, #0]
 801a23c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a240:	4607      	mov	r7, r0
 801a242:	460c      	mov	r4, r1
 801a244:	b10a      	cbz	r2, 801a24a <_printf_common+0x26>
 801a246:	3301      	adds	r3, #1
 801a248:	6033      	str	r3, [r6, #0]
 801a24a:	6823      	ldr	r3, [r4, #0]
 801a24c:	0699      	lsls	r1, r3, #26
 801a24e:	bf42      	ittt	mi
 801a250:	6833      	ldrmi	r3, [r6, #0]
 801a252:	3302      	addmi	r3, #2
 801a254:	6033      	strmi	r3, [r6, #0]
 801a256:	6825      	ldr	r5, [r4, #0]
 801a258:	f015 0506 	ands.w	r5, r5, #6
 801a25c:	d106      	bne.n	801a26c <_printf_common+0x48>
 801a25e:	f104 0a19 	add.w	sl, r4, #25
 801a262:	68e3      	ldr	r3, [r4, #12]
 801a264:	6832      	ldr	r2, [r6, #0]
 801a266:	1a9b      	subs	r3, r3, r2
 801a268:	42ab      	cmp	r3, r5
 801a26a:	dc26      	bgt.n	801a2ba <_printf_common+0x96>
 801a26c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a270:	6822      	ldr	r2, [r4, #0]
 801a272:	3b00      	subs	r3, #0
 801a274:	bf18      	it	ne
 801a276:	2301      	movne	r3, #1
 801a278:	0692      	lsls	r2, r2, #26
 801a27a:	d42b      	bmi.n	801a2d4 <_printf_common+0xb0>
 801a27c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a280:	4641      	mov	r1, r8
 801a282:	4638      	mov	r0, r7
 801a284:	47c8      	blx	r9
 801a286:	3001      	adds	r0, #1
 801a288:	d01e      	beq.n	801a2c8 <_printf_common+0xa4>
 801a28a:	6823      	ldr	r3, [r4, #0]
 801a28c:	6922      	ldr	r2, [r4, #16]
 801a28e:	f003 0306 	and.w	r3, r3, #6
 801a292:	2b04      	cmp	r3, #4
 801a294:	bf02      	ittt	eq
 801a296:	68e5      	ldreq	r5, [r4, #12]
 801a298:	6833      	ldreq	r3, [r6, #0]
 801a29a:	1aed      	subeq	r5, r5, r3
 801a29c:	68a3      	ldr	r3, [r4, #8]
 801a29e:	bf0c      	ite	eq
 801a2a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a2a4:	2500      	movne	r5, #0
 801a2a6:	4293      	cmp	r3, r2
 801a2a8:	bfc4      	itt	gt
 801a2aa:	1a9b      	subgt	r3, r3, r2
 801a2ac:	18ed      	addgt	r5, r5, r3
 801a2ae:	2600      	movs	r6, #0
 801a2b0:	341a      	adds	r4, #26
 801a2b2:	42b5      	cmp	r5, r6
 801a2b4:	d11a      	bne.n	801a2ec <_printf_common+0xc8>
 801a2b6:	2000      	movs	r0, #0
 801a2b8:	e008      	b.n	801a2cc <_printf_common+0xa8>
 801a2ba:	2301      	movs	r3, #1
 801a2bc:	4652      	mov	r2, sl
 801a2be:	4641      	mov	r1, r8
 801a2c0:	4638      	mov	r0, r7
 801a2c2:	47c8      	blx	r9
 801a2c4:	3001      	adds	r0, #1
 801a2c6:	d103      	bne.n	801a2d0 <_printf_common+0xac>
 801a2c8:	f04f 30ff 	mov.w	r0, #4294967295
 801a2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a2d0:	3501      	adds	r5, #1
 801a2d2:	e7c6      	b.n	801a262 <_printf_common+0x3e>
 801a2d4:	18e1      	adds	r1, r4, r3
 801a2d6:	1c5a      	adds	r2, r3, #1
 801a2d8:	2030      	movs	r0, #48	@ 0x30
 801a2da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a2de:	4422      	add	r2, r4
 801a2e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a2e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a2e8:	3302      	adds	r3, #2
 801a2ea:	e7c7      	b.n	801a27c <_printf_common+0x58>
 801a2ec:	2301      	movs	r3, #1
 801a2ee:	4622      	mov	r2, r4
 801a2f0:	4641      	mov	r1, r8
 801a2f2:	4638      	mov	r0, r7
 801a2f4:	47c8      	blx	r9
 801a2f6:	3001      	adds	r0, #1
 801a2f8:	d0e6      	beq.n	801a2c8 <_printf_common+0xa4>
 801a2fa:	3601      	adds	r6, #1
 801a2fc:	e7d9      	b.n	801a2b2 <_printf_common+0x8e>
	...

0801a300 <_printf_i>:
 801a300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a304:	7e0f      	ldrb	r7, [r1, #24]
 801a306:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a308:	2f78      	cmp	r7, #120	@ 0x78
 801a30a:	4691      	mov	r9, r2
 801a30c:	4680      	mov	r8, r0
 801a30e:	460c      	mov	r4, r1
 801a310:	469a      	mov	sl, r3
 801a312:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a316:	d807      	bhi.n	801a328 <_printf_i+0x28>
 801a318:	2f62      	cmp	r7, #98	@ 0x62
 801a31a:	d80a      	bhi.n	801a332 <_printf_i+0x32>
 801a31c:	2f00      	cmp	r7, #0
 801a31e:	f000 80d1 	beq.w	801a4c4 <_printf_i+0x1c4>
 801a322:	2f58      	cmp	r7, #88	@ 0x58
 801a324:	f000 80b8 	beq.w	801a498 <_printf_i+0x198>
 801a328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a32c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a330:	e03a      	b.n	801a3a8 <_printf_i+0xa8>
 801a332:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a336:	2b15      	cmp	r3, #21
 801a338:	d8f6      	bhi.n	801a328 <_printf_i+0x28>
 801a33a:	a101      	add	r1, pc, #4	@ (adr r1, 801a340 <_printf_i+0x40>)
 801a33c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a340:	0801a399 	.word	0x0801a399
 801a344:	0801a3ad 	.word	0x0801a3ad
 801a348:	0801a329 	.word	0x0801a329
 801a34c:	0801a329 	.word	0x0801a329
 801a350:	0801a329 	.word	0x0801a329
 801a354:	0801a329 	.word	0x0801a329
 801a358:	0801a3ad 	.word	0x0801a3ad
 801a35c:	0801a329 	.word	0x0801a329
 801a360:	0801a329 	.word	0x0801a329
 801a364:	0801a329 	.word	0x0801a329
 801a368:	0801a329 	.word	0x0801a329
 801a36c:	0801a4ab 	.word	0x0801a4ab
 801a370:	0801a3d7 	.word	0x0801a3d7
 801a374:	0801a465 	.word	0x0801a465
 801a378:	0801a329 	.word	0x0801a329
 801a37c:	0801a329 	.word	0x0801a329
 801a380:	0801a4cd 	.word	0x0801a4cd
 801a384:	0801a329 	.word	0x0801a329
 801a388:	0801a3d7 	.word	0x0801a3d7
 801a38c:	0801a329 	.word	0x0801a329
 801a390:	0801a329 	.word	0x0801a329
 801a394:	0801a46d 	.word	0x0801a46d
 801a398:	6833      	ldr	r3, [r6, #0]
 801a39a:	1d1a      	adds	r2, r3, #4
 801a39c:	681b      	ldr	r3, [r3, #0]
 801a39e:	6032      	str	r2, [r6, #0]
 801a3a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a3a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a3a8:	2301      	movs	r3, #1
 801a3aa:	e09c      	b.n	801a4e6 <_printf_i+0x1e6>
 801a3ac:	6833      	ldr	r3, [r6, #0]
 801a3ae:	6820      	ldr	r0, [r4, #0]
 801a3b0:	1d19      	adds	r1, r3, #4
 801a3b2:	6031      	str	r1, [r6, #0]
 801a3b4:	0606      	lsls	r6, r0, #24
 801a3b6:	d501      	bpl.n	801a3bc <_printf_i+0xbc>
 801a3b8:	681d      	ldr	r5, [r3, #0]
 801a3ba:	e003      	b.n	801a3c4 <_printf_i+0xc4>
 801a3bc:	0645      	lsls	r5, r0, #25
 801a3be:	d5fb      	bpl.n	801a3b8 <_printf_i+0xb8>
 801a3c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a3c4:	2d00      	cmp	r5, #0
 801a3c6:	da03      	bge.n	801a3d0 <_printf_i+0xd0>
 801a3c8:	232d      	movs	r3, #45	@ 0x2d
 801a3ca:	426d      	negs	r5, r5
 801a3cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a3d0:	4858      	ldr	r0, [pc, #352]	@ (801a534 <_printf_i+0x234>)
 801a3d2:	230a      	movs	r3, #10
 801a3d4:	e011      	b.n	801a3fa <_printf_i+0xfa>
 801a3d6:	6821      	ldr	r1, [r4, #0]
 801a3d8:	6833      	ldr	r3, [r6, #0]
 801a3da:	0608      	lsls	r0, r1, #24
 801a3dc:	f853 5b04 	ldr.w	r5, [r3], #4
 801a3e0:	d402      	bmi.n	801a3e8 <_printf_i+0xe8>
 801a3e2:	0649      	lsls	r1, r1, #25
 801a3e4:	bf48      	it	mi
 801a3e6:	b2ad      	uxthmi	r5, r5
 801a3e8:	2f6f      	cmp	r7, #111	@ 0x6f
 801a3ea:	4852      	ldr	r0, [pc, #328]	@ (801a534 <_printf_i+0x234>)
 801a3ec:	6033      	str	r3, [r6, #0]
 801a3ee:	bf14      	ite	ne
 801a3f0:	230a      	movne	r3, #10
 801a3f2:	2308      	moveq	r3, #8
 801a3f4:	2100      	movs	r1, #0
 801a3f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a3fa:	6866      	ldr	r6, [r4, #4]
 801a3fc:	60a6      	str	r6, [r4, #8]
 801a3fe:	2e00      	cmp	r6, #0
 801a400:	db05      	blt.n	801a40e <_printf_i+0x10e>
 801a402:	6821      	ldr	r1, [r4, #0]
 801a404:	432e      	orrs	r6, r5
 801a406:	f021 0104 	bic.w	r1, r1, #4
 801a40a:	6021      	str	r1, [r4, #0]
 801a40c:	d04b      	beq.n	801a4a6 <_printf_i+0x1a6>
 801a40e:	4616      	mov	r6, r2
 801a410:	fbb5 f1f3 	udiv	r1, r5, r3
 801a414:	fb03 5711 	mls	r7, r3, r1, r5
 801a418:	5dc7      	ldrb	r7, [r0, r7]
 801a41a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a41e:	462f      	mov	r7, r5
 801a420:	42bb      	cmp	r3, r7
 801a422:	460d      	mov	r5, r1
 801a424:	d9f4      	bls.n	801a410 <_printf_i+0x110>
 801a426:	2b08      	cmp	r3, #8
 801a428:	d10b      	bne.n	801a442 <_printf_i+0x142>
 801a42a:	6823      	ldr	r3, [r4, #0]
 801a42c:	07df      	lsls	r7, r3, #31
 801a42e:	d508      	bpl.n	801a442 <_printf_i+0x142>
 801a430:	6923      	ldr	r3, [r4, #16]
 801a432:	6861      	ldr	r1, [r4, #4]
 801a434:	4299      	cmp	r1, r3
 801a436:	bfde      	ittt	le
 801a438:	2330      	movle	r3, #48	@ 0x30
 801a43a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a43e:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a442:	1b92      	subs	r2, r2, r6
 801a444:	6122      	str	r2, [r4, #16]
 801a446:	f8cd a000 	str.w	sl, [sp]
 801a44a:	464b      	mov	r3, r9
 801a44c:	aa03      	add	r2, sp, #12
 801a44e:	4621      	mov	r1, r4
 801a450:	4640      	mov	r0, r8
 801a452:	f7ff fee7 	bl	801a224 <_printf_common>
 801a456:	3001      	adds	r0, #1
 801a458:	d14a      	bne.n	801a4f0 <_printf_i+0x1f0>
 801a45a:	f04f 30ff 	mov.w	r0, #4294967295
 801a45e:	b004      	add	sp, #16
 801a460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a464:	6823      	ldr	r3, [r4, #0]
 801a466:	f043 0320 	orr.w	r3, r3, #32
 801a46a:	6023      	str	r3, [r4, #0]
 801a46c:	4832      	ldr	r0, [pc, #200]	@ (801a538 <_printf_i+0x238>)
 801a46e:	2778      	movs	r7, #120	@ 0x78
 801a470:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a474:	6823      	ldr	r3, [r4, #0]
 801a476:	6831      	ldr	r1, [r6, #0]
 801a478:	061f      	lsls	r7, r3, #24
 801a47a:	f851 5b04 	ldr.w	r5, [r1], #4
 801a47e:	d402      	bmi.n	801a486 <_printf_i+0x186>
 801a480:	065f      	lsls	r7, r3, #25
 801a482:	bf48      	it	mi
 801a484:	b2ad      	uxthmi	r5, r5
 801a486:	6031      	str	r1, [r6, #0]
 801a488:	07d9      	lsls	r1, r3, #31
 801a48a:	bf44      	itt	mi
 801a48c:	f043 0320 	orrmi.w	r3, r3, #32
 801a490:	6023      	strmi	r3, [r4, #0]
 801a492:	b11d      	cbz	r5, 801a49c <_printf_i+0x19c>
 801a494:	2310      	movs	r3, #16
 801a496:	e7ad      	b.n	801a3f4 <_printf_i+0xf4>
 801a498:	4826      	ldr	r0, [pc, #152]	@ (801a534 <_printf_i+0x234>)
 801a49a:	e7e9      	b.n	801a470 <_printf_i+0x170>
 801a49c:	6823      	ldr	r3, [r4, #0]
 801a49e:	f023 0320 	bic.w	r3, r3, #32
 801a4a2:	6023      	str	r3, [r4, #0]
 801a4a4:	e7f6      	b.n	801a494 <_printf_i+0x194>
 801a4a6:	4616      	mov	r6, r2
 801a4a8:	e7bd      	b.n	801a426 <_printf_i+0x126>
 801a4aa:	6833      	ldr	r3, [r6, #0]
 801a4ac:	6825      	ldr	r5, [r4, #0]
 801a4ae:	6961      	ldr	r1, [r4, #20]
 801a4b0:	1d18      	adds	r0, r3, #4
 801a4b2:	6030      	str	r0, [r6, #0]
 801a4b4:	062e      	lsls	r6, r5, #24
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	d501      	bpl.n	801a4be <_printf_i+0x1be>
 801a4ba:	6019      	str	r1, [r3, #0]
 801a4bc:	e002      	b.n	801a4c4 <_printf_i+0x1c4>
 801a4be:	0668      	lsls	r0, r5, #25
 801a4c0:	d5fb      	bpl.n	801a4ba <_printf_i+0x1ba>
 801a4c2:	8019      	strh	r1, [r3, #0]
 801a4c4:	2300      	movs	r3, #0
 801a4c6:	6123      	str	r3, [r4, #16]
 801a4c8:	4616      	mov	r6, r2
 801a4ca:	e7bc      	b.n	801a446 <_printf_i+0x146>
 801a4cc:	6833      	ldr	r3, [r6, #0]
 801a4ce:	1d1a      	adds	r2, r3, #4
 801a4d0:	6032      	str	r2, [r6, #0]
 801a4d2:	681e      	ldr	r6, [r3, #0]
 801a4d4:	6862      	ldr	r2, [r4, #4]
 801a4d6:	2100      	movs	r1, #0
 801a4d8:	4630      	mov	r0, r6
 801a4da:	f7e5 feb1 	bl	8000240 <memchr>
 801a4de:	b108      	cbz	r0, 801a4e4 <_printf_i+0x1e4>
 801a4e0:	1b80      	subs	r0, r0, r6
 801a4e2:	6060      	str	r0, [r4, #4]
 801a4e4:	6863      	ldr	r3, [r4, #4]
 801a4e6:	6123      	str	r3, [r4, #16]
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a4ee:	e7aa      	b.n	801a446 <_printf_i+0x146>
 801a4f0:	6923      	ldr	r3, [r4, #16]
 801a4f2:	4632      	mov	r2, r6
 801a4f4:	4649      	mov	r1, r9
 801a4f6:	4640      	mov	r0, r8
 801a4f8:	47d0      	blx	sl
 801a4fa:	3001      	adds	r0, #1
 801a4fc:	d0ad      	beq.n	801a45a <_printf_i+0x15a>
 801a4fe:	6823      	ldr	r3, [r4, #0]
 801a500:	079b      	lsls	r3, r3, #30
 801a502:	d413      	bmi.n	801a52c <_printf_i+0x22c>
 801a504:	68e0      	ldr	r0, [r4, #12]
 801a506:	9b03      	ldr	r3, [sp, #12]
 801a508:	4298      	cmp	r0, r3
 801a50a:	bfb8      	it	lt
 801a50c:	4618      	movlt	r0, r3
 801a50e:	e7a6      	b.n	801a45e <_printf_i+0x15e>
 801a510:	2301      	movs	r3, #1
 801a512:	4632      	mov	r2, r6
 801a514:	4649      	mov	r1, r9
 801a516:	4640      	mov	r0, r8
 801a518:	47d0      	blx	sl
 801a51a:	3001      	adds	r0, #1
 801a51c:	d09d      	beq.n	801a45a <_printf_i+0x15a>
 801a51e:	3501      	adds	r5, #1
 801a520:	68e3      	ldr	r3, [r4, #12]
 801a522:	9903      	ldr	r1, [sp, #12]
 801a524:	1a5b      	subs	r3, r3, r1
 801a526:	42ab      	cmp	r3, r5
 801a528:	dcf2      	bgt.n	801a510 <_printf_i+0x210>
 801a52a:	e7eb      	b.n	801a504 <_printf_i+0x204>
 801a52c:	2500      	movs	r5, #0
 801a52e:	f104 0619 	add.w	r6, r4, #25
 801a532:	e7f5      	b.n	801a520 <_printf_i+0x220>
 801a534:	0801c425 	.word	0x0801c425
 801a538:	0801c436 	.word	0x0801c436

0801a53c <memmove>:
 801a53c:	4288      	cmp	r0, r1
 801a53e:	b510      	push	{r4, lr}
 801a540:	eb01 0402 	add.w	r4, r1, r2
 801a544:	d902      	bls.n	801a54c <memmove+0x10>
 801a546:	4284      	cmp	r4, r0
 801a548:	4623      	mov	r3, r4
 801a54a:	d807      	bhi.n	801a55c <memmove+0x20>
 801a54c:	1e43      	subs	r3, r0, #1
 801a54e:	42a1      	cmp	r1, r4
 801a550:	d008      	beq.n	801a564 <memmove+0x28>
 801a552:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a556:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a55a:	e7f8      	b.n	801a54e <memmove+0x12>
 801a55c:	4402      	add	r2, r0
 801a55e:	4601      	mov	r1, r0
 801a560:	428a      	cmp	r2, r1
 801a562:	d100      	bne.n	801a566 <memmove+0x2a>
 801a564:	bd10      	pop	{r4, pc}
 801a566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a56a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a56e:	e7f7      	b.n	801a560 <memmove+0x24>

0801a570 <_realloc_r>:
 801a570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a574:	4607      	mov	r7, r0
 801a576:	4614      	mov	r4, r2
 801a578:	460d      	mov	r5, r1
 801a57a:	b921      	cbnz	r1, 801a586 <_realloc_r+0x16>
 801a57c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a580:	4611      	mov	r1, r2
 801a582:	f7ff bb11 	b.w	8019ba8 <_malloc_r>
 801a586:	b92a      	cbnz	r2, 801a594 <_realloc_r+0x24>
 801a588:	f7ff fcaa 	bl	8019ee0 <_free_r>
 801a58c:	4625      	mov	r5, r4
 801a58e:	4628      	mov	r0, r5
 801a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a594:	f000 f81a 	bl	801a5cc <_malloc_usable_size_r>
 801a598:	4284      	cmp	r4, r0
 801a59a:	4606      	mov	r6, r0
 801a59c:	d802      	bhi.n	801a5a4 <_realloc_r+0x34>
 801a59e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a5a2:	d8f4      	bhi.n	801a58e <_realloc_r+0x1e>
 801a5a4:	4621      	mov	r1, r4
 801a5a6:	4638      	mov	r0, r7
 801a5a8:	f7ff fafe 	bl	8019ba8 <_malloc_r>
 801a5ac:	4680      	mov	r8, r0
 801a5ae:	b908      	cbnz	r0, 801a5b4 <_realloc_r+0x44>
 801a5b0:	4645      	mov	r5, r8
 801a5b2:	e7ec      	b.n	801a58e <_realloc_r+0x1e>
 801a5b4:	42b4      	cmp	r4, r6
 801a5b6:	4622      	mov	r2, r4
 801a5b8:	4629      	mov	r1, r5
 801a5ba:	bf28      	it	cs
 801a5bc:	4632      	movcs	r2, r6
 801a5be:	f7ff fc81 	bl	8019ec4 <memcpy>
 801a5c2:	4629      	mov	r1, r5
 801a5c4:	4638      	mov	r0, r7
 801a5c6:	f7ff fc8b 	bl	8019ee0 <_free_r>
 801a5ca:	e7f1      	b.n	801a5b0 <_realloc_r+0x40>

0801a5cc <_malloc_usable_size_r>:
 801a5cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a5d0:	1f18      	subs	r0, r3, #4
 801a5d2:	2b00      	cmp	r3, #0
 801a5d4:	bfbc      	itt	lt
 801a5d6:	580b      	ldrlt	r3, [r1, r0]
 801a5d8:	18c0      	addlt	r0, r0, r3
 801a5da:	4770      	bx	lr

0801a5dc <_init>:
 801a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5de:	bf00      	nop
 801a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5e2:	bc08      	pop	{r3}
 801a5e4:	469e      	mov	lr, r3
 801a5e6:	4770      	bx	lr

0801a5e8 <_fini>:
 801a5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5ea:	bf00      	nop
 801a5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5ee:	bc08      	pop	{r3}
 801a5f0:	469e      	mov	lr, r3
 801a5f2:	4770      	bx	lr
