
lora_tester_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000192d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003778  080194a0  080194a0  0001a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc18  0801cc18  0001e218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801cc18  0801cc18  0001dc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cc20  0801cc20  0001e218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cc20  0801cc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801cc24  0801cc24  0001dc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  0801cc28  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d8  0801cd00  0001e0d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000178  0801cda0  0001e178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000120b0  20000220  0801ce40  0001e220  2**5
                  ALLOC
 12 ._user_heap_stack 00000600  200122d0  0801ce40  0001e2d0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001e218  2**0
                  CONTENTS, READONLY
 14 .debug_info   00042c97  00000000  00000000  0001e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000091c8  00000000  00000000  00060edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003838  00000000  00000000  0006a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002be5  00000000  00000000  0006d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037f9d  00000000  00000000  000704c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004bf7c  00000000  00000000  000a8462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012e5c6  00000000  00000000  000f43de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002229a4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000fb48  00000000  00000000  002229e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000082  00000000  00000000  00232530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019488 	.word	0x08019488

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	08019488 	.word	0x08019488

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <CommandSender_Send>:
#include <stddef.h>
#include <string.h>
#include <stdio.h>

void CommandSender_Send(const char* command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b096      	sub	sp, #88	@ 0x58
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
    if (command != NULL) {
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d051      	beq.n	80006be <CommandSender_Send+0xb2>
        int len = strlen(command);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fe02 	bl	8000224 <strlen>
 8000620:	4603      	mov	r3, r0
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
        
        // 전송할 명령어를 명확히 로깅 (특수 문자도 표시)
        LOG_INFO("📤 TX: '%s' (%d bytes)", command, len);
 8000624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4929      	ldr	r1, [pc, #164]	@ (80006d0 <CommandSender_Send+0xc4>)
 800062a:	2001      	movs	r0, #1
 800062c:	f005 f8a8 	bl	8005780 <LOGGER_SendFormatted>
        
        // 헥스 덤프도 표시 (처음 20바이트까지)
        if (len > 0) {
 8000630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000632:	2b00      	cmp	r3, #0
 8000634:	dd2c      	ble.n	8000690 <CommandSender_Send+0x84>
            char hex_dump[64] = {0};
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f017 fb50 	bl	8017ce4 <memset>
            int dump_len = (len > 20) ? 20 : len;
 8000644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000646:	2b14      	cmp	r3, #20
 8000648:	bfa8      	it	ge
 800064a:	2314      	movge	r3, #20
 800064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (int i = 0; i < dump_len; i++) {
 800064e:	2300      	movs	r3, #0
 8000650:	657b      	str	r3, [r7, #84]	@ 0x54
 8000652:	e012      	b.n	800067a <CommandSender_Send+0x6e>
                snprintf(hex_dump + i*3, 4, "%02X ", (unsigned char)command[i]);
 8000654:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000656:	4613      	mov	r3, r2
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	4413      	add	r3, r2
 800065c:	461a      	mov	r2, r3
 800065e:	f107 0308 	add.w	r3, r7, #8
 8000662:	1898      	adds	r0, r3, r2
 8000664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	4a19      	ldr	r2, [pc, #100]	@ (80006d4 <CommandSender_Send+0xc8>)
 800066e:	2104      	movs	r1, #4
 8000670:	f017 fa32 	bl	8017ad8 <sniprintf>
            for (int i = 0; i < dump_len; i++) {
 8000674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000676:	3301      	adds	r3, #1
 8000678:	657b      	str	r3, [r7, #84]	@ 0x54
 800067a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800067c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe8      	blt.n	8000654 <CommandSender_Send+0x48>
            }
            LOG_DEBUG("[CommandSender] Hex: %s", hex_dump);
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	461a      	mov	r2, r3
 8000688:	4913      	ldr	r1, [pc, #76]	@ (80006d8 <CommandSender_Send+0xcc>)
 800068a:	2000      	movs	r0, #0
 800068c:	f005 f878 	bl	8005780 <LOGGER_SendFormatted>
        }
        
        UartStatus status = UART_Send(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f005 fa6d 	bl	8005b70 <UART_Send>
 8000696:	4603      	mov	r3, r0
 8000698:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        
        if (status == UART_STATUS_OK) {
 800069c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d104      	bne.n	80006ae <CommandSender_Send+0xa2>
            LOG_DEBUG("[CommandSender] ✓ Command sent successfully");
 80006a4:	490d      	ldr	r1, [pc, #52]	@ (80006dc <CommandSender_Send+0xd0>)
 80006a6:	2000      	movs	r0, #0
 80006a8:	f005 f86a 	bl	8005780 <LOGGER_SendFormatted>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
        }
    } else {
        LOG_WARN("[CommandSender] Attempted to send NULL command");
    }
}
 80006ac:	e00b      	b.n	80006c6 <CommandSender_Send+0xba>
            LOG_ERROR("[CommandSender] ✗ Failed to send command (status: %d)", status);
 80006ae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80006b2:	461a      	mov	r2, r3
 80006b4:	490a      	ldr	r1, [pc, #40]	@ (80006e0 <CommandSender_Send+0xd4>)
 80006b6:	2003      	movs	r0, #3
 80006b8:	f005 f862 	bl	8005780 <LOGGER_SendFormatted>
}
 80006bc:	e003      	b.n	80006c6 <CommandSender_Send+0xba>
        LOG_WARN("[CommandSender] Attempted to send NULL command");
 80006be:	4909      	ldr	r1, [pc, #36]	@ (80006e4 <CommandSender_Send+0xd8>)
 80006c0:	2002      	movs	r0, #2
 80006c2:	f005 f85d 	bl	8005780 <LOGGER_SendFormatted>
}
 80006c6:	bf00      	nop
 80006c8:	3758      	adds	r7, #88	@ 0x58
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	080194a0 	.word	0x080194a0
 80006d4:	080194bc 	.word	0x080194bc
 80006d8:	080194c4 	.word	0x080194c4
 80006dc:	080194dc 	.word	0x080194dc
 80006e0:	0801950c 	.word	0x0801950c
 80006e4:	08019544 	.word	0x08019544

080006e8 <get_state_name>:

// 순차 메시지 번호 (JOIN마다 리셋됨)
static int g_message_number = 1;

// 상태 이름을 문자열로 변환하는 헬퍼 함수
static const char* get_state_name(LoraState state) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    switch(state) {
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b0f      	cmp	r3, #15
 80006f6:	d843      	bhi.n	8000780 <get_state_name+0x98>
 80006f8:	a201      	add	r2, pc, #4	@ (adr r2, 8000700 <get_state_name+0x18>)
 80006fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006fe:	bf00      	nop
 8000700:	08000741 	.word	0x08000741
 8000704:	08000745 	.word	0x08000745
 8000708:	08000749 	.word	0x08000749
 800070c:	0800074d 	.word	0x0800074d
 8000710:	08000751 	.word	0x08000751
 8000714:	08000755 	.word	0x08000755
 8000718:	08000759 	.word	0x08000759
 800071c:	0800075d 	.word	0x0800075d
 8000720:	08000761 	.word	0x08000761
 8000724:	08000765 	.word	0x08000765
 8000728:	08000769 	.word	0x08000769
 800072c:	0800076d 	.word	0x0800076d
 8000730:	08000771 	.word	0x08000771
 8000734:	08000775 	.word	0x08000775
 8000738:	08000779 	.word	0x08000779
 800073c:	0800077d 	.word	0x0800077d
        case LORA_STATE_INIT: return "INIT";
 8000740:	4b13      	ldr	r3, [pc, #76]	@ (8000790 <get_state_name+0xa8>)
 8000742:	e01e      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_SEND_CMD: return "SEND_CMD";
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <get_state_name+0xac>)
 8000746:	e01c      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_WAIT_OK: return "WAIT_OK";
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <get_state_name+0xb0>)
 800074a:	e01a      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_SEND_JOIN: return "SEND_JOIN";
 800074c:	4b13      	ldr	r3, [pc, #76]	@ (800079c <get_state_name+0xb4>)
 800074e:	e018      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_WAIT_JOIN_OK: return "WAIT_JOIN_OK";
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <get_state_name+0xb8>)
 8000752:	e016      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_SEND_TIMEREQ: return "SEND_TIMEREQ";
 8000754:	4b13      	ldr	r3, [pc, #76]	@ (80007a4 <get_state_name+0xbc>)
 8000756:	e014      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_WAIT_TIMEREQ_OK: return "WAIT_TIMEREQ_OK";
 8000758:	4b13      	ldr	r3, [pc, #76]	@ (80007a8 <get_state_name+0xc0>)
 800075a:	e012      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_WAIT_TIME_SYNC: return "WAIT_TIME_SYNC";
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <get_state_name+0xc4>)
 800075e:	e010      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_SEND_LTIME: return "SEND_LTIME";
 8000760:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <get_state_name+0xc8>)
 8000762:	e00e      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_WAIT_LTIME_RESPONSE: return "WAIT_LTIME_RESPONSE";
 8000764:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <get_state_name+0xcc>)
 8000766:	e00c      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_SEND_PERIODIC: return "SEND_PERIODIC";
 8000768:	4b13      	ldr	r3, [pc, #76]	@ (80007b8 <get_state_name+0xd0>)
 800076a:	e00a      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_WAIT_SEND_RESPONSE: return "WAIT_SEND_RESPONSE";
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <get_state_name+0xd4>)
 800076e:	e008      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_WAIT_SEND_INTERVAL: return "WAIT_SEND_INTERVAL";
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <get_state_name+0xd8>)
 8000772:	e006      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_JOIN_RETRY: return "JOIN_RETRY";
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <get_state_name+0xdc>)
 8000776:	e004      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_DONE: return "DONE";
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <get_state_name+0xe0>)
 800077a:	e002      	b.n	8000782 <get_state_name+0x9a>
        case LORA_STATE_ERROR: return "ERROR";
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <get_state_name+0xe4>)
 800077e:	e000      	b.n	8000782 <get_state_name+0x9a>
        default: return "UNKNOWN";
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <get_state_name+0xe8>)
    }
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	080195b0 	.word	0x080195b0
 8000794:	080195b8 	.word	0x080195b8
 8000798:	080195c4 	.word	0x080195c4
 800079c:	080195cc 	.word	0x080195cc
 80007a0:	080195d8 	.word	0x080195d8
 80007a4:	080195e8 	.word	0x080195e8
 80007a8:	080195f8 	.word	0x080195f8
 80007ac:	08019608 	.word	0x08019608
 80007b0:	08019618 	.word	0x08019618
 80007b4:	08019624 	.word	0x08019624
 80007b8:	08019638 	.word	0x08019638
 80007bc:	08019648 	.word	0x08019648
 80007c0:	0801965c 	.word	0x0801965c
 80007c4:	08019670 	.word	0x08019670
 80007c8:	0801967c 	.word	0x0801967c
 80007cc:	08019684 	.word	0x08019684
 80007d0:	0801968c 	.word	0x0801968c

080007d4 <LoraStarter_InitWithDefaults>:
    UART_Connect(port);
    LOG_INFO("[LoRa] UART connected to %s", port);
}

void LoraStarter_InitWithDefaults(LoraStarterContext* ctx, const char* send_message)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
    if (ctx == NULL) return;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d032      	beq.n	800084a <LoraStarter_InitWithDefaults+0x76>
    
    ctx->state = LORA_STATE_INIT;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	701a      	strb	r2, [r3, #0]
    ctx->cmd_index = 0;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2200      	movs	r2, #0
 80007ee:	605a      	str	r2, [r3, #4]
    ctx->commands = LORA_DEFAULT_INIT_COMMANDS;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <LoraStarter_InitWithDefaults+0x80>)
 80007f4:	609a      	str	r2, [r3, #8]
    ctx->num_commands = LORA_DEFAULT_INIT_COMMANDS_COUNT;
 80007f6:	2205      	movs	r2, #5
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	60da      	str	r2, [r3, #12]
    ctx->send_message = (send_message != NULL) ? send_message : "TEST";
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <LoraStarter_InitWithDefaults+0x32>
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	e000      	b.n	8000808 <LoraStarter_InitWithDefaults+0x34>
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <LoraStarter_InitWithDefaults+0x84>)
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	61d3      	str	r3, [r2, #28]
    ctx->max_retry_count = LORA_MAX_RETRY_COUNT;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	@ 0x24
    ctx->send_interval_ms = LORA_SEND_INTERVAL_MS;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a11      	ldr	r2, [pc, #68]	@ (800085c <LoraStarter_InitWithDefaults+0x88>)
 8000816:	615a      	str	r2, [r3, #20]
    ctx->last_send_time = 0;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
    ctx->send_count = 0;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
    ctx->error_count = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
    ctx->last_retry_time = 0;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
    ctx->retry_delay_ms = LORA_RETRY_DELAY_MS;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    LOG_INFO("[LoRa] Initialized with defaults - Commands: %d, Message: %s", 
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	68da      	ldr	r2, [r3, #12]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	4907      	ldr	r1, [pc, #28]	@ (8000860 <LoraStarter_InitWithDefaults+0x8c>)
 8000842:	2001      	movs	r0, #1
 8000844:	f004 ff9c 	bl	8005780 <LOGGER_SendFormatted>
 8000848:	e000      	b.n	800084c <LoraStarter_InitWithDefaults+0x78>
    if (ctx == NULL) return;
 800084a:	bf00      	nop
             ctx->num_commands, ctx->send_message);
}
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000000 	.word	0x20000000
 8000858:	080196b0 	.word	0x080196b0
 800085c:	000493e0 	.word	0x000493e0
 8000860:	080196b8 	.word	0x080196b8

08000864 <LoraStarter_Process>:

void LoraStarter_Process(LoraStarterContext* ctx, const char* uart_rx)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b0c3      	sub	sp, #268	@ 0x10c
 8000868:	af02      	add	r7, sp, #8
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000870:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000874:	6019      	str	r1, [r3, #0]
    if (ctx == NULL) return;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	f000 83a8 	beq.w	8000fce <LoraStarter_Process+0x76a>

    LoraState old_state = ctx->state;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb

    switch(ctx->state) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b0d      	cmp	r3, #13
 800088c:	f200 837c 	bhi.w	8000f88 <LoraStarter_Process+0x724>
 8000890:	a201      	add	r2, pc, #4	@ (adr r2, 8000898 <LoraStarter_Process+0x34>)
 8000892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000896:	bf00      	nop
 8000898:	080008d1 	.word	0x080008d1
 800089c:	0800091f 	.word	0x0800091f
 80008a0:	08000975 	.word	0x08000975
 80008a4:	08000a57 	.word	0x08000a57
 80008a8:	08000a6d 	.word	0x08000a6d
 80008ac:	08000ac3 	.word	0x08000ac3
 80008b0:	08000ad9 	.word	0x08000ad9
 80008b4:	08000b19 	.word	0x08000b19
 80008b8:	08000b6d 	.word	0x08000b6d
 80008bc:	08000bd5 	.word	0x08000bd5
 80008c0:	08000c6b 	.word	0x08000c6b
 80008c4:	08000d47 	.word	0x08000d47
 80008c8:	08000e4f 	.word	0x08000e4f
 80008cc:	08000f15 	.word	0x08000f15
        case LORA_STATE_INIT:
            ctx->cmd_index = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
            ctx->error_count = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
            ctx->state = LORA_STATE_SEND_CMD;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
            // 기본값 설정
            if (ctx->max_retry_count == 0) ctx->max_retry_count = 0; // 0이면 무제한
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d102      	bne.n	80008f0 <LoraStarter_Process+0x8c>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	@ 0x24
            if (ctx->send_message == NULL) ctx->send_message = "Hello";
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	69db      	ldr	r3, [r3, #28]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d102      	bne.n	80008fe <LoraStarter_Process+0x9a>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4aa2      	ldr	r2, [pc, #648]	@ (8000b84 <LoraStarter_Process+0x320>)
 80008fc:	61da      	str	r2, [r3, #28]
            ctx->last_retry_time = 0;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	@ 0x28
            ctx->retry_delay_ms = 1000; // 초기 재시도 지연: 1초
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
            LOG_INFO("[LoRa] Initialized with message: %s, max_retries: %d", 
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69da      	ldr	r2, [r3, #28]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000914:	499c      	ldr	r1, [pc, #624]	@ (8000b88 <LoraStarter_Process+0x324>)
 8000916:	2001      	movs	r0, #1
 8000918:	f004 ff32 	bl	8005780 <LOGGER_SendFormatted>
                    ctx->send_message, ctx->max_retry_count);
            break;
 800091c:	e33f      	b.n	8000f9e <LoraStarter_Process+0x73a>
        case LORA_STATE_SEND_CMD:
            if (ctx->cmd_index < ctx->num_commands) {
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685a      	ldr	r2, [r3, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	429a      	cmp	r2, r3
 8000928:	da20      	bge.n	800096c <LoraStarter_Process+0x108>
                LOG_DEBUG("[LoRa] Sending command %d/%d: %s", 
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	1c59      	adds	r1, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	68d8      	ldr	r0, [r3, #12]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689a      	ldr	r2, [r3, #8]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	4413      	add	r3, r2
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	4603      	mov	r3, r0
 8000946:	460a      	mov	r2, r1
 8000948:	4990      	ldr	r1, [pc, #576]	@ (8000b8c <LoraStarter_Process+0x328>)
 800094a:	2000      	movs	r0, #0
 800094c:	f004 ff18 	bl	8005780 <LOGGER_SendFormatted>
                         ctx->cmd_index + 1, ctx->num_commands, ctx->commands[ctx->cmd_index]);
                CommandSender_Send(ctx->commands[ctx->cmd_index]);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	689a      	ldr	r2, [r3, #8]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4618      	mov	r0, r3
 8000960:	f7ff fe54 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_OK;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2202      	movs	r2, #2
 8000968:	701a      	strb	r2, [r3, #0]
            } else {
                ctx->state = LORA_STATE_SEND_JOIN;
            }
            break;
 800096a:	e318      	b.n	8000f9e <LoraStarter_Process+0x73a>
                ctx->state = LORA_STATE_SEND_JOIN;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2203      	movs	r2, #3
 8000970:	701a      	strb	r2, [r3, #0]
            break;
 8000972:	e314      	b.n	8000f9e <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_OK:
            if (uart_rx) {
 8000974:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000978:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 8304 	beq.w	8000f8c <LoraStarter_Process+0x728>
                if (is_response_ok(uart_rx)) {
 8000984:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000988:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800098c:	6818      	ldr	r0, [r3, #0]
 800098e:	f000 fb2b 	bl	8000fe8 <is_response_ok>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d010      	beq.n	80009ba <LoraStarter_Process+0x156>
                    LOG_DEBUG("[LoRa] Command %d OK received", ctx->cmd_index + 1);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	3301      	adds	r3, #1
 800099e:	461a      	mov	r2, r3
 80009a0:	497b      	ldr	r1, [pc, #492]	@ (8000b90 <LoraStarter_Process+0x32c>)
 80009a2:	2000      	movs	r0, #0
 80009a4:	f004 feec 	bl	8005780 <LOGGER_SendFormatted>
                    ctx->cmd_index++;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	605a      	str	r2, [r3, #4]
                    ctx->state = LORA_STATE_SEND_CMD;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 에러 카운터 리셋
                        ctx->state = LORA_STATE_SEND_CMD;
                    }
                }
            }
            break;
 80009b8:	e2e8      	b.n	8000f8c <LoraStarter_Process+0x728>
                } else if (strstr(uart_rx, "ERROR") || strstr(uart_rx, "AT_COMMAND_NOT_FOUND")) {
 80009ba:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009be:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009c2:	4974      	ldr	r1, [pc, #464]	@ (8000b94 <LoraStarter_Process+0x330>)
 80009c4:	6818      	ldr	r0, [r3, #0]
 80009c6:	f017 f9b5 	bl	8017d34 <strstr>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10b      	bne.n	80009e8 <LoraStarter_Process+0x184>
 80009d0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009d8:	496f      	ldr	r1, [pc, #444]	@ (8000b98 <LoraStarter_Process+0x334>)
 80009da:	6818      	ldr	r0, [r3, #0]
 80009dc:	f017 f9aa 	bl	8017d34 <strstr>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	f000 82d2 	beq.w	8000f8c <LoraStarter_Process+0x728>
                    LOG_WARN("[LoRa] Command %d failed: %s", ctx->cmd_index + 1, uart_rx);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	1c5a      	adds	r2, r3, #1
 80009ee:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80009f2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4968      	ldr	r1, [pc, #416]	@ (8000b9c <LoraStarter_Process+0x338>)
 80009fa:	2002      	movs	r0, #2
 80009fc:	f004 fec0 	bl	8005780 <LOGGER_SendFormatted>
                    ctx->error_count++;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6a1b      	ldr	r3, [r3, #32]
 8000a04:	1c5a      	adds	r2, r3, #1
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	621a      	str	r2, [r3, #32]
                    if (ctx->error_count < 3) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6a1b      	ldr	r3, [r3, #32]
 8000a0e:	2b02      	cmp	r3, #2
 8000a10:	dc0d      	bgt.n	8000a2e <LoraStarter_Process+0x1ca>
                        LOG_INFO("[LoRa] Retrying command %d (attempt %d/3)", ctx->cmd_index + 1, ctx->error_count + 1);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	1c5a      	adds	r2, r3, #1
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a1b      	ldr	r3, [r3, #32]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	4960      	ldr	r1, [pc, #384]	@ (8000ba0 <LoraStarter_Process+0x33c>)
 8000a20:	2001      	movs	r0, #1
 8000a22:	f004 fead 	bl	8005780 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_CMD; // 같은 명령 재시도
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
            break;
 8000a2c:	e2ae      	b.n	8000f8c <LoraStarter_Process+0x728>
                        LOG_WARN("[LoRa] Command %d failed after 3 attempts, skipping to next", ctx->cmd_index + 1);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	3301      	adds	r3, #1
 8000a34:	461a      	mov	r2, r3
 8000a36:	495b      	ldr	r1, [pc, #364]	@ (8000ba4 <LoraStarter_Process+0x340>)
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f004 fea1 	bl	8005780 <LOGGER_SendFormatted>
                        ctx->cmd_index++; // 다음 명령으로 건너뛰기
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	605a      	str	r2, [r3, #4]
                        ctx->error_count = 0; // 에러 카운터 리셋
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
                        ctx->state = LORA_STATE_SEND_CMD;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
            break;
 8000a54:	e29a      	b.n	8000f8c <LoraStarter_Process+0x728>
        case LORA_STATE_SEND_JOIN:
            LOG_INFO("[LoRa] 🌐 JOIN ATTEMPT started");
 8000a56:	4954      	ldr	r1, [pc, #336]	@ (8000ba8 <LoraStarter_Process+0x344>)
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f004 fe91 	bl	8005780 <LOGGER_SendFormatted>
            CommandSender_Send("AT+JOIN\r\n");
 8000a5e:	4853      	ldr	r0, [pc, #332]	@ (8000bac <LoraStarter_Process+0x348>)
 8000a60:	f7ff fdd4 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_JOIN_OK;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2204      	movs	r2, #4
 8000a68:	701a      	strb	r2, [r3, #0]
            break;
 8000a6a:	e298      	b.n	8000f9e <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_JOIN_OK:
            if (uart_rx && is_join_response_ok(uart_rx)) {
 8000a6c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a70:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 828a 	beq.w	8000f90 <LoraStarter_Process+0x72c>
 8000a7c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000a80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	f000 fb17 	bl	80010b8 <is_join_response_ok>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	f000 827f 	beq.w	8000f90 <LoraStarter_Process+0x72c>
                // JOIN SUCCESS는 ResponseHandler에서 이미 로그 출력됨
                ctx->state = LORA_STATE_SEND_TIMEREQ; // JOIN 후 시간 동기화 활성화로 전환
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2205      	movs	r2, #5
 8000a96:	701a      	strb	r2, [r3, #0]
                ctx->send_count = 0;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
                ctx->error_count = 0; // JOIN 성공 시 에러 카운터 리셋
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
                ctx->retry_delay_ms = 1000; // 재시도 지연 시간 리셋
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
                ctx->last_retry_time = 0; // 재시도 시간 리셋
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	629a      	str	r2, [r3, #40]	@ 0x28
                g_message_number = 1; // JOIN 성공 시 메시지 번호 리셋
 8000ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb0 <LoraStarter_Process+0x34c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
                LOG_INFO("[LoRa] JOIN successful, requesting time synchronization...");
 8000ab8:	493e      	ldr	r1, [pc, #248]	@ (8000bb4 <LoraStarter_Process+0x350>)
 8000aba:	2001      	movs	r0, #1
 8000abc:	f004 fe60 	bl	8005780 <LOGGER_SendFormatted>
            }
            break;
 8000ac0:	e266      	b.n	8000f90 <LoraStarter_Process+0x72c>
        case LORA_STATE_SEND_TIMEREQ:
            LOG_INFO("[LoRa] Sending time synchronization request...");
 8000ac2:	493d      	ldr	r1, [pc, #244]	@ (8000bb8 <LoraStarter_Process+0x354>)
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f004 fe5b 	bl	8005780 <LOGGER_SendFormatted>
            CommandSender_Send("AT+TIMEREQ=1\r\n");
 8000aca:	483c      	ldr	r0, [pc, #240]	@ (8000bbc <LoraStarter_Process+0x358>)
 8000acc:	f7ff fd9e 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_TIMEREQ_OK;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2206      	movs	r2, #6
 8000ad4:	701a      	strb	r2, [r3, #0]
            break;
 8000ad6:	e262      	b.n	8000f9e <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_TIMEREQ_OK:
            if (uart_rx && is_response_ok(uart_rx)) {
 8000ad8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000adc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	f000 8256 	beq.w	8000f94 <LoraStarter_Process+0x730>
 8000ae8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000aec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000af0:	6818      	ldr	r0, [r3, #0]
 8000af2:	f000 fa79 	bl	8000fe8 <is_response_ok>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f000 824b 	beq.w	8000f94 <LoraStarter_Process+0x730>
                LOG_INFO("[LoRa] ✅ Time synchronization enabled");
 8000afe:	4930      	ldr	r1, [pc, #192]	@ (8000bc0 <LoraStarter_Process+0x35c>)
 8000b00:	2001      	movs	r0, #1
 8000b02:	f004 fe3d 	bl	8005780 <LOGGER_SendFormatted>
                ctx->state = LORA_STATE_WAIT_TIME_SYNC;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2207      	movs	r2, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
                ctx->last_retry_time = TIME_GetCurrentMs(); // 5초 지연 시작 시점 기록
 8000b0c:	f004 fd9e 	bl	800564c <TIME_GetCurrentMs>
 8000b10:	4602      	mov	r2, r0
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            break;
 8000b16:	e23d      	b.n	8000f94 <LoraStarter_Process+0x730>
        case LORA_STATE_WAIT_TIME_SYNC:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000b18:	f004 fd98 	bl	800564c <TIME_GetCurrentMs>
 8000b1c:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
                const uint32_t TIME_SYNC_DELAY_MS = LORA_TIME_SYNC_DELAY_MS;
 8000b20:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
                
                if (ctx->last_retry_time == 0) {
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d108      	bne.n	8000b42 <LoraStarter_Process+0x2de>
                    // 처음 진입 시 시작 시간 기록
                    ctx->last_retry_time = current_time;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
                    LOG_INFO("[LoRa] ⏳ Waiting 5 seconds for time synchronization...");
 8000b38:	4922      	ldr	r1, [pc, #136]	@ (8000bc4 <LoraStarter_Process+0x360>)
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f004 fe20 	bl	8005780 <LOGGER_SendFormatted>
                    LOG_INFO("[LoRa] ✅ Time sync delay completed, requesting network time");
                    ctx->state = LORA_STATE_SEND_LTIME;
                    ctx->last_retry_time = 0; // 타이머 리셋
                }
            }
            break;
 8000b40:	e22a      	b.n	8000f98 <LoraStarter_Process+0x734>
                } else if ((current_time - ctx->last_retry_time) >= TIME_SYNC_DELAY_MS) {
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f200 8221 	bhi.w	8000f98 <LoraStarter_Process+0x734>
                    LOG_INFO("[LoRa] ✅ Time sync delay completed, requesting network time");
 8000b56:	491c      	ldr	r1, [pc, #112]	@ (8000bc8 <LoraStarter_Process+0x364>)
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f004 fe11 	bl	8005780 <LOGGER_SendFormatted>
                    ctx->state = LORA_STATE_SEND_LTIME;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2208      	movs	r2, #8
 8000b62:	701a      	strb	r2, [r3, #0]
                    ctx->last_retry_time = 0; // 타이머 리셋
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8000b6a:	e215      	b.n	8000f98 <LoraStarter_Process+0x734>
        case LORA_STATE_SEND_LTIME:
            LOG_INFO("[LoRa] Requesting network time...");
 8000b6c:	4917      	ldr	r1, [pc, #92]	@ (8000bcc <LoraStarter_Process+0x368>)
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f004 fe06 	bl	8005780 <LOGGER_SendFormatted>
            CommandSender_Send("AT+LTIME=?\r\n");
 8000b74:	4816      	ldr	r0, [pc, #88]	@ (8000bd0 <LoraStarter_Process+0x36c>)
 8000b76:	f7ff fd49 	bl	800060c <CommandSender_Send>
            ctx->state = LORA_STATE_WAIT_LTIME_RESPONSE;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2209      	movs	r2, #9
 8000b7e:	701a      	strb	r2, [r3, #0]
            break;
 8000b80:	e20d      	b.n	8000f9e <LoraStarter_Process+0x73a>
 8000b82:	bf00      	nop
 8000b84:	080196f8 	.word	0x080196f8
 8000b88:	08019700 	.word	0x08019700
 8000b8c:	08019738 	.word	0x08019738
 8000b90:	0801975c 	.word	0x0801975c
 8000b94:	08019684 	.word	0x08019684
 8000b98:	0801977c 	.word	0x0801977c
 8000b9c:	08019794 	.word	0x08019794
 8000ba0:	080197b4 	.word	0x080197b4
 8000ba4:	080197e0 	.word	0x080197e0
 8000ba8:	0801981c 	.word	0x0801981c
 8000bac:	08019840 	.word	0x08019840
 8000bb0:	20000014 	.word	0x20000014
 8000bb4:	0801984c 	.word	0x0801984c
 8000bb8:	08019888 	.word	0x08019888
 8000bbc:	080198b8 	.word	0x080198b8
 8000bc0:	080198c8 	.word	0x080198c8
 8000bc4:	080198f0 	.word	0x080198f0
 8000bc8:	0801992c 	.word	0x0801992c
 8000bcc:	0801996c 	.word	0x0801996c
 8000bd0:	08019990 	.word	0x08019990
        case LORA_STATE_WAIT_LTIME_RESPONSE:
            if (uart_rx) {
 8000bd4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bd8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d03e      	beq.n	8000c60 <LoraStarter_Process+0x3fc>
                LOG_DEBUG("[LoRa] LTIME response received: '%s'", uart_rx);
 8000be2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000be6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	49b1      	ldr	r1, [pc, #708]	@ (8000eb4 <LoraStarter_Process+0x650>)
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f004 fdc6 	bl	8005780 <LOGGER_SendFormatted>
                
                // ResponseHandler에서 시간 응답 파싱 처리
                if (ResponseHandler_IsTimeResponse(uart_rx)) {
 8000bf4:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000bf8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	f000 fb37 	bl	8001270 <ResponseHandler_IsTimeResponse>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d021      	beq.n	8000c4c <LoraStarter_Process+0x3e8>
                    ResponseHandler_ParseTimeResponse(uart_rx);
 8000c08:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c0c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	f000 fbdd 	bl	80013d0 <ResponseHandler_ParseTimeResponse>
                    
                    // 현재 상태에 따라 다른 동작
                    if (ctx->send_count == 0) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d10e      	bne.n	8000c3c <LoraStarter_Process+0x3d8>
                        // 첫 번째 시간 동기화 (JOIN 후) - 주기적 전송 시작
                        LOG_INFO("[LoRa] 🕐 Initial time synchronized, starting periodic transmission");
 8000c1e:	49a6      	ldr	r1, [pc, #664]	@ (8000eb8 <LoraStarter_Process+0x654>)
 8000c20:	2001      	movs	r0, #1
 8000c22:	f004 fdad 	bl	8005780 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	220a      	movs	r2, #10
 8000c2a:	701a      	strb	r2, [r3, #0]
                        LOG_INFO("[LoRa] 🚀 PERIODIC SEND STARTED with message: %s", ctx->send_message);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	461a      	mov	r2, r3
 8000c32:	49a2      	ldr	r1, [pc, #648]	@ (8000ebc <LoraStarter_Process+0x658>)
 8000c34:	2001      	movs	r0, #1
 8000c36:	f004 fda3 	bl	8005780 <LOGGER_SendFormatted>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
                }
            } else {
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
            }
            break;
 8000c3a:	e1b0      	b.n	8000f9e <LoraStarter_Process+0x73a>
                        LOG_INFO("[LoRa] 🕐 Time synchronized, proceeding to SEND");
 8000c3c:	49a0      	ldr	r1, [pc, #640]	@ (8000ec0 <LoraStarter_Process+0x65c>)
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f004 fd9e 	bl	8005780 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_SEND_PERIODIC;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	220a      	movs	r2, #10
 8000c48:	701a      	strb	r2, [r3, #0]
            break;
 8000c4a:	e1a8      	b.n	8000f9e <LoraStarter_Process+0x73a>
                    LOG_DEBUG("[LoRa] Waiting for LTIME response, got: '%s'", uart_rx);
 8000c4c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000c50:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	499b      	ldr	r1, [pc, #620]	@ (8000ec4 <LoraStarter_Process+0x660>)
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f004 fd91 	bl	8005780 <LOGGER_SendFormatted>
            break;
 8000c5e:	e19e      	b.n	8000f9e <LoraStarter_Process+0x73a>
                LOG_DEBUG("[LoRa] WAIT_LTIME_RESPONSE: No uart_rx data received");
 8000c60:	4999      	ldr	r1, [pc, #612]	@ (8000ec8 <LoraStarter_Process+0x664>)
 8000c62:	2000      	movs	r0, #0
 8000c64:	f004 fd8c 	bl	8005780 <LOGGER_SendFormatted>
            break;
 8000c68:	e199      	b.n	8000f9e <LoraStarter_Process+0x73a>
                char send_cmd[128];
                char hex_data[64];
                char sequential_message[16];
                
                // 순차 번호 메시지 생성 (0001~9999, JOIN마다 리셋)
                snprintf(sequential_message, sizeof(sequential_message), "%04d", g_message_number);
 8000c6a:	4b98      	ldr	r3, [pc, #608]	@ (8000ecc <LoraStarter_Process+0x668>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f107 00c8 	add.w	r0, r7, #200	@ 0xc8
 8000c72:	4a97      	ldr	r2, [pc, #604]	@ (8000ed0 <LoraStarter_Process+0x66c>)
 8000c74:	2110      	movs	r1, #16
 8000c76:	f016 ff2f 	bl	8017ad8 <sniprintf>
                
                // 최대값 다음에는 0001로 다시 시작
                g_message_number++;
 8000c7a:	4b94      	ldr	r3, [pc, #592]	@ (8000ecc <LoraStarter_Process+0x668>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a92      	ldr	r2, [pc, #584]	@ (8000ecc <LoraStarter_Process+0x668>)
 8000c82:	6013      	str	r3, [r2, #0]
                if (g_message_number > LORA_MESSAGE_NUMBER_MAX) {
 8000c84:	4b91      	ldr	r3, [pc, #580]	@ (8000ecc <LoraStarter_Process+0x668>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	dd02      	ble.n	8000c96 <LoraStarter_Process+0x432>
                    g_message_number = 1;
 8000c90:	4b8e      	ldr	r3, [pc, #568]	@ (8000ecc <LoraStarter_Process+0x668>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]
                }
                
                // 문자열을 헥사 문자열로 변환
                int len = strlen(sequential_message);
 8000c96:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fac2 	bl	8000224 <strlen>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cac:	e014      	b.n	8000cd8 <LoraStarter_Process+0x474>
                    sprintf(&hex_data[i*2], "%02X", (unsigned char)sequential_message[i]);
 8000cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	f107 0208 	add.w	r2, r7, #8
 8000cb8:	18d0      	adds	r0, r2, r3
 8000cba:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8000cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cc2:	4413      	add	r3, r2
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4982      	ldr	r1, [pc, #520]	@ (8000ed4 <LoraStarter_Process+0x670>)
 8000cca:	f016 ff3b 	bl	8017b44 <siprintf>
                for (int i = 0; i < len && i < 31; i++) {  // 최대 31자 (62 hex chars)
 8000cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000cd8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8000cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	da03      	bge.n	8000cec <LoraStarter_Process+0x488>
 8000ce4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000ce8:	2b1e      	cmp	r3, #30
 8000cea:	dde0      	ble.n	8000cae <LoraStarter_Process+0x44a>
                }
                hex_data[len*2] = '\0';
 8000cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000cf6:	443b      	add	r3, r7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f803 2cf8 	strb.w	r2, [r3, #-248]
                
                snprintf(send_cmd, sizeof(send_cmd), "AT+SEND=1:%s\r\n", hex_data);
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000d06:	4a74      	ldr	r2, [pc, #464]	@ (8000ed8 <LoraStarter_Process+0x674>)
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	f016 fee5 	bl	8017ad8 <sniprintf>
                LOG_WARN("[LoRa] 📤 SEND ATTEMPT: %s", sequential_message);
 8000d0e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8000d12:	461a      	mov	r2, r3
 8000d14:	4971      	ldr	r1, [pc, #452]	@ (8000edc <LoraStarter_Process+0x678>)
 8000d16:	2002      	movs	r0, #2
 8000d18:	f004 fd32 	bl	8005780 <LOGGER_SendFormatted>
                CommandSender_Send(send_cmd);
 8000d1c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc73 	bl	800060c <CommandSender_Send>
                ctx->state = LORA_STATE_WAIT_SEND_RESPONSE;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	220b      	movs	r2, #11
 8000d2a:	701a      	strb	r2, [r3, #0]
                ctx->send_count++;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	619a      	str	r2, [r3, #24]
                LOG_DEBUG("[LoRa] Send count: %d", ctx->send_count);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4968      	ldr	r1, [pc, #416]	@ (8000ee0 <LoraStarter_Process+0x67c>)
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f004 fd1e 	bl	8005780 <LOGGER_SendFormatted>
            }
            break;
 8000d44:	e12b      	b.n	8000f9e <LoraStarter_Process+0x73a>
        case LORA_STATE_WAIT_SEND_RESPONSE:
            if (uart_rx) {
 8000d46:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d4a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 8123 	beq.w	8000f9c <LoraStarter_Process+0x738>
                ResponseType response_type = ResponseHandler_ParseSendResponse(uart_rx);
 8000d56:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d5a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d5e:	6818      	ldr	r0, [r3, #0]
 8000d60:	f000 fa30 	bl	80011c4 <ResponseHandler_ParseSendResponse>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
                switch(response_type) {
 8000d6a:	f897 30e7 	ldrb.w	r3, [r7, #231]	@ 0xe7
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d01a      	beq.n	8000da8 <LoraStarter_Process+0x544>
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	dc60      	bgt.n	8000e38 <LoraStarter_Process+0x5d4>
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <LoraStarter_Process+0x51c>
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d028      	beq.n	8000dd0 <LoraStarter_Process+0x56c>
 8000d7e:	e05b      	b.n	8000e38 <LoraStarter_Process+0x5d4>
                    case RESPONSE_OK:
                        // SEND SUCCESS는 ResponseHandler에서 이미 로그 출력됨
                        // SEND 성공 후 다음 전송 대기 상태로 전환
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	220c      	movs	r2, #12
 8000d84:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; // 성공 시 에러 카운터 리셋
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = LORA_RETRY_DELAY_MS; // 재시도 지연 시간 리셋
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000d92:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 송신 완료 시간 저장
 8000d94:	f004 fc5a 	bl	800564c <TIME_GetCurrentMs>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	611a      	str	r2, [r3, #16]
                        LOG_INFO("[LoRa] SEND successful, waiting for next interval...");
 8000d9e:	4951      	ldr	r1, [pc, #324]	@ (8000ee4 <LoraStarter_Process+0x680>)
 8000da0:	2001      	movs	r0, #1
 8000da2:	f004 fced 	bl	8005780 <LOGGER_SendFormatted>
                        break;
 8000da6:	e051      	b.n	8000e4c <LoraStarter_Process+0x5e8>
                    case RESPONSE_TIMEOUT:
                        LOG_WARN("[LoRa] SEND timeout - waiting for next interval");
 8000da8:	494f      	ldr	r1, [pc, #316]	@ (8000ee8 <LoraStarter_Process+0x684>)
 8000daa:	2002      	movs	r0, #2
 8000dac:	f004 fce8 	bl	8005780 <LOGGER_SendFormatted>
                        ctx->state = LORA_STATE_WAIT_SEND_INTERVAL; // 타임아웃 시 대기 상태로 전환
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	220c      	movs	r2, #12
 8000db4:	701a      	strb	r2, [r3, #0]
                        ctx->error_count = 0; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
                        ctx->retry_delay_ms = 1000;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
                        ctx->last_send_time = TIME_GetCurrentMs(); // 타임아웃 시간 저장
 8000dc4:	f004 fc42 	bl	800564c <TIME_GetCurrentMs>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	611a      	str	r2, [r3, #16]
                        break;
 8000dce:	e03d      	b.n	8000e4c <LoraStarter_Process+0x5e8>
                    case RESPONSE_ERROR:
                        LORA_LOG_SEND_FAILED("Network error");
 8000dd0:	4a46      	ldr	r2, [pc, #280]	@ (8000eec <LoraStarter_Process+0x688>)
 8000dd2:	4947      	ldr	r1, [pc, #284]	@ (8000ef0 <LoraStarter_Process+0x68c>)
 8000dd4:	2002      	movs	r0, #2
 8000dd6:	f004 fcd3 	bl	8005780 <LOGGER_SendFormatted>
                        ctx->error_count++;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	621a      	str	r2, [r3, #32]
                        LORA_LOG_ERROR_COUNT(ctx->error_count);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4942      	ldr	r1, [pc, #264]	@ (8000ef4 <LoraStarter_Process+0x690>)
 8000dec:	2002      	movs	r0, #2
 8000dee:	f004 fcc7 	bl	8005780 <LOGGER_SendFormatted>
                        // 무제한 재시도 (max_retry_count가 0이거나 아직 제한에 도달하지 않은 경우)
                        if (ctx->max_retry_count == 0 || ctx->error_count < ctx->max_retry_count) {
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d005      	beq.n	8000e06 <LoraStarter_Process+0x5a2>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a1a      	ldr	r2, [r3, #32]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e02:	429a      	cmp	r2, r3
 8000e04:	da10      	bge.n	8000e28 <LoraStarter_Process+0x5c4>
                            LORA_LOG_RETRY_ATTEMPT(ctx->error_count, ctx->max_retry_count);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a1a      	ldr	r2, [r3, #32]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <LoraStarter_Process+0x5b2>
 8000e12:	4b39      	ldr	r3, [pc, #228]	@ (8000ef8 <LoraStarter_Process+0x694>)
 8000e14:	e000      	b.n	8000e18 <LoraStarter_Process+0x5b4>
 8000e16:	4b39      	ldr	r3, [pc, #228]	@ (8000efc <LoraStarter_Process+0x698>)
 8000e18:	4939      	ldr	r1, [pc, #228]	@ (8000f00 <LoraStarter_Process+0x69c>)
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f004 fcb0 	bl	8005780 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_JOIN_RETRY; // JOIN 재시도
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	220d      	movs	r2, #13
 8000e24:	701a      	strb	r2, [r3, #0]
                        } else {
                            LORA_LOG_MAX_RETRIES_REACHED();
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
                        }
                        break;
 8000e26:	e011      	b.n	8000e4c <LoraStarter_Process+0x5e8>
                            LORA_LOG_MAX_RETRIES_REACHED();
 8000e28:	4936      	ldr	r1, [pc, #216]	@ (8000f04 <LoraStarter_Process+0x6a0>)
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f004 fca8 	bl	8005780 <LOGGER_SendFormatted>
                            ctx->state = LORA_STATE_ERROR; // 최대 재시도 횟수 초과
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	220f      	movs	r2, #15
 8000e34:	701a      	strb	r2, [r3, #0]
                        break;
 8000e36:	e009      	b.n	8000e4c <LoraStarter_Process+0x5e8>
                    default:
                        // 알 수 없는 응답은 무시하고 계속 대기
                        LOG_DEBUG("[LoRa] Unknown response: %s", uart_rx);
 8000e38:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e3c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4931      	ldr	r1, [pc, #196]	@ (8000f08 <LoraStarter_Process+0x6a4>)
 8000e44:	2000      	movs	r0, #0
 8000e46:	f004 fc9b 	bl	8005780 <LOGGER_SendFormatted>
                        break;
 8000e4a:	bf00      	nop
                }
            }
            break;
 8000e4c:	e0a6      	b.n	8000f9c <LoraStarter_Process+0x738>
        case LORA_STATE_WAIT_SEND_INTERVAL:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000e4e:	f004 fbfd 	bl	800564c <TIME_GetCurrentMs>
 8000e52:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
                uint32_t interval_ms = (ctx->send_interval_ms > 0) ? ctx->send_interval_ms : 30000; // 기본값 30초
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <LoraStarter_Process+0x600>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	e001      	b.n	8000e68 <LoraStarter_Process+0x604>
 8000e64:	f247 5330 	movw	r3, #30000	@ 0x7530
 8000e68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
                
                if ((current_time - ctx->last_send_time) >= interval_ms) {
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691b      	ldr	r3, [r3, #16]
 8000e70:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d809      	bhi.n	8000e92 <LoraStarter_Process+0x62e>
                    LOG_DEBUG("[LoRa] Send interval passed (%u ms), requesting time before next send", interval_ms);
 8000e7e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000e82:	4922      	ldr	r1, [pc, #136]	@ (8000f0c <LoraStarter_Process+0x6a8>)
 8000e84:	2000      	movs	r0, #0
 8000e86:	f004 fc7b 	bl	8005780 <LOGGER_SendFormatted>
                    // 다음 주기적 전송 전 시간 동기화 실행 (LTIME → SEND 순서)
                    ctx->state = LORA_STATE_SEND_LTIME;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	701a      	strb	r2, [r3, #0]
                    // 아직 대기 시간이 남았으므로 상태 유지
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
                }
            }
            break;
 8000e90:	e085      	b.n	8000f9e <LoraStarter_Process+0x73a>
                    uint32_t remaining_ms = interval_ms - (current_time - ctx->last_send_time);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	691a      	ldr	r2, [r3, #16]
 8000e96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8000ea0:	4413      	add	r3, r2
 8000ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
                    LOG_DEBUG("[LoRa] Waiting for send interval (%u ms remaining)", remaining_ms);
 8000ea6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000eaa:	4919      	ldr	r1, [pc, #100]	@ (8000f10 <LoraStarter_Process+0x6ac>)
 8000eac:	2000      	movs	r0, #0
 8000eae:	f004 fc67 	bl	8005780 <LOGGER_SendFormatted>
            break;
 8000eb2:	e074      	b.n	8000f9e <LoraStarter_Process+0x73a>
 8000eb4:	080199a0 	.word	0x080199a0
 8000eb8:	080199c8 	.word	0x080199c8
 8000ebc:	08019a10 	.word	0x08019a10
 8000ec0:	08019a44 	.word	0x08019a44
 8000ec4:	08019a78 	.word	0x08019a78
 8000ec8:	08019aa8 	.word	0x08019aa8
 8000ecc:	20000014 	.word	0x20000014
 8000ed0:	08019ae0 	.word	0x08019ae0
 8000ed4:	08019ae8 	.word	0x08019ae8
 8000ed8:	08019af0 	.word	0x08019af0
 8000edc:	08019b00 	.word	0x08019b00
 8000ee0:	08019b20 	.word	0x08019b20
 8000ee4:	08019b38 	.word	0x08019b38
 8000ee8:	08019b70 	.word	0x08019b70
 8000eec:	08019ba0 	.word	0x08019ba0
 8000ef0:	08019bb0 	.word	0x08019bb0
 8000ef4:	08019bc8 	.word	0x08019bc8
 8000ef8:	08019be0 	.word	0x08019be0
 8000efc:	08019bf0 	.word	0x08019bf0
 8000f00:	08019bf4 	.word	0x08019bf4
 8000f04:	08019c10 	.word	0x08019c10
 8000f08:	08019c34 	.word	0x08019c34
 8000f0c:	08019c50 	.word	0x08019c50
 8000f10:	08019c98 	.word	0x08019c98
        case LORA_STATE_JOIN_RETRY:
            {
                uint32_t current_time = TIME_GetCurrentMs();
 8000f14:	f004 fb9a 	bl	800564c <TIME_GetCurrentMs>
 8000f18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
                
                if (ctx->last_retry_time == 0) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10b      	bne.n	8000f3c <LoraStarter_Process+0x6d8>
                    // 첫 재시도: 바로 SEND_JOIN
                    LOG_DEBUG("[LoRa] First JOIN retry");
 8000f24:	492c      	ldr	r1, [pc, #176]	@ (8000fd8 <LoraStarter_Process+0x774>)
 8000f26:	2000      	movs	r0, #0
 8000f28:	f004 fc2a 	bl	8005780 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2203      	movs	r2, #3
 8000f38:	701a      	strb	r2, [r3, #0]
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
                             ctx->retry_delay_ms - (current_time - ctx->last_retry_time));
                    // 아무것도 하지 않음
                }
            }
            break;
 8000f3a:	e030      	b.n	8000f9e <LoraStarter_Process+0x73a>
                } else if ((current_time - ctx->last_retry_time) >= ctx->retry_delay_ms) {
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f40:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f44:	1ad2      	subs	r2, r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d30e      	bcc.n	8000f6c <LoraStarter_Process+0x708>
                    LOG_DEBUG("[LoRa] JOIN retry after %lu ms delay", ctx->retry_delay_ms);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f52:	461a      	mov	r2, r3
 8000f54:	4921      	ldr	r1, [pc, #132]	@ (8000fdc <LoraStarter_Process+0x778>)
 8000f56:	2000      	movs	r0, #0
 8000f58:	f004 fc12 	bl	8005780 <LOGGER_SendFormatted>
                    ctx->last_retry_time = current_time;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000f62:	629a      	str	r2, [r3, #40]	@ 0x28
                    ctx->state = LORA_STATE_SEND_JOIN;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	701a      	strb	r2, [r3, #0]
            break;
 8000f6a:	e018      	b.n	8000f9e <LoraStarter_Process+0x73a>
                    LOG_DEBUG("[LoRa] Waiting for retry delay (%lu ms remaining)", 
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8000f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8000f78:	1acb      	subs	r3, r1, r3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4918      	ldr	r1, [pc, #96]	@ (8000fe0 <LoraStarter_Process+0x77c>)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f004 fbfd 	bl	8005780 <LOGGER_SendFormatted>
            break;
 8000f86:	e00a      	b.n	8000f9e <LoraStarter_Process+0x73a>
        case LORA_STATE_DONE:
        case LORA_STATE_ERROR:
        default:
            // 이미 완료된 상태이므로 아무것도 하지 않음
            break;
 8000f88:	bf00      	nop
 8000f8a:	e008      	b.n	8000f9e <LoraStarter_Process+0x73a>
            break;
 8000f8c:	bf00      	nop
 8000f8e:	e006      	b.n	8000f9e <LoraStarter_Process+0x73a>
            break;
 8000f90:	bf00      	nop
 8000f92:	e004      	b.n	8000f9e <LoraStarter_Process+0x73a>
            break;
 8000f94:	bf00      	nop
 8000f96:	e002      	b.n	8000f9e <LoraStarter_Process+0x73a>
            break;
 8000f98:	bf00      	nop
 8000f9a:	e000      	b.n	8000f9e <LoraStarter_Process+0x73a>
            break;
 8000f9c:	bf00      	nop
    }

    // 상태 변경 로깅
    if (old_state != ctx->state) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	f897 20fb 	ldrb.w	r2, [r7, #251]	@ 0xfb
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d012      	beq.n	8000fd0 <LoraStarter_Process+0x76c>
        LORA_LOG_STATE_CHANGE(get_state_name(old_state), get_state_name(ctx->state));
 8000faa:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fb9a 	bl	80006e8 <get_state_name>
 8000fb4:	4604      	mov	r4, r0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fb94 	bl	80006e8 <get_state_name>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4622      	mov	r2, r4
 8000fc4:	4907      	ldr	r1, [pc, #28]	@ (8000fe4 <LoraStarter_Process+0x780>)
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f004 fbda 	bl	8005780 <LOGGER_SendFormatted>
 8000fcc:	e000      	b.n	8000fd0 <LoraStarter_Process+0x76c>
    if (ctx == NULL) return;
 8000fce:	bf00      	nop
    }
}
 8000fd0:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	08019ccc 	.word	0x08019ccc
 8000fdc:	08019ce4 	.word	0x08019ce4
 8000fe0:	08019d0c 	.word	0x08019d0c
 8000fe4:	08019d40 	.word	0x08019d40

08000fe8 <is_response_ok>:
// 전역 변수: 네트워크에서 수신한 시간 정보 저장
static char g_network_time[64] = {0};
static bool g_time_synchronized = false;

bool is_response_ok(const char* response)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d105      	bne.n	8001002 <is_response_ok+0x1a>
        LOG_DEBUG("[ResponseHandler] is_response_ok: NULL response");
 8000ff6:	4925      	ldr	r1, [pc, #148]	@ (800108c <is_response_ok+0xa4>)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f004 fbc1 	bl	8005780 <LOGGER_SendFormatted>
        return false;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e03f      	b.n	8001082 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking OK response: '%s'", response);
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4922      	ldr	r1, [pc, #136]	@ (8001090 <is_response_ok+0xa8>)
 8001006:	2000      	movs	r0, #0
 8001008:	f004 fbba 	bl	8005780 <LOGGER_SendFormatted>
    
    // OK 또는 OK\r\n, OK\n 등 허용
    if (strcmp(response, "OK") == 0) {
 800100c:	4921      	ldr	r1, [pc, #132]	@ (8001094 <is_response_ok+0xac>)
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff f8fe 	bl	8000210 <strcmp>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d105      	bne.n	8001026 <is_response_ok+0x3e>
        LOG_DEBUG("[ResponseHandler] OK response confirmed");
 800101a:	491f      	ldr	r1, [pc, #124]	@ (8001098 <is_response_ok+0xb0>)
 800101c:	2000      	movs	r0, #0
 800101e:	f004 fbaf 	bl	8005780 <LOGGER_SendFormatted>
        return true;
 8001022:	2301      	movs	r3, #1
 8001024:	e02d      	b.n	8001082 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\r\n") == 0) {
 8001026:	491d      	ldr	r1, [pc, #116]	@ (800109c <is_response_ok+0xb4>)
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff f8f1 	bl	8000210 <strcmp>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d105      	bne.n	8001040 <is_response_ok+0x58>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with CRLF)");
 8001034:	491a      	ldr	r1, [pc, #104]	@ (80010a0 <is_response_ok+0xb8>)
 8001036:	2000      	movs	r0, #0
 8001038:	f004 fba2 	bl	8005780 <LOGGER_SendFormatted>
        return true;
 800103c:	2301      	movs	r3, #1
 800103e:	e020      	b.n	8001082 <is_response_ok+0x9a>
    }
    if (strcmp(response, "OK\n") == 0) {
 8001040:	4918      	ldr	r1, [pc, #96]	@ (80010a4 <is_response_ok+0xbc>)
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff f8e4 	bl	8000210 <strcmp>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d105      	bne.n	800105a <is_response_ok+0x72>
        LOG_DEBUG("[ResponseHandler] OK response confirmed (with LF)");
 800104e:	4916      	ldr	r1, [pc, #88]	@ (80010a8 <is_response_ok+0xc0>)
 8001050:	2000      	movs	r0, #0
 8001052:	f004 fb95 	bl	8005780 <LOGGER_SendFormatted>
        return true;
 8001056:	2301      	movs	r3, #1
 8001058:	e013      	b.n	8001082 <is_response_ok+0x9a>
    }
    
    // AT+VER 버전 응답도 성공으로 간주 (RUI_로 시작하는 응답)
    if (strstr(response, "RUI_") != NULL) {
 800105a:	4914      	ldr	r1, [pc, #80]	@ (80010ac <is_response_ok+0xc4>)
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f016 fe69 	bl	8017d34 <strstr>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d006      	beq.n	8001076 <is_response_ok+0x8e>
        LOG_DEBUG("[ResponseHandler] Version response confirmed: %s", response);
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4911      	ldr	r1, [pc, #68]	@ (80010b0 <is_response_ok+0xc8>)
 800106c:	2000      	movs	r0, #0
 800106e:	f004 fb87 	bl	8005780 <LOGGER_SendFormatted>
        return true;
 8001072:	2301      	movs	r3, #1
 8001074:	e005      	b.n	8001082 <is_response_ok+0x9a>
    }
    
    LOG_DEBUG("[ResponseHandler] Not an OK response: '%s'", response);
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	490e      	ldr	r1, [pc, #56]	@ (80010b4 <is_response_ok+0xcc>)
 800107a:	2000      	movs	r0, #0
 800107c:	f004 fb80 	bl	8005780 <LOGGER_SendFormatted>
    return false;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	08019d60 	.word	0x08019d60
 8001090:	08019d90 	.word	0x08019d90
 8001094:	08019dc0 	.word	0x08019dc0
 8001098:	08019dc4 	.word	0x08019dc4
 800109c:	08019dec 	.word	0x08019dec
 80010a0:	08019df4 	.word	0x08019df4
 80010a4:	08019e28 	.word	0x08019e28
 80010a8:	08019e2c 	.word	0x08019e2c
 80010ac:	08019e60 	.word	0x08019e60
 80010b0:	08019e68 	.word	0x08019e68
 80010b4:	08019e9c 	.word	0x08019e9c

080010b8 <is_join_response_ok>:

bool is_join_response_ok(const char* response)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80010be:	af00      	add	r7, sp, #0
 80010c0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010c4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010c8:	6018      	str	r0, [r3, #0]
    if (response == NULL) {
 80010ca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010ce:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <is_join_response_ok+0x2c>
        LOG_DEBUG("[ResponseHandler] is_join_response_ok: NULL response");
 80010d8:	4934      	ldr	r1, [pc, #208]	@ (80011ac <is_join_response_ok+0xf4>)
 80010da:	2000      	movs	r0, #0
 80010dc:	f004 fb50 	bl	8005780 <LOGGER_SendFormatted>
        return false;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e05d      	b.n	80011a0 <is_join_response_ok+0xe8>
    }
    
    LOG_DEBUG("[ResponseHandler] Checking JOIN response: '%s'", response);
 80010e4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010e8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4930      	ldr	r1, [pc, #192]	@ (80011b0 <is_join_response_ok+0xf8>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f004 fb45 	bl	8005780 <LOGGER_SendFormatted>
    
    // 개행 문자 제거하여 비교
    char clean_response[512];
    strncpy(clean_response, response, sizeof(clean_response) - 1);
 80010f6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80010fa:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80010fe:	f107 0008 	add.w	r0, r7, #8
 8001102:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8001106:	6819      	ldr	r1, [r3, #0]
 8001108:	f016 fe01 	bl	8017d0e <strncpy>
    clean_response[sizeof(clean_response) - 1] = '\0';
 800110c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8001110:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001114:	2200      	movs	r2, #0
 8001116:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
    
    // 개행 문자 제거
    char* pos = clean_response;
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 8001122:	e013      	b.n	800114c <is_join_response_ok+0x94>
        if (*pos == '\r' || *pos == '\n') {
 8001124:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b0d      	cmp	r3, #13
 800112c:	d004      	beq.n	8001138 <is_join_response_ok+0x80>
 800112e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b0a      	cmp	r3, #10
 8001136:	d104      	bne.n	8001142 <is_join_response_ok+0x8a>
            *pos = '\0';
 8001138:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
            break;
 8001140:	e009      	b.n	8001156 <is_join_response_ok+0x9e>
        }
        pos++;
 8001142:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001146:	3301      	adds	r3, #1
 8001148:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
    while (*pos) {
 800114c:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1e6      	bne.n	8001124 <is_join_response_ok+0x6c>
    }
    
    bool result = (strcmp(clean_response, "+EVT:JOINED") == 0);
 8001156:	f107 0308 	add.w	r3, r7, #8
 800115a:	4916      	ldr	r1, [pc, #88]	@ (80011b4 <is_join_response_ok+0xfc>)
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f857 	bl	8000210 <strcmp>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf0c      	ite	eq
 8001168:	2301      	moveq	r3, #1
 800116a:	2300      	movne	r3, #0
 800116c:	f887 320b 	strb.w	r3, [r7, #523]	@ 0x20b
    
    if (result) {
 8001170:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <is_join_response_ok+0xd2>
        LOG_INFO("✅ JOIN CONFIRMED - Network joined successfully");
 8001178:	490f      	ldr	r1, [pc, #60]	@ (80011b8 <is_join_response_ok+0x100>)
 800117a:	2001      	movs	r0, #1
 800117c:	f004 fb00 	bl	8005780 <LOGGER_SendFormatted>
        
        // JOIN 성공 후 시간 조회 요청 (네트워크 동기화 대기 후)
        LOG_INFO("[ResponseHandler] Requesting network time after JOIN success...");
 8001180:	490e      	ldr	r1, [pc, #56]	@ (80011bc <is_join_response_ok+0x104>)
 8001182:	2001      	movs	r0, #1
 8001184:	f004 fafc 	bl	8005780 <LOGGER_SendFormatted>
 8001188:	e008      	b.n	800119c <is_join_response_ok+0xe4>
        // 짧은 대기 후 시간 조회 (메인 루프에서 처리될 예정)
    } else {
        LOG_DEBUG("[ResponseHandler] Not a JOIN response: '%s'", response);
 800118a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800118e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	490a      	ldr	r1, [pc, #40]	@ (80011c0 <is_join_response_ok+0x108>)
 8001196:	2000      	movs	r0, #0
 8001198:	f004 faf2 	bl	8005780 <LOGGER_SendFormatted>
    }
    
    return result;
 800119c:	f897 320b 	ldrb.w	r3, [r7, #523]	@ 0x20b
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08019ec8 	.word	0x08019ec8
 80011b0:	08019f00 	.word	0x08019f00
 80011b4:	08019f30 	.word	0x08019f30
 80011b8:	08019f3c 	.word	0x08019f3c
 80011bc:	08019f70 	.word	0x08019f70
 80011c0:	08019fb0 	.word	0x08019fb0

080011c4 <ResponseHandler_ParseSendResponse>:

ResponseType ResponseHandler_ParseSendResponse(const char* response)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <ResponseHandler_ParseSendResponse+0x1a>
        LOG_DEBUG("[ResponseHandler] ParseSendResponse: NULL response");
 80011d2:	491e      	ldr	r1, [pc, #120]	@ (800124c <ResponseHandler_ParseSendResponse+0x88>)
 80011d4:	2000      	movs	r0, #0
 80011d6:	f004 fad3 	bl	8005780 <LOGGER_SendFormatted>
        return RESPONSE_UNKNOWN;
 80011da:	2303      	movs	r3, #3
 80011dc:	e031      	b.n	8001242 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing SEND response: '%s'", response);
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	491b      	ldr	r1, [pc, #108]	@ (8001250 <ResponseHandler_ParseSendResponse+0x8c>)
 80011e2:	2000      	movs	r0, #0
 80011e4:	f004 facc 	bl	8005780 <LOGGER_SendFormatted>
    
    if (strstr(response, "+EVT:SEND_CONFIRMED_OK") != NULL) {
 80011e8:	491a      	ldr	r1, [pc, #104]	@ (8001254 <ResponseHandler_ParseSendResponse+0x90>)
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f016 fda2 	bl	8017d34 <strstr>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <ResponseHandler_ParseSendResponse+0x3e>
        LOG_WARN("✅ SEND SUCCESS - Data transmitted successfully");
 80011f6:	4918      	ldr	r1, [pc, #96]	@ (8001258 <ResponseHandler_ParseSendResponse+0x94>)
 80011f8:	2002      	movs	r0, #2
 80011fa:	f004 fac1 	bl	8005780 <LOGGER_SendFormatted>
        return RESPONSE_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e01f      	b.n	8001242 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strstr(response, "+EVT:SEND_CONFIRMED_FAILED") != NULL) {
 8001202:	4916      	ldr	r1, [pc, #88]	@ (800125c <ResponseHandler_ParseSendResponse+0x98>)
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f016 fd95 	bl	8017d34 <strstr>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <ResponseHandler_ParseSendResponse+0x58>
        LOG_WARN("[ResponseHandler] SEND response: CONFIRMED_FAILED");
 8001210:	4913      	ldr	r1, [pc, #76]	@ (8001260 <ResponseHandler_ParseSendResponse+0x9c>)
 8001212:	2002      	movs	r0, #2
 8001214:	f004 fab4 	bl	8005780 <LOGGER_SendFormatted>
        return RESPONSE_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e012      	b.n	8001242 <ResponseHandler_ParseSendResponse+0x7e>
    }
    if (strcmp(response, "TIMEOUT") == 0) {
 800121c:	4911      	ldr	r1, [pc, #68]	@ (8001264 <ResponseHandler_ParseSendResponse+0xa0>)
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7fe fff6 	bl	8000210 <strcmp>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <ResponseHandler_ParseSendResponse+0x72>
        LOG_WARN("[ResponseHandler] SEND response: TIMEOUT");
 800122a:	490f      	ldr	r1, [pc, #60]	@ (8001268 <ResponseHandler_ParseSendResponse+0xa4>)
 800122c:	2002      	movs	r0, #2
 800122e:	f004 faa7 	bl	8005780 <LOGGER_SendFormatted>
        return RESPONSE_TIMEOUT;
 8001232:	2302      	movs	r3, #2
 8001234:	e005      	b.n	8001242 <ResponseHandler_ParseSendResponse+0x7e>
    }
    
    LOG_DEBUG("[ResponseHandler] Unknown SEND response: '%s'", response);
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	490c      	ldr	r1, [pc, #48]	@ (800126c <ResponseHandler_ParseSendResponse+0xa8>)
 800123a:	2000      	movs	r0, #0
 800123c:	f004 faa0 	bl	8005780 <LOGGER_SendFormatted>
    return RESPONSE_UNKNOWN;
 8001240:	2303      	movs	r3, #3
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	08019fdc 	.word	0x08019fdc
 8001250:	0801a010 	.word	0x0801a010
 8001254:	0801a040 	.word	0x0801a040
 8001258:	0801a058 	.word	0x0801a058
 800125c:	0801a08c 	.word	0x0801a08c
 8001260:	0801a0a8 	.word	0x0801a0a8
 8001264:	0801a0dc 	.word	0x0801a0dc
 8001268:	0801a0e4 	.word	0x0801a0e4
 800126c:	0801a110 	.word	0x0801a110

08001270 <ResponseHandler_IsTimeResponse>:

// 시간 응답 확인 함수
bool ResponseHandler_IsTimeResponse(const char* response)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
    if (response == NULL) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <ResponseHandler_IsTimeResponse+0x12>
        return false;
 800127e:	2300      	movs	r3, #0
 8001280:	e013      	b.n	80012aa <ResponseHandler_IsTimeResponse+0x3a>
    }
    
    return (strstr(response, "LTIME:") != NULL || strstr(response, "LTIME=") != NULL);
 8001282:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <ResponseHandler_IsTimeResponse+0x44>)
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f016 fd55 	bl	8017d34 <strstr>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d106      	bne.n	800129e <ResponseHandler_IsTimeResponse+0x2e>
 8001290:	4909      	ldr	r1, [pc, #36]	@ (80012b8 <ResponseHandler_IsTimeResponse+0x48>)
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f016 fd4e 	bl	8017d34 <strstr>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <ResponseHandler_IsTimeResponse+0x32>
 800129e:	2301      	movs	r3, #1
 80012a0:	e000      	b.n	80012a4 <ResponseHandler_IsTimeResponse+0x34>
 80012a2:	2300      	movs	r3, #0
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0801a140 	.word	0x0801a140
 80012b8:	0801a148 	.word	0x0801a148

080012bc <ConvertUTCToKST>:

// 한국 시간대(UTC+9) 보정 함수
static void ConvertUTCToKST(char* time_str) {
 80012bc:	b5b0      	push	{r4, r5, r7, lr}
 80012be:	b09a      	sub	sp, #104	@ 0x68
 80012c0:	af06      	add	r7, sp, #24
 80012c2:	6078      	str	r0, [r7, #4]
    int hour, min, sec, month, day, year;
    
    // "01h51m37s on 07/29/2025" 형식에서 시간 추출
    if (sscanf(time_str, "%dh%dm%ds on %d/%d/%d", 
 80012c4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80012c8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80012cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d0:	9303      	str	r3, [sp, #12]
 80012d2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	460b      	mov	r3, r1
 80012e6:	4936      	ldr	r1, [pc, #216]	@ (80013c0 <ConvertUTCToKST+0x104>)
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f016 fc4d 	bl	8017b88 <siscanf>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b06      	cmp	r3, #6
 80012f2:	d161      	bne.n	80013b8 <ConvertUTCToKST+0xfc>
               &hour, &min, &sec, &month, &day, &year) == 6) {
        
        // 한국 시간대로 보정 (UTC+9)
        hour += 9;
 80012f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f6:	3309      	adds	r3, #9
 80012f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        
        // 날짜 넘어가는 경우 처리
        if (hour >= 24) {
 80012fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012fc:	2b17      	cmp	r3, #23
 80012fe:	dd4a      	ble.n	8001396 <ConvertUTCToKST+0xda>
            hour -= 24;
 8001300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001302:	3b18      	subs	r3, #24
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
            day += 1;
 8001306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001308:	3301      	adds	r3, #1
 800130a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            
            // 월말 처리 (간단한 버전)
            int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800130c:	4b2d      	ldr	r3, [pc, #180]	@ (80013c4 <ConvertUTCToKST+0x108>)
 800130e:	f107 0408 	add.w	r4, r7, #8
 8001312:	461d      	mov	r5, r3
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001320:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0)) {
 8001324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d11c      	bne.n	8001368 <ConvertUTCToKST+0xac>
 800132e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001330:	4b25      	ldr	r3, [pc, #148]	@ (80013c8 <ConvertUTCToKST+0x10c>)
 8001332:	fb83 1302 	smull	r1, r3, r3, r2
 8001336:	1159      	asrs	r1, r3, #5
 8001338:	17d3      	asrs	r3, r2, #31
 800133a:	1acb      	subs	r3, r1, r3
 800133c:	2164      	movs	r1, #100	@ 0x64
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10d      	bne.n	8001364 <ConvertUTCToKST+0xa8>
 8001348:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800134a:	4b1f      	ldr	r3, [pc, #124]	@ (80013c8 <ConvertUTCToKST+0x10c>)
 800134c:	fb83 1302 	smull	r1, r3, r3, r2
 8001350:	11d9      	asrs	r1, r3, #7
 8001352:	17d3      	asrs	r3, r2, #31
 8001354:	1acb      	subs	r3, r1, r3
 8001356:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800135a:	fb01 f303 	mul.w	r3, r1, r3
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <ConvertUTCToKST+0xac>
                days_in_month[1] = 29; // 윤년
 8001364:	231d      	movs	r3, #29
 8001366:	60fb      	str	r3, [r7, #12]
            }
            
            if (day > days_in_month[month - 1]) {
 8001368:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800136a:	3b01      	subs	r3, #1
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	3350      	adds	r3, #80	@ 0x50
 8001370:	443b      	add	r3, r7
 8001372:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8001376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001378:	429a      	cmp	r2, r3
 800137a:	da0c      	bge.n	8001396 <ConvertUTCToKST+0xda>
                day = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                month += 1;
 8001380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001382:	3301      	adds	r3, #1
 8001384:	643b      	str	r3, [r7, #64]	@ 0x40
                if (month > 12) {
 8001386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001388:	2b0c      	cmp	r3, #12
 800138a:	dd04      	ble.n	8001396 <ConvertUTCToKST+0xda>
                    month = 1;
 800138c:	2301      	movs	r3, #1
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
                    year += 1;
 8001390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001392:	3301      	adds	r3, #1
 8001394:	63bb      	str	r3, [r7, #56]	@ 0x38
                }
            }
        }
        
        // 한국 시간으로 수정된 시간 문자열 재구성
        snprintf(time_str, 64, "%02dh%02dm%02ds on %02d/%02d/%d (KST)", 
 8001396:	6cfd      	ldr	r5, [r7, #76]	@ 0x4c
 8001398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800139a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800139c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800139e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80013a0:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80013a2:	9404      	str	r4, [sp, #16]
 80013a4:	9003      	str	r0, [sp, #12]
 80013a6:	9102      	str	r1, [sp, #8]
 80013a8:	9201      	str	r2, [sp, #4]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	462b      	mov	r3, r5
 80013ae:	4a07      	ldr	r2, [pc, #28]	@ (80013cc <ConvertUTCToKST+0x110>)
 80013b0:	2140      	movs	r1, #64	@ 0x40
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f016 fb90 	bl	8017ad8 <sniprintf>
                 hour, min, sec, month, day, year);
    }
}
 80013b8:	bf00      	nop
 80013ba:	3750      	adds	r7, #80	@ 0x50
 80013bc:	46bd      	mov	sp, r7
 80013be:	bdb0      	pop	{r4, r5, r7, pc}
 80013c0:	0801a150 	.word	0x0801a150
 80013c4:	0801a190 	.word	0x0801a190
 80013c8:	51eb851f 	.word	0x51eb851f
 80013cc:	0801a168 	.word	0x0801a168

080013d0 <ResponseHandler_ParseTimeResponse>:

// 시간 응답 파싱 및 저장 함수
void ResponseHandler_ParseTimeResponse(const char* response)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
    if (response == NULL || !ResponseHandler_IsTimeResponse(response)) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d05a      	beq.n	8001494 <ResponseHandler_ParseTimeResponse+0xc4>
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ff46 	bl	8001270 <ResponseHandler_IsTimeResponse>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d151      	bne.n	8001494 <ResponseHandler_ParseTimeResponse+0xc4>
        return;
    }
    
    LOG_DEBUG("[ResponseHandler] Parsing time response: '%s'", response);
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	492a      	ldr	r1, [pc, #168]	@ (800149c <ResponseHandler_ParseTimeResponse+0xcc>)
 80013f4:	2000      	movs	r0, #0
 80013f6:	f004 f9c3 	bl	8005780 <LOGGER_SendFormatted>
    
    // LTIME 응답에서 시간 정보 추출 (LTIME: 또는 LTIME= 형식 모두 지원)
    const char* time_start = strstr(response, "LTIME:");
 80013fa:	4929      	ldr	r1, [pc, #164]	@ (80014a0 <ResponseHandler_ParseTimeResponse+0xd0>)
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f016 fc99 	bl	8017d34 <strstr>
 8001402:	60f8      	str	r0, [r7, #12]
    if (time_start != NULL) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <ResponseHandler_ParseTimeResponse+0x42>
        // "LTIME: 14h25m30s on 01/29/2025" 형태에서 시간 부분 추출
        time_start += 6; // "LTIME:" 부분 건너뛰기
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3306      	adds	r3, #6
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	e00a      	b.n	8001428 <ResponseHandler_ParseTimeResponse+0x58>
    } else {
        time_start = strstr(response, "LTIME=");
 8001412:	4924      	ldr	r1, [pc, #144]	@ (80014a4 <ResponseHandler_ParseTimeResponse+0xd4>)
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f016 fc8d 	bl	8017d34 <strstr>
 800141a:	60f8      	str	r0, [r7, #12]
        if (time_start != NULL) {
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <ResponseHandler_ParseTimeResponse+0x58>
            // "AT+LTIME=00h00m28s on 01/01/19" 형태에서 시간 부분 추출
            time_start += 6; // "LTIME=" 부분 건너뛰기
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3306      	adds	r3, #6
 8001426:	60fb      	str	r3, [r7, #12]
        }
    }
    
    if (time_start != NULL) {
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d033      	beq.n	8001496 <ResponseHandler_ParseTimeResponse+0xc6>
        
        // 앞쪽 공백 제거
        while (*time_start == ' ') {
 800142e:	e002      	b.n	8001436 <ResponseHandler_ParseTimeResponse+0x66>
            time_start++;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	3301      	adds	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
        while (*time_start == ' ') {
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b20      	cmp	r3, #32
 800143c:	d0f8      	beq.n	8001430 <ResponseHandler_ParseTimeResponse+0x60>
        }
        
        // 전역 변수에 시간 정보 저장 (개행 문자 제거)
        strncpy(g_network_time, time_start, sizeof(g_network_time) - 1);
 800143e:	223f      	movs	r2, #63	@ 0x3f
 8001440:	68f9      	ldr	r1, [r7, #12]
 8001442:	4819      	ldr	r0, [pc, #100]	@ (80014a8 <ResponseHandler_ParseTimeResponse+0xd8>)
 8001444:	f016 fc63 	bl	8017d0e <strncpy>
        g_network_time[sizeof(g_network_time) - 1] = '\0';
 8001448:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <ResponseHandler_ParseTimeResponse+0xd8>)
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
        
        // 개행 문자 제거
        char* newline = strchr(g_network_time, '\r');
 8001450:	210d      	movs	r1, #13
 8001452:	4815      	ldr	r0, [pc, #84]	@ (80014a8 <ResponseHandler_ParseTimeResponse+0xd8>)
 8001454:	f016 fc4e 	bl	8017cf4 <strchr>
 8001458:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d002      	beq.n	8001466 <ResponseHandler_ParseTimeResponse+0x96>
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
        newline = strchr(g_network_time, '\n');
 8001466:	210a      	movs	r1, #10
 8001468:	480f      	ldr	r0, [pc, #60]	@ (80014a8 <ResponseHandler_ParseTimeResponse+0xd8>)
 800146a:	f016 fc43 	bl	8017cf4 <strchr>
 800146e:	60b8      	str	r0, [r7, #8]
        if (newline) *newline = '\0';
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d002      	beq.n	800147c <ResponseHandler_ParseTimeResponse+0xac>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	2200      	movs	r2, #0
 800147a:	701a      	strb	r2, [r3, #0]
        
        // 한국 시간대로 보정
        ConvertUTCToKST(g_network_time);
 800147c:	480a      	ldr	r0, [pc, #40]	@ (80014a8 <ResponseHandler_ParseTimeResponse+0xd8>)
 800147e:	f7ff ff1d 	bl	80012bc <ConvertUTCToKST>
        
        g_time_synchronized = true;
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <ResponseHandler_ParseTimeResponse+0xdc>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
        
        LOG_INFO("[LoRa] 🕐 Network time synchronized (KST): %s", g_network_time);
 8001488:	4a07      	ldr	r2, [pc, #28]	@ (80014a8 <ResponseHandler_ParseTimeResponse+0xd8>)
 800148a:	4909      	ldr	r1, [pc, #36]	@ (80014b0 <ResponseHandler_ParseTimeResponse+0xe0>)
 800148c:	2001      	movs	r0, #1
 800148e:	f004 f977 	bl	8005780 <LOGGER_SendFormatted>
 8001492:	e000      	b.n	8001496 <ResponseHandler_ParseTimeResponse+0xc6>
        return;
 8001494:	bf00      	nop
    }
}
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0801a1c0 	.word	0x0801a1c0
 80014a0:	0801a140 	.word	0x0801a140
 80014a4:	0801a148 	.word	0x0801a148
 80014a8:	2000023c 	.word	0x2000023c
 80014ac:	2000027c 	.word	0x2000027c
 80014b0:	0801a1f0 	.word	0x0801a1f0

080014b4 <ResponseHandler_GetNetworkTime>:

// 현재 저장된 네트워크 시간 반환
const char* ResponseHandler_GetNetworkTime(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
    if (g_time_synchronized) {
 80014b8:	4b05      	ldr	r3, [pc, #20]	@ (80014d0 <ResponseHandler_GetNetworkTime+0x1c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <ResponseHandler_GetNetworkTime+0x10>
        return g_network_time;
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <ResponseHandler_GetNetworkTime+0x20>)
 80014c2:	e000      	b.n	80014c6 <ResponseHandler_GetNetworkTime+0x12>
    }
    return NULL;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000027c 	.word	0x2000027c
 80014d4:	2000023c 	.word	0x2000023c

080014d8 <ResponseHandler_IsTimeSynchronized>:

// 시간 동기화 상태 확인
bool ResponseHandler_IsTimeSynchronized(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
    return g_time_synchronized;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <ResponseHandler_IsTimeSynchronized+0x14>)
 80014de:	781b      	ldrb	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000027c 	.word	0x2000027c

080014f0 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80014f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001564 <SCB_CleanInvalidateDCache+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014fe:	f3bf 8f4f 	dsb	sy
}
 8001502:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001504:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <SCB_CleanInvalidateDCache+0x74>)
 8001506:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800150a:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	0b5b      	lsrs	r3, r3, #13
 8001510:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001514:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	08db      	lsrs	r3, r3, #3
 800151a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	015a      	lsls	r2, r3, #5
 8001524:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8001528:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800152e:	490d      	ldr	r1, [pc, #52]	@ (8001564 <SCB_CleanInvalidateDCache+0x74>)
 8001530:	4313      	orrs	r3, r2
 8001532:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	1e5a      	subs	r2, r3, #1
 800153a:	60ba      	str	r2, [r7, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ef      	bne.n	8001520 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e5a      	subs	r2, r3, #1
 8001544:	60fa      	str	r2, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1e5      	bne.n	8001516 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800154a:	f3bf 8f4f 	dsb	sy
}
 800154e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001550:	f3bf 8f6f 	isb	sy
}
 8001554:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <_generate_log_filename>:
#endif

// 내부 함수 구현 - 함수 호출 순서에 맞게 배치
#ifdef STM32F746xx
static int _generate_log_filename(char* filename, size_t max_len)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 800156e:	af00      	add	r7, sp, #0
 8001570:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001574:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001578:	6018      	str	r0, [r3, #0]
 800157a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800157e:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001582:	6019      	str	r1, [r3, #0]
    // 8.3 형식 파일명 생성 - 기존 파일 확인하여 중복 방지
    static int file_counter = 0;  // 0부터 시작하여 첫 번째 호출에서 1로 설정
    
    // 첫 번째 호출에서만 기존 파일 확인
    if (file_counter == 0) {
 8001584:	4b48      	ldr	r3, [pc, #288]	@ (80016a8 <_generate_log_filename+0x140>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d14a      	bne.n	8001622 <_generate_log_filename+0xba>
        file_counter = 1;
 800158c:	4b46      	ldr	r3, [pc, #280]	@ (80016a8 <_generate_log_filename+0x140>)
 800158e:	2201      	movs	r2, #1
 8001590:	601a      	str	r2, [r3, #0]
        
        // 기존 파일들 확인하여 다음 번호 찾기
        for (int i = 1; i <= 9999; i++) {
 8001592:	2301      	movs	r3, #1
 8001594:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001598:	e034      	b.n	8001604 <_generate_log_filename+0x9c>
            char test_filename[256];
            FIL test_file;
            
            if (g_directory_available) {
 800159a:	4b44      	ldr	r3, [pc, #272]	@ (80016ac <_generate_log_filename+0x144>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <_generate_log_filename+0x4e>
                snprintf(test_filename, sizeof(test_filename), "lora_logs/LORA%04d.TXT", i);
 80015a2:	f107 0008 	add.w	r0, r7, #8
 80015a6:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015aa:	4a41      	ldr	r2, [pc, #260]	@ (80016b0 <_generate_log_filename+0x148>)
 80015ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b0:	f016 fa92 	bl	8017ad8 <sniprintf>
 80015b4:	e008      	b.n	80015c8 <_generate_log_filename+0x60>
            } else {
                snprintf(test_filename, sizeof(test_filename), "LORA%04d.TXT", i);
 80015b6:	f107 0008 	add.w	r0, r7, #8
 80015ba:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015be:	4a3d      	ldr	r2, [pc, #244]	@ (80016b4 <_generate_log_filename+0x14c>)
 80015c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c4:	f016 fa88 	bl	8017ad8 <sniprintf>
            }
            
            // 파일이 존재하는지 확인
            FRESULT test_result = f_open(&test_file, test_filename, FA_READ);
 80015c8:	f107 0108 	add.w	r1, r7, #8
 80015cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015d0:	2201      	movs	r2, #1
 80015d2:	4618      	mov	r0, r3
 80015d4:	f012 fb90 	bl	8013cf8 <f_open>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 3337 	strb.w	r3, [r7, #823]	@ 0x337
            if (test_result == FR_OK) {
 80015de:	f897 3337 	ldrb.w	r3, [r7, #823]	@ 0x337
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d115      	bne.n	8001612 <_generate_log_filename+0xaa>
                f_close(&test_file);
 80015e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015ea:	4618      	mov	r0, r3
 80015ec:	f012 ff02 	bl	80143f4 <f_close>
                file_counter = i + 1;  // 다음 번호로 설정
 80015f0:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015f4:	3301      	adds	r3, #1
 80015f6:	4a2c      	ldr	r2, [pc, #176]	@ (80016a8 <_generate_log_filename+0x140>)
 80015f8:	6013      	str	r3, [r2, #0]
        for (int i = 1; i <= 9999; i++) {
 80015fa:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001604:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001608:	f242 720f 	movw	r2, #9999	@ 0x270f
 800160c:	4293      	cmp	r3, r2
 800160e:	ddc4      	ble.n	800159a <_generate_log_filename+0x32>
 8001610:	e000      	b.n	8001614 <_generate_log_filename+0xac>
            } else {
                break;  // 파일이 없으면 현재 번호 사용
 8001612:	bf00      	nop
            }
        }
        
        LOG_DEBUG("[SDStorage] Auto-detected next log file number: %d", file_counter);
 8001614:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <_generate_log_filename+0x140>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4927      	ldr	r1, [pc, #156]	@ (80016b8 <_generate_log_filename+0x150>)
 800161c:	2000      	movs	r0, #0
 800161e:	f004 f8af 	bl	8005780 <LOGGER_SendFormatted>
    }
    
    // 디렉토리 사용 가능 여부에 따라 경로 결정
    int result;
    if (g_directory_available) {
 8001622:	4b22      	ldr	r3, [pc, #136]	@ (80016ac <_generate_log_filename+0x144>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d011      	beq.n	800164e <_generate_log_filename+0xe6>
        // lora_logs 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "lora_logs/LORA%04d.TXT", file_counter);
 800162a:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <_generate_log_filename+0x140>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001632:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 8001636:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800163a:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 800163e:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <_generate_log_filename+0x148>)
 8001640:	6809      	ldr	r1, [r1, #0]
 8001642:	6800      	ldr	r0, [r0, #0]
 8001644:	f016 fa48 	bl	8017ad8 <sniprintf>
 8001648:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 800164c:	e010      	b.n	8001670 <_generate_log_filename+0x108>
    } else {
        // 루트 디렉토리에 파일 생성 (TXT 형식)
        result = snprintf(filename, max_len, "LORA%04d.TXT", file_counter);
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <_generate_log_filename+0x140>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 8001656:	f5a2 7150 	sub.w	r1, r2, #832	@ 0x340
 800165a:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800165e:	f5a2 704f 	sub.w	r0, r2, #828	@ 0x33c
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <_generate_log_filename+0x14c>)
 8001664:	6809      	ldr	r1, [r1, #0]
 8001666:	6800      	ldr	r0, [r0, #0]
 8001668:	f016 fa36 	bl	8017ad8 <sniprintf>
 800166c:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
    }
    
    file_counter++;
 8001670:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <_generate_log_filename+0x140>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	4a0c      	ldr	r2, [pc, #48]	@ (80016a8 <_generate_log_filename+0x140>)
 8001678:	6013      	str	r3, [r2, #0]
    
    if (result < 0 || (size_t)result >= max_len) {
 800167a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800167e:	2b00      	cmp	r3, #0
 8001680:	db08      	blt.n	8001694 <_generate_log_filename+0x12c>
 8001682:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001686:	f507 7250 	add.w	r2, r7, #832	@ 0x340
 800168a:	f5a2 7250 	sub.w	r2, r2, #832	@ 0x340
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d802      	bhi.n	800169a <_generate_log_filename+0x132>
        return SDSTORAGE_ERROR;
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	e000      	b.n	800169c <_generate_log_filename+0x134>
    }
    
    return SDSTORAGE_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200005b8 	.word	0x200005b8
 80016ac:	20000384 	.word	0x20000384
 80016b0:	0801a220 	.word	0x0801a220
 80016b4:	0801a238 	.word	0x0801a238
 80016b8:	0801a248 	.word	0x0801a248

080016bc <_ensure_persistent_file_open>:

// 지속적 파일 핸들 관리 함수들
static void _ensure_persistent_file_open(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
    if (!g_file_is_open || strlen(g_current_log_file) == 0) {
 80016c2:	4b22      	ldr	r3, [pc, #136]	@ (800174c <_ensure_persistent_file_open+0x90>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f083 0301 	eor.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d103      	bne.n	80016d8 <_ensure_persistent_file_open+0x1c>
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <_ensure_persistent_file_open+0x94>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d135      	bne.n	8001744 <_ensure_persistent_file_open+0x88>
        // 파일이 열려있지 않거나 파일명이 없으면 새로 열기
        if (g_file_is_open) {
 80016d8:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <_ensure_persistent_file_open+0x90>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <_ensure_persistent_file_open+0x30>
            f_close(&g_persistent_log_file);
 80016e0:	481c      	ldr	r0, [pc, #112]	@ (8001754 <_ensure_persistent_file_open+0x98>)
 80016e2:	f012 fe87 	bl	80143f4 <f_close>
            g_file_is_open = false;
 80016e6:	4b19      	ldr	r3, [pc, #100]	@ (800174c <_ensure_persistent_file_open+0x90>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]
        }
        
        // 파일명 생성 (필요시)
        if (strlen(g_current_log_file) == 0) {
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <_ensure_persistent_file_open+0x94>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d104      	bne.n	80016fe <_ensure_persistent_file_open+0x42>
            _generate_log_filename(g_current_log_file, sizeof(g_current_log_file));
 80016f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f8:	4815      	ldr	r0, [pc, #84]	@ (8001750 <_ensure_persistent_file_open+0x94>)
 80016fa:	f7ff ff35 	bl	8001568 <_generate_log_filename>
        }
        
        // 파일 열기 (append 모드)
        FRESULT open_result = f_open(&g_persistent_log_file, g_current_log_file, FA_OPEN_APPEND | FA_WRITE);
 80016fe:	2232      	movs	r2, #50	@ 0x32
 8001700:	4913      	ldr	r1, [pc, #76]	@ (8001750 <_ensure_persistent_file_open+0x94>)
 8001702:	4814      	ldr	r0, [pc, #80]	@ (8001754 <_ensure_persistent_file_open+0x98>)
 8001704:	f012 faf8 	bl	8013cf8 <f_open>
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
        if (open_result != FR_OK) {
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d006      	beq.n	8001720 <_ensure_persistent_file_open+0x64>
            // 파일이 없으면 생성
            open_result = f_open(&g_persistent_log_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001712:	220a      	movs	r2, #10
 8001714:	490e      	ldr	r1, [pc, #56]	@ (8001750 <_ensure_persistent_file_open+0x94>)
 8001716:	480f      	ldr	r0, [pc, #60]	@ (8001754 <_ensure_persistent_file_open+0x98>)
 8001718:	f012 faee 	bl	8013cf8 <f_open>
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
        }
        
        if (open_result == FR_OK) {
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d108      	bne.n	8001738 <_ensure_persistent_file_open+0x7c>
            g_file_is_open = true;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <_ensure_persistent_file_open+0x90>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
            LOG_DEBUG("[SDStorage] Persistent file opened: %s", g_current_log_file);
 800172c:	4a08      	ldr	r2, [pc, #32]	@ (8001750 <_ensure_persistent_file_open+0x94>)
 800172e:	490a      	ldr	r1, [pc, #40]	@ (8001758 <_ensure_persistent_file_open+0x9c>)
 8001730:	2000      	movs	r0, #0
 8001732:	f004 f825 	bl	8005780 <LOGGER_SendFormatted>
        } else {
            LOG_ERROR("[SDStorage] Failed to open persistent file: %d", open_result);
        }
    }
}
 8001736:	e005      	b.n	8001744 <_ensure_persistent_file_open+0x88>
            LOG_ERROR("[SDStorage] Failed to open persistent file: %d", open_result);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	461a      	mov	r2, r3
 800173c:	4907      	ldr	r1, [pc, #28]	@ (800175c <_ensure_persistent_file_open+0xa0>)
 800173e:	2003      	movs	r0, #3
 8001740:	f004 f81e 	bl	8005780 <LOGGER_SendFormatted>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200005b4 	.word	0x200005b4
 8001750:	20000280 	.word	0x20000280
 8001754:	20000388 	.word	0x20000388
 8001758:	0801a27c 	.word	0x0801a27c
 800175c:	0801a2a4 	.word	0x0801a2a4

08001760 <_close_persistent_file>:

static void _close_persistent_file(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
    if (g_file_is_open) {
 8001764:	4b08      	ldr	r3, [pc, #32]	@ (8001788 <_close_persistent_file+0x28>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d00a      	beq.n	8001782 <_close_persistent_file+0x22>
        f_close(&g_persistent_log_file);
 800176c:	4807      	ldr	r0, [pc, #28]	@ (800178c <_close_persistent_file+0x2c>)
 800176e:	f012 fe41 	bl	80143f4 <f_close>
        g_file_is_open = false;
 8001772:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <_close_persistent_file+0x28>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[SDStorage] Persistent file closed: %s", g_current_log_file);
 8001778:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <_close_persistent_file+0x30>)
 800177a:	4906      	ldr	r1, [pc, #24]	@ (8001794 <_close_persistent_file+0x34>)
 800177c:	2000      	movs	r0, #0
 800177e:	f003 ffff 	bl	8005780 <LOGGER_SendFormatted>
    }
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200005b4 	.word	0x200005b4
 800178c:	20000388 	.word	0x20000388
 8001790:	20000280 	.word	0x20000280
 8001794:	0801a2d4 	.word	0x0801a2d4

08001798 <SDStorage_Init>:
static int _initialize_sd_hardware(void);
static int _mount_filesystem_with_retry(void);
// static uint32_t _get_current_timestamp(void); - unused function removed

int SDStorage_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
    LOG_INFO("[SDStorage] Starting SD card initialization...");
 800179e:	4927      	ldr	r1, [pc, #156]	@ (800183c <SDStorage_Init+0xa4>)
 80017a0:	2001      	movs	r0, #1
 80017a2:	f003 ffed 	bl	8005780 <LOGGER_SendFormatted>
    
    // 초기화 시 지속적 파일 닫기
    _close_persistent_file();
 80017a6:	f7ff ffdb 	bl	8001760 <_close_persistent_file>
    
    // 1. SD 하드웨어 초기화 및 상태 확인
    int hw_result = _initialize_sd_hardware();
 80017aa:	f000 fa57 	bl	8001c5c <_initialize_sd_hardware>
 80017ae:	60f8      	str	r0, [r7, #12]
    if (hw_result != SDSTORAGE_OK) {
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SDStorage_Init+0x22>
        return hw_result;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	e03b      	b.n	8001832 <SDStorage_Init+0x9a>
    }
    
    // 2. 파일시스템 마운트 (재시도 로직 포함)
    int mount_result = _mount_filesystem_with_retry();
 80017ba:	f000 fae5 	bl	8001d88 <_mount_filesystem_with_retry>
 80017be:	60b8      	str	r0, [r7, #8]
    if (mount_result != SDSTORAGE_OK) {
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <SDStorage_Init+0x32>
        return mount_result;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	e033      	b.n	8001832 <SDStorage_Init+0x9a>
    }
    
    LOG_INFO("[SDStorage] File system mount successful");
 80017ca:	491d      	ldr	r1, [pc, #116]	@ (8001840 <SDStorage_Init+0xa8>)
 80017cc:	2001      	movs	r0, #1
 80017ce:	f003 ffd7 	bl	8005780 <LOGGER_SendFormatted>
    
    // 3. 디렉토리 생성 시도
    LOG_INFO("[SDStorage] Creating log directory...");
 80017d2:	491c      	ldr	r1, [pc, #112]	@ (8001844 <SDStorage_Init+0xac>)
 80017d4:	2001      	movs	r0, #1
 80017d6:	f003 ffd3 	bl	8005780 <LOGGER_SendFormatted>
    int dir_result = _create_log_directory();
 80017da:	f000 f9dd 	bl	8001b98 <_create_log_directory>
 80017de:	6078      	str	r0, [r7, #4]
    g_directory_available = (dir_result == SDSTORAGE_OK);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <SDStorage_Init+0xb0>)
 80017ee:	701a      	strb	r2, [r3, #0]
    
    // 4. 최종 상태 설정
    g_sd_ready = true;
 80017f0:	4b16      	ldr	r3, [pc, #88]	@ (800184c <SDStorage_Init+0xb4>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	701a      	strb	r2, [r3, #0]
    
    // 기존 로그 파일명이 있으면 보존, 크기는 리셋하지 않음
    if (strlen(g_current_log_file) > 0) {
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <SDStorage_Init+0xb8>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <SDStorage_Init+0x76>
        LOG_INFO("[SDStorage] Preserving existing log file: %s (size: %d bytes)", 
 80017fe:	4b15      	ldr	r3, [pc, #84]	@ (8001854 <SDStorage_Init+0xbc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a13      	ldr	r2, [pc, #76]	@ (8001850 <SDStorage_Init+0xb8>)
 8001804:	4914      	ldr	r1, [pc, #80]	@ (8001858 <SDStorage_Init+0xc0>)
 8001806:	2001      	movs	r0, #1
 8001808:	f003 ffba 	bl	8005780 <LOGGER_SendFormatted>
 800180c:	e00c      	b.n	8001828 <SDStorage_Init+0x90>
                 g_current_log_file, g_current_log_size);
    } else {
        // 첫 초기화인 경우에만 크기와 파일명 초기화
        g_current_log_size = 0;
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <SDStorage_Init+0xbc>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
 8001814:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001818:	2100      	movs	r1, #0
 800181a:	480d      	ldr	r0, [pc, #52]	@ (8001850 <SDStorage_Init+0xb8>)
 800181c:	f016 fa62 	bl	8017ce4 <memset>
        LOG_INFO("[SDStorage] First initialization - log file will be created on first write");
 8001820:	490e      	ldr	r1, [pc, #56]	@ (800185c <SDStorage_Init+0xc4>)
 8001822:	2001      	movs	r0, #1
 8001824:	f003 ffac 	bl	8005780 <LOGGER_SendFormatted>
    }
    
    LOG_INFO("[SDStorage] Initialization completed successfully");
 8001828:	490d      	ldr	r1, [pc, #52]	@ (8001860 <SDStorage_Init+0xc8>)
 800182a:	2001      	movs	r0, #1
 800182c:	f003 ffa8 	bl	8005780 <LOGGER_SendFormatted>
    return SDSTORAGE_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	0801a2fc 	.word	0x0801a2fc
 8001840:	0801a32c 	.word	0x0801a32c
 8001844:	0801a358 	.word	0x0801a358
 8001848:	20000384 	.word	0x20000384
 800184c:	2000027d 	.word	0x2000027d
 8001850:	20000280 	.word	0x20000280
 8001854:	20000380 	.word	0x20000380
 8001858:	0801a380 	.word	0x0801a380
 800185c:	0801a3c0 	.word	0x0801a3c0
 8001860:	0801a40c 	.word	0x0801a40c

08001864 <SDStorage_WriteLog>:

int SDStorage_WriteLog(const void* data, size_t size)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 800186a:	af02      	add	r7, sp, #8
 800186c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001870:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001874:	6018      	str	r0, [r3, #0]
 8001876:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800187a:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800187e:	6019      	str	r1, [r3, #0]
    if (!g_sd_ready) {
 8001880:	4b63      	ldr	r3, [pc, #396]	@ (8001a10 <SDStorage_WriteLog+0x1ac>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	f083 0301 	eor.w	r3, r3, #1
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <SDStorage_WriteLog+0x30>
        return SDSTORAGE_NOT_READY;
 800188e:	f06f 0301 	mvn.w	r3, #1
 8001892:	e0b8      	b.n	8001a06 <SDStorage_WriteLog+0x1a2>
    }
    
    if (data == NULL || size == 0) {
 8001894:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001898:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <SDStorage_WriteLog+0x4c>
 80018a2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80018a6:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d102      	bne.n	80018b6 <SDStorage_WriteLog+0x52>
        return SDSTORAGE_INVALID_PARAM;
 80018b0:	f06f 0304 	mvn.w	r3, #4
 80018b4:	e0a7      	b.n	8001a06 <SDStorage_WriteLog+0x1a2>
    }
    
    // 새 로그 파일이 필요한 경우 생성 (파일 크기 체크는 일단 생략)
    if (strlen(g_current_log_file) == 0) {
 80018b6:	4b57      	ldr	r3, [pc, #348]	@ (8001a14 <SDStorage_WriteLog+0x1b0>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d107      	bne.n	80018ce <SDStorage_WriteLog+0x6a>
        if (SDStorage_CreateNewLogFile() != SDSTORAGE_OK) {
 80018be:	f000 f8c5 	bl	8001a4c <SDStorage_CreateNewLogFile>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d002      	beq.n	80018ce <SDStorage_WriteLog+0x6a>
            return SDSTORAGE_FILE_ERROR;
 80018c8:	f06f 0302 	mvn.w	r3, #2
 80018cc:	e09b      	b.n	8001a06 <SDStorage_WriteLog+0x1a2>
        }
    }

#ifdef STM32F746xx
    // 새로운 방식: 지속적 파일 핸들 사용 (한 번 열어두고 계속 쓰기)
    _ensure_persistent_file_open();
 80018ce:	f7ff fef5 	bl	80016bc <_ensure_persistent_file_open>
    
    if (!g_file_is_open) {
 80018d2:	4b51      	ldr	r3, [pc, #324]	@ (8001a18 <SDStorage_WriteLog+0x1b4>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <SDStorage_WriteLog+0x8a>
        LOG_ERROR("[SDStorage] Cannot open persistent file");
 80018e0:	494e      	ldr	r1, [pc, #312]	@ (8001a1c <SDStorage_WriteLog+0x1b8>)
 80018e2:	2003      	movs	r0, #3
 80018e4:	f003 ff4c 	bl	8005780 <LOGGER_SendFormatted>
        return SDSTORAGE_FILE_ERROR;
 80018e8:	f06f 0302 	mvn.w	r3, #2
 80018ec:	e08b      	b.n	8001a06 <SDStorage_WriteLog+0x1a2>
    }
    
    // 데이터 + 줄바꿈 추가하여 쓰기
    char write_buffer[LOGGER_WRITE_BUFFER_SIZE];
    if (size + 2 < sizeof(write_buffer)) {
 80018ee:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80018f2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3302      	adds	r3, #2
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018fe:	d277      	bcs.n	80019f0 <SDStorage_WriteLog+0x18c>
        // 원본 데이터 복사
        memcpy(write_buffer, data, size);
 8001900:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001904:	f5a3 6282 	sub.w	r2, r3, #1040	@ 0x410
 8001908:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800190c:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001910:	f107 000c 	add.w	r0, r7, #12
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	f016 faa5 	bl	8017e66 <memcpy>
        // 줄바꿈 추가
        write_buffer[size] = '\r';
 800191c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001920:	f2a3 4204 	subw	r2, r3, #1028	@ 0x404
 8001924:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001928:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	220d      	movs	r2, #13
 8001932:	701a      	strb	r2, [r3, #0]
        write_buffer[size + 1] = '\n';
 8001934:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001938:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	f507 6282 	add.w	r2, r7, #1040	@ 0x410
 8001944:	f2a2 4204 	subw	r2, r2, #1028	@ 0x404
 8001948:	210a      	movs	r1, #10
 800194a:	54d1      	strb	r1, [r2, r3]
        
        // 파일에 쓰기 (파일은 이미 열려있음)
        UINT bytes_written;
        FRESULT write_result = f_write(&g_persistent_log_file, write_buffer, size + 2, &bytes_written);
 800194c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001950:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	1c9a      	adds	r2, r3, #2
 8001958:	f107 0308 	add.w	r3, r7, #8
 800195c:	f107 010c 	add.w	r1, r7, #12
 8001960:	482f      	ldr	r0, [pc, #188]	@ (8001a20 <SDStorage_WriteLog+0x1bc>)
 8001962:	f012 fb54 	bl	801400e <f_write>
 8001966:	4603      	mov	r3, r0
 8001968:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
        
        if (write_result == FR_OK && bytes_written == size + 2) {
 800196c:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8001970:	2b00      	cmp	r3, #0
 8001972:	d125      	bne.n	80019c0 <SDStorage_WriteLog+0x15c>
 8001974:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001978:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	1c9a      	adds	r2, r3, #2
 8001980:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001984:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d118      	bne.n	80019c0 <SDStorage_WriteLog+0x15c>
            // 즉시 동기화 (파일은 열린 상태로 유지)
            f_sync(&g_persistent_log_file);
 800198e:	4824      	ldr	r0, [pc, #144]	@ (8001a20 <SDStorage_WriteLog+0x1bc>)
 8001990:	f012 fcb2 	bl	80142f8 <f_sync>
            g_current_log_size += bytes_written;
 8001994:	4b23      	ldr	r3, [pc, #140]	@ (8001a24 <SDStorage_WriteLog+0x1c0>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800199c:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a24 <SDStorage_WriteLog+0x1c0>)
 80019a6:	6013      	str	r3, [r2, #0]
            LOG_DEBUG("[SDStorage] Persistent write successful: %d bytes", bytes_written);
 80019a8:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019ac:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	491c      	ldr	r1, [pc, #112]	@ (8001a28 <SDStorage_WriteLog+0x1c4>)
 80019b6:	2000      	movs	r0, #0
 80019b8:	f003 fee2 	bl	8005780 <LOGGER_SendFormatted>
            return SDSTORAGE_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	e022      	b.n	8001a06 <SDStorage_WriteLog+0x1a2>
        } else {
            LOG_ERROR("[SDStorage] Persistent write failed: %d, written: %d/%d", write_result, bytes_written, size + 2);
 80019c0:	f897 240f 	ldrb.w	r2, [r7, #1039]	@ 0x40f
 80019c4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019c8:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 80019cc:	6819      	ldr	r1, [r3, #0]
 80019ce:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019d2:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3302      	adds	r3, #2
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	460b      	mov	r3, r1
 80019de:	4913      	ldr	r1, [pc, #76]	@ (8001a2c <SDStorage_WriteLog+0x1c8>)
 80019e0:	2003      	movs	r0, #3
 80019e2:	f003 fecd 	bl	8005780 <LOGGER_SendFormatted>
            // 쓰기 실패 시 파일 다시 열기 시도
            _close_persistent_file();
 80019e6:	f7ff febb 	bl	8001760 <_close_persistent_file>
            return SDSTORAGE_FILE_ERROR;
 80019ea:	f06f 0302 	mvn.w	r3, #2
 80019ee:	e00a      	b.n	8001a06 <SDStorage_WriteLog+0x1a2>
        }
    } else {
        LOG_ERROR("[SDStorage] Data too large for write buffer: %d bytes", size);
 80019f0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80019f4:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	490d      	ldr	r1, [pc, #52]	@ (8001a30 <SDStorage_WriteLog+0x1cc>)
 80019fc:	2003      	movs	r0, #3
 80019fe:	f003 febf 	bl	8005780 <LOGGER_SendFormatted>
        return SDSTORAGE_INVALID_PARAM;
 8001a02:	f06f 0304 	mvn.w	r3, #4
    // 실제 파일 쓰기 없이 성공으로 처리
#endif

    g_current_log_size += size;
    return SDSTORAGE_OK;
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	f507 6782 	add.w	r7, r7, #1040	@ 0x410
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	2000027d 	.word	0x2000027d
 8001a14:	20000280 	.word	0x20000280
 8001a18:	200005b4 	.word	0x200005b4
 8001a1c:	0801a440 	.word	0x0801a440
 8001a20:	20000388 	.word	0x20000388
 8001a24:	20000380 	.word	0x20000380
 8001a28:	0801a468 	.word	0x0801a468
 8001a2c:	0801a49c 	.word	0x0801a49c
 8001a30:	0801a4d4 	.word	0x0801a4d4

08001a34 <SDStorage_IsReady>:

bool SDStorage_IsReady(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
    return g_sd_ready;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <SDStorage_IsReady+0x14>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000027d 	.word	0x2000027d

08001a4c <SDStorage_CreateNewLogFile>:
        memset(g_current_log_file, 0, sizeof(g_current_log_file));
    }
}

int SDStorage_CreateNewLogFile(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8001a52:	af00      	add	r7, sp, #0
    if (!g_sd_ready) {
 8001a54:	4b43      	ldr	r3, [pc, #268]	@ (8001b64 <SDStorage_CreateNewLogFile+0x118>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	f083 0301 	eor.w	r3, r3, #1
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <SDStorage_CreateNewLogFile+0x1c>
        return SDSTORAGE_NOT_READY;
 8001a62:	f06f 0301 	mvn.w	r3, #1
 8001a66:	e077      	b.n	8001b58 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 전역 파일 객체 제거됨 - 별도 처리 불필요
    
    // 새 파일명 생성
    if (_generate_log_filename(g_current_log_file, sizeof(g_current_log_file)) != SDSTORAGE_OK) {
 8001a68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a6c:	483e      	ldr	r0, [pc, #248]	@ (8001b68 <SDStorage_CreateNewLogFile+0x11c>)
 8001a6e:	f7ff fd7b 	bl	8001568 <_generate_log_filename>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d002      	beq.n	8001a7e <SDStorage_CreateNewLogFile+0x32>
        return SDSTORAGE_ERROR;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7c:	e06c      	b.n	8001b58 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 테스트 (간단한 방식)
#ifdef STM32F746xx
    LOG_INFO("[SDStorage] Testing file creation: %s", g_current_log_file);
 8001a7e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b68 <SDStorage_CreateNewLogFile+0x11c>)
 8001a80:	493a      	ldr	r1, [pc, #232]	@ (8001b6c <SDStorage_CreateNewLogFile+0x120>)
 8001a82:	2001      	movs	r0, #1
 8001a84:	f003 fe7c 	bl	8005780 <LOGGER_SendFormatted>
    
    // 지역 변수로 파일 객체 생성
    FIL test_file;
    memset(&test_file, 0, sizeof(test_file));
 8001a88:	463b      	mov	r3, r7
 8001a8a:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8001a8e:	2100      	movs	r1, #0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f016 f927 	bl	8017ce4 <memset>
    
    // SD 카드 상태 재확인
    DSTATUS current_disk_status = disk_status(0);
 8001a96:	2000      	movs	r0, #0
 8001a98:	f010 fd20 	bl	80124dc <disk_status>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
    LOG_INFO("[SDStorage] Current disk status: 0x%02X", current_disk_status);
 8001aa2:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4931      	ldr	r1, [pc, #196]	@ (8001b70 <SDStorage_CreateNewLogFile+0x124>)
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f003 fe68 	bl	8005780 <LOGGER_SendFormatted>
    
    // 파일 생성 테스트
    FRESULT open_result = f_open(&test_file, g_current_log_file, FA_CREATE_ALWAYS | FA_WRITE);
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	220a      	movs	r2, #10
 8001ab4:	492c      	ldr	r1, [pc, #176]	@ (8001b68 <SDStorage_CreateNewLogFile+0x11c>)
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f012 f91e 	bl	8013cf8 <f_open>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e
    LOG_INFO("[SDStorage] f_open result: %d", open_result);
 8001ac2:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	492a      	ldr	r1, [pc, #168]	@ (8001b74 <SDStorage_CreateNewLogFile+0x128>)
 8001aca:	2001      	movs	r0, #1
 8001acc:	f003 fe58 	bl	8005780 <LOGGER_SendFormatted>
    
    if (open_result != FR_OK) {
 8001ad0:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d032      	beq.n	8001b3e <SDStorage_CreateNewLogFile+0xf2>
        LOG_ERROR("[SDStorage] f_open failed: %d", open_result);
 8001ad8:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001adc:	461a      	mov	r2, r3
 8001ade:	4926      	ldr	r1, [pc, #152]	@ (8001b78 <SDStorage_CreateNewLogFile+0x12c>)
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f003 fe4d 	bl	8005780 <LOGGER_SendFormatted>
        
        // 상세 에러 분석
        switch (open_result) {
 8001ae6:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001aea:	2b10      	cmp	r3, #16
 8001aec:	d006      	beq.n	8001afc <SDStorage_CreateNewLogFile+0xb0>
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	dc13      	bgt.n	8001b1a <SDStorage_CreateNewLogFile+0xce>
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d00c      	beq.n	8001b10 <SDStorage_CreateNewLogFile+0xc4>
 8001af6:	2b09      	cmp	r3, #9
 8001af8:	d005      	beq.n	8001b06 <SDStorage_CreateNewLogFile+0xba>
 8001afa:	e00e      	b.n	8001b1a <SDStorage_CreateNewLogFile+0xce>
            case 16: // FR_INVALID_OBJECT
                LOG_ERROR("[SDStorage] FR_INVALID_OBJECT - File object initialization issue");
 8001afc:	491f      	ldr	r1, [pc, #124]	@ (8001b7c <SDStorage_CreateNewLogFile+0x130>)
 8001afe:	2003      	movs	r0, #3
 8001b00:	f003 fe3e 	bl	8005780 <LOGGER_SendFormatted>
                break;
 8001b04:	e011      	b.n	8001b2a <SDStorage_CreateNewLogFile+0xde>
            case 9: // FR_WRITE_PROTECTED  
                LOG_ERROR("[SDStorage] FR_WRITE_PROTECTED - SD card is write protected");
 8001b06:	491e      	ldr	r1, [pc, #120]	@ (8001b80 <SDStorage_CreateNewLogFile+0x134>)
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f003 fe39 	bl	8005780 <LOGGER_SendFormatted>
                break;
 8001b0e:	e00c      	b.n	8001b2a <SDStorage_CreateNewLogFile+0xde>
            case 3: // FR_NOT_READY
                LOG_ERROR("[SDStorage] FR_NOT_READY - Disk not ready");
 8001b10:	491c      	ldr	r1, [pc, #112]	@ (8001b84 <SDStorage_CreateNewLogFile+0x138>)
 8001b12:	2003      	movs	r0, #3
 8001b14:	f003 fe34 	bl	8005780 <LOGGER_SendFormatted>
                break;
 8001b18:	e007      	b.n	8001b2a <SDStorage_CreateNewLogFile+0xde>
            default:
                LOG_ERROR("[SDStorage] Unknown f_open error: %d", open_result);
 8001b1a:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4919      	ldr	r1, [pc, #100]	@ (8001b88 <SDStorage_CreateNewLogFile+0x13c>)
 8001b22:	2003      	movs	r0, #3
 8001b24:	f003 fe2c 	bl	8005780 <LOGGER_SendFormatted>
                break;
 8001b28:	bf00      	nop
        }
        
        LOG_WARN("[SDStorage] Disabling SD logging due to file creation failure");
 8001b2a:	4918      	ldr	r1, [pc, #96]	@ (8001b8c <SDStorage_CreateNewLogFile+0x140>)
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	f003 fe27 	bl	8005780 <LOGGER_SendFormatted>
        g_sd_ready = false;  // SD 로깅 비활성화
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <SDStorage_CreateNewLogFile+0x118>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
        return SDSTORAGE_FILE_ERROR;
 8001b38:	f06f 0302 	mvn.w	r3, #2
 8001b3c:	e00c      	b.n	8001b58 <SDStorage_CreateNewLogFile+0x10c>
    }
    
    // 파일 생성 확인 후 즉시 닫기 (추적 등록 없이)
    f_close(&test_file);
 8001b3e:	463b      	mov	r3, r7
 8001b40:	4618      	mov	r0, r3
 8001b42:	f012 fc57 	bl	80143f4 <f_close>
    LOG_INFO("[SDStorage] File created and ready for logging: %s", g_current_log_file);
 8001b46:	4a08      	ldr	r2, [pc, #32]	@ (8001b68 <SDStorage_CreateNewLogFile+0x11c>)
 8001b48:	4911      	ldr	r1, [pc, #68]	@ (8001b90 <SDStorage_CreateNewLogFile+0x144>)
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f003 fe18 	bl	8005780 <LOGGER_SendFormatted>
#else
    // PC/테스트 환경: 파일 생성 시뮬레이션 (항상 성공)
    LOG_INFO("[SDStorage] Test environment - file creation simulated");
#endif
    
    g_current_log_size = 0;
 8001b50:	4b10      	ldr	r3, [pc, #64]	@ (8001b94 <SDStorage_CreateNewLogFile+0x148>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
    return SDSTORAGE_OK;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f507 770c 	add.w	r7, r7, #560	@ 0x230
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000027d 	.word	0x2000027d
 8001b68:	20000280 	.word	0x20000280
 8001b6c:	0801a50c 	.word	0x0801a50c
 8001b70:	0801a534 	.word	0x0801a534
 8001b74:	0801a55c 	.word	0x0801a55c
 8001b78:	0801a57c 	.word	0x0801a57c
 8001b7c:	0801a59c 	.word	0x0801a59c
 8001b80:	0801a5e0 	.word	0x0801a5e0
 8001b84:	0801a61c 	.word	0x0801a61c
 8001b88:	0801a648 	.word	0x0801a648
 8001b8c:	0801a670 	.word	0x0801a670
 8001b90:	0801a6b0 	.word	0x0801a6b0
 8001b94:	20000380 	.word	0x20000380

08001b98 <_create_log_directory>:
    return g_current_log_size;
}

// 내부 함수 구현
static int _create_log_directory(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    // FatFs가 이미 정상 동작하므로 HAL 테스트 불필요
    
    // f_mkdir 전에 볼륨 상태 재확인 (에러 6 방지)
    LOG_INFO("[SDStorage] Verifying volume state before f_mkdir...");
 8001b9e:	4924      	ldr	r1, [pc, #144]	@ (8001c30 <_create_log_directory+0x98>)
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	f003 fded 	bl	8005780 <LOGGER_SendFormatted>
    
    // 볼륨 재마운트 시도 (상태 안정화)
    FRESULT remount_result = f_mount(&SDFatFS, SDPath, 1);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4922      	ldr	r1, [pc, #136]	@ (8001c34 <_create_log_directory+0x9c>)
 8001baa:	4823      	ldr	r0, [pc, #140]	@ (8001c38 <_create_log_directory+0xa0>)
 8001bac:	f012 f860 	bl	8013c70 <f_mount>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71bb      	strb	r3, [r7, #6]
    LOG_INFO("[SDStorage] Volume re-mount result: %d", remount_result);
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4920      	ldr	r1, [pc, #128]	@ (8001c3c <_create_log_directory+0xa4>)
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f003 fde0 	bl	8005780 <LOGGER_SendFormatted>
    
    FRESULT mkdir_result = FR_NOT_ENABLED;  // 초기값 설정
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	71fb      	strb	r3, [r7, #7]
    
    if (remount_result == FR_OK) {
 8001bc4:	79bb      	ldrb	r3, [r7, #6]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10f      	bne.n	8001bea <_create_log_directory+0x52>
        LOG_INFO("[SDStorage] Volume ready - attempting f_mkdir...");
 8001bca:	491d      	ldr	r1, [pc, #116]	@ (8001c40 <_create_log_directory+0xa8>)
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f003 fdd7 	bl	8005780 <LOGGER_SendFormatted>
        mkdir_result = f_mkdir("lora_logs");
 8001bd2:	481c      	ldr	r0, [pc, #112]	@ (8001c44 <_create_log_directory+0xac>)
 8001bd4:	f012 fc2e 	bl	8014434 <f_mkdir>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] f_mkdir result: %d", mkdir_result);
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	461a      	mov	r2, r3
 8001be0:	4919      	ldr	r1, [pc, #100]	@ (8001c48 <_create_log_directory+0xb0>)
 8001be2:	2001      	movs	r0, #1
 8001be4:	f003 fdcc 	bl	8005780 <LOGGER_SendFormatted>
 8001be8:	e005      	b.n	8001bf6 <_create_log_directory+0x5e>
    } else {
        LOG_ERROR("[SDStorage] Volume re-mount failed: %d", remount_result);
 8001bea:	79bb      	ldrb	r3, [r7, #6]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4917      	ldr	r1, [pc, #92]	@ (8001c4c <_create_log_directory+0xb4>)
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f003 fdc5 	bl	8005780 <LOGGER_SendFormatted>
    }
    
    // FR_EXIST(9)는 이미 존재함을 의미하므로 성공으로 처리
    if (mkdir_result == FR_OK || mkdir_result == FR_EXIST) {
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <_create_log_directory+0x6a>
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d105      	bne.n	8001c0e <_create_log_directory+0x76>
        LOG_INFO("[SDStorage] Directory ready (created or already exists)");
 8001c02:	4913      	ldr	r1, [pc, #76]	@ (8001c50 <_create_log_directory+0xb8>)
 8001c04:	2001      	movs	r0, #1
 8001c06:	f003 fdbb 	bl	8005780 <LOGGER_SendFormatted>
        return SDSTORAGE_OK;  // 디렉토리 성공
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	e00b      	b.n	8001c26 <_create_log_directory+0x8e>
    } else {
        LOG_ERROR("[SDStorage] f_mkdir failed: %d - FatFs level problem", mkdir_result);
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4910      	ldr	r1, [pc, #64]	@ (8001c54 <_create_log_directory+0xbc>)
 8001c14:	2003      	movs	r0, #3
 8001c16:	f003 fdb3 	bl	8005780 <LOGGER_SendFormatted>
        LOG_INFO("[SDStorage] Will try direct file creation without directory");
 8001c1a:	490f      	ldr	r1, [pc, #60]	@ (8001c58 <_create_log_directory+0xc0>)
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f003 fdaf 	bl	8005780 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;  // 디렉토리 실패
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
#else
    // PC: mkdir 시뮬레이션 (테스트에서는 성공으로 가정)
    LOG_INFO("[SDStorage] Test environment - directory creation simulated");
    return SDSTORAGE_OK;
#endif
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	0801a6e4 	.word	0x0801a6e4
 8001c34:	20001800 	.word	0x20001800
 8001c38:	20001804 	.word	0x20001804
 8001c3c:	0801a71c 	.word	0x0801a71c
 8001c40:	0801a744 	.word	0x0801a744
 8001c44:	0801a778 	.word	0x0801a778
 8001c48:	0801a784 	.word	0x0801a784
 8001c4c:	0801a7a4 	.word	0x0801a7a4
 8001c50:	0801a7cc 	.word	0x0801a7cc
 8001c54:	0801a804 	.word	0x0801a804
 8001c58:	0801a83c 	.word	0x0801a83c

08001c5c <_initialize_sd_hardware>:

// SD 하드웨어 초기화 및 상태 확인
static int _initialize_sd_hardware(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
#ifdef STM32F746xx
    extern SD_HandleTypeDef hsd1;
    HAL_SD_CardStateTypeDef card_state = HAL_SD_GetCardState(&hsd1);
 8001c62:	483d      	ldr	r0, [pc, #244]	@ (8001d58 <_initialize_sd_hardware+0xfc>)
 8001c64:	f00b fdd6 	bl	800d814 <HAL_SD_GetCardState>
 8001c68:	60f8      	str	r0, [r7, #12]
    LOG_INFO("[SDStorage] Initial SD card state: %d", card_state);
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	493b      	ldr	r1, [pc, #236]	@ (8001d5c <_initialize_sd_hardware+0x100>)
 8001c6e:	2001      	movs	r0, #1
 8001c70:	f003 fd86 	bl	8005780 <LOGGER_SendFormatted>
    
    // SD 카드가 TRANSFER 상태가 될 때까지 대기
    int wait_count = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60bb      	str	r3, [r7, #8]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < SD_TRANSFER_WAIT_MAX_COUNT) {
 8001c78:	e010      	b.n	8001c9c <_initialize_sd_hardware+0x40>
        LOG_INFO("[SDStorage] Waiting for SD card TRANSFER state... (attempt %d)", wait_count + 1);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4937      	ldr	r1, [pc, #220]	@ (8001d60 <_initialize_sd_hardware+0x104>)
 8001c82:	2001      	movs	r0, #1
 8001c84:	f003 fd7c 	bl	8005780 <LOGGER_SendFormatted>
        HAL_Delay(SD_TRANSFER_CHECK_INTERVAL_MS);
 8001c88:	2064      	movs	r0, #100	@ 0x64
 8001c8a:	f004 fc2d 	bl	80064e8 <HAL_Delay>
        card_state = HAL_SD_GetCardState(&hsd1);
 8001c8e:	4832      	ldr	r0, [pc, #200]	@ (8001d58 <_initialize_sd_hardware+0xfc>)
 8001c90:	f00b fdc0 	bl	800d814 <HAL_SD_GetCardState>
 8001c94:	60f8      	str	r0, [r7, #12]
        wait_count++;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
    while (card_state != HAL_SD_CARD_TRANSFER && wait_count < SD_TRANSFER_WAIT_MAX_COUNT) {
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d002      	beq.n	8001ca8 <_initialize_sd_hardware+0x4c>
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b31      	cmp	r3, #49	@ 0x31
 8001ca6:	dde8      	ble.n	8001c7a <_initialize_sd_hardware+0x1e>
    }
    
    if (card_state == HAL_SD_CARD_TRANSFER) {
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d142      	bne.n	8001d34 <_initialize_sd_hardware+0xd8>
        LOG_INFO("[SDStorage] ✅ SD card reached TRANSFER state successfully");
 8001cae:	492d      	ldr	r1, [pc, #180]	@ (8001d64 <_initialize_sd_hardware+0x108>)
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f003 fd65 	bl	8005780 <LOGGER_SendFormatted>
        
        // SDMMC 에러 코드 상세 체크
        if (hsd1.ErrorCode != HAL_SD_ERROR_NONE) {
 8001cb6:	4b28      	ldr	r3, [pc, #160]	@ (8001d58 <_initialize_sd_hardware+0xfc>)
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01f      	beq.n	8001cfe <_initialize_sd_hardware+0xa2>
            LOG_WARN("[SDStorage] SDMMC ErrorCode detected: 0x%08X", hsd1.ErrorCode);
 8001cbe:	4b26      	ldr	r3, [pc, #152]	@ (8001d58 <_initialize_sd_hardware+0xfc>)
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4928      	ldr	r1, [pc, #160]	@ (8001d68 <_initialize_sd_hardware+0x10c>)
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f003 fd5a 	bl	8005780 <LOGGER_SendFormatted>
            
            if (hsd1.ErrorCode & SDMMC_ERROR_TX_UNDERRUN) {
 8001ccc:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <_initialize_sd_hardware+0xfc>)
 8001cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <_initialize_sd_hardware+0x84>
                LOG_WARN("[SDStorage] TX_UNDERRUN detected - clock may be too fast");
 8001cd8:	4924      	ldr	r1, [pc, #144]	@ (8001d6c <_initialize_sd_hardware+0x110>)
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f003 fd50 	bl	8005780 <LOGGER_SendFormatted>
            }
            if (hsd1.ErrorCode & SDMMC_ERROR_DATA_CRC_FAIL) {
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <_initialize_sd_hardware+0xfc>)
 8001ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <_initialize_sd_hardware+0x9c>
                LOG_WARN("[SDStorage] CRC_FAIL detected - cache issue possible");
 8001cec:	4920      	ldr	r1, [pc, #128]	@ (8001d70 <_initialize_sd_hardware+0x114>)
 8001cee:	2002      	movs	r0, #2
 8001cf0:	f003 fd46 	bl	8005780 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001cf4:	f7ff fbfc 	bl	80014f0 <SCB_CleanInvalidateDCache>
            }
            
            // 에러 코드 클리어
            hsd1.ErrorCode = HAL_SD_ERROR_NONE;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <_initialize_sd_hardware+0xfc>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        
        // disk_initialize 호출
        DSTATUS disk_status = disk_initialize(0);
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f010 fc06 	bl	8012510 <disk_initialize>
 8001d04:	4603      	mov	r3, r0
 8001d06:	71fb      	strb	r3, [r7, #7]
        LOG_INFO("[SDStorage] disk_initialize result: 0x%02X", disk_status);
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4919      	ldr	r1, [pc, #100]	@ (8001d74 <_initialize_sd_hardware+0x118>)
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f003 fd36 	bl	8005780 <LOGGER_SendFormatted>
        
        if (disk_status != 0) {
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00a      	beq.n	8001d30 <_initialize_sd_hardware+0xd4>
            LOG_ERROR("[SDStorage] disk_initialize failed - SD card not ready");
 8001d1a:	4917      	ldr	r1, [pc, #92]	@ (8001d78 <_initialize_sd_hardware+0x11c>)
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f003 fd2f 	bl	8005780 <LOGGER_SendFormatted>
            LOG_ERROR("[SDStorage] Possible causes: write-protected, bad card, or BSP/HAL conflict");
 8001d22:	4916      	ldr	r1, [pc, #88]	@ (8001d7c <_initialize_sd_hardware+0x120>)
 8001d24:	2003      	movs	r0, #3
 8001d26:	f003 fd2b 	bl	8005780 <LOGGER_SendFormatted>
            return SDSTORAGE_ERROR;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e00f      	b.n	8001d50 <_initialize_sd_hardware+0xf4>
        }
        
        return SDSTORAGE_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	e00d      	b.n	8001d50 <_initialize_sd_hardware+0xf4>
    } else {
        LOG_ERROR("[SDStorage] ❌ SD card failed to reach TRANSFER state (state: %d)", card_state);
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	4912      	ldr	r1, [pc, #72]	@ (8001d80 <_initialize_sd_hardware+0x124>)
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f003 fd21 	bl	8005780 <LOGGER_SendFormatted>
        LOG_ERROR("[SDStorage] SDMMC ErrorCode: 0x%08X", hsd1.ErrorCode);
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <_initialize_sd_hardware+0xfc>)
 8001d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d42:	461a      	mov	r2, r3
 8001d44:	490f      	ldr	r1, [pc, #60]	@ (8001d84 <_initialize_sd_hardware+0x128>)
 8001d46:	2003      	movs	r0, #3
 8001d48:	f003 fd1a 	bl	8005780 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
    }
#else
    return SDSTORAGE_OK;  // PC 환경에서는 성공으로 처리
#endif
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000ebc 	.word	0x20000ebc
 8001d5c:	0801a878 	.word	0x0801a878
 8001d60:	0801a8a0 	.word	0x0801a8a0
 8001d64:	0801a8e0 	.word	0x0801a8e0
 8001d68:	0801a91c 	.word	0x0801a91c
 8001d6c:	0801a94c 	.word	0x0801a94c
 8001d70:	0801a988 	.word	0x0801a988
 8001d74:	0801a9c0 	.word	0x0801a9c0
 8001d78:	0801a9ec 	.word	0x0801a9ec
 8001d7c:	0801aa24 	.word	0x0801aa24
 8001d80:	0801aa70 	.word	0x0801aa70
 8001d84:	0801aab4 	.word	0x0801aab4

08001d88 <_mount_filesystem_with_retry>:

// 파일시스템 마운트 (재시도 로직 포함)
static int _mount_filesystem_with_retry(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8
#ifdef STM32F746xx
    // SD 카드 안정화 대기
    LOG_INFO("[SDStorage] Waiting for SD card stabilization (%dms)...", SD_CARD_STABILIZE_DELAY_MS);
 8001d8e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001d92:	4961      	ldr	r1, [pc, #388]	@ (8001f18 <_mount_filesystem_with_retry+0x190>)
 8001d94:	2001      	movs	r0, #1
 8001d96:	f003 fcf3 	bl	8005780 <LOGGER_SendFormatted>
    HAL_Delay(SD_CARD_STABILIZE_DELAY_MS);
 8001d9a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d9e:	f004 fba3 	bl	80064e8 <HAL_Delay>
    
    // f_mount 여러 번 재시도
    LOG_INFO("[SDStorage] Attempting f_mount with retry logic...");
 8001da2:	495e      	ldr	r1, [pc, #376]	@ (8001f1c <_mount_filesystem_with_retry+0x194>)
 8001da4:	2001      	movs	r0, #1
 8001da6:	f003 fceb 	bl	8005780 <LOGGER_SendFormatted>
    FRESULT mount_result = FR_DISK_ERR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
    
    for (int retry = 0; retry < SD_MOUNT_RETRY_COUNT; retry++) {
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	e037      	b.n	8001e24 <_mount_filesystem_with_retry+0x9c>
        LOG_INFO("[SDStorage] f_mount attempt %d/%d...", retry + 1, SD_MOUNT_RETRY_COUNT);
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	2303      	movs	r3, #3
 8001dba:	4959      	ldr	r1, [pc, #356]	@ (8001f20 <_mount_filesystem_with_retry+0x198>)
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	f003 fcdf 	bl	8005780 <LOGGER_SendFormatted>
        mount_result = f_mount(&SDFatFS, SDPath, 1);  // 즉시 마운트
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4957      	ldr	r1, [pc, #348]	@ (8001f24 <_mount_filesystem_with_retry+0x19c>)
 8001dc6:	4858      	ldr	r0, [pc, #352]	@ (8001f28 <_mount_filesystem_with_retry+0x1a0>)
 8001dc8:	f011 ff52 	bl	8013c70 <f_mount>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	73fb      	strb	r3, [r7, #15]
        LOG_INFO("[SDStorage] f_mount result: %d", mount_result);
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4955      	ldr	r1, [pc, #340]	@ (8001f2c <_mount_filesystem_with_retry+0x1a4>)
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f003 fcd2 	bl	8005780 <LOGGER_SendFormatted>
        
        if (mount_result == FR_OK) {
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d108      	bne.n	8001df4 <_mount_filesystem_with_retry+0x6c>
            LOG_INFO("[SDStorage] ✅ f_mount successful on attempt %d", retry + 1);
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	461a      	mov	r2, r3
 8001de8:	4951      	ldr	r1, [pc, #324]	@ (8001f30 <_mount_filesystem_with_retry+0x1a8>)
 8001dea:	2001      	movs	r0, #1
 8001dec:	f003 fcc8 	bl	8005780 <LOGGER_SendFormatted>
            return SDSTORAGE_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e08d      	b.n	8001f10 <_mount_filesystem_with_retry+0x188>
        } else {
            LOG_WARN("[SDStorage] f_mount failed on attempt %d, retrying in %dms...", retry + 1, SD_MOUNT_RETRY_DELAY_MS);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	1c5a      	adds	r2, r3, #1
 8001df8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dfc:	494d      	ldr	r1, [pc, #308]	@ (8001f34 <_mount_filesystem_with_retry+0x1ac>)
 8001dfe:	2002      	movs	r0, #2
 8001e00:	f003 fcbe 	bl	8005780 <LOGGER_SendFormatted>
            if (retry < SD_MOUNT_RETRY_COUNT - 1) {  // 마지막 시도가 아니면 대기
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	dc09      	bgt.n	8001e1e <_mount_filesystem_with_retry+0x96>
                // STM32F7 D-Cache 클리어
                LOG_INFO("[SDStorage] Clearing D-Cache for STM32F7 compatibility...");
 8001e0a:	494b      	ldr	r1, [pc, #300]	@ (8001f38 <_mount_filesystem_with_retry+0x1b0>)
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	f003 fcb7 	bl	8005780 <LOGGER_SendFormatted>
                SCB_CleanInvalidateDCache();
 8001e12:	f7ff fb6d 	bl	80014f0 <SCB_CleanInvalidateDCache>
                HAL_Delay(SD_MOUNT_RETRY_DELAY_MS);
 8001e16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e1a:	f004 fb65 	bl	80064e8 <HAL_Delay>
    for (int retry = 0; retry < SD_MOUNT_RETRY_COUNT; retry++) {
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	ddc4      	ble.n	8001db4 <_mount_filesystem_with_retry+0x2c>
            }
        }
    }
    
    // 모든 재시도 실패 시 추가 복구 시도
    if (mount_result != FR_OK) {
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d06e      	beq.n	8001f0e <_mount_filesystem_with_retry+0x186>
        LOG_WARN("[SDStorage] f_mount failed with result: %d", mount_result);
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4941      	ldr	r1, [pc, #260]	@ (8001f3c <_mount_filesystem_with_retry+0x1b4>)
 8001e36:	2002      	movs	r0, #2
 8001e38:	f003 fca2 	bl	8005780 <LOGGER_SendFormatted>
        
        if (mount_result == FR_DISK_ERR) {
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d119      	bne.n	8001e76 <_mount_filesystem_with_retry+0xee>
            LOG_WARN("[SDStorage] FR_DISK_ERR detected - trying deferred mount...");
 8001e42:	493f      	ldr	r1, [pc, #252]	@ (8001f40 <_mount_filesystem_with_retry+0x1b8>)
 8001e44:	2002      	movs	r0, #2
 8001e46:	f003 fc9b 	bl	8005780 <LOGGER_SendFormatted>
            mount_result = f_mount(&SDFatFS, SDPath, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4935      	ldr	r1, [pc, #212]	@ (8001f24 <_mount_filesystem_with_retry+0x19c>)
 8001e4e:	4836      	ldr	r0, [pc, #216]	@ (8001f28 <_mount_filesystem_with_retry+0x1a0>)
 8001e50:	f011 ff0e 	bl	8013c70 <f_mount>
 8001e54:	4603      	mov	r3, r0
 8001e56:	73fb      	strb	r3, [r7, #15]
            LOG_INFO("[SDStorage] Deferred mount result: %d", mount_result);
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4939      	ldr	r1, [pc, #228]	@ (8001f44 <_mount_filesystem_with_retry+0x1bc>)
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f003 fc8e 	bl	8005780 <LOGGER_SendFormatted>
            
            if (mount_result == FR_OK) {
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d14a      	bne.n	8001f00 <_mount_filesystem_with_retry+0x178>
                LOG_INFO("[SDStorage] Deferred mount successful!");
 8001e6a:	4937      	ldr	r1, [pc, #220]	@ (8001f48 <_mount_filesystem_with_retry+0x1c0>)
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	f003 fc87 	bl	8005780 <LOGGER_SendFormatted>
                return SDSTORAGE_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e04c      	b.n	8001f10 <_mount_filesystem_with_retry+0x188>
            }
        }
        else if (mount_result == FR_NOT_READY || mount_result == FR_NO_FILESYSTEM) {
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d002      	beq.n	8001e82 <_mount_filesystem_with_retry+0xfa>
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	2b0d      	cmp	r3, #13
 8001e80:	d13e      	bne.n	8001f00 <_mount_filesystem_with_retry+0x178>
            // 파일시스템 생성 시도
            static BYTE work[_MAX_SS];
            LOG_INFO("[SDStorage] Attempting to create filesystem with f_mkfs...");
 8001e82:	4932      	ldr	r1, [pc, #200]	@ (8001f4c <_mount_filesystem_with_retry+0x1c4>)
 8001e84:	2001      	movs	r0, #1
 8001e86:	f003 fc7b 	bl	8005780 <LOGGER_SendFormatted>
            FRESULT mkfs_result = f_mkfs(SDPath, FM_ANY, 0, work, sizeof(work));
 8001e8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <_mount_filesystem_with_retry+0x1c8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	2107      	movs	r1, #7
 8001e96:	4823      	ldr	r0, [pc, #140]	@ (8001f24 <_mount_filesystem_with_retry+0x19c>)
 8001e98:	f012 fbd4 	bl	8014644 <f_mkfs>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
            LOG_INFO("[SDStorage] f_mkfs(FM_ANY) result: %d", mkfs_result);
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	492b      	ldr	r1, [pc, #172]	@ (8001f54 <_mount_filesystem_with_retry+0x1cc>)
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f003 fc6a 	bl	8005780 <LOGGER_SendFormatted>
            
            if (mkfs_result != FR_OK) {
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d011      	beq.n	8001ed6 <_mount_filesystem_with_retry+0x14e>
                mkfs_result = f_mkfs(SDPath, FM_FAT32, 4096, work, sizeof(work));
 8001eb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	4b25      	ldr	r3, [pc, #148]	@ (8001f50 <_mount_filesystem_with_retry+0x1c8>)
 8001eba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4818      	ldr	r0, [pc, #96]	@ (8001f24 <_mount_filesystem_with_retry+0x19c>)
 8001ec2:	f012 fbbf 	bl	8014644 <f_mkfs>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
                LOG_INFO("[SDStorage] f_mkfs(FM_FAT32) result: %d", mkfs_result);
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4922      	ldr	r1, [pc, #136]	@ (8001f58 <_mount_filesystem_with_retry+0x1d0>)
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f003 fc55 	bl	8005780 <LOGGER_SendFormatted>
            }
            
            if (mkfs_result == FR_OK) {
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d111      	bne.n	8001f00 <_mount_filesystem_with_retry+0x178>
                // 파일시스템 생성 후 재마운트
                mount_result = f_mount(&SDFatFS, SDPath, 1);
 8001edc:	2201      	movs	r2, #1
 8001ede:	4911      	ldr	r1, [pc, #68]	@ (8001f24 <_mount_filesystem_with_retry+0x19c>)
 8001ee0:	4811      	ldr	r0, [pc, #68]	@ (8001f28 <_mount_filesystem_with_retry+0x1a0>)
 8001ee2:	f011 fec5 	bl	8013c70 <f_mount>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	73fb      	strb	r3, [r7, #15]
                LOG_INFO("[SDStorage] Re-mount after mkfs result: %d", mount_result);
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	461a      	mov	r2, r3
 8001eee:	491b      	ldr	r1, [pc, #108]	@ (8001f5c <_mount_filesystem_with_retry+0x1d4>)
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f003 fc45 	bl	8005780 <LOGGER_SendFormatted>
                
                if (mount_result == FR_OK) {
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <_mount_filesystem_with_retry+0x178>
                    return SDSTORAGE_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	e007      	b.n	8001f10 <_mount_filesystem_with_retry+0x188>
                }
            }
        }
        
        LOG_ERROR("[SDStorage] All mount attempts failed");
 8001f00:	4917      	ldr	r1, [pc, #92]	@ (8001f60 <_mount_filesystem_with_retry+0x1d8>)
 8001f02:	2003      	movs	r0, #3
 8001f04:	f003 fc3c 	bl	8005780 <LOGGER_SendFormatted>
        return SDSTORAGE_ERROR;
 8001f08:	f04f 33ff 	mov.w	r3, #4294967295
 8001f0c:	e000      	b.n	8001f10 <_mount_filesystem_with_retry+0x188>
    }
    
    return SDSTORAGE_OK;
 8001f0e:	2300      	movs	r3, #0
#else
    return SDSTORAGE_OK;  // PC 환경에서는 성공으로 처리
#endif
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	0801aad8 	.word	0x0801aad8
 8001f1c:	0801ab10 	.word	0x0801ab10
 8001f20:	0801ab44 	.word	0x0801ab44
 8001f24:	20001800 	.word	0x20001800
 8001f28:	20001804 	.word	0x20001804
 8001f2c:	0801ab6c 	.word	0x0801ab6c
 8001f30:	0801ab8c 	.word	0x0801ab8c
 8001f34:	0801abc0 	.word	0x0801abc0
 8001f38:	0801ac00 	.word	0x0801ac00
 8001f3c:	0801ac3c 	.word	0x0801ac3c
 8001f40:	0801ac68 	.word	0x0801ac68
 8001f44:	0801aca4 	.word	0x0801aca4
 8001f48:	0801accc 	.word	0x0801accc
 8001f4c:	0801acf4 	.word	0x0801acf4
 8001f50:	200005bc 	.word	0x200005bc
 8001f54:	0801ad30 	.word	0x0801ad30
 8001f58:	0801ad58 	.word	0x0801ad58
 8001f5c:	0801ad80 	.word	0x0801ad80
 8001f60:	0801adac 	.word	0x0801adac

08001f64 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4a06      	ldr	r2, [pc, #24]	@ (8001fc8 <vApplicationGetIdleTaskMemory+0x30>)
 8001fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	200007bc 	.word	0x200007bc
 8001fc8:	20000814 	.word	0x20000814

08001fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fcc:	b5b0      	push	{r4, r5, r7, lr}
 8001fce:	b09a      	sub	sp, #104	@ 0x68
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // 리셋 카운터 추가
  static uint32_t reset_count = 0;
  reset_count++;
 8001fd2:	4b96      	ldr	r3, [pc, #600]	@ (800222c <main+0x260>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	4a94      	ldr	r2, [pc, #592]	@ (800222c <main+0x260>)
 8001fda:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fdc:	f004 fa57 	bl	800648e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe0:	f000 f966 	bl	80022b0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001fe4:	f000 f9d6 	bl	8002394 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe8:	f001 f9a0 	bl	800332c <MX_GPIO_Init>
  MX_DMA_Init();  // DMA는 UART보다 먼저 초기화
 8001fec:	f002 f890 	bl	8004110 <MX_DMA_Init>
  MX_USART6_DMA_Init();  // USART6 DMA 초기화 (UART보다 먼저)
 8001ff0:	f002 f8b4 	bl	800415c <MX_USART6_DMA_Init>
  MX_ADC3_Init();
 8001ff4:	f000 fa00 	bl	80023f8 <MX_ADC3_Init>
  MX_CRC_Init();
 8001ff8:	f000 fa50 	bl	800249c <MX_CRC_Init>
  MX_DCMI_Init();
 8001ffc:	f000 fa70 	bl	80024e0 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8002000:	f000 faa2 	bl	8002548 <MX_DMA2D_Init>
  MX_ETH_Init();
 8002004:	f000 fad2 	bl	80025ac <MX_ETH_Init>
  MX_FMC_Init();
 8002008:	f001 f940 	bl	800328c <MX_FMC_Init>
  MX_I2C1_Init();
 800200c:	f000 fb1c 	bl	8002648 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002010:	f000 fb5a 	bl	80026c8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002014:	f000 fb98 	bl	8002748 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8002018:	f000 fc18 	bl	800284c <MX_QUADSPI_Init>
  MX_RTC_Init();
 800201c:	f000 fc42 	bl	80028a4 <MX_RTC_Init>
  MX_SAI2_Init();
 8002020:	f000 fce4 	bl	80029ec <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 8002024:	f000 fd8a 	bl	8002b3c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8002028:	f000 fdb6 	bl	8002b98 <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 800202c:	f000 fde4 	bl	8002bf8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002030:	f000 fe20 	bl	8002c74 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002034:	f000 feca 	bl	8002dcc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002038:	f000 ff3e 	bl	8002eb8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800203c:	f000 ffb4 	bl	8002fa8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002040:	f001 f82a 	bl	8003098 <MX_TIM8_Init>
  MX_TIM12_Init();
 8002044:	f001 f87c 	bl	8003140 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 8002048:	f001 f8c0 	bl	80031cc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800204c:	f001 f8ee 	bl	800322c <MX_USART6_UART_Init>
  
  // UART 초기화 후 DMA 핸들 다시 연결 (HAL_UART_Init에서 리셋될 수 있음)
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8002050:	4b77      	ldr	r3, [pc, #476]	@ (8002230 <main+0x264>)
 8002052:	4a78      	ldr	r2, [pc, #480]	@ (8002234 <main+0x268>)
 8002054:	675a      	str	r2, [r3, #116]	@ 0x74
 8002056:	4b77      	ldr	r3, [pc, #476]	@ (8002234 <main+0x268>)
 8002058:	4a75      	ldr	r2, [pc, #468]	@ (8002230 <main+0x264>)
 800205a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  // UART IDLE 인터럽트 활성화 (DMA 기반 수신을 위해)
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800205c:	4b74      	ldr	r3, [pc, #464]	@ (8002230 <main+0x264>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	4b73      	ldr	r3, [pc, #460]	@ (8002230 <main+0x264>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f042 0210 	orr.w	r2, r2, #16
 800206a:	601a      	str	r2, [r3, #0]
  MX_FATFS_Init();
 800206c:	f00f fe3e 	bl	8011cec <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  
  // Logger 초기화 (터미널 출력만 사용)
  LOGGER_Connect("STM32", 0);
 8002070:	2100      	movs	r1, #0
 8002072:	4871      	ldr	r0, [pc, #452]	@ (8002238 <main+0x26c>)
 8002074:	f003 faf8 	bl	8005668 <LOGGER_Connect>
  
  // 리셋 원인 확인
  LOG_INFO("=== SYSTEM START (Reset #%lu) ===", reset_count);
 8002078:	4b6c      	ldr	r3, [pc, #432]	@ (800222c <main+0x260>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	461a      	mov	r2, r3
 800207e:	496f      	ldr	r1, [pc, #444]	@ (800223c <main+0x270>)
 8002080:	2001      	movs	r0, #1
 8002082:	f003 fb7d 	bl	8005780 <LOGGER_SendFormatted>
  
  // RCC 리셋 플래그 확인
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST)) LOG_WARN("Reset: BOR (Brown-out)");
 8002086:	4b6e      	ldr	r3, [pc, #440]	@ (8002240 <main+0x274>)
 8002088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800208a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <main+0xce>
 8002092:	496c      	ldr	r1, [pc, #432]	@ (8002244 <main+0x278>)
 8002094:	2002      	movs	r0, #2
 8002096:	f003 fb73 	bl	8005780 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST)) LOG_WARN("Reset: PIN (External)");
 800209a:	4b69      	ldr	r3, [pc, #420]	@ (8002240 <main+0x274>)
 800209c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800209e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <main+0xe2>
 80020a6:	4968      	ldr	r1, [pc, #416]	@ (8002248 <main+0x27c>)
 80020a8:	2002      	movs	r0, #2
 80020aa:	f003 fb69 	bl	8005780 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST)) LOG_WARN("Reset: POR (Power-on)");
 80020ae:	4b64      	ldr	r3, [pc, #400]	@ (8002240 <main+0x274>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <main+0xf6>
 80020ba:	4964      	ldr	r1, [pc, #400]	@ (800224c <main+0x280>)
 80020bc:	2002      	movs	r0, #2
 80020be:	f003 fb5f 	bl	8005780 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST)) LOG_WARN("Reset: SOFTWARE");
 80020c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002240 <main+0x274>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <main+0x10a>
 80020ce:	4960      	ldr	r1, [pc, #384]	@ (8002250 <main+0x284>)
 80020d0:	2002      	movs	r0, #2
 80020d2:	f003 fb55 	bl	8005780 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST)) LOG_WARN("Reset: IWDG (Watchdog)");
 80020d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002240 <main+0x274>)
 80020d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <main+0x11e>
 80020e2:	495c      	ldr	r1, [pc, #368]	@ (8002254 <main+0x288>)
 80020e4:	2002      	movs	r0, #2
 80020e6:	f003 fb4b 	bl	8005780 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST)) LOG_WARN("Reset: WWDG (Window Watchdog)");
 80020ea:	4b55      	ldr	r3, [pc, #340]	@ (8002240 <main+0x274>)
 80020ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <main+0x132>
 80020f6:	4958      	ldr	r1, [pc, #352]	@ (8002258 <main+0x28c>)
 80020f8:	2002      	movs	r0, #2
 80020fa:	f003 fb41 	bl	8005780 <LOGGER_SendFormatted>
  if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST)) LOG_WARN("Reset: LPWR (Low Power)");
 80020fe:	4b50      	ldr	r3, [pc, #320]	@ (8002240 <main+0x274>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002102:	2b00      	cmp	r3, #0
 8002104:	da03      	bge.n	800210e <main+0x142>
 8002106:	4955      	ldr	r1, [pc, #340]	@ (800225c <main+0x290>)
 8002108:	2002      	movs	r0, #2
 800210a:	f003 fb39 	bl	8005780 <LOGGER_SendFormatted>
  
  // 플래그 클리어
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800210e:	4b4c      	ldr	r3, [pc, #304]	@ (8002240 <main+0x274>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002112:	4a4b      	ldr	r2, [pc, #300]	@ (8002240 <main+0x274>)
 8002114:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002118:	6753      	str	r3, [r2, #116]	@ 0x74
  
  // ===== 하드웨어 초기화만 main()에서 수행 =====
  
  // SD카드 초기화는 FreeRTOS 태스크에서 수행 (커널 시작 후)
  LOG_INFO("🔄 SD card initialization will be performed in FreeRTOS task");
 800211a:	4951      	ldr	r1, [pc, #324]	@ (8002260 <main+0x294>)
 800211c:	2001      	movs	r0, #1
 800211e:	f003 fb2f 	bl	8005780 <LOGGER_SendFormatted>
  g_sd_initialization_result = -1;  // 초기화 안됨 상태
 8002122:	4b50      	ldr	r3, [pc, #320]	@ (8002264 <main+0x298>)
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	601a      	str	r2, [r3, #0]
  
  // UART6 DMA 초기화 건너뛰기 (이미 main 초기화에서 완료됨)
  LOG_INFO("📤 UART DMA already initialized in main() - skipping");
 800212a:	494f      	ldr	r1, [pc, #316]	@ (8002268 <main+0x29c>)
 800212c:	2001      	movs	r0, #1
 800212e:	f003 fb27 	bl	8005780 <LOGGER_SendFormatted>
  
  // IDLE 인터럽트만 활성화 (메시지 끝 감지용)
  LOG_INFO("📤 Enabling UART IDLE interrupt...");
 8002132:	494e      	ldr	r1, [pc, #312]	@ (800226c <main+0x2a0>)
 8002134:	2001      	movs	r0, #1
 8002136:	f003 fb23 	bl	8005780 <LOGGER_SendFormatted>
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800213a:	4b3d      	ldr	r3, [pc, #244]	@ (8002230 <main+0x264>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b3b      	ldr	r3, [pc, #236]	@ (8002230 <main+0x264>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0210 	orr.w	r2, r2, #16
 8002148:	601a      	str	r2, [r3, #0]
  LOG_INFO("✅ UART setup completed");
 800214a:	4949      	ldr	r1, [pc, #292]	@ (8002270 <main+0x2a4>)
 800214c:	2001      	movs	r0, #1
 800214e:	f003 fb17 	bl	8005780 <LOGGER_SendFormatted>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  // SD 로깅 큐 생성 (안전성 체크 포함)
  LOG_INFO("📤 Creating SD logging queue (size: %d, item: %d bytes)", 
 8002152:	2388      	movs	r3, #136	@ 0x88
 8002154:	220a      	movs	r2, #10
 8002156:	4947      	ldr	r1, [pc, #284]	@ (8002274 <main+0x2a8>)
 8002158:	2001      	movs	r0, #1
 800215a:	f003 fb11 	bl	8005780 <LOGGER_SendFormatted>
           SD_LOG_QUEUE_SIZE, sizeof(SDLogEntry_t));
  
  osMessageQDef(sdLogQueue, SD_LOG_QUEUE_SIZE, SDLogEntry_t);
 800215e:	4b46      	ldr	r3, [pc, #280]	@ (8002278 <main+0x2ac>)
 8002160:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002166:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdLogQueueHandle = osMessageCreate(osMessageQ(sdLogQueue), NULL);
 800216a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800216e:	2100      	movs	r1, #0
 8002170:	4618      	mov	r0, r3
 8002172:	f012 ff9b 	bl	80150ac <osMessageCreate>
 8002176:	4603      	mov	r3, r0
 8002178:	4a40      	ldr	r2, [pc, #256]	@ (800227c <main+0x2b0>)
 800217a:	6013      	str	r3, [r2, #0]
  
  if (sdLogQueueHandle == NULL) {
 800217c:	4b3f      	ldr	r3, [pc, #252]	@ (800227c <main+0x2b0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <main+0x1c2>
    LOG_ERROR("❌ SD logging queue creation FAILED - insufficient memory");
 8002184:	493e      	ldr	r1, [pc, #248]	@ (8002280 <main+0x2b4>)
 8002186:	2003      	movs	r0, #3
 8002188:	f003 fafa 	bl	8005780 <LOGGER_SendFormatted>
 800218c:	e003      	b.n	8002196 <main+0x1ca>
  } else {
    LOG_INFO("✅ SD logging queue created successfully");
 800218e:	493d      	ldr	r1, [pc, #244]	@ (8002284 <main+0x2b8>)
 8002190:	2001      	movs	r0, #1
 8002192:	f003 faf5 	bl	8005780 <LOGGER_SendFormatted>
  }
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 8192);
 8002196:	4b3c      	ldr	r3, [pc, #240]	@ (8002288 <main+0x2bc>)
 8002198:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800219c:	461d      	mov	r5, r3
 800219e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80021aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f012 ff1b 	bl	8014fec <osThreadCreate>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4a34      	ldr	r2, [pc, #208]	@ (800228c <main+0x2c0>)
 80021ba:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 수신 태스크 활성화 - LoRa 통신을 위해 필수 */
  osThreadDef(receiveTask, StartReceiveTask, osPriorityNormal, 0, 4096);
 80021bc:	4b34      	ldr	r3, [pc, #208]	@ (8002290 <main+0x2c4>)
 80021be:	f107 0420 	add.w	r4, r7, #32
 80021c2:	461d      	mov	r5, r3
 80021c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  receiveTaskHandle = osThreadCreate(osThread(receiveTask), NULL);
 80021d0:	f107 0320 	add.w	r3, r7, #32
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f012 ff08 	bl	8014fec <osThreadCreate>
 80021dc:	4603      	mov	r3, r0
 80021de:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <main+0x2c8>)
 80021e0:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 Receive Task enabled for LoRa communication");
 80021e2:	492d      	ldr	r1, [pc, #180]	@ (8002298 <main+0x2cc>)
 80021e4:	2001      	movs	r0, #1
 80021e6:	f003 facb 	bl	8005780 <LOGGER_SendFormatted>
  
  /* SD 로깅 태스크 활성화 - SD 카드 로깅을 위해 */
  osThreadDef(sdLoggingTask, StartSDLoggingTask, osPriorityLow, 0, 4096);
 80021ea:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <main+0x2d0>)
 80021ec:	1d3c      	adds	r4, r7, #4
 80021ee:	461d      	mov	r5, r3
 80021f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdLoggingTaskHandle = osThreadCreate(osThread(sdLoggingTask), NULL);
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f012 fef3 	bl	8014fec <osThreadCreate>
 8002206:	4603      	mov	r3, r0
 8002208:	4a25      	ldr	r2, [pc, #148]	@ (80022a0 <main+0x2d4>)
 800220a:	6013      	str	r3, [r2, #0]
  LOG_INFO("📤 SD Logging Task enabled");
 800220c:	4925      	ldr	r1, [pc, #148]	@ (80022a4 <main+0x2d8>)
 800220e:	2001      	movs	r0, #1
 8002210:	f003 fab6 	bl	8005780 <LOGGER_SendFormatted>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  LOG_INFO("🚀 Starting FreeRTOS scheduler...");
 8002214:	4924      	ldr	r1, [pc, #144]	@ (80022a8 <main+0x2dc>)
 8002216:	2001      	movs	r0, #1
 8002218:	f003 fab2 	bl	8005780 <LOGGER_SendFormatted>
  osKernelStart();
 800221c:	f012 fec3 	bl	8014fa6 <osKernelStart>
  
  // 이 부분은 절대 실행되면 안됨 (스케줄러가 제어를 가져가야 함)
  LOG_ERROR("❌ FATAL: Scheduler failed to start - system halted");
 8002220:	4922      	ldr	r1, [pc, #136]	@ (80022ac <main+0x2e0>)
 8002222:	2003      	movs	r0, #3
 8002224:	f003 faac 	bl	8005780 <LOGGER_SendFormatted>

  /* We should never get here as control is now taken by the scheduler */
  
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002228:	bf00      	nop
 800222a:	e7fd      	b.n	8002228 <main+0x25c>
 800222c:	2000157c 	.word	0x2000157c
 8002230:	20001240 	.word	0x20001240
 8002234:	20001518 	.word	0x20001518
 8002238:	0801add4 	.word	0x0801add4
 800223c:	0801addc 	.word	0x0801addc
 8002240:	40023800 	.word	0x40023800
 8002244:	0801ae00 	.word	0x0801ae00
 8002248:	0801ae18 	.word	0x0801ae18
 800224c:	0801ae30 	.word	0x0801ae30
 8002250:	0801ae48 	.word	0x0801ae48
 8002254:	0801ae58 	.word	0x0801ae58
 8002258:	0801ae70 	.word	0x0801ae70
 800225c:	0801ae90 	.word	0x0801ae90
 8002260:	0801aea8 	.word	0x0801aea8
 8002264:	20000018 	.word	0x20000018
 8002268:	0801aee8 	.word	0x0801aee8
 800226c:	0801af20 	.word	0x0801af20
 8002270:	0801af48 	.word	0x0801af48
 8002274:	0801af64 	.word	0x0801af64
 8002278:	0801b0b8 	.word	0x0801b0b8
 800227c:	20001308 	.word	0x20001308
 8002280:	0801afa0 	.word	0x0801afa0
 8002284:	0801afdc 	.word	0x0801afdc
 8002288:	0801b0d4 	.word	0x0801b0d4
 800228c:	200012fc 	.word	0x200012fc
 8002290:	0801b0fc 	.word	0x0801b0fc
 8002294:	20001300 	.word	0x20001300
 8002298:	0801b008 	.word	0x0801b008
 800229c:	0801b128 	.word	0x0801b128
 80022a0:	20001304 	.word	0x20001304
 80022a4:	0801b03c 	.word	0x0801b03c
 80022a8:	0801b05c 	.word	0x0801b05c
 80022ac:	0801b080 	.word	0x0801b080

080022b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b094      	sub	sp, #80	@ 0x50
 80022b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022b6:	f107 0320 	add.w	r3, r7, #32
 80022ba:	2230      	movs	r2, #48	@ 0x30
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f015 fd10 	bl	8017ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80022d4:	f008 fb8a 	bl	800a9ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022d8:	4b2c      	ldr	r3, [pc, #176]	@ (800238c <SystemClock_Config+0xdc>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022dc:	4a2b      	ldr	r2, [pc, #172]	@ (800238c <SystemClock_Config+0xdc>)
 80022de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e4:	4b29      	ldr	r3, [pc, #164]	@ (800238c <SystemClock_Config+0xdc>)
 80022e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022f0:	4b27      	ldr	r3, [pc, #156]	@ (8002390 <SystemClock_Config+0xe0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a26      	ldr	r2, [pc, #152]	@ (8002390 <SystemClock_Config+0xe0>)
 80022f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022fa:	6013      	str	r3, [r2, #0]
 80022fc:	4b24      	ldr	r3, [pc, #144]	@ (8002390 <SystemClock_Config+0xe0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002308:	2309      	movs	r3, #9
 800230a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800230c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002312:	2301      	movs	r3, #1
 8002314:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002316:	2302      	movs	r3, #2
 8002318:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800231a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800231e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002320:	2319      	movs	r3, #25
 8002322:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002324:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002328:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800232a:	2302      	movs	r3, #2
 800232c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800232e:	2309      	movs	r3, #9
 8002330:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002332:	f107 0320 	add.w	r3, r7, #32
 8002336:	4618      	mov	r0, r3
 8002338:	f008 fc7a 	bl	800ac30 <HAL_RCC_OscConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002342:	f001 fedf 	bl	8004104 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002346:	f008 fb61 	bl	800aa0c <HAL_PWREx_EnableOverDrive>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002350:	f001 fed8 	bl	8004104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002354:	230f      	movs	r3, #15
 8002356:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002358:	2302      	movs	r3, #2
 800235a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002360:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800236a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2106      	movs	r1, #6
 8002372:	4618      	mov	r0, r3
 8002374:	f008 ff00 	bl	800b178 <HAL_RCC_ClockConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800237e:	f001 fec1 	bl	8004104 <Error_Handler>
  }
}
 8002382:	bf00      	nop
 8002384:	3750      	adds	r7, #80	@ 0x50
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40007000 	.word	0x40007000

08002394 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b0a2      	sub	sp, #136	@ 0x88
 8002398:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800239a:	1d3b      	adds	r3, r7, #4
 800239c:	2284      	movs	r2, #132	@ 0x84
 800239e:	2100      	movs	r1, #0
 80023a0:	4618      	mov	r0, r3
 80023a2:	f015 fc9f 	bl	8017ce4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI2
 80023a6:	4b13      	ldr	r3, [pc, #76]	@ (80023f4 <PeriphCommonClock_Config+0x60>)
 80023a8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80023aa:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80023ae:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80023b0:	2305      	movs	r3, #5
 80023b2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80023b8:	2303      	movs	r3, #3
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80023bc:	2301      	movs	r3, #1
 80023be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80023c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023c4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80023c6:	2300      	movs	r3, #0
 80023c8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80023ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80023ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80023d2:	2300      	movs	r3, #0
 80023d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	4618      	mov	r0, r3
 80023dc:	f009 f8e4 	bl	800b5a8 <HAL_RCCEx_PeriphCLKConfig>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80023e6:	f001 fe8d 	bl	8004104 <Error_Handler>
  }
}
 80023ea:	bf00      	nop
 80023ec:	3788      	adds	r7, #136	@ 0x88
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	00b00008 	.word	0x00b00008

080023f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023fe:	463b      	mov	r3, r7
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800240a:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <MX_ADC3_Init+0x98>)
 800240c:	4a21      	ldr	r2, [pc, #132]	@ (8002494 <MX_ADC3_Init+0x9c>)
 800240e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002410:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <MX_ADC3_Init+0x98>)
 8002412:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002416:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <MX_ADC3_Init+0x98>)
 800241a:	2200      	movs	r2, #0
 800241c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800241e:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <MX_ADC3_Init+0x98>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002424:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <MX_ADC3_Init+0x98>)
 8002426:	2200      	movs	r2, #0
 8002428:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800242a:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <MX_ADC3_Init+0x98>)
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002432:	4b17      	ldr	r3, [pc, #92]	@ (8002490 <MX_ADC3_Init+0x98>)
 8002434:	2200      	movs	r2, #0
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002438:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <MX_ADC3_Init+0x98>)
 800243a:	4a17      	ldr	r2, [pc, #92]	@ (8002498 <MX_ADC3_Init+0xa0>)
 800243c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <MX_ADC3_Init+0x98>)
 8002440:	2200      	movs	r2, #0
 8002442:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002444:	4b12      	ldr	r3, [pc, #72]	@ (8002490 <MX_ADC3_Init+0x98>)
 8002446:	2201      	movs	r2, #1
 8002448:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800244a:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <MX_ADC3_Init+0x98>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002452:	4b0f      	ldr	r3, [pc, #60]	@ (8002490 <MX_ADC3_Init+0x98>)
 8002454:	2201      	movs	r2, #1
 8002456:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002458:	480d      	ldr	r0, [pc, #52]	@ (8002490 <MX_ADC3_Init+0x98>)
 800245a:	f004 f869 	bl	8006530 <HAL_ADC_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002464:	f001 fe4e 	bl	8004104 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002468:	2304      	movs	r3, #4
 800246a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800246c:	2301      	movs	r3, #1
 800246e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002474:	463b      	mov	r3, r7
 8002476:	4619      	mov	r1, r3
 8002478:	4805      	ldr	r0, [pc, #20]	@ (8002490 <MX_ADC3_Init+0x98>)
 800247a:	f004 f89d 	bl	80065b8 <HAL_ADC_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002484:	f001 fe3e 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002488:	bf00      	nop
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000a4c 	.word	0x20000a4c
 8002494:	40012200 	.word	0x40012200
 8002498:	0f000001 	.word	0x0f000001

0800249c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80024a0:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <MX_CRC_Init+0x3c>)
 80024a2:	4a0e      	ldr	r2, [pc, #56]	@ (80024dc <MX_CRC_Init+0x40>)
 80024a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80024a6:	4b0c      	ldr	r3, [pc, #48]	@ (80024d8 <MX_CRC_Init+0x3c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <MX_CRC_Init+0x3c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80024b2:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <MX_CRC_Init+0x3c>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	@ (80024d8 <MX_CRC_Init+0x3c>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <MX_CRC_Init+0x3c>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	@ (80024d8 <MX_CRC_Init+0x3c>)
 80024c6:	f004 fbad 	bl	8006c24 <HAL_CRC_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80024d0:	f001 fe18 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000a94 	.word	0x20000a94
 80024dc:	40023000 	.word	0x40023000

080024e0 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80024e4:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <MX_DCMI_Init+0x60>)
 80024e6:	4a17      	ldr	r2, [pc, #92]	@ (8002544 <MX_DCMI_Init+0x64>)
 80024e8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80024ea:	4b15      	ldr	r3, [pc, #84]	@ (8002540 <MX_DCMI_Init+0x60>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80024f0:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <MX_DCMI_Init+0x60>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80024f6:	4b12      	ldr	r3, [pc, #72]	@ (8002540 <MX_DCMI_Init+0x60>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80024fc:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <MX_DCMI_Init+0x60>)
 80024fe:	2200      	movs	r2, #0
 8002500:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8002502:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <MX_DCMI_Init+0x60>)
 8002504:	2200      	movs	r2, #0
 8002506:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002508:	4b0d      	ldr	r3, [pc, #52]	@ (8002540 <MX_DCMI_Init+0x60>)
 800250a:	2200      	movs	r2, #0
 800250c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <MX_DCMI_Init+0x60>)
 8002510:	2200      	movs	r2, #0
 8002512:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8002514:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <MX_DCMI_Init+0x60>)
 8002516:	2200      	movs	r2, #0
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <MX_DCMI_Init+0x60>)
 800251c:	2200      	movs	r2, #0
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002520:	4b07      	ldr	r3, [pc, #28]	@ (8002540 <MX_DCMI_Init+0x60>)
 8002522:	2200      	movs	r2, #0
 8002524:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <MX_DCMI_Init+0x60>)
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800252c:	4804      	ldr	r0, [pc, #16]	@ (8002540 <MX_DCMI_Init+0x60>)
 800252e:	f004 fc6b 	bl	8006e08 <HAL_DCMI_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002538:	f001 fde4 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000ab8 	.word	0x20000ab8
 8002544:	50050000 	.word	0x50050000

08002548 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800254c:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 800254e:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <MX_DMA2D_Init+0x60>)
 8002550:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002552:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 8002554:	2200      	movs	r2, #0
 8002556:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002558:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002564:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 8002566:	2200      	movs	r2, #0
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800256a:	4b0e      	ldr	r3, [pc, #56]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 800256c:	2200      	movs	r2, #0
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002576:	4b0b      	ldr	r3, [pc, #44]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 8002578:	2200      	movs	r2, #0
 800257a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800257c:	4809      	ldr	r0, [pc, #36]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 800257e:	f005 f931 	bl	80077e4 <HAL_DMA2D_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002588:	f001 fdbc 	bl	8004104 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800258c:	2101      	movs	r1, #1
 800258e:	4805      	ldr	r0, [pc, #20]	@ (80025a4 <MX_DMA2D_Init+0x5c>)
 8002590:	f005 fa82 	bl	8007a98 <HAL_DMA2D_ConfigLayer>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800259a:	f001 fdb3 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000b08 	.word	0x20000b08
 80025a8:	4002b000 	.word	0x4002b000

080025ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002630 <MX_ETH_Init+0x84>)
 80025b2:	4a20      	ldr	r2, [pc, #128]	@ (8002634 <MX_ETH_Init+0x88>)
 80025b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80025b6:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <MX_ETH_Init+0x8c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80025bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002638 <MX_ETH_Init+0x8c>)
 80025be:	2280      	movs	r2, #128	@ 0x80
 80025c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80025c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002638 <MX_ETH_Init+0x8c>)
 80025c4:	22e1      	movs	r2, #225	@ 0xe1
 80025c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <MX_ETH_Init+0x8c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <MX_ETH_Init+0x8c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80025d4:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <MX_ETH_Init+0x8c>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80025da:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <MX_ETH_Init+0x84>)
 80025dc:	4a16      	ldr	r2, [pc, #88]	@ (8002638 <MX_ETH_Init+0x8c>)
 80025de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80025e0:	4b13      	ldr	r3, [pc, #76]	@ (8002630 <MX_ETH_Init+0x84>)
 80025e2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025e6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80025e8:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <MX_ETH_Init+0x84>)
 80025ea:	4a14      	ldr	r2, [pc, #80]	@ (800263c <MX_ETH_Init+0x90>)
 80025ec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80025ee:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <MX_ETH_Init+0x84>)
 80025f0:	4a13      	ldr	r2, [pc, #76]	@ (8002640 <MX_ETH_Init+0x94>)
 80025f2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80025f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002630 <MX_ETH_Init+0x84>)
 80025f6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80025fa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80025fc:	480c      	ldr	r0, [pc, #48]	@ (8002630 <MX_ETH_Init+0x84>)
 80025fe:	f005 fadd 	bl	8007bbc <HAL_ETH_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8002608:	f001 fd7c 	bl	8004104 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800260c:	2238      	movs	r2, #56	@ 0x38
 800260e:	2100      	movs	r1, #0
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <MX_ETH_Init+0x98>)
 8002612:	f015 fb67 	bl	8017ce4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <MX_ETH_Init+0x98>)
 8002618:	2221      	movs	r2, #33	@ 0x21
 800261a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800261c:	4b09      	ldr	r3, [pc, #36]	@ (8002644 <MX_ETH_Init+0x98>)
 800261e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002622:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002624:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <MX_ETH_Init+0x98>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800262a:	bf00      	nop
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	20000b48 	.word	0x20000b48
 8002634:	40028000 	.word	0x40028000
 8002638:	20001580 	.word	0x20001580
 800263c:	20000178 	.word	0x20000178
 8002640:	200000d8 	.word	0x200000d8
 8002644:	20000a14 	.word	0x20000a14

08002648 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800264c:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <MX_I2C1_Init+0x74>)
 800264e:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <MX_I2C1_Init+0x78>)
 8002650:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8002652:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002654:	4a1b      	ldr	r2, [pc, #108]	@ (80026c4 <MX_I2C1_Init+0x7c>)
 8002656:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002658:	4b18      	ldr	r3, [pc, #96]	@ (80026bc <MX_I2C1_Init+0x74>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800265e:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002660:	2201      	movs	r2, #1
 8002662:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002664:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800266a:	4b14      	ldr	r3, [pc, #80]	@ (80026bc <MX_I2C1_Init+0x74>)
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002676:	4b11      	ldr	r3, [pc, #68]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002678:	2200      	movs	r2, #0
 800267a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <MX_I2C1_Init+0x74>)
 800267e:	2200      	movs	r2, #0
 8002680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002682:	480e      	ldr	r0, [pc, #56]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002684:	f007 fd6c 	bl	800a160 <HAL_I2C_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800268e:	f001 fd39 	bl	8004104 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002692:	2100      	movs	r1, #0
 8002694:	4809      	ldr	r0, [pc, #36]	@ (80026bc <MX_I2C1_Init+0x74>)
 8002696:	f007 fdff 	bl	800a298 <HAL_I2CEx_ConfigAnalogFilter>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80026a0:	f001 fd30 	bl	8004104 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80026a4:	2100      	movs	r1, #0
 80026a6:	4805      	ldr	r0, [pc, #20]	@ (80026bc <MX_I2C1_Init+0x74>)
 80026a8:	f007 fe41 	bl	800a32e <HAL_I2CEx_ConfigDigitalFilter>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80026b2:	f001 fd27 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000bf8 	.word	0x20000bf8
 80026c0:	40005400 	.word	0x40005400
 80026c4:	00c0eaff 	.word	0x00c0eaff

080026c8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <MX_I2C3_Init+0x74>)
 80026ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002740 <MX_I2C3_Init+0x78>)
 80026d0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80026d2:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <MX_I2C3_Init+0x74>)
 80026d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002744 <MX_I2C3_Init+0x7c>)
 80026d6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80026d8:	4b18      	ldr	r3, [pc, #96]	@ (800273c <MX_I2C3_Init+0x74>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026de:	4b17      	ldr	r3, [pc, #92]	@ (800273c <MX_I2C3_Init+0x74>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e4:	4b15      	ldr	r3, [pc, #84]	@ (800273c <MX_I2C3_Init+0x74>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80026ea:	4b14      	ldr	r3, [pc, #80]	@ (800273c <MX_I2C3_Init+0x74>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026f0:	4b12      	ldr	r3, [pc, #72]	@ (800273c <MX_I2C3_Init+0x74>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f6:	4b11      	ldr	r3, [pc, #68]	@ (800273c <MX_I2C3_Init+0x74>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	@ (800273c <MX_I2C3_Init+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002702:	480e      	ldr	r0, [pc, #56]	@ (800273c <MX_I2C3_Init+0x74>)
 8002704:	f007 fd2c 	bl	800a160 <HAL_I2C_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800270e:	f001 fcf9 	bl	8004104 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002712:	2100      	movs	r1, #0
 8002714:	4809      	ldr	r0, [pc, #36]	@ (800273c <MX_I2C3_Init+0x74>)
 8002716:	f007 fdbf 	bl	800a298 <HAL_I2CEx_ConfigAnalogFilter>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002720:	f001 fcf0 	bl	8004104 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002724:	2100      	movs	r1, #0
 8002726:	4805      	ldr	r0, [pc, #20]	@ (800273c <MX_I2C3_Init+0x74>)
 8002728:	f007 fe01 	bl	800a32e <HAL_I2CEx_ConfigDigitalFilter>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002732:	f001 fce7 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000c4c 	.word	0x20000c4c
 8002740:	40005c00 	.word	0x40005c00
 8002744:	00c0eaff 	.word	0x00c0eaff

08002748 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08e      	sub	sp, #56	@ 0x38
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	2234      	movs	r2, #52	@ 0x34
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f015 fac5 	bl	8017ce4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800275a:	4b3a      	ldr	r3, [pc, #232]	@ (8002844 <MX_LTDC_Init+0xfc>)
 800275c:	4a3a      	ldr	r2, [pc, #232]	@ (8002848 <MX_LTDC_Init+0x100>)
 800275e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002760:	4b38      	ldr	r3, [pc, #224]	@ (8002844 <MX_LTDC_Init+0xfc>)
 8002762:	2200      	movs	r2, #0
 8002764:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002766:	4b37      	ldr	r3, [pc, #220]	@ (8002844 <MX_LTDC_Init+0xfc>)
 8002768:	2200      	movs	r2, #0
 800276a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800276c:	4b35      	ldr	r3, [pc, #212]	@ (8002844 <MX_LTDC_Init+0xfc>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002772:	4b34      	ldr	r3, [pc, #208]	@ (8002844 <MX_LTDC_Init+0xfc>)
 8002774:	2200      	movs	r2, #0
 8002776:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8002778:	4b32      	ldr	r3, [pc, #200]	@ (8002844 <MX_LTDC_Init+0xfc>)
 800277a:	2228      	movs	r2, #40	@ 0x28
 800277c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800277e:	4b31      	ldr	r3, [pc, #196]	@ (8002844 <MX_LTDC_Init+0xfc>)
 8002780:	2209      	movs	r2, #9
 8002782:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002784:	4b2f      	ldr	r3, [pc, #188]	@ (8002844 <MX_LTDC_Init+0xfc>)
 8002786:	2235      	movs	r2, #53	@ 0x35
 8002788:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800278a:	4b2e      	ldr	r3, [pc, #184]	@ (8002844 <MX_LTDC_Init+0xfc>)
 800278c:	220b      	movs	r2, #11
 800278e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002790:	4b2c      	ldr	r3, [pc, #176]	@ (8002844 <MX_LTDC_Init+0xfc>)
 8002792:	f240 2215 	movw	r2, #533	@ 0x215
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002798:	4b2a      	ldr	r3, [pc, #168]	@ (8002844 <MX_LTDC_Init+0xfc>)
 800279a:	f240 121b 	movw	r2, #283	@ 0x11b
 800279e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 80027a0:	4b28      	ldr	r3, [pc, #160]	@ (8002844 <MX_LTDC_Init+0xfc>)
 80027a2:	f240 2235 	movw	r2, #565	@ 0x235
 80027a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 80027a8:	4b26      	ldr	r3, [pc, #152]	@ (8002844 <MX_LTDC_Init+0xfc>)
 80027aa:	f240 121d 	movw	r2, #285	@ 0x11d
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80027b0:	4b24      	ldr	r3, [pc, #144]	@ (8002844 <MX_LTDC_Init+0xfc>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80027b8:	4b22      	ldr	r3, [pc, #136]	@ (8002844 <MX_LTDC_Init+0xfc>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80027c0:	4b20      	ldr	r3, [pc, #128]	@ (8002844 <MX_LTDC_Init+0xfc>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80027c8:	481e      	ldr	r0, [pc, #120]	@ (8002844 <MX_LTDC_Init+0xfc>)
 80027ca:	f007 fdfc 	bl	800a3c6 <HAL_LTDC_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80027d4:	f001 fc96 	bl	8004104 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80027dc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80027e0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80027e6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80027ea:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80027ec:	2302      	movs	r3, #2
 80027ee:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80027f0:	23ff      	movs	r3, #255	@ 0xff
 80027f2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80027fc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027fe:	2307      	movs	r3, #7
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8002802:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8002806:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8002808:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800280c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 800280e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8002812:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2200      	movs	r2, #0
 800282a:	4619      	mov	r1, r3
 800282c:	4805      	ldr	r0, [pc, #20]	@ (8002844 <MX_LTDC_Init+0xfc>)
 800282e:	f007 ff29 	bl	800a684 <HAL_LTDC_ConfigLayer>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8002838:	f001 fc64 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800283c:	bf00      	nop
 800283e:	3738      	adds	r7, #56	@ 0x38
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000ca0 	.word	0x20000ca0
 8002848:	40016800 	.word	0x40016800

0800284c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <MX_QUADSPI_Init+0x50>)
 8002852:	4a13      	ldr	r2, [pc, #76]	@ (80028a0 <MX_QUADSPI_Init+0x54>)
 8002854:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <MX_QUADSPI_Init+0x50>)
 8002858:	2201      	movs	r2, #1
 800285a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800285c:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <MX_QUADSPI_Init+0x50>)
 800285e:	2204      	movs	r2, #4
 8002860:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002862:	4b0e      	ldr	r3, [pc, #56]	@ (800289c <MX_QUADSPI_Init+0x50>)
 8002864:	2210      	movs	r2, #16
 8002866:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 8002868:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <MX_QUADSPI_Init+0x50>)
 800286a:	2218      	movs	r2, #24
 800286c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 800286e:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <MX_QUADSPI_Init+0x50>)
 8002870:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8002874:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <MX_QUADSPI_Init+0x50>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800287c:	4b07      	ldr	r3, [pc, #28]	@ (800289c <MX_QUADSPI_Init+0x50>)
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <MX_QUADSPI_Init+0x50>)
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002888:	4804      	ldr	r0, [pc, #16]	@ (800289c <MX_QUADSPI_Init+0x50>)
 800288a:	f008 f90f 	bl	800aaac <HAL_QSPI_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8002894:	f001 fc36 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000d48 	.word	0x20000d48
 80028a0:	a0001000 	.word	0xa0001000

080028a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b090      	sub	sp, #64	@ 0x40
 80028a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80028ba:	2300      	movs	r3, #0
 80028bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80028be:	463b      	mov	r3, r7
 80028c0:	2228      	movs	r2, #40	@ 0x28
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f015 fa0d 	bl	8017ce4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028ca:	4b46      	ldr	r3, [pc, #280]	@ (80029e4 <MX_RTC_Init+0x140>)
 80028cc:	4a46      	ldr	r2, [pc, #280]	@ (80029e8 <MX_RTC_Init+0x144>)
 80028ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028d0:	4b44      	ldr	r3, [pc, #272]	@ (80029e4 <MX_RTC_Init+0x140>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80028d6:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <MX_RTC_Init+0x140>)
 80028d8:	227f      	movs	r2, #127	@ 0x7f
 80028da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80028dc:	4b41      	ldr	r3, [pc, #260]	@ (80029e4 <MX_RTC_Init+0x140>)
 80028de:	22ff      	movs	r2, #255	@ 0xff
 80028e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028e2:	4b40      	ldr	r3, [pc, #256]	@ (80029e4 <MX_RTC_Init+0x140>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028e8:	4b3e      	ldr	r3, [pc, #248]	@ (80029e4 <MX_RTC_Init+0x140>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028ee:	4b3d      	ldr	r3, [pc, #244]	@ (80029e4 <MX_RTC_Init+0x140>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028f4:	483b      	ldr	r0, [pc, #236]	@ (80029e4 <MX_RTC_Init+0x140>)
 80028f6:	f009 fb87 	bl	800c008 <HAL_RTC_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002900:	f001 fc00 	bl	8004104 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002916:	2300      	movs	r3, #0
 8002918:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800291e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002922:	2201      	movs	r2, #1
 8002924:	4619      	mov	r1, r3
 8002926:	482f      	ldr	r0, [pc, #188]	@ (80029e4 <MX_RTC_Init+0x140>)
 8002928:	f009 fbf0 	bl	800c10c <HAL_RTC_SetTime>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002932:	f001 fbe7 	bl	8004104 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800294e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002952:	2201      	movs	r2, #1
 8002954:	4619      	mov	r1, r3
 8002956:	4823      	ldr	r0, [pc, #140]	@ (80029e4 <MX_RTC_Init+0x140>)
 8002958:	f009 fc72 	bl	800c240 <HAL_RTC_SetDate>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002962:	f001 fbcf 	bl	8004104 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002966:	2300      	movs	r3, #0
 8002968:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800296a:	2300      	movs	r3, #0
 800296c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800296e:	2300      	movs	r3, #0
 8002970:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002972:	2300      	movs	r3, #0
 8002974:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002990:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002996:	463b      	mov	r3, r7
 8002998:	2201      	movs	r2, #1
 800299a:	4619      	mov	r1, r3
 800299c:	4811      	ldr	r0, [pc, #68]	@ (80029e4 <MX_RTC_Init+0x140>)
 800299e:	f009 fcd3 	bl	800c348 <HAL_RTC_SetAlarm>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80029a8:	f001 fbac 	bl	8004104 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80029ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80029b2:	463b      	mov	r3, r7
 80029b4:	2201      	movs	r2, #1
 80029b6:	4619      	mov	r1, r3
 80029b8:	480a      	ldr	r0, [pc, #40]	@ (80029e4 <MX_RTC_Init+0x140>)
 80029ba:	f009 fcc5 	bl	800c348 <HAL_RTC_SetAlarm>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80029c4:	f001 fb9e 	bl	8004104 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80029c8:	2202      	movs	r2, #2
 80029ca:	2100      	movs	r1, #0
 80029cc:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <MX_RTC_Init+0x140>)
 80029ce:	f009 fe85 	bl	800c6dc <HAL_RTCEx_SetTimeStamp>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80029d8:	f001 fb94 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	3740      	adds	r7, #64	@ 0x40
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000d94 	.word	0x20000d94
 80029e8:	40002800 	.word	0x40002800

080029ec <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80029f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 80029f2:	4a4e      	ldr	r2, [pc, #312]	@ (8002b2c <MX_SAI2_Init+0x140>)
 80029f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80029f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80029fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8002a02:	4b49      	ldr	r3, [pc, #292]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a04:	2240      	movs	r2, #64	@ 0x40
 8002a06:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002a08:	4b47      	ldr	r3, [pc, #284]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002a0e:	4b46      	ldr	r3, [pc, #280]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8002a14:	4b44      	ldr	r3, [pc, #272]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002a1a:	4b43      	ldr	r3, [pc, #268]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002a20:	4b41      	ldr	r3, [pc, #260]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002a26:	4b40      	ldr	r3, [pc, #256]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a2e:	4a40      	ldr	r2, [pc, #256]	@ (8002b30 <MX_SAI2_Init+0x144>)
 8002a30:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002a32:	4b3d      	ldr	r3, [pc, #244]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002a38:	4b3b      	ldr	r3, [pc, #236]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002a44:	4b38      	ldr	r3, [pc, #224]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8002a4a:	4b37      	ldr	r3, [pc, #220]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8002a50:	4b35      	ldr	r3, [pc, #212]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002a56:	4b34      	ldr	r3, [pc, #208]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002a5c:	4b32      	ldr	r3, [pc, #200]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002a62:	4b31      	ldr	r3, [pc, #196]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8002a68:	4b2f      	ldr	r3, [pc, #188]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002a74:	4b2c      	ldr	r3, [pc, #176]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002a80:	4829      	ldr	r0, [pc, #164]	@ (8002b28 <MX_SAI2_Init+0x13c>)
 8002a82:	f009 fe93 	bl	800c7ac <HAL_SAI_Init>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8002a8c:	f001 fb3a 	bl	8004104 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8002a90:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002a92:	4a29      	ldr	r2, [pc, #164]	@ (8002b38 <MX_SAI2_Init+0x14c>)
 8002a94:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8002a96:	4b27      	ldr	r3, [pc, #156]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8002a9c:	4b25      	ldr	r3, [pc, #148]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8002aa2:	4b24      	ldr	r3, [pc, #144]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002aa4:	2240      	movs	r2, #64	@ 0x40
 8002aa6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002aa8:	4b22      	ldr	r3, [pc, #136]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002aae:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8002acc:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8002ad2:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002ad8:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8002ae4:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002aea:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002af0:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8002afc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002b02:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8002b08:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8002b0e:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8002b14:	4807      	ldr	r0, [pc, #28]	@ (8002b34 <MX_SAI2_Init+0x148>)
 8002b16:	f009 fe49 	bl	800c7ac <HAL_SAI_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8002b20:	f001 faf0 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000db4 	.word	0x20000db4
 8002b2c:	40015c04 	.word	0x40015c04
 8002b30:	0002ee00 	.word	0x0002ee00
 8002b34:	20000e38 	.word	0x20000e38
 8002b38:	40015c24 	.word	0x40015c24

08002b3c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002b42:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <MX_SDMMC1_SD_Init+0x54>)
 8002b44:	4a13      	ldr	r2, [pc, #76]	@ (8002b94 <MX_SDMMC1_SD_Init+0x58>)
 8002b46:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002b48:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <MX_SDMMC1_SD_Init+0x54>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <MX_SDMMC1_SD_Init+0x54>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002b54:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <MX_SDMMC1_SD_Init+0x54>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;  // ST 커뮤니티 가이드: 1-bit 모드로 변경
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <MX_SDMMC1_SD_Init+0x54>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;  // 하드웨어 플로우 컨트롤 활성화 (안정성 향상)
 8002b60:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <MX_SDMMC1_SD_Init+0x54>)
 8002b62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b66:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 8;  // 클럭 분주비 증가 (2→8, STM32F7 안정화 권장값)
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <MX_SDMMC1_SD_Init+0x54>)
 8002b6a:	2208      	movs	r2, #8
 8002b6c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */
  
  // Initialize SD card with HAL
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002b6e:	4808      	ldr	r0, [pc, #32]	@ (8002b90 <MX_SDMMC1_SD_Init+0x54>)
 8002b70:	f009 ffd2 	bl	800cb18 <HAL_SD_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_SDMMC1_SD_Init+0x42>
  {
    Error_Handler();
 8002b7a:	f001 fac3 	bl	8004104 <Error_Handler>
  }
  
  // BSP 초기화도 호출 (FatFs 호환성을 위해)
  uint8_t bsp_result = BSP_SD_Init();
 8002b7e:	f00f f8cf 	bl	8011d20 <BSP_SD_Init>
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
    // Error_Handler() 호출하지 않음
  }

  /* USER CODE END SDMMC1_Init 2 */

}
 8002b86:	bf00      	nop
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000ebc 	.word	0x20000ebc
 8002b94:	40012c00 	.word	0x40012c00

08002b98 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8002b9c:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002b9e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002ba2:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8002baa:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8002bce:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8002bd4:	4b07      	ldr	r3, [pc, #28]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8002be0:	4804      	ldr	r0, [pc, #16]	@ (8002bf4 <MX_SPDIFRX_Init+0x5c>)
 8002be2:	f00b f959 	bl	800de98 <HAL_SPDIFRX_Init>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8002bec:	f001 fa8a 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000f40 	.word	0x20000f40

08002bf8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002bfe:	4a1c      	ldr	r2, [pc, #112]	@ (8002c70 <MX_SPI2_Init+0x78>)
 8002c00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c02:	4b1a      	ldr	r3, [pc, #104]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002c08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0a:	4b18      	ldr	r3, [pc, #96]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002c10:	4b16      	ldr	r3, [pc, #88]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c12:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002c16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c18:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c1e:	4b13      	ldr	r3, [pc, #76]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002c24:	4b11      	ldr	r3, [pc, #68]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002c44:	4b09      	ldr	r3, [pc, #36]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c46:	2207      	movs	r2, #7
 8002c48:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c52:	2208      	movs	r2, #8
 8002c54:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002c56:	4805      	ldr	r0, [pc, #20]	@ (8002c6c <MX_SPI2_Init+0x74>)
 8002c58:	f00b f97a 	bl	800df50 <HAL_SPI_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002c62:	f001 fa4f 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000f8c 	.word	0x20000f8c
 8002c70:	40003800 	.word	0x40003800

08002c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b09a      	sub	sp, #104	@ 0x68
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
 8002ca4:	615a      	str	r2, [r3, #20]
 8002ca6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ca8:	1d3b      	adds	r3, r7, #4
 8002caa:	222c      	movs	r2, #44	@ 0x2c
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f015 f818 	bl	8017ce4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cb4:	4b43      	ldr	r3, [pc, #268]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002cb6:	4a44      	ldr	r2, [pc, #272]	@ (8002dc8 <MX_TIM1_Init+0x154>)
 8002cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002cba:	4b42      	ldr	r3, [pc, #264]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cc0:	4b40      	ldr	r3, [pc, #256]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cce:	4b3d      	ldr	r3, [pc, #244]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cda:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ce0:	4838      	ldr	r0, [pc, #224]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002ce2:	f00b f9e0 	bl	800e0a6 <HAL_TIM_Base_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002cec:	f001 fa0a 	bl	8004104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cf4:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002cf6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4831      	ldr	r0, [pc, #196]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002cfe:	f00b fd13 	bl	800e728 <HAL_TIM_ConfigClockSource>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d08:	f001 f9fc 	bl	8004104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d0c:	482d      	ldr	r0, [pc, #180]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002d0e:	f00b fa99 	bl	800e244 <HAL_TIM_PWM_Init>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002d18:	f001 f9f4 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d20:	2300      	movs	r3, #0
 8002d22:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	4825      	ldr	r0, [pc, #148]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002d30:	f00c f98a 	bl	800f048 <HAL_TIMEx_MasterConfigSynchronization>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002d3a:	f001 f9e3 	bl	8004104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d3e:	2360      	movs	r3, #96	@ 0x60
 8002d40:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d46:	2300      	movs	r3, #0
 8002d48:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d5a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d5e:	2200      	movs	r2, #0
 8002d60:	4619      	mov	r1, r3
 8002d62:	4818      	ldr	r0, [pc, #96]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002d64:	f00b fbcc 	bl	800e500 <HAL_TIM_PWM_ConfigChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002d6e:	f001 f9c9 	bl	8004104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002d94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d98:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	4619      	mov	r1, r3
 8002da6:	4807      	ldr	r0, [pc, #28]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002da8:	f00c f9dc 	bl	800f164 <HAL_TIMEx_ConfigBreakDeadTime>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002db2:	f001 f9a7 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002db6:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <MX_TIM1_Init+0x150>)
 8002db8:	f002 f818 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8002dbc:	bf00      	nop
 8002dbe:	3768      	adds	r7, #104	@ 0x68
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000ff0 	.word	0x20000ff0
 8002dc8:	40010000 	.word	0x40010000

08002dcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b08e      	sub	sp, #56	@ 0x38
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
 8002dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dec:	463b      	mov	r3, r7
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	60da      	str	r2, [r3, #12]
 8002df8:	611a      	str	r2, [r3, #16]
 8002dfa:	615a      	str	r2, [r3, #20]
 8002dfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e06:	4b2b      	ldr	r3, [pc, #172]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e12:	4b28      	ldr	r3, [pc, #160]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295
 8002e18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e1a:	4b26      	ldr	r3, [pc, #152]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e20:	4b24      	ldr	r3, [pc, #144]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e26:	4823      	ldr	r0, [pc, #140]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e28:	f00b f93d 	bl	800e0a6 <HAL_TIM_Base_Init>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e32:	f001 f967 	bl	8004104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002e40:	4619      	mov	r1, r3
 8002e42:	481c      	ldr	r0, [pc, #112]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e44:	f00b fc70 	bl	800e728 <HAL_TIM_ConfigClockSource>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002e4e:	f001 f959 	bl	8004104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e52:	4818      	ldr	r0, [pc, #96]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e54:	f00b f9f6 	bl	800e244 <HAL_TIM_PWM_Init>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002e5e:	f001 f951 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e6a:	f107 031c 	add.w	r3, r7, #28
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4810      	ldr	r0, [pc, #64]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e72:	f00c f8e9 	bl	800f048 <HAL_TIMEx_MasterConfigSynchronization>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002e7c:	f001 f942 	bl	8004104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e80:	2360      	movs	r3, #96	@ 0x60
 8002e82:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e90:	463b      	mov	r3, r7
 8002e92:	2200      	movs	r2, #0
 8002e94:	4619      	mov	r1, r3
 8002e96:	4807      	ldr	r0, [pc, #28]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002e98:	f00b fb32 	bl	800e500 <HAL_TIM_PWM_ConfigChannel>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002ea2:	f001 f92f 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ea6:	4803      	ldr	r0, [pc, #12]	@ (8002eb4 <MX_TIM2_Init+0xe8>)
 8002ea8:	f001 ffa0 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8002eac:	bf00      	nop
 8002eae:	3738      	adds	r7, #56	@ 0x38
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	2000103c 	.word	0x2000103c

08002eb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08e      	sub	sp, #56	@ 0x38
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ebe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ed8:	463b      	mov	r3, r7
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	605a      	str	r2, [r3, #4]
 8002ee0:	609a      	str	r2, [r3, #8]
 8002ee2:	60da      	str	r2, [r3, #12]
 8002ee4:	611a      	str	r2, [r3, #16]
 8002ee6:	615a      	str	r2, [r3, #20]
 8002ee8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eea:	4b2d      	ldr	r3, [pc, #180]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002eec:	4a2d      	ldr	r2, [pc, #180]	@ (8002fa4 <MX_TIM3_Init+0xec>)
 8002eee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002efc:	4b28      	ldr	r3, [pc, #160]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f04:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f0a:	4b25      	ldr	r3, [pc, #148]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f10:	4823      	ldr	r0, [pc, #140]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002f12:	f00b f8c8 	bl	800e0a6 <HAL_TIM_Base_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002f1c:	f001 f8f2 	bl	8004104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	481c      	ldr	r0, [pc, #112]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002f2e:	f00b fbfb 	bl	800e728 <HAL_TIM_ConfigClockSource>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002f38:	f001 f8e4 	bl	8004104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002f3c:	4818      	ldr	r0, [pc, #96]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002f3e:	f00b f981 	bl	800e244 <HAL_TIM_PWM_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002f48:	f001 f8dc 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f54:	f107 031c 	add.w	r3, r7, #28
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4811      	ldr	r0, [pc, #68]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002f5c:	f00c f874 	bl	800f048 <HAL_TIMEx_MasterConfigSynchronization>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002f66:	f001 f8cd 	bl	8004104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f6a:	2360      	movs	r3, #96	@ 0x60
 8002f6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f7a:	463b      	mov	r3, r7
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4807      	ldr	r0, [pc, #28]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002f82:	f00b fabd 	bl	800e500 <HAL_TIM_PWM_ConfigChannel>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002f8c:	f001 f8ba 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002f90:	4803      	ldr	r0, [pc, #12]	@ (8002fa0 <MX_TIM3_Init+0xe8>)
 8002f92:	f001 ff2b 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8002f96:	bf00      	nop
 8002f98:	3738      	adds	r7, #56	@ 0x38
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20001088 	.word	0x20001088
 8002fa4:	40000400 	.word	0x40000400

08002fa8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08e      	sub	sp, #56	@ 0x38
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fbc:	f107 031c 	add.w	r3, r7, #28
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fc8:	463b      	mov	r3, r7
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	611a      	str	r2, [r3, #16]
 8002fd6:	615a      	str	r2, [r3, #20]
 8002fd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002fda:	4b2d      	ldr	r3, [pc, #180]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8002fdc:	4a2d      	ldr	r2, [pc, #180]	@ (8003094 <MX_TIM5_Init+0xec>)
 8002fde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002fec:	4b28      	ldr	r3, [pc, #160]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8002fee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ff4:	4b26      	ldr	r3, [pc, #152]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ffa:	4b25      	ldr	r3, [pc, #148]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003000:	4823      	ldr	r0, [pc, #140]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8003002:	f00b f850 	bl	800e0a6 <HAL_TIM_Base_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800300c:	f001 f87a 	bl	8004104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003010:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003016:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800301a:	4619      	mov	r1, r3
 800301c:	481c      	ldr	r0, [pc, #112]	@ (8003090 <MX_TIM5_Init+0xe8>)
 800301e:	f00b fb83 	bl	800e728 <HAL_TIM_ConfigClockSource>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8003028:	f001 f86c 	bl	8004104 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800302c:	4818      	ldr	r0, [pc, #96]	@ (8003090 <MX_TIM5_Init+0xe8>)
 800302e:	f00b f909 	bl	800e244 <HAL_TIM_PWM_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8003038:	f001 f864 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003044:	f107 031c 	add.w	r3, r7, #28
 8003048:	4619      	mov	r1, r3
 800304a:	4811      	ldr	r0, [pc, #68]	@ (8003090 <MX_TIM5_Init+0xe8>)
 800304c:	f00b fffc 	bl	800f048 <HAL_TIMEx_MasterConfigSynchronization>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003056:	f001 f855 	bl	8004104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305a:	2360      	movs	r3, #96	@ 0x60
 800305c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800305e:	2300      	movs	r3, #0
 8003060:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003062:	2300      	movs	r3, #0
 8003064:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800306a:	463b      	mov	r3, r7
 800306c:	220c      	movs	r2, #12
 800306e:	4619      	mov	r1, r3
 8003070:	4807      	ldr	r0, [pc, #28]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8003072:	f00b fa45 	bl	800e500 <HAL_TIM_PWM_ConfigChannel>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800307c:	f001 f842 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003080:	4803      	ldr	r0, [pc, #12]	@ (8003090 <MX_TIM5_Init+0xe8>)
 8003082:	f001 feb3 	bl	8004dec <HAL_TIM_MspPostInit>

}
 8003086:	bf00      	nop
 8003088:	3738      	adds	r7, #56	@ 0x38
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200010d4 	.word	0x200010d4
 8003094:	40000c00 	.word	0x40000c00

08003098 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800309e:	f107 0310 	add.w	r3, r7, #16
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80030b6:	4b20      	ldr	r3, [pc, #128]	@ (8003138 <MX_TIM8_Init+0xa0>)
 80030b8:	4a20      	ldr	r2, [pc, #128]	@ (800313c <MX_TIM8_Init+0xa4>)
 80030ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80030bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003138 <MX_TIM8_Init+0xa0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003138 <MX_TIM8_Init+0xa0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <MX_TIM8_Init+0xa0>)
 80030ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <MX_TIM8_Init+0xa0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80030d6:	4b18      	ldr	r3, [pc, #96]	@ (8003138 <MX_TIM8_Init+0xa0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030dc:	4b16      	ldr	r3, [pc, #88]	@ (8003138 <MX_TIM8_Init+0xa0>)
 80030de:	2200      	movs	r2, #0
 80030e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80030e2:	4815      	ldr	r0, [pc, #84]	@ (8003138 <MX_TIM8_Init+0xa0>)
 80030e4:	f00a ffdf 	bl	800e0a6 <HAL_TIM_Base_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80030ee:	f001 f809 	bl	8004104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80030f8:	f107 0310 	add.w	r3, r7, #16
 80030fc:	4619      	mov	r1, r3
 80030fe:	480e      	ldr	r0, [pc, #56]	@ (8003138 <MX_TIM8_Init+0xa0>)
 8003100:	f00b fb12 	bl	800e728 <HAL_TIM_ConfigClockSource>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 800310a:	f000 fffb 	bl	8004104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	4619      	mov	r1, r3
 800311e:	4806      	ldr	r0, [pc, #24]	@ (8003138 <MX_TIM8_Init+0xa0>)
 8003120:	f00b ff92 	bl	800f048 <HAL_TIMEx_MasterConfigSynchronization>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800312a:	f000 ffeb 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800312e:	bf00      	nop
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	20001120 	.word	0x20001120
 800313c:	40010400 	.word	0x40010400

08003140 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b088      	sub	sp, #32
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	615a      	str	r2, [r3, #20]
 8003156:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003158:	4b1a      	ldr	r3, [pc, #104]	@ (80031c4 <MX_TIM12_Init+0x84>)
 800315a:	4a1b      	ldr	r2, [pc, #108]	@ (80031c8 <MX_TIM12_Init+0x88>)
 800315c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800315e:	4b19      	ldr	r3, [pc, #100]	@ (80031c4 <MX_TIM12_Init+0x84>)
 8003160:	2200      	movs	r2, #0
 8003162:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003164:	4b17      	ldr	r3, [pc, #92]	@ (80031c4 <MX_TIM12_Init+0x84>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800316a:	4b16      	ldr	r3, [pc, #88]	@ (80031c4 <MX_TIM12_Init+0x84>)
 800316c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003170:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003172:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <MX_TIM12_Init+0x84>)
 8003174:	2200      	movs	r2, #0
 8003176:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003178:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <MX_TIM12_Init+0x84>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800317e:	4811      	ldr	r0, [pc, #68]	@ (80031c4 <MX_TIM12_Init+0x84>)
 8003180:	f00b f860 	bl	800e244 <HAL_TIM_PWM_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800318a:	f000 ffbb 	bl	8004104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800318e:	2360      	movs	r3, #96	@ 0x60
 8003190:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800319e:	1d3b      	adds	r3, r7, #4
 80031a0:	2200      	movs	r2, #0
 80031a2:	4619      	mov	r1, r3
 80031a4:	4807      	ldr	r0, [pc, #28]	@ (80031c4 <MX_TIM12_Init+0x84>)
 80031a6:	f00b f9ab 	bl	800e500 <HAL_TIM_PWM_ConfigChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80031b0:	f000 ffa8 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80031b4:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <MX_TIM12_Init+0x84>)
 80031b6:	f001 fe19 	bl	8004dec <HAL_TIM_MspPostInit>

}
 80031ba:	bf00      	nop
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	2000116c 	.word	0x2000116c
 80031c8:	40001800 	.word	0x40001800

080031cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031d0:	4b14      	ldr	r3, [pc, #80]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 80031d2:	4a15      	ldr	r2, [pc, #84]	@ (8003228 <MX_USART1_UART_Init+0x5c>)
 80031d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031d6:	4b13      	ldr	r3, [pc, #76]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 80031d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 80031f2:	220c      	movs	r2, #12
 80031f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031fc:	4b09      	ldr	r3, [pc, #36]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003202:	4b08      	ldr	r3, [pc, #32]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 8003204:	2200      	movs	r2, #0
 8003206:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 800320a:	2200      	movs	r2, #0
 800320c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800320e:	4805      	ldr	r0, [pc, #20]	@ (8003224 <MX_USART1_UART_Init+0x58>)
 8003210:	f00c f844 	bl	800f29c <HAL_UART_Init>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800321a:	f000 ff73 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200011b8 	.word	0x200011b8
 8003228:	40011000 	.word	0x40011000

0800322c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003230:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 8003232:	4a15      	ldr	r2, [pc, #84]	@ (8003288 <MX_USART6_UART_Init+0x5c>)
 8003234:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003236:	4b13      	ldr	r3, [pc, #76]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 8003238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800323c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800323e:	4b11      	ldr	r3, [pc, #68]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800324a:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 8003252:	220c      	movs	r2, #12
 8003254:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003256:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 8003258:	2200      	movs	r2, #0
 800325a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800325c:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 800325e:	2200      	movs	r2, #0
 8003260:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003262:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 8003264:	2200      	movs	r2, #0
 8003266:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003268:	4b06      	ldr	r3, [pc, #24]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 800326a:	2200      	movs	r2, #0
 800326c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800326e:	4805      	ldr	r0, [pc, #20]	@ (8003284 <MX_USART6_UART_Init+0x58>)
 8003270:	f00c f814 	bl	800f29c <HAL_UART_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800327a:	f000 ff43 	bl	8004104 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20001240 	.word	0x20001240
 8003288:	40011400 	.word	0x40011400

0800328c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	611a      	str	r2, [r3, #16]
 80032a0:	615a      	str	r2, [r3, #20]
 80032a2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80032a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003324 <MX_FMC_Init+0x98>)
 80032a6:	4a20      	ldr	r2, [pc, #128]	@ (8003328 <MX_FMC_Init+0x9c>)
 80032a8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80032aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <MX_FMC_Init+0x98>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80032b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003324 <MX_FMC_Init+0x98>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80032b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003324 <MX_FMC_Init+0x98>)
 80032b8:	2204      	movs	r2, #4
 80032ba:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80032bc:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <MX_FMC_Init+0x98>)
 80032be:	2210      	movs	r2, #16
 80032c0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80032c2:	4b18      	ldr	r3, [pc, #96]	@ (8003324 <MX_FMC_Init+0x98>)
 80032c4:	2240      	movs	r2, #64	@ 0x40
 80032c6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80032c8:	4b16      	ldr	r3, [pc, #88]	@ (8003324 <MX_FMC_Init+0x98>)
 80032ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80032ce:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80032d0:	4b14      	ldr	r3, [pc, #80]	@ (8003324 <MX_FMC_Init+0x98>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80032d6:	4b13      	ldr	r3, [pc, #76]	@ (8003324 <MX_FMC_Init+0x98>)
 80032d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032dc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80032de:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <MX_FMC_Init+0x98>)
 80032e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80032e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80032e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003324 <MX_FMC_Init+0x98>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80032ec:	2302      	movs	r3, #2
 80032ee:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80032f0:	2307      	movs	r3, #7
 80032f2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80032f4:	2304      	movs	r3, #4
 80032f6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80032f8:	2307      	movs	r3, #7
 80032fa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80032fc:	2303      	movs	r3, #3
 80032fe:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8003300:	2302      	movs	r3, #2
 8003302:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8003304:	2302      	movs	r3, #2
 8003306:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	4619      	mov	r1, r3
 800330c:	4805      	ldr	r0, [pc, #20]	@ (8003324 <MX_FMC_Init+0x98>)
 800330e:	f00a fd8e 	bl	800de2e <HAL_SDRAM_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8003318:	f000 fef4 	bl	8004104 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800331c:	bf00      	nop
 800331e:	3720      	adds	r7, #32
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	200012c8 	.word	0x200012c8
 8003328:	a0000140 	.word	0xa0000140

0800332c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b090      	sub	sp, #64	@ 0x40
 8003330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003332:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003342:	4bb0      	ldr	r3, [pc, #704]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003346:	4aaf      	ldr	r2, [pc, #700]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003348:	f043 0310 	orr.w	r3, r3, #16
 800334c:	6313      	str	r3, [r2, #48]	@ 0x30
 800334e:	4bad      	ldr	r3, [pc, #692]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800335a:	4baa      	ldr	r3, [pc, #680]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	4aa9      	ldr	r2, [pc, #676]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003364:	6313      	str	r3, [r2, #48]	@ 0x30
 8003366:	4ba7      	ldr	r3, [pc, #668]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800336a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800336e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003372:	4ba4      	ldr	r3, [pc, #656]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4aa3      	ldr	r2, [pc, #652]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003378:	f043 0302 	orr.w	r3, r3, #2
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4ba1      	ldr	r3, [pc, #644]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	623b      	str	r3, [r7, #32]
 8003388:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	4b9e      	ldr	r3, [pc, #632]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	4a9d      	ldr	r2, [pc, #628]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	6313      	str	r3, [r2, #48]	@ 0x30
 8003396:	4b9b      	ldr	r3, [pc, #620]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a2:	4b98      	ldr	r3, [pc, #608]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	4a97      	ldr	r2, [pc, #604]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ae:	4b95      	ldr	r3, [pc, #596]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	61bb      	str	r3, [r7, #24]
 80033b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ba:	4b92      	ldr	r3, [pc, #584]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	4a91      	ldr	r2, [pc, #580]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	617b      	str	r3, [r7, #20]
 80033d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033d2:	4b8c      	ldr	r3, [pc, #560]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	4a8b      	ldr	r2, [pc, #556]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80033de:	4b89      	ldr	r3, [pc, #548]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033ea:	4b86      	ldr	r3, [pc, #536]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	4a85      	ldr	r2, [pc, #532]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f6:	4b83      	ldr	r3, [pc, #524]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003402:	4b80      	ldr	r3, [pc, #512]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	4a7f      	ldr	r2, [pc, #508]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003408:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800340c:	6313      	str	r3, [r2, #48]	@ 0x30
 800340e:	4b7d      	ldr	r3, [pc, #500]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800341a:	4b7a      	ldr	r3, [pc, #488]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341e:	4a79      	ldr	r2, [pc, #484]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003420:	f043 0320 	orr.w	r3, r3, #32
 8003424:	6313      	str	r3, [r2, #48]	@ 0x30
 8003426:	4b77      	ldr	r3, [pc, #476]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	607b      	str	r3, [r7, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003432:	4b74      	ldr	r3, [pc, #464]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	4a73      	ldr	r2, [pc, #460]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003438:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800343c:	6313      	str	r3, [r2, #48]	@ 0x30
 800343e:	4b71      	ldr	r3, [pc, #452]	@ (8003604 <MX_GPIO_Init+0x2d8>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800344a:	2201      	movs	r2, #1
 800344c:	2120      	movs	r1, #32
 800344e:	486e      	ldr	r0, [pc, #440]	@ (8003608 <MX_GPIO_Init+0x2dc>)
 8003450:	f005 f8c6 	bl	80085e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003454:	2200      	movs	r2, #0
 8003456:	210c      	movs	r1, #12
 8003458:	486c      	ldr	r0, [pc, #432]	@ (800360c <MX_GPIO_Init+0x2e0>)
 800345a:	f005 f8c1 	bl	80085e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800345e:	2201      	movs	r2, #1
 8003460:	2108      	movs	r1, #8
 8003462:	486b      	ldr	r0, [pc, #428]	@ (8003610 <MX_GPIO_Init+0x2e4>)
 8003464:	f005 f8bc 	bl	80085e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8003468:	2201      	movs	r2, #1
 800346a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800346e:	4867      	ldr	r0, [pc, #412]	@ (800360c <MX_GPIO_Init+0x2e0>)
 8003470:	f005 f8b6 	bl	80085e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003474:	2200      	movs	r2, #0
 8003476:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800347a:	4866      	ldr	r0, [pc, #408]	@ (8003614 <MX_GPIO_Init+0x2e8>)
 800347c:	f005 f8b0 	bl	80085e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003480:	2200      	movs	r2, #0
 8003482:	21c8      	movs	r1, #200	@ 0xc8
 8003484:	4864      	ldr	r0, [pc, #400]	@ (8003618 <MX_GPIO_Init+0x2ec>)
 8003486:	f005 f8ab 	bl	80085e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800348a:	2308      	movs	r3, #8
 800348c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800348e:	2300      	movs	r3, #0
 8003490:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003492:	2300      	movs	r3, #0
 8003494:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003496:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800349a:	4619      	mov	r1, r3
 800349c:	485f      	ldr	r0, [pc, #380]	@ (800361c <MX_GPIO_Init+0x2f0>)
 800349e:	f004 fedb 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80034a2:	f643 4323 	movw	r3, #15395	@ 0x3c23
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a8:	2302      	movs	r3, #2
 80034aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b0:	2303      	movs	r3, #3
 80034b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80034b4:	230a      	movs	r3, #10
 80034b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034bc:	4619      	mov	r1, r3
 80034be:	4858      	ldr	r0, [pc, #352]	@ (8003620 <MX_GPIO_Init+0x2f4>)
 80034c0:	f004 feca 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80034c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034ca:	2300      	movs	r3, #0
 80034cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80034d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034d6:	4619      	mov	r1, r3
 80034d8:	4852      	ldr	r0, [pc, #328]	@ (8003624 <MX_GPIO_Init+0x2f8>)
 80034da:	f004 febd 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80034de:	2340      	movs	r3, #64	@ 0x40
 80034e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80034e2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e8:	2300      	movs	r3, #0
 80034ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80034ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034f0:	4619      	mov	r1, r3
 80034f2:	4845      	ldr	r0, [pc, #276]	@ (8003608 <MX_GPIO_Init+0x2dc>)
 80034f4:	f004 feb0 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80034f8:	2320      	movs	r3, #32
 80034fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034fc:	2301      	movs	r3, #1
 80034fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003500:	2300      	movs	r3, #0
 8003502:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003504:	2300      	movs	r3, #0
 8003506:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003508:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800350c:	4619      	mov	r1, r3
 800350e:	483e      	ldr	r0, [pc, #248]	@ (8003608 <MX_GPIO_Init+0x2dc>)
 8003510:	f004 fea2 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8003514:	f241 030c 	movw	r3, #4108	@ 0x100c
 8003518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800351a:	2301      	movs	r3, #1
 800351c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003526:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800352a:	4619      	mov	r1, r3
 800352c:	4837      	ldr	r0, [pc, #220]	@ (800360c <MX_GPIO_Init+0x2e0>)
 800352e:	f004 fe93 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003532:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003536:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003538:	2300      	movs	r3, #0
 800353a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353c:	2300      	movs	r3, #0
 800353e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003540:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003544:	4619      	mov	r1, r3
 8003546:	4838      	ldr	r0, [pc, #224]	@ (8003628 <MX_GPIO_Init+0x2fc>)
 8003548:	f004 fe86 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800354c:	2308      	movs	r3, #8
 800354e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003550:	2301      	movs	r3, #1
 8003552:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003558:	2300      	movs	r3, #0
 800355a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800355c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003560:	4619      	mov	r1, r3
 8003562:	482b      	ldr	r0, [pc, #172]	@ (8003610 <MX_GPIO_Init+0x2e4>)
 8003564:	f004 fe78 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003568:	2310      	movs	r3, #16
 800356a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800356c:	2300      	movs	r3, #0
 800356e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003574:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003578:	4619      	mov	r1, r3
 800357a:	4823      	ldr	r0, [pc, #140]	@ (8003608 <MX_GPIO_Init+0x2dc>)
 800357c:	f004 fe6c 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003580:	f248 0304 	movw	r3, #32772	@ 0x8004
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003586:	2300      	movs	r3, #0
 8003588:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800358e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003592:	4619      	mov	r1, r3
 8003594:	481f      	ldr	r0, [pc, #124]	@ (8003614 <MX_GPIO_Init+0x2e8>)
 8003596:	f004 fe5f 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800359a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800359e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035a0:	2301      	movs	r3, #1
 80035a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a4:	2300      	movs	r3, #0
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80035ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035b0:	4619      	mov	r1, r3
 80035b2:	4818      	ldr	r0, [pc, #96]	@ (8003614 <MX_GPIO_Init+0x2e8>)
 80035b4:	f004 fe50 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80035b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80035be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c4:	2300      	movs	r3, #0
 80035c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80035c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035cc:	4619      	mov	r1, r3
 80035ce:	480f      	ldr	r0, [pc, #60]	@ (800360c <MX_GPIO_Init+0x2e0>)
 80035d0:	f004 fe42 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80035d4:	2310      	movs	r3, #16
 80035d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d8:	2302      	movs	r3, #2
 80035da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035dc:	2300      	movs	r3, #0
 80035de:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e0:	2303      	movs	r3, #3
 80035e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80035e4:	230a      	movs	r3, #10
 80035e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80035e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035ec:	4619      	mov	r1, r3
 80035ee:	4809      	ldr	r0, [pc, #36]	@ (8003614 <MX_GPIO_Init+0x2e8>)
 80035f0:	f004 fe32 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80035f4:	23c8      	movs	r3, #200	@ 0xc8
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035f8:	2301      	movs	r3, #1
 80035fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035fc:	2300      	movs	r3, #0
 80035fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003600:	e014      	b.n	800362c <MX_GPIO_Init+0x300>
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	40020c00 	.word	0x40020c00
 800360c:	40022000 	.word	0x40022000
 8003610:	40022800 	.word	0x40022800
 8003614:	40021c00 	.word	0x40021c00
 8003618:	40021800 	.word	0x40021800
 800361c:	40021000 	.word	0x40021000
 8003620:	40020400 	.word	0x40020400
 8003624:	40022400 	.word	0x40022400
 8003628:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362c:	2300      	movs	r3, #0
 800362e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003630:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003634:	4619      	mov	r1, r3
 8003636:	4819      	ldr	r0, [pc, #100]	@ (800369c <MX_GPIO_Init+0x370>)
 8003638:	f004 fe0e 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800363c:	2305      	movs	r3, #5
 800363e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003640:	2302      	movs	r3, #2
 8003642:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003644:	2300      	movs	r3, #0
 8003646:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003648:	2303      	movs	r3, #3
 800364a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800364c:	230a      	movs	r3, #10
 800364e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003650:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003654:	4619      	mov	r1, r3
 8003656:	4812      	ldr	r0, [pc, #72]	@ (80036a0 <MX_GPIO_Init+0x374>)
 8003658:	f004 fdfe 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800365c:	2304      	movs	r3, #4
 800365e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003660:	2300      	movs	r3, #0
 8003662:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	2300      	movs	r3, #0
 8003666:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003668:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800366c:	4619      	mov	r1, r3
 800366e:	480b      	ldr	r0, [pc, #44]	@ (800369c <MX_GPIO_Init+0x370>)
 8003670:	f004 fdf2 	bl	8008258 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8003674:	2328      	movs	r3, #40	@ 0x28
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003678:	2302      	movs	r3, #2
 800367a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003680:	2303      	movs	r3, #3
 8003682:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8003684:	230a      	movs	r3, #10
 8003686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003688:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800368c:	4619      	mov	r1, r3
 800368e:	4805      	ldr	r0, [pc, #20]	@ (80036a4 <MX_GPIO_Init+0x378>)
 8003690:	f004 fde2 	bl	8008258 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003694:	bf00      	nop
 8003696:	3740      	adds	r7, #64	@ 0x40
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021800 	.word	0x40021800
 80036a0:	40020800 	.word	0x40020800
 80036a4:	40020000 	.word	0x40020000

080036a8 <_initialize_sd_card_and_test>:
/**
 * @brief SD 카드 초기화 및 기본 기능 테스트
 * @return SD 초기화 결과 (SDSTORAGE_OK: 성공, 기타: 실패)
 */
static int _initialize_sd_card_and_test(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Starting SD card basic functionality test...");
 80036ae:	4920      	ldr	r1, [pc, #128]	@ (8003730 <_initialize_sd_card_and_test+0x88>)
 80036b0:	2001      	movs	r0, #1
 80036b2:	f002 f865 	bl	8005780 <LOGGER_SendFormatted>
    
    // SD 초기화 시도
    LOG_INFO("📤 [TX_TASK] Attempting SD card initialization...");
 80036b6:	491f      	ldr	r1, [pc, #124]	@ (8003734 <_initialize_sd_card_and_test+0x8c>)
 80036b8:	2001      	movs	r0, #1
 80036ba:	f002 f861 	bl	8005780 <LOGGER_SendFormatted>
    int sd_result = SDStorage_Init();
 80036be:	f7fe f86b 	bl	8001798 <SDStorage_Init>
 80036c2:	60f8      	str	r0, [r7, #12]
    
    if (sd_result == SDSTORAGE_OK) {
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d124      	bne.n	8003714 <_initialize_sd_card_and_test+0x6c>
        LOG_INFO("✅ [TX_TASK] SD card initialization SUCCESS");
 80036ca:	491b      	ldr	r1, [pc, #108]	@ (8003738 <_initialize_sd_card_and_test+0x90>)
 80036cc:	2001      	movs	r0, #1
 80036ce:	f002 f857 	bl	8005780 <LOGGER_SendFormatted>
        
        // 기본 쓰기 테스트
        LOG_INFO("📤 [TX_TASK] Testing SD card write operation...");
 80036d2:	491a      	ldr	r1, [pc, #104]	@ (800373c <_initialize_sd_card_and_test+0x94>)
 80036d4:	2001      	movs	r0, #1
 80036d6:	f002 f853 	bl	8005780 <LOGGER_SendFormatted>
        const char* test_message = "SD Card Test - Hello World from FreeRTOS!\n";
 80036da:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <_initialize_sd_card_and_test+0x98>)
 80036dc:	60bb      	str	r3, [r7, #8]
        int write_result = SDStorage_WriteLog(test_message, strlen(test_message));
 80036de:	68b8      	ldr	r0, [r7, #8]
 80036e0:	f7fc fda0 	bl	8000224 <strlen>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4619      	mov	r1, r3
 80036e8:	68b8      	ldr	r0, [r7, #8]
 80036ea:	f7fe f8bb 	bl	8001864 <SDStorage_WriteLog>
 80036ee:	6078      	str	r0, [r7, #4]
        
        if (write_result == SDSTORAGE_OK) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <_initialize_sd_card_and_test+0x60>
            LOG_INFO("✅ [TX_TASK] SD card write operation SUCCESS");
 80036f6:	4913      	ldr	r1, [pc, #76]	@ (8003744 <_initialize_sd_card_and_test+0x9c>)
 80036f8:	2001      	movs	r0, #1
 80036fa:	f002 f841 	bl	8005780 <LOGGER_SendFormatted>
            LOG_INFO("🎉 [TX_TASK] SD card functionality confirmed - ready for long-term logging");
 80036fe:	4912      	ldr	r1, [pc, #72]	@ (8003748 <_initialize_sd_card_and_test+0xa0>)
 8003700:	2001      	movs	r0, #1
 8003702:	f002 f83d 	bl	8005780 <LOGGER_SendFormatted>
 8003706:	e00e      	b.n	8003726 <_initialize_sd_card_and_test+0x7e>
        } else {
            LOG_ERROR("❌ [TX_TASK] SD card write operation FAILED (code: %d)", write_result);
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	4910      	ldr	r1, [pc, #64]	@ (800374c <_initialize_sd_card_and_test+0xa4>)
 800370c:	2003      	movs	r0, #3
 800370e:	f002 f837 	bl	8005780 <LOGGER_SendFormatted>
 8003712:	e008      	b.n	8003726 <_initialize_sd_card_and_test+0x7e>
        }
    } else {
        LOG_ERROR("❌ [TX_TASK] SD card initialization FAILED (code: %d)", sd_result);
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	490e      	ldr	r1, [pc, #56]	@ (8003750 <_initialize_sd_card_and_test+0xa8>)
 8003718:	2003      	movs	r0, #3
 800371a:	f002 f831 	bl	8005780 <LOGGER_SendFormatted>
        LOG_INFO("📺 [TX_TASK] Continuing with terminal-only logging");
 800371e:	490d      	ldr	r1, [pc, #52]	@ (8003754 <_initialize_sd_card_and_test+0xac>)
 8003720:	2001      	movs	r0, #1
 8003722:	f002 f82d 	bl	8005780 <LOGGER_SendFormatted>
    }
    
    return sd_result;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	0801b144 	.word	0x0801b144
 8003734:	0801b180 	.word	0x0801b180
 8003738:	0801b1b4 	.word	0x0801b1b4
 800373c:	0801b1e4 	.word	0x0801b1e4
 8003740:	0801b218 	.word	0x0801b218
 8003744:	0801b244 	.word	0x0801b244
 8003748:	0801b274 	.word	0x0801b274
 800374c:	0801b2c4 	.word	0x0801b2c4
 8003750:	0801b2fc 	.word	0x0801b2fc
 8003754:	0801b334 	.word	0x0801b334

08003758 <_setup_lora_uart_connection>:
/**
 * @brief LoRa UART 연결 설정
 * @return UART 연결 결과 (UART_STATUS_OK: 성공, 기타: 실패)
 */
static int _setup_lora_uart_connection(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Connecting to UART for LoRa communication...");
 800375e:	490e      	ldr	r1, [pc, #56]	@ (8003798 <_setup_lora_uart_connection+0x40>)
 8003760:	2001      	movs	r0, #1
 8003762:	f002 f80d 	bl	8005780 <LOGGER_SendFormatted>
    UartStatus uart_status = UART_Connect("UART6");
 8003766:	480d      	ldr	r0, [pc, #52]	@ (800379c <_setup_lora_uart_connection+0x44>)
 8003768:	f002 f9ca 	bl	8005b00 <UART_Connect>
 800376c:	4603      	mov	r3, r0
 800376e:	71fb      	strb	r3, [r7, #7]
    
    if (uart_status == UART_STATUS_OK) {
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <_setup_lora_uart_connection+0x28>
        LOG_INFO("✅ [TX_TASK] UART connection successful");
 8003776:	490a      	ldr	r1, [pc, #40]	@ (80037a0 <_setup_lora_uart_connection+0x48>)
 8003778:	2001      	movs	r0, #1
 800377a:	f002 f801 	bl	8005780 <LOGGER_SendFormatted>
 800377e:	e005      	b.n	800378c <_setup_lora_uart_connection+0x34>
    } else {
        LOG_ERROR("❌ [TX_TASK] UART connection failed (status: %d)", uart_status);
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	461a      	mov	r2, r3
 8003784:	4907      	ldr	r1, [pc, #28]	@ (80037a4 <_setup_lora_uart_connection+0x4c>)
 8003786:	2003      	movs	r0, #3
 8003788:	f001 fffa 	bl	8005780 <LOGGER_SendFormatted>
    }
    
    return uart_status;
 800378c:	79fb      	ldrb	r3, [r7, #7]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	0801b36c 	.word	0x0801b36c
 800379c:	0801b3a8 	.word	0x0801b3a8
 80037a0:	0801b3b0 	.word	0x0801b3b0
 80037a4:	0801b3dc 	.word	0x0801b3dc

080037a8 <_initialize_lora_context>:
/**
 * @brief LoRa 컨텍스트 초기화
 * @param lora_ctx LoRa 컨텍스트 포인터
 */
static void _initialize_lora_context(LoraStarterContext* lora_ctx)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	6078      	str	r0, [r7, #4]
    LOG_INFO("📤 [TX_TASK] Waiting for LoRa module boot-up (5 seconds - optimized for long-term test)...");
 80037b0:	490f      	ldr	r1, [pc, #60]	@ (80037f0 <_initialize_lora_context+0x48>)
 80037b2:	2001      	movs	r0, #1
 80037b4:	f001 ffe4 	bl	8005780 <LOGGER_SendFormatted>
    osDelay(5000); // 5초 대기 (장기 테스트를 위해 단축)
 80037b8:	f241 3088 	movw	r0, #5000	@ 0x1388
 80037bc:	f011 fc62 	bl	8015084 <osDelay>
    
    // LoraStarter 컨텍스트 초기화 (TDD 검증된 기본 설정 사용)
    LoraStarter_InitWithDefaults(lora_ctx, "TEST");
 80037c0:	490c      	ldr	r1, [pc, #48]	@ (80037f4 <_initialize_lora_context+0x4c>)
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7fd f806 	bl	80007d4 <LoraStarter_InitWithDefaults>
    
    LOG_INFO("=== LoRa Initialization ===");
 80037c8:	490b      	ldr	r1, [pc, #44]	@ (80037f8 <_initialize_lora_context+0x50>)
 80037ca:	2001      	movs	r0, #1
 80037cc:	f001 ffd8 	bl	8005780 <LOGGER_SendFormatted>
    LOG_INFO("📤 Commands: %d, Message: %s, Max retries: %d", 
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69d9      	ldr	r1, [r3, #28]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	460b      	mov	r3, r1
 80037e0:	4906      	ldr	r1, [pc, #24]	@ (80037fc <_initialize_lora_context+0x54>)
 80037e2:	2001      	movs	r0, #1
 80037e4:	f001 ffcc 	bl	8005780 <LOGGER_SendFormatted>
             lora_ctx->num_commands, lora_ctx->send_message, lora_ctx->max_retry_count);
}
 80037e8:	bf00      	nop
 80037ea:	3708      	adds	r7, #8
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	0801b410 	.word	0x0801b410
 80037f4:	0801b470 	.word	0x0801b470
 80037f8:	0801b478 	.word	0x0801b478
 80037fc:	0801b494 	.word	0x0801b494

08003800 <_configure_logging_mode>:
/**
 * @brief SD 초기화 결과에 따른 로깅 모드 설정
 * @param sd_result SD 초기화 결과
 */
static void _configure_logging_mode(int sd_result)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
    // SD 카드 로깅 설정 (간단한 방식)
    if (sd_result == SDSTORAGE_OK) {
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d114      	bne.n	8003838 <_configure_logging_mode+0x38>
        LOG_INFO("🗂️ LoRa logs will be saved to SD card: lora_logs/");
 800380e:	4913      	ldr	r1, [pc, #76]	@ (800385c <_configure_logging_mode+0x5c>)
 8003810:	2001      	movs	r0, #1
 8003812:	f001 ffb5 	bl	8005780 <LOGGER_SendFormatted>
        
        // LoRa 로깅 모드 설정 - 초기화 단계에서는 터미널만 사용
        LOGGER_SetMode(LOGGER_MODE_DUAL);  // 터미널 + SD 동시 출력
 8003816:	2002      	movs	r0, #2
 8003818:	f001 ff8e 	bl	8005738 <LOGGER_SetMode>
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);  // 터미널에서 모든 로그 확인 가능
 800381c:	2001      	movs	r0, #1
 800381e:	f001 ff4f 	bl	80056c0 <LOGGER_SetFilterLevel>
        LOGGER_SetSDFilterLevel(LOG_LEVEL_WARN);  // SD 카드에는 WARN 이상만 저장
 8003822:	2002      	movs	r0, #2
 8003824:	f001 ff5c 	bl	80056e0 <LOGGER_SetSDFilterLevel>
        LOGGER_EnableSDLogging(false);  // 초기화 완료 전까지 SD 로깅 비활성화
 8003828:	2000      	movs	r0, #0
 800382a:	f001 ff69 	bl	8005700 <LOGGER_EnableSDLogging>
        LOG_WARN("✅ LoRa logging mode: DUAL (Terminal + SD), SD logging will start from JOIN attempts");
 800382e:	490c      	ldr	r1, [pc, #48]	@ (8003860 <_configure_logging_mode+0x60>)
 8003830:	2002      	movs	r0, #2
 8003832:	f001 ffa5 	bl	8005780 <LOGGER_SendFormatted>
        
        LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
        LOG_INFO("📺 LoRa logging mode: Terminal only");
    }
}
 8003836:	e00d      	b.n	8003854 <_configure_logging_mode+0x54>
        LOG_INFO("📺 LoRa logs will be displayed on terminal only (SD not available)");
 8003838:	490a      	ldr	r1, [pc, #40]	@ (8003864 <_configure_logging_mode+0x64>)
 800383a:	2001      	movs	r0, #1
 800383c:	f001 ffa0 	bl	8005780 <LOGGER_SendFormatted>
        LOGGER_SetMode(LOGGER_MODE_TERMINAL_ONLY);
 8003840:	2000      	movs	r0, #0
 8003842:	f001 ff79 	bl	8005738 <LOGGER_SetMode>
        LOGGER_SetFilterLevel(LOG_LEVEL_INFO);
 8003846:	2001      	movs	r0, #1
 8003848:	f001 ff3a 	bl	80056c0 <LOGGER_SetFilterLevel>
        LOG_INFO("📺 LoRa logging mode: Terminal only");
 800384c:	4906      	ldr	r1, [pc, #24]	@ (8003868 <_configure_logging_mode+0x68>)
 800384e:	2001      	movs	r0, #1
 8003850:	f001 ff96 	bl	8005780 <LOGGER_SendFormatted>
}
 8003854:	bf00      	nop
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	0801b4c4 	.word	0x0801b4c4
 8003860:	0801b4fc 	.word	0x0801b4fc
 8003864:	0801b554 	.word	0x0801b554
 8003868:	0801b59c 	.word	0x0801b59c

0800386c <_run_lora_process_loop>:
/**
 * @brief LoRa 프로세스 메인 루프 실행
 * @param lora_ctx LoRa 컨텍스트 포인터
 */
static void _run_lora_process_loop(LoraStarterContext* lora_ctx)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af02      	add	r7, sp, #8
 8003872:	6078      	str	r0, [r7, #4]
    LOG_INFO("📤 [TX_TASK] Starting LoRa process loop...");
 8003874:	497c      	ldr	r1, [pc, #496]	@ (8003a68 <_run_lora_process_loop+0x1fc>)
 8003876:	2001      	movs	r0, #1
 8003878:	f001 ff82 	bl	8005780 <LOGGER_SendFormatted>
    
    for(;;)
    {
        // 수신된 응답이 있으면 LoraStarter에 전달
        const char* rx_data = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	60fb      	str	r3, [r7, #12]
        if (lora_new_response) {
 8003880:	4b7a      	ldr	r3, [pc, #488]	@ (8003a6c <_run_lora_process_loop+0x200>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <_run_lora_process_loop+0x28>
            rx_data = lora_rx_response;
 800388a:	4b79      	ldr	r3, [pc, #484]	@ (8003a70 <_run_lora_process_loop+0x204>)
 800388c:	60fb      	str	r3, [r7, #12]
            lora_new_response = false; // 플래그 클리어
 800388e:	4b77      	ldr	r3, [pc, #476]	@ (8003a6c <_run_lora_process_loop+0x200>)
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
            // 응답 처리 - 로그는 ResponseHandler에서 이미 출력됨
        }
        
        // LoraStarter 프로세스 실행
        LoraStarter_Process(lora_ctx, rx_data);
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fc ffe4 	bl	8000864 <LoraStarter_Process>
        
        // JOIN 성공 후 시간 조회는 LoRa 상태 머신에서 자동 처리됨 (TIMEREQ → LTIME)
        
        // 상태별 처리 간격 및 디버깅 (중요한 상태만)
        static int last_state = -1;
        if (lora_ctx->state != last_state) {
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b74      	ldr	r3, [pc, #464]	@ (8003a74 <_run_lora_process_loop+0x208>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d022      	beq.n	80038f0 <_run_lora_process_loop+0x84>
            // JOIN, SEND, ERROR 등 중요한 상태 변경만 로그 출력
            if (lora_ctx->state == LORA_STATE_SEND_JOIN || 
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d00b      	beq.n	80038ca <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_SEND_PERIODIC ||
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	781b      	ldrb	r3, [r3, #0]
            if (lora_ctx->state == LORA_STATE_SEND_JOIN || 
 80038b6:	2b0a      	cmp	r3, #10
 80038b8:	d007      	beq.n	80038ca <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_DONE ||
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	781b      	ldrb	r3, [r3, #0]
                lora_ctx->state == LORA_STATE_SEND_PERIODIC ||
 80038be:	2b0e      	cmp	r3, #14
 80038c0:	d003      	beq.n	80038ca <_run_lora_process_loop+0x5e>
                lora_ctx->state == LORA_STATE_ERROR) {
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781b      	ldrb	r3, [r3, #0]
                lora_ctx->state == LORA_STATE_DONE ||
 80038c6:	2b0f      	cmp	r3, #15
 80038c8:	d10d      	bne.n	80038e6 <_run_lora_process_loop+0x7a>
                LOG_INFO("[TX_TASK] ⚙️ LoRa State: %d, cmd_index: %d/%d", 
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	4619      	mov	r1, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	4613      	mov	r3, r2
 80038dc:	460a      	mov	r2, r1
 80038de:	4966      	ldr	r1, [pc, #408]	@ (8003a78 <_run_lora_process_loop+0x20c>)
 80038e0:	2001      	movs	r0, #1
 80038e2:	f001 ff4d 	bl	8005780 <LOGGER_SendFormatted>
                          lora_ctx->state, lora_ctx->cmd_index, lora_ctx->num_commands);
            }
            last_state = lora_ctx->state;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	4b61      	ldr	r3, [pc, #388]	@ (8003a74 <_run_lora_process_loop+0x208>)
 80038ee:	601a      	str	r2, [r3, #0]
        }
        
        switch(lora_ctx->state) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b0f      	cmp	r3, #15
 80038f6:	f200 80ae 	bhi.w	8003a56 <_run_lora_process_loop+0x1ea>
 80038fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003900 <_run_lora_process_loop+0x94>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003941 	.word	0x08003941
 8003904:	0800394b 	.word	0x0800394b
 8003908:	08003967 	.word	0x08003967
 800390c:	08003971 	.word	0x08003971
 8003910:	080039a1 	.word	0x080039a1
 8003914:	080039d1 	.word	0x080039d1
 8003918:	08003a15 	.word	0x08003a15
 800391c:	08003a1f 	.word	0x08003a1f
 8003920:	080039db 	.word	0x080039db
 8003924:	08003a15 	.word	0x08003a15
 8003928:	080039e5 	.word	0x080039e5
 800392c:	08003a15 	.word	0x08003a15
 8003930:	08003a29 	.word	0x08003a29
 8003934:	08003a33 	.word	0x08003a33
 8003938:	08003a3d 	.word	0x08003a3d
 800393c:	08003a3d 	.word	0x08003a3d
            case LORA_STATE_INIT:
                osDelay(500); // 초기화 상태는 빠르게
 8003940:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003944:	f011 fb9e 	bl	8015084 <osDelay>
                break;
 8003948:	e08a      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_CMD:
                LOG_INFO("[TX_TASK] 📤 Sending command %d/%d", 
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4949      	ldr	r1, [pc, #292]	@ (8003a7c <_run_lora_process_loop+0x210>)
 8003956:	2001      	movs	r0, #1
 8003958:	f001 ff12 	bl	8005780 <LOGGER_SendFormatted>
                        lora_ctx->cmd_index + 1, lora_ctx->num_commands);
                osDelay(1000); // 명령어 전송 후 1초 대기
 800395c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003960:	f011 fb90 	bl	8015084 <osDelay>
                break;
 8003964:	e07c      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_OK:
                // OK 응답 대기 중 - 조용히 대기
                osDelay(2000); // OK 응답 대기 중 2초 간격
 8003966:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800396a:	f011 fb8b 	bl	8015084 <osDelay>
                break;
 800396e:	e077      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_JOIN:
                // JOIN 시도 시작 - SD 로깅 활성화 (영구적)
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 8003970:	4b43      	ldr	r3, [pc, #268]	@ (8003a80 <_run_lora_process_loop+0x214>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10e      	bne.n	8003996 <_run_lora_process_loop+0x12a>
 8003978:	f001 fed2 	bl	8005720 <LOGGER_IsSDLoggingEnabled>
 800397c:	4603      	mov	r3, r0
 800397e:	f083 0301 	eor.w	r3, r3, #1
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d006      	beq.n	8003996 <_run_lora_process_loop+0x12a>
                    LOGGER_EnableSDLogging(true);
 8003988:	2001      	movs	r0, #1
 800398a:	f001 feb9 	bl	8005700 <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging enabled from JOIN attempts (WARN+ levels only)");
 800398e:	493d      	ldr	r1, [pc, #244]	@ (8003a84 <_run_lora_process_loop+0x218>)
 8003990:	2002      	movs	r0, #2
 8003992:	f001 fef5 	bl	8005780 <LOGGER_SendFormatted>
                }
                osDelay(2000); // JOIN 명령어 전송 후 2초 대기
 8003996:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800399a:	f011 fb73 	bl	8015084 <osDelay>
                break;
 800399e:	e05f      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_JOIN_OK:
                // JOIN 성공 확인 시 SD 로깅 영구 활성화 보장
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 80039a0:	4b37      	ldr	r3, [pc, #220]	@ (8003a80 <_run_lora_process_loop+0x214>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10e      	bne.n	80039c6 <_run_lora_process_loop+0x15a>
 80039a8:	f001 feba 	bl	8005720 <LOGGER_IsSDLoggingEnabled>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f083 0301 	eor.w	r3, r3, #1
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <_run_lora_process_loop+0x15a>
                    LOGGER_EnableSDLogging(true);
 80039b8:	2001      	movs	r0, #1
 80039ba:	f001 fea1 	bl	8005700 <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging permanently enabled after JOIN success");
 80039be:	4932      	ldr	r1, [pc, #200]	@ (8003a88 <_run_lora_process_loop+0x21c>)
 80039c0:	2002      	movs	r0, #2
 80039c2:	f001 fedd 	bl	8005780 <LOGGER_SendFormatted>
                }
                osDelay(3000); // JOIN 응답 대기 중 3초 간격
 80039c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80039ca:	f011 fb5b 	bl	8015084 <osDelay>
                break;
 80039ce:	e047      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_TIMEREQ:
                osDelay(1000); // TIMEREQ 명령어 전송 후 1초 대기
 80039d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039d4:	f011 fb56 	bl	8015084 <osDelay>
                break;
 80039d8:	e042      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_LTIME:
                osDelay(1000); // LTIME 명령어 전송 후 1초 대기
 80039da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80039de:	f011 fb51 	bl	8015084 <osDelay>
                break;
 80039e2:	e03d      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_SEND_PERIODIC:
                // 주기적 SEND 시 SD 로깅 상태 확인 및 활성화
                if (g_sd_initialization_result == SDSTORAGE_OK && !LOGGER_IsSDLoggingEnabled()) {
 80039e4:	4b26      	ldr	r3, [pc, #152]	@ (8003a80 <_run_lora_process_loop+0x214>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10e      	bne.n	8003a0a <_run_lora_process_loop+0x19e>
 80039ec:	f001 fe98 	bl	8005720 <LOGGER_IsSDLoggingEnabled>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f083 0301 	eor.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d006      	beq.n	8003a0a <_run_lora_process_loop+0x19e>
                    LOGGER_EnableSDLogging(true);
 80039fc:	2001      	movs	r0, #1
 80039fe:	f001 fe7f 	bl	8005700 <LOGGER_EnableSDLogging>
                    LOG_WARN("🗂️ SD logging re-enabled for periodic SEND");
 8003a02:	4922      	ldr	r1, [pc, #136]	@ (8003a8c <_run_lora_process_loop+0x220>)
 8003a04:	2002      	movs	r0, #2
 8003a06:	f001 febb 	bl	8005780 <LOGGER_SendFormatted>
                }
                osDelay(2000); // SEND 명령어 전송 후 2초 대기
 8003a0a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003a0e:	f011 fb39 	bl	8015084 <osDelay>
                break;
 8003a12:	e025      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_TIMEREQ_OK:
            case LORA_STATE_WAIT_LTIME_RESPONSE:
            case LORA_STATE_WAIT_SEND_RESPONSE:
                osDelay(3000); // 응답 대기 중 3초 간격
 8003a14:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003a18:	f011 fb34 	bl	8015084 <osDelay>
                break;
 8003a1c:	e020      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_TIME_SYNC:
                osDelay(1000); // 시간 동기화 대기 중 1초 간격으로 체크
 8003a1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a22:	f011 fb2f 	bl	8015084 <osDelay>
                break;
 8003a26:	e01b      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_WAIT_SEND_INTERVAL:
                // 주기적 전송 대기 중 - 로그 출력 없이 조용히 대기
                osDelay(5000); // 주기적 전송 대기 중 5초 간격으로 체크
 8003a28:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a2c:	f011 fb2a 	bl	8015084 <osDelay>
                break;
 8003a30:	e016      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_JOIN_RETRY:
                osDelay(5000); // 재시도 대기 5초
 8003a32:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003a36:	f011 fb25 	bl	8015084 <osDelay>
                break;
 8003a3a:	e011      	b.n	8003a60 <_run_lora_process_loop+0x1f4>
            case LORA_STATE_DONE:
            case LORA_STATE_ERROR:
                LOG_INFO("📤 [TX_TASK] LoRa process completed with state: %s", 
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b0e      	cmp	r3, #14
 8003a42:	d101      	bne.n	8003a48 <_run_lora_process_loop+0x1dc>
 8003a44:	4b12      	ldr	r3, [pc, #72]	@ (8003a90 <_run_lora_process_loop+0x224>)
 8003a46:	e000      	b.n	8003a4a <_run_lora_process_loop+0x1de>
 8003a48:	4b12      	ldr	r3, [pc, #72]	@ (8003a94 <_run_lora_process_loop+0x228>)
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4912      	ldr	r1, [pc, #72]	@ (8003a98 <_run_lora_process_loop+0x22c>)
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f001 fe96 	bl	8005780 <LOGGER_SendFormatted>
                        lora_ctx->state == LORA_STATE_DONE ? "DONE" : "ERROR");
                return; // 루프 종료하고 idle로 이동
 8003a54:	e005      	b.n	8003a62 <_run_lora_process_loop+0x1f6>
            default:
                osDelay(1000);
 8003a56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003a5a:	f011 fb13 	bl	8015084 <osDelay>
                break;
 8003a5e:	bf00      	nop
    {
 8003a60:	e70c      	b.n	800387c <_run_lora_process_loop+0x10>
        }
    }
}
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	0801b5c4 	.word	0x0801b5c4
 8003a6c:	20001514 	.word	0x20001514
 8003a70:	20001314 	.word	0x20001314
 8003a74:	2000001c 	.word	0x2000001c
 8003a78:	0801b5f4 	.word	0x0801b5f4
 8003a7c:	0801b628 	.word	0x0801b628
 8003a80:	20000018 	.word	0x20000018
 8003a84:	0801b650 	.word	0x0801b650
 8003a88:	0801b694 	.word	0x0801b694
 8003a8c:	0801b6d0 	.word	0x0801b6d0
 8003a90:	0801b700 	.word	0x0801b700
 8003a94:	0801b708 	.word	0x0801b708
 8003a98:	0801b710 	.word	0x0801b710

08003a9c <_enter_idle_loop>:

/**
 * @brief Idle 모드 진입 및 처리
 */
static void _enter_idle_loop(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
    LOG_INFO("📤 [TX_TASK] Entering idle mode...");
 8003aa2:	490b      	ldr	r1, [pc, #44]	@ (8003ad0 <_enter_idle_loop+0x34>)
 8003aa4:	2001      	movs	r0, #1
 8003aa6:	f001 fe6b 	bl	8005780 <LOGGER_SendFormatted>
    uint32_t idle_counter = 0;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
    
    for(;;)
    {
        // 30초마다 idle 상태 표시
        osDelay(30000);
 8003aae:	f247 5030 	movw	r0, #30000	@ 0x7530
 8003ab2:	f011 fae7 	bl	8015084 <osDelay>
        idle_counter++;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	607b      	str	r3, [r7, #4]
        LOG_INFO("📤 [TX_TASK] Idle mode: %lu minutes elapsed", idle_counter / 2);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4904      	ldr	r1, [pc, #16]	@ (8003ad4 <_enter_idle_loop+0x38>)
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	f001 fe5b 	bl	8005780 <LOGGER_SendFormatted>
        osDelay(30000);
 8003aca:	bf00      	nop
 8003acc:	e7ef      	b.n	8003aae <_enter_idle_loop+0x12>
 8003ace:	bf00      	nop
 8003ad0:	0801b748 	.word	0x0801b748
 8003ad4:	0801b770 	.word	0x0801b770

08003ad8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b090      	sub	sp, #64	@ 0x40
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST - 임시 비활성화 (SD 카드 테스트용) */
  LOG_WARN("USB Host initialization temporarily disabled to avoid RTOS task conflicts");
 8003ae0:	4927      	ldr	r1, [pc, #156]	@ (8003b80 <StartDefaultTask+0xa8>)
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	f001 fe4c 	bl	8005780 <LOGGER_SendFormatted>
  LOG_INFO("This eliminates USBH_Thread vs defaultTask priority conflicts");
 8003ae8:	4926      	ldr	r1, [pc, #152]	@ (8003b84 <StartDefaultTask+0xac>)
 8003aea:	2001      	movs	r0, #1
 8003aec:	f001 fe48 	bl	8005780 <LOGGER_SendFormatted>
  // MX_USB_HOST_Init();  // SD 카드 테스트 완료 후 재활성화 예정
  /* USER CODE BEGIN 5 */
  
  // SD Card 초기화는 이미 main()에서 우선 완료됨
  LOG_INFO("📋 SD card initialization completed in main() - checking status...");
 8003af0:	4925      	ldr	r1, [pc, #148]	@ (8003b88 <StartDefaultTask+0xb0>)
 8003af2:	2001      	movs	r0, #1
 8003af4:	f001 fe44 	bl	8005780 <LOGGER_SendFormatted>
  
  LOG_INFO("=== STM32F746G-DISCO UART6 Test Started ===");
 8003af8:	4924      	ldr	r1, [pc, #144]	@ (8003b8c <StartDefaultTask+0xb4>)
 8003afa:	2001      	movs	r0, #1
 8003afc:	f001 fe40 	bl	8005780 <LOGGER_SendFormatted>
  LOG_INFO("System Clock: %lu MHz", SystemCoreClock / 1000000);
 8003b00:	4b23      	ldr	r3, [pc, #140]	@ (8003b90 <StartDefaultTask+0xb8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a23      	ldr	r2, [pc, #140]	@ (8003b94 <StartDefaultTask+0xbc>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0c9b      	lsrs	r3, r3, #18
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4922      	ldr	r1, [pc, #136]	@ (8003b98 <StartDefaultTask+0xc0>)
 8003b10:	2001      	movs	r0, #1
 8003b12:	f001 fe35 	bl	8005780 <LOGGER_SendFormatted>
  LOG_INFO("UART6 Configuration: 115200 baud, 8N1");
 8003b16:	4921      	ldr	r1, [pc, #132]	@ (8003b9c <StartDefaultTask+0xc4>)
 8003b18:	2001      	movs	r0, #1
 8003b1a:	f001 fe31 	bl	8005780 <LOGGER_SendFormatted>
  LOG_INFO("📌 CRITICAL: For loopback test, connect PC6(TX) to PC7(RX) with a wire!");
 8003b1e:	4920      	ldr	r1, [pc, #128]	@ (8003ba0 <StartDefaultTask+0xc8>)
 8003b20:	2001      	movs	r0, #1
 8003b22:	f001 fe2d 	bl	8005780 <LOGGER_SendFormatted>
  LOG_INFO("📌 UART6 Pins: PC6(TX) = Arduino D1, PC7(RX) = Arduino D0");
 8003b26:	491f      	ldr	r1, [pc, #124]	@ (8003ba4 <StartDefaultTask+0xcc>)
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f001 fe29 	bl	8005780 <LOGGER_SendFormatted>
  
  // 1. SD 카드 초기화 및 기본 기능 테스트
  g_sd_initialization_result = _initialize_sd_card_and_test();
 8003b2e:	f7ff fdbb 	bl	80036a8 <_initialize_sd_card_and_test>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4a1c      	ldr	r2, [pc, #112]	@ (8003ba8 <StartDefaultTask+0xd0>)
 8003b36:	6013      	str	r3, [r2, #0]
  
  // 2. LoRa UART 연결 설정
  LOG_INFO("📤 [TX_TASK] Starting LoRa initialization and JOIN...");
 8003b38:	491c      	ldr	r1, [pc, #112]	@ (8003bac <StartDefaultTask+0xd4>)
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f001 fe20 	bl	8005780 <LOGGER_SendFormatted>
  int uart_result = _setup_lora_uart_connection();
 8003b40:	f7ff fe0a 	bl	8003758 <_setup_lora_uart_connection>
 8003b44:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (uart_result != UART_STATUS_OK) {
 8003b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <StartDefaultTask+0x7c>
    LOG_ERROR("❌ [TX_TASK] UART setup failed, continuing anyway...");
 8003b4c:	4918      	ldr	r1, [pc, #96]	@ (8003bb0 <StartDefaultTask+0xd8>)
 8003b4e:	2003      	movs	r0, #3
 8003b50:	f001 fe16 	bl	8005780 <LOGGER_SendFormatted>
  }
  
  // 3. LoRa 컨텍스트 초기화
  LoraStarterContext lora_ctx;
  _initialize_lora_context(&lora_ctx);
 8003b54:	f107 030c 	add.w	r3, r7, #12
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fe25 	bl	80037a8 <_initialize_lora_context>
  
  // 4. 로깅 모드 설정
  _configure_logging_mode(g_sd_initialization_result);
 8003b5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ba8 <StartDefaultTask+0xd0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fe4c 	bl	8003800 <_configure_logging_mode>
  
  // 5. LoRa 프로세스 메인 루프 실행
  _run_lora_process_loop(&lora_ctx);
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fe7d 	bl	800386c <_run_lora_process_loop>
  
  // 6. Idle 모드 진입
  _enter_idle_loop();
 8003b72:	f7ff ff93 	bl	8003a9c <_enter_idle_loop>
  
  /* USER CODE END 5 */
}
 8003b76:	bf00      	nop
 8003b78:	3740      	adds	r7, #64	@ 0x40
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	0801b7a0 	.word	0x0801b7a0
 8003b84:	0801b7ec 	.word	0x0801b7ec
 8003b88:	0801b82c 	.word	0x0801b82c
 8003b8c:	0801b874 	.word	0x0801b874
 8003b90:	20000020 	.word	0x20000020
 8003b94:	431bde83 	.word	0x431bde83
 8003b98:	0801b8a0 	.word	0x0801b8a0
 8003b9c:	0801b8b8 	.word	0x0801b8b8
 8003ba0:	0801b8e0 	.word	0x0801b8e0
 8003ba4:	0801b92c 	.word	0x0801b92c
 8003ba8:	20000018 	.word	0x20000018
 8003bac:	0801b968 	.word	0x0801b968
 8003bb0:	0801b9a0 	.word	0x0801b9a0

08003bb4 <StartSDLoggingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSDLoggingTask */
void StartSDLoggingTask(void const * argument)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b0b4      	sub	sp, #208	@ 0xd0
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSDLoggingTask */
  LOG_INFO("=== SD Logging Task Started ===");
 8003bbc:	4982      	ldr	r1, [pc, #520]	@ (8003dc8 <StartSDLoggingTask+0x214>)
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f001 fdde 	bl	8005780 <LOGGER_SendFormatted>
  
  // 시스템 안정화 대기 (다른 태스크들 먼저 시작)
  osDelay(3000);
 8003bc4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003bc8:	f011 fa5c 	bl	8015084 <osDelay>
  
  // SD 초기화 시도 (이미 정상이면 스킵)
  bool sd_init_needed = !SDStorage_IsReady();
 8003bcc:	f7fd ff32 	bl	8001a34 <SDStorage_IsReady>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	bf14      	ite	ne
 8003bd6:	2301      	movne	r3, #1
 8003bd8:	2300      	moveq	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f083 0301 	eor.w	r3, r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8003be6:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
  int init_result = SDSTORAGE_OK; // 기본값: 성공
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  
  if (sd_init_needed) {
 8003bf8:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d069      	beq.n	8003cd4 <StartSDLoggingTask+0x120>
    LOG_INFO("[SD_TASK] 🔄 Attempting SD card initialization...");
 8003c00:	4972      	ldr	r1, [pc, #456]	@ (8003dcc <StartSDLoggingTask+0x218>)
 8003c02:	2001      	movs	r0, #1
 8003c04:	f001 fdbc 	bl	8005780 <LOGGER_SendFormatted>
    
    // 단계별 안전한 SD 초기화
    int init_attempts = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    const int MAX_INIT_ATTEMPTS = 3;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    
    for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c1a:	e054      	b.n	8003cc6 <StartSDLoggingTask+0x112>
    LOG_INFO("[SD_TASK] Initialization attempt %d/%d", init_attempts + 1, MAX_INIT_ATTEMPTS);
 8003c1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003c26:	496a      	ldr	r1, [pc, #424]	@ (8003dd0 <StartSDLoggingTask+0x21c>)
 8003c28:	2001      	movs	r0, #1
 8003c2a:	f001 fda9 	bl	8005780 <LOGGER_SendFormatted>
    
    // SDStorage_Init을 타임아웃과 함께 호출
    uint32_t init_start_time = HAL_GetTick();
 8003c2e:	f002 fc4f 	bl	80064d0 <HAL_GetTick>
 8003c32:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
    const uint32_t INIT_TIMEOUT_MS = 10000;  // 10초 타임아웃
 8003c36:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    
    // TODO: 실제로는 별도 태스크에서 SDStorage_Init 호출하고 여기서는 폴링
    // 현재는 간단히 직접 호출하되 타임아웃 체크
    init_result = SDStorage_Init();
 8003c3e:	f7fd fdab 	bl	8001798 <SDStorage_Init>
 8003c42:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
    uint32_t init_duration = HAL_GetTick() - init_start_time;
 8003c46:	f002 fc43 	bl	80064d0 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    
    LOG_INFO("[SD_TASK] Init attempt %d took %lu ms, result: %d", 
 8003c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c66:	495b      	ldr	r1, [pc, #364]	@ (8003dd4 <StartSDLoggingTask+0x220>)
 8003c68:	2001      	movs	r0, #1
 8003c6a:	f001 fd89 	bl	8005780 <LOGGER_SendFormatted>
             init_attempts + 1, init_duration, init_result);
    
    if (init_result == SDSTORAGE_OK) {
 8003c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10a      	bne.n	8003c8c <StartSDLoggingTask+0xd8>
      LOG_INFO("[SD_TASK] ✅ SD initialization successful!");
 8003c76:	4958      	ldr	r1, [pc, #352]	@ (8003dd8 <StartSDLoggingTask+0x224>)
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f001 fd81 	bl	8005780 <LOGGER_SendFormatted>
      g_sd_initialization_result = SDSTORAGE_OK;
 8003c7e:	4b57      	ldr	r3, [pc, #348]	@ (8003ddc <StartSDLoggingTask+0x228>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
      g_sd_logging_active = true;
 8003c84:	4b56      	ldr	r3, [pc, #344]	@ (8003de0 <StartSDLoggingTask+0x22c>)
 8003c86:	2201      	movs	r2, #1
 8003c88:	701a      	strb	r2, [r3, #0]
      break;
 8003c8a:	e02d      	b.n	8003ce8 <StartSDLoggingTask+0x134>
    } else {
      LOG_WARN("[SD_TASK] ⚠️ SD init attempt %d failed (code: %d)", 
 8003c8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c96:	4953      	ldr	r1, [pc, #332]	@ (8003de4 <StartSDLoggingTask+0x230>)
 8003c98:	2002      	movs	r0, #2
 8003c9a:	f001 fd71 	bl	8005780 <LOGGER_SendFormatted>
               init_attempts + 1, init_result);
      
      if (init_attempts < MAX_INIT_ATTEMPTS - 1) {
 8003c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	da07      	bge.n	8003cbc <StartSDLoggingTask+0x108>
        LOG_INFO("[SD_TASK] Waiting 5 seconds before retry...");
 8003cac:	494e      	ldr	r1, [pc, #312]	@ (8003de8 <StartSDLoggingTask+0x234>)
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f001 fd66 	bl	8005780 <LOGGER_SendFormatted>
        osDelay(5000);
 8003cb4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8003cb8:	f011 f9e4 	bl	8015084 <osDelay>
    for (init_attempts = 0; init_attempts < MAX_INIT_ATTEMPTS; init_attempts++) {
 8003cbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cc6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	dba4      	blt.n	8003c1c <StartSDLoggingTask+0x68>
 8003cd2:	e009      	b.n	8003ce8 <StartSDLoggingTask+0x134>
      }
    }
    } // for loop 종료
  } else {
    // 이미 SD가 준비된 경우
    LOG_INFO("[SD_TASK] 📝 SD card already ready, skipping initialization");
 8003cd4:	4945      	ldr	r1, [pc, #276]	@ (8003dec <StartSDLoggingTask+0x238>)
 8003cd6:	2001      	movs	r0, #1
 8003cd8:	f001 fd52 	bl	8005780 <LOGGER_SendFormatted>
    g_sd_initialization_result = SDSTORAGE_OK;
 8003cdc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ddc <StartSDLoggingTask+0x228>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
    g_sd_logging_active = true;
 8003ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8003de0 <StartSDLoggingTask+0x22c>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
  }
  
  // 초기화 결과에 따른 후속 처리
  if (init_result != SDSTORAGE_OK) {
 8003ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <StartSDLoggingTask+0x156>
    LOG_ERROR("[SD_TASK] ❌ All SD initialization attempts failed");
 8003cf0:	493f      	ldr	r1, [pc, #252]	@ (8003df0 <StartSDLoggingTask+0x23c>)
 8003cf2:	2003      	movs	r0, #3
 8003cf4:	f001 fd44 	bl	8005780 <LOGGER_SendFormatted>
    LOG_INFO("[SD_TASK] Continuing with terminal-only logging");
 8003cf8:	493e      	ldr	r1, [pc, #248]	@ (8003df4 <StartSDLoggingTask+0x240>)
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f001 fd40 	bl	8005780 <LOGGER_SendFormatted>
    
    // SD 실패해도 태스크는 계속 실행 (나중에 재시도 가능)
    for(;;) {
      osDelay(60000);  // 1분마다 재시도 체크 (향후 확장)
 8003d00:	f64e 2060 	movw	r0, #60000	@ 0xea60
 8003d04:	f011 f9be 	bl	8015084 <osDelay>
 8003d08:	e7fa      	b.n	8003d00 <StartSDLoggingTask+0x14c>
    }
  }
  
  LOG_INFO("[SD_TASK] 🗂️ SD logging queue processing started");
 8003d0a:	493b      	ldr	r1, [pc, #236]	@ (8003df8 <StartSDLoggingTask+0x244>)
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f001 fd37 	bl	8005780 <LOGGER_SendFormatted>
  
  // SD 로그 큐 처리 메인 루프
  for(;;)
  {
    SDLogEntry_t log_entry;
    osEvent event = osMessageGet(sdLogQueueHandle, 1000);  // 1초 타임아웃
 8003d12:	4b3a      	ldr	r3, [pc, #232]	@ (8003dfc <StartSDLoggingTask+0x248>)
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003d1a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f011 fa2c 	bl	801517c <osMessageGet>
    
    if (event.status == osEventMessage) {
 8003d24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d12d      	bne.n	8003d88 <StartSDLoggingTask+0x1d4>
      // 큐에서 로그 엔트리 수신
      log_entry = *((SDLogEntry_t*)event.value.p);
 8003d2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	4611      	mov	r1, r2
 8003d36:	2288      	movs	r2, #136	@ 0x88
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f014 f894 	bl	8017e66 <memcpy>
      
      // SD에 안전하게 쓰기 (타임아웃 포함)
      uint32_t write_start = HAL_GetTick();
 8003d3e:	f002 fbc7 	bl	80064d0 <HAL_GetTick>
 8003d42:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
      int write_result = SDStorage_WriteLog(log_entry.message, log_entry.length);
 8003d46:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003d4a:	f107 030c 	add.w	r3, r7, #12
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fd fd87 	bl	8001864 <SDStorage_WriteLog>
 8003d56:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
      uint32_t write_duration = HAL_GetTick() - write_start;
 8003d5a:	f002 fbb9 	bl	80064d0 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      
      if (write_result != SDSTORAGE_OK) {
 8003d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <StartSDLoggingTask+0x1d4>
        // SD 쓰기 실패 - 터미널에만 에러 출력 (무한루프 방지)
        printf("[SD_TASK] Write failed (duration: %lu ms, result: %d)\n", 
 8003d72:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003d76:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003d7a:	4821      	ldr	r0, [pc, #132]	@ (8003e00 <StartSDLoggingTask+0x24c>)
 8003d7c:	f013 fe9a 	bl	8017ab4 <iprintf>
               write_duration, write_result);
        
        // SD 쓰기 실패 시 잠시 대기 후 재시도 여부 결정
        osDelay(1000);
 8003d80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003d84:	f011 f97e 	bl	8015084 <osDelay>
      }
    }
    
    // 주기적으로 SD 상태 체크 (1분마다)
    static uint32_t status_check_counter = 0;
    status_check_counter++;
 8003d88:	4b1e      	ldr	r3, [pc, #120]	@ (8003e04 <StartSDLoggingTask+0x250>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8003e04 <StartSDLoggingTask+0x250>)
 8003d90:	6013      	str	r3, [r2, #0]
    if (status_check_counter % 60 == 0) {  // 60초마다
 8003d92:	4b1c      	ldr	r3, [pc, #112]	@ (8003e04 <StartSDLoggingTask+0x250>)
 8003d94:	6819      	ldr	r1, [r3, #0]
 8003d96:	4b1c      	ldr	r3, [pc, #112]	@ (8003e08 <StartSDLoggingTask+0x254>)
 8003d98:	fba3 2301 	umull	r2, r3, r3, r1
 8003d9c:	095a      	lsrs	r2, r3, #5
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	1aca      	subs	r2, r1, r3
 8003da8:	2a00      	cmp	r2, #0
 8003daa:	d108      	bne.n	8003dbe <StartSDLoggingTask+0x20a>
      if (SDStorage_IsReady()) {
 8003dac:	f7fd fe42 	bl	8001a34 <SDStorage_IsReady>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <StartSDLoggingTask+0x20a>
        // SD 상태 정상
      } else {
        // SD 상태 이상 - 재초기화 시도 (향후 확장)
        LOG_WARN("[SD_TASK] SD card appears disconnected - monitoring");
 8003db6:	4915      	ldr	r1, [pc, #84]	@ (8003e0c <StartSDLoggingTask+0x258>)
 8003db8:	2002      	movs	r0, #2
 8003dba:	f001 fce1 	bl	8005780 <LOGGER_SendFormatted>
      }
    }
    
    osDelay(50);  // CPU 부하 방지
 8003dbe:	2032      	movs	r0, #50	@ 0x32
 8003dc0:	f011 f960 	bl	8015084 <osDelay>
  {
 8003dc4:	e7a5      	b.n	8003d12 <StartSDLoggingTask+0x15e>
 8003dc6:	bf00      	nop
 8003dc8:	0801b9d8 	.word	0x0801b9d8
 8003dcc:	0801b9f8 	.word	0x0801b9f8
 8003dd0:	0801ba2c 	.word	0x0801ba2c
 8003dd4:	0801ba54 	.word	0x0801ba54
 8003dd8:	0801ba88 	.word	0x0801ba88
 8003ddc:	20000018 	.word	0x20000018
 8003de0:	2000130c 	.word	0x2000130c
 8003de4:	0801bab4 	.word	0x0801bab4
 8003de8:	0801baec 	.word	0x0801baec
 8003dec:	0801bb18 	.word	0x0801bb18
 8003df0:	0801bb58 	.word	0x0801bb58
 8003df4:	0801bb8c 	.word	0x0801bb8c
 8003df8:	0801bbbc 	.word	0x0801bbbc
 8003dfc:	20001308 	.word	0x20001308
 8003e00:	0801bbf4 	.word	0x0801bbf4
 8003e04:	20001588 	.word	0x20001588
 8003e08:	88888889 	.word	0x88888889
 8003e0c:	0801bc2c 	.word	0x0801bc2c

08003e10 <StartReceiveTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void const * argument)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8003e16:	af02      	add	r7, sp, #8
 8003e18:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e1c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8003e20:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartReceiveTask */
  LOG_INFO("=== DMA-based Receive Task Started ===");
 8003e22:	499b      	ldr	r1, [pc, #620]	@ (8004090 <StartReceiveTask+0x280>)
 8003e24:	2001      	movs	r0, #1
 8003e26:	f001 fcab 	bl	8005780 <LOGGER_SendFormatted>
  
  // UART 초기화 대기
  osDelay(2000);
 8003e2a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003e2e:	f011 f929 	bl	8015084 <osDelay>
  
  // TDD 모듈들을 사용한 DMA 기반 수신 태스크
  char local_buffer[512];
  int local_bytes_received = 0;
 8003e32:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e36:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
  
  for(;;)
  {
    // TDD UART 모듈을 통한 DMA 기반 수신 체크
    UartStatus status = UART_Receive(local_buffer, sizeof(local_buffer), &local_bytes_received);
 8003e3e:	f107 0208 	add.w	r2, r7, #8
 8003e42:	f107 030c 	add.w	r3, r7, #12
 8003e46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fed4 	bl	8005bf8 <UART_Receive>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 320e 	strb.w	r3, [r7, #526]	@ 0x20e
    
    // 디버깅용: 수신 상태 체크 (에러 상태일 때만)
    static uint32_t debug_counter = 0;
    debug_counter++;
 8003e56:	4b8f      	ldr	r3, [pc, #572]	@ (8004094 <StartReceiveTask+0x284>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	4a8d      	ldr	r2, [pc, #564]	@ (8004094 <StartReceiveTask+0x284>)
 8003e5e:	6013      	str	r3, [r2, #0]
    if (debug_counter % 1200 == 0 && status != UART_STATUS_TIMEOUT) {  // 1분마다, 타임아웃 제외
 8003e60:	4b8c      	ldr	r3, [pc, #560]	@ (8004094 <StartReceiveTask+0x284>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b8c      	ldr	r3, [pc, #560]	@ (8004098 <StartReceiveTask+0x288>)
 8003e66:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6a:	09db      	lsrs	r3, r3, #7
 8003e6c:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d116      	bne.n	8003ea8 <StartReceiveTask+0x98>
 8003e7a:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d012      	beq.n	8003ea8 <StartReceiveTask+0x98>
      LOG_DEBUG("[RX_TASK] Status check #%lu: status=%d, bytes=%d", 
 8003e82:	4b84      	ldr	r3, [pc, #528]	@ (8004094 <StartReceiveTask+0x284>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a84      	ldr	r2, [pc, #528]	@ (8004098 <StartReceiveTask+0x288>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	09da      	lsrs	r2, r3, #7
 8003e8e:	f897 120e 	ldrb.w	r1, [r7, #526]	@ 0x20e
 8003e92:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003e96:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	497e      	ldr	r1, [pc, #504]	@ (800409c <StartReceiveTask+0x28c>)
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f001 fc6c 	bl	8005780 <LOGGER_SendFormatted>
               debug_counter / 1200, status, local_bytes_received);
    }
    
    if (status == UART_STATUS_OK && local_bytes_received > 0) {
 8003ea8:	f897 320e 	ldrb.w	r3, [r7, #526]	@ 0x20e
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f040 80eb 	bne.w	8004088 <StartReceiveTask+0x278>
 8003eb2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003eb6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f340 80e3 	ble.w	8004088 <StartReceiveTask+0x278>
      // 수신 완료 - 간단한 수신 로그 + ResponseHandler 분석
      LOG_INFO("📥 RECV: '%.30s%s' (%d bytes)", 
 8003ec2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003ec6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2b1e      	cmp	r3, #30
 8003ece:	dd01      	ble.n	8003ed4 <StartReceiveTask+0xc4>
 8003ed0:	4973      	ldr	r1, [pc, #460]	@ (80040a0 <StartReceiveTask+0x290>)
 8003ed2:	e000      	b.n	8003ed6 <StartReceiveTask+0xc6>
 8003ed4:	4973      	ldr	r1, [pc, #460]	@ (80040a4 <StartReceiveTask+0x294>)
 8003ed6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003eda:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f107 020c 	add.w	r2, r7, #12
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	496f      	ldr	r1, [pc, #444]	@ (80040a8 <StartReceiveTask+0x298>)
 8003eea:	2001      	movs	r0, #1
 8003eec:	f001 fc48 	bl	8005780 <LOGGER_SendFormatted>
               local_buffer, 
               (local_bytes_received > 30) ? "..." : "", 
               local_bytes_received);
      
      // 기본적인 응답 타입 체크 (ResponseHandler에서 상세 로그 출력)
      if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	496d      	ldr	r1, [pc, #436]	@ (80040ac <StartReceiveTask+0x29c>)
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f013 ff1c 	bl	8017d34 <strstr>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <StartReceiveTask+0x106>
        LOG_INFO("✅ JOIN CONFIRMED - Network joined successfully");
 8003f02:	496b      	ldr	r1, [pc, #428]	@ (80040b0 <StartReceiveTask+0x2a0>)
 8003f04:	2001      	movs	r0, #1
 8003f06:	f001 fc3b 	bl	8005780 <LOGGER_SendFormatted>
        g_join_success_time = HAL_GetTick();  // JOIN 성공 시간 기록
 8003f0a:	f002 fae1 	bl	80064d0 <HAL_GetTick>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a68      	ldr	r2, [pc, #416]	@ (80040b4 <StartReceiveTask+0x2a4>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	e01a      	b.n	8003f4c <StartReceiveTask+0x13c>
      } else if (strstr(local_buffer, "RAKwireless") != NULL) {
 8003f16:	f107 030c 	add.w	r3, r7, #12
 8003f1a:	4967      	ldr	r1, [pc, #412]	@ (80040b8 <StartReceiveTask+0x2a8>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f013 ff09 	bl	8017d34 <strstr>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <StartReceiveTask+0x122>
        LOG_DEBUG("📡 LoRa module boot message (ignored)");
 8003f28:	4964      	ldr	r1, [pc, #400]	@ (80040bc <StartReceiveTask+0x2ac>)
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f001 fc28 	bl	8005780 <LOGGER_SendFormatted>
 8003f30:	e00c      	b.n	8003f4c <StartReceiveTask+0x13c>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003f32:	f107 030c 	add.w	r3, r7, #12
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd f99a 	bl	8001270 <ResponseHandler_IsTimeResponse>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d004      	beq.n	8003f4c <StartReceiveTask+0x13c>
        // 시간 응답 처리
        ResponseHandler_ParseTimeResponse(local_buffer);
 8003f42:	f107 030c 	add.w	r3, r7, #12
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd fa42 	bl	80013d0 <ResponseHandler_ParseTimeResponse>
      }
      // 나머지 응답 분석은 아래 필터링 로직에서 한 번만 처리
      
      // 전역 변수에 복사 (다른 태스크에서 사용 가능)
      memcpy(rx_buffer, local_buffer, local_bytes_received);
 8003f4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003f50:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4858      	ldr	r0, [pc, #352]	@ (80040c0 <StartReceiveTask+0x2b0>)
 8003f60:	f013 ff81 	bl	8017e66 <memcpy>
      rx_bytes_received = local_bytes_received;
 8003f64:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8003f68:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a55      	ldr	r2, [pc, #340]	@ (80040c4 <StartReceiveTask+0x2b4>)
 8003f70:	6013      	str	r3, [r2, #0]
      
      // LoRa 상태 머신에 전달할 응답만 필터링
      bool is_lora_command_response = false;
 8003f72:	2300      	movs	r3, #0
 8003f74:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
      
      if (is_response_ok(local_buffer)) {
 8003f78:	f107 030c 	add.w	r3, r7, #12
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fd f833 	bl	8000fe8 <is_response_ok>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <StartReceiveTask+0x180>
        // OK 응답 - LoRa 명령에 대한 응답
        is_lora_command_response = true;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003f8e:	e04b      	b.n	8004028 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "+EVT:JOINED") != NULL) {
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	4945      	ldr	r1, [pc, #276]	@ (80040ac <StartReceiveTask+0x29c>)
 8003f96:	4618      	mov	r0, r3
 8003f98:	f013 fecc 	bl	8017d34 <strstr>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <StartReceiveTask+0x19a>
        // JOIN 성공 응답
        is_lora_command_response = true;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003fa8:	e03e      	b.n	8004028 <StartReceiveTask+0x218>
      } else if (ResponseHandler_IsTimeResponse(local_buffer)) {
 8003faa:	f107 030c 	add.w	r3, r7, #12
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fd f95e 	bl	8001270 <ResponseHandler_IsTimeResponse>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <StartReceiveTask+0x1b2>
        // 시간 응답 - LoRa 상태 머신에도 전달해야 함 (상태 전환을 위해)
        is_lora_command_response = true;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003fc0:	e032      	b.n	8004028 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "+EVT:") != NULL) {
 8003fc2:	f107 030c 	add.w	r3, r7, #12
 8003fc6:	4940      	ldr	r1, [pc, #256]	@ (80040c8 <StartReceiveTask+0x2b8>)
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f013 feb3 	bl	8017d34 <strstr>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <StartReceiveTask+0x1cc>
        // 기타 LoRa 이벤트 응답들
        is_lora_command_response = true;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8003fda:	e025      	b.n	8004028 <StartReceiveTask+0x218>
      } else if (strstr(local_buffer, "RAKwireless") != NULL || strstr(local_buffer, "ORAKwireless") != NULL) {
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	4935      	ldr	r1, [pc, #212]	@ (80040b8 <StartReceiveTask+0x2a8>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f013 fea6 	bl	8017d34 <strstr>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d108      	bne.n	8004000 <StartReceiveTask+0x1f0>
 8003fee:	f107 030c 	add.w	r3, r7, #12
 8003ff2:	4936      	ldr	r1, [pc, #216]	@ (80040cc <StartReceiveTask+0x2bc>)
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f013 fe9d 	bl	8017d34 <strstr>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <StartReceiveTask+0x1fa>
        // 부트 메시지 - LoRa 상태 머신에 전달하지 않음
        LOG_DEBUG("[RX_TASK] Boot message filtered out from LoRa state machine");
 8004000:	4933      	ldr	r1, [pc, #204]	@ (80040d0 <StartReceiveTask+0x2c0>)
 8004002:	2000      	movs	r0, #0
 8004004:	f001 fbbc 	bl	8005780 <LOGGER_SendFormatted>
 8004008:	e00e      	b.n	8004028 <StartReceiveTask+0x218>
      } else {
        // 기타 응답들 (ERROR, TIMEOUT 등)
        ResponseType response_type = ResponseHandler_ParseSendResponse(local_buffer);
 800400a:	f107 030c 	add.w	r3, r7, #12
 800400e:	4618      	mov	r0, r3
 8004010:	f7fd f8d8 	bl	80011c4 <ResponseHandler_ParseSendResponse>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 320d 	strb.w	r3, [r7, #525]	@ 0x20d
        if (response_type != RESPONSE_UNKNOWN) {
 800401a:	f897 320d 	ldrb.w	r3, [r7, #525]	@ 0x20d
 800401e:	2b03      	cmp	r3, #3
 8004020:	d002      	beq.n	8004028 <StartReceiveTask+0x218>
          is_lora_command_response = true;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
        }
      }
      
      // LoRa 명령 응답만 전역 변수에 복사
      if (is_lora_command_response) {
 8004028:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01d      	beq.n	800406c <StartReceiveTask+0x25c>
        memcpy(lora_rx_response, local_buffer, local_bytes_received);
 8004030:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004034:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	f107 030c 	add.w	r3, r7, #12
 8004040:	4619      	mov	r1, r3
 8004042:	4824      	ldr	r0, [pc, #144]	@ (80040d4 <StartReceiveTask+0x2c4>)
 8004044:	f013 ff0f 	bl	8017e66 <memcpy>
        lora_rx_response[local_bytes_received] = '\0';
 8004048:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800404c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a20      	ldr	r2, [pc, #128]	@ (80040d4 <StartReceiveTask+0x2c4>)
 8004054:	2100      	movs	r1, #0
 8004056:	54d1      	strb	r1, [r2, r3]
        lora_new_response = true;
 8004058:	4b1f      	ldr	r3, [pc, #124]	@ (80040d8 <StartReceiveTask+0x2c8>)
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
        LOG_DEBUG("[RX_TASK] LoRa response forwarded to state machine: %.20s...", local_buffer);
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	461a      	mov	r2, r3
 8004064:	491d      	ldr	r1, [pc, #116]	@ (80040dc <StartReceiveTask+0x2cc>)
 8004066:	2000      	movs	r0, #0
 8004068:	f001 fb8a 	bl	8005780 <LOGGER_SendFormatted>
      }
      
      // 버퍼 클리어
      memset(local_buffer, 0, sizeof(local_buffer));
 800406c:	f107 030c 	add.w	r3, r7, #12
 8004070:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004074:	2100      	movs	r1, #0
 8004076:	4618      	mov	r0, r3
 8004078:	f013 fe34 	bl	8017ce4 <memset>
      local_bytes_received = 0;
 800407c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8004080:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
    }
    
    // DMA 기반이므로 긴 지연으로 CPU 사용률 감소
    osDelay(50);  // 50ms 지연 (DMA가 백그라운드에서 처리하므로 빠른 폴링 불필요)
 8004088:	2032      	movs	r0, #50	@ 0x32
 800408a:	f010 fffb 	bl	8015084 <osDelay>
  {
 800408e:	e6d6      	b.n	8003e3e <StartReceiveTask+0x2e>
 8004090:	0801bc60 	.word	0x0801bc60
 8004094:	2000158c 	.word	0x2000158c
 8004098:	1b4e81b5 	.word	0x1b4e81b5
 800409c:	0801bc88 	.word	0x0801bc88
 80040a0:	0801bcbc 	.word	0x0801bcbc
 80040a4:	0801bcc0 	.word	0x0801bcc0
 80040a8:	0801bcc4 	.word	0x0801bcc4
 80040ac:	0801bce4 	.word	0x0801bce4
 80040b0:	0801bcf0 	.word	0x0801bcf0
 80040b4:	20001578 	.word	0x20001578
 80040b8:	0801bd24 	.word	0x0801bd24
 80040bc:	0801bd30 	.word	0x0801bd30
 80040c0:	200015f4 	.word	0x200015f4
 80040c4:	20001310 	.word	0x20001310
 80040c8:	0801bd58 	.word	0x0801bd58
 80040cc:	0801bd60 	.word	0x0801bd60
 80040d0:	0801bd70 	.word	0x0801bd70
 80040d4:	20001314 	.word	0x20001314
 80040d8:	20001514 	.word	0x20001514
 80040dc:	0801bdac 	.word	0x0801bdac

080040e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a04      	ldr	r2, [pc, #16]	@ (8004100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d101      	bne.n	80040f6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80040f2:	f002 f9d9 	bl	80064a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40001000 	.word	0x40001000

08004104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004108:	b672      	cpsid	i
}
 800410a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800410c:	bf00      	nop
 800410e:	e7fd      	b.n	800410c <Error_Handler+0x8>

08004110 <MX_DMA_Init>:
  * @brief DMA Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004116:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <MX_DMA_Init+0x48>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411a:	4a0f      	ldr	r2, [pc, #60]	@ (8004158 <MX_DMA_Init+0x48>)
 800411c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004120:	6313      	str	r3, [r2, #48]	@ 0x30
 8004122:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <MX_DMA_Init+0x48>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration - USART6_RX */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2105      	movs	r1, #5
 8004132:	2039      	movs	r0, #57	@ 0x39
 8004134:	f002 fd4c 	bl	8006bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004138:	2039      	movs	r0, #57	@ 0x39
 800413a:	f002 fd65 	bl	8006c08 <HAL_NVIC_EnableIRQ>
  
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2105      	movs	r1, #5
 8004142:	2047      	movs	r0, #71	@ 0x47
 8004144:	f002 fd44 	bl	8006bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004148:	2047      	movs	r0, #71	@ 0x47
 800414a:	f002 fd5d 	bl	8006c08 <HAL_NVIC_EnableIRQ>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40023800 	.word	0x40023800

0800415c <MX_USART6_DMA_Init>:
  * @brief DMA2 Stream1 DMA configuration for USART6 RX
  * @param None
  * @retval None
  */
void MX_USART6_DMA_Init(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
  // DMA 이미 초기화되었는지 체크
  if (hdma_usart6_rx.Instance != NULL) {
 8004162:	4b1e      	ldr	r3, [pc, #120]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d133      	bne.n	80041d2 <MX_USART6_DMA_Init+0x76>
    return; // 이미 초기화됨
  }
  
  /* Configure DMA for USART6 RX */
  hdma_usart6_rx.Instance = DMA2_Stream1;
 800416a:	4b1c      	ldr	r3, [pc, #112]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 800416c:	4a1c      	ldr	r2, [pc, #112]	@ (80041e0 <MX_USART6_DMA_Init+0x84>)
 800416e:	601a      	str	r2, [r3, #0]
  hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004170:	4b1a      	ldr	r3, [pc, #104]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 8004172:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004176:	605a      	str	r2, [r3, #4]
  hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004178:	4b18      	ldr	r3, [pc, #96]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
  hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800417e:	4b17      	ldr	r3, [pc, #92]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 8004180:	2200      	movs	r2, #0
 8004182:	60da      	str	r2, [r3, #12]
  hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004184:	4b15      	ldr	r3, [pc, #84]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 8004186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800418a:	611a      	str	r2, [r3, #16]
  hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800418c:	4b13      	ldr	r3, [pc, #76]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 800418e:	2200      	movs	r2, #0
 8004190:	615a      	str	r2, [r3, #20]
  hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004192:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 8004194:	2200      	movs	r2, #0
 8004196:	619a      	str	r2, [r3, #24]
  hdma_usart6_rx.Init.Mode = DMA_NORMAL;    // 일반 모드로 변경
 8004198:	4b10      	ldr	r3, [pc, #64]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
  hdma_usart6_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800419e:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 80041a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041a4:	621a      	str	r2, [r3, #32]
  hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041a6:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	625a      	str	r2, [r3, #36]	@ 0x24
  
  HAL_StatusTypeDef dma_result = HAL_DMA_Init(&hdma_usart6_rx);
 80041ac:	480b      	ldr	r0, [pc, #44]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 80041ae:	f002 fea5 	bl	8006efc <HAL_DMA_Init>
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  if (dma_result != HAL_OK)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <MX_USART6_DMA_Init+0x68>
  {
    // 에러 처리하되 Error_Handler() 호출하지 않음 (시스템 중단 방지)
    hdma_usart6_rx.Instance = NULL; // 실패 표시
 80041bc:	4b07      	ldr	r3, [pc, #28]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
    return;
 80041c2:	e007      	b.n	80041d4 <MX_USART6_DMA_Init+0x78>
  }

  /* Associate the initialized DMA handle to the UART handle */
  __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 80041c4:	4b07      	ldr	r3, [pc, #28]	@ (80041e4 <MX_USART6_DMA_Init+0x88>)
 80041c6:	4a05      	ldr	r2, [pc, #20]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 80041c8:	675a      	str	r2, [r3, #116]	@ 0x74
 80041ca:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <MX_USART6_DMA_Init+0x80>)
 80041cc:	4a05      	ldr	r2, [pc, #20]	@ (80041e4 <MX_USART6_DMA_Init+0x88>)
 80041ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80041d0:	e000      	b.n	80041d4 <MX_USART6_DMA_Init+0x78>
    return; // 이미 초기화됨
 80041d2:	bf00      	nop
}
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20001518 	.word	0x20001518
 80041e0:	40026428 	.word	0x40026428
 80041e4:	20001240 	.word	0x20001240

080041e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	4b11      	ldr	r3, [pc, #68]	@ (8004234 <HAL_MspInit+0x4c>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	4a10      	ldr	r2, [pc, #64]	@ (8004234 <HAL_MspInit+0x4c>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004234 <HAL_MspInit+0x4c>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004206:	4b0b      	ldr	r3, [pc, #44]	@ (8004234 <HAL_MspInit+0x4c>)
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	4a0a      	ldr	r2, [pc, #40]	@ (8004234 <HAL_MspInit+0x4c>)
 800420c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004210:	6453      	str	r3, [r2, #68]	@ 0x44
 8004212:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <HAL_MspInit+0x4c>)
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800421e:	2200      	movs	r2, #0
 8004220:	210f      	movs	r1, #15
 8004222:	f06f 0001 	mvn.w	r0, #1
 8004226:	f002 fcd3 	bl	8006bd0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b08a      	sub	sp, #40	@ 0x28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004240:	f107 0314 	add.w	r3, r7, #20
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	605a      	str	r2, [r3, #4]
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	60da      	str	r2, [r3, #12]
 800424e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a21      	ldr	r2, [pc, #132]	@ (80042dc <HAL_ADC_MspInit+0xa4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d13c      	bne.n	80042d4 <HAL_ADC_MspInit+0x9c>
  {
    /* USER CODE BEGIN ADC3_MspInit 0 */

    /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800425a:	4b21      	ldr	r3, [pc, #132]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800425e:	4a20      	ldr	r2, [pc, #128]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 8004260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004264:	6453      	str	r3, [r2, #68]	@ 0x44
 8004266:	4b1e      	ldr	r3, [pc, #120]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004272:	4b1b      	ldr	r3, [pc, #108]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 8004274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004276:	4a1a      	ldr	r2, [pc, #104]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 8004278:	f043 0320 	orr.w	r3, r3, #32
 800427c:	6313      	str	r3, [r2, #48]	@ 0x30
 800427e:	4b18      	ldr	r3, [pc, #96]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428a:	4b15      	ldr	r3, [pc, #84]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	4a14      	ldr	r2, [pc, #80]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6313      	str	r3, [r2, #48]	@ 0x30
 8004296:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <HAL_ADC_MspInit+0xa8>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	60bb      	str	r3, [r7, #8]
 80042a0:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 80042a2:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80042a6:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042a8:	2303      	movs	r3, #3
 80042aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ac:	2300      	movs	r3, #0
 80042ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042b0:	f107 0314 	add.w	r3, r7, #20
 80042b4:	4619      	mov	r1, r3
 80042b6:	480b      	ldr	r0, [pc, #44]	@ (80042e4 <HAL_ADC_MspInit+0xac>)
 80042b8:	f003 ffce 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042c0:	2303      	movs	r3, #3
 80042c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80042c8:	f107 0314 	add.w	r3, r7, #20
 80042cc:	4619      	mov	r1, r3
 80042ce:	4806      	ldr	r0, [pc, #24]	@ (80042e8 <HAL_ADC_MspInit+0xb0>)
 80042d0:	f003 ffc2 	bl	8008258 <HAL_GPIO_Init>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 80042d4:	bf00      	nop
 80042d6:	3728      	adds	r7, #40	@ 0x28
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40012200 	.word	0x40012200
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40021400 	.word	0x40021400
 80042e8:	40020000 	.word	0x40020000

080042ec <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004324 <HAL_CRC_MspInit+0x38>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d10b      	bne.n	8004316 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <HAL_CRC_MspInit+0x3c>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	4a09      	ldr	r2, [pc, #36]	@ (8004328 <HAL_CRC_MspInit+0x3c>)
 8004304:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004308:	6313      	str	r3, [r2, #48]	@ 0x30
 800430a:	4b07      	ldr	r3, [pc, #28]	@ (8004328 <HAL_CRC_MspInit+0x3c>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8004316:	bf00      	nop
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40023000 	.word	0x40023000
 8004328:	40023800 	.word	0x40023800

0800432c <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	@ 0x38
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	60da      	str	r2, [r3, #12]
 8004342:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a50      	ldr	r2, [pc, #320]	@ (800448c <HAL_DCMI_MspInit+0x160>)
 800434a:	4293      	cmp	r3, r2
 800434c:	f040 809a 	bne.w	8004484 <HAL_DCMI_MspInit+0x158>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8004350:	4b4f      	ldr	r3, [pc, #316]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 8004352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004354:	4a4e      	ldr	r2, [pc, #312]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	6353      	str	r3, [r2, #52]	@ 0x34
 800435c:	4b4c      	ldr	r3, [pc, #304]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 800435e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	623b      	str	r3, [r7, #32]
 8004366:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004368:	4b49      	ldr	r3, [pc, #292]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	4a48      	ldr	r2, [pc, #288]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 800436e:	f043 0310 	orr.w	r3, r3, #16
 8004372:	6313      	str	r3, [r2, #48]	@ 0x30
 8004374:	4b46      	ldr	r3, [pc, #280]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 8004376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	61fb      	str	r3, [r7, #28]
 800437e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004380:	4b43      	ldr	r3, [pc, #268]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	4a42      	ldr	r2, [pc, #264]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 8004386:	f043 0308 	orr.w	r3, r3, #8
 800438a:	6313      	str	r3, [r2, #48]	@ 0x30
 800438c:	4b40      	ldr	r3, [pc, #256]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 800438e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	61bb      	str	r3, [r7, #24]
 8004396:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004398:	4b3d      	ldr	r3, [pc, #244]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 800439a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439c:	4a3c      	ldr	r2, [pc, #240]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 800439e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80043b0:	4b37      	ldr	r3, [pc, #220]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b4:	4a36      	ldr	r2, [pc, #216]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 80043b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80043bc:	4b34      	ldr	r3, [pc, #208]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c8:	4b31      	ldr	r3, [pc, #196]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 80043ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043cc:	4a30      	ldr	r2, [pc, #192]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80043d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004490 <HAL_DCMI_MspInit+0x164>)
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80043e0:	2360      	movs	r3, #96	@ 0x60
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e4:	2302      	movs	r3, #2
 80043e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ec:	2300      	movs	r3, #0
 80043ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80043f0:	230d      	movs	r3, #13
 80043f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043f8:	4619      	mov	r1, r3
 80043fa:	4826      	ldr	r0, [pc, #152]	@ (8004494 <HAL_DCMI_MspInit+0x168>)
 80043fc:	f003 ff2c 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8004400:	2308      	movs	r3, #8
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004408:	2300      	movs	r3, #0
 800440a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440c:	2300      	movs	r3, #0
 800440e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004410:	230d      	movs	r3, #13
 8004412:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8004414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004418:	4619      	mov	r1, r3
 800441a:	481f      	ldr	r0, [pc, #124]	@ (8004498 <HAL_DCMI_MspInit+0x16c>)
 800441c:	f003 ff1c 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8004420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442e:	2300      	movs	r3, #0
 8004430:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004432:	230d      	movs	r3, #13
 8004434:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8004436:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800443a:	4619      	mov	r1, r3
 800443c:	4817      	ldr	r0, [pc, #92]	@ (800449c <HAL_DCMI_MspInit+0x170>)
 800443e:	f003 ff0b 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8004442:	f44f 43bc 	mov.w	r3, #24064	@ 0x5e00
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004448:	2302      	movs	r3, #2
 800444a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004450:	2300      	movs	r3, #0
 8004452:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004454:	230d      	movs	r3, #13
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800445c:	4619      	mov	r1, r3
 800445e:	4810      	ldr	r0, [pc, #64]	@ (80044a0 <HAL_DCMI_MspInit+0x174>)
 8004460:	f003 fefa 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8004464:	2350      	movs	r3, #80	@ 0x50
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004468:	2302      	movs	r3, #2
 800446a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446c:	2300      	movs	r3, #0
 800446e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004470:	2300      	movs	r3, #0
 8004472:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8004474:	230d      	movs	r3, #13
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800447c:	4619      	mov	r1, r3
 800447e:	4809      	ldr	r0, [pc, #36]	@ (80044a4 <HAL_DCMI_MspInit+0x178>)
 8004480:	f003 feea 	bl	8008258 <HAL_GPIO_Init>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8004484:	bf00      	nop
 8004486:	3738      	adds	r7, #56	@ 0x38
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	50050000 	.word	0x50050000
 8004490:	40023800 	.word	0x40023800
 8004494:	40021000 	.word	0x40021000
 8004498:	40020c00 	.word	0x40020c00
 800449c:	40021800 	.word	0x40021800
 80044a0:	40021c00 	.word	0x40021c00
 80044a4:	40020000 	.word	0x40020000

080044a8 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a0d      	ldr	r2, [pc, #52]	@ (80044ec <HAL_DMA2D_MspInit+0x44>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d113      	bne.n	80044e2 <HAL_DMA2D_MspInit+0x3a>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80044ba:	4b0d      	ldr	r3, [pc, #52]	@ (80044f0 <HAL_DMA2D_MspInit+0x48>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	4a0c      	ldr	r2, [pc, #48]	@ (80044f0 <HAL_DMA2D_MspInit+0x48>)
 80044c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80044c6:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <HAL_DMA2D_MspInit+0x48>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80044d2:	2200      	movs	r2, #0
 80044d4:	2105      	movs	r1, #5
 80044d6:	205a      	movs	r0, #90	@ 0x5a
 80044d8:	f002 fb7a 	bl	8006bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80044dc:	205a      	movs	r0, #90	@ 0x5a
 80044de:	f002 fb93 	bl	8006c08 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	4002b000 	.word	0x4002b000
 80044f0:	40023800 	.word	0x40023800

080044f4 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08e      	sub	sp, #56	@ 0x38
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	605a      	str	r2, [r3, #4]
 8004506:	609a      	str	r2, [r3, #8]
 8004508:	60da      	str	r2, [r3, #12]
 800450a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a3f      	ldr	r2, [pc, #252]	@ (8004610 <HAL_ETH_MspInit+0x11c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d178      	bne.n	8004608 <HAL_ETH_MspInit+0x114>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004516:	4b3f      	ldr	r3, [pc, #252]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451a:	4a3e      	ldr	r2, [pc, #248]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 800451c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004520:	6313      	str	r3, [r2, #48]	@ 0x30
 8004522:	4b3c      	ldr	r3, [pc, #240]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452a:	623b      	str	r3, [r7, #32]
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	4b39      	ldr	r3, [pc, #228]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004532:	4a38      	ldr	r2, [pc, #224]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004534:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004538:	6313      	str	r3, [r2, #48]	@ 0x30
 800453a:	4b36      	ldr	r3, [pc, #216]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 800453c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	4b33      	ldr	r3, [pc, #204]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454a:	4a32      	ldr	r2, [pc, #200]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 800454c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004550:	6313      	str	r3, [r2, #48]	@ 0x30
 8004552:	4b30      	ldr	r3, [pc, #192]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004556:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800455e:	4b2d      	ldr	r3, [pc, #180]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004562:	4a2c      	ldr	r2, [pc, #176]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004568:	6313      	str	r3, [r2, #48]	@ 0x30
 800456a:	4b2a      	ldr	r3, [pc, #168]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 800456c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800456e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004576:	4b27      	ldr	r3, [pc, #156]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457a:	4a26      	ldr	r2, [pc, #152]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 800457c:	f043 0304 	orr.w	r3, r3, #4
 8004580:	6313      	str	r3, [r2, #48]	@ 0x30
 8004582:	4b24      	ldr	r3, [pc, #144]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	f003 0304 	and.w	r3, r3, #4
 800458a:	613b      	str	r3, [r7, #16]
 800458c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458e:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	4a20      	ldr	r2, [pc, #128]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	6313      	str	r3, [r2, #48]	@ 0x30
 800459a:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <HAL_ETH_MspInit+0x120>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80045a6:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ac:	2302      	movs	r3, #2
 80045ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b4:	2303      	movs	r3, #3
 80045b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045b8:	230b      	movs	r3, #11
 80045ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80045bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045c0:	4619      	mov	r1, r3
 80045c2:	4815      	ldr	r0, [pc, #84]	@ (8004618 <HAL_ETH_MspInit+0x124>)
 80045c4:	f003 fe48 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80045c8:	2332      	movs	r3, #50	@ 0x32
 80045ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045cc:	2302      	movs	r3, #2
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d4:	2303      	movs	r3, #3
 80045d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045d8:	230b      	movs	r3, #11
 80045da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80045e0:	4619      	mov	r1, r3
 80045e2:	480e      	ldr	r0, [pc, #56]	@ (800461c <HAL_ETH_MspInit+0x128>)
 80045e4:	f003 fe38 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80045e8:	2386      	movs	r3, #134	@ 0x86
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045f4:	2303      	movs	r3, #3
 80045f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80045f8:	230b      	movs	r3, #11
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004600:	4619      	mov	r1, r3
 8004602:	4807      	ldr	r0, [pc, #28]	@ (8004620 <HAL_ETH_MspInit+0x12c>)
 8004604:	f003 fe28 	bl	8008258 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8004608:	bf00      	nop
 800460a:	3738      	adds	r7, #56	@ 0x38
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40028000 	.word	0x40028000
 8004614:	40023800 	.word	0x40023800
 8004618:	40021800 	.word	0x40021800
 800461c:	40020800 	.word	0x40020800
 8004620:	40020000 	.word	0x40020000

08004624 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b0ac      	sub	sp, #176	@ 0xb0
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800462c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800463c:	f107 0318 	add.w	r3, r7, #24
 8004640:	2284      	movs	r2, #132	@ 0x84
 8004642:	2100      	movs	r1, #0
 8004644:	4618      	mov	r0, r3
 8004646:	f013 fb4d 	bl	8017ce4 <memset>
  if(hi2c->Instance==I2C1)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a44      	ldr	r2, [pc, #272]	@ (8004760 <HAL_I2C_MspInit+0x13c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d13d      	bne.n	80046d0 <HAL_I2C_MspInit+0xac>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004654:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004658:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800465a:	2300      	movs	r3, #0
 800465c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800465e:	f107 0318 	add.w	r3, r7, #24
 8004662:	4618      	mov	r0, r3
 8004664:	f006 ffa0 	bl	800b5a8 <HAL_RCCEx_PeriphCLKConfig>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800466e:	f7ff fd49 	bl	8004104 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004672:	4b3c      	ldr	r3, [pc, #240]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004676:	4a3b      	ldr	r2, [pc, #236]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 8004678:	f043 0302 	orr.w	r3, r3, #2
 800467c:	6313      	str	r3, [r2, #48]	@ 0x30
 800467e:	4b39      	ldr	r3, [pc, #228]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800468a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800468e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004692:	2312      	movs	r3, #18
 8004694:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004698:	2301      	movs	r3, #1
 800469a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046a4:	2304      	movs	r3, #4
 80046a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80046ae:	4619      	mov	r1, r3
 80046b0:	482d      	ldr	r0, [pc, #180]	@ (8004768 <HAL_I2C_MspInit+0x144>)
 80046b2:	f003 fdd1 	bl	8008258 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 80046bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046c2:	4b28      	ldr	r3, [pc, #160]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C3_MspInit 1 */

    /* USER CODE END I2C3_MspInit 1 */
  }

}
 80046ce:	e042      	b.n	8004756 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a25      	ldr	r2, [pc, #148]	@ (800476c <HAL_I2C_MspInit+0x148>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d13d      	bne.n	8004756 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80046da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80046de:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80046e0:	2300      	movs	r3, #0
 80046e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046e6:	f107 0318 	add.w	r3, r7, #24
 80046ea:	4618      	mov	r0, r3
 80046ec:	f006 ff5c 	bl	800b5a8 <HAL_RCCEx_PeriphCLKConfig>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80046f6:	f7ff fd05 	bl	8004104 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80046fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fe:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 8004700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004704:	6313      	str	r3, [r2, #48]	@ 0x30
 8004706:	4b17      	ldr	r3, [pc, #92]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004712:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004716:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800471a:	2312      	movs	r3, #18
 800471c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004720:	2301      	movs	r3, #1
 8004722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004726:	2303      	movs	r3, #3
 8004728:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800472c:	2304      	movs	r3, #4
 800472e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004732:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004736:	4619      	mov	r1, r3
 8004738:	480d      	ldr	r0, [pc, #52]	@ (8004770 <HAL_I2C_MspInit+0x14c>)
 800473a:	f003 fd8d 	bl	8008258 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800473e:	4b09      	ldr	r3, [pc, #36]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	4a08      	ldr	r2, [pc, #32]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 8004744:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004748:	6413      	str	r3, [r2, #64]	@ 0x40
 800474a:	4b06      	ldr	r3, [pc, #24]	@ (8004764 <HAL_I2C_MspInit+0x140>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
}
 8004756:	bf00      	nop
 8004758:	37b0      	adds	r7, #176	@ 0xb0
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40005400 	.word	0x40005400
 8004764:	40023800 	.word	0x40023800
 8004768:	40020400 	.word	0x40020400
 800476c:	40005c00 	.word	0x40005c00
 8004770:	40021c00 	.word	0x40021c00

08004774 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b08e      	sub	sp, #56	@ 0x38
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	605a      	str	r2, [r3, #4]
 8004786:	609a      	str	r2, [r3, #8]
 8004788:	60da      	str	r2, [r3, #12]
 800478a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a55      	ldr	r2, [pc, #340]	@ (80048e8 <HAL_LTDC_MspInit+0x174>)
 8004792:	4293      	cmp	r3, r2
 8004794:	f040 80a3 	bne.w	80048de <HAL_LTDC_MspInit+0x16a>
  {
    /* USER CODE BEGIN LTDC_MspInit 0 */

    /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004798:	4b54      	ldr	r3, [pc, #336]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 800479a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479c:	4a53      	ldr	r2, [pc, #332]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 800479e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80047a4:	4b51      	ldr	r3, [pc, #324]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047b0:	4b4e      	ldr	r3, [pc, #312]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b4:	4a4d      	ldr	r2, [pc, #308]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047b6:	f043 0310 	orr.w	r3, r3, #16
 80047ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80047bc:	4b4b      	ldr	r3, [pc, #300]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80047c8:	4b48      	ldr	r3, [pc, #288]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047cc:	4a47      	ldr	r2, [pc, #284]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80047d4:	4b45      	ldr	r3, [pc, #276]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80047e0:	4b42      	ldr	r3, [pc, #264]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e4:	4a41      	ldr	r2, [pc, #260]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80047ec:	4b3f      	ldr	r3, [pc, #252]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80047f8:	4b3c      	ldr	r3, [pc, #240]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fc:	4a3b      	ldr	r2, [pc, #236]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 80047fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004802:	6313      	str	r3, [r2, #48]	@ 0x30
 8004804:	4b39      	ldr	r3, [pc, #228]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 8004806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004810:	4b36      	ldr	r3, [pc, #216]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	4a35      	ldr	r2, [pc, #212]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 8004816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800481a:	6313      	str	r3, [r2, #48]	@ 0x30
 800481c:	4b33      	ldr	r3, [pc, #204]	@ (80048ec <HAL_LTDC_MspInit+0x178>)
 800481e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8004828:	2310      	movs	r3, #16
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800482c:	2302      	movs	r3, #2
 800482e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004834:	2300      	movs	r3, #0
 8004836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004838:	230e      	movs	r3, #14
 800483a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800483c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004840:	4619      	mov	r1, r3
 8004842:	482b      	ldr	r0, [pc, #172]	@ (80048f0 <HAL_LTDC_MspInit+0x17c>)
 8004844:	f003 fd08 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004848:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484e:	2302      	movs	r3, #2
 8004850:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004856:	2300      	movs	r3, #0
 8004858:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800485a:	230e      	movs	r3, #14
 800485c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800485e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004862:	4619      	mov	r1, r3
 8004864:	4823      	ldr	r0, [pc, #140]	@ (80048f4 <HAL_LTDC_MspInit+0x180>)
 8004866:	f003 fcf7 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800486a:	23f7      	movs	r3, #247	@ 0xf7
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486e:	2302      	movs	r3, #2
 8004870:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004872:	2300      	movs	r3, #0
 8004874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004876:	2300      	movs	r3, #0
 8004878:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800487a:	230e      	movs	r3, #14
 800487c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800487e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004882:	4619      	mov	r1, r3
 8004884:	481c      	ldr	r0, [pc, #112]	@ (80048f8 <HAL_LTDC_MspInit+0x184>)
 8004886:	f003 fce7 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800488a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800488e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004890:	2302      	movs	r3, #2
 8004892:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004894:	2300      	movs	r3, #0
 8004896:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004898:	2300      	movs	r3, #0
 800489a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800489c:	2309      	movs	r3, #9
 800489e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80048a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048a4:	4619      	mov	r1, r3
 80048a6:	4815      	ldr	r0, [pc, #84]	@ (80048fc <HAL_LTDC_MspInit+0x188>)
 80048a8:	f003 fcd6 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80048ac:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048b2:	2302      	movs	r3, #2
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ba:	2300      	movs	r3, #0
 80048bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80048be:	230e      	movs	r3, #14
 80048c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80048c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048c6:	4619      	mov	r1, r3
 80048c8:	480d      	ldr	r0, [pc, #52]	@ (8004900 <HAL_LTDC_MspInit+0x18c>)
 80048ca:	f003 fcc5 	bl	8008258 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2105      	movs	r1, #5
 80048d2:	2058      	movs	r0, #88	@ 0x58
 80048d4:	f002 f97c 	bl	8006bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80048d8:	2058      	movs	r0, #88	@ 0x58
 80048da:	f002 f995 	bl	8006c08 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80048de:	bf00      	nop
 80048e0:	3738      	adds	r7, #56	@ 0x38
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40016800 	.word	0x40016800
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40021000 	.word	0x40021000
 80048f4:	40022400 	.word	0x40022400
 80048f8:	40022800 	.word	0x40022800
 80048fc:	40021800 	.word	0x40021800
 8004900:	40022000 	.word	0x40022000

08004904 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	@ 0x30
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800490c:	f107 031c 	add.w	r3, r7, #28
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	609a      	str	r2, [r3, #8]
 8004918:	60da      	str	r2, [r3, #12]
 800491a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a3b      	ldr	r2, [pc, #236]	@ (8004a10 <HAL_QSPI_MspInit+0x10c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d170      	bne.n	8004a08 <HAL_QSPI_MspInit+0x104>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8004926:	4b3b      	ldr	r3, [pc, #236]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	4a3a      	ldr	r2, [pc, #232]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	6393      	str	r3, [r2, #56]	@ 0x38
 8004932:	4b38      	ldr	r3, [pc, #224]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 8004934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	61bb      	str	r3, [r7, #24]
 800493c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800493e:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004942:	4a34      	ldr	r2, [pc, #208]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 8004944:	f043 0310 	orr.w	r3, r3, #16
 8004948:	6313      	str	r3, [r2, #48]	@ 0x30
 800494a:	4b32      	ldr	r3, [pc, #200]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004956:	4b2f      	ldr	r3, [pc, #188]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800495a:	4a2e      	ldr	r2, [pc, #184]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 800495c:	f043 0302 	orr.w	r3, r3, #2
 8004960:	6313      	str	r3, [r2, #48]	@ 0x30
 8004962:	4b2c      	ldr	r3, [pc, #176]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	613b      	str	r3, [r7, #16]
 800496c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800496e:	4b29      	ldr	r3, [pc, #164]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 8004970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004972:	4a28      	ldr	r2, [pc, #160]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 8004974:	f043 0308 	orr.w	r3, r3, #8
 8004978:	6313      	str	r3, [r2, #48]	@ 0x30
 800497a:	4b26      	ldr	r3, [pc, #152]	@ (8004a14 <HAL_QSPI_MspInit+0x110>)
 800497c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8004986:	2304      	movs	r3, #4
 8004988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498a:	2302      	movs	r3, #2
 800498c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004992:	2303      	movs	r3, #3
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8004996:	2309      	movs	r3, #9
 8004998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800499a:	f107 031c 	add.w	r3, r7, #28
 800499e:	4619      	mov	r1, r3
 80049a0:	481d      	ldr	r0, [pc, #116]	@ (8004a18 <HAL_QSPI_MspInit+0x114>)
 80049a2:	f003 fc59 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80049a6:	2340      	movs	r3, #64	@ 0x40
 80049a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049aa:	2302      	movs	r3, #2
 80049ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049b2:	2303      	movs	r3, #3
 80049b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80049b6:	230a      	movs	r3, #10
 80049b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80049ba:	f107 031c 	add.w	r3, r7, #28
 80049be:	4619      	mov	r1, r3
 80049c0:	4816      	ldr	r0, [pc, #88]	@ (8004a1c <HAL_QSPI_MspInit+0x118>)
 80049c2:	f003 fc49 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049c6:	2304      	movs	r3, #4
 80049c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ca:	2302      	movs	r3, #2
 80049cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d2:	2303      	movs	r3, #3
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80049d6:	2309      	movs	r3, #9
 80049d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049da:	f107 031c 	add.w	r3, r7, #28
 80049de:	4619      	mov	r1, r3
 80049e0:	480e      	ldr	r0, [pc, #56]	@ (8004a1c <HAL_QSPI_MspInit+0x118>)
 80049e2:	f003 fc39 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80049e6:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80049ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ec:	2302      	movs	r3, #2
 80049ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f4:	2303      	movs	r3, #3
 80049f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80049f8:	2309      	movs	r3, #9
 80049fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049fc:	f107 031c 	add.w	r3, r7, #28
 8004a00:	4619      	mov	r1, r3
 8004a02:	4807      	ldr	r0, [pc, #28]	@ (8004a20 <HAL_QSPI_MspInit+0x11c>)
 8004a04:	f003 fc28 	bl	8008258 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8004a08:	bf00      	nop
 8004a0a:	3730      	adds	r7, #48	@ 0x30
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	a0001000 	.word	0xa0001000
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40020400 	.word	0x40020400
 8004a20:	40020c00 	.word	0x40020c00

08004a24 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b0a4      	sub	sp, #144	@ 0x90
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	2284      	movs	r2, #132	@ 0x84
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f013 f955 	bl	8017ce4 <memset>
  if(hrtc->Instance==RTC)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a78 <HAL_RTC_MspInit+0x54>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d114      	bne.n	8004a6e <HAL_RTC_MspInit+0x4a>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004a44:	2320      	movs	r3, #32
 8004a46:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a4e:	f107 030c 	add.w	r3, r7, #12
 8004a52:	4618      	mov	r0, r3
 8004a54:	f006 fda8 	bl	800b5a8 <HAL_RCCEx_PeriphCLKConfig>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004a5e:	f7ff fb51 	bl	8004104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <HAL_RTC_MspInit+0x58>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a66:	4a05      	ldr	r2, [pc, #20]	@ (8004a7c <HAL_RTC_MspInit+0x58>)
 8004a68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a6c:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8004a6e:	bf00      	nop
 8004a70:	3790      	adds	r7, #144	@ 0x90
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40002800 	.word	0x40002800
 8004a7c:	40023800 	.word	0x40023800

08004a80 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08a      	sub	sp, #40	@ 0x28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a88:	f107 0314 	add.w	r3, r7, #20
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a25      	ldr	r2, [pc, #148]	@ (8004b34 <HAL_SD_MspInit+0xb4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d144      	bne.n	8004b2c <HAL_SD_MspInit+0xac>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004aa2:	4b25      	ldr	r3, [pc, #148]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	4a24      	ldr	r2, [pc, #144]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004aa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aae:	4b22      	ldr	r3, [pc, #136]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aba:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abe:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004ac0:	f043 0304 	orr.w	r3, r3, #4
 8004ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ad2:	4b19      	ldr	r3, [pc, #100]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	4a18      	ldr	r2, [pc, #96]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004ad8:	f043 0308 	orr.w	r3, r3, #8
 8004adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ade:	4b16      	ldr	r3, [pc, #88]	@ (8004b38 <HAL_SD_MspInit+0xb8>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	60bb      	str	r3, [r7, #8]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8004aea:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8004aee:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004af0:	2302      	movs	r3, #2
 8004af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af8:	2303      	movs	r3, #3
 8004afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004afc:	230c      	movs	r3, #12
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	4619      	mov	r1, r3
 8004b06:	480d      	ldr	r0, [pc, #52]	@ (8004b3c <HAL_SD_MspInit+0xbc>)
 8004b08:	f003 fba6 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b10:	2302      	movs	r3, #2
 8004b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004b1c:	230c      	movs	r3, #12
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8004b20:	f107 0314 	add.w	r3, r7, #20
 8004b24:	4619      	mov	r1, r3
 8004b26:	4806      	ldr	r0, [pc, #24]	@ (8004b40 <HAL_SD_MspInit+0xc0>)
 8004b28:	f003 fb96 	bl	8008258 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8004b2c:	bf00      	nop
 8004b2e:	3728      	adds	r7, #40	@ 0x28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40012c00 	.word	0x40012c00
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40020800 	.word	0x40020800
 8004b40:	40020c00 	.word	0x40020c00

08004b44 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b0aa      	sub	sp, #168	@ 0xa8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b4c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	605a      	str	r2, [r3, #4]
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b5c:	f107 0310 	add.w	r3, r7, #16
 8004b60:	2284      	movs	r2, #132	@ 0x84
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f013 f8bd 	bl	8017ce4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8004b72:	d143      	bne.n	8004bfc <HAL_SPDIFRX_MspInit+0xb8>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8004b74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8004b7a:	2364      	movs	r3, #100	@ 0x64
 8004b7c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8004b7e:	2302      	movs	r3, #2
 8004b80:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004b82:	2302      	movs	r3, #2
 8004b84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8004b86:	2302      	movs	r3, #2
 8004b88:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b8e:	f107 0310 	add.w	r3, r7, #16
 8004b92:	4618      	mov	r0, r3
 8004b94:	f006 fd08 	bl	800b5a8 <HAL_RCCEx_PeriphCLKConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8004b9e:	f7ff fab1 	bl	8004104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8004ba2:	4b18      	ldr	r3, [pc, #96]	@ (8004c04 <HAL_SPDIFRX_MspInit+0xc0>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	4a17      	ldr	r2, [pc, #92]	@ (8004c04 <HAL_SPDIFRX_MspInit+0xc0>)
 8004ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bae:	4b15      	ldr	r3, [pc, #84]	@ (8004c04 <HAL_SPDIFRX_MspInit+0xc0>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bba:	4b12      	ldr	r3, [pc, #72]	@ (8004c04 <HAL_SPDIFRX_MspInit+0xc0>)
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bbe:	4a11      	ldr	r2, [pc, #68]	@ (8004c04 <HAL_SPDIFRX_MspInit+0xc0>)
 8004bc0:	f043 0308 	orr.w	r3, r3, #8
 8004bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <HAL_SPDIFRX_MspInit+0xc0>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8004bea:	2308      	movs	r3, #8
 8004bec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8004bf0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4804      	ldr	r0, [pc, #16]	@ (8004c08 <HAL_SPDIFRX_MspInit+0xc4>)
 8004bf8:	f003 fb2e 	bl	8008258 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8004bfc:	bf00      	nop
 8004bfe:	37a8      	adds	r7, #168	@ 0xa8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40023800 	.word	0x40023800
 8004c08:	40020c00 	.word	0x40020c00

08004c0c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	@ 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a25      	ldr	r2, [pc, #148]	@ (8004cc0 <HAL_SPI_MspInit+0xb4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d144      	bne.n	8004cb8 <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c2e:	4b25      	ldr	r3, [pc, #148]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	4a24      	ldr	r2, [pc, #144]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c3a:	4b22      	ldr	r3, [pc, #136]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c42:	613b      	str	r3, [r7, #16]
 8004c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004c46:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c52:	4b1c      	ldr	r3, [pc, #112]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5e:	4b19      	ldr	r3, [pc, #100]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c6a:	4b16      	ldr	r3, [pc, #88]	@ (8004cc4 <HAL_SPI_MspInit+0xb8>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	60bb      	str	r3, [r7, #8]
 8004c74:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004c76:	2302      	movs	r3, #2
 8004c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c82:	2300      	movs	r3, #0
 8004c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c86:	2305      	movs	r3, #5
 8004c88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004c8a:	f107 0314 	add.w	r3, r7, #20
 8004c8e:	4619      	mov	r1, r3
 8004c90:	480d      	ldr	r0, [pc, #52]	@ (8004cc8 <HAL_SPI_MspInit+0xbc>)
 8004c92:	f003 fae1 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8004c96:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8004c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004ca8:	2305      	movs	r3, #5
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cac:	f107 0314 	add.w	r3, r7, #20
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4806      	ldr	r0, [pc, #24]	@ (8004ccc <HAL_SPI_MspInit+0xc0>)
 8004cb4:	f003 fad0 	bl	8008258 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004cb8:	bf00      	nop
 8004cba:	3728      	adds	r7, #40	@ 0x28
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40003800 	.word	0x40003800
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40022000 	.word	0x40022000
 8004ccc:	40020400 	.word	0x40020400

08004cd0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b089      	sub	sp, #36	@ 0x24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8004d98 <HAL_TIM_Base_MspInit+0xc8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d10c      	bne.n	8004cfc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ce2:	4b2e      	ldr	r3, [pc, #184]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cee:	4b2b      	ldr	r3, [pc, #172]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004cfa:	e046      	b.n	8004d8a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d10c      	bne.n	8004d20 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d06:	4b25      	ldr	r3, [pc, #148]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	4a24      	ldr	r2, [pc, #144]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d12:	4b22      	ldr	r3, [pc, #136]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	61bb      	str	r3, [r7, #24]
 8004d1c:	69bb      	ldr	r3, [r7, #24]
}
 8004d1e:	e034      	b.n	8004d8a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1e      	ldr	r2, [pc, #120]	@ (8004da0 <HAL_TIM_Base_MspInit+0xd0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d10c      	bne.n	8004d44 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d36:	4b19      	ldr	r3, [pc, #100]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	697b      	ldr	r3, [r7, #20]
}
 8004d42:	e022      	b.n	8004d8a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a16      	ldr	r2, [pc, #88]	@ (8004da4 <HAL_TIM_Base_MspInit+0xd4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d10c      	bne.n	8004d68 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d4e:	4b13      	ldr	r3, [pc, #76]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d54:	f043 0308 	orr.w	r3, r3, #8
 8004d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d5a:	4b10      	ldr	r3, [pc, #64]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	f003 0308 	and.w	r3, r3, #8
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]
}
 8004d66:	e010      	b.n	8004d8a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0e      	ldr	r2, [pc, #56]	@ (8004da8 <HAL_TIM_Base_MspInit+0xd8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d10b      	bne.n	8004d8a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d72:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	4a09      	ldr	r2, [pc, #36]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d7e:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <HAL_TIM_Base_MspInit+0xcc>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
}
 8004d8a:	bf00      	nop
 8004d8c:	3724      	adds	r7, #36	@ 0x24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40000c00 	.word	0x40000c00
 8004da8:	40010400 	.word	0x40010400

08004dac <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a0a      	ldr	r2, [pc, #40]	@ (8004de4 <HAL_TIM_PWM_MspInit+0x38>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM12_MspInit 0 */

    /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc2:	4a09      	ldr	r2, [pc, #36]	@ (8004de8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dca:	4b07      	ldr	r3, [pc, #28]	@ (8004de8 <HAL_TIM_PWM_MspInit+0x3c>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd2:	60fb      	str	r3, [r7, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM12_MspInit 1 */

  }

}
 8004dd6:	bf00      	nop
 8004dd8:	3714      	adds	r7, #20
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40001800 	.word	0x40001800
 8004de8:	40023800 	.word	0x40023800

08004dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08c      	sub	sp, #48	@ 0x30
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df4:	f107 031c 	add.w	r3, r7, #28
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	60da      	str	r2, [r3, #12]
 8004e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a56      	ldr	r2, [pc, #344]	@ (8004f64 <HAL_TIM_MspPostInit+0x178>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d11d      	bne.n	8004e4a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e0e:	4b56      	ldr	r3, [pc, #344]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e12:	4a55      	ldr	r2, [pc, #340]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004e14:	f043 0301 	orr.w	r3, r3, #1
 8004e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e1a:	4b53      	ldr	r3, [pc, #332]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8004e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e34:	2300      	movs	r3, #0
 8004e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8004e3c:	f107 031c 	add.w	r3, r7, #28
 8004e40:	4619      	mov	r1, r3
 8004e42:	484a      	ldr	r0, [pc, #296]	@ (8004f6c <HAL_TIM_MspPostInit+0x180>)
 8004e44:	f003 fa08 	bl	8008258 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM12_MspPostInit 1 */

    /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8004e48:	e087      	b.n	8004f5a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e52:	d11d      	bne.n	8004e90 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e54:	4b44      	ldr	r3, [pc, #272]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	4a43      	ldr	r2, [pc, #268]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e60:	4b41      	ldr	r3, [pc, #260]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8004e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e72:	2302      	movs	r3, #2
 8004e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8004e82:	f107 031c 	add.w	r3, r7, #28
 8004e86:	4619      	mov	r1, r3
 8004e88:	4838      	ldr	r0, [pc, #224]	@ (8004f6c <HAL_TIM_MspPostInit+0x180>)
 8004e8a:	f003 f9e5 	bl	8008258 <HAL_GPIO_Init>
}
 8004e8e:	e064      	b.n	8004f5a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a36      	ldr	r2, [pc, #216]	@ (8004f70 <HAL_TIM_MspPostInit+0x184>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d11c      	bne.n	8004ed4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e9a:	4b33      	ldr	r3, [pc, #204]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9e:	4a32      	ldr	r2, [pc, #200]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004ea0:	f043 0302 	orr.w	r3, r3, #2
 8004ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ea6:	4b30      	ldr	r3, [pc, #192]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	613b      	str	r3, [r7, #16]
 8004eb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8004ec6:	f107 031c 	add.w	r3, r7, #28
 8004eca:	4619      	mov	r1, r3
 8004ecc:	4829      	ldr	r0, [pc, #164]	@ (8004f74 <HAL_TIM_MspPostInit+0x188>)
 8004ece:	f003 f9c3 	bl	8008258 <HAL_GPIO_Init>
}
 8004ed2:	e042      	b.n	8004f5a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a27      	ldr	r2, [pc, #156]	@ (8004f78 <HAL_TIM_MspPostInit+0x18c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d11c      	bne.n	8004f18 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004ede:	4b22      	ldr	r3, [pc, #136]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee2:	4a21      	ldr	r2, [pc, #132]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004eea:	4b1f      	ldr	r3, [pc, #124]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efa:	2302      	movs	r3, #2
 8004efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004f06:	2302      	movs	r3, #2
 8004f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8004f0a:	f107 031c 	add.w	r3, r7, #28
 8004f0e:	4619      	mov	r1, r3
 8004f10:	481a      	ldr	r0, [pc, #104]	@ (8004f7c <HAL_TIM_MspPostInit+0x190>)
 8004f12:	f003 f9a1 	bl	8008258 <HAL_GPIO_Init>
}
 8004f16:	e020      	b.n	8004f5a <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	@ (8004f80 <HAL_TIM_MspPostInit+0x194>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d11b      	bne.n	8004f5a <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f22:	4b11      	ldr	r3, [pc, #68]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f26:	4a10      	ldr	r2, [pc, #64]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004f28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f68 <HAL_TIM_MspPostInit+0x17c>)
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8004f3a:	2340      	movs	r3, #64	@ 0x40
 8004f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3e:	2302      	movs	r3, #2
 8004f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f46:	2300      	movs	r3, #0
 8004f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8004f4a:	2309      	movs	r3, #9
 8004f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8004f4e:	f107 031c 	add.w	r3, r7, #28
 8004f52:	4619      	mov	r1, r3
 8004f54:	480b      	ldr	r0, [pc, #44]	@ (8004f84 <HAL_TIM_MspPostInit+0x198>)
 8004f56:	f003 f97f 	bl	8008258 <HAL_GPIO_Init>
}
 8004f5a:	bf00      	nop
 8004f5c:	3730      	adds	r7, #48	@ 0x30
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	40020000 	.word	0x40020000
 8004f70:	40000400 	.word	0x40000400
 8004f74:	40020400 	.word	0x40020400
 8004f78:	40000c00 	.word	0x40000c00
 8004f7c:	40022000 	.word	0x40022000
 8004f80:	40001800 	.word	0x40001800
 8004f84:	40021c00 	.word	0x40021c00

08004f88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b0ae      	sub	sp, #184	@ 0xb8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004fa0:	f107 0320 	add.w	r3, r7, #32
 8004fa4:	2284      	movs	r2, #132	@ 0x84
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f012 fe9b 	bl	8017ce4 <memset>
  if(huart->Instance==USART1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a53      	ldr	r2, [pc, #332]	@ (8005100 <HAL_UART_MspInit+0x178>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d15d      	bne.n	8005074 <HAL_UART_MspInit+0xec>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004fb8:	2340      	movs	r3, #64	@ 0x40
 8004fba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fc0:	f107 0320 	add.w	r3, r7, #32
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f006 faef 	bl	800b5a8 <HAL_RCCEx_PeriphCLKConfig>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004fd0:	f7ff f898 	bl	8004104 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 8004fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 8004fda:	f043 0310 	orr.w	r3, r3, #16
 8004fde:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fe0:	4b48      	ldr	r3, [pc, #288]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	61fb      	str	r3, [r7, #28]
 8004fea:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fec:	4b45      	ldr	r3, [pc, #276]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	4a44      	ldr	r2, [pc, #272]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 8004ff2:	f043 0302 	orr.w	r3, r3, #2
 8004ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ff8:	4b42      	ldr	r3, [pc, #264]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005004:	4b3f      	ldr	r3, [pc, #252]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	4a3e      	ldr	r2, [pc, #248]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005010:	4b3c      	ldr	r3, [pc, #240]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800501c:	2380      	movs	r3, #128	@ 0x80
 800501e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005022:	2302      	movs	r3, #2
 8005024:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800502e:	2300      	movs	r3, #0
 8005030:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005034:	2307      	movs	r3, #7
 8005036:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800503a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800503e:	4619      	mov	r1, r3
 8005040:	4831      	ldr	r0, [pc, #196]	@ (8005108 <HAL_UART_MspInit+0x180>)
 8005042:	f003 f909 	bl	8008258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005046:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800504a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504e:	2302      	movs	r3, #2
 8005050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005054:	2300      	movs	r3, #0
 8005056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800505a:	2300      	movs	r3, #0
 800505c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005060:	2307      	movs	r3, #7
 8005062:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005066:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800506a:	4619      	mov	r1, r3
 800506c:	4827      	ldr	r0, [pc, #156]	@ (800510c <HAL_UART_MspInit+0x184>)
 800506e:	f003 f8f3 	bl	8008258 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8005072:	e040      	b.n	80050f6 <HAL_UART_MspInit+0x16e>
  else if(huart->Instance==USART6)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a25      	ldr	r2, [pc, #148]	@ (8005110 <HAL_UART_MspInit+0x188>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d13b      	bne.n	80050f6 <HAL_UART_MspInit+0x16e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800507e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005082:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005084:	2300      	movs	r3, #0
 8005086:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005088:	f107 0320 	add.w	r3, r7, #32
 800508c:	4618      	mov	r0, r3
 800508e:	f006 fa8b 	bl	800b5a8 <HAL_RCCEx_PeriphCLKConfig>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_UART_MspInit+0x114>
      Error_Handler();
 8005098:	f7ff f834 	bl	8004104 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800509c:	4b19      	ldr	r3, [pc, #100]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 800509e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a0:	4a18      	ldr	r2, [pc, #96]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 80050a2:	f043 0320 	orr.w	r3, r3, #32
 80050a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80050a8:	4b16      	ldr	r3, [pc, #88]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 80050aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ac:	f003 0320 	and.w	r3, r3, #32
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050b4:	4b13      	ldr	r3, [pc, #76]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 80050b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b8:	4a12      	ldr	r2, [pc, #72]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 80050ba:	f043 0304 	orr.w	r3, r3, #4
 80050be:	6313      	str	r3, [r2, #48]	@ 0x30
 80050c0:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <HAL_UART_MspInit+0x17c>)
 80050c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80050cc:	23c0      	movs	r3, #192	@ 0xc0
 80050ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	2302      	movs	r3, #2
 80050d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d8:	2300      	movs	r3, #0
 80050da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050de:	2303      	movs	r3, #3
 80050e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80050e4:	2308      	movs	r3, #8
 80050e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050ea:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80050ee:	4619      	mov	r1, r3
 80050f0:	4808      	ldr	r0, [pc, #32]	@ (8005114 <HAL_UART_MspInit+0x18c>)
 80050f2:	f003 f8b1 	bl	8008258 <HAL_GPIO_Init>
}
 80050f6:	bf00      	nop
 80050f8:	37b8      	adds	r7, #184	@ 0xb8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40011000 	.word	0x40011000
 8005104:	40023800 	.word	0x40023800
 8005108:	40020400 	.word	0x40020400
 800510c:	40020000 	.word	0x40020000
 8005110:	40011400 	.word	0x40011400
 8005114:	40020800 	.word	0x40020800

08005118 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	605a      	str	r2, [r3, #4]
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	60da      	str	r2, [r3, #12]
 800512a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800512c:	4b3a      	ldr	r3, [pc, #232]	@ (8005218 <HAL_FMC_MspInit+0x100>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d16d      	bne.n	8005210 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8005134:	4b38      	ldr	r3, [pc, #224]	@ (8005218 <HAL_FMC_MspInit+0x100>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800513a:	4b38      	ldr	r3, [pc, #224]	@ (800521c <HAL_FMC_MspInit+0x104>)
 800513c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800513e:	4a37      	ldr	r2, [pc, #220]	@ (800521c <HAL_FMC_MspInit+0x104>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6393      	str	r3, [r2, #56]	@ 0x38
 8005146:	4b35      	ldr	r3, [pc, #212]	@ (800521c <HAL_FMC_MspInit+0x104>)
 8005148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8005152:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8005156:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005158:	2302      	movs	r3, #2
 800515a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005160:	2303      	movs	r3, #3
 8005162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005164:	230c      	movs	r3, #12
 8005166:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005168:	1d3b      	adds	r3, r7, #4
 800516a:	4619      	mov	r1, r3
 800516c:	482c      	ldr	r0, [pc, #176]	@ (8005220 <HAL_FMC_MspInit+0x108>)
 800516e:	f003 f873 	bl	8008258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8005172:	f248 1333 	movw	r3, #33075	@ 0x8133
 8005176:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005178:	2302      	movs	r3, #2
 800517a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005180:	2303      	movs	r3, #3
 8005182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005184:	230c      	movs	r3, #12
 8005186:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005188:	1d3b      	adds	r3, r7, #4
 800518a:	4619      	mov	r1, r3
 800518c:	4825      	ldr	r0, [pc, #148]	@ (8005224 <HAL_FMC_MspInit+0x10c>)
 800518e:	f003 f863 	bl	8008258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8005192:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005196:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005198:	2302      	movs	r3, #2
 800519a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051a0:	2303      	movs	r3, #3
 80051a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051a4:	230c      	movs	r3, #12
 80051a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051a8:	1d3b      	adds	r3, r7, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	481e      	ldr	r0, [pc, #120]	@ (8005228 <HAL_FMC_MspInit+0x110>)
 80051ae:	f003 f853 	bl	8008258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80051b2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80051b6:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	2302      	movs	r3, #2
 80051ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051c0:	2303      	movs	r3, #3
 80051c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051c4:	230c      	movs	r3, #12
 80051c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051c8:	1d3b      	adds	r3, r7, #4
 80051ca:	4619      	mov	r1, r3
 80051cc:	4817      	ldr	r0, [pc, #92]	@ (800522c <HAL_FMC_MspInit+0x114>)
 80051ce:	f003 f843 	bl	8008258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80051d2:	2328      	movs	r3, #40	@ 0x28
 80051d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d6:	2302      	movs	r3, #2
 80051d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051de:	2303      	movs	r3, #3
 80051e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80051e2:	230c      	movs	r3, #12
 80051e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80051e6:	1d3b      	adds	r3, r7, #4
 80051e8:	4619      	mov	r1, r3
 80051ea:	4811      	ldr	r0, [pc, #68]	@ (8005230 <HAL_FMC_MspInit+0x118>)
 80051ec:	f003 f834 	bl	8008258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 80051f0:	2308      	movs	r3, #8
 80051f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f4:	2302      	movs	r3, #2
 80051f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051fc:	2303      	movs	r3, #3
 80051fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005200:	230c      	movs	r3, #12
 8005202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	4619      	mov	r1, r3
 8005208:	480a      	ldr	r0, [pc, #40]	@ (8005234 <HAL_FMC_MspInit+0x11c>)
 800520a:	f003 f825 	bl	8008258 <HAL_GPIO_Init>
 800520e:	e000      	b.n	8005212 <HAL_FMC_MspInit+0xfa>
    return;
 8005210:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20001590 	.word	0x20001590
 800521c:	40023800 	.word	0x40023800
 8005220:	40021000 	.word	0x40021000
 8005224:	40021800 	.word	0x40021800
 8005228:	40020c00 	.word	0x40020c00
 800522c:	40021400 	.word	0x40021400
 8005230:	40021c00 	.word	0x40021c00
 8005234:	40020800 	.word	0x40020800

08005238 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005240:	f7ff ff6a 	bl	8005118 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	@ 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2b      	ldr	r2, [pc, #172]	@ (8005308 <HAL_SAI_MspInit+0xbc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d124      	bne.n	80052a8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800525e:	4b2b      	ldr	r3, [pc, #172]	@ (800530c <HAL_SAI_MspInit+0xc0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10b      	bne.n	800527e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8005266:	4b2a      	ldr	r3, [pc, #168]	@ (8005310 <HAL_SAI_MspInit+0xc4>)
 8005268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526a:	4a29      	ldr	r2, [pc, #164]	@ (8005310 <HAL_SAI_MspInit+0xc4>)
 800526c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005270:	6453      	str	r3, [r2, #68]	@ 0x44
 8005272:	4b27      	ldr	r3, [pc, #156]	@ (8005310 <HAL_SAI_MspInit+0xc4>)
 8005274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800527a:	613b      	str	r3, [r7, #16]
 800527c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800527e:	4b23      	ldr	r3, [pc, #140]	@ (800530c <HAL_SAI_MspInit+0xc0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3301      	adds	r3, #1
 8005284:	4a21      	ldr	r2, [pc, #132]	@ (800530c <HAL_SAI_MspInit+0xc0>)
 8005286:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8005288:	23f0      	movs	r3, #240	@ 0xf0
 800528a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528c:	2302      	movs	r3, #2
 800528e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005290:	2300      	movs	r3, #0
 8005292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005294:	2300      	movs	r3, #0
 8005296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8005298:	230a      	movs	r3, #10
 800529a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800529c:	f107 0314 	add.w	r3, r7, #20
 80052a0:	4619      	mov	r1, r3
 80052a2:	481c      	ldr	r0, [pc, #112]	@ (8005314 <HAL_SAI_MspInit+0xc8>)
 80052a4:	f002 ffd8 	bl	8008258 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005318 <HAL_SAI_MspInit+0xcc>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d125      	bne.n	80052fe <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80052b2:	4b16      	ldr	r3, [pc, #88]	@ (800530c <HAL_SAI_MspInit+0xc0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80052ba:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <HAL_SAI_MspInit+0xc4>)
 80052bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052be:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <HAL_SAI_MspInit+0xc4>)
 80052c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052c6:	4b12      	ldr	r3, [pc, #72]	@ (8005310 <HAL_SAI_MspInit+0xc4>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80052d2:	4b0e      	ldr	r3, [pc, #56]	@ (800530c <HAL_SAI_MspInit+0xc0>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3301      	adds	r3, #1
 80052d8:	4a0c      	ldr	r2, [pc, #48]	@ (800530c <HAL_SAI_MspInit+0xc0>)
 80052da:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80052dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	2302      	movs	r3, #2
 80052e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ea:	2300      	movs	r3, #0
 80052ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80052ee:	230a      	movs	r3, #10
 80052f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80052f2:	f107 0314 	add.w	r3, r7, #20
 80052f6:	4619      	mov	r1, r3
 80052f8:	4808      	ldr	r0, [pc, #32]	@ (800531c <HAL_SAI_MspInit+0xd0>)
 80052fa:	f002 ffad 	bl	8008258 <HAL_GPIO_Init>

    }
}
 80052fe:	bf00      	nop
 8005300:	3728      	adds	r7, #40	@ 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40015c04 	.word	0x40015c04
 800530c:	20001594 	.word	0x20001594
 8005310:	40023800 	.word	0x40023800
 8005314:	40022000 	.word	0x40022000
 8005318:	40015c24 	.word	0x40015c24
 800531c:	40021800 	.word	0x40021800

08005320 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08e      	sub	sp, #56	@ 0x38
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005330:	4b33      	ldr	r3, [pc, #204]	@ (8005400 <HAL_InitTick+0xe0>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005334:	4a32      	ldr	r2, [pc, #200]	@ (8005400 <HAL_InitTick+0xe0>)
 8005336:	f043 0310 	orr.w	r3, r3, #16
 800533a:	6413      	str	r3, [r2, #64]	@ 0x40
 800533c:	4b30      	ldr	r3, [pc, #192]	@ (8005400 <HAL_InitTick+0xe0>)
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	f003 0310 	and.w	r3, r3, #16
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005348:	f107 0210 	add.w	r2, r7, #16
 800534c:	f107 0314 	add.w	r3, r7, #20
 8005350:	4611      	mov	r1, r2
 8005352:	4618      	mov	r0, r3
 8005354:	f006 f8f6 	bl	800b544 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800535c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d103      	bne.n	800536a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005362:	f006 f8c7 	bl	800b4f4 <HAL_RCC_GetPCLK1Freq>
 8005366:	6378      	str	r0, [r7, #52]	@ 0x34
 8005368:	e004      	b.n	8005374 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800536a:	f006 f8c3 	bl	800b4f4 <HAL_RCC_GetPCLK1Freq>
 800536e:	4603      	mov	r3, r0
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005376:	4a23      	ldr	r2, [pc, #140]	@ (8005404 <HAL_InitTick+0xe4>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	0c9b      	lsrs	r3, r3, #18
 800537e:	3b01      	subs	r3, #1
 8005380:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005382:	4b21      	ldr	r3, [pc, #132]	@ (8005408 <HAL_InitTick+0xe8>)
 8005384:	4a21      	ldr	r2, [pc, #132]	@ (800540c <HAL_InitTick+0xec>)
 8005386:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005388:	4b1f      	ldr	r3, [pc, #124]	@ (8005408 <HAL_InitTick+0xe8>)
 800538a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800538e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005390:	4a1d      	ldr	r2, [pc, #116]	@ (8005408 <HAL_InitTick+0xe8>)
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005396:	4b1c      	ldr	r3, [pc, #112]	@ (8005408 <HAL_InitTick+0xe8>)
 8005398:	2200      	movs	r2, #0
 800539a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800539c:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <HAL_InitTick+0xe8>)
 800539e:	2200      	movs	r2, #0
 80053a0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053a2:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <HAL_InitTick+0xe8>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80053a8:	4817      	ldr	r0, [pc, #92]	@ (8005408 <HAL_InitTick+0xe8>)
 80053aa:	f008 fe7c 	bl	800e0a6 <HAL_TIM_Base_Init>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80053b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d11b      	bne.n	80053f4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80053bc:	4812      	ldr	r0, [pc, #72]	@ (8005408 <HAL_InitTick+0xe8>)
 80053be:	f008 fec9 	bl	800e154 <HAL_TIM_Base_Start_IT>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80053c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d111      	bne.n	80053f4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053d0:	2036      	movs	r0, #54	@ 0x36
 80053d2:	f001 fc19 	bl	8006c08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b0f      	cmp	r3, #15
 80053da:	d808      	bhi.n	80053ee <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80053dc:	2200      	movs	r2, #0
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	2036      	movs	r0, #54	@ 0x36
 80053e2:	f001 fbf5 	bl	8006bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <HAL_InitTick+0xf0>)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	e002      	b.n	80053f4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80053f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3738      	adds	r7, #56	@ 0x38
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40023800 	.word	0x40023800
 8005404:	431bde83 	.word	0x431bde83
 8005408:	20001598 	.word	0x20001598
 800540c:	40001000 	.word	0x40001000
 8005410:	20000070 	.word	0x20000070

08005414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <NMI_Handler+0x4>

0800541c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <HardFault_Handler+0x4>

08005424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005428:	bf00      	nop
 800542a:	e7fd      	b.n	8005428 <MemManage_Handler+0x4>

0800542c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005430:	bf00      	nop
 8005432:	e7fd      	b.n	8005430 <BusFault_Handler+0x4>

08005434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005438:	bf00      	nop
 800543a:	e7fd      	b.n	8005438 <UsageFault_Handler+0x4>

0800543c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005440:	bf00      	nop
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
	...

0800544c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005450:	4802      	ldr	r0, [pc, #8]	@ (800545c <TIM6_DAC_IRQHandler+0x10>)
 8005452:	f008 ff4e 	bl	800e2f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20001598 	.word	0x20001598

08005460 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005464:	4802      	ldr	r0, [pc, #8]	@ (8005470 <OTG_FS_IRQHandler+0x10>)
 8005466:	f003 f8d4 	bl	8008612 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	20011da4 	.word	0x20011da4

08005474 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005478:	4802      	ldr	r0, [pc, #8]	@ (8005484 <LTDC_IRQHandler+0x10>)
 800547a:	f005 f841 	bl	800a500 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800547e:	bf00      	nop
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000ca0 	.word	0x20000ca0

08005488 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800548c:	4802      	ldr	r0, [pc, #8]	@ (8005498 <DMA2D_IRQHandler+0x10>)
 800548e:	f002 f9f3 	bl	8007878 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	20000b08 	.word	0x20000b08

0800549c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt (USART6_RX).
  */
void DMA2_Stream1_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80054a0:	4802      	ldr	r0, [pc, #8]	@ (80054ac <DMA2_Stream1_IRQHandler+0x10>)
 80054a2:	f001 ff29 	bl	80072f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20001518 	.word	0x20001518

080054b0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  
  // IDLE 인터럽트 체크 (메시지 끝 감지)
  if (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE)) {
 80054b4:	4b09      	ldr	r3, [pc, #36]	@ (80054dc <USART6_IRQHandler+0x2c>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 0310 	and.w	r3, r3, #16
 80054be:	2b10      	cmp	r3, #16
 80054c0:	d106      	bne.n	80054d0 <USART6_IRQHandler+0x20>
    __HAL_UART_CLEAR_IDLEFLAG(&huart6);  // IDLE 플래그 클리어
 80054c2:	4b06      	ldr	r3, [pc, #24]	@ (80054dc <USART6_IRQHandler+0x2c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2210      	movs	r2, #16
 80054c8:	621a      	str	r2, [r3, #32]
    
    // 외부 함수 호출
    extern void USER_UART_IDLECallback(UART_HandleTypeDef *huart);
    USER_UART_IDLECallback(&huart6);
 80054ca:	4804      	ldr	r0, [pc, #16]	@ (80054dc <USART6_IRQHandler+0x2c>)
 80054cc:	f000 ff22 	bl	8006314 <USER_UART_IDLECallback>
  }

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80054d0:	4802      	ldr	r0, [pc, #8]	@ (80054dc <USART6_IRQHandler+0x2c>)
 80054d2:	f00a f959 	bl	800f788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20001240 	.word	0x20001240

080054e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ec:	2300      	movs	r3, #0
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	e00a      	b.n	8005508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80054f2:	f3af 8000 	nop.w
 80054f6:	4601      	mov	r1, r0
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	60ba      	str	r2, [r7, #8]
 80054fe:	b2ca      	uxtb	r2, r1
 8005500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	3301      	adds	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	dbf0      	blt.n	80054f2 <_read+0x12>
  }

  return len;
 8005510:	687b      	ldr	r3, [r7, #4]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b086      	sub	sp, #24
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	e009      	b.n	8005540 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	60ba      	str	r2, [r7, #8]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	3301      	adds	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	dbf1      	blt.n	800552c <_write+0x12>
  }
  return len;
 8005548:	687b      	ldr	r3, [r7, #4]
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <_close>:

int _close(int file)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800555e:	4618      	mov	r0, r3
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800557a:	605a      	str	r2, [r3, #4]
  return 0;
 800557c:	2300      	movs	r3, #0
}
 800557e:	4618      	mov	r0, r3
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <_isatty>:

int _isatty(int file)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005592:	2301      	movs	r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3714      	adds	r7, #20
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
	...

080055bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055c4:	4a14      	ldr	r2, [pc, #80]	@ (8005618 <_sbrk+0x5c>)
 80055c6:	4b15      	ldr	r3, [pc, #84]	@ (800561c <_sbrk+0x60>)
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <_sbrk+0x64>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055d8:	4b11      	ldr	r3, [pc, #68]	@ (8005620 <_sbrk+0x64>)
 80055da:	4a12      	ldr	r2, [pc, #72]	@ (8005624 <_sbrk+0x68>)
 80055dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055de:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <_sbrk+0x64>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d207      	bcs.n	80055fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055ec:	f012 fc0e 	bl	8017e0c <__errno>
 80055f0:	4603      	mov	r3, r0
 80055f2:	220c      	movs	r2, #12
 80055f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	e009      	b.n	8005610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055fc:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <_sbrk+0x64>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005602:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <_sbrk+0x64>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4413      	add	r3, r2
 800560a:	4a05      	ldr	r2, [pc, #20]	@ (8005620 <_sbrk+0x64>)
 800560c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20050000 	.word	0x20050000
 800561c:	00000400 	.word	0x00000400
 8005620:	200015e4 	.word	0x200015e4
 8005624:	200122d0 	.word	0x200122d0

08005628 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <SystemInit+0x20>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	4a05      	ldr	r2, [pc, #20]	@ (8005648 <SystemInit+0x20>)
 8005634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <TIME_GetCurrentMs>:
// ============================================================================
// 기본 시간 함수
// ============================================================================

uint32_t TIME_GetCurrentMs(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
    return TIME_Platform_GetCurrentMs();
 8005650:	f000 f803 	bl	800565a <TIME_Platform_GetCurrentMs>
 8005654:	4603      	mov	r3, r0
}
 8005656:	4618      	mov	r0, r3
 8005658:	bd80      	pop	{r7, pc}

0800565a <TIME_Platform_GetCurrentMs>:
#include "time.h"
#include "stm32f7xx_hal.h"

// STM32용 플랫폼 함수들
uint32_t TIME_Platform_GetCurrentMs(void)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	af00      	add	r7, sp, #0
    return HAL_GetTick();  // HAL_GetTick()은 1ms 단위로 시간을 반환
 800565e:	f000 ff37 	bl	80064d0 <HAL_GetTick>
 8005662:	4603      	mov	r3, r0
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}

08005668 <LOGGER_Connect>:
    .enable_network = true,
    .server_ip = "",
    .server_port = 0
};

LoggerStatus LOGGER_Connect(const char* server_ip, int port) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
    if (server_ip == NULL) return LOGGER_STATUS_ERROR;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <LOGGER_Connect+0x16>
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	e016      	b.n	80056ac <LOGGER_Connect+0x44>
    strncpy(current_config.server_ip, server_ip, sizeof(current_config.server_ip) - 1);
 800567e:	223f      	movs	r2, #63	@ 0x3f
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	480c      	ldr	r0, [pc, #48]	@ (80056b4 <LOGGER_Connect+0x4c>)
 8005684:	f012 fb43 	bl	8017d0e <strncpy>
    current_config.server_port = port;
 8005688:	4a0b      	ldr	r2, [pc, #44]	@ (80056b8 <LOGGER_Connect+0x50>)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	6453      	str	r3, [r2, #68]	@ 0x44
    LoggerStatus status = LOGGER_Platform_Connect(server_ip, port);
 800568e:	6839      	ldr	r1, [r7, #0]
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f9f9 	bl	8005a88 <LOGGER_Platform_Connect>
 8005696:	4603      	mov	r3, r0
 8005698:	73fb      	strb	r3, [r7, #15]
    if (status == LOGGER_STATUS_OK) {
 800569a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d102      	bne.n	80056a8 <LOGGER_Connect+0x40>
        logger_connected = true;
 80056a2:	4b06      	ldr	r3, [pc, #24]	@ (80056bc <LOGGER_Connect+0x54>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
    }
    return status;
 80056a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	2000002b 	.word	0x2000002b
 80056b8:	20000028 	.word	0x20000028
 80056bc:	200015e8 	.word	0x200015e8

080056c0 <LOGGER_SetFilterLevel>:
bool LOGGER_IsConnected(void) {
    return logger_connected;
}

// Logger 제어 함수들
void LOGGER_SetFilterLevel(LogLevel min_level) {
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	71fb      	strb	r3, [r7, #7]
    filter_level = min_level;
 80056ca:	4a04      	ldr	r2, [pc, #16]	@ (80056dc <LOGGER_SetFilterLevel+0x1c>)
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	7013      	strb	r3, [r2, #0]
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	200015ea 	.word	0x200015ea

080056e0 <LOGGER_SetSDFilterLevel>:

void LOGGER_SetSDFilterLevel(LogLevel min_level) {
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	4603      	mov	r3, r0
 80056e8:	71fb      	strb	r3, [r7, #7]
    sd_filter_level = min_level;
 80056ea:	4a04      	ldr	r2, [pc, #16]	@ (80056fc <LOGGER_SetSDFilterLevel+0x1c>)
 80056ec:	79fb      	ldrb	r3, [r7, #7]
 80056ee:	7013      	strb	r3, [r2, #0]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	20000024 	.word	0x20000024

08005700 <LOGGER_EnableSDLogging>:

void LOGGER_EnableSDLogging(bool enable) {
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	71fb      	strb	r3, [r7, #7]
    sd_logging_enabled = enable;
 800570a:	4a04      	ldr	r2, [pc, #16]	@ (800571c <LOGGER_EnableSDLogging+0x1c>)
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	7013      	strb	r3, [r2, #0]
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	200015eb 	.word	0x200015eb

08005720 <LOGGER_IsSDLoggingEnabled>:

bool LOGGER_IsSDLoggingEnabled(void) {
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
    return sd_logging_enabled;
 8005724:	4b03      	ldr	r3, [pc, #12]	@ (8005734 <LOGGER_IsSDLoggingEnabled+0x14>)
 8005726:	781b      	ldrb	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	200015eb 	.word	0x200015eb

08005738 <LOGGER_SetMode>:

void LOGGER_SetMode(LoggerMode_t mode) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	4603      	mov	r3, r0
 8005740:	71fb      	strb	r3, [r7, #7]
    current_mode = mode;
 8005742:	4a0d      	ldr	r2, [pc, #52]	@ (8005778 <LOGGER_SetMode+0x40>)
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	7013      	strb	r3, [r2, #0]
    
    // 모드에 따른 연결 상태 설정
    if (mode == LOGGER_MODE_TERMINAL_ONLY) {
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <LOGGER_SetMode+0x1e>
        logger_connected = true;  // 터미널은 항상 연결됨
 800574e:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <LOGGER_SetMode+0x44>)
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
        // SD 백엔드 사용 시 SDStorage 연결 상태에 따라 결정
        logger_connected = SDStorage_IsReady();
    }
}
 8005754:	e00b      	b.n	800576e <LOGGER_SetMode+0x36>
    } else if (mode == LOGGER_MODE_SD_ONLY || mode == LOGGER_MODE_DUAL) {
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d002      	beq.n	8005762 <LOGGER_SetMode+0x2a>
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	2b02      	cmp	r3, #2
 8005760:	d105      	bne.n	800576e <LOGGER_SetMode+0x36>
        logger_connected = SDStorage_IsReady();
 8005762:	f7fc f967 	bl	8001a34 <SDStorage_IsReady>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	4b04      	ldr	r3, [pc, #16]	@ (800577c <LOGGER_SetMode+0x44>)
 800576c:	701a      	strb	r2, [r3, #0]
}
 800576e:	bf00      	nop
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200015e9 	.word	0x200015e9
 800577c:	200015e8 	.word	0x200015e8

08005780 <LOGGER_SendFormatted>:

LoggerMode_t LOGGER_GetMode(void) {
    return current_mode;
}

void LOGGER_SendFormatted(LogLevel level, const char* format, ...) {
 8005780:	b40e      	push	{r1, r2, r3}
 8005782:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005784:	f5ad 6da8 	sub.w	sp, sp, #1344	@ 0x540
 8005788:	af04      	add	r7, sp, #16
 800578a:	4602      	mov	r2, r0
 800578c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005790:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 8005794:	701a      	strb	r2, [r3, #0]
    // 필터 레벨 체크
    if (level < filter_level) return;
 8005796:	4bac      	ldr	r3, [pc, #688]	@ (8005a48 <LOGGER_SendFormatted+0x2c8>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 800579e:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 80057a2:	7812      	ldrb	r2, [r2, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	f0c0 8140 	bcc.w	8005a2a <LOGGER_SendFormatted+0x2aa>
    if (level < current_config.level) return;
 80057aa:	4ba8      	ldr	r3, [pc, #672]	@ (8005a4c <LOGGER_SendFormatted+0x2cc>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 80057b2:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 80057b6:	7812      	ldrb	r2, [r2, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	f0c0 8138 	bcc.w	8005a2e <LOGGER_SendFormatted+0x2ae>
    
    char buffer[LOGGER_MAX_MESSAGE_SIZE];
    const char* level_str[] = {"[DEBUG]", "[INFO]", "[WARN]", "[ERROR]"};
 80057be:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80057c2:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 80057c6:	4aa2      	ldr	r2, [pc, #648]	@ (8005a50 <LOGGER_SendFormatted+0x2d0>)
 80057c8:	461c      	mov	r4, r3
 80057ca:	4613      	mov	r3, r2
 80057cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // 타임스탬프 + 레벨 문자열 추가
    int offset = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
    const char* network_time = ResponseHandler_GetNetworkTime();
 80057d8:	f7fb fe6c 	bl	80014b4 <ResponseHandler_GetNetworkTime>
 80057dc:	f8c7 0524 	str.w	r0, [r7, #1316]	@ 0x524
    if (network_time != NULL && ResponseHandler_IsTimeSynchronized()) {
 80057e0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01c      	beq.n	8005822 <LOGGER_SendFormatted+0xa2>
 80057e8:	f7fb fe76 	bl	80014d8 <ResponseHandler_IsTimeSynchronized>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d017      	beq.n	8005822 <LOGGER_SendFormatted+0xa2>
        // 네트워크 시간이 있으면 타임스탬프 추가
        offset = snprintf(buffer, sizeof(buffer), "[%s] %s ", network_time, level_str[level]);
 80057f2:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80057f6:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005800:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8005812:	4a90      	ldr	r2, [pc, #576]	@ (8005a54 <LOGGER_SendFormatted+0x2d4>)
 8005814:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005818:	f012 f95e 	bl	8017ad8 <sniprintf>
 800581c:	f8c7 052c 	str.w	r0, [r7, #1324]	@ 0x52c
 8005820:	e013      	b.n	800584a <LOGGER_SendFormatted+0xca>
    } else {
        // 네트워크 시간이 없으면 기본 형식
        offset = snprintf(buffer, sizeof(buffer), "%s ", level_str[level]);
 8005822:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005826:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 800582a:	781a      	ldrb	r2, [r3, #0]
 800582c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005830:	f2a3 4324 	subw	r3, r3, #1060	@ 0x424
 8005834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005838:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 800583c:	4a86      	ldr	r2, [pc, #536]	@ (8005a58 <LOGGER_SendFormatted+0x2d8>)
 800583e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005842:	f012 f949 	bl	8017ad8 <sniprintf>
 8005846:	f8c7 052c 	str.w	r0, [r7, #1324]	@ 0x52c
    }
    
    // 가변 인수 처리 (버퍼 오버플로우 방지)
    va_list args;
    va_start(args, format);
 800584a:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 800584e:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005852:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8005856:	601a      	str	r2, [r3, #0]
    int remaining_size = sizeof(buffer) - offset;
 8005858:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 800585c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8005860:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
    if (remaining_size > 0) {
 8005864:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8005868:	2b00      	cmp	r3, #0
 800586a:	dd16      	ble.n	800589a <LOGGER_SendFormatted+0x11a>
        vsnprintf(buffer + offset, remaining_size, format, args);
 800586c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8005870:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8005874:	18d0      	adds	r0, r2, r3
 8005876:	f8d7 1520 	ldr.w	r1, [r7, #1312]	@ 0x520
 800587a:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 800587e:	f5a3 6385 	sub.w	r3, r3, #1064	@ 0x428
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8d7 2544 	ldr.w	r2, [r7, #1348]	@ 0x544
 8005888:	f012 fa1e 	bl	8017cc8 <vsniprintf>
        buffer[sizeof(buffer) - 1] = '\0';  // 안전장치: 항상 null 종료
 800588c:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005890:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8005894:	2200      	movs	r2, #0
 8005896:	f883 23ff 	strb.w	r2, [r3, #1023]	@ 0x3ff
    }
    va_end(args);
    
    // 모드에 따른 출력 처리
    switch (current_mode) {
 800589a:	4b70      	ldr	r3, [pc, #448]	@ (8005a5c <LOGGER_SendFormatted+0x2dc>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d02f      	beq.n	8005902 <LOGGER_SendFormatted+0x182>
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	f300 80c8 	bgt.w	8005a38 <LOGGER_SendFormatted+0x2b8>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <LOGGER_SendFormatted+0x132>
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d006      	beq.n	80058be <LOGGER_SendFormatted+0x13e>
 80058b0:	e0c2      	b.n	8005a38 <LOGGER_SendFormatted+0x2b8>
        case LOGGER_MODE_TERMINAL_ONLY:
            LOGGER_Platform_Send(buffer);
 80058b2:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f8f2 	bl	8005aa0 <LOGGER_Platform_Send>
            break;
 80058bc:	e0bc      	b.n	8005a38 <LOGGER_SendFormatted+0x2b8>
            
        case LOGGER_MODE_SD_ONLY:
            // SD 로깅 활성화 + SD 필터 레벨 체크
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 80058be:	4b68      	ldr	r3, [pc, #416]	@ (8005a60 <LOGGER_SendFormatted+0x2e0>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 80b5 	beq.w	8005a32 <LOGGER_SendFormatted+0x2b2>
 80058c8:	4b66      	ldr	r3, [pc, #408]	@ (8005a64 <LOGGER_SendFormatted+0x2e4>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 80058d0:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 80058d4:	7812      	ldrb	r2, [r2, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	f0c0 80ab 	bcc.w	8005a32 <LOGGER_SendFormatted+0x2b2>
 80058dc:	f7fc f8aa 	bl	8001a34 <SDStorage_IsReady>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 80a5 	beq.w	8005a32 <LOGGER_SendFormatted+0x2b2>
                SDStorage_WriteLog(buffer, strlen(buffer));
 80058e8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fa fc99 	bl	8000224 <strlen>
 80058f2:	4602      	mov	r2, r0
 80058f4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80058f8:	4611      	mov	r1, r2
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fb ffb2 	bl	8001864 <SDStorage_WriteLog>
            }
            break;
 8005900:	e097      	b.n	8005a32 <LOGGER_SendFormatted+0x2b2>
            
        case LOGGER_MODE_DUAL:
            // 터미널 출력 (실시간)
            LOGGER_Platform_Send(buffer);
 8005902:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f8ca 	bl	8005aa0 <LOGGER_Platform_Send>
            // SD 출력 (SD 로깅 활성화 + SD 필터 레벨 체크 + 에러 무시)
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 800590c:	4b54      	ldr	r3, [pc, #336]	@ (8005a60 <LOGGER_SendFormatted+0x2e0>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d062      	beq.n	80059da <LOGGER_SendFormatted+0x25a>
 8005914:	4b53      	ldr	r3, [pc, #332]	@ (8005a64 <LOGGER_SendFormatted+0x2e4>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 800591c:	f2a2 5229 	subw	r2, r2, #1321	@ 0x529
 8005920:	7812      	ldrb	r2, [r2, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d359      	bcc.n	80059da <LOGGER_SendFormatted+0x25a>
 8005926:	f7fc f885 	bl	8001a34 <SDStorage_IsReady>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d054      	beq.n	80059da <LOGGER_SendFormatted+0x25a>
                int sd_result = SDStorage_WriteLog(buffer, strlen(buffer));
 8005930:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005934:	4618      	mov	r0, r3
 8005936:	f7fa fc75 	bl	8000224 <strlen>
 800593a:	4602      	mov	r2, r0
 800593c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8005940:	4611      	mov	r1, r2
 8005942:	4618      	mov	r0, r3
 8005944:	f7fb ff8e 	bl	8001864 <SDStorage_WriteLog>
 8005948:	f8c7 051c 	str.w	r0, [r7, #1308]	@ 0x51c
                if (sd_result != 0 && level >= LOG_LEVEL_WARN) {
 800594c:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d068      	beq.n	8005a26 <LOGGER_SendFormatted+0x2a6>
 8005954:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8005958:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b01      	cmp	r3, #1
 8005960:	d961      	bls.n	8005a26 <LOGGER_SendFormatted+0x2a6>
                    // SD 쓰기 실패 시 터미널에 에러 출력
                    char error_msg[128];
                    const char* error_desc;
                    switch(sd_result) {
 8005962:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8005966:	3305      	adds	r3, #5
 8005968:	2b04      	cmp	r3, #4
 800596a:	d821      	bhi.n	80059b0 <LOGGER_SendFormatted+0x230>
 800596c:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <LOGGER_SendFormatted+0x1f4>)
 800596e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005972:	bf00      	nop
 8005974:	080059a9 	.word	0x080059a9
 8005978:	080059a1 	.word	0x080059a1
 800597c:	08005999 	.word	0x08005999
 8005980:	08005991 	.word	0x08005991
 8005984:	08005989 	.word	0x08005989
                        case -1: error_desc = "GENERAL_ERROR"; break;
 8005988:	4b37      	ldr	r3, [pc, #220]	@ (8005a68 <LOGGER_SendFormatted+0x2e8>)
 800598a:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 800598e:	e013      	b.n	80059b8 <LOGGER_SendFormatted+0x238>
                        case -2: error_desc = "NOT_READY"; break;
 8005990:	4b36      	ldr	r3, [pc, #216]	@ (8005a6c <LOGGER_SendFormatted+0x2ec>)
 8005992:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8005996:	e00f      	b.n	80059b8 <LOGGER_SendFormatted+0x238>
                        case -3: error_desc = "FILE_ERROR"; break;
 8005998:	4b35      	ldr	r3, [pc, #212]	@ (8005a70 <LOGGER_SendFormatted+0x2f0>)
 800599a:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 800599e:	e00b      	b.n	80059b8 <LOGGER_SendFormatted+0x238>
                        case -4: error_desc = "DISK_FULL"; break;
 80059a0:	4b34      	ldr	r3, [pc, #208]	@ (8005a74 <LOGGER_SendFormatted+0x2f4>)
 80059a2:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 80059a6:	e007      	b.n	80059b8 <LOGGER_SendFormatted+0x238>
                        case -5: error_desc = "INVALID_PARAM"; break;
 80059a8:	4b33      	ldr	r3, [pc, #204]	@ (8005a78 <LOGGER_SendFormatted+0x2f8>)
 80059aa:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 80059ae:	e003      	b.n	80059b8 <LOGGER_SendFormatted+0x238>
                        default: error_desc = "UNKNOWN"; break;
 80059b0:	4b32      	ldr	r3, [pc, #200]	@ (8005a7c <LOGGER_SendFormatted+0x2fc>)
 80059b2:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 80059b6:	bf00      	nop
                    }
                    snprintf(error_msg, sizeof(error_msg), "[SD_ERROR] Write failed: %d (%s)", sd_result, error_desc);
 80059b8:	f107 0008 	add.w	r0, r7, #8
 80059bc:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 80059c6:	4a2e      	ldr	r2, [pc, #184]	@ (8005a80 <LOGGER_SendFormatted+0x300>)
 80059c8:	2180      	movs	r1, #128	@ 0x80
 80059ca:	f012 f885 	bl	8017ad8 <sniprintf>
                    LOGGER_Platform_Send(error_msg);
 80059ce:	f107 0308 	add.w	r3, r7, #8
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f864 	bl	8005aa0 <LOGGER_Platform_Send>
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 80059d8:	e025      	b.n	8005a26 <LOGGER_SendFormatted+0x2a6>
                }
            } else if (level >= LOG_LEVEL_WARN) {
 80059da:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80059de:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d926      	bls.n	8005a36 <LOGGER_SendFormatted+0x2b6>
                // WARN 이상 레벨인데 SD에 저장되지 않는 경우 디버그 정보 출력
                char debug_msg[256];
                snprintf(debug_msg, sizeof(debug_msg), 
 80059e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005a60 <LOGGER_SendFormatted+0x2e0>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	461e      	mov	r6, r3
 80059ee:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 80059f2:	f2a3 5329 	subw	r3, r3, #1321	@ 0x529
 80059f6:	781c      	ldrb	r4, [r3, #0]
 80059f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005a64 <LOGGER_SendFormatted+0x2e4>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	461d      	mov	r5, r3
                    "[SD_DEBUG] Skip SD write: enabled=%d, level=%d>=filter=%d, ready=%d",
                    sd_logging_enabled, level, sd_filter_level, SDStorage_IsReady());
 80059fe:	f7fc f819 	bl	8001a34 <SDStorage_IsReady>
 8005a02:	4603      	mov	r3, r0
                snprintf(debug_msg, sizeof(debug_msg), 
 8005a04:	f107 0008 	add.w	r0, r7, #8
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	9501      	str	r5, [sp, #4]
 8005a0c:	9400      	str	r4, [sp, #0]
 8005a0e:	4633      	mov	r3, r6
 8005a10:	4a1c      	ldr	r2, [pc, #112]	@ (8005a84 <LOGGER_SendFormatted+0x304>)
 8005a12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a16:	f012 f85f 	bl	8017ad8 <sniprintf>
                LOGGER_Platform_Send(debug_msg);
 8005a1a:	f107 0308 	add.w	r3, r7, #8
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f83e 	bl	8005aa0 <LOGGER_Platform_Send>
            }
            break;
 8005a24:	e007      	b.n	8005a36 <LOGGER_SendFormatted+0x2b6>
            if (sd_logging_enabled && level >= sd_filter_level && SDStorage_IsReady()) {
 8005a26:	bf00      	nop
            break;
 8005a28:	e005      	b.n	8005a36 <LOGGER_SendFormatted+0x2b6>
    if (level < filter_level) return;
 8005a2a:	bf00      	nop
 8005a2c:	e004      	b.n	8005a38 <LOGGER_SendFormatted+0x2b8>
    if (level < current_config.level) return;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <LOGGER_SendFormatted+0x2b8>
            break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <LOGGER_SendFormatted+0x2b8>
            break;
 8005a36:	bf00      	nop
    }
}
 8005a38:	f507 67a6 	add.w	r7, r7, #1328	@ 0x530
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8005a42:	b003      	add	sp, #12
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	200015ea 	.word	0x200015ea
 8005a4c:	20000028 	.word	0x20000028
 8005a50:	0801be18 	.word	0x0801be18
 8005a54:	0801be28 	.word	0x0801be28
 8005a58:	0801be34 	.word	0x0801be34
 8005a5c:	200015e9 	.word	0x200015e9
 8005a60:	200015eb 	.word	0x200015eb
 8005a64:	20000024 	.word	0x20000024
 8005a68:	0801be38 	.word	0x0801be38
 8005a6c:	0801be48 	.word	0x0801be48
 8005a70:	0801be54 	.word	0x0801be54
 8005a74:	0801be60 	.word	0x0801be60
 8005a78:	0801be6c 	.word	0x0801be6c
 8005a7c:	0801be7c 	.word	0x0801be7c
 8005a80:	0801be84 	.word	0x0801be84
 8005a84:	0801bea8 	.word	0x0801bea8

08005a88 <LOGGER_Platform_Connect>:
#include "stm32f7xx_hal.h"
#include <string.h>

extern UART_HandleTypeDef huart1; // CubeMX가 생성한 UART1 (Virtual COM Port)

LoggerStatus LOGGER_Platform_Connect(const char* server_ip, int port) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
    (void)server_ip; (void)port;
    // STM32에서는 UART1이 이미 초기화되어 있으므로 추가 설정 불필요
    return LOGGER_STATUS_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LOGGER_Platform_Send>:

LoggerStatus LOGGER_Platform_Disconnect(void) {
    return LOGGER_STATUS_OK;
}

LoggerStatus LOGGER_Platform_Send(const char* message) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
    if (message == NULL) return LOGGER_STATUS_ERROR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <LOGGER_Platform_Send+0x14>
 8005aae:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab2:	e01c      	b.n	8005aee <LOGGER_Platform_Send+0x4e>
    
    // UART1을 통해 메시지 전송 (Virtual COM Port)
    int len = strlen(message);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7fa fbb5 	bl	8000224 <strlen>
 8005aba:	4603      	mov	r3, r0
 8005abc:	60fb      	str	r3, [r7, #12]
    if (len > 0) {
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	dd12      	ble.n	8005aea <LOGGER_Platform_Send+0x4a>
        if (HAL_UART_Transmit(&huart1, (uint8_t*)message, len, 1000) == HAL_OK) {
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	480a      	ldr	r0, [pc, #40]	@ (8005af8 <LOGGER_Platform_Send+0x58>)
 8005ad0:	f009 fc32 	bl	800f338 <HAL_UART_Transmit>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d107      	bne.n	8005aea <LOGGER_Platform_Send+0x4a>
            // 줄바꿈 추가
            HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8005ada:	2364      	movs	r3, #100	@ 0x64
 8005adc:	2202      	movs	r2, #2
 8005ade:	4907      	ldr	r1, [pc, #28]	@ (8005afc <LOGGER_Platform_Send+0x5c>)
 8005ae0:	4805      	ldr	r0, [pc, #20]	@ (8005af8 <LOGGER_Platform_Send+0x58>)
 8005ae2:	f009 fc29 	bl	800f338 <HAL_UART_Transmit>
            return LOGGER_STATUS_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e001      	b.n	8005aee <LOGGER_Platform_Send+0x4e>
        }
    }
    return LOGGER_STATUS_ERROR;
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200011b8 	.word	0x200011b8
 8005afc:	0801beec 	.word	0x0801beec

08005b00 <UART_Connect>:
    .timeout_ms = UART_DEFAULT_TIMEOUT_MS
};

// 공통 함수들 (테스트와 실제 빌드 모두에서 사용)
UartStatus UART_Connect(const char* port)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
    if (port == NULL) {
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d105      	bne.n	8005b1a <UART_Connect+0x1a>
        LOG_ERROR("[UART] Connect failed: NULL port");
 8005b0e:	4913      	ldr	r1, [pc, #76]	@ (8005b5c <UART_Connect+0x5c>)
 8005b10:	2003      	movs	r0, #3
 8005b12:	f7ff fe35 	bl	8005780 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e01c      	b.n	8005b54 <UART_Connect+0x54>
    }

    LOG_INFO("[UART] Connecting to %s", port);
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4910      	ldr	r1, [pc, #64]	@ (8005b60 <UART_Connect+0x60>)
 8005b1e:	2001      	movs	r0, #1
 8005b20:	f7ff fe2e 	bl	8005780 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Connect(port);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8ef 	bl	8005d08 <UART_Platform_Connect>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005b2e:	7bfb      	ldrb	r3, [r7, #15]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d108      	bne.n	8005b46 <UART_Connect+0x46>
        uart_connected = true;
 8005b34:	4b0b      	ldr	r3, [pc, #44]	@ (8005b64 <UART_Connect+0x64>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART] Successfully connected to %s", port);
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	490a      	ldr	r1, [pc, #40]	@ (8005b68 <UART_Connect+0x68>)
 8005b3e:	2001      	movs	r0, #1
 8005b40:	f7ff fe1e 	bl	8005780 <LOGGER_SendFormatted>
 8005b44:	e005      	b.n	8005b52 <UART_Connect+0x52>
    } else {
        LOG_ERROR("[UART] Failed to connect to %s (status: %d)", port, status);
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	4908      	ldr	r1, [pc, #32]	@ (8005b6c <UART_Connect+0x6c>)
 8005b4c:	2003      	movs	r0, #3
 8005b4e:	f7ff fe17 	bl	8005780 <LOGGER_SendFormatted>
    }

    return status;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	0801bef0 	.word	0x0801bef0
 8005b60:	0801bf14 	.word	0x0801bf14
 8005b64:	200015ec 	.word	0x200015ec
 8005b68:	0801bf2c 	.word	0x0801bf2c
 8005b6c:	0801bf50 	.word	0x0801bf50

08005b70 <UART_Send>:

    return status;
}

UartStatus UART_Send(const char* data)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
    if (!uart_connected) {
 8005b78:	4b19      	ldr	r3, [pc, #100]	@ (8005be0 <UART_Send+0x70>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	f083 0301 	eor.w	r3, r3, #1
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <UART_Send+0x22>
        LOG_ERROR("[UART] Send failed: not connected");
 8005b86:	4917      	ldr	r1, [pc, #92]	@ (8005be4 <UART_Send+0x74>)
 8005b88:	2003      	movs	r0, #3
 8005b8a:	f7ff fdf9 	bl	8005780 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e022      	b.n	8005bd8 <UART_Send+0x68>
    }

    if (data == NULL) {
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <UART_Send+0x34>
        LOG_ERROR("[UART] Send failed: NULL data");
 8005b98:	4913      	ldr	r1, [pc, #76]	@ (8005be8 <UART_Send+0x78>)
 8005b9a:	2003      	movs	r0, #3
 8005b9c:	f7ff fdf0 	bl	8005780 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e019      	b.n	8005bd8 <UART_Send+0x68>
    }

    LOG_DEBUG("[UART] Sending data: %s", data);
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	4911      	ldr	r1, [pc, #68]	@ (8005bec <UART_Send+0x7c>)
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f7ff fde9 	bl	8005780 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Send(data);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f992 	bl	8005ed8 <UART_Platform_Send>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73fb      	strb	r3, [r7, #15]

    if (status == UART_STATUS_OK) {
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <UART_Send+0x5a>
        LOG_DEBUG("[UART] Send successful: %s", data);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	490b      	ldr	r1, [pc, #44]	@ (8005bf0 <UART_Send+0x80>)
 8005bc2:	2000      	movs	r0, #0
 8005bc4:	f7ff fddc 	bl	8005780 <LOGGER_SendFormatted>
 8005bc8:	e005      	b.n	8005bd6 <UART_Send+0x66>
    } else {
        LOG_ERROR("[UART] Send failed: %s (status: %d)", data, status);
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	4909      	ldr	r1, [pc, #36]	@ (8005bf4 <UART_Send+0x84>)
 8005bd0:	2003      	movs	r0, #3
 8005bd2:	f7ff fdd5 	bl	8005780 <LOGGER_SendFormatted>
    }

    return status;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	200015ec 	.word	0x200015ec
 8005be4:	0801bf7c 	.word	0x0801bf7c
 8005be8:	0801bfa0 	.word	0x0801bfa0
 8005bec:	0801bfc0 	.word	0x0801bfc0
 8005bf0:	0801bfd8 	.word	0x0801bfd8
 8005bf4:	0801bff4 	.word	0x0801bff4

08005bf8 <UART_Receive>:

UartStatus UART_Receive(char* buffer, int buffer_size, int* bytes_received)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
    if (!uart_connected) {
 8005c04:	4b22      	ldr	r3, [pc, #136]	@ (8005c90 <UART_Receive+0x98>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	f083 0301 	eor.w	r3, r3, #1
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <UART_Receive+0x26>
        LOG_ERROR("[UART] Receive failed: not connected");
 8005c12:	4920      	ldr	r1, [pc, #128]	@ (8005c94 <UART_Receive+0x9c>)
 8005c14:	2003      	movs	r0, #3
 8005c16:	f7ff fdb3 	bl	8005780 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e034      	b.n	8005c88 <UART_Receive+0x90>
    }

    if (buffer == NULL || buffer_size <= 0 || bytes_received == NULL) {
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <UART_Receive+0x38>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	dd02      	ble.n	8005c30 <UART_Receive+0x38>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d105      	bne.n	8005c3c <UART_Receive+0x44>
        LOG_ERROR("[UART] Receive failed: invalid parameters");
 8005c30:	4919      	ldr	r1, [pc, #100]	@ (8005c98 <UART_Receive+0xa0>)
 8005c32:	2003      	movs	r0, #3
 8005c34:	f7ff fda4 	bl	8005780 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e025      	b.n	8005c88 <UART_Receive+0x90>
    }

    LOG_DEBUG("[UART] Receiving data (buffer_size: %d)", buffer_size);
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	4917      	ldr	r1, [pc, #92]	@ (8005c9c <UART_Receive+0xa4>)
 8005c40:	2000      	movs	r0, #0
 8005c42:	f7ff fd9d 	bl	8005780 <LOGGER_SendFormatted>
    UartStatus status = UART_Platform_Receive(buffer, buffer_size, bytes_received);
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68b9      	ldr	r1, [r7, #8]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f980 	bl	8005f50 <UART_Platform_Receive>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]

    if (status == UART_STATUS_OK) {
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d107      	bne.n	8005c6a <UART_Receive+0x72>
        LOG_DEBUG("[UART] Received %d bytes: %s", *bytes_received, buffer);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	490f      	ldr	r1, [pc, #60]	@ (8005ca0 <UART_Receive+0xa8>)
 8005c62:	2000      	movs	r0, #0
 8005c64:	f7ff fd8c 	bl	8005780 <LOGGER_SendFormatted>
 8005c68:	e00d      	b.n	8005c86 <UART_Receive+0x8e>
    } else if (status == UART_STATUS_TIMEOUT) {
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d104      	bne.n	8005c7a <UART_Receive+0x82>
        LOG_DEBUG("[UART] Receive timeout");
 8005c70:	490c      	ldr	r1, [pc, #48]	@ (8005ca4 <UART_Receive+0xac>)
 8005c72:	2000      	movs	r0, #0
 8005c74:	f7ff fd84 	bl	8005780 <LOGGER_SendFormatted>
 8005c78:	e005      	b.n	8005c86 <UART_Receive+0x8e>
    } else {
        LOG_ERROR("[UART] Receive failed (status: %d)", status);
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	490a      	ldr	r1, [pc, #40]	@ (8005ca8 <UART_Receive+0xb0>)
 8005c80:	2003      	movs	r0, #3
 8005c82:	f7ff fd7d 	bl	8005780 <LOGGER_SendFormatted>
    }

    return status;
 8005c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	200015ec 	.word	0x200015ec
 8005c94:	0801c018 	.word	0x0801c018
 8005c98:	0801c040 	.word	0x0801c040
 8005c9c:	0801c06c 	.word	0x0801c06c
 8005ca0:	0801c094 	.word	0x0801c094
 8005ca4:	0801c0b4 	.word	0x0801c0b4
 8005ca8:	0801c0cc 	.word	0x0801c0cc

08005cac <flush_rx_buffer>:
// 내부 상태 변수들
static bool uart_initialized = false;
static bool dma_receiving = false;

// 수신 버퍼 플러시 함수
static void flush_rx_buffer(void) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
    uint8_t dummy;
    int flush_count = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	607b      	str	r3, [r7, #4]
    
    // 방법 1: 직접 레지스터 체크로 기존 데이터 클리어
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005cb6:	e007      	b.n	8005cc8 <flush_rx_buffer+0x1c>
        dummy = (uint8_t)(huart6.Instance->RDR & 0xFF);
 8005cb8:	4b12      	ldr	r3, [pc, #72]	@ (8005d04 <flush_rx_buffer+0x58>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	70fb      	strb	r3, [r7, #3]
        flush_count++;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	607b      	str	r3, [r7, #4]
    while (__HAL_UART_GET_FLAG(&huart6, UART_FLAG_RXNE) && flush_count < 100) {
 8005cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8005d04 <flush_rx_buffer+0x58>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d106      	bne.n	8005ce4 <flush_rx_buffer+0x38>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b63      	cmp	r3, #99	@ 0x63
 8005cda:	dded      	ble.n	8005cb8 <flush_rx_buffer+0xc>
    }
    
    // 방법 2: HAL로 남은 데이터 클리어 (타임아웃 1ms)
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005cdc:	e002      	b.n	8005ce4 <flush_rx_buffer+0x38>
        flush_count++;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	607b      	str	r3, [r7, #4]
    while (HAL_UART_Receive(&huart6, &dummy, 1, 1) == HAL_OK && flush_count < 100) {
 8005ce4:	1cf9      	adds	r1, r7, #3
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	2201      	movs	r2, #1
 8005cea:	4806      	ldr	r0, [pc, #24]	@ (8005d04 <flush_rx_buffer+0x58>)
 8005cec:	f009 fbad 	bl	800f44a <HAL_UART_Receive>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d102      	bne.n	8005cfc <flush_rx_buffer+0x50>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b63      	cmp	r3, #99	@ 0x63
 8005cfa:	ddf0      	ble.n	8005cde <flush_rx_buffer+0x32>
    }
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20001240 	.word	0x20001240

08005d08 <UART_Platform_Connect>:

UartStatus UART_Platform_Connect(const char* port) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
    // STM32에서는 이미 HAL_UART_Init()이 실행됨
    uart_initialized = true;
 8005d10:	4b5b      	ldr	r3, [pc, #364]	@ (8005e80 <UART_Platform_Connect+0x178>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
    
    // UART 상태 체크 및 리셋
    LOG_INFO("[UART_STM32] UART gState: %d, RxState: %d", 
 8005d16:	4b5b      	ldr	r3, [pc, #364]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d18:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005d1a:	4b5a      	ldr	r3, [pc, #360]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d20:	4959      	ldr	r1, [pc, #356]	@ (8005e88 <UART_Platform_Connect+0x180>)
 8005d22:	2001      	movs	r0, #1
 8005d24:	f7ff fd2c 	bl	8005780 <LOGGER_SendFormatted>
             huart6.gState, huart6.RxState);
    
    // DMA 핸들 연결 상태 확인
    if (huart6.hdmarx != NULL) {
 8005d28:	4b56      	ldr	r3, [pc, #344]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00e      	beq.n	8005d4e <UART_Platform_Connect+0x46>
        LOG_INFO("[UART_STM32] DMA RX handle is connected");
 8005d30:	4956      	ldr	r1, [pc, #344]	@ (8005e8c <UART_Platform_Connect+0x184>)
 8005d32:	2001      	movs	r0, #1
 8005d34:	f7ff fd24 	bl	8005780 <LOGGER_SendFormatted>
        LOG_INFO("[UART_STM32] DMA State: %d", huart6.hdmarx->State);
 8005d38:	4b52      	ldr	r3, [pc, #328]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	4952      	ldr	r1, [pc, #328]	@ (8005e90 <UART_Platform_Connect+0x188>)
 8005d46:	2001      	movs	r0, #1
 8005d48:	f7ff fd1a 	bl	8005780 <LOGGER_SendFormatted>
 8005d4c:	e018      	b.n	8005d80 <UART_Platform_Connect+0x78>
    } else {
        LOG_ERROR("[UART_STM32] DMA RX handle is NULL - DMA not initialized!");
 8005d4e:	4951      	ldr	r1, [pc, #324]	@ (8005e94 <UART_Platform_Connect+0x18c>)
 8005d50:	2003      	movs	r0, #3
 8005d52:	f7ff fd15 	bl	8005780 <LOGGER_SendFormatted>
        
        // DMA 핸들 강제 연결 시도
        extern DMA_HandleTypeDef hdma_usart6_rx;
        __HAL_LINKDMA(&huart6, hdmarx, hdma_usart6_rx);
 8005d56:	4b4b      	ldr	r3, [pc, #300]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d58:	4a4f      	ldr	r2, [pc, #316]	@ (8005e98 <UART_Platform_Connect+0x190>)
 8005d5a:	675a      	str	r2, [r3, #116]	@ 0x74
 8005d5c:	4b4e      	ldr	r3, [pc, #312]	@ (8005e98 <UART_Platform_Connect+0x190>)
 8005d5e:	4a49      	ldr	r2, [pc, #292]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d60:	639a      	str	r2, [r3, #56]	@ 0x38
        
        if (huart6.hdmarx != NULL) {
 8005d62:	4b48      	ldr	r3, [pc, #288]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <UART_Platform_Connect+0x6c>
            LOG_INFO("[UART_STM32] DMA RX handle manually linked");
 8005d6a:	494c      	ldr	r1, [pc, #304]	@ (8005e9c <UART_Platform_Connect+0x194>)
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	f7ff fd07 	bl	8005780 <LOGGER_SendFormatted>
 8005d72:	e005      	b.n	8005d80 <UART_Platform_Connect+0x78>
        } else {
            LOG_ERROR("[UART_STM32] Failed to link DMA RX handle");
 8005d74:	494a      	ldr	r1, [pc, #296]	@ (8005ea0 <UART_Platform_Connect+0x198>)
 8005d76:	2003      	movs	r0, #3
 8005d78:	f7ff fd02 	bl	8005780 <LOGGER_SendFormatted>
            return UART_STATUS_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	e07a      	b.n	8005e76 <UART_Platform_Connect+0x16e>
        }
    }
    
    // 이전에 시작된 DMA 작업이 있으면 중지
    if (dma_receiving) {
 8005d80:	4b48      	ldr	r3, [pc, #288]	@ (8005ea4 <UART_Platform_Connect+0x19c>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <UART_Platform_Connect+0x94>
        HAL_UART_DMAStop(&huart6);
 8005d88:	483e      	ldr	r0, [pc, #248]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d8a:	f009 fc6a 	bl	800f662 <HAL_UART_DMAStop>
        dma_receiving = false;
 8005d8e:	4b45      	ldr	r3, [pc, #276]	@ (8005ea4 <UART_Platform_Connect+0x19c>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] Previous DMA reception stopped");
 8005d94:	4944      	ldr	r1, [pc, #272]	@ (8005ea8 <UART_Platform_Connect+0x1a0>)
 8005d96:	2001      	movs	r0, #1
 8005d98:	f7ff fcf2 	bl	8005780 <LOGGER_SendFormatted>
    }
    
    // UART 상태를 READY로 강제 설정
    huart6.gState = HAL_UART_STATE_READY;
 8005d9c:	4b39      	ldr	r3, [pc, #228]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005d9e:	2220      	movs	r2, #32
 8005da0:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart6.RxState = HAL_UART_STATE_READY;
 8005da2:	4b38      	ldr	r3, [pc, #224]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005da4:	2220      	movs	r2, #32
 8005da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    
    // DMA 상태도 READY로 설정
    if (huart6.hdmarx != NULL) {
 8005daa:	4b36      	ldr	r3, [pc, #216]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005dac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d026      	beq.n	8005e00 <UART_Platform_Connect+0xf8>
        // DMA 재초기화 (기존 상태 문제 해결)
        if (huart6.hdmarx->State != HAL_DMA_STATE_READY) {
 8005db2:	4b34      	ldr	r3, [pc, #208]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005db6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d01a      	beq.n	8005df6 <UART_Platform_Connect+0xee>
            LOG_INFO("[UART_STM32] DMA not ready, reinitializing...");
 8005dc0:	493a      	ldr	r1, [pc, #232]	@ (8005eac <UART_Platform_Connect+0x1a4>)
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	f7ff fcdc 	bl	8005780 <LOGGER_SendFormatted>
            HAL_DMA_DeInit(huart6.hdmarx);
 8005dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005dca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 f943 	bl	8007058 <HAL_DMA_DeInit>
            if (HAL_DMA_Init(huart6.hdmarx) != HAL_OK) {
 8005dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 f890 	bl	8006efc <HAL_DMA_Init>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d005      	beq.n	8005dee <UART_Platform_Connect+0xe6>
                LOG_ERROR("[UART_STM32] DMA reinitialization failed");
 8005de2:	4933      	ldr	r1, [pc, #204]	@ (8005eb0 <UART_Platform_Connect+0x1a8>)
 8005de4:	2003      	movs	r0, #3
 8005de6:	f7ff fccb 	bl	8005780 <LOGGER_SendFormatted>
                return UART_STATUS_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e043      	b.n	8005e76 <UART_Platform_Connect+0x16e>
            }
            LOG_INFO("[UART_STM32] DMA reinitialized successfully");
 8005dee:	4931      	ldr	r1, [pc, #196]	@ (8005eb4 <UART_Platform_Connect+0x1ac>)
 8005df0:	2001      	movs	r0, #1
 8005df2:	f7ff fcc5 	bl	8005780 <LOGGER_SendFormatted>
        }
        huart6.hdmarx->State = HAL_DMA_STATE_READY;
 8005df6:	4b23      	ldr	r3, [pc, #140]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 초기 버퍼 플러시
    flush_rx_buffer();
 8005e00:	f7ff ff54 	bl	8005cac <flush_rx_buffer>
    
    // DMA 기반 연속 수신 시작
    uart_rx_complete_flag = 0;
 8005e04:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb8 <UART_Platform_Connect+0x1b0>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
    uart_rx_error_flag = 0;
 8005e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8005ebc <UART_Platform_Connect+0x1b4>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
    uart_rx_length = 0;
 8005e10:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec0 <UART_Platform_Connect+0x1b8>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	801a      	strh	r2, [r3, #0]
    
    // DMA 수신 버퍼 클리어
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8005e16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	4829      	ldr	r0, [pc, #164]	@ (8005ec4 <UART_Platform_Connect+0x1bc>)
 8005e1e:	f011 ff61 	bl	8017ce4 <memset>
    
    LOG_INFO("[UART_STM32] Starting DMA reception...");
 8005e22:	4929      	ldr	r1, [pc, #164]	@ (8005ec8 <UART_Platform_Connect+0x1c0>)
 8005e24:	2001      	movs	r0, #1
 8005e26:	f7ff fcab 	bl	8005780 <LOGGER_SendFormatted>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8005e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e2e:	4925      	ldr	r1, [pc, #148]	@ (8005ec4 <UART_Platform_Connect+0x1bc>)
 8005e30:	4814      	ldr	r0, [pc, #80]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005e32:	f009 fbd2 	bl	800f5da <HAL_UART_Receive_DMA>
 8005e36:	4603      	mov	r3, r0
 8005e38:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <UART_Platform_Connect+0x14e>
        dma_receiving = true;
 8005e40:	4b18      	ldr	r3, [pc, #96]	@ (8005ea4 <UART_Platform_Connect+0x19c>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	701a      	strb	r2, [r3, #0]
        LOG_INFO("[UART_STM32] ✓ DMA continuous reception started (buffer size: %d)", sizeof(rx_buffer));
 8005e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e4a:	4920      	ldr	r1, [pc, #128]	@ (8005ecc <UART_Platform_Connect+0x1c4>)
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f7ff fc97 	bl	8005780 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
                  huart6.gState, huart6.RxState);
        return UART_STATUS_ERROR;
    }
    
    return UART_STATUS_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e00f      	b.n	8005e76 <UART_Platform_Connect+0x16e>
        LOG_ERROR("[UART_STM32] ✗ Failed to start DMA reception (status: %d)", status);
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	491d      	ldr	r1, [pc, #116]	@ (8005ed0 <UART_Platform_Connect+0x1c8>)
 8005e5c:	2003      	movs	r0, #3
 8005e5e:	f7ff fc8f 	bl	8005780 <LOGGER_SendFormatted>
        LOG_ERROR("[UART_STM32] UART gState after failure: %d, RxState: %d", 
 8005e62:	4b08      	ldr	r3, [pc, #32]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005e64:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005e66:	4b07      	ldr	r3, [pc, #28]	@ (8005e84 <UART_Platform_Connect+0x17c>)
 8005e68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e6c:	4919      	ldr	r1, [pc, #100]	@ (8005ed4 <UART_Platform_Connect+0x1cc>)
 8005e6e:	2003      	movs	r0, #3
 8005e70:	f7ff fc86 	bl	8005780 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005e74:	2301      	movs	r3, #1
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3710      	adds	r7, #16
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200017f4 	.word	0x200017f4
 8005e84:	20001240 	.word	0x20001240
 8005e88:	0801c2c8 	.word	0x0801c2c8
 8005e8c:	0801c2f4 	.word	0x0801c2f4
 8005e90:	0801c31c 	.word	0x0801c31c
 8005e94:	0801c338 	.word	0x0801c338
 8005e98:	20001518 	.word	0x20001518
 8005e9c:	0801c374 	.word	0x0801c374
 8005ea0:	0801c3a0 	.word	0x0801c3a0
 8005ea4:	200017f5 	.word	0x200017f5
 8005ea8:	0801c3cc 	.word	0x0801c3cc
 8005eac:	0801c3f8 	.word	0x0801c3f8
 8005eb0:	0801c428 	.word	0x0801c428
 8005eb4:	0801c454 	.word	0x0801c454
 8005eb8:	200015ed 	.word	0x200015ed
 8005ebc:	200015ee 	.word	0x200015ee
 8005ec0:	200015f0 	.word	0x200015f0
 8005ec4:	200015f4 	.word	0x200015f4
 8005ec8:	0801c480 	.word	0x0801c480
 8005ecc:	0801c4a8 	.word	0x0801c4a8
 8005ed0:	0801c4ec 	.word	0x0801c4ec
 8005ed4:	0801c528 	.word	0x0801c528

08005ed8 <UART_Platform_Send>:
    uart_initialized = false;
    
    return UART_STATUS_OK;
}

UartStatus UART_Platform_Send(const char* data) {
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
    if (data == NULL || !uart_initialized) return UART_STATUS_ERROR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d006      	beq.n	8005ef4 <UART_Platform_Send+0x1c>
 8005ee6:	4b17      	ldr	r3, [pc, #92]	@ (8005f44 <UART_Platform_Send+0x6c>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	f083 0301 	eor.w	r3, r3, #1
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <UART_Platform_Send+0x20>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e021      	b.n	8005f3c <UART_Platform_Send+0x64>
    
    int len = strlen(data);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f7fa f993 	bl	8000224 <strlen>
 8005efe:	4603      	mov	r3, r0
 8005f00:	60fb      	str	r3, [r7, #12]
    if (len == 0) return UART_STATUS_OK;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <UART_Platform_Send+0x34>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	e017      	b.n	8005f3c <UART_Platform_Send+0x64>
    
    // 송신 전 수신 버퍼 플러시 (깨끗한 상태에서 시작)
    flush_rx_buffer();
 8005f0c:	f7ff fece 	bl	8005cac <flush_rx_buffer>
    
    // 단순한 송신
    HAL_StatusTypeDef tx_status = HAL_UART_Transmit(&huart6, (uint8_t*)data, len, 1000);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	480b      	ldr	r0, [pc, #44]	@ (8005f48 <UART_Platform_Send+0x70>)
 8005f1c:	f009 fa0c 	bl	800f338 <HAL_UART_Transmit>
 8005f20:	4603      	mov	r3, r0
 8005f22:	72fb      	strb	r3, [r7, #11]
    
    if (tx_status == HAL_OK) {
 8005f24:	7afb      	ldrb	r3, [r7, #11]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <UART_Platform_Send+0x56>
        return UART_STATUS_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e006      	b.n	8005f3c <UART_Platform_Send+0x64>
    } else {
        LOG_ERROR("[UART_STM32] ✗ Transmission failed (HAL status: %d)", tx_status);
 8005f2e:	7afb      	ldrb	r3, [r7, #11]
 8005f30:	461a      	mov	r2, r3
 8005f32:	4906      	ldr	r1, [pc, #24]	@ (8005f4c <UART_Platform_Send+0x74>)
 8005f34:	2003      	movs	r0, #3
 8005f36:	f7ff fc23 	bl	8005780 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005f3a:	2301      	movs	r3, #1
    }
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	200017f4 	.word	0x200017f4
 8005f48:	20001240 	.word	0x20001240
 8005f4c:	0801c588 	.word	0x0801c588

08005f50 <UART_Platform_Receive>:

UartStatus UART_Platform_Receive(char* buffer, int buffer_size, int* bytes_received) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	@ 0x28
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
    if (buffer == NULL || bytes_received == NULL || !uart_initialized) {
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d009      	beq.n	8005f76 <UART_Platform_Receive+0x26>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d006      	beq.n	8005f76 <UART_Platform_Receive+0x26>
 8005f68:	4b74      	ldr	r3, [pc, #464]	@ (800613c <UART_Platform_Receive+0x1ec>)
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	f083 0301 	eor.w	r3, r3, #1
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <UART_Platform_Receive+0x2a>
        return UART_STATUS_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e0dc      	b.n	8006134 <UART_Platform_Receive+0x1e4>
    }
    
    if (buffer_size <= 0) {
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dc04      	bgt.n	8005f8a <UART_Platform_Receive+0x3a>
        *bytes_received = 0;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	601a      	str	r2, [r3, #0]
        return UART_STATUS_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e0d4      	b.n	8006134 <UART_Platform_Receive+0x1e4>
    }
    
    *bytes_received = 0;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]
    
    // DMA 수신이 시작되지 않았으면 에러
    if (!dma_receiving) {
 8005f90:	4b6b      	ldr	r3, [pc, #428]	@ (8006140 <UART_Platform_Receive+0x1f0>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	f083 0301 	eor.w	r3, r3, #1
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <UART_Platform_Receive+0x52>
        return UART_STATUS_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e0c8      	b.n	8006134 <UART_Platform_Receive+0x1e4>
    }
    
    // 에러 체크
    if (uart_rx_error_flag) {
 8005fa2:	4b68      	ldr	r3, [pc, #416]	@ (8006144 <UART_Platform_Receive+0x1f4>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d008      	beq.n	8005fbe <UART_Platform_Receive+0x6e>
        uart_rx_error_flag = 0;  // 플래그 클리어
 8005fac:	4b65      	ldr	r3, [pc, #404]	@ (8006144 <UART_Platform_Receive+0x1f4>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	701a      	strb	r2, [r3, #0]
        LOG_WARN("[UART_STM32] ⚠ DMA reception error occurred");
 8005fb2:	4965      	ldr	r1, [pc, #404]	@ (8006148 <UART_Platform_Receive+0x1f8>)
 8005fb4:	2002      	movs	r0, #2
 8005fb6:	f7ff fbe3 	bl	8005780 <LOGGER_SendFormatted>
        return UART_STATUS_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e0ba      	b.n	8006134 <UART_Platform_Receive+0x1e4>
    }
    
    // DMA 수신 완료 체크
    if (uart_rx_complete_flag) {
 8005fbe:	4b63      	ldr	r3, [pc, #396]	@ (800614c <UART_Platform_Receive+0x1fc>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 80b4 	beq.w	8006132 <UART_Platform_Receive+0x1e2>
        uart_rx_complete_flag = 0;  // 플래그 클리어
 8005fca:	4b60      	ldr	r3, [pc, #384]	@ (800614c <UART_Platform_Receive+0x1fc>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
        
        // 실제 수신된 바이트 수 확인
        uint16_t received_length = uart_rx_length;
 8005fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8006150 <UART_Platform_Receive+0x200>)
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	837b      	strh	r3, [r7, #26]
        LOG_DEBUG("[UART_STM32] DMA received %d bytes", received_length);
 8005fd6:	8b7b      	ldrh	r3, [r7, #26]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	495e      	ldr	r1, [pc, #376]	@ (8006154 <UART_Platform_Receive+0x204>)
 8005fdc:	2000      	movs	r0, #0
 8005fde:	f7ff fbcf 	bl	8005780 <LOGGER_SendFormatted>
        
        if (received_length > 0 && received_length <= buffer_size - 1) {
 8005fe2:	8b7b      	ldrh	r3, [r7, #26]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 809e 	beq.w	8006126 <UART_Platform_Receive+0x1d6>
 8005fea:	8b7b      	ldrh	r3, [r7, #26]
 8005fec:	68ba      	ldr	r2, [r7, #8]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	f340 8099 	ble.w	8006126 <UART_Platform_Receive+0x1d6>
            // 데이터 복사
            memcpy(buffer, rx_buffer, received_length);
 8005ff4:	8b7b      	ldrh	r3, [r7, #26]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4957      	ldr	r1, [pc, #348]	@ (8006158 <UART_Platform_Receive+0x208>)
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f011 ff33 	bl	8017e66 <memcpy>
            buffer[received_length] = '\0';  // null terminate
 8006000:	8b7b      	ldrh	r3, [r7, #26]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
            *bytes_received = received_length;
 800600a:	8b7a      	ldrh	r2, [r7, #26]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
            
            // 수신된 데이터 로그 (간단하게)
            LOG_DEBUG("[UART_STM32] Received data (%d bytes): '%s'", received_length, buffer);
 8006010:	8b7a      	ldrh	r2, [r7, #26]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4951      	ldr	r1, [pc, #324]	@ (800615c <UART_Platform_Receive+0x20c>)
 8006016:	2000      	movs	r0, #0
 8006018:	f7ff fbb2 	bl	8005780 <LOGGER_SendFormatted>
            
            // 새로운 수신을 위해 DMA 완전 리셋 후 재시작
            memset(rx_buffer, 0, sizeof(rx_buffer));
 800601c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006020:	2100      	movs	r1, #0
 8006022:	484d      	ldr	r0, [pc, #308]	@ (8006158 <UART_Platform_Receive+0x208>)
 8006024:	f011 fe5e 	bl	8017ce4 <memset>
            
            // 1. DMA 완전 정지
            HAL_UART_DMAStop(&huart6);
 8006028:	484d      	ldr	r0, [pc, #308]	@ (8006160 <UART_Platform_Receive+0x210>)
 800602a:	f009 fb1a 	bl	800f662 <HAL_UART_DMAStop>
            
            // 2. 모든 UART 에러 플래그 클리어
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_PEF);
 800602e:	4b4c      	ldr	r3, [pc, #304]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2201      	movs	r2, #1
 8006034:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_FEF);
 8006036:	4b4a      	ldr	r3, [pc, #296]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2202      	movs	r2, #2
 800603c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_NEF);
 800603e:	4b48      	ldr	r3, [pc, #288]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2204      	movs	r2, #4
 8006044:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_OREF);
 8006046:	4b46      	ldr	r3, [pc, #280]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2208      	movs	r2, #8
 800604c:	621a      	str	r2, [r3, #32]
            __HAL_UART_CLEAR_FLAG(&huart6, UART_CLEAR_IDLEF);
 800604e:	4b44      	ldr	r3, [pc, #272]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2210      	movs	r2, #16
 8006054:	621a      	str	r2, [r3, #32]
            
            // 3. DMA 스트림이 완전히 정지될 때까지 대기
            if (huart6.hdmarx != NULL) {
 8006056:	4b42      	ldr	r3, [pc, #264]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800605a:	2b00      	cmp	r3, #0
 800605c:	d025      	beq.n	80060aa <UART_Platform_Receive+0x15a>
                int timeout = 1000;
 800605e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006062:	61fb      	str	r3, [r7, #28]
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 8006064:	e00b      	b.n	800607e <UART_Platform_Receive+0x12e>
                    timeout--;
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3b01      	subs	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
                    for(volatile int i = 0; i < 100; i++); // 짧은 지연
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
 8006070:	e002      	b.n	8006078 <UART_Platform_Receive+0x128>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	3301      	adds	r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b63      	cmp	r3, #99	@ 0x63
 800607c:	ddf9      	ble.n	8006072 <UART_Platform_Receive+0x122>
                while (huart6.hdmarx->State != HAL_DMA_STATE_READY && timeout > 0) {
 800607e:	4b38      	ldr	r3, [pc, #224]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006082:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	d002      	beq.n	8006092 <UART_Platform_Receive+0x142>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	dce9      	bgt.n	8006066 <UART_Platform_Receive+0x116>
                }
                
                if (timeout == 0) {
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d108      	bne.n	80060aa <UART_Platform_Receive+0x15a>
                    LOG_WARN("[UART_STM32] DMA did not reach READY state, forcing reset");
 8006098:	4932      	ldr	r1, [pc, #200]	@ (8006164 <UART_Platform_Receive+0x214>)
 800609a:	2002      	movs	r0, #2
 800609c:	f7ff fb70 	bl	8005780 <LOGGER_SendFormatted>
                    huart6.hdmarx->State = HAL_DMA_STATE_READY;
 80060a0:	4b2f      	ldr	r3, [pc, #188]	@ (8006160 <UART_Platform_Receive+0x210>)
 80060a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
                }
            }
            
            // 4. UART 상태 리셋 (DMA 완전 정지 후)
            huart6.RxState = HAL_UART_STATE_READY;
 80060aa:	4b2d      	ldr	r3, [pc, #180]	@ (8006160 <UART_Platform_Receive+0x210>)
 80060ac:	2220      	movs	r2, #32
 80060ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            huart6.gState = HAL_UART_STATE_READY;
 80060b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006160 <UART_Platform_Receive+0x210>)
 80060b4:	2220      	movs	r2, #32
 80060b6:	67da      	str	r2, [r3, #124]	@ 0x7c
            
            // 5. 충분한 지연 후 재시작
            for(volatile int i = 0; i < 10000; i++); // 더 긴 지연
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	e002      	b.n	80060c4 <UART_Platform_Receive+0x174>
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3301      	adds	r3, #1
 80060c2:	613b      	str	r3, [r7, #16]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80060ca:	4293      	cmp	r3, r2
 80060cc:	ddf7      	ble.n	80060be <UART_Platform_Receive+0x16e>
            
            // 6. DMA 재시작
            HAL_StatusTypeDef restart_status = HAL_UART_Receive_DMA(&huart6, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80060ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d2:	4921      	ldr	r1, [pc, #132]	@ (8006158 <UART_Platform_Receive+0x208>)
 80060d4:	4822      	ldr	r0, [pc, #136]	@ (8006160 <UART_Platform_Receive+0x210>)
 80060d6:	f009 fa80 	bl	800f5da <HAL_UART_Receive_DMA>
 80060da:	4603      	mov	r3, r0
 80060dc:	767b      	strb	r3, [r7, #25]
            if (restart_status == HAL_OK) {
 80060de:	7e7b      	ldrb	r3, [r7, #25]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d104      	bne.n	80060ee <UART_Platform_Receive+0x19e>
                LOG_DEBUG("[UART_STM32] DMA restarted for next reception");
 80060e4:	4920      	ldr	r1, [pc, #128]	@ (8006168 <UART_Platform_Receive+0x218>)
 80060e6:	2000      	movs	r0, #0
 80060e8:	f7ff fb4a 	bl	8005780 <LOGGER_SendFormatted>
 80060ec:	e019      	b.n	8006122 <UART_Platform_Receive+0x1d2>
            } else {
                LOG_WARN("[UART_STM32] DMA restart failed (status: %d), UART state: g=%d rx=%d", 
 80060ee:	7e7a      	ldrb	r2, [r7, #25]
 80060f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <UART_Platform_Receive+0x210>)
 80060f2:	6fd9      	ldr	r1, [r3, #124]	@ 0x7c
 80060f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006160 <UART_Platform_Receive+0x210>)
 80060f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	460b      	mov	r3, r1
 80060fe:	491b      	ldr	r1, [pc, #108]	@ (800616c <UART_Platform_Receive+0x21c>)
 8006100:	2002      	movs	r0, #2
 8006102:	f7ff fb3d 	bl	8005780 <LOGGER_SendFormatted>
                        restart_status, huart6.gState, huart6.RxState);
                if (huart6.hdmarx != NULL) {
 8006106:	4b16      	ldr	r3, [pc, #88]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <UART_Platform_Receive+0x1d2>
                    LOG_WARN("[UART_STM32] DMA state: %d", huart6.hdmarx->State);
 800610e:	4b14      	ldr	r3, [pc, #80]	@ (8006160 <UART_Platform_Receive+0x210>)
 8006110:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006112:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006116:	b2db      	uxtb	r3, r3
 8006118:	461a      	mov	r2, r3
 800611a:	4915      	ldr	r1, [pc, #84]	@ (8006170 <UART_Platform_Receive+0x220>)
 800611c:	2002      	movs	r0, #2
 800611e:	f7ff fb2f 	bl	8005780 <LOGGER_SendFormatted>
                }
            }
            
            return UART_STATUS_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e006      	b.n	8006134 <UART_Platform_Receive+0x1e4>
        } else {
            LOG_WARN("[UART_STM32] Invalid received length: %d (buffer size: %d)", received_length, buffer_size);
 8006126:	8b7a      	ldrh	r2, [r7, #26]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4912      	ldr	r1, [pc, #72]	@ (8006174 <UART_Platform_Receive+0x224>)
 800612c:	2002      	movs	r0, #2
 800612e:	f7ff fb27 	bl	8005780 <LOGGER_SendFormatted>
        }
    }
    
    // 수신된 데이터 없음
    return UART_STATUS_TIMEOUT;
 8006132:	2302      	movs	r3, #2
}
 8006134:	4618      	mov	r0, r3
 8006136:	3720      	adds	r7, #32
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	200017f4 	.word	0x200017f4
 8006140:	200017f5 	.word	0x200017f5
 8006144:	200015ee 	.word	0x200015ee
 8006148:	0801c5c0 	.word	0x0801c5c0
 800614c:	200015ed 	.word	0x200015ed
 8006150:	200015f0 	.word	0x200015f0
 8006154:	0801c5f0 	.word	0x0801c5f0
 8006158:	200015f4 	.word	0x200015f4
 800615c:	0801c614 	.word	0x0801c614
 8006160:	20001240 	.word	0x20001240
 8006164:	0801c640 	.word	0x0801c640
 8006168:	0801c67c 	.word	0x0801c67c
 800616c:	0801c6ac 	.word	0x0801c6ac
 8006170:	0801c6f4 	.word	0x0801c6f4
 8006174:	0801c710 	.word	0x0801c710

08006178 <HAL_UART_RxCpltCallback>:
// ============================================================================
// HAL UART 콜백 함수들 - main.c에서 이동됨
// ============================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a0a      	ldr	r2, [pc, #40]	@ (80061b0 <HAL_UART_RxCpltCallback+0x38>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d10e      	bne.n	80061a8 <HAL_UART_RxCpltCallback+0x30>
  {
    // DMA 수신 완료 (전체 버퍼) - 거의 발생하지 않음
    uart_rx_complete_flag = 1;
 800618a:	4b0a      	ldr	r3, [pc, #40]	@ (80061b4 <HAL_UART_RxCpltCallback+0x3c>)
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
    uart_rx_length = sizeof(rx_buffer);
 8006190:	4b09      	ldr	r3, [pc, #36]	@ (80061b8 <HAL_UART_RxCpltCallback+0x40>)
 8006192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006196:	801a      	strh	r2, [r3, #0]
    LOG_DEBUG("[DMA] RxCpltCallback: Full buffer received (%d bytes)", uart_rx_length);
 8006198:	4b07      	ldr	r3, [pc, #28]	@ (80061b8 <HAL_UART_RxCpltCallback+0x40>)
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	b29b      	uxth	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	4906      	ldr	r1, [pc, #24]	@ (80061bc <HAL_UART_RxCpltCallback+0x44>)
 80061a2:	2000      	movs	r0, #0
 80061a4:	f7ff faec 	bl	8005780 <LOGGER_SendFormatted>
  }
}
 80061a8:	bf00      	nop
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40011400 	.word	0x40011400
 80061b4:	200015ed 	.word	0x200015ed
 80061b8:	200015f0 	.word	0x200015f0
 80061bc:	0801c74c 	.word	0x0801c74c

080061c0 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a05      	ldr	r2, [pc, #20]	@ (80061e4 <HAL_UART_RxHalfCpltCallback+0x24>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d103      	bne.n	80061da <HAL_UART_RxHalfCpltCallback+0x1a>
  {
    // DMA 수신 절반 완료 - NORMAL 모드에서는 처리하지 않음 (IDLE 인터럽트가 처리)
    LOG_WARN("[DMA] RxHalfCpltCallback: Half buffer reached but ignoring in NORMAL mode");
 80061d2:	4905      	ldr	r1, [pc, #20]	@ (80061e8 <HAL_UART_RxHalfCpltCallback+0x28>)
 80061d4:	2002      	movs	r0, #2
 80061d6:	f7ff fad3 	bl	8005780 <LOGGER_SendFormatted>
    // uart_rx_complete_flag는 설정하지 않음 - IDLE 인터럽트에서만 설정
  }
}
 80061da:	bf00      	nop
 80061dc:	3708      	adds	r7, #8
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40011400 	.word	0x40011400
 80061e8:	0801c784 	.word	0x0801c784

080061ec <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a3c      	ldr	r2, [pc, #240]	@ (80062ec <HAL_UART_ErrorCallback+0x100>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d171      	bne.n	80062e2 <HAL_UART_ErrorCallback+0xf6>
  {
    // UART 에러 발생
    uart_rx_error_flag = 1;
 80061fe:	4b3c      	ldr	r3, [pc, #240]	@ (80062f0 <HAL_UART_ErrorCallback+0x104>)
 8006200:	2201      	movs	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]
    LOG_WARN("[DMA] ErrorCallback: UART error occurred");
 8006204:	493b      	ldr	r1, [pc, #236]	@ (80062f4 <HAL_UART_ErrorCallback+0x108>)
 8006206:	2002      	movs	r0, #2
 8006208:	f7ff faba 	bl	8005780 <LOGGER_SendFormatted>
    
    // 모든 에러 플래그 클리어
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) {
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b08      	cmp	r3, #8
 8006218:	d107      	bne.n	800622a <HAL_UART_ErrorCallback+0x3e>
      __HAL_UART_CLEAR_OREFLAG(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2208      	movs	r2, #8
 8006220:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Overrun error cleared");
 8006222:	4935      	ldr	r1, [pc, #212]	@ (80062f8 <HAL_UART_ErrorCallback+0x10c>)
 8006224:	2002      	movs	r0, #2
 8006226:	f7ff faab 	bl	8005780 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69db      	ldr	r3, [r3, #28]
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d107      	bne.n	8006248 <HAL_UART_ErrorCallback+0x5c>
      __HAL_UART_CLEAR_NEFLAG(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2204      	movs	r2, #4
 800623e:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Noise error cleared");
 8006240:	492e      	ldr	r1, [pc, #184]	@ (80062fc <HAL_UART_ErrorCallback+0x110>)
 8006242:	2002      	movs	r0, #2
 8006244:	f7ff fa9c 	bl	8005780 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) {
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b02      	cmp	r3, #2
 8006254:	d107      	bne.n	8006266 <HAL_UART_ErrorCallback+0x7a>
      __HAL_UART_CLEAR_FEFLAG(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2202      	movs	r2, #2
 800625c:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Frame error cleared");
 800625e:	4928      	ldr	r1, [pc, #160]	@ (8006300 <HAL_UART_ErrorCallback+0x114>)
 8006260:	2002      	movs	r0, #2
 8006262:	f7ff fa8d 	bl	8005780 <LOGGER_SendFormatted>
    }
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d107      	bne.n	8006284 <HAL_UART_ErrorCallback+0x98>
      __HAL_UART_CLEAR_PEFLAG(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2201      	movs	r2, #1
 800627a:	621a      	str	r2, [r3, #32]
      LOG_WARN("[DMA] Parity error cleared");
 800627c:	4921      	ldr	r1, [pc, #132]	@ (8006304 <HAL_UART_ErrorCallback+0x118>)
 800627e:	2002      	movs	r0, #2
 8006280:	f7ff fa7e 	bl	8005780 <LOGGER_SendFormatted>
    }
    
    // UART와 DMA 상태 강제 리셋
    HAL_UART_DMAStop(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f009 f9ec 	bl	800f662 <HAL_UART_DMAStop>
    huart->gState = HAL_UART_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2220      	movs	r2, #32
 800628e:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    if (huart->hdmarx != NULL) {
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <HAL_UART_ErrorCallback+0xbe>
      huart->hdmarx->State = HAL_DMA_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    
    // 버퍼 클리어 후 DMA 재시작 (일반 모드)
    memset(rx_buffer, 0, sizeof(rx_buffer));
 80062aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ae:	2100      	movs	r1, #0
 80062b0:	4815      	ldr	r0, [pc, #84]	@ (8006308 <HAL_UART_ErrorCallback+0x11c>)
 80062b2:	f011 fd17 	bl	8017ce4 <memset>
    HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80062b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ba:	4913      	ldr	r1, [pc, #76]	@ (8006308 <HAL_UART_ErrorCallback+0x11c>)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f009 f98c 	bl	800f5da <HAL_UART_Receive_DMA>
 80062c2:	4603      	mov	r3, r0
 80062c4:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK) {
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d104      	bne.n	80062d6 <HAL_UART_ErrorCallback+0xea>
      LOG_INFO("[DMA] Error recovery: DMA restarted successfully");
 80062cc:	490f      	ldr	r1, [pc, #60]	@ (800630c <HAL_UART_ErrorCallback+0x120>)
 80062ce:	2001      	movs	r0, #1
 80062d0:	f7ff fa56 	bl	8005780 <LOGGER_SendFormatted>
    } else {
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
    }
  }
}
 80062d4:	e005      	b.n	80062e2 <HAL_UART_ErrorCallback+0xf6>
      LOG_ERROR("[DMA] Error recovery: DMA restart failed (status: %d)", status);
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	461a      	mov	r2, r3
 80062da:	490d      	ldr	r1, [pc, #52]	@ (8006310 <HAL_UART_ErrorCallback+0x124>)
 80062dc:	2003      	movs	r0, #3
 80062de:	f7ff fa4f 	bl	8005780 <LOGGER_SendFormatted>
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40011400 	.word	0x40011400
 80062f0:	200015ee 	.word	0x200015ee
 80062f4:	0801c7d0 	.word	0x0801c7d0
 80062f8:	0801c7fc 	.word	0x0801c7fc
 80062fc:	0801c818 	.word	0x0801c818
 8006300:	0801c834 	.word	0x0801c834
 8006304:	0801c850 	.word	0x0801c850
 8006308:	200015f4 	.word	0x200015f4
 800630c:	0801c86c 	.word	0x0801c86c
 8006310:	0801c8a0 	.word	0x0801c8a0

08006314 <USER_UART_IDLECallback>:

// UART IDLE 인터럽트 콜백 (메시지 끝 감지)
void USER_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af02      	add	r7, sp, #8
 800631a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a3e      	ldr	r2, [pc, #248]	@ (800641c <USER_UART_IDLECallback+0x108>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d175      	bne.n	8006412 <USER_UART_IDLECallback+0xfe>
  {
    // UART 에러 상태 체크
    uint32_t error_flags = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE)) error_flags |= 0x01;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	f003 0308 	and.w	r3, r3, #8
 8006334:	2b08      	cmp	r3, #8
 8006336:	d103      	bne.n	8006340 <USER_UART_IDLECallback+0x2c>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE)) error_flags |= 0x02;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b02      	cmp	r3, #2
 800634c:	d103      	bne.n	8006356 <USER_UART_IDLECallback+0x42>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f043 0302 	orr.w	r3, r3, #2
 8006354:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) error_flags |= 0x04;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b04      	cmp	r3, #4
 8006362:	d103      	bne.n	800636c <USER_UART_IDLECallback+0x58>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f043 0304 	orr.w	r3, r3, #4
 800636a:	60fb      	str	r3, [r7, #12]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE)) error_flags |= 0x08;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b01      	cmp	r3, #1
 8006378:	d103      	bne.n	8006382 <USER_UART_IDLECallback+0x6e>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f043 0308 	orr.w	r3, r3, #8
 8006380:	60fb      	str	r3, [r7, #12]
    
    // IDLE 감지 - 메시지 끝
    uint16_t remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	817b      	strh	r3, [r7, #10]
    uart_rx_length = sizeof(rx_buffer) - remaining;
 800638c:	897b      	ldrh	r3, [r7, #10]
 800638e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8006392:	b29a      	uxth	r2, r3
 8006394:	4b22      	ldr	r3, [pc, #136]	@ (8006420 <USER_UART_IDLECallback+0x10c>)
 8006396:	801a      	strh	r2, [r3, #0]
    
    if (uart_rx_length > 0) {
 8006398:	4b21      	ldr	r3, [pc, #132]	@ (8006420 <USER_UART_IDLECallback+0x10c>)
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d033      	beq.n	800640a <USER_UART_IDLECallback+0xf6>
      uart_rx_complete_flag = 1;
 80063a2:	4b20      	ldr	r3, [pc, #128]	@ (8006424 <USER_UART_IDLECallback+0x110>)
 80063a4:	2201      	movs	r2, #1
 80063a6:	701a      	strb	r2, [r3, #0]
      if (error_flags != 0) {
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <USER_UART_IDLECallback+0xae>
        LOG_WARN("[DMA] IDLE detected: %d bytes received (UART errors: 0x%02lX)", uart_rx_length, error_flags);
 80063ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006420 <USER_UART_IDLECallback+0x10c>)
 80063b0:	881b      	ldrh	r3, [r3, #0]
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	461a      	mov	r2, r3
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	491b      	ldr	r1, [pc, #108]	@ (8006428 <USER_UART_IDLECallback+0x114>)
 80063ba:	2002      	movs	r0, #2
 80063bc:	f7ff f9e0 	bl	8005780 <LOGGER_SendFormatted>
 80063c0:	e007      	b.n	80063d2 <USER_UART_IDLECallback+0xbe>
      } else {
        LOG_DEBUG("[DMA] IDLE detected: %d bytes received", uart_rx_length);
 80063c2:	4b17      	ldr	r3, [pc, #92]	@ (8006420 <USER_UART_IDLECallback+0x10c>)
 80063c4:	881b      	ldrh	r3, [r3, #0]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	461a      	mov	r2, r3
 80063ca:	4918      	ldr	r1, [pc, #96]	@ (800642c <USER_UART_IDLECallback+0x118>)
 80063cc:	2000      	movs	r0, #0
 80063ce:	f7ff f9d7 	bl	8005780 <LOGGER_SendFormatted>
      }
      
      // 첫 몇 바이트 확인 (디버깅용)
      if (uart_rx_length >= 4) {
 80063d2:	4b13      	ldr	r3, [pc, #76]	@ (8006420 <USER_UART_IDLECallback+0x10c>)
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b03      	cmp	r3, #3
 80063da:	d912      	bls.n	8006402 <USER_UART_IDLECallback+0xee>
        LOG_DEBUG("[DMA] First 4 bytes: %02X %02X %02X %02X", 
 80063dc:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <USER_UART_IDLECallback+0x11c>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <USER_UART_IDLECallback+0x11c>)
 80063e4:	785b      	ldrb	r3, [r3, #1]
 80063e6:	4618      	mov	r0, r3
 80063e8:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <USER_UART_IDLECallback+0x11c>)
 80063ea:	789b      	ldrb	r3, [r3, #2]
 80063ec:	461a      	mov	r2, r3
 80063ee:	4b10      	ldr	r3, [pc, #64]	@ (8006430 <USER_UART_IDLECallback+0x11c>)
 80063f0:	78db      	ldrb	r3, [r3, #3]
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	9200      	str	r2, [sp, #0]
 80063f6:	4603      	mov	r3, r0
 80063f8:	460a      	mov	r2, r1
 80063fa:	490e      	ldr	r1, [pc, #56]	@ (8006434 <USER_UART_IDLECallback+0x120>)
 80063fc:	2000      	movs	r0, #0
 80063fe:	f7ff f9bf 	bl	8005780 <LOGGER_SendFormatted>
                  rx_buffer[0], rx_buffer[1], rx_buffer[2], rx_buffer[3]);
      }
      
      // DMA 중지 (일반 모드에서는 자동으로 완료됨)
      HAL_UART_DMAStop(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f009 f92d 	bl	800f662 <HAL_UART_DMAStop>
      // 다음 수신을 위해 즉시 재시작하지 않음 - uart_stm32.c에서 처리
    } else {
      LOG_DEBUG("[DMA] IDLE detected but no data");
    }
  }
}
 8006408:	e003      	b.n	8006412 <USER_UART_IDLECallback+0xfe>
      LOG_DEBUG("[DMA] IDLE detected but no data");
 800640a:	490b      	ldr	r1, [pc, #44]	@ (8006438 <USER_UART_IDLECallback+0x124>)
 800640c:	2000      	movs	r0, #0
 800640e:	f7ff f9b7 	bl	8005780 <LOGGER_SendFormatted>
}
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40011400 	.word	0x40011400
 8006420:	200015f0 	.word	0x200015f0
 8006424:	200015ed 	.word	0x200015ed
 8006428:	0801c8d8 	.word	0x0801c8d8
 800642c:	0801c918 	.word	0x0801c918
 8006430:	200015f4 	.word	0x200015f4
 8006434:	0801c940 	.word	0x0801c940
 8006438:	0801c96c 	.word	0x0801c96c

0800643c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800643c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006474 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006440:	f7ff f8f2 	bl	8005628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006444:	480c      	ldr	r0, [pc, #48]	@ (8006478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006446:	490d      	ldr	r1, [pc, #52]	@ (800647c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006448:	4a0d      	ldr	r2, [pc, #52]	@ (8006480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800644a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800644c:	e002      	b.n	8006454 <LoopCopyDataInit>

0800644e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800644e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006452:	3304      	adds	r3, #4

08006454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006458:	d3f9      	bcc.n	800644e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800645a:	4a0a      	ldr	r2, [pc, #40]	@ (8006484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800645c:	4c0a      	ldr	r4, [pc, #40]	@ (8006488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800645e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006460:	e001      	b.n	8006466 <LoopFillZerobss>

08006462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006464:	3204      	adds	r2, #4

08006466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006468:	d3fb      	bcc.n	8006462 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800646a:	f011 fcd5 	bl	8017e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800646e:	f7fb fdad 	bl	8001fcc <main>
  bx  lr    
 8006472:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006474:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800647c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8006480:	0801cc28 	.word	0x0801cc28
  ldr r2, =_sbss
 8006484:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8006488:	200122d0 	.word	0x200122d0

0800648c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800648c:	e7fe      	b.n	800648c <ADC_IRQHandler>

0800648e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006492:	2003      	movs	r0, #3
 8006494:	f000 fb91 	bl	8006bba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006498:	2000      	movs	r0, #0
 800649a:	f7fe ff41 	bl	8005320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800649e:	f7fd fea3 	bl	80041e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <HAL_IncTick+0x20>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	461a      	mov	r2, r3
 80064b2:	4b06      	ldr	r3, [pc, #24]	@ (80064cc <HAL_IncTick+0x24>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4413      	add	r3, r2
 80064b8:	4a04      	ldr	r2, [pc, #16]	@ (80064cc <HAL_IncTick+0x24>)
 80064ba:	6013      	str	r3, [r2, #0]
}
 80064bc:	bf00      	nop
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	20000074 	.word	0x20000074
 80064cc:	200017f8 	.word	0x200017f8

080064d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return uwTick;
 80064d4:	4b03      	ldr	r3, [pc, #12]	@ (80064e4 <HAL_GetTick+0x14>)
 80064d6:	681b      	ldr	r3, [r3, #0]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	200017f8 	.word	0x200017f8

080064e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80064f0:	f7ff ffee 	bl	80064d0 <HAL_GetTick>
 80064f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d005      	beq.n	800650e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006502:	4b0a      	ldr	r3, [pc, #40]	@ (800652c <HAL_Delay+0x44>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800650e:	bf00      	nop
 8006510:	f7ff ffde 	bl	80064d0 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	429a      	cmp	r2, r3
 800651e:	d8f7      	bhi.n	8006510 <HAL_Delay+0x28>
  {
  }
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000074 	.word	0x20000074

08006530 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e031      	b.n	80065aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fd fe72 	bl	8004238 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b00      	cmp	r3, #0
 800656c:	d116      	bne.n	800659c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006572:	4b10      	ldr	r3, [pc, #64]	@ (80065b4 <HAL_ADC_Init+0x84>)
 8006574:	4013      	ands	r3, r2
 8006576:	f043 0202 	orr.w	r2, r3, #2
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f974 	bl	800686c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658e:	f023 0303 	bic.w	r3, r3, #3
 8006592:	f043 0201 	orr.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	641a      	str	r2, [r3, #64]	@ 0x40
 800659a:	e001      	b.n	80065a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	ffffeefd 	.word	0xffffeefd

080065b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b085      	sub	sp, #20
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_ADC_ConfigChannel+0x1c>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e13a      	b.n	800684a <HAL_ADC_ConfigChannel+0x292>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b09      	cmp	r3, #9
 80065e2:	d93a      	bls.n	800665a <HAL_ADC_ConfigChannel+0xa2>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065ec:	d035      	beq.n	800665a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68d9      	ldr	r1, [r3, #12]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	4613      	mov	r3, r2
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	4413      	add	r3, r2
 8006602:	3b1e      	subs	r3, #30
 8006604:	2207      	movs	r2, #7
 8006606:	fa02 f303 	lsl.w	r3, r2, r3
 800660a:	43da      	mvns	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	400a      	ands	r2, r1
 8006612:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a8f      	ldr	r2, [pc, #572]	@ (8006858 <HAL_ADC_ConfigChannel+0x2a0>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d10a      	bne.n	8006634 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68d9      	ldr	r1, [r3, #12]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	061a      	lsls	r2, r3, #24
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	430a      	orrs	r2, r1
 8006630:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006632:	e039      	b.n	80066a8 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68d9      	ldr	r1, [r3, #12]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	b29b      	uxth	r3, r3
 8006644:	4618      	mov	r0, r3
 8006646:	4603      	mov	r3, r0
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	4403      	add	r3, r0
 800664c:	3b1e      	subs	r3, #30
 800664e:	409a      	lsls	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006658:	e026      	b.n	80066a8 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6919      	ldr	r1, [r3, #16]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	461a      	mov	r2, r3
 8006668:	4613      	mov	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4413      	add	r3, r2
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	2207      	movs	r2, #7
 8006674:	fa02 f303 	lsl.w	r3, r2, r3
 8006678:	43da      	mvns	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	400a      	ands	r2, r1
 8006680:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	6919      	ldr	r1, [r3, #16]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	4618      	mov	r0, r3
 8006694:	4603      	mov	r3, r0
 8006696:	005b      	lsls	r3, r3, #1
 8006698:	4403      	add	r3, r0
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	409a      	lsls	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b06      	cmp	r3, #6
 80066ae:	d824      	bhi.n	80066fa <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	4413      	add	r3, r2
 80066c0:	3b05      	subs	r3, #5
 80066c2:	221f      	movs	r2, #31
 80066c4:	fa02 f303 	lsl.w	r3, r2, r3
 80066c8:	43da      	mvns	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	400a      	ands	r2, r1
 80066d0:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4618      	mov	r0, r3
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	3b05      	subs	r3, #5
 80066ec:	fa00 f203 	lsl.w	r2, r0, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80066f8:	e04c      	b.n	8006794 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	2b0c      	cmp	r3, #12
 8006700:	d824      	bhi.n	800674c <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	4413      	add	r3, r2
 8006712:	3b23      	subs	r3, #35	@ 0x23
 8006714:	221f      	movs	r2, #31
 8006716:	fa02 f303 	lsl.w	r3, r2, r3
 800671a:	43da      	mvns	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	400a      	ands	r2, r1
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	b29b      	uxth	r3, r3
 8006730:	4618      	mov	r0, r3
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	4613      	mov	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4413      	add	r3, r2
 800673c:	3b23      	subs	r3, #35	@ 0x23
 800673e:	fa00 f203 	lsl.w	r2, r0, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	430a      	orrs	r2, r1
 8006748:	631a      	str	r2, [r3, #48]	@ 0x30
 800674a:	e023      	b.n	8006794 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4413      	add	r3, r2
 800675c:	3b41      	subs	r3, #65	@ 0x41
 800675e:	221f      	movs	r2, #31
 8006760:	fa02 f303 	lsl.w	r3, r2, r3
 8006764:	43da      	mvns	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	400a      	ands	r2, r1
 800676c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	4618      	mov	r0, r3
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	4613      	mov	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4413      	add	r3, r2
 8006786:	3b41      	subs	r3, #65	@ 0x41
 8006788:	fa00 f203 	lsl.w	r2, r0, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a30      	ldr	r2, [pc, #192]	@ (800685c <HAL_ADC_ConfigChannel+0x2a4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10a      	bne.n	80067b4 <HAL_ADC_ConfigChannel+0x1fc>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067a6:	d105      	bne.n	80067b4 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80067a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4a2c      	ldr	r2, [pc, #176]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 80067ae:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80067b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a28      	ldr	r2, [pc, #160]	@ (800685c <HAL_ADC_ConfigChannel+0x2a4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d10f      	bne.n	80067de <HAL_ADC_ConfigChannel+0x226>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b12      	cmp	r3, #18
 80067c4:	d10b      	bne.n	80067de <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80067c6:	4b26      	ldr	r3, [pc, #152]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4a25      	ldr	r2, [pc, #148]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 80067cc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80067d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80067d2:	4b23      	ldr	r3, [pc, #140]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	4a22      	ldr	r2, [pc, #136]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 80067d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80067dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1e      	ldr	r2, [pc, #120]	@ (800685c <HAL_ADC_ConfigChannel+0x2a4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d12b      	bne.n	8006840 <HAL_ADC_ConfigChannel+0x288>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006858 <HAL_ADC_ConfigChannel+0x2a0>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d003      	beq.n	80067fa <HAL_ADC_ConfigChannel+0x242>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b11      	cmp	r3, #17
 80067f8:	d122      	bne.n	8006840 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80067fa:	4b19      	ldr	r3, [pc, #100]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	4a18      	ldr	r2, [pc, #96]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 8006800:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006804:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006806:	4b16      	ldr	r3, [pc, #88]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	4a15      	ldr	r2, [pc, #84]	@ (8006860 <HAL_ADC_ConfigChannel+0x2a8>)
 800680c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006810:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a10      	ldr	r2, [pc, #64]	@ (8006858 <HAL_ADC_ConfigChannel+0x2a0>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d111      	bne.n	8006840 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800681c:	4b11      	ldr	r3, [pc, #68]	@ (8006864 <HAL_ADC_ConfigChannel+0x2ac>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a11      	ldr	r2, [pc, #68]	@ (8006868 <HAL_ADC_ConfigChannel+0x2b0>)
 8006822:	fba2 2303 	umull	r2, r3, r2, r3
 8006826:	0c9a      	lsrs	r2, r3, #18
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	005b      	lsls	r3, r3, #1
 8006830:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006832:	e002      	b.n	800683a <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3b01      	subs	r3, #1
 8006838:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f9      	bne.n	8006834 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	10000012 	.word	0x10000012
 800685c:	40012000 	.word	0x40012000
 8006860:	40012300 	.word	0x40012300
 8006864:	20000020 	.word	0x20000020
 8006868:	431bde83 	.word	0x431bde83

0800686c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006874:	4b78      	ldr	r3, [pc, #480]	@ (8006a58 <ADC_Init+0x1ec>)
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	4a77      	ldr	r2, [pc, #476]	@ (8006a58 <ADC_Init+0x1ec>)
 800687a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800687e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006880:	4b75      	ldr	r3, [pc, #468]	@ (8006a58 <ADC_Init+0x1ec>)
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4973      	ldr	r1, [pc, #460]	@ (8006a58 <ADC_Init+0x1ec>)
 800688a:	4313      	orrs	r3, r2
 800688c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800689c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6859      	ldr	r1, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	021a      	lsls	r2, r3, #8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80068c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6859      	ldr	r1, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6899      	ldr	r1, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fa:	4a58      	ldr	r2, [pc, #352]	@ (8006a5c <ADC_Init+0x1f0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800690e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6899      	ldr	r1, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6899      	ldr	r1, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	e00f      	b.n	8006966 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006964:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0202 	bic.w	r2, r2, #2
 8006974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6899      	ldr	r1, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	005a      	lsls	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80069b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6859      	ldr	r1, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	3b01      	subs	r3, #1
 80069c0:	035a      	lsls	r2, r3, #13
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	e007      	b.n	80069dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80069ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	051a      	lsls	r2, r3, #20
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6899      	ldr	r1, [r3, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a1e:	025a      	lsls	r2, r3, #9
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6899      	ldr	r1, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	029a      	lsls	r2, r3, #10
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40012300 	.word	0x40012300
 8006a5c:	0f000001 	.word	0x0f000001

08006a60 <__NVIC_SetPriorityGrouping>:
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a70:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006a88:	4b06      	ldr	r3, [pc, #24]	@ (8006aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a8e:	4a04      	ldr	r2, [pc, #16]	@ (8006aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	60d3      	str	r3, [r2, #12]
}
 8006a94:	bf00      	nop
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	e000ed00 	.word	0xe000ed00
 8006aa4:	05fa0000 	.word	0x05fa0000

08006aa8 <__NVIC_GetPriorityGrouping>:
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006aac:	4b04      	ldr	r3, [pc, #16]	@ (8006ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	0a1b      	lsrs	r3, r3, #8
 8006ab2:	f003 0307 	and.w	r3, r3, #7
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	e000ed00 	.word	0xe000ed00

08006ac4 <__NVIC_EnableIRQ>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	db0b      	blt.n	8006aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	f003 021f 	and.w	r2, r3, #31
 8006adc:	4907      	ldr	r1, [pc, #28]	@ (8006afc <__NVIC_EnableIRQ+0x38>)
 8006ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8006aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	e000e100 	.word	0xe000e100

08006b00 <__NVIC_SetPriority>:
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	6039      	str	r1, [r7, #0]
 8006b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	db0a      	blt.n	8006b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	490c      	ldr	r1, [pc, #48]	@ (8006b4c <__NVIC_SetPriority+0x4c>)
 8006b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1e:	0112      	lsls	r2, r2, #4
 8006b20:	b2d2      	uxtb	r2, r2
 8006b22:	440b      	add	r3, r1
 8006b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006b28:	e00a      	b.n	8006b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	4908      	ldr	r1, [pc, #32]	@ (8006b50 <__NVIC_SetPriority+0x50>)
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	3b04      	subs	r3, #4
 8006b38:	0112      	lsls	r2, r2, #4
 8006b3a:	b2d2      	uxtb	r2, r2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	761a      	strb	r2, [r3, #24]
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	e000e100 	.word	0xe000e100
 8006b50:	e000ed00 	.word	0xe000ed00

08006b54 <NVIC_EncodePriority>:
{
 8006b54:	b480      	push	{r7}
 8006b56:	b089      	sub	sp, #36	@ 0x24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f1c3 0307 	rsb	r3, r3, #7
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	bf28      	it	cs
 8006b72:	2304      	movcs	r3, #4
 8006b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	2b06      	cmp	r3, #6
 8006b7c:	d902      	bls.n	8006b84 <NVIC_EncodePriority+0x30>
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	3b03      	subs	r3, #3
 8006b82:	e000      	b.n	8006b86 <NVIC_EncodePriority+0x32>
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b88:	f04f 32ff 	mov.w	r2, #4294967295
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43da      	mvns	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	401a      	ands	r2, r3
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba6:	43d9      	mvns	r1, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bac:	4313      	orrs	r3, r2
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3724      	adds	r7, #36	@ 0x24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff ff4c 	bl	8006a60 <__NVIC_SetPriorityGrouping>
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006bde:	2300      	movs	r3, #0
 8006be0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006be2:	f7ff ff61 	bl	8006aa8 <__NVIC_GetPriorityGrouping>
 8006be6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	6978      	ldr	r0, [r7, #20]
 8006bee:	f7ff ffb1 	bl	8006b54 <NVIC_EncodePriority>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff ff80 	bl	8006b00 <__NVIC_SetPriority>
}
 8006c00:	bf00      	nop
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff ff54 	bl	8006ac4 <__NVIC_EnableIRQ>
}
 8006c1c:	bf00      	nop
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d101      	bne.n	8006c36 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e054      	b.n	8006ce0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	7f5b      	ldrb	r3, [r3, #29]
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d105      	bne.n	8006c4c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fd fb50 	bl	80042ec <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	791b      	ldrb	r3, [r3, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d10c      	bne.n	8006c74 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a22      	ldr	r2, [pc, #136]	@ (8006ce8 <HAL_CRC_Init+0xc4>)
 8006c60:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0218 	bic.w	r2, r2, #24
 8006c70:	609a      	str	r2, [r3, #8]
 8006c72:	e00c      	b.n	8006c8e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6899      	ldr	r1, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f834 	bl	8006cec <HAL_CRCEx_Polynomial_Set>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e028      	b.n	8006ce0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	795b      	ldrb	r3, [r3, #5]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d105      	bne.n	8006ca2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9e:	611a      	str	r2, [r3, #16]
 8006ca0:	e004      	b.n	8006cac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	6912      	ldr	r2, [r2, #16]
 8006caa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699a      	ldr	r2, [r3, #24]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	04c11db7 	.word	0x04c11db7

08006cec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006cfc:	231f      	movs	r3, #31
 8006cfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	75fb      	strb	r3, [r7, #23]
 8006d0e:	e063      	b.n	8006dd8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006d10:	bf00      	nop
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1e5a      	subs	r2, r3, #1
 8006d16:	613a      	str	r2, [r7, #16]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d009      	beq.n	8006d30 <HAL_CRCEx_Polynomial_Set+0x44>
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f003 031f 	and.w	r3, r3, #31
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d0f0      	beq.n	8006d12 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b18      	cmp	r3, #24
 8006d34:	d846      	bhi.n	8006dc4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8006d36:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <HAL_CRCEx_Polynomial_Set+0x50>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006dcb 	.word	0x08006dcb
 8006d40:	08006dc5 	.word	0x08006dc5
 8006d44:	08006dc5 	.word	0x08006dc5
 8006d48:	08006dc5 	.word	0x08006dc5
 8006d4c:	08006dc5 	.word	0x08006dc5
 8006d50:	08006dc5 	.word	0x08006dc5
 8006d54:	08006dc5 	.word	0x08006dc5
 8006d58:	08006dc5 	.word	0x08006dc5
 8006d5c:	08006db9 	.word	0x08006db9
 8006d60:	08006dc5 	.word	0x08006dc5
 8006d64:	08006dc5 	.word	0x08006dc5
 8006d68:	08006dc5 	.word	0x08006dc5
 8006d6c:	08006dc5 	.word	0x08006dc5
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006dc5 	.word	0x08006dc5
 8006d78:	08006dc5 	.word	0x08006dc5
 8006d7c:	08006dad 	.word	0x08006dad
 8006d80:	08006dc5 	.word	0x08006dc5
 8006d84:	08006dc5 	.word	0x08006dc5
 8006d88:	08006dc5 	.word	0x08006dc5
 8006d8c:	08006dc5 	.word	0x08006dc5
 8006d90:	08006dc5 	.word	0x08006dc5
 8006d94:	08006dc5 	.word	0x08006dc5
 8006d98:	08006dc5 	.word	0x08006dc5
 8006d9c:	08006da1 	.word	0x08006da1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b06      	cmp	r3, #6
 8006da4:	d913      	bls.n	8006dce <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006daa:	e010      	b.n	8006dce <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b07      	cmp	r3, #7
 8006db0:	d90f      	bls.n	8006dd2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006db6:	e00c      	b.n	8006dd2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	2b0f      	cmp	r3, #15
 8006dbc:	d90b      	bls.n	8006dd6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006dc2:	e008      	b.n	8006dd6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	75fb      	strb	r3, [r7, #23]
        break;
 8006dc8:	e006      	b.n	8006dd8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006dca:	bf00      	nop
 8006dcc:	e004      	b.n	8006dd8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006dce:	bf00      	nop
 8006dd0:	e002      	b.n	8006dd8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006dd2:	bf00      	nop
 8006dd4:	e000      	b.n	8006dd8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006dd6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10d      	bne.n	8006dfa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f023 0118 	bic.w	r1, r3, #24
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	371c      	adds	r7, #28
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e069      	b.n	8006eee <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fd fa80 	bl	800432c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	6819      	ldr	r1, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006ef8 <HAL_DCMI_Init+0xf0>)
 8006e4e:	400b      	ands	r3, r1
 8006e50:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6819      	ldr	r1, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685a      	ldr	r2, [r3, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	695b      	ldr	r3, [r3, #20]
 8006e60:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006e66:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	691b      	ldr	r3, [r3, #16]
 8006e6c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8006e72:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8006e7e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e84:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8006e8a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e90:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8006e96:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	2b10      	cmp	r3, #16
 8006ea6:	d112      	bne.n	8006ece <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	7f1b      	ldrb	r3, [r3, #28]
 8006eac:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7f5b      	ldrb	r3, [r3, #29]
 8006eb2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006eb4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7f9b      	ldrb	r3, [r3, #30]
 8006eba:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8006ebc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	7fdb      	ldrb	r3, [r3, #31]
 8006ec4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8006eca:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8006ecc:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f042 021e 	orr.w	r2, r2, #30
 8006edc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	ffe0f007 	.word	0xffe0f007

08006efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f08:	f7ff fae2 	bl	80064d0 <HAL_GetTick>
 8006f0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e099      	b.n	800704c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f38:	e00f      	b.n	8006f5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f3a:	f7ff fac9 	bl	80064d0 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d908      	bls.n	8006f5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2203      	movs	r2, #3
 8006f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e078      	b.n	800704c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1e8      	bne.n	8006f3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4b38      	ldr	r3, [pc, #224]	@ (8007054 <HAL_DMA_Init+0x158>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d107      	bne.n	8006fc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f023 0307 	bic.w	r3, r3, #7
 8006fda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fea:	2b04      	cmp	r3, #4
 8006fec:	d117      	bne.n	800701e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00e      	beq.n	800701e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fb73 	bl	80076ec <DMA_CheckFifoParam>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d008      	beq.n	800701e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2240      	movs	r2, #64	@ 0x40
 8007010:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800701a:	2301      	movs	r3, #1
 800701c:	e016      	b.n	800704c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fb2a 	bl	8007680 <DMA_CalcBaseAndBitshift>
 800702c:	4603      	mov	r3, r0
 800702e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007034:	223f      	movs	r2, #63	@ 0x3f
 8007036:	409a      	lsls	r2, r3
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	f010803f 	.word	0xf010803f

08007058 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d101      	bne.n	800706a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e050      	b.n	800710c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d101      	bne.n	800707a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007076:	2302      	movs	r3, #2
 8007078:	e048      	b.n	800710c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0201 	bic.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2200      	movs	r2, #0
 80070a0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2200      	movs	r2, #0
 80070a8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2200      	movs	r2, #0
 80070b0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2221      	movs	r2, #33	@ 0x21
 80070b8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fae0 	bl	8007680 <DMA_CalcBaseAndBitshift>
 80070c0:	4603      	mov	r3, r0
 80070c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c8:	223f      	movs	r2, #63	@ 0x3f
 80070ca:	409a      	lsls	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_DMA_Start_IT+0x26>
 8007136:	2302      	movs	r3, #2
 8007138:	e048      	b.n	80071cc <HAL_DMA_Start_IT+0xb8>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b01      	cmp	r3, #1
 800714c:	d137      	bne.n	80071be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2202      	movs	r2, #2
 8007152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fa5e 	bl	8007624 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800716c:	223f      	movs	r2, #63	@ 0x3f
 800716e:	409a      	lsls	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0216 	orr.w	r2, r2, #22
 8007182:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007192:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0208 	orr.w	r2, r2, #8
 80071aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	e005      	b.n	80071ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071c6:	2302      	movs	r3, #2
 80071c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80071e2:	f7ff f975 	bl	80064d0 <HAL_GetTick>
 80071e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d008      	beq.n	8007206 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2280      	movs	r2, #128	@ 0x80
 80071f8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007202:	2301      	movs	r3, #1
 8007204:	e052      	b.n	80072ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0216 	bic.w	r2, r2, #22
 8007214:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	695a      	ldr	r2, [r3, #20]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007224:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	2b00      	cmp	r3, #0
 800722c:	d103      	bne.n	8007236 <HAL_DMA_Abort+0x62>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f022 0208 	bic.w	r2, r2, #8
 8007244:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007256:	e013      	b.n	8007280 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007258:	f7ff f93a 	bl	80064d0 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b05      	cmp	r3, #5
 8007264:	d90c      	bls.n	8007280 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2203      	movs	r2, #3
 8007270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e015      	b.n	80072ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e4      	bne.n	8007258 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007292:	223f      	movs	r2, #63	@ 0x3f
 8007294:	409a      	lsls	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d004      	beq.n	80072d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2280      	movs	r2, #128	@ 0x80
 80072cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e00c      	b.n	80072ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2205      	movs	r2, #5
 80072d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0201 	bic.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8007304:	4b8e      	ldr	r3, [pc, #568]	@ (8007540 <HAL_DMA_IRQHandler+0x248>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a8e      	ldr	r2, [pc, #568]	@ (8007544 <HAL_DMA_IRQHandler+0x24c>)
 800730a:	fba2 2303 	umull	r2, r3, r2, r3
 800730e:	0a9b      	lsrs	r3, r3, #10
 8007310:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007316:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007322:	2208      	movs	r2, #8
 8007324:	409a      	lsls	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4013      	ands	r3, r2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01a      	beq.n	8007364 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d013      	beq.n	8007364 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f022 0204 	bic.w	r2, r2, #4
 800734a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007350:	2208      	movs	r2, #8
 8007352:	409a      	lsls	r2, r3
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800735c:	f043 0201 	orr.w	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007368:	2201      	movs	r2, #1
 800736a:	409a      	lsls	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4013      	ands	r3, r2
 8007370:	2b00      	cmp	r3, #0
 8007372:	d012      	beq.n	800739a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007386:	2201      	movs	r2, #1
 8007388:	409a      	lsls	r2, r3
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007392:	f043 0202 	orr.w	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800739e:	2204      	movs	r2, #4
 80073a0:	409a      	lsls	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4013      	ands	r3, r2
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d012      	beq.n	80073d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073bc:	2204      	movs	r2, #4
 80073be:	409a      	lsls	r2, r3
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073c8:	f043 0204 	orr.w	r2, r3, #4
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073d4:	2210      	movs	r2, #16
 80073d6:	409a      	lsls	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	4013      	ands	r3, r2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d043      	beq.n	8007468 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d03c      	beq.n	8007468 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073f2:	2210      	movs	r2, #16
 80073f4:	409a      	lsls	r2, r3
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d018      	beq.n	800743a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d108      	bne.n	8007428 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	2b00      	cmp	r3, #0
 800741c:	d024      	beq.n	8007468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
 8007426:	e01f      	b.n	8007468 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01b      	beq.n	8007468 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	4798      	blx	r3
 8007438:	e016      	b.n	8007468 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d107      	bne.n	8007458 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0208 	bic.w	r2, r2, #8
 8007456:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746c:	2220      	movs	r2, #32
 800746e:	409a      	lsls	r2, r3
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4013      	ands	r3, r2
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 808f 	beq.w	8007598 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8087 	beq.w	8007598 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800748e:	2220      	movs	r2, #32
 8007490:	409a      	lsls	r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d136      	bne.n	8007510 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0216 	bic.w	r2, r2, #22
 80074b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	695a      	ldr	r2, [r3, #20]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d103      	bne.n	80074d2 <HAL_DMA_IRQHandler+0x1da>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d007      	beq.n	80074e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0208 	bic.w	r2, r2, #8
 80074e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e6:	223f      	movs	r2, #63	@ 0x3f
 80074e8:	409a      	lsls	r2, r3
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007502:	2b00      	cmp	r3, #0
 8007504:	d07e      	beq.n	8007604 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
        }
        return;
 800750e:	e079      	b.n	8007604 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01d      	beq.n	800755a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10d      	bne.n	8007548 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007530:	2b00      	cmp	r3, #0
 8007532:	d031      	beq.n	8007598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
 800753c:	e02c      	b.n	8007598 <HAL_DMA_IRQHandler+0x2a0>
 800753e:	bf00      	nop
 8007540:	20000020 	.word	0x20000020
 8007544:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d023      	beq.n	8007598 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
 8007558:	e01e      	b.n	8007598 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10f      	bne.n	8007588 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0210 	bic.w	r2, r2, #16
 8007576:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759c:	2b00      	cmp	r3, #0
 800759e:	d032      	beq.n	8007606 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d022      	beq.n	80075f2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2205      	movs	r2, #5
 80075b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f022 0201 	bic.w	r2, r2, #1
 80075c2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d307      	bcc.n	80075e0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1f2      	bne.n	80075c4 <HAL_DMA_IRQHandler+0x2cc>
 80075de:	e000      	b.n	80075e2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80075e0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	4798      	blx	r3
 8007602:	e000      	b.n	8007606 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007604:	bf00      	nop
    }
  }
}
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007640:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	2b40      	cmp	r3, #64	@ 0x40
 8007650:	d108      	bne.n	8007664 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007662:	e007      	b.n	8007674 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	60da      	str	r2, [r3, #12]
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	b2db      	uxtb	r3, r3
 800768e:	3b10      	subs	r3, #16
 8007690:	4a13      	ldr	r2, [pc, #76]	@ (80076e0 <DMA_CalcBaseAndBitshift+0x60>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	091b      	lsrs	r3, r3, #4
 8007698:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800769a:	4a12      	ldr	r2, [pc, #72]	@ (80076e4 <DMA_CalcBaseAndBitshift+0x64>)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b03      	cmp	r3, #3
 80076ac:	d908      	bls.n	80076c0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	4b0c      	ldr	r3, [pc, #48]	@ (80076e8 <DMA_CalcBaseAndBitshift+0x68>)
 80076b6:	4013      	ands	r3, r2
 80076b8:	1d1a      	adds	r2, r3, #4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80076be:	e006      	b.n	80076ce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <DMA_CalcBaseAndBitshift+0x68>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3714      	adds	r7, #20
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	aaaaaaab 	.word	0xaaaaaaab
 80076e4:	0801ca0c 	.word	0x0801ca0c
 80076e8:	fffffc00 	.word	0xfffffc00

080076ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d11f      	bne.n	8007746 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b03      	cmp	r3, #3
 800770a:	d856      	bhi.n	80077ba <DMA_CheckFifoParam+0xce>
 800770c:	a201      	add	r2, pc, #4	@ (adr r2, 8007714 <DMA_CheckFifoParam+0x28>)
 800770e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007712:	bf00      	nop
 8007714:	08007725 	.word	0x08007725
 8007718:	08007737 	.word	0x08007737
 800771c:	08007725 	.word	0x08007725
 8007720:	080077bb 	.word	0x080077bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d046      	beq.n	80077be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007734:	e043      	b.n	80077be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800773e:	d140      	bne.n	80077c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007744:	e03d      	b.n	80077c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800774e:	d121      	bne.n	8007794 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	2b03      	cmp	r3, #3
 8007754:	d837      	bhi.n	80077c6 <DMA_CheckFifoParam+0xda>
 8007756:	a201      	add	r2, pc, #4	@ (adr r2, 800775c <DMA_CheckFifoParam+0x70>)
 8007758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775c:	0800776d 	.word	0x0800776d
 8007760:	08007773 	.word	0x08007773
 8007764:	0800776d 	.word	0x0800776d
 8007768:	08007785 	.word	0x08007785
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	73fb      	strb	r3, [r7, #15]
      break;
 8007770:	e030      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d025      	beq.n	80077ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007782:	e022      	b.n	80077ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007788:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800778c:	d11f      	bne.n	80077ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007792:	e01c      	b.n	80077ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d903      	bls.n	80077a2 <DMA_CheckFifoParam+0xb6>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d003      	beq.n	80077a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80077a0:	e018      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	73fb      	strb	r3, [r7, #15]
      break;
 80077a6:	e015      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00e      	beq.n	80077d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
      break;
 80077b8:	e00b      	b.n	80077d2 <DMA_CheckFifoParam+0xe6>
      break;
 80077ba:	bf00      	nop
 80077bc:	e00a      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077be:	bf00      	nop
 80077c0:	e008      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077c2:	bf00      	nop
 80077c4:	e006      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077c6:	bf00      	nop
 80077c8:	e004      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077ca:	bf00      	nop
 80077cc:	e002      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80077ce:	bf00      	nop
 80077d0:	e000      	b.n	80077d4 <DMA_CheckFifoParam+0xe8>
      break;
 80077d2:	bf00      	nop
    }
  } 
  
  return status; 
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop

080077e4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e039      	b.n	800786a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f7fc fe4c 	bl	80044a8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685a      	ldr	r2, [r3, #4]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007834:	f023 0107 	bic.w	r1, r3, #7
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800784a:	4b0a      	ldr	r3, [pc, #40]	@ (8007874 <HAL_DMA2D_Init+0x90>)
 800784c:	4013      	ands	r3, r2
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	68d1      	ldr	r1, [r2, #12]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6812      	ldr	r2, [r2, #0]
 8007856:	430b      	orrs	r3, r1
 8007858:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	ffffc000 	.word	0xffffc000

08007878 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f003 0301 	and.w	r3, r3, #1
 8007896:	2b00      	cmp	r3, #0
 8007898:	d026      	beq.n	80078e8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d021      	beq.n	80078e8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078b2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b8:	f043 0201 	orr.w	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2201      	movs	r2, #1
 80078c6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2204      	movs	r2, #4
 80078cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d026      	beq.n	8007940 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d021      	beq.n	8007940 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800790a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2220      	movs	r2, #32
 8007912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007918:	f043 0202 	orr.w	r2, r3, #2
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2204      	movs	r2, #4
 8007924:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d026      	beq.n	8007998 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007950:	2b00      	cmp	r3, #0
 8007952:	d021      	beq.n	8007998 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007962:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2208      	movs	r2, #8
 800796a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007970:	f043 0204 	orr.w	r2, r3, #4
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2204      	movs	r2, #4
 800797c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d003      	beq.n	8007998 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d013      	beq.n	80079ca <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00e      	beq.n	80079ca <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079ba:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2204      	movs	r2, #4
 80079c2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f853 	bl	8007a70 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d024      	beq.n	8007a1e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01f      	beq.n	8007a1e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80079ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2202      	movs	r2, #2
 80079f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f003 0310 	and.w	r3, r3, #16
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01f      	beq.n	8007a68 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d01a      	beq.n	8007a68 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a40:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2210      	movs	r2, #16
 8007a48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f80e 	bl	8007a84 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_DMA2D_ConfigLayer+0x20>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e079      	b.n	8007bac <HAL_DMA2D_ConfigLayer+0x114>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	3318      	adds	r3, #24
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8007ae2:	4b35      	ldr	r3, [pc, #212]	@ (8007bb8 <HAL_DMA2D_ConfigLayer+0x120>)
 8007ae4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	2b0a      	cmp	r3, #10
 8007aec:	d003      	beq.n	8007af6 <HAL_DMA2D_ConfigLayer+0x5e>
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b09      	cmp	r3, #9
 8007af4:	d107      	bne.n	8007b06 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e005      	b.n	8007b12 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	061b      	lsls	r3, r3, #24
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d120      	bne.n	8007b5a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	43db      	mvns	r3, r3
 8007b22:	ea02 0103 	and.w	r1, r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	2b0a      	cmp	r3, #10
 8007b40:	d003      	beq.n	8007b4a <HAL_DMA2D_ConfigLayer+0xb2>
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b09      	cmp	r3, #9
 8007b48:	d127      	bne.n	8007b9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	68da      	ldr	r2, [r3, #12]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007b56:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b58:	e01f      	b.n	8007b9a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	69da      	ldr	r2, [r3, #28]
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	43db      	mvns	r3, r3
 8007b64:	ea02 0103 	and.w	r1, r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	2b0a      	cmp	r3, #10
 8007b82:	d003      	beq.n	8007b8c <HAL_DMA2D_ConfigLayer+0xf4>
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	2b09      	cmp	r3, #9
 8007b8a:	d106      	bne.n	8007b9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	68da      	ldr	r2, [r3, #12]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8007b98:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	ff03000f 	.word	0xff03000f

08007bbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e086      	b.n	8007cdc <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d106      	bne.n	8007be6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7fc fc87 	bl	80044f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007be6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ce4 <HAL_ETH_Init+0x128>)
 8007be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bea:	4a3e      	ldr	r2, [pc, #248]	@ (8007ce4 <HAL_ETH_Init+0x128>)
 8007bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bf2:	4b3c      	ldr	r3, [pc, #240]	@ (8007ce4 <HAL_ETH_Init+0x128>)
 8007bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bfa:	60bb      	str	r3, [r7, #8]
 8007bfc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8007ce8 <HAL_ETH_Init+0x12c>)
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	4a39      	ldr	r2, [pc, #228]	@ (8007ce8 <HAL_ETH_Init+0x12c>)
 8007c04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007c08:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007c0a:	4b37      	ldr	r3, [pc, #220]	@ (8007ce8 <HAL_ETH_Init+0x12c>)
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	4935      	ldr	r1, [pc, #212]	@ (8007ce8 <HAL_ETH_Init+0x12c>)
 8007c14:	4313      	orrs	r3, r2
 8007c16:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007c18:	4b33      	ldr	r3, [pc, #204]	@ (8007ce8 <HAL_ETH_Init+0x12c>)
 8007c1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	f043 0301 	orr.w	r3, r3, #1
 8007c2e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007c32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c34:	f7fe fc4c 	bl	80064d0 <HAL_GetTick>
 8007c38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007c3a:	e011      	b.n	8007c60 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007c3c:	f7fe fc48 	bl	80064d0 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007c4a:	d909      	bls.n	8007c60 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2204      	movs	r2, #4
 8007c50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	22e0      	movs	r2, #224	@ 0xe0
 8007c58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e03d      	b.n	8007cdc <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 0301 	and.w	r3, r3, #1
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e4      	bne.n	8007c3c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 f97a 	bl	8007f6c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa25 	bl	80080c8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa7b 	bl	800817a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	461a      	mov	r2, r3
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f9e3 	bl	8008058 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4b0f      	ldr	r3, [pc, #60]	@ (8007cec <HAL_ETH_Init+0x130>)
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007cc6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2210      	movs	r2, #16
 8007cd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	40023800 	.word	0x40023800
 8007ce8:	40013800 	.word	0x40013800
 8007cec:	00020060 	.word	0x00020060

08007cf0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4b53      	ldr	r3, [pc, #332]	@ (8007e54 <ETH_SetMACConfig+0x164>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	7b9b      	ldrb	r3, [r3, #14]
 8007d0e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	7c12      	ldrb	r2, [r2, #16]
 8007d14:	2a00      	cmp	r2, #0
 8007d16:	d102      	bne.n	8007d1e <ETH_SetMACConfig+0x2e>
 8007d18:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007d1c:	e000      	b.n	8007d20 <ETH_SetMACConfig+0x30>
 8007d1e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007d20:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	7c52      	ldrb	r2, [r2, #17]
 8007d26:	2a00      	cmp	r2, #0
 8007d28:	d102      	bne.n	8007d30 <ETH_SetMACConfig+0x40>
 8007d2a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007d2e:	e000      	b.n	8007d32 <ETH_SetMACConfig+0x42>
 8007d30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007d32:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007d38:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	7fdb      	ldrb	r3, [r3, #31]
 8007d3e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007d40:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007d46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	7f92      	ldrb	r2, [r2, #30]
 8007d4c:	2a00      	cmp	r2, #0
 8007d4e:	d102      	bne.n	8007d56 <ETH_SetMACConfig+0x66>
 8007d50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007d54:	e000      	b.n	8007d58 <ETH_SetMACConfig+0x68>
 8007d56:	2200      	movs	r2, #0
                        macconf->Speed |
 8007d58:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	7f1b      	ldrb	r3, [r3, #28]
 8007d5e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007d60:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007d66:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	791b      	ldrb	r3, [r3, #4]
 8007d6c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007d6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	d102      	bne.n	8007d80 <ETH_SetMACConfig+0x90>
 8007d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d7e:	e000      	b.n	8007d82 <ETH_SetMACConfig+0x92>
 8007d80:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007d82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	7bdb      	ldrb	r3, [r3, #15]
 8007d88:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007d8a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007d90:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d98:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007db2:	2001      	movs	r0, #1
 8007db4:	f7fe fb98 	bl	80064e8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007dce:	4013      	ands	r3, r2
 8007dd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	d101      	bne.n	8007de6 <ETH_SetMACConfig+0xf6>
 8007de2:	2280      	movs	r2, #128	@ 0x80
 8007de4:	e000      	b.n	8007de8 <ETH_SetMACConfig+0xf8>
 8007de6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007de8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007dee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007df6:	2a01      	cmp	r2, #1
 8007df8:	d101      	bne.n	8007dfe <ETH_SetMACConfig+0x10e>
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	e000      	b.n	8007e00 <ETH_SetMACConfig+0x110>
 8007dfe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007e00:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007e08:	2a01      	cmp	r2, #1
 8007e0a:	d101      	bne.n	8007e10 <ETH_SetMACConfig+0x120>
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	e000      	b.n	8007e12 <ETH_SetMACConfig+0x122>
 8007e10:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007e12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007e1a:	2a01      	cmp	r2, #1
 8007e1c:	d101      	bne.n	8007e22 <ETH_SetMACConfig+0x132>
 8007e1e:	2202      	movs	r2, #2
 8007e20:	e000      	b.n	8007e24 <ETH_SetMACConfig+0x134>
 8007e22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007e24:	4313      	orrs	r3, r2
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	f7fe fb53 	bl	80064e8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	619a      	str	r2, [r3, #24]
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	fd20810f 	.word	0xfd20810f

08007e58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e6a:	699b      	ldr	r3, [r3, #24]
 8007e6c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	4b3d      	ldr	r3, [pc, #244]	@ (8007f68 <ETH_SetDMAConfig+0x110>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	7b1b      	ldrb	r3, [r3, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d102      	bne.n	8007e84 <ETH_SetDMAConfig+0x2c>
 8007e7e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007e82:	e000      	b.n	8007e86 <ETH_SetDMAConfig+0x2e>
 8007e84:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	7b5b      	ldrb	r3, [r3, #13]
 8007e8a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007e8c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	7f52      	ldrb	r2, [r2, #29]
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	d102      	bne.n	8007e9c <ETH_SetDMAConfig+0x44>
 8007e96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e9a:	e000      	b.n	8007e9e <ETH_SetDMAConfig+0x46>
 8007e9c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007e9e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	7b9b      	ldrb	r3, [r3, #14]
 8007ea4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007ea6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007eac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	7f1b      	ldrb	r3, [r3, #28]
 8007eb2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007eb4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	7f9b      	ldrb	r3, [r3, #30]
 8007eba:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007ebc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007ec2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007eca:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007edc:	461a      	mov	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007eea:	699b      	ldr	r3, [r3, #24]
 8007eec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007eee:	2001      	movs	r0, #1
 8007ef0:	f7fe fafa 	bl	80064e8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007efc:	461a      	mov	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	791b      	ldrb	r3, [r3, #4]
 8007f06:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007f0c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8007f12:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8007f18:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f20:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8007f22:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8007f2a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8007f30:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6812      	ldr	r2, [r2, #0]
 8007f36:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007f3e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7fe facb 	bl	80064e8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6013      	str	r3, [r2, #0]
}
 8007f60:	bf00      	nop
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	f8de3f23 	.word	0xf8de3f23

08007f6c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b0a6      	sub	sp, #152	@ 0x98
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8007f80:	2300      	movs	r3, #0
 8007f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007f96:	2301      	movs	r3, #1
 8007f98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007fd4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007fda:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8007fe6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8007fea:	4619      	mov	r1, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f7ff fe7f 	bl	8007cf0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8008000:	2301      	movs	r3, #1
 8008002:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008004:	2300      	movs	r3, #0
 8008006:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800800e:	2300      	movs	r3, #0
 8008010:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008014:	2300      	movs	r3, #0
 8008016:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800801e:	2301      	movs	r3, #1
 8008020:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008022:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008026:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008028:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800802c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800802e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008032:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8008034:	2301      	movs	r3, #1
 8008036:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800803a:	2300      	movs	r3, #0
 800803c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800803e:	2300      	movs	r3, #0
 8008040:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008042:	f107 0308 	add.w	r3, r7, #8
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff ff05 	bl	8007e58 <ETH_SetDMAConfig>
}
 800804e:	bf00      	nop
 8008050:	3798      	adds	r7, #152	@ 0x98
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008058:	b480      	push	{r7}
 800805a:	b087      	sub	sp, #28
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3305      	adds	r3, #5
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	021b      	lsls	r3, r3, #8
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	3204      	adds	r2, #4
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	4313      	orrs	r3, r2
 8008074:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	4b11      	ldr	r3, [pc, #68]	@ (80080c0 <ETH_MACAddressConfig+0x68>)
 800807a:	4413      	add	r3, r2
 800807c:	461a      	mov	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3303      	adds	r3, #3
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	061a      	lsls	r2, r3, #24
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3302      	adds	r3, #2
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	041b      	lsls	r3, r3, #16
 8008092:	431a      	orrs	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3301      	adds	r3, #1
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	021b      	lsls	r3, r3, #8
 800809c:	4313      	orrs	r3, r2
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	7812      	ldrb	r2, [r2, #0]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <ETH_MACAddressConfig+0x6c>)
 80080aa:	4413      	add	r3, r2
 80080ac:	461a      	mov	r2, r3
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	6013      	str	r3, [r2, #0]
}
 80080b2:	bf00      	nop
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	40028040 	.word	0x40028040
 80080c4:	40028044 	.word	0x40028044

080080c8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80080d0:	2300      	movs	r3, #0
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	e03e      	b.n	8008154 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68d9      	ldr	r1, [r3, #12]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	440b      	add	r3, r1
 80080e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	2200      	movs	r2, #0
 80080f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2200      	movs	r2, #0
 80080f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	2200      	movs	r2, #0
 80080fe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008100:	68b9      	ldr	r1, [r7, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	3206      	adds	r2, #6
 8008108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b02      	cmp	r3, #2
 800811c:	d80c      	bhi.n	8008138 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68d9      	ldr	r1, [r3, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	1c5a      	adds	r2, r3, #1
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	00db      	lsls	r3, r3, #3
 800812e:	440b      	add	r3, r1
 8008130:	461a      	mov	r2, r3
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	60da      	str	r2, [r3, #12]
 8008136:	e004      	b.n	8008142 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	461a      	mov	r2, r3
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d9bd      	bls.n	80080d6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68da      	ldr	r2, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800816c:	611a      	str	r2, [r3, #16]
}
 800816e:	bf00      	nop
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800817a:	b480      	push	{r7}
 800817c:	b085      	sub	sp, #20
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	e048      	b.n	800821a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6919      	ldr	r1, [r3, #16]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	00db      	lsls	r3, r3, #3
 8008196:	440b      	add	r3, r1
 8008198:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2200      	movs	r2, #0
 800819e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	2200      	movs	r2, #0
 80081a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	2200      	movs	r2, #0
 80081aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	2200      	movs	r2, #0
 80081b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2200      	movs	r2, #0
 80081b6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2200      	movs	r2, #0
 80081bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80081c4:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80081de:	68b9      	ldr	r1, [r7, #8]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	3212      	adds	r2, #18
 80081e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d80c      	bhi.n	800820a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6919      	ldr	r1, [r3, #16]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	4613      	mov	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	4413      	add	r3, r2
 80081fe:	00db      	lsls	r3, r3, #3
 8008200:	440b      	add	r3, r1
 8008202:	461a      	mov	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	60da      	str	r2, [r3, #12]
 8008208:	e004      	b.n	8008214 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	461a      	mov	r2, r3
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3301      	adds	r3, #1
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b03      	cmp	r3, #3
 800821e:	d9b3      	bls.n	8008188 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691a      	ldr	r2, [r3, #16]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800824a:	60da      	str	r2, [r3, #12]
}
 800824c:	bf00      	nop
 800824e:	3714      	adds	r7, #20
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008258:	b480      	push	{r7}
 800825a:	b089      	sub	sp, #36	@ 0x24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008262:	2300      	movs	r3, #0
 8008264:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008266:	2300      	movs	r3, #0
 8008268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800826e:	2300      	movs	r3, #0
 8008270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8008272:	2300      	movs	r3, #0
 8008274:	61fb      	str	r3, [r7, #28]
 8008276:	e175      	b.n	8008564 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008278:	2201      	movs	r2, #1
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	4013      	ands	r3, r2
 800828a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	429a      	cmp	r2, r3
 8008292:	f040 8164 	bne.w	800855e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d005      	beq.n	80082ae <HAL_GPIO_Init+0x56>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d130      	bne.n	8008310 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	2203      	movs	r2, #3
 80082ba:	fa02 f303 	lsl.w	r3, r2, r3
 80082be:	43db      	mvns	r3, r3
 80082c0:	69ba      	ldr	r2, [r7, #24]
 80082c2:	4013      	ands	r3, r2
 80082c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68da      	ldr	r2, [r3, #12]
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80082e4:	2201      	movs	r2, #1
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	4013      	ands	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	091b      	lsrs	r3, r3, #4
 80082fa:	f003 0201 	and.w	r2, r3, #1
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	fa02 f303 	lsl.w	r3, r2, r3
 8008304:	69ba      	ldr	r2, [r7, #24]
 8008306:	4313      	orrs	r3, r2
 8008308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f003 0303 	and.w	r3, r3, #3
 8008318:	2b03      	cmp	r3, #3
 800831a:	d017      	beq.n	800834c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68db      	ldr	r3, [r3, #12]
 8008320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	2203      	movs	r2, #3
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	43db      	mvns	r3, r3
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	4013      	ands	r3, r2
 8008332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	689a      	ldr	r2, [r3, #8]
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	4313      	orrs	r3, r2
 8008344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f003 0303 	and.w	r3, r3, #3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d123      	bne.n	80083a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	08da      	lsrs	r2, r3, #3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3208      	adds	r2, #8
 8008360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f003 0307 	and.w	r3, r3, #7
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	220f      	movs	r2, #15
 8008370:	fa02 f303 	lsl.w	r3, r2, r3
 8008374:	43db      	mvns	r3, r3
 8008376:	69ba      	ldr	r2, [r7, #24]
 8008378:	4013      	ands	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	691a      	ldr	r2, [r3, #16]
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	f003 0307 	and.w	r3, r3, #7
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	4313      	orrs	r3, r2
 8008390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	08da      	lsrs	r2, r3, #3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	3208      	adds	r2, #8
 800839a:	69b9      	ldr	r1, [r7, #24]
 800839c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	2203      	movs	r2, #3
 80083ac:	fa02 f303 	lsl.w	r3, r2, r3
 80083b0:	43db      	mvns	r3, r3
 80083b2:	69ba      	ldr	r2, [r7, #24]
 80083b4:	4013      	ands	r3, r2
 80083b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	f003 0203 	and.w	r2, r3, #3
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	005b      	lsls	r3, r3, #1
 80083c4:	fa02 f303 	lsl.w	r3, r2, r3
 80083c8:	69ba      	ldr	r2, [r7, #24]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80be 	beq.w	800855e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80083e2:	4b66      	ldr	r3, [pc, #408]	@ (800857c <HAL_GPIO_Init+0x324>)
 80083e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e6:	4a65      	ldr	r2, [pc, #404]	@ (800857c <HAL_GPIO_Init+0x324>)
 80083e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80083ee:	4b63      	ldr	r3, [pc, #396]	@ (800857c <HAL_GPIO_Init+0x324>)
 80083f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80083fa:	4a61      	ldr	r2, [pc, #388]	@ (8008580 <HAL_GPIO_Init+0x328>)
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	089b      	lsrs	r3, r3, #2
 8008400:	3302      	adds	r3, #2
 8008402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008406:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	220f      	movs	r2, #15
 8008412:	fa02 f303 	lsl.w	r3, r2, r3
 8008416:	43db      	mvns	r3, r3
 8008418:	69ba      	ldr	r2, [r7, #24]
 800841a:	4013      	ands	r3, r2
 800841c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a58      	ldr	r2, [pc, #352]	@ (8008584 <HAL_GPIO_Init+0x32c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d037      	beq.n	8008496 <HAL_GPIO_Init+0x23e>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a57      	ldr	r2, [pc, #348]	@ (8008588 <HAL_GPIO_Init+0x330>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d031      	beq.n	8008492 <HAL_GPIO_Init+0x23a>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a56      	ldr	r2, [pc, #344]	@ (800858c <HAL_GPIO_Init+0x334>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d02b      	beq.n	800848e <HAL_GPIO_Init+0x236>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a55      	ldr	r2, [pc, #340]	@ (8008590 <HAL_GPIO_Init+0x338>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d025      	beq.n	800848a <HAL_GPIO_Init+0x232>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a54      	ldr	r2, [pc, #336]	@ (8008594 <HAL_GPIO_Init+0x33c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d01f      	beq.n	8008486 <HAL_GPIO_Init+0x22e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a53      	ldr	r2, [pc, #332]	@ (8008598 <HAL_GPIO_Init+0x340>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d019      	beq.n	8008482 <HAL_GPIO_Init+0x22a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a52      	ldr	r2, [pc, #328]	@ (800859c <HAL_GPIO_Init+0x344>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d013      	beq.n	800847e <HAL_GPIO_Init+0x226>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a51      	ldr	r2, [pc, #324]	@ (80085a0 <HAL_GPIO_Init+0x348>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00d      	beq.n	800847a <HAL_GPIO_Init+0x222>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a50      	ldr	r2, [pc, #320]	@ (80085a4 <HAL_GPIO_Init+0x34c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d007      	beq.n	8008476 <HAL_GPIO_Init+0x21e>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a4f      	ldr	r2, [pc, #316]	@ (80085a8 <HAL_GPIO_Init+0x350>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d101      	bne.n	8008472 <HAL_GPIO_Init+0x21a>
 800846e:	2309      	movs	r3, #9
 8008470:	e012      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008472:	230a      	movs	r3, #10
 8008474:	e010      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008476:	2308      	movs	r3, #8
 8008478:	e00e      	b.n	8008498 <HAL_GPIO_Init+0x240>
 800847a:	2307      	movs	r3, #7
 800847c:	e00c      	b.n	8008498 <HAL_GPIO_Init+0x240>
 800847e:	2306      	movs	r3, #6
 8008480:	e00a      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008482:	2305      	movs	r3, #5
 8008484:	e008      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008486:	2304      	movs	r3, #4
 8008488:	e006      	b.n	8008498 <HAL_GPIO_Init+0x240>
 800848a:	2303      	movs	r3, #3
 800848c:	e004      	b.n	8008498 <HAL_GPIO_Init+0x240>
 800848e:	2302      	movs	r3, #2
 8008490:	e002      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008492:	2301      	movs	r3, #1
 8008494:	e000      	b.n	8008498 <HAL_GPIO_Init+0x240>
 8008496:	2300      	movs	r3, #0
 8008498:	69fa      	ldr	r2, [r7, #28]
 800849a:	f002 0203 	and.w	r2, r2, #3
 800849e:	0092      	lsls	r2, r2, #2
 80084a0:	4093      	lsls	r3, r2
 80084a2:	69ba      	ldr	r2, [r7, #24]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80084a8:	4935      	ldr	r1, [pc, #212]	@ (8008580 <HAL_GPIO_Init+0x328>)
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	089b      	lsrs	r3, r3, #2
 80084ae:	3302      	adds	r3, #2
 80084b0:	69ba      	ldr	r2, [r7, #24]
 80084b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80084b6:	4b3d      	ldr	r3, [pc, #244]	@ (80085ac <HAL_GPIO_Init+0x354>)
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	43db      	mvns	r3, r3
 80084c0:	69ba      	ldr	r2, [r7, #24]
 80084c2:	4013      	ands	r3, r2
 80084c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80084da:	4a34      	ldr	r2, [pc, #208]	@ (80085ac <HAL_GPIO_Init+0x354>)
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80084e0:	4b32      	ldr	r3, [pc, #200]	@ (80085ac <HAL_GPIO_Init+0x354>)
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	43db      	mvns	r3, r3
 80084ea:	69ba      	ldr	r2, [r7, #24]
 80084ec:	4013      	ands	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80084fc:	69ba      	ldr	r2, [r7, #24]
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	4313      	orrs	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008504:	4a29      	ldr	r2, [pc, #164]	@ (80085ac <HAL_GPIO_Init+0x354>)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800850a:	4b28      	ldr	r3, [pc, #160]	@ (80085ac <HAL_GPIO_Init+0x354>)
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	43db      	mvns	r3, r3
 8008514:	69ba      	ldr	r2, [r7, #24]
 8008516:	4013      	ands	r3, r2
 8008518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800852e:	4a1f      	ldr	r2, [pc, #124]	@ (80085ac <HAL_GPIO_Init+0x354>)
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008534:	4b1d      	ldr	r3, [pc, #116]	@ (80085ac <HAL_GPIO_Init+0x354>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	43db      	mvns	r3, r3
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	4013      	ands	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d003      	beq.n	8008558 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	4313      	orrs	r3, r2
 8008556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008558:	4a14      	ldr	r2, [pc, #80]	@ (80085ac <HAL_GPIO_Init+0x354>)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	3301      	adds	r3, #1
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	2b0f      	cmp	r3, #15
 8008568:	f67f ae86 	bls.w	8008278 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	3724      	adds	r7, #36	@ 0x24
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	40023800 	.word	0x40023800
 8008580:	40013800 	.word	0x40013800
 8008584:	40020000 	.word	0x40020000
 8008588:	40020400 	.word	0x40020400
 800858c:	40020800 	.word	0x40020800
 8008590:	40020c00 	.word	0x40020c00
 8008594:	40021000 	.word	0x40021000
 8008598:	40021400 	.word	0x40021400
 800859c:	40021800 	.word	0x40021800
 80085a0:	40021c00 	.word	0x40021c00
 80085a4:	40022000 	.word	0x40022000
 80085a8:	40022400 	.word	0x40022400
 80085ac:	40013c00 	.word	0x40013c00

080085b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	887b      	ldrh	r3, [r7, #2]
 80085c2:	4013      	ands	r3, r2
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085c8:	2301      	movs	r3, #1
 80085ca:	73fb      	strb	r3, [r7, #15]
 80085cc:	e001      	b.n	80085d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	807b      	strh	r3, [r7, #2]
 80085ec:	4613      	mov	r3, r2
 80085ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80085f0:	787b      	ldrb	r3, [r7, #1]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d003      	beq.n	80085fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085f6:	887a      	ldrh	r2, [r7, #2]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80085fc:	e003      	b.n	8008606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80085fe:	887b      	ldrh	r3, [r7, #2]
 8008600:	041a      	lsls	r2, r3, #16
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	619a      	str	r2, [r3, #24]
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008612:	b580      	push	{r7, lr}
 8008614:	b086      	sub	sp, #24
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4618      	mov	r0, r3
 800862a:	f009 f951 	bl	80118d0 <USB_GetMode>
 800862e:	4603      	mov	r3, r0
 8008630:	2b01      	cmp	r3, #1
 8008632:	f040 80fb 	bne.w	800882c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4618      	mov	r0, r3
 800863c:	f009 f914 	bl	8011868 <USB_ReadInterrupts>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 80f1 	beq.w	800882a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f009 f90b 	bl	8011868 <USB_ReadInterrupts>
 8008652:	4603      	mov	r3, r0
 8008654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008658:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800865c:	d104      	bne.n	8008668 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8008666:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4618      	mov	r0, r3
 800866e:	f009 f8fb 	bl	8011868 <USB_ReadInterrupts>
 8008672:	4603      	mov	r3, r0
 8008674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800867c:	d104      	bne.n	8008688 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008686:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4618      	mov	r0, r3
 800868e:	f009 f8eb 	bl	8011868 <USB_ReadInterrupts>
 8008692:	4603      	mov	r3, r0
 8008694:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008698:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800869c:	d104      	bne.n	80086a8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80086a6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f009 f8db 	bl	8011868 <USB_ReadInterrupts>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f003 0302 	and.w	r3, r3, #2
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d103      	bne.n	80086c4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2202      	movs	r2, #2
 80086c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f009 f8cd 	bl	8011868 <USB_ReadInterrupts>
 80086ce:	4603      	mov	r3, r0
 80086d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086d8:	d120      	bne.n	800871c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80086e2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d113      	bne.n	800871c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80086f4:	2110      	movs	r1, #16
 80086f6:	6938      	ldr	r0, [r7, #16]
 80086f8:	f008 fffe 	bl	80116f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80086fc:	6938      	ldr	r0, [r7, #16]
 80086fe:	f009 f82d 	bl	801175c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	7a5b      	ldrb	r3, [r3, #9]
 8008706:	2b02      	cmp	r3, #2
 8008708:	d105      	bne.n	8008716 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2101      	movs	r1, #1
 8008710:	4618      	mov	r0, r3
 8008712:	f009 f8eb 	bl	80118ec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f00e ffd8 	bl	80176cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f009 f8a1 	bl	8011868 <USB_ReadInterrupts>
 8008726:	4603      	mov	r3, r0
 8008728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800872c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008730:	d102      	bne.n	8008738 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 fca1 	bl	800a07a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f009 f893 	bl	8011868 <USB_ReadInterrupts>
 8008742:	4603      	mov	r3, r0
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b08      	cmp	r3, #8
 800874a:	d106      	bne.n	800875a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f00e ffa1 	bl	8017694 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2208      	movs	r2, #8
 8008758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f009 f882 	bl	8011868 <USB_ReadInterrupts>
 8008764:	4603      	mov	r3, r0
 8008766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800876a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800876e:	d139      	bne.n	80087e4 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4618      	mov	r0, r3
 8008776:	f009 f8f6 	bl	8011966 <USB_HC_ReadInterrupt>
 800877a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
 8008780:	e025      	b.n	80087ce <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	fa22 f303 	lsr.w	r3, r2, r3
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d018      	beq.n	80087c8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087ac:	d106      	bne.n	80087bc <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f859 	bl	800886c <HCD_HC_IN_IRQHandler>
 80087ba:	e005      	b.n	80087c8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	4619      	mov	r1, r3
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 febb 	bl	800953e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	3301      	adds	r3, #1
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	795b      	ldrb	r3, [r3, #5]
 80087d2:	461a      	mov	r2, r3
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d3d3      	bcc.n	8008782 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80087e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f009 f83d 	bl	8011868 <USB_ReadInterrupts>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d101      	bne.n	80087fc <HAL_HCD_IRQHandler+0x1ea>
 80087f8:	2301      	movs	r3, #1
 80087fa:	e000      	b.n	80087fe <HAL_HCD_IRQHandler+0x1ec>
 80087fc:	2300      	movs	r3, #0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d014      	beq.n	800882c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	699a      	ldr	r2, [r3, #24]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0210 	bic.w	r2, r2, #16
 8008810:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f001 fb52 	bl	8009ebc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0210 	orr.w	r2, r2, #16
 8008826:	619a      	str	r2, [r3, #24]
 8008828:	e000      	b.n	800882c <HAL_HCD_IRQHandler+0x21a>
      return;
 800882a:	bf00      	nop
    }
  }
}
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_HCD_Stop+0x16>
 8008844:	2302      	movs	r3, #2
 8008846:	e00d      	b.n	8008864 <HAL_HCD_Stop+0x32>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4618      	mov	r0, r3
 8008856:	f009 f9b7 	bl	8011bc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b086      	sub	sp, #24
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	4611      	mov	r1, r2
 800888a:	4618      	mov	r0, r3
 800888c:	f008 ffff 	bl	801188e <USB_ReadChInterrupts>
 8008890:	4603      	mov	r3, r0
 8008892:	f003 0304 	and.w	r3, r3, #4
 8008896:	2b04      	cmp	r3, #4
 8008898:	d11a      	bne.n	80088d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	015a      	lsls	r2, r3, #5
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	4413      	add	r3, r2
 80088a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088a6:	461a      	mov	r2, r3
 80088a8:	2304      	movs	r3, #4
 80088aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80088ac:	78fa      	ldrb	r2, [r7, #3]
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	4613      	mov	r3, r2
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	440b      	add	r3, r1
 80088ba:	334d      	adds	r3, #77	@ 0x4d
 80088bc:	2207      	movs	r2, #7
 80088be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	78fa      	ldrb	r2, [r7, #3]
 80088c6:	4611      	mov	r1, r2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f009 f85d 	bl	8011988 <USB_HC_Halt>
 80088ce:	e09e      	b.n	8008a0e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	4611      	mov	r1, r2
 80088d8:	4618      	mov	r0, r3
 80088da:	f008 ffd8 	bl	801188e <USB_ReadChInterrupts>
 80088de:	4603      	mov	r3, r0
 80088e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088e8:	d11b      	bne.n	8008922 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80088ea:	78fb      	ldrb	r3, [r7, #3]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088f6:	461a      	mov	r2, r3
 80088f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80088fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80088fe:	78fa      	ldrb	r2, [r7, #3]
 8008900:	6879      	ldr	r1, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	1a9b      	subs	r3, r3, r2
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	440b      	add	r3, r1
 800890c:	334d      	adds	r3, #77	@ 0x4d
 800890e:	2208      	movs	r2, #8
 8008910:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	78fa      	ldrb	r2, [r7, #3]
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f009 f834 	bl	8011988 <USB_HC_Halt>
 8008920:	e075      	b.n	8008a0e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	78fa      	ldrb	r2, [r7, #3]
 8008928:	4611      	mov	r1, r2
 800892a:	4618      	mov	r0, r3
 800892c:	f008 ffaf 	bl	801188e <USB_ReadChInterrupts>
 8008930:	4603      	mov	r3, r0
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b08      	cmp	r3, #8
 8008938:	d11a      	bne.n	8008970 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800893a:	78fb      	ldrb	r3, [r7, #3]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008946:	461a      	mov	r2, r3
 8008948:	2308      	movs	r3, #8
 800894a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800894c:	78fa      	ldrb	r2, [r7, #3]
 800894e:	6879      	ldr	r1, [r7, #4]
 8008950:	4613      	mov	r3, r2
 8008952:	011b      	lsls	r3, r3, #4
 8008954:	1a9b      	subs	r3, r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	440b      	add	r3, r1
 800895a:	334d      	adds	r3, #77	@ 0x4d
 800895c:	2206      	movs	r2, #6
 800895e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	78fa      	ldrb	r2, [r7, #3]
 8008966:	4611      	mov	r1, r2
 8008968:	4618      	mov	r0, r3
 800896a:	f009 f80d 	bl	8011988 <USB_HC_Halt>
 800896e:	e04e      	b.n	8008a0e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	78fa      	ldrb	r2, [r7, #3]
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f008 ff88 	bl	801188e <USB_ReadChInterrupts>
 800897e:	4603      	mov	r3, r0
 8008980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008988:	d11b      	bne.n	80089c2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800898a:	78fb      	ldrb	r3, [r7, #3]
 800898c:	015a      	lsls	r2, r3, #5
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	4413      	add	r3, r2
 8008992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008996:	461a      	mov	r2, r3
 8008998:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800899c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800899e:	78fa      	ldrb	r2, [r7, #3]
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	011b      	lsls	r3, r3, #4
 80089a6:	1a9b      	subs	r3, r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	334d      	adds	r3, #77	@ 0x4d
 80089ae:	2209      	movs	r2, #9
 80089b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	78fa      	ldrb	r2, [r7, #3]
 80089b8:	4611      	mov	r1, r2
 80089ba:	4618      	mov	r0, r3
 80089bc:	f008 ffe4 	bl	8011988 <USB_HC_Halt>
 80089c0:	e025      	b.n	8008a0e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	4611      	mov	r1, r2
 80089ca:	4618      	mov	r0, r3
 80089cc:	f008 ff5f 	bl	801188e <USB_ReadChInterrupts>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d6:	2b80      	cmp	r3, #128	@ 0x80
 80089d8:	d119      	bne.n	8008a0e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e6:	461a      	mov	r2, r3
 80089e8:	2380      	movs	r3, #128	@ 0x80
 80089ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80089ec:	78fa      	ldrb	r2, [r7, #3]
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	4613      	mov	r3, r2
 80089f2:	011b      	lsls	r3, r3, #4
 80089f4:	1a9b      	subs	r3, r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	334d      	adds	r3, #77	@ 0x4d
 80089fc:	2207      	movs	r2, #7
 80089fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	78fa      	ldrb	r2, [r7, #3]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f008 ffbd 	bl	8011988 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	78fa      	ldrb	r2, [r7, #3]
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f008 ff39 	bl	801188e <USB_ReadChInterrupts>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a26:	d112      	bne.n	8008a4e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	4611      	mov	r1, r2
 8008a30:	4618      	mov	r0, r3
 8008a32:	f008 ffa9 	bl	8011988 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008a36:	78fb      	ldrb	r3, [r7, #3]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a42:	461a      	mov	r2, r3
 8008a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008a48:	6093      	str	r3, [r2, #8]
 8008a4a:	f000 bd75 	b.w	8009538 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	78fa      	ldrb	r2, [r7, #3]
 8008a54:	4611      	mov	r1, r2
 8008a56:	4618      	mov	r0, r3
 8008a58:	f008 ff19 	bl	801188e <USB_ReadChInterrupts>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f003 0301 	and.w	r3, r3, #1
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	f040 8128 	bne.w	8008cb8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a74:	461a      	mov	r2, r3
 8008a76:	2320      	movs	r3, #32
 8008a78:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008a7a:	78fa      	ldrb	r2, [r7, #3]
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	011b      	lsls	r3, r3, #4
 8008a82:	1a9b      	subs	r3, r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	331b      	adds	r3, #27
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d119      	bne.n	8008ac4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008a90:	78fa      	ldrb	r2, [r7, #3]
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4613      	mov	r3, r2
 8008a96:	011b      	lsls	r3, r3, #4
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	331b      	adds	r3, #27
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	78fa      	ldrb	r2, [r7, #3]
 8008ab4:	0151      	lsls	r1, r2, #5
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	440a      	add	r2, r1
 8008aba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ac2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	799b      	ldrb	r3, [r3, #6]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d01b      	beq.n	8008b04 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008acc:	78fa      	ldrb	r2, [r7, #3]
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	4613      	mov	r3, r2
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	1a9b      	subs	r3, r3, r2
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	440b      	add	r3, r1
 8008ada:	3330      	adds	r3, #48	@ 0x30
 8008adc:	6819      	ldr	r1, [r3, #0]
 8008ade:	78fb      	ldrb	r3, [r7, #3]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	1ac9      	subs	r1, r1, r3
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4613      	mov	r3, r2
 8008af8:	011b      	lsls	r3, r3, #4
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	009b      	lsls	r3, r3, #2
 8008afe:	4403      	add	r3, r0
 8008b00:	3338      	adds	r3, #56	@ 0x38
 8008b02:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8008b04:	78fa      	ldrb	r2, [r7, #3]
 8008b06:	6879      	ldr	r1, [r7, #4]
 8008b08:	4613      	mov	r3, r2
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	1a9b      	subs	r3, r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	440b      	add	r3, r1
 8008b12:	334d      	adds	r3, #77	@ 0x4d
 8008b14:	2201      	movs	r2, #1
 8008b16:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008b18:	78fa      	ldrb	r2, [r7, #3]
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	011b      	lsls	r3, r3, #4
 8008b20:	1a9b      	subs	r3, r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	3344      	adds	r3, #68	@ 0x44
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	4613      	mov	r3, r2
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	1a9b      	subs	r3, r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	440b      	add	r3, r1
 8008b4c:	3326      	adds	r3, #38	@ 0x26
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008b54:	78fa      	ldrb	r2, [r7, #3]
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	011b      	lsls	r3, r3, #4
 8008b5c:	1a9b      	subs	r3, r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	440b      	add	r3, r1
 8008b62:	3326      	adds	r3, #38	@ 0x26
 8008b64:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d110      	bne.n	8008b8c <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f008 ff08 	bl	8011988 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008b78:	78fb      	ldrb	r3, [r7, #3]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b84:	461a      	mov	r2, r3
 8008b86:	2310      	movs	r3, #16
 8008b88:	6093      	str	r3, [r2, #8]
 8008b8a:	e03d      	b.n	8008c08 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008b8c:	78fa      	ldrb	r2, [r7, #3]
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	4613      	mov	r3, r2
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	1a9b      	subs	r3, r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	440b      	add	r3, r1
 8008b9a:	3326      	adds	r3, #38	@ 0x26
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d00a      	beq.n	8008bb8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8008ba2:	78fa      	ldrb	r2, [r7, #3]
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	1a9b      	subs	r3, r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	3326      	adds	r3, #38	@ 0x26
 8008bb2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d127      	bne.n	8008c08 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008bb8:	78fb      	ldrb	r3, [r7, #3]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bd6:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008bd8:	78fa      	ldrb	r2, [r7, #3]
 8008bda:	6879      	ldr	r1, [r7, #4]
 8008bdc:	4613      	mov	r3, r2
 8008bde:	011b      	lsls	r3, r3, #4
 8008be0:	1a9b      	subs	r3, r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	440b      	add	r3, r1
 8008be6:	334c      	adds	r3, #76	@ 0x4c
 8008be8:	2201      	movs	r2, #1
 8008bea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008bec:	78fa      	ldrb	r2, [r7, #3]
 8008bee:	6879      	ldr	r1, [r7, #4]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	011b      	lsls	r3, r3, #4
 8008bf4:	1a9b      	subs	r3, r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	334c      	adds	r3, #76	@ 0x4c
 8008bfc:	781a      	ldrb	r2, [r3, #0]
 8008bfe:	78fb      	ldrb	r3, [r7, #3]
 8008c00:	4619      	mov	r1, r3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f00e fd70 	bl	80176e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	799b      	ldrb	r3, [r3, #6]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d13b      	bne.n	8008c88 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	4613      	mov	r3, r2
 8008c16:	011b      	lsls	r3, r3, #4
 8008c18:	1a9b      	subs	r3, r3, r2
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	440b      	add	r3, r1
 8008c1e:	3338      	adds	r3, #56	@ 0x38
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	78fa      	ldrb	r2, [r7, #3]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	4613      	mov	r3, r2
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	4403      	add	r3, r0
 8008c30:	3328      	adds	r3, #40	@ 0x28
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	440b      	add	r3, r1
 8008c36:	1e59      	subs	r1, r3, #1
 8008c38:	78fa      	ldrb	r2, [r7, #3]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4403      	add	r3, r0
 8008c46:	3328      	adds	r3, #40	@ 0x28
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 8470 	beq.w	8009538 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	6879      	ldr	r1, [r7, #4]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	011b      	lsls	r3, r3, #4
 8008c60:	1a9b      	subs	r3, r3, r2
 8008c62:	009b      	lsls	r3, r3, #2
 8008c64:	440b      	add	r3, r1
 8008c66:	333c      	adds	r3, #60	@ 0x3c
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	78fa      	ldrb	r2, [r7, #3]
 8008c6c:	f083 0301 	eor.w	r3, r3, #1
 8008c70:	b2d8      	uxtb	r0, r3
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	4613      	mov	r3, r2
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	1a9b      	subs	r3, r3, r2
 8008c7a:	009b      	lsls	r3, r3, #2
 8008c7c:	440b      	add	r3, r1
 8008c7e:	333c      	adds	r3, #60	@ 0x3c
 8008c80:	4602      	mov	r2, r0
 8008c82:	701a      	strb	r2, [r3, #0]
 8008c84:	f000 bc58 	b.w	8009538 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008c88:	78fa      	ldrb	r2, [r7, #3]
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	4613      	mov	r3, r2
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	1a9b      	subs	r3, r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	440b      	add	r3, r1
 8008c96:	333c      	adds	r3, #60	@ 0x3c
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	78fa      	ldrb	r2, [r7, #3]
 8008c9c:	f083 0301 	eor.w	r3, r3, #1
 8008ca0:	b2d8      	uxtb	r0, r3
 8008ca2:	6879      	ldr	r1, [r7, #4]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	011b      	lsls	r3, r3, #4
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	333c      	adds	r3, #60	@ 0x3c
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	f000 bc40 	b.w	8009538 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f008 fde4 	bl	801188e <USB_ReadChInterrupts>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f003 0320 	and.w	r3, r3, #32
 8008ccc:	2b20      	cmp	r3, #32
 8008cce:	d131      	bne.n	8008d34 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	015a      	lsls	r2, r3, #5
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cdc:	461a      	mov	r2, r3
 8008cde:	2320      	movs	r3, #32
 8008ce0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	6879      	ldr	r1, [r7, #4]
 8008ce6:	4613      	mov	r3, r2
 8008ce8:	011b      	lsls	r3, r3, #4
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	440b      	add	r3, r1
 8008cf0:	331a      	adds	r3, #26
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	f040 841f 	bne.w	8009538 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	011b      	lsls	r3, r3, #4
 8008d02:	1a9b      	subs	r3, r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	331b      	adds	r3, #27
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008d0e:	78fa      	ldrb	r2, [r7, #3]
 8008d10:	6879      	ldr	r1, [r7, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	1a9b      	subs	r3, r3, r2
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	440b      	add	r3, r1
 8008d1c:	334d      	adds	r3, #77	@ 0x4d
 8008d1e:	2203      	movs	r2, #3
 8008d20:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	78fa      	ldrb	r2, [r7, #3]
 8008d28:	4611      	mov	r1, r2
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f008 fe2c 	bl	8011988 <USB_HC_Halt>
 8008d30:	f000 bc02 	b.w	8009538 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	78fa      	ldrb	r2, [r7, #3]
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f008 fda6 	bl	801188e <USB_ReadChInterrupts>
 8008d42:	4603      	mov	r3, r0
 8008d44:	f003 0302 	and.w	r3, r3, #2
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	f040 8305 	bne.w	8009358 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008d4e:	78fb      	ldrb	r3, [r7, #3]
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008d60:	78fa      	ldrb	r2, [r7, #3]
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4613      	mov	r3, r2
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	1a9b      	subs	r3, r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	334d      	adds	r3, #77	@ 0x4d
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d114      	bne.n	8008da0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008d76:	78fa      	ldrb	r2, [r7, #3]
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	011b      	lsls	r3, r3, #4
 8008d7e:	1a9b      	subs	r3, r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	334d      	adds	r3, #77	@ 0x4d
 8008d86:	2202      	movs	r2, #2
 8008d88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008d8a:	78fa      	ldrb	r2, [r7, #3]
 8008d8c:	6879      	ldr	r1, [r7, #4]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	1a9b      	subs	r3, r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	440b      	add	r3, r1
 8008d98:	334c      	adds	r3, #76	@ 0x4c
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	e2cc      	b.n	800933a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008da0:	78fa      	ldrb	r2, [r7, #3]
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4613      	mov	r3, r2
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	1a9b      	subs	r3, r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	440b      	add	r3, r1
 8008dae:	334d      	adds	r3, #77	@ 0x4d
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	2b06      	cmp	r3, #6
 8008db4:	d114      	bne.n	8008de0 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008db6:	78fa      	ldrb	r2, [r7, #3]
 8008db8:	6879      	ldr	r1, [r7, #4]
 8008dba:	4613      	mov	r3, r2
 8008dbc:	011b      	lsls	r3, r3, #4
 8008dbe:	1a9b      	subs	r3, r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	440b      	add	r3, r1
 8008dc4:	334d      	adds	r3, #77	@ 0x4d
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8008dca:	78fa      	ldrb	r2, [r7, #3]
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	011b      	lsls	r3, r3, #4
 8008dd2:	1a9b      	subs	r3, r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	334c      	adds	r3, #76	@ 0x4c
 8008dda:	2205      	movs	r2, #5
 8008ddc:	701a      	strb	r2, [r3, #0]
 8008dde:	e2ac      	b.n	800933a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	6879      	ldr	r1, [r7, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	1a9b      	subs	r3, r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	440b      	add	r3, r1
 8008dee:	334d      	adds	r3, #77	@ 0x4d
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b07      	cmp	r3, #7
 8008df4:	d00b      	beq.n	8008e0e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8008df6:	78fa      	ldrb	r2, [r7, #3]
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	011b      	lsls	r3, r3, #4
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	440b      	add	r3, r1
 8008e04:	334d      	adds	r3, #77	@ 0x4d
 8008e06:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008e08:	2b09      	cmp	r3, #9
 8008e0a:	f040 80a6 	bne.w	8008f5a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	1a9b      	subs	r3, r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	334d      	adds	r3, #77	@ 0x4d
 8008e1e:	2202      	movs	r2, #2
 8008e20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4613      	mov	r3, r2
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	1a9b      	subs	r3, r3, r2
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	440b      	add	r3, r1
 8008e30:	3344      	adds	r3, #68	@ 0x44
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	1c59      	adds	r1, r3, #1
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	4403      	add	r3, r0
 8008e42:	3344      	adds	r3, #68	@ 0x44
 8008e44:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008e46:	78fa      	ldrb	r2, [r7, #3]
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	011b      	lsls	r3, r3, #4
 8008e4e:	1a9b      	subs	r3, r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	440b      	add	r3, r1
 8008e54:	3344      	adds	r3, #68	@ 0x44
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d943      	bls.n	8008ee4 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008e5c:	78fa      	ldrb	r2, [r7, #3]
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	4613      	mov	r3, r2
 8008e62:	011b      	lsls	r3, r3, #4
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	440b      	add	r3, r1
 8008e6a:	3344      	adds	r3, #68	@ 0x44
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8008e70:	78fa      	ldrb	r2, [r7, #3]
 8008e72:	6879      	ldr	r1, [r7, #4]
 8008e74:	4613      	mov	r3, r2
 8008e76:	011b      	lsls	r3, r3, #4
 8008e78:	1a9b      	subs	r3, r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	440b      	add	r3, r1
 8008e7e:	331a      	adds	r3, #26
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d123      	bne.n	8008ece <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	6879      	ldr	r1, [r7, #4]
 8008e8a:	4613      	mov	r3, r2
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	1a9b      	subs	r3, r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	440b      	add	r3, r1
 8008e94:	331b      	adds	r3, #27
 8008e96:	2200      	movs	r2, #0
 8008e98:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8008e9a:	78fa      	ldrb	r2, [r7, #3]
 8008e9c:	6879      	ldr	r1, [r7, #4]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	1a9b      	subs	r3, r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	331c      	adds	r3, #28
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	78fa      	ldrb	r2, [r7, #3]
 8008ebe:	0151      	lsls	r1, r2, #5
 8008ec0:	693a      	ldr	r2, [r7, #16]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ecc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008ece:	78fa      	ldrb	r2, [r7, #3]
 8008ed0:	6879      	ldr	r1, [r7, #4]
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	011b      	lsls	r3, r3, #4
 8008ed6:	1a9b      	subs	r3, r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	440b      	add	r3, r1
 8008edc:	334c      	adds	r3, #76	@ 0x4c
 8008ede:	2204      	movs	r2, #4
 8008ee0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008ee2:	e229      	b.n	8009338 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008ee4:	78fa      	ldrb	r2, [r7, #3]
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	011b      	lsls	r3, r3, #4
 8008eec:	1a9b      	subs	r3, r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	334c      	adds	r3, #76	@ 0x4c
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008ef8:	78fa      	ldrb	r2, [r7, #3]
 8008efa:	6879      	ldr	r1, [r7, #4]
 8008efc:	4613      	mov	r3, r2
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	1a9b      	subs	r3, r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	440b      	add	r3, r1
 8008f06:	3326      	adds	r3, #38	@ 0x26
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008f0e:	78fa      	ldrb	r2, [r7, #3]
 8008f10:	6879      	ldr	r1, [r7, #4]
 8008f12:	4613      	mov	r3, r2
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	1a9b      	subs	r3, r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	440b      	add	r3, r1
 8008f1c:	3326      	adds	r3, #38	@ 0x26
 8008f1e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	f040 8209 	bne.w	8009338 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8008f26:	78fb      	ldrb	r3, [r7, #3]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f3c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f44:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f52:	461a      	mov	r2, r3
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008f58:	e1ee      	b.n	8009338 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	011b      	lsls	r3, r3, #4
 8008f62:	1a9b      	subs	r3, r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	334d      	adds	r3, #77	@ 0x4d
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	2b05      	cmp	r3, #5
 8008f6e:	f040 80c8 	bne.w	8009102 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	1a9b      	subs	r3, r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	334d      	adds	r3, #77	@ 0x4d
 8008f82:	2202      	movs	r2, #2
 8008f84:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8008f86:	78fa      	ldrb	r2, [r7, #3]
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	011b      	lsls	r3, r3, #4
 8008f8e:	1a9b      	subs	r3, r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	331b      	adds	r3, #27
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	f040 81ce 	bne.w	800933a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8008f9e:	78fa      	ldrb	r2, [r7, #3]
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	011b      	lsls	r3, r3, #4
 8008fa6:	1a9b      	subs	r3, r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	440b      	add	r3, r1
 8008fac:	3326      	adds	r3, #38	@ 0x26
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b03      	cmp	r3, #3
 8008fb2:	d16b      	bne.n	800908c <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8008fb4:	78fa      	ldrb	r2, [r7, #3]
 8008fb6:	6879      	ldr	r1, [r7, #4]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	011b      	lsls	r3, r3, #4
 8008fbc:	1a9b      	subs	r3, r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	440b      	add	r3, r1
 8008fc2:	3348      	adds	r3, #72	@ 0x48
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	1c59      	adds	r1, r3, #1
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	1a9b      	subs	r3, r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4403      	add	r3, r0
 8008fd4:	3348      	adds	r3, #72	@ 0x48
 8008fd6:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8008fd8:	78fa      	ldrb	r2, [r7, #3]
 8008fda:	6879      	ldr	r1, [r7, #4]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	1a9b      	subs	r3, r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	440b      	add	r3, r1
 8008fe6:	3348      	adds	r3, #72	@ 0x48
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d943      	bls.n	8009076 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8008fee:	78fa      	ldrb	r2, [r7, #3]
 8008ff0:	6879      	ldr	r1, [r7, #4]
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	011b      	lsls	r3, r3, #4
 8008ff6:	1a9b      	subs	r3, r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	440b      	add	r3, r1
 8008ffc:	3348      	adds	r3, #72	@ 0x48
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8009002:	78fa      	ldrb	r2, [r7, #3]
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	331b      	adds	r3, #27
 8009012:	2200      	movs	r2, #0
 8009014:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8009016:	78fa      	ldrb	r2, [r7, #3]
 8009018:	6879      	ldr	r1, [r7, #4]
 800901a:	4613      	mov	r3, r2
 800901c:	011b      	lsls	r3, r3, #4
 800901e:	1a9b      	subs	r3, r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	440b      	add	r3, r1
 8009024:	3344      	adds	r3, #68	@ 0x44
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d809      	bhi.n	8009040 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	1a9b      	subs	r3, r3, r2
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	440b      	add	r3, r1
 800903a:	331c      	adds	r3, #28
 800903c:	2201      	movs	r2, #1
 800903e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	015a      	lsls	r2, r3, #5
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	4413      	add	r3, r2
 8009048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	78fa      	ldrb	r2, [r7, #3]
 8009050:	0151      	lsls	r1, r2, #5
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	440a      	add	r2, r1
 8009056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800905a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800905e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8009060:	78fa      	ldrb	r2, [r7, #3]
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	4613      	mov	r3, r2
 8009066:	011b      	lsls	r3, r3, #4
 8009068:	1a9b      	subs	r3, r3, r2
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	440b      	add	r3, r1
 800906e:	334c      	adds	r3, #76	@ 0x4c
 8009070:	2204      	movs	r2, #4
 8009072:	701a      	strb	r2, [r3, #0]
 8009074:	e014      	b.n	80090a0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009076:	78fa      	ldrb	r2, [r7, #3]
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	4613      	mov	r3, r2
 800907c:	011b      	lsls	r3, r3, #4
 800907e:	1a9b      	subs	r3, r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	440b      	add	r3, r1
 8009084:	334c      	adds	r3, #76	@ 0x4c
 8009086:	2202      	movs	r2, #2
 8009088:	701a      	strb	r2, [r3, #0]
 800908a:	e009      	b.n	80090a0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800908c:	78fa      	ldrb	r2, [r7, #3]
 800908e:	6879      	ldr	r1, [r7, #4]
 8009090:	4613      	mov	r3, r2
 8009092:	011b      	lsls	r3, r3, #4
 8009094:	1a9b      	subs	r3, r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	334c      	adds	r3, #76	@ 0x4c
 800909c:	2202      	movs	r2, #2
 800909e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	4613      	mov	r3, r2
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	1a9b      	subs	r3, r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	3326      	adds	r3, #38	@ 0x26
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00b      	beq.n	80090ce <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	6879      	ldr	r1, [r7, #4]
 80090ba:	4613      	mov	r3, r2
 80090bc:	011b      	lsls	r3, r3, #4
 80090be:	1a9b      	subs	r3, r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	440b      	add	r3, r1
 80090c4:	3326      	adds	r3, #38	@ 0x26
 80090c6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	f040 8136 	bne.w	800933a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80090ce:	78fb      	ldrb	r3, [r7, #3]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090e4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090ec:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	015a      	lsls	r2, r3, #5
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	4413      	add	r3, r2
 80090f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090fa:	461a      	mov	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6013      	str	r3, [r2, #0]
 8009100:	e11b      	b.n	800933a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	440b      	add	r3, r1
 8009110:	334d      	adds	r3, #77	@ 0x4d
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b03      	cmp	r3, #3
 8009116:	f040 8081 	bne.w	800921c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	6879      	ldr	r1, [r7, #4]
 800911e:	4613      	mov	r3, r2
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	1a9b      	subs	r3, r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	440b      	add	r3, r1
 8009128:	334d      	adds	r3, #77	@ 0x4d
 800912a:	2202      	movs	r2, #2
 800912c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	6879      	ldr	r1, [r7, #4]
 8009132:	4613      	mov	r3, r2
 8009134:	011b      	lsls	r3, r3, #4
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	440b      	add	r3, r1
 800913c:	331b      	adds	r3, #27
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b01      	cmp	r3, #1
 8009142:	f040 80fa 	bne.w	800933a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009146:	78fa      	ldrb	r2, [r7, #3]
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	4613      	mov	r3, r2
 800914c:	011b      	lsls	r3, r3, #4
 800914e:	1a9b      	subs	r3, r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	334c      	adds	r3, #76	@ 0x4c
 8009156:	2202      	movs	r2, #2
 8009158:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	4413      	add	r3, r2
 8009162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	0151      	lsls	r1, r2, #5
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	440a      	add	r2, r1
 8009170:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009178:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800917a:	78fb      	ldrb	r3, [r7, #3]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	4413      	add	r3, r2
 8009182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	0151      	lsls	r1, r2, #5
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	440a      	add	r2, r1
 8009190:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009198:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	78fa      	ldrb	r2, [r7, #3]
 80091aa:	0151      	lsls	r1, r2, #5
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091b4:	f023 0320 	bic.w	r3, r3, #32
 80091b8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	6879      	ldr	r1, [r7, #4]
 80091be:	4613      	mov	r3, r2
 80091c0:	011b      	lsls	r3, r3, #4
 80091c2:	1a9b      	subs	r3, r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	440b      	add	r3, r1
 80091c8:	3326      	adds	r3, #38	@ 0x26
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	4613      	mov	r3, r2
 80091d6:	011b      	lsls	r3, r3, #4
 80091d8:	1a9b      	subs	r3, r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	440b      	add	r3, r1
 80091de:	3326      	adds	r3, #38	@ 0x26
 80091e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	f040 80a9 	bne.w	800933a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80091e8:	78fb      	ldrb	r3, [r7, #3]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009206:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	4413      	add	r3, r2
 8009210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009214:	461a      	mov	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	e08e      	b.n	800933a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800921c:	78fa      	ldrb	r2, [r7, #3]
 800921e:	6879      	ldr	r1, [r7, #4]
 8009220:	4613      	mov	r3, r2
 8009222:	011b      	lsls	r3, r3, #4
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	440b      	add	r3, r1
 800922a:	334d      	adds	r3, #77	@ 0x4d
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b04      	cmp	r3, #4
 8009230:	d143      	bne.n	80092ba <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009232:	78fa      	ldrb	r2, [r7, #3]
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	4613      	mov	r3, r2
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	1a9b      	subs	r3, r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	440b      	add	r3, r1
 8009240:	334d      	adds	r3, #77	@ 0x4d
 8009242:	2202      	movs	r2, #2
 8009244:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	4613      	mov	r3, r2
 800924c:	011b      	lsls	r3, r3, #4
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	334c      	adds	r3, #76	@ 0x4c
 8009256:	2202      	movs	r2, #2
 8009258:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800925a:	78fa      	ldrb	r2, [r7, #3]
 800925c:	6879      	ldr	r1, [r7, #4]
 800925e:	4613      	mov	r3, r2
 8009260:	011b      	lsls	r3, r3, #4
 8009262:	1a9b      	subs	r3, r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	3326      	adds	r3, #38	@ 0x26
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00a      	beq.n	8009286 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009270:	78fa      	ldrb	r2, [r7, #3]
 8009272:	6879      	ldr	r1, [r7, #4]
 8009274:	4613      	mov	r3, r2
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	1a9b      	subs	r3, r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	440b      	add	r3, r1
 800927e:	3326      	adds	r3, #38	@ 0x26
 8009280:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009282:	2b02      	cmp	r3, #2
 8009284:	d159      	bne.n	800933a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	4413      	add	r3, r2
 800928e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800929c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80092a4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092b2:	461a      	mov	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e03f      	b.n	800933a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80092ba:	78fa      	ldrb	r2, [r7, #3]
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	4613      	mov	r3, r2
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	440b      	add	r3, r1
 80092c8:	334d      	adds	r3, #77	@ 0x4d
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b08      	cmp	r3, #8
 80092ce:	d126      	bne.n	800931e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	4613      	mov	r3, r2
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	1a9b      	subs	r3, r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	334d      	adds	r3, #77	@ 0x4d
 80092e0:	2202      	movs	r2, #2
 80092e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80092e4:	78fa      	ldrb	r2, [r7, #3]
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	4613      	mov	r3, r2
 80092ea:	011b      	lsls	r3, r3, #4
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	3344      	adds	r3, #68	@ 0x44
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	1c59      	adds	r1, r3, #1
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	4613      	mov	r3, r2
 80092fc:	011b      	lsls	r3, r3, #4
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4403      	add	r3, r0
 8009304:	3344      	adds	r3, #68	@ 0x44
 8009306:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	011b      	lsls	r3, r3, #4
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	334c      	adds	r3, #76	@ 0x4c
 8009318:	2204      	movs	r2, #4
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e00d      	b.n	800933a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	4613      	mov	r3, r2
 8009324:	011b      	lsls	r3, r3, #4
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	440b      	add	r3, r1
 800932c:	334d      	adds	r3, #77	@ 0x4d
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b02      	cmp	r3, #2
 8009332:	f000 8100 	beq.w	8009536 <HCD_HC_IN_IRQHandler+0xcca>
 8009336:	e000      	b.n	800933a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009338:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	4613      	mov	r3, r2
 8009340:	011b      	lsls	r3, r3, #4
 8009342:	1a9b      	subs	r3, r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	440b      	add	r3, r1
 8009348:	334c      	adds	r3, #76	@ 0x4c
 800934a:	781a      	ldrb	r2, [r3, #0]
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f00e f9c9 	bl	80176e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009356:	e0ef      	b.n	8009538 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	78fa      	ldrb	r2, [r7, #3]
 800935e:	4611      	mov	r1, r2
 8009360:	4618      	mov	r0, r3
 8009362:	f008 fa94 	bl	801188e <USB_ReadChInterrupts>
 8009366:	4603      	mov	r3, r0
 8009368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936c:	2b40      	cmp	r3, #64	@ 0x40
 800936e:	d12f      	bne.n	80093d0 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	4413      	add	r3, r2
 8009378:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800937c:	461a      	mov	r2, r3
 800937e:	2340      	movs	r3, #64	@ 0x40
 8009380:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8009382:	78fa      	ldrb	r2, [r7, #3]
 8009384:	6879      	ldr	r1, [r7, #4]
 8009386:	4613      	mov	r3, r2
 8009388:	011b      	lsls	r3, r3, #4
 800938a:	1a9b      	subs	r3, r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	440b      	add	r3, r1
 8009390:	334d      	adds	r3, #77	@ 0x4d
 8009392:	2205      	movs	r2, #5
 8009394:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009396:	78fa      	ldrb	r2, [r7, #3]
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	4613      	mov	r3, r2
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	440b      	add	r3, r1
 80093a4:	331a      	adds	r3, #26
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d109      	bne.n	80093c0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80093ac:	78fa      	ldrb	r2, [r7, #3]
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4613      	mov	r3, r2
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	440b      	add	r3, r1
 80093ba:	3344      	adds	r3, #68	@ 0x44
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	78fa      	ldrb	r2, [r7, #3]
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f008 fadd 	bl	8011988 <USB_HC_Halt>
 80093ce:	e0b3      	b.n	8009538 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	78fa      	ldrb	r2, [r7, #3]
 80093d6:	4611      	mov	r1, r2
 80093d8:	4618      	mov	r0, r3
 80093da:	f008 fa58 	bl	801188e <USB_ReadChInterrupts>
 80093de:	4603      	mov	r3, r0
 80093e0:	f003 0310 	and.w	r3, r3, #16
 80093e4:	2b10      	cmp	r3, #16
 80093e6:	f040 80a7 	bne.w	8009538 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80093ea:	78fa      	ldrb	r2, [r7, #3]
 80093ec:	6879      	ldr	r1, [r7, #4]
 80093ee:	4613      	mov	r3, r2
 80093f0:	011b      	lsls	r3, r3, #4
 80093f2:	1a9b      	subs	r3, r3, r2
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	440b      	add	r3, r1
 80093f8:	3326      	adds	r3, #38	@ 0x26
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d11b      	bne.n	8009438 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009400:	78fa      	ldrb	r2, [r7, #3]
 8009402:	6879      	ldr	r1, [r7, #4]
 8009404:	4613      	mov	r3, r2
 8009406:	011b      	lsls	r3, r3, #4
 8009408:	1a9b      	subs	r3, r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	440b      	add	r3, r1
 800940e:	3344      	adds	r3, #68	@ 0x44
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8009414:	78fa      	ldrb	r2, [r7, #3]
 8009416:	6879      	ldr	r1, [r7, #4]
 8009418:	4613      	mov	r3, r2
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	334d      	adds	r3, #77	@ 0x4d
 8009424:	2204      	movs	r2, #4
 8009426:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f008 faa9 	bl	8011988 <USB_HC_Halt>
 8009436:	e03f      	b.n	80094b8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009438:	78fa      	ldrb	r2, [r7, #3]
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	4613      	mov	r3, r2
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	1a9b      	subs	r3, r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	440b      	add	r3, r1
 8009446:	3326      	adds	r3, #38	@ 0x26
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800944e:	78fa      	ldrb	r2, [r7, #3]
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	1a9b      	subs	r3, r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3326      	adds	r3, #38	@ 0x26
 800945e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009460:	2b02      	cmp	r3, #2
 8009462:	d129      	bne.n	80094b8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	6879      	ldr	r1, [r7, #4]
 8009468:	4613      	mov	r3, r2
 800946a:	011b      	lsls	r3, r3, #4
 800946c:	1a9b      	subs	r3, r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	440b      	add	r3, r1
 8009472:	3344      	adds	r3, #68	@ 0x44
 8009474:	2200      	movs	r2, #0
 8009476:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	799b      	ldrb	r3, [r3, #6]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d00a      	beq.n	8009496 <HCD_HC_IN_IRQHandler+0xc2a>
 8009480:	78fa      	ldrb	r2, [r7, #3]
 8009482:	6879      	ldr	r1, [r7, #4]
 8009484:	4613      	mov	r3, r2
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	1a9b      	subs	r3, r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	331b      	adds	r3, #27
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d110      	bne.n	80094b8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8009496:	78fa      	ldrb	r2, [r7, #3]
 8009498:	6879      	ldr	r1, [r7, #4]
 800949a:	4613      	mov	r3, r2
 800949c:	011b      	lsls	r3, r3, #4
 800949e:	1a9b      	subs	r3, r3, r2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	440b      	add	r3, r1
 80094a4:	334d      	adds	r3, #77	@ 0x4d
 80094a6:	2204      	movs	r2, #4
 80094a8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	4611      	mov	r1, r2
 80094b2:	4618      	mov	r0, r3
 80094b4:	f008 fa68 	bl	8011988 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80094b8:	78fa      	ldrb	r2, [r7, #3]
 80094ba:	6879      	ldr	r1, [r7, #4]
 80094bc:	4613      	mov	r3, r2
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	1a9b      	subs	r3, r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	440b      	add	r3, r1
 80094c6:	331b      	adds	r3, #27
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d129      	bne.n	8009522 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80094ce:	78fa      	ldrb	r2, [r7, #3]
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	4613      	mov	r3, r2
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	1a9b      	subs	r3, r3, r2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	440b      	add	r3, r1
 80094dc:	331b      	adds	r3, #27
 80094de:	2200      	movs	r2, #0
 80094e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009500:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	015a      	lsls	r2, r3, #5
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	4413      	add	r3, r2
 800950a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	0151      	lsls	r1, r2, #5
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	440a      	add	r2, r1
 8009518:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800951c:	f043 0320 	orr.w	r3, r3, #32
 8009520:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009522:	78fb      	ldrb	r3, [r7, #3]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	4413      	add	r3, r2
 800952a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800952e:	461a      	mov	r2, r3
 8009530:	2310      	movs	r3, #16
 8009532:	6093      	str	r3, [r2, #8]
 8009534:	e000      	b.n	8009538 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8009536:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b086      	sub	sp, #24
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	4611      	mov	r1, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f008 f996 	bl	801188e <USB_ReadChInterrupts>
 8009562:	4603      	mov	r3, r0
 8009564:	f003 0304 	and.w	r3, r3, #4
 8009568:	2b04      	cmp	r3, #4
 800956a:	d11b      	bne.n	80095a4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800956c:	78fb      	ldrb	r3, [r7, #3]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	4413      	add	r3, r2
 8009574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009578:	461a      	mov	r2, r3
 800957a:	2304      	movs	r3, #4
 800957c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800957e:	78fa      	ldrb	r2, [r7, #3]
 8009580:	6879      	ldr	r1, [r7, #4]
 8009582:	4613      	mov	r3, r2
 8009584:	011b      	lsls	r3, r3, #4
 8009586:	1a9b      	subs	r3, r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	440b      	add	r3, r1
 800958c:	334d      	adds	r3, #77	@ 0x4d
 800958e:	2207      	movs	r2, #7
 8009590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	78fa      	ldrb	r2, [r7, #3]
 8009598:	4611      	mov	r1, r2
 800959a:	4618      	mov	r0, r3
 800959c:	f008 f9f4 	bl	8011988 <USB_HC_Halt>
 80095a0:	f000 bc89 	b.w	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	78fa      	ldrb	r2, [r7, #3]
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f008 f96e 	bl	801188e <USB_ReadChInterrupts>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f003 0320 	and.w	r3, r3, #32
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	f040 8082 	bne.w	80096c2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095ca:	461a      	mov	r2, r3
 80095cc:	2320      	movs	r3, #32
 80095ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80095d0:	78fa      	ldrb	r2, [r7, #3]
 80095d2:	6879      	ldr	r1, [r7, #4]
 80095d4:	4613      	mov	r3, r2
 80095d6:	011b      	lsls	r3, r3, #4
 80095d8:	1a9b      	subs	r3, r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	440b      	add	r3, r1
 80095de:	3319      	adds	r3, #25
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d124      	bne.n	8009630 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	011b      	lsls	r3, r3, #4
 80095ee:	1a9b      	subs	r3, r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	440b      	add	r3, r1
 80095f4:	3319      	adds	r3, #25
 80095f6:	2200      	movs	r2, #0
 80095f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80095fa:	78fa      	ldrb	r2, [r7, #3]
 80095fc:	6879      	ldr	r1, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	011b      	lsls	r3, r3, #4
 8009602:	1a9b      	subs	r3, r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	440b      	add	r3, r1
 8009608:	334c      	adds	r3, #76	@ 0x4c
 800960a:	2202      	movs	r2, #2
 800960c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800960e:	78fa      	ldrb	r2, [r7, #3]
 8009610:	6879      	ldr	r1, [r7, #4]
 8009612:	4613      	mov	r3, r2
 8009614:	011b      	lsls	r3, r3, #4
 8009616:	1a9b      	subs	r3, r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	440b      	add	r3, r1
 800961c:	334d      	adds	r3, #77	@ 0x4d
 800961e:	2203      	movs	r2, #3
 8009620:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	78fa      	ldrb	r2, [r7, #3]
 8009628:	4611      	mov	r1, r2
 800962a:	4618      	mov	r0, r3
 800962c:	f008 f9ac 	bl	8011988 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8009630:	78fa      	ldrb	r2, [r7, #3]
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	4613      	mov	r3, r2
 8009636:	011b      	lsls	r3, r3, #4
 8009638:	1a9b      	subs	r3, r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	440b      	add	r3, r1
 800963e:	331a      	adds	r3, #26
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b01      	cmp	r3, #1
 8009644:	f040 8437 	bne.w	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
 8009648:	78fa      	ldrb	r2, [r7, #3]
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	4613      	mov	r3, r2
 800964e:	011b      	lsls	r3, r3, #4
 8009650:	1a9b      	subs	r3, r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	440b      	add	r3, r1
 8009656:	331b      	adds	r3, #27
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f040 842b 	bne.w	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8009660:	78fa      	ldrb	r2, [r7, #3]
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	4613      	mov	r3, r2
 8009666:	011b      	lsls	r3, r3, #4
 8009668:	1a9b      	subs	r3, r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	440b      	add	r3, r1
 800966e:	3326      	adds	r3, #38	@ 0x26
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	2b01      	cmp	r3, #1
 8009674:	d009      	beq.n	800968a <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8009676:	78fa      	ldrb	r2, [r7, #3]
 8009678:	6879      	ldr	r1, [r7, #4]
 800967a:	4613      	mov	r3, r2
 800967c:	011b      	lsls	r3, r3, #4
 800967e:	1a9b      	subs	r3, r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	440b      	add	r3, r1
 8009684:	331b      	adds	r3, #27
 8009686:	2201      	movs	r2, #1
 8009688:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800968a:	78fa      	ldrb	r2, [r7, #3]
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4613      	mov	r3, r2
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	1a9b      	subs	r3, r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	440b      	add	r3, r1
 8009698:	334d      	adds	r3, #77	@ 0x4d
 800969a:	2203      	movs	r2, #3
 800969c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	78fa      	ldrb	r2, [r7, #3]
 80096a4:	4611      	mov	r1, r2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f008 f96e 	bl	8011988 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80096ac:	78fa      	ldrb	r2, [r7, #3]
 80096ae:	6879      	ldr	r1, [r7, #4]
 80096b0:	4613      	mov	r3, r2
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	1a9b      	subs	r3, r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	440b      	add	r3, r1
 80096ba:	3344      	adds	r3, #68	@ 0x44
 80096bc:	2200      	movs	r2, #0
 80096be:	601a      	str	r2, [r3, #0]
 80096c0:	e3f9      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	78fa      	ldrb	r2, [r7, #3]
 80096c8:	4611      	mov	r1, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f008 f8df 	bl	801188e <USB_ReadChInterrupts>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096da:	d111      	bne.n	8009700 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096e8:	461a      	mov	r2, r3
 80096ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80096ee:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	4611      	mov	r1, r2
 80096f8:	4618      	mov	r0, r3
 80096fa:	f008 f945 	bl	8011988 <USB_HC_Halt>
 80096fe:	e3da      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	78fa      	ldrb	r2, [r7, #3]
 8009706:	4611      	mov	r1, r2
 8009708:	4618      	mov	r0, r3
 800970a:	f008 f8c0 	bl	801188e <USB_ReadChInterrupts>
 800970e:	4603      	mov	r3, r0
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	2b01      	cmp	r3, #1
 8009716:	d168      	bne.n	80097ea <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009718:	78fa      	ldrb	r2, [r7, #3]
 800971a:	6879      	ldr	r1, [r7, #4]
 800971c:	4613      	mov	r3, r2
 800971e:	011b      	lsls	r3, r3, #4
 8009720:	1a9b      	subs	r3, r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	440b      	add	r3, r1
 8009726:	3344      	adds	r3, #68	@ 0x44
 8009728:	2200      	movs	r2, #0
 800972a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	78fa      	ldrb	r2, [r7, #3]
 8009732:	4611      	mov	r1, r2
 8009734:	4618      	mov	r0, r3
 8009736:	f008 f8aa 	bl	801188e <USB_ReadChInterrupts>
 800973a:	4603      	mov	r3, r0
 800973c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009740:	2b40      	cmp	r3, #64	@ 0x40
 8009742:	d112      	bne.n	800976a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009744:	78fa      	ldrb	r2, [r7, #3]
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	4613      	mov	r3, r2
 800974a:	011b      	lsls	r3, r3, #4
 800974c:	1a9b      	subs	r3, r3, r2
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	440b      	add	r3, r1
 8009752:	3319      	adds	r3, #25
 8009754:	2201      	movs	r2, #1
 8009756:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	4413      	add	r3, r2
 8009760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009764:	461a      	mov	r2, r3
 8009766:	2340      	movs	r3, #64	@ 0x40
 8009768:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800976a:	78fa      	ldrb	r2, [r7, #3]
 800976c:	6879      	ldr	r1, [r7, #4]
 800976e:	4613      	mov	r3, r2
 8009770:	011b      	lsls	r3, r3, #4
 8009772:	1a9b      	subs	r3, r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	440b      	add	r3, r1
 8009778:	331b      	adds	r3, #27
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d019      	beq.n	80097b4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009780:	78fa      	ldrb	r2, [r7, #3]
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	4613      	mov	r3, r2
 8009786:	011b      	lsls	r3, r3, #4
 8009788:	1a9b      	subs	r3, r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	440b      	add	r3, r1
 800978e:	331b      	adds	r3, #27
 8009790:	2200      	movs	r2, #0
 8009792:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	4413      	add	r3, r2
 800979c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097b2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097c0:	461a      	mov	r2, r3
 80097c2:	2301      	movs	r3, #1
 80097c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80097c6:	78fa      	ldrb	r2, [r7, #3]
 80097c8:	6879      	ldr	r1, [r7, #4]
 80097ca:	4613      	mov	r3, r2
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	1a9b      	subs	r3, r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	440b      	add	r3, r1
 80097d4:	334d      	adds	r3, #77	@ 0x4d
 80097d6:	2201      	movs	r2, #1
 80097d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	78fa      	ldrb	r2, [r7, #3]
 80097e0:	4611      	mov	r1, r2
 80097e2:	4618      	mov	r0, r3
 80097e4:	f008 f8d0 	bl	8011988 <USB_HC_Halt>
 80097e8:	e365      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	78fa      	ldrb	r2, [r7, #3]
 80097f0:	4611      	mov	r1, r2
 80097f2:	4618      	mov	r0, r3
 80097f4:	f008 f84b 	bl	801188e <USB_ReadChInterrupts>
 80097f8:	4603      	mov	r3, r0
 80097fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097fe:	2b40      	cmp	r3, #64	@ 0x40
 8009800:	d139      	bne.n	8009876 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8009802:	78fa      	ldrb	r2, [r7, #3]
 8009804:	6879      	ldr	r1, [r7, #4]
 8009806:	4613      	mov	r3, r2
 8009808:	011b      	lsls	r3, r3, #4
 800980a:	1a9b      	subs	r3, r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	440b      	add	r3, r1
 8009810:	334d      	adds	r3, #77	@ 0x4d
 8009812:	2205      	movs	r2, #5
 8009814:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009816:	78fa      	ldrb	r2, [r7, #3]
 8009818:	6879      	ldr	r1, [r7, #4]
 800981a:	4613      	mov	r3, r2
 800981c:	011b      	lsls	r3, r3, #4
 800981e:	1a9b      	subs	r3, r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	440b      	add	r3, r1
 8009824:	331a      	adds	r3, #26
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d109      	bne.n	8009840 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800982c:	78fa      	ldrb	r2, [r7, #3]
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4613      	mov	r3, r2
 8009832:	011b      	lsls	r3, r3, #4
 8009834:	1a9b      	subs	r3, r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	3319      	adds	r3, #25
 800983c:	2201      	movs	r2, #1
 800983e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8009840:	78fa      	ldrb	r2, [r7, #3]
 8009842:	6879      	ldr	r1, [r7, #4]
 8009844:	4613      	mov	r3, r2
 8009846:	011b      	lsls	r3, r3, #4
 8009848:	1a9b      	subs	r3, r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	3344      	adds	r3, #68	@ 0x44
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	4611      	mov	r1, r2
 800985c:	4618      	mov	r0, r3
 800985e:	f008 f893 	bl	8011988 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009862:	78fb      	ldrb	r3, [r7, #3]
 8009864:	015a      	lsls	r2, r3, #5
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	4413      	add	r3, r2
 800986a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800986e:	461a      	mov	r2, r3
 8009870:	2340      	movs	r3, #64	@ 0x40
 8009872:	6093      	str	r3, [r2, #8]
 8009874:	e31f      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f008 f805 	bl	801188e <USB_ReadChInterrupts>
 8009884:	4603      	mov	r3, r0
 8009886:	f003 0308 	and.w	r3, r3, #8
 800988a:	2b08      	cmp	r3, #8
 800988c:	d11a      	bne.n	80098c4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800988e:	78fb      	ldrb	r3, [r7, #3]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	4413      	add	r3, r2
 8009896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800989a:	461a      	mov	r2, r3
 800989c:	2308      	movs	r3, #8
 800989e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80098a0:	78fa      	ldrb	r2, [r7, #3]
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	1a9b      	subs	r3, r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	334d      	adds	r3, #77	@ 0x4d
 80098b0:	2206      	movs	r2, #6
 80098b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f008 f863 	bl	8011988 <USB_HC_Halt>
 80098c2:	e2f8      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	78fa      	ldrb	r2, [r7, #3]
 80098ca:	4611      	mov	r1, r2
 80098cc:	4618      	mov	r0, r3
 80098ce:	f007 ffde 	bl	801188e <USB_ReadChInterrupts>
 80098d2:	4603      	mov	r3, r0
 80098d4:	f003 0310 	and.w	r3, r3, #16
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d144      	bne.n	8009966 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80098dc:	78fa      	ldrb	r2, [r7, #3]
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	4613      	mov	r3, r2
 80098e2:	011b      	lsls	r3, r3, #4
 80098e4:	1a9b      	subs	r3, r3, r2
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	440b      	add	r3, r1
 80098ea:	3344      	adds	r3, #68	@ 0x44
 80098ec:	2200      	movs	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	4613      	mov	r3, r2
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	1a9b      	subs	r3, r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	334d      	adds	r3, #77	@ 0x4d
 8009900:	2204      	movs	r2, #4
 8009902:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8009904:	78fa      	ldrb	r2, [r7, #3]
 8009906:	6879      	ldr	r1, [r7, #4]
 8009908:	4613      	mov	r3, r2
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	440b      	add	r3, r1
 8009912:	3319      	adds	r3, #25
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d114      	bne.n	8009944 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800991a:	78fa      	ldrb	r2, [r7, #3]
 800991c:	6879      	ldr	r1, [r7, #4]
 800991e:	4613      	mov	r3, r2
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	1a9b      	subs	r3, r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	3318      	adds	r3, #24
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d109      	bne.n	8009944 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009930:	78fa      	ldrb	r2, [r7, #3]
 8009932:	6879      	ldr	r1, [r7, #4]
 8009934:	4613      	mov	r3, r2
 8009936:	011b      	lsls	r3, r3, #4
 8009938:	1a9b      	subs	r3, r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	440b      	add	r3, r1
 800993e:	3319      	adds	r3, #25
 8009940:	2201      	movs	r2, #1
 8009942:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	78fa      	ldrb	r2, [r7, #3]
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f008 f81b 	bl	8011988 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	4413      	add	r3, r2
 800995a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800995e:	461a      	mov	r2, r3
 8009960:	2310      	movs	r3, #16
 8009962:	6093      	str	r3, [r2, #8]
 8009964:	e2a7      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	78fa      	ldrb	r2, [r7, #3]
 800996c:	4611      	mov	r1, r2
 800996e:	4618      	mov	r0, r3
 8009970:	f007 ff8d 	bl	801188e <USB_ReadChInterrupts>
 8009974:	4603      	mov	r3, r0
 8009976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800997a:	2b80      	cmp	r3, #128	@ 0x80
 800997c:	f040 8083 	bne.w	8009a86 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	799b      	ldrb	r3, [r3, #6]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d111      	bne.n	80099ac <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009988:	78fa      	ldrb	r2, [r7, #3]
 800998a:	6879      	ldr	r1, [r7, #4]
 800998c:	4613      	mov	r3, r2
 800998e:	011b      	lsls	r3, r3, #4
 8009990:	1a9b      	subs	r3, r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	334d      	adds	r3, #77	@ 0x4d
 8009998:	2207      	movs	r2, #7
 800999a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	78fa      	ldrb	r2, [r7, #3]
 80099a2:	4611      	mov	r1, r2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f007 ffef 	bl	8011988 <USB_HC_Halt>
 80099aa:	e062      	b.n	8009a72 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80099ac:	78fa      	ldrb	r2, [r7, #3]
 80099ae:	6879      	ldr	r1, [r7, #4]
 80099b0:	4613      	mov	r3, r2
 80099b2:	011b      	lsls	r3, r3, #4
 80099b4:	1a9b      	subs	r3, r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	440b      	add	r3, r1
 80099ba:	3344      	adds	r3, #68	@ 0x44
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	1c59      	adds	r1, r3, #1
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	4613      	mov	r3, r2
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	1a9b      	subs	r3, r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4403      	add	r3, r0
 80099cc:	3344      	adds	r3, #68	@ 0x44
 80099ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80099d0:	78fa      	ldrb	r2, [r7, #3]
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	011b      	lsls	r3, r3, #4
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	3344      	adds	r3, #68	@ 0x44
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d922      	bls.n	8009a2c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	1a9b      	subs	r3, r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	3344      	adds	r3, #68	@ 0x44
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80099fa:	78fa      	ldrb	r2, [r7, #3]
 80099fc:	6879      	ldr	r1, [r7, #4]
 80099fe:	4613      	mov	r3, r2
 8009a00:	011b      	lsls	r3, r3, #4
 8009a02:	1a9b      	subs	r3, r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	334c      	adds	r3, #76	@ 0x4c
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	6879      	ldr	r1, [r7, #4]
 8009a12:	4613      	mov	r3, r2
 8009a14:	011b      	lsls	r3, r3, #4
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	440b      	add	r3, r1
 8009a1c:	334c      	adds	r3, #76	@ 0x4c
 8009a1e:	781a      	ldrb	r2, [r3, #0]
 8009a20:	78fb      	ldrb	r3, [r7, #3]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f00d fe5f 	bl	80176e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009a2a:	e022      	b.n	8009a72 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009a2c:	78fa      	ldrb	r2, [r7, #3]
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	4613      	mov	r3, r2
 8009a32:	011b      	lsls	r3, r3, #4
 8009a34:	1a9b      	subs	r3, r3, r2
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	440b      	add	r3, r1
 8009a3a:	334c      	adds	r3, #76	@ 0x4c
 8009a3c:	2202      	movs	r2, #2
 8009a3e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009a56:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009a5e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009a72:	78fb      	ldrb	r3, [r7, #3]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a7e:	461a      	mov	r2, r3
 8009a80:	2380      	movs	r3, #128	@ 0x80
 8009a82:	6093      	str	r3, [r2, #8]
 8009a84:	e217      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	78fa      	ldrb	r2, [r7, #3]
 8009a8c:	4611      	mov	r1, r2
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f007 fefd 	bl	801188e <USB_ReadChInterrupts>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a9e:	d11b      	bne.n	8009ad8 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009aa0:	78fa      	ldrb	r2, [r7, #3]
 8009aa2:	6879      	ldr	r1, [r7, #4]
 8009aa4:	4613      	mov	r3, r2
 8009aa6:	011b      	lsls	r3, r3, #4
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	440b      	add	r3, r1
 8009aae:	334d      	adds	r3, #77	@ 0x4d
 8009ab0:	2209      	movs	r2, #9
 8009ab2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	4611      	mov	r1, r2
 8009abc:	4618      	mov	r0, r3
 8009abe:	f007 ff63 	bl	8011988 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	015a      	lsls	r2, r3, #5
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	4413      	add	r3, r2
 8009aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ad4:	6093      	str	r3, [r2, #8]
 8009ad6:	e1ee      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	78fa      	ldrb	r2, [r7, #3]
 8009ade:	4611      	mov	r1, r2
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f007 fed4 	bl	801188e <USB_ReadChInterrupts>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	f040 81df 	bne.w	8009eb0 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009af2:	78fb      	ldrb	r3, [r7, #3]
 8009af4:	015a      	lsls	r2, r3, #5
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	4413      	add	r3, r2
 8009afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009afe:	461a      	mov	r2, r3
 8009b00:	2302      	movs	r3, #2
 8009b02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8009b04:	78fa      	ldrb	r2, [r7, #3]
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	4613      	mov	r3, r2
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	1a9b      	subs	r3, r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	440b      	add	r3, r1
 8009b12:	334d      	adds	r3, #77	@ 0x4d
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	f040 8093 	bne.w	8009c42 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009b1c:	78fa      	ldrb	r2, [r7, #3]
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	4613      	mov	r3, r2
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	1a9b      	subs	r3, r3, r2
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	440b      	add	r3, r1
 8009b2a:	334d      	adds	r3, #77	@ 0x4d
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009b30:	78fa      	ldrb	r2, [r7, #3]
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	4613      	mov	r3, r2
 8009b36:	011b      	lsls	r3, r3, #4
 8009b38:	1a9b      	subs	r3, r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	440b      	add	r3, r1
 8009b3e:	334c      	adds	r3, #76	@ 0x4c
 8009b40:	2201      	movs	r2, #1
 8009b42:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009b44:	78fa      	ldrb	r2, [r7, #3]
 8009b46:	6879      	ldr	r1, [r7, #4]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	1a9b      	subs	r3, r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	440b      	add	r3, r1
 8009b52:	3326      	adds	r3, #38	@ 0x26
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d00b      	beq.n	8009b72 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009b5a:	78fa      	ldrb	r2, [r7, #3]
 8009b5c:	6879      	ldr	r1, [r7, #4]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	011b      	lsls	r3, r3, #4
 8009b62:	1a9b      	subs	r3, r3, r2
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	440b      	add	r3, r1
 8009b68:	3326      	adds	r3, #38	@ 0x26
 8009b6a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	f040 8190 	bne.w	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	799b      	ldrb	r3, [r3, #6]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d115      	bne.n	8009ba6 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009b7a:	78fa      	ldrb	r2, [r7, #3]
 8009b7c:	6879      	ldr	r1, [r7, #4]
 8009b7e:	4613      	mov	r3, r2
 8009b80:	011b      	lsls	r3, r3, #4
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	440b      	add	r3, r1
 8009b88:	333d      	adds	r3, #61	@ 0x3d
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	78fa      	ldrb	r2, [r7, #3]
 8009b8e:	f083 0301 	eor.w	r3, r3, #1
 8009b92:	b2d8      	uxtb	r0, r3
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	4613      	mov	r3, r2
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	440b      	add	r3, r1
 8009ba0:	333d      	adds	r3, #61	@ 0x3d
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	799b      	ldrb	r3, [r3, #6]
 8009baa:	2b01      	cmp	r3, #1
 8009bac:	f040 8171 	bne.w	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
 8009bb0:	78fa      	ldrb	r2, [r7, #3]
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	4613      	mov	r3, r2
 8009bb6:	011b      	lsls	r3, r3, #4
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	440b      	add	r3, r1
 8009bbe:	3334      	adds	r3, #52	@ 0x34
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 8165 	beq.w	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009bc8:	78fa      	ldrb	r2, [r7, #3]
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	4613      	mov	r3, r2
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	1a9b      	subs	r3, r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	440b      	add	r3, r1
 8009bd6:	3334      	adds	r3, #52	@ 0x34
 8009bd8:	6819      	ldr	r1, [r3, #0]
 8009bda:	78fa      	ldrb	r2, [r7, #3]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	4613      	mov	r3, r2
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	1a9b      	subs	r3, r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4403      	add	r3, r0
 8009be8:	3328      	adds	r3, #40	@ 0x28
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	440b      	add	r3, r1
 8009bee:	1e59      	subs	r1, r3, #1
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	011b      	lsls	r3, r3, #4
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4403      	add	r3, r0
 8009bfe:	3328      	adds	r3, #40	@ 0x28
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c06:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f003 0301 	and.w	r3, r3, #1
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 813f 	beq.w	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8009c14:	78fa      	ldrb	r2, [r7, #3]
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	1a9b      	subs	r3, r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	440b      	add	r3, r1
 8009c22:	333d      	adds	r3, #61	@ 0x3d
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	78fa      	ldrb	r2, [r7, #3]
 8009c28:	f083 0301 	eor.w	r3, r3, #1
 8009c2c:	b2d8      	uxtb	r0, r3
 8009c2e:	6879      	ldr	r1, [r7, #4]
 8009c30:	4613      	mov	r3, r2
 8009c32:	011b      	lsls	r3, r3, #4
 8009c34:	1a9b      	subs	r3, r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	440b      	add	r3, r1
 8009c3a:	333d      	adds	r3, #61	@ 0x3d
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	701a      	strb	r2, [r3, #0]
 8009c40:	e127      	b.n	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009c42:	78fa      	ldrb	r2, [r7, #3]
 8009c44:	6879      	ldr	r1, [r7, #4]
 8009c46:	4613      	mov	r3, r2
 8009c48:	011b      	lsls	r3, r3, #4
 8009c4a:	1a9b      	subs	r3, r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	440b      	add	r3, r1
 8009c50:	334d      	adds	r3, #77	@ 0x4d
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b03      	cmp	r3, #3
 8009c56:	d120      	bne.n	8009c9a <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009c58:	78fa      	ldrb	r2, [r7, #3]
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	011b      	lsls	r3, r3, #4
 8009c60:	1a9b      	subs	r3, r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	440b      	add	r3, r1
 8009c66:	334d      	adds	r3, #77	@ 0x4d
 8009c68:	2202      	movs	r2, #2
 8009c6a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009c6c:	78fa      	ldrb	r2, [r7, #3]
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	4613      	mov	r3, r2
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	1a9b      	subs	r3, r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	440b      	add	r3, r1
 8009c7a:	331b      	adds	r3, #27
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	f040 8107 	bne.w	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009c84:	78fa      	ldrb	r2, [r7, #3]
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	334c      	adds	r3, #76	@ 0x4c
 8009c94:	2202      	movs	r2, #2
 8009c96:	701a      	strb	r2, [r3, #0]
 8009c98:	e0fb      	b.n	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009c9a:	78fa      	ldrb	r2, [r7, #3]
 8009c9c:	6879      	ldr	r1, [r7, #4]
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	1a9b      	subs	r3, r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	440b      	add	r3, r1
 8009ca8:	334d      	adds	r3, #77	@ 0x4d
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d13a      	bne.n	8009d26 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009cb0:	78fa      	ldrb	r2, [r7, #3]
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	011b      	lsls	r3, r3, #4
 8009cb8:	1a9b      	subs	r3, r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	440b      	add	r3, r1
 8009cbe:	334d      	adds	r3, #77	@ 0x4d
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009cc4:	78fa      	ldrb	r2, [r7, #3]
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	011b      	lsls	r3, r3, #4
 8009ccc:	1a9b      	subs	r3, r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	440b      	add	r3, r1
 8009cd2:	334c      	adds	r3, #76	@ 0x4c
 8009cd4:	2202      	movs	r2, #2
 8009cd6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009cd8:	78fa      	ldrb	r2, [r7, #3]
 8009cda:	6879      	ldr	r1, [r7, #4]
 8009cdc:	4613      	mov	r3, r2
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	440b      	add	r3, r1
 8009ce6:	331b      	adds	r3, #27
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	f040 80d1 	bne.w	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8009cf0:	78fa      	ldrb	r2, [r7, #3]
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	011b      	lsls	r3, r3, #4
 8009cf8:	1a9b      	subs	r3, r3, r2
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	440b      	add	r3, r1
 8009cfe:	331b      	adds	r3, #27
 8009d00:	2200      	movs	r2, #0
 8009d02:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	78fa      	ldrb	r2, [r7, #3]
 8009d14:	0151      	lsls	r1, r2, #5
 8009d16:	693a      	ldr	r2, [r7, #16]
 8009d18:	440a      	add	r2, r1
 8009d1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009d22:	6053      	str	r3, [r2, #4]
 8009d24:	e0b5      	b.n	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009d26:	78fa      	ldrb	r2, [r7, #3]
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	011b      	lsls	r3, r3, #4
 8009d2e:	1a9b      	subs	r3, r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	440b      	add	r3, r1
 8009d34:	334d      	adds	r3, #77	@ 0x4d
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b05      	cmp	r3, #5
 8009d3a:	d114      	bne.n	8009d66 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d3c:	78fa      	ldrb	r2, [r7, #3]
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	4613      	mov	r3, r2
 8009d42:	011b      	lsls	r3, r3, #4
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	334d      	adds	r3, #77	@ 0x4d
 8009d4c:	2202      	movs	r2, #2
 8009d4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009d50:	78fa      	ldrb	r2, [r7, #3]
 8009d52:	6879      	ldr	r1, [r7, #4]
 8009d54:	4613      	mov	r3, r2
 8009d56:	011b      	lsls	r3, r3, #4
 8009d58:	1a9b      	subs	r3, r3, r2
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	440b      	add	r3, r1
 8009d5e:	334c      	adds	r3, #76	@ 0x4c
 8009d60:	2202      	movs	r2, #2
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	e095      	b.n	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009d66:	78fa      	ldrb	r2, [r7, #3]
 8009d68:	6879      	ldr	r1, [r7, #4]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	011b      	lsls	r3, r3, #4
 8009d6e:	1a9b      	subs	r3, r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	440b      	add	r3, r1
 8009d74:	334d      	adds	r3, #77	@ 0x4d
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b06      	cmp	r3, #6
 8009d7a:	d114      	bne.n	8009da6 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009d7c:	78fa      	ldrb	r2, [r7, #3]
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	4613      	mov	r3, r2
 8009d82:	011b      	lsls	r3, r3, #4
 8009d84:	1a9b      	subs	r3, r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	440b      	add	r3, r1
 8009d8a:	334d      	adds	r3, #77	@ 0x4d
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8009d90:	78fa      	ldrb	r2, [r7, #3]
 8009d92:	6879      	ldr	r1, [r7, #4]
 8009d94:	4613      	mov	r3, r2
 8009d96:	011b      	lsls	r3, r3, #4
 8009d98:	1a9b      	subs	r3, r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	440b      	add	r3, r1
 8009d9e:	334c      	adds	r3, #76	@ 0x4c
 8009da0:	2205      	movs	r2, #5
 8009da2:	701a      	strb	r2, [r3, #0]
 8009da4:	e075      	b.n	8009e92 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009da6:	78fa      	ldrb	r2, [r7, #3]
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	4613      	mov	r3, r2
 8009dac:	011b      	lsls	r3, r3, #4
 8009dae:	1a9b      	subs	r3, r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	440b      	add	r3, r1
 8009db4:	334d      	adds	r3, #77	@ 0x4d
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	2b07      	cmp	r3, #7
 8009dba:	d00a      	beq.n	8009dd2 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	1a9b      	subs	r3, r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	334d      	adds	r3, #77	@ 0x4d
 8009dcc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009dce:	2b09      	cmp	r3, #9
 8009dd0:	d170      	bne.n	8009eb4 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009dd2:	78fa      	ldrb	r2, [r7, #3]
 8009dd4:	6879      	ldr	r1, [r7, #4]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	011b      	lsls	r3, r3, #4
 8009dda:	1a9b      	subs	r3, r3, r2
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	440b      	add	r3, r1
 8009de0:	334d      	adds	r3, #77	@ 0x4d
 8009de2:	2202      	movs	r2, #2
 8009de4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009de6:	78fa      	ldrb	r2, [r7, #3]
 8009de8:	6879      	ldr	r1, [r7, #4]
 8009dea:	4613      	mov	r3, r2
 8009dec:	011b      	lsls	r3, r3, #4
 8009dee:	1a9b      	subs	r3, r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	440b      	add	r3, r1
 8009df4:	3344      	adds	r3, #68	@ 0x44
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	1c59      	adds	r1, r3, #1
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	011b      	lsls	r3, r3, #4
 8009e00:	1a9b      	subs	r3, r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4403      	add	r3, r0
 8009e06:	3344      	adds	r3, #68	@ 0x44
 8009e08:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009e0a:	78fa      	ldrb	r2, [r7, #3]
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	011b      	lsls	r3, r3, #4
 8009e12:	1a9b      	subs	r3, r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	440b      	add	r3, r1
 8009e18:	3344      	adds	r3, #68	@ 0x44
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d914      	bls.n	8009e4a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009e20:	78fa      	ldrb	r2, [r7, #3]
 8009e22:	6879      	ldr	r1, [r7, #4]
 8009e24:	4613      	mov	r3, r2
 8009e26:	011b      	lsls	r3, r3, #4
 8009e28:	1a9b      	subs	r3, r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	440b      	add	r3, r1
 8009e2e:	3344      	adds	r3, #68	@ 0x44
 8009e30:	2200      	movs	r2, #0
 8009e32:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009e34:	78fa      	ldrb	r2, [r7, #3]
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	011b      	lsls	r3, r3, #4
 8009e3c:	1a9b      	subs	r3, r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	440b      	add	r3, r1
 8009e42:	334c      	adds	r3, #76	@ 0x4c
 8009e44:	2204      	movs	r2, #4
 8009e46:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009e48:	e022      	b.n	8009e90 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	011b      	lsls	r3, r3, #4
 8009e52:	1a9b      	subs	r3, r3, r2
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	334c      	adds	r3, #76	@ 0x4c
 8009e5a:	2202      	movs	r2, #2
 8009e5c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009e5e:	78fb      	ldrb	r3, [r7, #3]
 8009e60:	015a      	lsls	r2, r3, #5
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	4413      	add	r3, r2
 8009e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009e74:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009e7c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009e7e:	78fb      	ldrb	r3, [r7, #3]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009e90:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009e92:	78fa      	ldrb	r2, [r7, #3]
 8009e94:	6879      	ldr	r1, [r7, #4]
 8009e96:	4613      	mov	r3, r2
 8009e98:	011b      	lsls	r3, r3, #4
 8009e9a:	1a9b      	subs	r3, r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	440b      	add	r3, r1
 8009ea0:	334c      	adds	r3, #76	@ 0x4c
 8009ea2:	781a      	ldrb	r2, [r3, #0]
 8009ea4:	78fb      	ldrb	r3, [r7, #3]
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f00d fc1d 	bl	80176e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009eae:	e002      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8009eb0:	bf00      	nop
 8009eb2:	e000      	b.n	8009eb6 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8009eb4:	bf00      	nop
  }
}
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08a      	sub	sp, #40	@ 0x28
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	6a1b      	ldr	r3, [r3, #32]
 8009ed4:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	f003 030f 	and.w	r3, r3, #15
 8009edc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	0c5b      	lsrs	r3, r3, #17
 8009ee2:	f003 030f 	and.w	r3, r3, #15
 8009ee6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	091b      	lsrs	r3, r3, #4
 8009eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ef0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d004      	beq.n	8009f02 <HCD_RXQLVL_IRQHandler+0x46>
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	2b05      	cmp	r3, #5
 8009efc:	f000 80b6 	beq.w	800a06c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8009f00:	e0b7      	b.n	800a072 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80b3 	beq.w	800a070 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009f0a:	6879      	ldr	r1, [r7, #4]
 8009f0c:	69ba      	ldr	r2, [r7, #24]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	011b      	lsls	r3, r3, #4
 8009f12:	1a9b      	subs	r3, r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	332c      	adds	r3, #44	@ 0x2c
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f000 80a7 	beq.w	800a070 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	4613      	mov	r3, r2
 8009f28:	011b      	lsls	r3, r3, #4
 8009f2a:	1a9b      	subs	r3, r3, r2
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	440b      	add	r3, r1
 8009f30:	3338      	adds	r3, #56	@ 0x38
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	18d1      	adds	r1, r2, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	69ba      	ldr	r2, [r7, #24]
 8009f3c:	4613      	mov	r3, r2
 8009f3e:	011b      	lsls	r3, r3, #4
 8009f40:	1a9b      	subs	r3, r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4403      	add	r3, r0
 8009f46:	3334      	adds	r3, #52	@ 0x34
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4299      	cmp	r1, r3
 8009f4c:	f200 8083 	bhi.w	800a056 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	6879      	ldr	r1, [r7, #4]
 8009f56:	69ba      	ldr	r2, [r7, #24]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	1a9b      	subs	r3, r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	440b      	add	r3, r1
 8009f62:	332c      	adds	r3, #44	@ 0x2c
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	b292      	uxth	r2, r2
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	f007 fc24 	bl	80117b8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	69ba      	ldr	r2, [r7, #24]
 8009f74:	4613      	mov	r3, r2
 8009f76:	011b      	lsls	r3, r3, #4
 8009f78:	1a9b      	subs	r3, r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	440b      	add	r3, r1
 8009f7e:	332c      	adds	r3, #44	@ 0x2c
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	18d1      	adds	r1, r2, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	69ba      	ldr	r2, [r7, #24]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	011b      	lsls	r3, r3, #4
 8009f8e:	1a9b      	subs	r3, r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4403      	add	r3, r0
 8009f94:	332c      	adds	r3, #44	@ 0x2c
 8009f96:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	011b      	lsls	r3, r3, #4
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	440b      	add	r3, r1
 8009fa6:	3338      	adds	r3, #56	@ 0x38
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	18d1      	adds	r1, r2, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	69ba      	ldr	r2, [r7, #24]
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	011b      	lsls	r3, r3, #4
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4403      	add	r3, r0
 8009fbc:	3338      	adds	r3, #56	@ 0x38
 8009fbe:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	0cdb      	lsrs	r3, r3, #19
 8009fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fd4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8009fd6:	6879      	ldr	r1, [r7, #4]
 8009fd8:	69ba      	ldr	r2, [r7, #24]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	1a9b      	subs	r3, r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	440b      	add	r3, r1
 8009fe4:	3328      	adds	r3, #40	@ 0x28
 8009fe6:	881b      	ldrh	r3, [r3, #0]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d13f      	bne.n	800a070 <HCD_RXQLVL_IRQHandler+0x1b4>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d03c      	beq.n	800a070 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	015a      	lsls	r2, r3, #5
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	4413      	add	r3, r2
 8009ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a00c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a014:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a022:	461a      	mov	r2, r3
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800a028:	6879      	ldr	r1, [r7, #4]
 800a02a:	69ba      	ldr	r2, [r7, #24]
 800a02c:	4613      	mov	r3, r2
 800a02e:	011b      	lsls	r3, r3, #4
 800a030:	1a9b      	subs	r3, r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	440b      	add	r3, r1
 800a036:	333c      	adds	r3, #60	@ 0x3c
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	f083 0301 	eor.w	r3, r3, #1
 800a03e:	b2d8      	uxtb	r0, r3
 800a040:	6879      	ldr	r1, [r7, #4]
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	4613      	mov	r3, r2
 800a046:	011b      	lsls	r3, r3, #4
 800a048:	1a9b      	subs	r3, r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	440b      	add	r3, r1
 800a04e:	333c      	adds	r3, #60	@ 0x3c
 800a050:	4602      	mov	r2, r0
 800a052:	701a      	strb	r2, [r3, #0]
      break;
 800a054:	e00c      	b.n	800a070 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800a056:	6879      	ldr	r1, [r7, #4]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	4613      	mov	r3, r2
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	1a9b      	subs	r3, r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	440b      	add	r3, r1
 800a064:	334c      	adds	r3, #76	@ 0x4c
 800a066:	2204      	movs	r2, #4
 800a068:	701a      	strb	r2, [r3, #0]
      break;
 800a06a:	e001      	b.n	800a070 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800a06c:	bf00      	nop
 800a06e:	e000      	b.n	800a072 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800a070:	bf00      	nop
  }
}
 800a072:	bf00      	nop
 800a074:	3728      	adds	r7, #40	@ 0x28
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b086      	sub	sp, #24
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a0a6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f003 0302 	and.w	r3, r3, #2
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d10b      	bne.n	800a0ca <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d102      	bne.n	800a0c2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f00d faf7 	bl	80176b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	f043 0302 	orr.w	r3, r3, #2
 800a0c8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f003 0308 	and.w	r3, r3, #8
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d132      	bne.n	800a13a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f043 0308 	orr.w	r3, r3, #8
 800a0da:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f003 0304 	and.w	r3, r3, #4
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d126      	bne.n	800a134 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	7a5b      	ldrb	r3, [r3, #9]
 800a0ea:	2b02      	cmp	r3, #2
 800a0ec:	d113      	bne.n	800a116 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800a0f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a0f8:	d106      	bne.n	800a108 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2102      	movs	r1, #2
 800a100:	4618      	mov	r0, r3
 800a102:	f007 fbf3 	bl	80118ec <USB_InitFSLSPClkSel>
 800a106:	e011      	b.n	800a12c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2101      	movs	r1, #1
 800a10e:	4618      	mov	r0, r3
 800a110:	f007 fbec 	bl	80118ec <USB_InitFSLSPClkSel>
 800a114:	e00a      	b.n	800a12c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	79db      	ldrb	r3, [r3, #7]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d106      	bne.n	800a12c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a124:	461a      	mov	r2, r3
 800a126:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800a12a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f00d faed 	bl	801770c <HAL_HCD_PortEnabled_Callback>
 800a132:	e002      	b.n	800a13a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f00d faf7 	bl	8017728 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b20      	cmp	r3, #32
 800a142:	d103      	bne.n	800a14c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f043 0320 	orr.w	r3, r3, #32
 800a14a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a152:	461a      	mov	r2, r3
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	6013      	str	r3, [r2, #0]
}
 800a158:	bf00      	nop
 800a15a:	3718      	adds	r7, #24
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e08b      	b.n	800a28a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7fa fa4c 	bl	8004624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2224      	movs	r2, #36	@ 0x24
 800a190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f022 0201 	bic.w	r2, r2, #1
 800a1a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	685a      	ldr	r2, [r3, #4]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a1b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	689a      	ldr	r2, [r3, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a1c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d107      	bne.n	800a1da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	689a      	ldr	r2, [r3, #8]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a1d6:	609a      	str	r2, [r3, #8]
 800a1d8:	e006      	b.n	800a1e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	689a      	ldr	r2, [r3, #8]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a1e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	68db      	ldr	r3, [r3, #12]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d108      	bne.n	800a202 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	e007      	b.n	800a212 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	6859      	ldr	r1, [r3, #4]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	4b1d      	ldr	r3, [pc, #116]	@ (800a294 <HAL_I2C_Init+0x134>)
 800a21e:	430b      	orrs	r3, r1
 800a220:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	68da      	ldr	r2, [r3, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	691a      	ldr	r2, [r3, #16]
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	430a      	orrs	r2, r1
 800a24a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	69d9      	ldr	r1, [r3, #28]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a1a      	ldr	r2, [r3, #32]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f042 0201 	orr.w	r2, r2, #1
 800a26a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2220      	movs	r2, #32
 800a276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	02008000 	.word	0x02008000

0800a298 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b20      	cmp	r3, #32
 800a2ac:	d138      	bne.n	800a320 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d101      	bne.n	800a2bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e032      	b.n	800a322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2224      	movs	r2, #36	@ 0x24
 800a2c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f022 0201 	bic.w	r2, r2, #1
 800a2da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a2ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6819      	ldr	r1, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	430a      	orrs	r2, r1
 800a2fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0201 	orr.w	r2, r2, #1
 800a30a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2220      	movs	r2, #32
 800a310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	e000      	b.n	800a322 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a320:	2302      	movs	r3, #2
  }
}
 800a322:	4618      	mov	r0, r3
 800a324:	370c      	adds	r7, #12
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	2b20      	cmp	r3, #32
 800a342:	d139      	bne.n	800a3b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d101      	bne.n	800a352 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a34e:	2302      	movs	r3, #2
 800a350:	e033      	b.n	800a3ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2201      	movs	r2, #1
 800a356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2224      	movs	r2, #36	@ 0x24
 800a35e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 0201 	bic.w	r2, r2, #1
 800a370:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a380:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	021b      	lsls	r3, r3, #8
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68fa      	ldr	r2, [r7, #12]
 800a392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f042 0201 	orr.w	r2, r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	e000      	b.n	800a3ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a3b8:	2302      	movs	r3, #2
  }
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a3c6:	b580      	push	{r7, lr}
 800a3c8:	b084      	sub	sp, #16
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d101      	bne.n	800a3d8 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e08f      	b.n	800a4f8 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d106      	bne.n	800a3f2 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f7fa f9c1 	bl	8004774 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2202      	movs	r2, #2
 800a3f6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	699a      	ldr	r2, [r3, #24]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a408:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6999      	ldr	r1, [r3, #24]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685a      	ldr	r2, [r3, #4]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	689b      	ldr	r3, [r3, #8]
 800a418:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a41e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	041b      	lsls	r3, r3, #16
 800a434:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6999      	ldr	r1, [r3, #24]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	430a      	orrs	r2, r1
 800a442:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	041b      	lsls	r3, r3, #16
 800a44a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a19      	ldr	r1, [r3, #32]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	430a      	orrs	r2, r1
 800a458:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45e:	041b      	lsls	r3, r3, #16
 800a460:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	430a      	orrs	r2, r1
 800a46e:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a474:	041b      	lsls	r3, r3, #16
 800a476:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68fa      	ldr	r2, [r7, #12]
 800a482:	430a      	orrs	r2, r1
 800a484:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a48c:	021b      	lsls	r3, r3, #8
 800a48e:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a496:	041b      	lsls	r3, r3, #16
 800a498:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a4a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	430a      	orrs	r2, r1
 800a4c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f042 0206 	orr.w	r2, r2, #6
 800a4d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	699a      	ldr	r2, [r3, #24]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f042 0201 	orr.w	r2, r2, #1
 800a4e4:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a50e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a516:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f003 0304 	and.w	r3, r3, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d023      	beq.n	800a56a <HAL_LTDC_IRQHandler+0x6a>
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	f003 0304 	and.w	r3, r3, #4
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d01e      	beq.n	800a56a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f022 0204 	bic.w	r2, r2, #4
 800a53a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2204      	movs	r2, #4
 800a542:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a54a:	f043 0201 	orr.w	r2, r3, #1
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2204      	movs	r2, #4
 800a558:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f86f 	bl	800a648 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f003 0302 	and.w	r3, r3, #2
 800a570:	2b00      	cmp	r3, #0
 800a572:	d023      	beq.n	800a5bc <HAL_LTDC_IRQHandler+0xbc>
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d01e      	beq.n	800a5bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f022 0202 	bic.w	r2, r2, #2
 800a58c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	2202      	movs	r2, #2
 800a594:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a59c:	f043 0202 	orr.w	r2, r3, #2
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2204      	movs	r2, #4
 800a5aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f846 	bl	800a648 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d01b      	beq.n	800a5fe <HAL_LTDC_IRQHandler+0xfe>
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f003 0301 	and.w	r3, r3, #1
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d016      	beq.n	800a5fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f022 0201 	bic.w	r2, r2, #1
 800a5de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 f82f 	bl	800a65c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f003 0308 	and.w	r3, r3, #8
 800a604:	2b00      	cmp	r3, #0
 800a606:	d01b      	beq.n	800a640 <HAL_LTDC_IRQHandler+0x140>
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	f003 0308 	and.w	r3, r3, #8
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d016      	beq.n	800a640 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0208 	bic.w	r2, r2, #8
 800a620:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2208      	movs	r2, #8
 800a628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 f818 	bl	800a670 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a640:	bf00      	nop
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a650:	bf00      	nop
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a664:	bf00      	nop
 800a666:	370c      	adds	r7, #12
 800a668:	46bd      	mov	sp, r7
 800a66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66e:	4770      	bx	lr

0800a670 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a678:	bf00      	nop
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a684:	b5b0      	push	{r4, r5, r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	60b9      	str	r1, [r7, #8]
 800a68e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a696:	2b01      	cmp	r3, #1
 800a698:	d101      	bne.n	800a69e <HAL_LTDC_ConfigLayer+0x1a>
 800a69a:	2302      	movs	r3, #2
 800a69c:	e02c      	b.n	800a6f8 <HAL_LTDC_ConfigLayer+0x74>
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2134      	movs	r1, #52	@ 0x34
 800a6b4:	fb01 f303 	mul.w	r3, r1, r3
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	461d      	mov	r5, r3
 800a6c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	68b9      	ldr	r1, [r7, #8]
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 f811 	bl	800a700 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bdb0      	pop	{r4, r5, r7, pc}

0800a700 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a700:	b480      	push	{r7}
 800a702:	b089      	sub	sp, #36	@ 0x24
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	685a      	ldr	r2, [r3, #4]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	0c1b      	lsrs	r3, r3, #16
 800a718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a71c:	4413      	add	r3, r2
 800a71e:	041b      	lsls	r3, r3, #16
 800a720:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	01db      	lsls	r3, r3, #7
 800a72c:	4413      	add	r3, r2
 800a72e:	3384      	adds	r3, #132	@ 0x84
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	68fa      	ldr	r2, [r7, #12]
 800a734:	6812      	ldr	r2, [r2, #0]
 800a736:	4611      	mov	r1, r2
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	01d2      	lsls	r2, r2, #7
 800a73c:	440a      	add	r2, r1
 800a73e:	3284      	adds	r2, #132	@ 0x84
 800a740:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a744:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	0c1b      	lsrs	r3, r3, #16
 800a752:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a756:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a758:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4619      	mov	r1, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	01db      	lsls	r3, r3, #7
 800a764:	440b      	add	r3, r1
 800a766:	3384      	adds	r3, #132	@ 0x84
 800a768:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a76e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	68da      	ldr	r2, [r3, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a77e:	4413      	add	r3, r2
 800a780:	041b      	lsls	r3, r3, #16
 800a782:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	01db      	lsls	r3, r3, #7
 800a78e:	4413      	add	r3, r2
 800a790:	3384      	adds	r3, #132	@ 0x84
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	4611      	mov	r1, r2
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	01d2      	lsls	r2, r2, #7
 800a79e:	440a      	add	r2, r1
 800a7a0:	3284      	adds	r2, #132	@ 0x84
 800a7a2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a7a6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	689a      	ldr	r2, [r3, #8]
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a7b6:	4413      	add	r3, r2
 800a7b8:	1c5a      	adds	r2, r3, #1
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4619      	mov	r1, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	01db      	lsls	r3, r3, #7
 800a7c4:	440b      	add	r3, r1
 800a7c6:	3384      	adds	r3, #132	@ 0x84
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	01db      	lsls	r3, r3, #7
 800a7da:	4413      	add	r3, r2
 800a7dc:	3384      	adds	r3, #132	@ 0x84
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	6812      	ldr	r2, [r2, #0]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	01d2      	lsls	r2, r2, #7
 800a7ea:	440a      	add	r2, r1
 800a7ec:	3284      	adds	r2, #132	@ 0x84
 800a7ee:	f023 0307 	bic.w	r3, r3, #7
 800a7f2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	01db      	lsls	r3, r3, #7
 800a7fe:	4413      	add	r3, r2
 800a800:	3384      	adds	r3, #132	@ 0x84
 800a802:	461a      	mov	r2, r3
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a81a:	041b      	lsls	r3, r3, #16
 800a81c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	061b      	lsls	r3, r3, #24
 800a824:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a82c:	461a      	mov	r2, r3
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	431a      	orrs	r2, r3
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	431a      	orrs	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4619      	mov	r1, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	01db      	lsls	r3, r3, #7
 800a840:	440b      	add	r3, r1
 800a842:	3384      	adds	r3, #132	@ 0x84
 800a844:	4619      	mov	r1, r3
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	4313      	orrs	r3, r2
 800a84a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	461a      	mov	r2, r3
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	01db      	lsls	r3, r3, #7
 800a856:	4413      	add	r3, r2
 800a858:	3384      	adds	r3, #132	@ 0x84
 800a85a:	695b      	ldr	r3, [r3, #20]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	6812      	ldr	r2, [r2, #0]
 800a860:	4611      	mov	r1, r2
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	01d2      	lsls	r2, r2, #7
 800a866:	440a      	add	r2, r1
 800a868:	3284      	adds	r2, #132	@ 0x84
 800a86a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a86e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	01db      	lsls	r3, r3, #7
 800a87a:	4413      	add	r3, r2
 800a87c:	3384      	adds	r3, #132	@ 0x84
 800a87e:	461a      	mov	r2, r3
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	01db      	lsls	r3, r3, #7
 800a890:	4413      	add	r3, r2
 800a892:	3384      	adds	r3, #132	@ 0x84
 800a894:	69da      	ldr	r2, [r3, #28]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4619      	mov	r1, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	01db      	lsls	r3, r3, #7
 800a8a0:	440b      	add	r3, r1
 800a8a2:	3384      	adds	r3, #132	@ 0x84
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a9e4 <LTDC_SetConfig+0x2e4>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	69da      	ldr	r2, [r3, #28]
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
 800a8b4:	68f9      	ldr	r1, [r7, #12]
 800a8b6:	6809      	ldr	r1, [r1, #0]
 800a8b8:	4608      	mov	r0, r1
 800a8ba:	6879      	ldr	r1, [r7, #4]
 800a8bc:	01c9      	lsls	r1, r1, #7
 800a8be:	4401      	add	r1, r0
 800a8c0:	3184      	adds	r1, #132	@ 0x84
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	01db      	lsls	r3, r3, #7
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3384      	adds	r3, #132	@ 0x84
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8da:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	691b      	ldr	r3, [r3, #16]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d102      	bne.n	800a8ea <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	61fb      	str	r3, [r7, #28]
 800a8e8:	e01b      	b.n	800a922 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d102      	bne.n	800a8f8 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	61fb      	str	r3, [r7, #28]
 800a8f6:	e014      	b.n	800a922 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	2b04      	cmp	r3, #4
 800a8fe:	d00b      	beq.n	800a918 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a904:	2b02      	cmp	r3, #2
 800a906:	d007      	beq.n	800a918 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d003      	beq.n	800a918 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a914:	2b07      	cmp	r3, #7
 800a916:	d102      	bne.n	800a91e <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800a918:	2302      	movs	r3, #2
 800a91a:	61fb      	str	r3, [r7, #28]
 800a91c:	e001      	b.n	800a922 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800a91e:	2301      	movs	r3, #1
 800a920:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	01db      	lsls	r3, r3, #7
 800a92c:	4413      	add	r3, r2
 800a92e:	3384      	adds	r3, #132	@ 0x84
 800a930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	6812      	ldr	r2, [r2, #0]
 800a936:	4611      	mov	r1, r2
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	01d2      	lsls	r2, r2, #7
 800a93c:	440a      	add	r2, r1
 800a93e:	3284      	adds	r2, #132	@ 0x84
 800a940:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a944:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94a:	69fa      	ldr	r2, [r7, #28]
 800a94c:	fb02 f303 	mul.w	r3, r2, r3
 800a950:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	6859      	ldr	r1, [r3, #4]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	1acb      	subs	r3, r1, r3
 800a95c:	69f9      	ldr	r1, [r7, #28]
 800a95e:	fb01 f303 	mul.w	r3, r1, r3
 800a962:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a964:	68f9      	ldr	r1, [r7, #12]
 800a966:	6809      	ldr	r1, [r1, #0]
 800a968:	4608      	mov	r0, r1
 800a96a:	6879      	ldr	r1, [r7, #4]
 800a96c:	01c9      	lsls	r1, r1, #7
 800a96e:	4401      	add	r1, r0
 800a970:	3184      	adds	r1, #132	@ 0x84
 800a972:	4313      	orrs	r3, r2
 800a974:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	01db      	lsls	r3, r3, #7
 800a980:	4413      	add	r3, r2
 800a982:	3384      	adds	r3, #132	@ 0x84
 800a984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4619      	mov	r1, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	01db      	lsls	r3, r3, #7
 800a990:	440b      	add	r3, r1
 800a992:	3384      	adds	r3, #132	@ 0x84
 800a994:	4619      	mov	r1, r3
 800a996:	4b14      	ldr	r3, [pc, #80]	@ (800a9e8 <LTDC_SetConfig+0x2e8>)
 800a998:	4013      	ands	r3, r2
 800a99a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	01db      	lsls	r3, r3, #7
 800a9a6:	4413      	add	r3, r2
 800a9a8:	3384      	adds	r3, #132	@ 0x84
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9b0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	01db      	lsls	r3, r3, #7
 800a9bc:	4413      	add	r3, r2
 800a9be:	3384      	adds	r3, #132	@ 0x84
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68fa      	ldr	r2, [r7, #12]
 800a9c4:	6812      	ldr	r2, [r2, #0]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	01d2      	lsls	r2, r2, #7
 800a9cc:	440a      	add	r2, r1
 800a9ce:	3284      	adds	r2, #132	@ 0x84
 800a9d0:	f043 0301 	orr.w	r3, r3, #1
 800a9d4:	6013      	str	r3, [r2, #0]
}
 800a9d6:	bf00      	nop
 800a9d8:	3724      	adds	r7, #36	@ 0x24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	fffff8f8 	.word	0xfffff8f8
 800a9e8:	fffff800 	.word	0xfffff800

0800a9ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a9f0:	4b05      	ldr	r3, [pc, #20]	@ (800aa08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a04      	ldr	r2, [pc, #16]	@ (800aa08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a9f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9fa:	6013      	str	r3, [r2, #0]
}
 800a9fc:	bf00      	nop
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	40007000 	.word	0x40007000

0800aa0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800aa16:	4b23      	ldr	r3, [pc, #140]	@ (800aaa4 <HAL_PWREx_EnableOverDrive+0x98>)
 800aa18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa1a:	4a22      	ldr	r2, [pc, #136]	@ (800aaa4 <HAL_PWREx_EnableOverDrive+0x98>)
 800aa1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa20:	6413      	str	r3, [r2, #64]	@ 0x40
 800aa22:	4b20      	ldr	r3, [pc, #128]	@ (800aaa4 <HAL_PWREx_EnableOverDrive+0x98>)
 800aa24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800aa2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a1d      	ldr	r2, [pc, #116]	@ (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aa38:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa3a:	f7fb fd49 	bl	80064d0 <HAL_GetTick>
 800aa3e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aa40:	e009      	b.n	800aa56 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa42:	f7fb fd45 	bl	80064d0 <HAL_GetTick>
 800aa46:	4602      	mov	r2, r0
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	1ad3      	subs	r3, r2, r3
 800aa4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa50:	d901      	bls.n	800aa56 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800aa52:	2303      	movs	r3, #3
 800aa54:	e022      	b.n	800aa9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aa56:	4b14      	ldr	r3, [pc, #80]	@ (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aa5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa62:	d1ee      	bne.n	800aa42 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800aa64:	4b10      	ldr	r3, [pc, #64]	@ (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a0f      	ldr	r2, [pc, #60]	@ (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa6e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800aa70:	f7fb fd2e 	bl	80064d0 <HAL_GetTick>
 800aa74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa76:	e009      	b.n	800aa8c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800aa78:	f7fb fd2a 	bl	80064d0 <HAL_GetTick>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	1ad3      	subs	r3, r2, r3
 800aa82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa86:	d901      	bls.n	800aa8c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e007      	b.n	800aa9c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800aa8c:	4b06      	ldr	r3, [pc, #24]	@ (800aaa8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa98:	d1ee      	bne.n	800aa78 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	40023800 	.word	0x40023800
 800aaa8:	40007000 	.word	0x40007000

0800aaac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b086      	sub	sp, #24
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800aab4:	f7fb fd0c 	bl	80064d0 <HAL_GetTick>
 800aab8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e067      	b.n	800ab94 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10b      	bne.n	800aae8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f7f9 ff13 	bl	8004904 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800aade:	f241 3188 	movw	r1, #5000	@ 0x1388
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f85e 	bl	800aba4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	021a      	lsls	r2, r3, #8
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	430a      	orrs	r2, r1
 800ab00:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2120      	movs	r1, #32
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f856 	bl	800abc0 <QSPI_WaitFlagStateUntilTimeout>
 800ab14:	4603      	mov	r3, r0
 800ab16:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d135      	bne.n	800ab8a <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	4b1d      	ldr	r3, [pc, #116]	@ (800ab9c <HAL_QSPI_Init+0xf0>)
 800ab26:	4013      	ands	r3, r2
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	6852      	ldr	r2, [r2, #4]
 800ab2c:	0611      	lsls	r1, r2, #24
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	68d2      	ldr	r2, [r2, #12]
 800ab32:	4311      	orrs	r1, r2
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	69d2      	ldr	r2, [r2, #28]
 800ab38:	4311      	orrs	r1, r2
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	6a12      	ldr	r2, [r2, #32]
 800ab3e:	4311      	orrs	r1, r2
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	6812      	ldr	r2, [r2, #0]
 800ab44:	430b      	orrs	r3, r1
 800ab46:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	685a      	ldr	r2, [r3, #4]
 800ab4e:	4b14      	ldr	r3, [pc, #80]	@ (800aba0 <HAL_QSPI_Init+0xf4>)
 800ab50:	4013      	ands	r3, r2
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6912      	ldr	r2, [r2, #16]
 800ab56:	0411      	lsls	r1, r2, #16
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6952      	ldr	r2, [r2, #20]
 800ab5c:	4311      	orrs	r1, r2
 800ab5e:	687a      	ldr	r2, [r7, #4]
 800ab60:	6992      	ldr	r2, [r2, #24]
 800ab62:	4311      	orrs	r1, r2
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	6812      	ldr	r2, [r2, #0]
 800ab68:	430b      	orrs	r3, r1
 800ab6a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	681a      	ldr	r2, [r3, #0]
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f042 0201 	orr.w	r2, r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2201      	movs	r2, #1
 800ab86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 800ab92:	7afb      	ldrb	r3, [r7, #11]
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	00ffff2f 	.word	0x00ffff2f
 800aba0:	ffe0f8fe 	.word	0xffe0f8fe

0800aba4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	649a      	str	r2, [r3, #72]	@ 0x48
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	4613      	mov	r3, r2
 800abce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800abd0:	e01a      	b.n	800ac08 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd8:	d016      	beq.n	800ac08 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abda:	f7fb fc79 	bl	80064d0 <HAL_GetTick>
 800abde:	4602      	mov	r2, r0
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	1ad3      	subs	r3, r2, r3
 800abe4:	69ba      	ldr	r2, [r7, #24]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d302      	bcc.n	800abf0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10b      	bne.n	800ac08 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2204      	movs	r2, #4
 800abf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abfc:	f043 0201 	orr.w	r2, r3, #1
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	e00e      	b.n	800ac26 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	689a      	ldr	r2, [r3, #8]
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	4013      	ands	r3, r2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	bf14      	ite	ne
 800ac16:	2301      	movne	r3, #1
 800ac18:	2300      	moveq	r3, #0
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d1d6      	bne.n	800abd2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
	...

0800ac30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800ac38:	2300      	movs	r3, #0
 800ac3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d101      	bne.n	800ac46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e291      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 8087 	beq.w	800ad62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800ac54:	4b96      	ldr	r3, [pc, #600]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	f003 030c 	and.w	r3, r3, #12
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d00c      	beq.n	800ac7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ac60:	4b93      	ldr	r3, [pc, #588]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	f003 030c 	and.w	r3, r3, #12
 800ac68:	2b08      	cmp	r3, #8
 800ac6a:	d112      	bne.n	800ac92 <HAL_RCC_OscConfig+0x62>
 800ac6c:	4b90      	ldr	r3, [pc, #576]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ac74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ac78:	d10b      	bne.n	800ac92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac7a:	4b8d      	ldr	r3, [pc, #564]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d06c      	beq.n	800ad60 <HAL_RCC_OscConfig+0x130>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d168      	bne.n	800ad60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e26b      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac9a:	d106      	bne.n	800acaa <HAL_RCC_OscConfig+0x7a>
 800ac9c:	4b84      	ldr	r3, [pc, #528]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a83      	ldr	r2, [pc, #524]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800aca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aca6:	6013      	str	r3, [r2, #0]
 800aca8:	e02e      	b.n	800ad08 <HAL_RCC_OscConfig+0xd8>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10c      	bne.n	800accc <HAL_RCC_OscConfig+0x9c>
 800acb2:	4b7f      	ldr	r3, [pc, #508]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a7e      	ldr	r2, [pc, #504]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acbc:	6013      	str	r3, [r2, #0]
 800acbe:	4b7c      	ldr	r3, [pc, #496]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a7b      	ldr	r2, [pc, #492]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acc8:	6013      	str	r3, [r2, #0]
 800acca:	e01d      	b.n	800ad08 <HAL_RCC_OscConfig+0xd8>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800acd4:	d10c      	bne.n	800acf0 <HAL_RCC_OscConfig+0xc0>
 800acd6:	4b76      	ldr	r3, [pc, #472]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a75      	ldr	r2, [pc, #468]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	4b73      	ldr	r3, [pc, #460]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a72      	ldr	r2, [pc, #456]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ace8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	e00b      	b.n	800ad08 <HAL_RCC_OscConfig+0xd8>
 800acf0:	4b6f      	ldr	r3, [pc, #444]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a6e      	ldr	r2, [pc, #440]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	4b6c      	ldr	r3, [pc, #432]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a6b      	ldr	r2, [pc, #428]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ad02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d013      	beq.n	800ad38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad10:	f7fb fbde 	bl	80064d0 <HAL_GetTick>
 800ad14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad16:	e008      	b.n	800ad2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad18:	f7fb fbda 	bl	80064d0 <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	2b64      	cmp	r3, #100	@ 0x64
 800ad24:	d901      	bls.n	800ad2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e21f      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad2a:	4b61      	ldr	r3, [pc, #388]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d0f0      	beq.n	800ad18 <HAL_RCC_OscConfig+0xe8>
 800ad36:	e014      	b.n	800ad62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad38:	f7fb fbca 	bl	80064d0 <HAL_GetTick>
 800ad3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad3e:	e008      	b.n	800ad52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad40:	f7fb fbc6 	bl	80064d0 <HAL_GetTick>
 800ad44:	4602      	mov	r2, r0
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	2b64      	cmp	r3, #100	@ 0x64
 800ad4c:	d901      	bls.n	800ad52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ad4e:	2303      	movs	r3, #3
 800ad50:	e20b      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ad52:	4b57      	ldr	r3, [pc, #348]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1f0      	bne.n	800ad40 <HAL_RCC_OscConfig+0x110>
 800ad5e:	e000      	b.n	800ad62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d069      	beq.n	800ae42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad6e:	4b50      	ldr	r3, [pc, #320]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	f003 030c 	and.w	r3, r3, #12
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00b      	beq.n	800ad92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad7a:	4b4d      	ldr	r3, [pc, #308]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	f003 030c 	and.w	r3, r3, #12
 800ad82:	2b08      	cmp	r3, #8
 800ad84:	d11c      	bne.n	800adc0 <HAL_RCC_OscConfig+0x190>
 800ad86:	4b4a      	ldr	r3, [pc, #296]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d116      	bne.n	800adc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ad92:	4b47      	ldr	r3, [pc, #284]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d005      	beq.n	800adaa <HAL_RCC_OscConfig+0x17a>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	d001      	beq.n	800adaa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	e1df      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adaa:	4b41      	ldr	r3, [pc, #260]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	691b      	ldr	r3, [r3, #16]
 800adb6:	00db      	lsls	r3, r3, #3
 800adb8:	493d      	ldr	r1, [pc, #244]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800adba:	4313      	orrs	r3, r2
 800adbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adbe:	e040      	b.n	800ae42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d023      	beq.n	800ae10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800adc8:	4b39      	ldr	r3, [pc, #228]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a38      	ldr	r2, [pc, #224]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800adce:	f043 0301 	orr.w	r3, r3, #1
 800add2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800add4:	f7fb fb7c 	bl	80064d0 <HAL_GetTick>
 800add8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adda:	e008      	b.n	800adee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800addc:	f7fb fb78 	bl	80064d0 <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d901      	bls.n	800adee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800adea:	2303      	movs	r3, #3
 800adec:	e1bd      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adee:	4b30      	ldr	r3, [pc, #192]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0f0      	beq.n	800addc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adfa:	4b2d      	ldr	r3, [pc, #180]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	4929      	ldr	r1, [pc, #164]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	600b      	str	r3, [r1, #0]
 800ae0e:	e018      	b.n	800ae42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae10:	4b27      	ldr	r3, [pc, #156]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a26      	ldr	r2, [pc, #152]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae16:	f023 0301 	bic.w	r3, r3, #1
 800ae1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae1c:	f7fb fb58 	bl	80064d0 <HAL_GetTick>
 800ae20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae22:	e008      	b.n	800ae36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae24:	f7fb fb54 	bl	80064d0 <HAL_GetTick>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d901      	bls.n	800ae36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e199      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae36:	4b1e      	ldr	r3, [pc, #120]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 0302 	and.w	r3, r3, #2
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1f0      	bne.n	800ae24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 0308 	and.w	r3, r3, #8
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d038      	beq.n	800aec0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d019      	beq.n	800ae8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ae56:	4b16      	ldr	r3, [pc, #88]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae5a:	4a15      	ldr	r2, [pc, #84]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae5c:	f043 0301 	orr.w	r3, r3, #1
 800ae60:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae62:	f7fb fb35 	bl	80064d0 <HAL_GetTick>
 800ae66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae68:	e008      	b.n	800ae7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae6a:	f7fb fb31 	bl	80064d0 <HAL_GetTick>
 800ae6e:	4602      	mov	r2, r0
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	1ad3      	subs	r3, r2, r3
 800ae74:	2b02      	cmp	r3, #2
 800ae76:	d901      	bls.n	800ae7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ae78:	2303      	movs	r3, #3
 800ae7a:	e176      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ae7c:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae80:	f003 0302 	and.w	r3, r3, #2
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d0f0      	beq.n	800ae6a <HAL_RCC_OscConfig+0x23a>
 800ae88:	e01a      	b.n	800aec0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ae8a:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae8e:	4a08      	ldr	r2, [pc, #32]	@ (800aeb0 <HAL_RCC_OscConfig+0x280>)
 800ae90:	f023 0301 	bic.w	r3, r3, #1
 800ae94:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae96:	f7fb fb1b 	bl	80064d0 <HAL_GetTick>
 800ae9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ae9c:	e00a      	b.n	800aeb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ae9e:	f7fb fb17 	bl	80064d0 <HAL_GetTick>
 800aea2:	4602      	mov	r2, r0
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	2b02      	cmp	r3, #2
 800aeaa:	d903      	bls.n	800aeb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e15c      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
 800aeb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800aeb4:	4b91      	ldr	r3, [pc, #580]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800aeb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aeb8:	f003 0302 	and.w	r3, r3, #2
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1ee      	bne.n	800ae9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 80a4 	beq.w	800b016 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aece:	4b8b      	ldr	r3, [pc, #556]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800aed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10d      	bne.n	800aef6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800aeda:	4b88      	ldr	r3, [pc, #544]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800aedc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aede:	4a87      	ldr	r2, [pc, #540]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800aee0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aee4:	6413      	str	r3, [r2, #64]	@ 0x40
 800aee6:	4b85      	ldr	r3, [pc, #532]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800aee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aeee:	60bb      	str	r3, [r7, #8]
 800aef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aef2:	2301      	movs	r3, #1
 800aef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aef6:	4b82      	ldr	r3, [pc, #520]	@ (800b100 <HAL_RCC_OscConfig+0x4d0>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d118      	bne.n	800af34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800af02:	4b7f      	ldr	r3, [pc, #508]	@ (800b100 <HAL_RCC_OscConfig+0x4d0>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a7e      	ldr	r2, [pc, #504]	@ (800b100 <HAL_RCC_OscConfig+0x4d0>)
 800af08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af0e:	f7fb fadf 	bl	80064d0 <HAL_GetTick>
 800af12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af14:	e008      	b.n	800af28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af16:	f7fb fadb 	bl	80064d0 <HAL_GetTick>
 800af1a:	4602      	mov	r2, r0
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	2b64      	cmp	r3, #100	@ 0x64
 800af22:	d901      	bls.n	800af28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800af24:	2303      	movs	r3, #3
 800af26:	e120      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af28:	4b75      	ldr	r3, [pc, #468]	@ (800b100 <HAL_RCC_OscConfig+0x4d0>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0f0      	beq.n	800af16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d106      	bne.n	800af4a <HAL_RCC_OscConfig+0x31a>
 800af3c:	4b6f      	ldr	r3, [pc, #444]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af40:	4a6e      	ldr	r2, [pc, #440]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af42:	f043 0301 	orr.w	r3, r3, #1
 800af46:	6713      	str	r3, [r2, #112]	@ 0x70
 800af48:	e02d      	b.n	800afa6 <HAL_RCC_OscConfig+0x376>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10c      	bne.n	800af6c <HAL_RCC_OscConfig+0x33c>
 800af52:	4b6a      	ldr	r3, [pc, #424]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af56:	4a69      	ldr	r2, [pc, #420]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af58:	f023 0301 	bic.w	r3, r3, #1
 800af5c:	6713      	str	r3, [r2, #112]	@ 0x70
 800af5e:	4b67      	ldr	r3, [pc, #412]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af62:	4a66      	ldr	r2, [pc, #408]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af64:	f023 0304 	bic.w	r3, r3, #4
 800af68:	6713      	str	r3, [r2, #112]	@ 0x70
 800af6a:	e01c      	b.n	800afa6 <HAL_RCC_OscConfig+0x376>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	2b05      	cmp	r3, #5
 800af72:	d10c      	bne.n	800af8e <HAL_RCC_OscConfig+0x35e>
 800af74:	4b61      	ldr	r3, [pc, #388]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af78:	4a60      	ldr	r2, [pc, #384]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af7a:	f043 0304 	orr.w	r3, r3, #4
 800af7e:	6713      	str	r3, [r2, #112]	@ 0x70
 800af80:	4b5e      	ldr	r3, [pc, #376]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af84:	4a5d      	ldr	r2, [pc, #372]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af86:	f043 0301 	orr.w	r3, r3, #1
 800af8a:	6713      	str	r3, [r2, #112]	@ 0x70
 800af8c:	e00b      	b.n	800afa6 <HAL_RCC_OscConfig+0x376>
 800af8e:	4b5b      	ldr	r3, [pc, #364]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af92:	4a5a      	ldr	r2, [pc, #360]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af94:	f023 0301 	bic.w	r3, r3, #1
 800af98:	6713      	str	r3, [r2, #112]	@ 0x70
 800af9a:	4b58      	ldr	r3, [pc, #352]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800af9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af9e:	4a57      	ldr	r2, [pc, #348]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800afa0:	f023 0304 	bic.w	r3, r3, #4
 800afa4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d015      	beq.n	800afda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afae:	f7fb fa8f 	bl	80064d0 <HAL_GetTick>
 800afb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afb4:	e00a      	b.n	800afcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afb6:	f7fb fa8b 	bl	80064d0 <HAL_GetTick>
 800afba:	4602      	mov	r2, r0
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d901      	bls.n	800afcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800afc8:	2303      	movs	r3, #3
 800afca:	e0ce      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800afcc:	4b4b      	ldr	r3, [pc, #300]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800afce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afd0:	f003 0302 	and.w	r3, r3, #2
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d0ee      	beq.n	800afb6 <HAL_RCC_OscConfig+0x386>
 800afd8:	e014      	b.n	800b004 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afda:	f7fb fa79 	bl	80064d0 <HAL_GetTick>
 800afde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800afe0:	e00a      	b.n	800aff8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800afe2:	f7fb fa75 	bl	80064d0 <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d901      	bls.n	800aff8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800aff4:	2303      	movs	r3, #3
 800aff6:	e0b8      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800aff8:	4b40      	ldr	r3, [pc, #256]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800affa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800affc:	f003 0302 	and.w	r3, r3, #2
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1ee      	bne.n	800afe2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b004:	7dfb      	ldrb	r3, [r7, #23]
 800b006:	2b01      	cmp	r3, #1
 800b008:	d105      	bne.n	800b016 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b00a:	4b3c      	ldr	r3, [pc, #240]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b00c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b00e:	4a3b      	ldr	r2, [pc, #236]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b014:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	f000 80a4 	beq.w	800b168 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b020:	4b36      	ldr	r3, [pc, #216]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f003 030c 	and.w	r3, r3, #12
 800b028:	2b08      	cmp	r3, #8
 800b02a:	d06b      	beq.n	800b104 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	2b02      	cmp	r3, #2
 800b032:	d149      	bne.n	800b0c8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b034:	4b31      	ldr	r3, [pc, #196]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a30      	ldr	r2, [pc, #192]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b03a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b03e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b040:	f7fb fa46 	bl	80064d0 <HAL_GetTick>
 800b044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b046:	e008      	b.n	800b05a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b048:	f7fb fa42 	bl	80064d0 <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	2b02      	cmp	r3, #2
 800b054:	d901      	bls.n	800b05a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e087      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b05a:	4b28      	ldr	r3, [pc, #160]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1f0      	bne.n	800b048 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	69da      	ldr	r2, [r3, #28]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	431a      	orrs	r2, r3
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b074:	019b      	lsls	r3, r3, #6
 800b076:	431a      	orrs	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07c:	085b      	lsrs	r3, r3, #1
 800b07e:	3b01      	subs	r3, #1
 800b080:	041b      	lsls	r3, r3, #16
 800b082:	431a      	orrs	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b088:	061b      	lsls	r3, r3, #24
 800b08a:	4313      	orrs	r3, r2
 800b08c:	4a1b      	ldr	r2, [pc, #108]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b08e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b092:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b094:	4b19      	ldr	r3, [pc, #100]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a18      	ldr	r2, [pc, #96]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b09a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b09e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a0:	f7fb fa16 	bl	80064d0 <HAL_GetTick>
 800b0a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0a6:	e008      	b.n	800b0ba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0a8:	f7fb fa12 	bl	80064d0 <HAL_GetTick>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d901      	bls.n	800b0ba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e057      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0ba:	4b10      	ldr	r3, [pc, #64]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0f0      	beq.n	800b0a8 <HAL_RCC_OscConfig+0x478>
 800b0c6:	e04f      	b.n	800b168 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a0b      	ldr	r2, [pc, #44]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b0ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0d4:	f7fb f9fc 	bl	80064d0 <HAL_GetTick>
 800b0d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0da:	e008      	b.n	800b0ee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0dc:	f7fb f9f8 	bl	80064d0 <HAL_GetTick>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	1ad3      	subs	r3, r2, r3
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d901      	bls.n	800b0ee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	e03d      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0ee:	4b03      	ldr	r3, [pc, #12]	@ (800b0fc <HAL_RCC_OscConfig+0x4cc>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1f0      	bne.n	800b0dc <HAL_RCC_OscConfig+0x4ac>
 800b0fa:	e035      	b.n	800b168 <HAL_RCC_OscConfig+0x538>
 800b0fc:	40023800 	.word	0x40023800
 800b100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b104:	4b1b      	ldr	r3, [pc, #108]	@ (800b174 <HAL_RCC_OscConfig+0x544>)
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d028      	beq.n	800b164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d121      	bne.n	800b164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d11a      	bne.n	800b164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b134:	4013      	ands	r3, r2
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b13a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d111      	bne.n	800b164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b14a:	085b      	lsrs	r3, r3, #1
 800b14c:	3b01      	subs	r3, #1
 800b14e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b150:	429a      	cmp	r2, r3
 800b152:	d107      	bne.n	800b164 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b15e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b160:	429a      	cmp	r2, r3
 800b162:	d001      	beq.n	800b168 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	e000      	b.n	800b16a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3718      	adds	r7, #24
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	40023800 	.word	0x40023800

0800b178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b182:	2300      	movs	r3, #0
 800b184:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e0d0      	b.n	800b332 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b190:	4b6a      	ldr	r3, [pc, #424]	@ (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f003 030f 	and.w	r3, r3, #15
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d910      	bls.n	800b1c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b19e:	4b67      	ldr	r3, [pc, #412]	@ (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f023 020f 	bic.w	r2, r3, #15
 800b1a6:	4965      	ldr	r1, [pc, #404]	@ (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1ae:	4b63      	ldr	r3, [pc, #396]	@ (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 030f 	and.w	r3, r3, #15
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d001      	beq.n	800b1c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e0b8      	b.n	800b332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 0302 	and.w	r3, r3, #2
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d020      	beq.n	800b20e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 0304 	and.w	r3, r3, #4
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d005      	beq.n	800b1e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b1d8:	4b59      	ldr	r3, [pc, #356]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	4a58      	ldr	r2, [pc, #352]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b1de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b1e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 0308 	and.w	r3, r3, #8
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d005      	beq.n	800b1fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b1f0:	4b53      	ldr	r3, [pc, #332]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b1f2:	689b      	ldr	r3, [r3, #8]
 800b1f4:	4a52      	ldr	r2, [pc, #328]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b1f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b1fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b1fc:	4b50      	ldr	r3, [pc, #320]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	494d      	ldr	r1, [pc, #308]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	2b00      	cmp	r3, #0
 800b218:	d040      	beq.n	800b29c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	685b      	ldr	r3, [r3, #4]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d107      	bne.n	800b232 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b222:	4b47      	ldr	r3, [pc, #284]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d115      	bne.n	800b25a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e07f      	b.n	800b332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d107      	bne.n	800b24a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b23a:	4b41      	ldr	r3, [pc, #260]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b242:	2b00      	cmp	r3, #0
 800b244:	d109      	bne.n	800b25a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e073      	b.n	800b332 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b24a:	4b3d      	ldr	r3, [pc, #244]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e06b      	b.n	800b332 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b25a:	4b39      	ldr	r3, [pc, #228]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b25c:	689b      	ldr	r3, [r3, #8]
 800b25e:	f023 0203 	bic.w	r2, r3, #3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	4936      	ldr	r1, [pc, #216]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b268:	4313      	orrs	r3, r2
 800b26a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b26c:	f7fb f930 	bl	80064d0 <HAL_GetTick>
 800b270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b272:	e00a      	b.n	800b28a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b274:	f7fb f92c 	bl	80064d0 <HAL_GetTick>
 800b278:	4602      	mov	r2, r0
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b282:	4293      	cmp	r3, r2
 800b284:	d901      	bls.n	800b28a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b286:	2303      	movs	r3, #3
 800b288:	e053      	b.n	800b332 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b28a:	4b2d      	ldr	r3, [pc, #180]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f003 020c 	and.w	r2, r3, #12
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	429a      	cmp	r2, r3
 800b29a:	d1eb      	bne.n	800b274 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b29c:	4b27      	ldr	r3, [pc, #156]	@ (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 030f 	and.w	r3, r3, #15
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d210      	bcs.n	800b2cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2aa:	4b24      	ldr	r3, [pc, #144]	@ (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f023 020f 	bic.w	r2, r3, #15
 800b2b2:	4922      	ldr	r1, [pc, #136]	@ (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ba:	4b20      	ldr	r3, [pc, #128]	@ (800b33c <HAL_RCC_ClockConfig+0x1c4>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 030f 	and.w	r3, r3, #15
 800b2c2:	683a      	ldr	r2, [r7, #0]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d001      	beq.n	800b2cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e032      	b.n	800b332 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d008      	beq.n	800b2ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b2d8:	4b19      	ldr	r3, [pc, #100]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	68db      	ldr	r3, [r3, #12]
 800b2e4:	4916      	ldr	r1, [pc, #88]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 0308 	and.w	r3, r3, #8
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d009      	beq.n	800b30a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b2f6:	4b12      	ldr	r3, [pc, #72]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b2f8:	689b      	ldr	r3, [r3, #8]
 800b2fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	490e      	ldr	r1, [pc, #56]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b306:	4313      	orrs	r3, r2
 800b308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b30a:	f000 f821 	bl	800b350 <HAL_RCC_GetSysClockFreq>
 800b30e:	4602      	mov	r2, r0
 800b310:	4b0b      	ldr	r3, [pc, #44]	@ (800b340 <HAL_RCC_ClockConfig+0x1c8>)
 800b312:	689b      	ldr	r3, [r3, #8]
 800b314:	091b      	lsrs	r3, r3, #4
 800b316:	f003 030f 	and.w	r3, r3, #15
 800b31a:	490a      	ldr	r1, [pc, #40]	@ (800b344 <HAL_RCC_ClockConfig+0x1cc>)
 800b31c:	5ccb      	ldrb	r3, [r1, r3]
 800b31e:	fa22 f303 	lsr.w	r3, r2, r3
 800b322:	4a09      	ldr	r2, [pc, #36]	@ (800b348 <HAL_RCC_ClockConfig+0x1d0>)
 800b324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b326:	4b09      	ldr	r3, [pc, #36]	@ (800b34c <HAL_RCC_ClockConfig+0x1d4>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7f9 fff8 	bl	8005320 <HAL_InitTick>

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	40023c00 	.word	0x40023c00
 800b340:	40023800 	.word	0x40023800
 800b344:	0801c9f4 	.word	0x0801c9f4
 800b348:	20000020 	.word	0x20000020
 800b34c:	20000070 	.word	0x20000070

0800b350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b354:	b090      	sub	sp, #64	@ 0x40
 800b356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b35c:	2300      	movs	r3, #0
 800b35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b360:	2300      	movs	r3, #0
 800b362:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b368:	4b59      	ldr	r3, [pc, #356]	@ (800b4d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	f003 030c 	and.w	r3, r3, #12
 800b370:	2b08      	cmp	r3, #8
 800b372:	d00d      	beq.n	800b390 <HAL_RCC_GetSysClockFreq+0x40>
 800b374:	2b08      	cmp	r3, #8
 800b376:	f200 80a1 	bhi.w	800b4bc <HAL_RCC_GetSysClockFreq+0x16c>
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <HAL_RCC_GetSysClockFreq+0x34>
 800b37e:	2b04      	cmp	r3, #4
 800b380:	d003      	beq.n	800b38a <HAL_RCC_GetSysClockFreq+0x3a>
 800b382:	e09b      	b.n	800b4bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b384:	4b53      	ldr	r3, [pc, #332]	@ (800b4d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800b386:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b388:	e09b      	b.n	800b4c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b38a:	4b53      	ldr	r3, [pc, #332]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b38c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b38e:	e098      	b.n	800b4c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b390:	4b4f      	ldr	r3, [pc, #316]	@ (800b4d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b398:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b39a:	4b4d      	ldr	r3, [pc, #308]	@ (800b4d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d028      	beq.n	800b3f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3a6:	4b4a      	ldr	r3, [pc, #296]	@ (800b4d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	099b      	lsrs	r3, r3, #6
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	623b      	str	r3, [r7, #32]
 800b3b0:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4b47      	ldr	r3, [pc, #284]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3bc:	fb03 f201 	mul.w	r2, r3, r1
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	fb00 f303 	mul.w	r3, r0, r3
 800b3c6:	4413      	add	r3, r2
 800b3c8:	4a43      	ldr	r2, [pc, #268]	@ (800b4d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3ca:	fba0 1202 	umull	r1, r2, r0, r2
 800b3ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3d0:	460a      	mov	r2, r1
 800b3d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b3d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3d6:	4413      	add	r3, r2
 800b3d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b3da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3dc:	2200      	movs	r2, #0
 800b3de:	61bb      	str	r3, [r7, #24]
 800b3e0:	61fa      	str	r2, [r7, #28]
 800b3e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b3e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b3ea:	f7f4 ff79 	bl	80002e0 <__aeabi_uldivmod>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4613      	mov	r3, r2
 800b3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3f6:	e053      	b.n	800b4a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3f8:	4b35      	ldr	r3, [pc, #212]	@ (800b4d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	099b      	lsrs	r3, r3, #6
 800b3fe:	2200      	movs	r2, #0
 800b400:	613b      	str	r3, [r7, #16]
 800b402:	617a      	str	r2, [r7, #20]
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b40a:	f04f 0b00 	mov.w	fp, #0
 800b40e:	4652      	mov	r2, sl
 800b410:	465b      	mov	r3, fp
 800b412:	f04f 0000 	mov.w	r0, #0
 800b416:	f04f 0100 	mov.w	r1, #0
 800b41a:	0159      	lsls	r1, r3, #5
 800b41c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b420:	0150      	lsls	r0, r2, #5
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	ebb2 080a 	subs.w	r8, r2, sl
 800b42a:	eb63 090b 	sbc.w	r9, r3, fp
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	f04f 0300 	mov.w	r3, #0
 800b436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b43a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b43e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b442:	ebb2 0408 	subs.w	r4, r2, r8
 800b446:	eb63 0509 	sbc.w	r5, r3, r9
 800b44a:	f04f 0200 	mov.w	r2, #0
 800b44e:	f04f 0300 	mov.w	r3, #0
 800b452:	00eb      	lsls	r3, r5, #3
 800b454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b458:	00e2      	lsls	r2, r4, #3
 800b45a:	4614      	mov	r4, r2
 800b45c:	461d      	mov	r5, r3
 800b45e:	eb14 030a 	adds.w	r3, r4, sl
 800b462:	603b      	str	r3, [r7, #0]
 800b464:	eb45 030b 	adc.w	r3, r5, fp
 800b468:	607b      	str	r3, [r7, #4]
 800b46a:	f04f 0200 	mov.w	r2, #0
 800b46e:	f04f 0300 	mov.w	r3, #0
 800b472:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b476:	4629      	mov	r1, r5
 800b478:	028b      	lsls	r3, r1, #10
 800b47a:	4621      	mov	r1, r4
 800b47c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b480:	4621      	mov	r1, r4
 800b482:	028a      	lsls	r2, r1, #10
 800b484:	4610      	mov	r0, r2
 800b486:	4619      	mov	r1, r3
 800b488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b48a:	2200      	movs	r2, #0
 800b48c:	60bb      	str	r3, [r7, #8]
 800b48e:	60fa      	str	r2, [r7, #12]
 800b490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b494:	f7f4 ff24 	bl	80002e0 <__aeabi_uldivmod>
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	4613      	mov	r3, r2
 800b49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b4a0:	4b0b      	ldr	r3, [pc, #44]	@ (800b4d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	0c1b      	lsrs	r3, r3, #16
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b4b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b4ba:	e002      	b.n	800b4c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b4bc:	4b05      	ldr	r3, [pc, #20]	@ (800b4d4 <HAL_RCC_GetSysClockFreq+0x184>)
 800b4be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b4c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3740      	adds	r7, #64	@ 0x40
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b4ce:	bf00      	nop
 800b4d0:	40023800 	.word	0x40023800
 800b4d4:	00f42400 	.word	0x00f42400
 800b4d8:	017d7840 	.word	0x017d7840

0800b4dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b4e0:	4b03      	ldr	r3, [pc, #12]	@ (800b4f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	20000020 	.word	0x20000020

0800b4f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b4f8:	f7ff fff0 	bl	800b4dc <HAL_RCC_GetHCLKFreq>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	4b05      	ldr	r3, [pc, #20]	@ (800b514 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	0a9b      	lsrs	r3, r3, #10
 800b504:	f003 0307 	and.w	r3, r3, #7
 800b508:	4903      	ldr	r1, [pc, #12]	@ (800b518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b50a:	5ccb      	ldrb	r3, [r1, r3]
 800b50c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b510:	4618      	mov	r0, r3
 800b512:	bd80      	pop	{r7, pc}
 800b514:	40023800 	.word	0x40023800
 800b518:	0801ca04 	.word	0x0801ca04

0800b51c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b520:	f7ff ffdc 	bl	800b4dc <HAL_RCC_GetHCLKFreq>
 800b524:	4602      	mov	r2, r0
 800b526:	4b05      	ldr	r3, [pc, #20]	@ (800b53c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	0b5b      	lsrs	r3, r3, #13
 800b52c:	f003 0307 	and.w	r3, r3, #7
 800b530:	4903      	ldr	r1, [pc, #12]	@ (800b540 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b532:	5ccb      	ldrb	r3, [r1, r3]
 800b534:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b538:	4618      	mov	r0, r3
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	40023800 	.word	0x40023800
 800b540:	0801ca04 	.word	0x0801ca04

0800b544 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	220f      	movs	r2, #15
 800b552:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b554:	4b12      	ldr	r3, [pc, #72]	@ (800b5a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	f003 0203 	and.w	r2, r3, #3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b560:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b562:	689b      	ldr	r3, [r3, #8]
 800b564:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b56c:	4b0c      	ldr	r3, [pc, #48]	@ (800b5a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b56e:	689b      	ldr	r3, [r3, #8]
 800b570:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b578:	4b09      	ldr	r3, [pc, #36]	@ (800b5a0 <HAL_RCC_GetClockConfig+0x5c>)
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	08db      	lsrs	r3, r3, #3
 800b57e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b586:	4b07      	ldr	r3, [pc, #28]	@ (800b5a4 <HAL_RCC_GetClockConfig+0x60>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 020f 	and.w	r2, r3, #15
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	601a      	str	r2, [r3, #0]
}
 800b592:	bf00      	nop
 800b594:	370c      	adds	r7, #12
 800b596:	46bd      	mov	sp, r7
 800b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	40023800 	.word	0x40023800
 800b5a4:	40023c00 	.word	0x40023c00

0800b5a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d012      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b5d0:	4b69      	ldr	r3, [pc, #420]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	4a68      	ldr	r2, [pc, #416]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5d6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b5da:	6093      	str	r3, [r2, #8]
 800b5dc:	4b66      	ldr	r3, [pc, #408]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5de:	689a      	ldr	r2, [r3, #8]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5e4:	4964      	ldr	r1, [pc, #400]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d017      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b602:	4b5d      	ldr	r3, [pc, #372]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b608:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b610:	4959      	ldr	r1, [pc, #356]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b612:	4313      	orrs	r3, r2
 800b614:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b61c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b620:	d101      	bne.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b622:	2301      	movs	r3, #1
 800b624:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b62e:	2301      	movs	r3, #1
 800b630:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d017      	beq.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b63e:	4b4e      	ldr	r3, [pc, #312]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b644:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b64c:	494a      	ldr	r1, [pc, #296]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b64e:	4313      	orrs	r3, r2
 800b650:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b658:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b65c:	d101      	bne.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b65e:	2301      	movs	r3, #1
 800b660:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b66a:	2301      	movs	r3, #1
 800b66c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b67a:	2301      	movs	r3, #1
 800b67c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0320 	and.w	r3, r3, #32
 800b686:	2b00      	cmp	r3, #0
 800b688:	f000 808b 	beq.w	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b68c:	4b3a      	ldr	r3, [pc, #232]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b68e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b690:	4a39      	ldr	r2, [pc, #228]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b696:	6413      	str	r3, [r2, #64]	@ 0x40
 800b698:	4b37      	ldr	r3, [pc, #220]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b69a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b69c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6a0:	60bb      	str	r3, [r7, #8]
 800b6a2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b6a4:	4b35      	ldr	r3, [pc, #212]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4a34      	ldr	r2, [pc, #208]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6b0:	f7fa ff0e 	bl	80064d0 <HAL_GetTick>
 800b6b4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b6b6:	e008      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6b8:	f7fa ff0a 	bl	80064d0 <HAL_GetTick>
 800b6bc:	4602      	mov	r2, r0
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	2b64      	cmp	r3, #100	@ 0x64
 800b6c4:	d901      	bls.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	e357      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b6ca:	4b2c      	ldr	r3, [pc, #176]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d0f0      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b6d6:	4b28      	ldr	r3, [pc, #160]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6de:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d035      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d02e      	beq.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b6f4:	4b20      	ldr	r3, [pc, #128]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6fc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b6fe:	4b1e      	ldr	r3, [pc, #120]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b702:	4a1d      	ldr	r2, [pc, #116]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b708:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b70a:	4b1b      	ldr	r3, [pc, #108]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b70c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b70e:	4a1a      	ldr	r2, [pc, #104]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b714:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b716:	4a18      	ldr	r2, [pc, #96]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b71c:	4b16      	ldr	r3, [pc, #88]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b71e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b01      	cmp	r3, #1
 800b726:	d114      	bne.n	800b752 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b728:	f7fa fed2 	bl	80064d0 <HAL_GetTick>
 800b72c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b72e:	e00a      	b.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b730:	f7fa fece 	bl	80064d0 <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b73e:	4293      	cmp	r3, r2
 800b740:	d901      	bls.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b742:	2303      	movs	r3, #3
 800b744:	e319      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b746:	4b0c      	ldr	r3, [pc, #48]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b74a:	f003 0302 	and.w	r3, r3, #2
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d0ee      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b75a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b75e:	d111      	bne.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b760:	4b05      	ldr	r3, [pc, #20]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b76c:	4b04      	ldr	r3, [pc, #16]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b76e:	400b      	ands	r3, r1
 800b770:	4901      	ldr	r1, [pc, #4]	@ (800b778 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b772:	4313      	orrs	r3, r2
 800b774:	608b      	str	r3, [r1, #8]
 800b776:	e00b      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b778:	40023800 	.word	0x40023800
 800b77c:	40007000 	.word	0x40007000
 800b780:	0ffffcff 	.word	0x0ffffcff
 800b784:	4baa      	ldr	r3, [pc, #680]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	4aa9      	ldr	r2, [pc, #676]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b78a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b78e:	6093      	str	r3, [r2, #8]
 800b790:	4ba7      	ldr	r3, [pc, #668]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b792:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b79c:	49a4      	ldr	r1, [pc, #656]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0310 	and.w	r3, r3, #16
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d010      	beq.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b7ae:	4ba0      	ldr	r3, [pc, #640]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7b4:	4a9e      	ldr	r2, [pc, #632]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7ba:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b7be:	4b9c      	ldr	r3, [pc, #624]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c8:	4999      	ldr	r1, [pc, #612]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d00a      	beq.n	800b7f2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b7dc:	4b94      	ldr	r3, [pc, #592]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7ea:	4991      	ldr	r1, [pc, #580]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00a      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b7fe:	4b8c      	ldr	r3, [pc, #560]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b804:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b80c:	4988      	ldr	r1, [pc, #544]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00a      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b820:	4b83      	ldr	r3, [pc, #524]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b826:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b82e:	4980      	ldr	r1, [pc, #512]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b830:	4313      	orrs	r3, r2
 800b832:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00a      	beq.n	800b858 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b842:	4b7b      	ldr	r3, [pc, #492]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b848:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b850:	4977      	ldr	r1, [pc, #476]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b852:	4313      	orrs	r3, r2
 800b854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00a      	beq.n	800b87a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b864:	4b72      	ldr	r3, [pc, #456]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b86a:	f023 0203 	bic.w	r2, r3, #3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b872:	496f      	ldr	r1, [pc, #444]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b874:	4313      	orrs	r3, r2
 800b876:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00a      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b886:	4b6a      	ldr	r3, [pc, #424]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b88c:	f023 020c 	bic.w	r2, r3, #12
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b894:	4966      	ldr	r1, [pc, #408]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b896:	4313      	orrs	r3, r2
 800b898:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00a      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b8a8:	4b61      	ldr	r3, [pc, #388]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ae:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8b6:	495e      	ldr	r1, [pc, #376]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00a      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b8ca:	4b59      	ldr	r3, [pc, #356]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8d0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8d8:	4955      	ldr	r1, [pc, #340]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8da:	4313      	orrs	r3, r2
 800b8dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d00a      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b8ec:	4b50      	ldr	r3, [pc, #320]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8fa:	494d      	ldr	r1, [pc, #308]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00a      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b90e:	4b48      	ldr	r3, [pc, #288]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b914:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b91c:	4944      	ldr	r1, [pc, #272]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b91e:	4313      	orrs	r3, r2
 800b920:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00a      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b930:	4b3f      	ldr	r3, [pc, #252]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b936:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b93e:	493c      	ldr	r1, [pc, #240]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b940:	4313      	orrs	r3, r2
 800b942:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00a      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b952:	4b37      	ldr	r3, [pc, #220]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b958:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b960:	4933      	ldr	r1, [pc, #204]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b962:	4313      	orrs	r3, r2
 800b964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00a      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b974:	4b2e      	ldr	r3, [pc, #184]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b97a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b982:	492b      	ldr	r1, [pc, #172]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b984:	4313      	orrs	r3, r2
 800b986:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b992:	2b00      	cmp	r3, #0
 800b994:	d011      	beq.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b996:	4b26      	ldr	r3, [pc, #152]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b99c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9a4:	4922      	ldr	r1, [pc, #136]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9b4:	d101      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0308 	and.w	r3, r3, #8
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d001      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00a      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b9d6:	4b16      	ldr	r3, [pc, #88]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9e4:	4912      	ldr	r1, [pc, #72]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00b      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b9f8:	4b0d      	ldr	r3, [pc, #52]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9fe:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba08:	4909      	ldr	r1, [pc, #36]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	2b01      	cmp	r3, #1
 800ba14:	d006      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	f000 80d9 	beq.w	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ba24:	4b02      	ldr	r3, [pc, #8]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a01      	ldr	r2, [pc, #4]	@ (800ba30 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba2e:	e001      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800ba30:	40023800 	.word	0x40023800
 800ba34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba36:	f7fa fd4b 	bl	80064d0 <HAL_GetTick>
 800ba3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ba3c:	e008      	b.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ba3e:	f7fa fd47 	bl	80064d0 <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	2b64      	cmp	r3, #100	@ 0x64
 800ba4a:	d901      	bls.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e194      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ba50:	4b6c      	ldr	r3, [pc, #432]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d1f0      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d021      	beq.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d11d      	bne.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ba70:	4b64      	ldr	r3, [pc, #400]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba76:	0c1b      	lsrs	r3, r3, #16
 800ba78:	f003 0303 	and.w	r3, r3, #3
 800ba7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ba7e:	4b61      	ldr	r3, [pc, #388]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba84:	0e1b      	lsrs	r3, r3, #24
 800ba86:	f003 030f 	and.w	r3, r3, #15
 800ba8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	019a      	lsls	r2, r3, #6
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	431a      	orrs	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	061b      	lsls	r3, r3, #24
 800ba9c:	431a      	orrs	r2, r3
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	071b      	lsls	r3, r3, #28
 800baa4:	4957      	ldr	r1, [pc, #348]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800baa6:	4313      	orrs	r3, r2
 800baa8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d004      	beq.n	800bac2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800babc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bac0:	d00a      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d02e      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bad2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bad6:	d129      	bne.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bad8:	4b4a      	ldr	r3, [pc, #296]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bada:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bade:	0c1b      	lsrs	r3, r3, #16
 800bae0:	f003 0303 	and.w	r3, r3, #3
 800bae4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bae6:	4b47      	ldr	r3, [pc, #284]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baec:	0f1b      	lsrs	r3, r3, #28
 800baee:	f003 0307 	and.w	r3, r3, #7
 800baf2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	019a      	lsls	r2, r3, #6
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	041b      	lsls	r3, r3, #16
 800bafe:	431a      	orrs	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	061b      	lsls	r3, r3, #24
 800bb06:	431a      	orrs	r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	071b      	lsls	r3, r3, #28
 800bb0c:	493d      	ldr	r1, [pc, #244]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bb14:	4b3b      	ldr	r3, [pc, #236]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb1a:	f023 021f 	bic.w	r2, r3, #31
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb22:	3b01      	subs	r3, #1
 800bb24:	4937      	ldr	r1, [pc, #220]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d01d      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bb38:	4b32      	ldr	r3, [pc, #200]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb3e:	0e1b      	lsrs	r3, r3, #24
 800bb40:	f003 030f 	and.w	r3, r3, #15
 800bb44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bb46:	4b2f      	ldr	r3, [pc, #188]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb4c:	0f1b      	lsrs	r3, r3, #28
 800bb4e:	f003 0307 	and.w	r3, r3, #7
 800bb52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	019a      	lsls	r2, r3, #6
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	041b      	lsls	r3, r3, #16
 800bb60:	431a      	orrs	r2, r3
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	061b      	lsls	r3, r3, #24
 800bb66:	431a      	orrs	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	071b      	lsls	r3, r3, #28
 800bb6c:	4925      	ldr	r1, [pc, #148]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d011      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	685b      	ldr	r3, [r3, #4]
 800bb84:	019a      	lsls	r2, r3, #6
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	691b      	ldr	r3, [r3, #16]
 800bb8a:	041b      	lsls	r3, r3, #16
 800bb8c:	431a      	orrs	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	061b      	lsls	r3, r3, #24
 800bb94:	431a      	orrs	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	689b      	ldr	r3, [r3, #8]
 800bb9a:	071b      	lsls	r3, r3, #28
 800bb9c:	4919      	ldr	r1, [pc, #100]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bba4:	4b17      	ldr	r3, [pc, #92]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	4a16      	ldr	r2, [pc, #88]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbaa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bbae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbb0:	f7fa fc8e 	bl	80064d0 <HAL_GetTick>
 800bbb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbb6:	e008      	b.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bbb8:	f7fa fc8a 	bl	80064d0 <HAL_GetTick>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	2b64      	cmp	r3, #100	@ 0x64
 800bbc4:	d901      	bls.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	e0d7      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbca:	4b0e      	ldr	r3, [pc, #56]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0f0      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	f040 80cd 	bne.w	800bd78 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bbde:	4b09      	ldr	r3, [pc, #36]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a08      	ldr	r2, [pc, #32]	@ (800bc04 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbe4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbea:	f7fa fc71 	bl	80064d0 <HAL_GetTick>
 800bbee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbf0:	e00a      	b.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bbf2:	f7fa fc6d 	bl	80064d0 <HAL_GetTick>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	2b64      	cmp	r3, #100	@ 0x64
 800bbfe:	d903      	bls.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e0ba      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bc04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bc08:	4b5e      	ldr	r3, [pc, #376]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc14:	d0ed      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x682>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d009      	beq.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d02e      	beq.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d12a      	bne.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bc3e:	4b51      	ldr	r3, [pc, #324]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc44:	0c1b      	lsrs	r3, r3, #16
 800bc46:	f003 0303 	and.w	r3, r3, #3
 800bc4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bc4c:	4b4d      	ldr	r3, [pc, #308]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc52:	0f1b      	lsrs	r3, r3, #28
 800bc54:	f003 0307 	and.w	r3, r3, #7
 800bc58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	019a      	lsls	r2, r3, #6
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	041b      	lsls	r3, r3, #16
 800bc64:	431a      	orrs	r2, r3
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	699b      	ldr	r3, [r3, #24]
 800bc6a:	061b      	lsls	r3, r3, #24
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	071b      	lsls	r3, r3, #28
 800bc72:	4944      	ldr	r1, [pc, #272]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc74:	4313      	orrs	r3, r2
 800bc76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bc7a:	4b42      	ldr	r3, [pc, #264]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc80:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	021b      	lsls	r3, r3, #8
 800bc8c:	493d      	ldr	r1, [pc, #244]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d022      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bca4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bca8:	d11d      	bne.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bcaa:	4b36      	ldr	r3, [pc, #216]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcb0:	0e1b      	lsrs	r3, r3, #24
 800bcb2:	f003 030f 	and.w	r3, r3, #15
 800bcb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bcb8:	4b32      	ldr	r3, [pc, #200]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcbe:	0f1b      	lsrs	r3, r3, #28
 800bcc0:	f003 0307 	and.w	r3, r3, #7
 800bcc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	019a      	lsls	r2, r3, #6
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	041b      	lsls	r3, r3, #16
 800bcd2:	431a      	orrs	r2, r3
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	061b      	lsls	r3, r3, #24
 800bcd8:	431a      	orrs	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	071b      	lsls	r3, r3, #28
 800bcde:	4929      	ldr	r1, [pc, #164]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bce0:	4313      	orrs	r3, r2
 800bce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0308 	and.w	r3, r3, #8
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d028      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bcf2:	4b24      	ldr	r3, [pc, #144]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcf8:	0e1b      	lsrs	r3, r3, #24
 800bcfa:	f003 030f 	and.w	r3, r3, #15
 800bcfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd00:	4b20      	ldr	r3, [pc, #128]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd06:	0c1b      	lsrs	r3, r3, #16
 800bd08:	f003 0303 	and.w	r3, r3, #3
 800bd0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	019a      	lsls	r2, r3, #6
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	041b      	lsls	r3, r3, #16
 800bd18:	431a      	orrs	r2, r3
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	061b      	lsls	r3, r3, #24
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	071b      	lsls	r3, r3, #28
 800bd26:	4917      	ldr	r1, [pc, #92]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bd2e:	4b15      	ldr	r3, [pc, #84]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3c:	4911      	ldr	r1, [pc, #68]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bd44:	4b0f      	ldr	r3, [pc, #60]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a0e      	ldr	r2, [pc, #56]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd50:	f7fa fbbe 	bl	80064d0 <HAL_GetTick>
 800bd54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bd56:	e008      	b.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd58:	f7fa fbba 	bl	80064d0 <HAL_GetTick>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	1ad3      	subs	r3, r2, r3
 800bd62:	2b64      	cmp	r3, #100	@ 0x64
 800bd64:	d901      	bls.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e007      	b.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bd6a:	4b06      	ldr	r3, [pc, #24]	@ (800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd76:	d1ef      	bne.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3720      	adds	r7, #32
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	40023800 	.word	0x40023800

0800bd88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b087      	sub	sp, #28
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bda6:	f040 808d 	bne.w	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bdaa:	4b93      	ldr	r3, [pc, #588]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bdb0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800bdb8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdc0:	d07c      	beq.n	800bebc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdc8:	d87b      	bhi.n	800bec2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d004      	beq.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bdd6:	d039      	beq.n	800be4c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800bdd8:	e073      	b.n	800bec2 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bdda:	4b87      	ldr	r3, [pc, #540]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d108      	bne.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bde6:	4b84      	ldr	r3, [pc, #528]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bdee:	4a83      	ldr	r2, [pc, #524]	@ (800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bdf0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdf4:	613b      	str	r3, [r7, #16]
 800bdf6:	e007      	b.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bdf8:	4b7f      	ldr	r3, [pc, #508]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be00:	4a7f      	ldr	r2, [pc, #508]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be02:	fbb2 f3f3 	udiv	r3, r2, r3
 800be06:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800be08:	4b7b      	ldr	r3, [pc, #492]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be0e:	0e1b      	lsrs	r3, r3, #24
 800be10:	f003 030f 	and.w	r3, r3, #15
 800be14:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800be16:	4b78      	ldr	r3, [pc, #480]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be1c:	099b      	lsrs	r3, r3, #6
 800be1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	fb03 f202 	mul.w	r2, r3, r2
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be2e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800be30:	4b71      	ldr	r3, [pc, #452]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be36:	0a1b      	lsrs	r3, r3, #8
 800be38:	f003 031f 	and.w	r3, r3, #31
 800be3c:	3301      	adds	r3, #1
 800be3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800be40:	697a      	ldr	r2, [r7, #20]
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	fbb2 f3f3 	udiv	r3, r2, r3
 800be48:	617b      	str	r3, [r7, #20]
        break;
 800be4a:	e03b      	b.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800be4c:	4b6a      	ldr	r3, [pc, #424]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d108      	bne.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800be58:	4b67      	ldr	r3, [pc, #412]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be60:	4a66      	ldr	r2, [pc, #408]	@ (800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800be62:	fbb2 f3f3 	udiv	r3, r2, r3
 800be66:	613b      	str	r3, [r7, #16]
 800be68:	e007      	b.n	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800be6a:	4b63      	ldr	r3, [pc, #396]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800be72:	4a63      	ldr	r2, [pc, #396]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800be74:	fbb2 f3f3 	udiv	r3, r2, r3
 800be78:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800be7a:	4b5f      	ldr	r3, [pc, #380]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be80:	0e1b      	lsrs	r3, r3, #24
 800be82:	f003 030f 	and.w	r3, r3, #15
 800be86:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800be88:	4b5b      	ldr	r3, [pc, #364]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800be8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800be8e:	099b      	lsrs	r3, r3, #6
 800be90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	fb03 f202 	mul.w	r2, r3, r2
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bea0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800bea2:	4b55      	ldr	r3, [pc, #340]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bea8:	f003 031f 	and.w	r3, r3, #31
 800beac:	3301      	adds	r3, #1
 800beae:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800beb0:	697a      	ldr	r2, [r7, #20]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb8:	617b      	str	r3, [r7, #20]
        break;
 800beba:	e003      	b.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bebc:	4b51      	ldr	r3, [pc, #324]	@ (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bebe:	617b      	str	r3, [r7, #20]
        break;
 800bec0:	e000      	b.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
        break;
 800bec2:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800beca:	f040 808d 	bne.w	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  {
    saiclocksource = RCC->DCKCFGR1;
 800bece:	4b4a      	ldr	r3, [pc, #296]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bed4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800bedc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bee4:	d07c      	beq.n	800bfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800beec:	d87b      	bhi.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d004      	beq.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800befa:	d039      	beq.n	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800befc:	e073      	b.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800befe:	4b3e      	ldr	r3, [pc, #248]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d108      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0x194>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bf0a:	4b3b      	ldr	r3, [pc, #236]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf12:	4a3a      	ldr	r2, [pc, #232]	@ (800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bf14:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf18:	613b      	str	r3, [r7, #16]
 800bf1a:	e007      	b.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bf1c:	4b36      	ldr	r3, [pc, #216]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf24:	4a36      	ldr	r2, [pc, #216]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf26:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf2a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800bf2c:	4b32      	ldr	r3, [pc, #200]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf32:	0e1b      	lsrs	r3, r3, #24
 800bf34:	f003 030f 	and.w	r3, r3, #15
 800bf38:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800bf3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf40:	099b      	lsrs	r3, r3, #6
 800bf42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf46:	693a      	ldr	r2, [r7, #16]
 800bf48:	fb03 f202 	mul.w	r2, r3, r2
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf52:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800bf54:	4b28      	ldr	r3, [pc, #160]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf5a:	0a1b      	lsrs	r3, r3, #8
 800bf5c:	f003 031f 	and.w	r3, r3, #31
 800bf60:	3301      	adds	r3, #1
 800bf62:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf6c:	617b      	str	r3, [r7, #20]
        break;
 800bf6e:	e03b      	b.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800bf70:	4b21      	ldr	r3, [pc, #132]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d108      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800bf7c:	4b1e      	ldr	r3, [pc, #120]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf84:	4a1d      	ldr	r2, [pc, #116]	@ (800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800bf86:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf8a:	613b      	str	r3, [r7, #16]
 800bf8c:	e007      	b.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x216>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800bf8e:	4b1a      	ldr	r3, [pc, #104]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf96:	4a1a      	ldr	r2, [pc, #104]	@ (800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800bf98:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf9c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800bf9e:	4b16      	ldr	r3, [pc, #88]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bfa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfa4:	0e1b      	lsrs	r3, r3, #24
 800bfa6:	f003 030f 	and.w	r3, r3, #15
 800bfaa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800bfac:	4b12      	ldr	r3, [pc, #72]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bfae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bfb2:	099b      	lsrs	r3, r3, #6
 800bfb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	fb03 f202 	mul.w	r2, r3, r2
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800bfc6:	4b0c      	ldr	r3, [pc, #48]	@ (800bff8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800bfc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfcc:	f003 031f 	and.w	r3, r3, #31
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfdc:	617b      	str	r3, [r7, #20]
        break;
 800bfde:	e003      	b.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfe0:	4b08      	ldr	r3, [pc, #32]	@ (800c004 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800bfe2:	617b      	str	r3, [r7, #20]
        break;
 800bfe4:	e000      	b.n	800bfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
        break;
 800bfe6:	bf00      	nop
      }
    }
  }

  return frequency;
 800bfe8:	697b      	ldr	r3, [r7, #20]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	371c      	adds	r7, #28
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr
 800bff6:	bf00      	nop
 800bff8:	40023800 	.word	0x40023800
 800bffc:	00f42400 	.word	0x00f42400
 800c000:	017d7840 	.word	0x017d7840
 800c004:	00bb8000 	.word	0x00bb8000

0800c008 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e071      	b.n	800c0fe <HAL_RTC_Init+0xf6>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	7f5b      	ldrb	r3, [r3, #29]
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	2b00      	cmp	r3, #0
 800c022:	d105      	bne.n	800c030 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7f8 fcfa 	bl	8004a24 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2202      	movs	r2, #2
 800c034:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	f003 0310 	and.w	r3, r3, #16
 800c040:	2b10      	cmp	r3, #16
 800c042:	d053      	beq.n	800c0ec <HAL_RTC_Init+0xe4>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	22ca      	movs	r2, #202	@ 0xca
 800c04a:	625a      	str	r2, [r3, #36]	@ 0x24
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2253      	movs	r2, #83	@ 0x53
 800c052:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fac7 	bl	800c5e8 <RTC_EnterInitMode>
 800c05a:	4603      	mov	r3, r0
 800c05c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c05e:	7bfb      	ldrb	r3, [r7, #15]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d12a      	bne.n	800c0ba <HAL_RTC_Init+0xb2>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6899      	ldr	r1, [r3, #8]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	4b26      	ldr	r3, [pc, #152]	@ (800c108 <HAL_RTC_Init+0x100>)
 800c070:	400b      	ands	r3, r1
 800c072:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	6899      	ldr	r1, [r3, #8]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	685a      	ldr	r2, [r3, #4]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	431a      	orrs	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	695b      	ldr	r3, [r3, #20]
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	430a      	orrs	r2, r1
 800c090:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	68d2      	ldr	r2, [r2, #12]
 800c09a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6919      	ldr	r1, [r3, #16]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	041a      	lsls	r2, r3, #16
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	430a      	orrs	r2, r1
 800c0ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fad0 	bl	800c656 <RTC_ExitInitMode>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c0ba:	7bfb      	ldrb	r3, [r7, #15]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d110      	bne.n	800c0e2 <HAL_RTC_Init+0xda>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f022 0208 	bic.w	r2, r2, #8
 800c0ce:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	699a      	ldr	r2, [r3, #24]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	22ff      	movs	r2, #255	@ 0xff
 800c0e8:	625a      	str	r2, [r3, #36]	@ 0x24
 800c0ea:	e001      	b.n	800c0f0 <HAL_RTC_Init+0xe8>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d102      	bne.n	800c0fc <HAL_RTC_Init+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	ff8fffbf 	.word	0xff8fffbf

0800c10c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c10c:	b590      	push	{r4, r7, lr}
 800c10e:	b087      	sub	sp, #28
 800c110:	af00      	add	r7, sp, #0
 800c112:	60f8      	str	r0, [r7, #12]
 800c114:	60b9      	str	r1, [r7, #8]
 800c116:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c118:	2300      	movs	r3, #0
 800c11a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	7f1b      	ldrb	r3, [r3, #28]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d101      	bne.n	800c128 <HAL_RTC_SetTime+0x1c>
 800c124:	2302      	movs	r3, #2
 800c126:	e085      	b.n	800c234 <HAL_RTC_SetTime+0x128>
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2201      	movs	r2, #1
 800c12c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2202      	movs	r2, #2
 800c132:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d126      	bne.n	800c188 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	689b      	ldr	r3, [r3, #8]
 800c140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c144:	2b00      	cmp	r3, #0
 800c146:	d102      	bne.n	800c14e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	2200      	movs	r2, #0
 800c14c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	4618      	mov	r0, r3
 800c154:	f000 faa4 	bl	800c6a0 <RTC_ByteToBcd2>
 800c158:	4603      	mov	r3, r0
 800c15a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	785b      	ldrb	r3, [r3, #1]
 800c160:	4618      	mov	r0, r3
 800c162:	f000 fa9d 	bl	800c6a0 <RTC_ByteToBcd2>
 800c166:	4603      	mov	r3, r0
 800c168:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c16a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	789b      	ldrb	r3, [r3, #2]
 800c170:	4618      	mov	r0, r3
 800c172:	f000 fa95 	bl	800c6a0 <RTC_ByteToBcd2>
 800c176:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c178:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	78db      	ldrb	r3, [r3, #3]
 800c180:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c182:	4313      	orrs	r3, r2
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	e018      	b.n	800c1ba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2200      	movs	r2, #0
 800c19a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	785b      	ldrb	r3, [r3, #1]
 800c1a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c1a8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c1ae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	78db      	ldrb	r3, [r3, #3]
 800c1b4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	22ca      	movs	r2, #202	@ 0xca
 800c1c0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	2253      	movs	r2, #83	@ 0x53
 800c1c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f000 fa0c 	bl	800c5e8 <RTC_EnterInitMode>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c1d4:	7cfb      	ldrb	r3, [r7, #19]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d11e      	bne.n	800c218 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	6979      	ldr	r1, [r7, #20]
 800c1e0:	4b16      	ldr	r3, [pc, #88]	@ (800c23c <HAL_RTC_SetTime+0x130>)
 800c1e2:	400b      	ands	r3, r1
 800c1e4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	689a      	ldr	r2, [r3, #8]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c1f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	6899      	ldr	r1, [r3, #8]
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	68da      	ldr	r2, [r3, #12]
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	431a      	orrs	r2, r3
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	430a      	orrs	r2, r1
 800c20c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c20e:	68f8      	ldr	r0, [r7, #12]
 800c210:	f000 fa21 	bl	800c656 <RTC_ExitInitMode>
 800c214:	4603      	mov	r3, r0
 800c216:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c218:	7cfb      	ldrb	r3, [r7, #19]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d102      	bne.n	800c224 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2201      	movs	r2, #1
 800c222:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	22ff      	movs	r2, #255	@ 0xff
 800c22a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	771a      	strb	r2, [r3, #28]

  return status;
 800c232:	7cfb      	ldrb	r3, [r7, #19]
}
 800c234:	4618      	mov	r0, r3
 800c236:	371c      	adds	r7, #28
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd90      	pop	{r4, r7, pc}
 800c23c:	007f7f7f 	.word	0x007f7f7f

0800c240 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c240:	b590      	push	{r4, r7, lr}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c24c:	2300      	movs	r3, #0
 800c24e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	7f1b      	ldrb	r3, [r3, #28]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d101      	bne.n	800c25c <HAL_RTC_SetDate+0x1c>
 800c258:	2302      	movs	r3, #2
 800c25a:	e06f      	b.n	800c33c <HAL_RTC_SetDate+0xfc>
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2201      	movs	r2, #1
 800c260:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2202      	movs	r2, #2
 800c266:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d10e      	bne.n	800c28c <HAL_RTC_SetDate+0x4c>
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	785b      	ldrb	r3, [r3, #1]
 800c272:	f003 0310 	and.w	r3, r3, #16
 800c276:	2b00      	cmp	r3, #0
 800c278:	d008      	beq.n	800c28c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	785b      	ldrb	r3, [r3, #1]
 800c27e:	f023 0310 	bic.w	r3, r3, #16
 800c282:	b2db      	uxtb	r3, r3
 800c284:	330a      	adds	r3, #10
 800c286:	b2da      	uxtb	r2, r3
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d11c      	bne.n	800c2cc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	78db      	ldrb	r3, [r3, #3]
 800c296:	4618      	mov	r0, r3
 800c298:	f000 fa02 	bl	800c6a0 <RTC_ByteToBcd2>
 800c29c:	4603      	mov	r3, r0
 800c29e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	785b      	ldrb	r3, [r3, #1]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f000 f9fb 	bl	800c6a0 <RTC_ByteToBcd2>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2ae:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	789b      	ldrb	r3, [r3, #2]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f000 f9f3 	bl	800c6a0 <RTC_ByteToBcd2>
 800c2ba:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c2bc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	617b      	str	r3, [r7, #20]
 800c2ca:	e00e      	b.n	800c2ea <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	78db      	ldrb	r3, [r3, #3]
 800c2d0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	785b      	ldrb	r3, [r3, #1]
 800c2d6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2d8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c2de:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c2e6:	4313      	orrs	r3, r2
 800c2e8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	22ca      	movs	r2, #202	@ 0xca
 800c2f0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2253      	movs	r2, #83	@ 0x53
 800c2f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f000 f974 	bl	800c5e8 <RTC_EnterInitMode>
 800c300:	4603      	mov	r3, r0
 800c302:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c304:	7cfb      	ldrb	r3, [r7, #19]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10a      	bne.n	800c320 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	6979      	ldr	r1, [r7, #20]
 800c310:	4b0c      	ldr	r3, [pc, #48]	@ (800c344 <HAL_RTC_SetDate+0x104>)
 800c312:	400b      	ands	r3, r1
 800c314:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 f99d 	bl	800c656 <RTC_ExitInitMode>
 800c31c:	4603      	mov	r3, r0
 800c31e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c320:	7cfb      	ldrb	r3, [r7, #19]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d102      	bne.n	800c32c <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2201      	movs	r2, #1
 800c32a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	22ff      	movs	r2, #255	@ 0xff
 800c332:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	771a      	strb	r2, [r3, #28]

  return status;
 800c33a:	7cfb      	ldrb	r3, [r7, #19]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	371c      	adds	r7, #28
 800c340:	46bd      	mov	sp, r7
 800c342:	bd90      	pop	{r4, r7, pc}
 800c344:	00ffff3f 	.word	0x00ffff3f

0800c348 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c348:	b590      	push	{r4, r7, lr}
 800c34a:	b089      	sub	sp, #36	@ 0x24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c354:	2300      	movs	r3, #0
 800c356:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c358:	2300      	movs	r3, #0
 800c35a:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c35c:	2300      	movs	r3, #0
 800c35e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	7f1b      	ldrb	r3, [r3, #28]
 800c364:	2b01      	cmp	r3, #1
 800c366:	d101      	bne.n	800c36c <HAL_RTC_SetAlarm+0x24>
 800c368:	2302      	movs	r3, #2
 800c36a:	e113      	b.n	800c594 <HAL_RTC_SetAlarm+0x24c>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2201      	movs	r2, #1
 800c370:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2202      	movs	r2, #2
 800c376:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d137      	bne.n	800c3ee <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d102      	bne.n	800c392 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2200      	movs	r2, #0
 800c390:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	781b      	ldrb	r3, [r3, #0]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 f982 	bl	800c6a0 <RTC_ByteToBcd2>
 800c39c:	4603      	mov	r3, r0
 800c39e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	785b      	ldrb	r3, [r3, #1]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 f97b 	bl	800c6a0 <RTC_ByteToBcd2>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c3ae:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	789b      	ldrb	r3, [r3, #2]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f000 f973 	bl	800c6a0 <RTC_ByteToBcd2>
 800c3ba:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c3bc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	78db      	ldrb	r3, [r3, #3]
 800c3c4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c3c6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f000 f965 	bl	800c6a0 <RTC_ByteToBcd2>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_ALRMAR_PM_Pos)  | \
 800c3da:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c3e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	61fb      	str	r3, [r7, #28]
 800c3ec:	e023      	b.n	800c436 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d102      	bne.n	800c402 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2200      	movs	r2, #0
 800c400:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	785b      	ldrb	r3, [r3, #1]
 800c40c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c40e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c410:	68ba      	ldr	r2, [r7, #8]
 800c412:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c414:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	78db      	ldrb	r3, [r3, #3]
 800c41a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c41c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c424:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos)  | \
 800c426:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c42c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c432:	4313      	orrs	r3, r2
 800c434:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c43e:	4313      	orrs	r3, r2
 800c440:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	22ca      	movs	r2, #202	@ 0xca
 800c448:	625a      	str	r2, [r3, #36]	@ 0x24
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	2253      	movs	r2, #83	@ 0x53
 800c450:	625a      	str	r2, [r3, #36]	@ 0x24

  if (sAlarm->Alarm == RTC_ALARM_A)
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c45a:	d148      	bne.n	800c4ee <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	689a      	ldr	r2, [r3, #8]
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c46a:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	689a      	ldr	r2, [r3, #8]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c47a:	609a      	str	r2, [r3, #8]

    /* Clear Alarm A flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	b2da      	uxtb	r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800c48c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c48e:	f7fa f81f 	bl	80064d0 <HAL_GetTick>
 800c492:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c494:	e013      	b.n	800c4be <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c496:	f7fa f81b 	bl	80064d0 <HAL_GetTick>
 800c49a:	4602      	mov	r2, r0
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c4a4:	d90b      	bls.n	800c4be <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	22ff      	movs	r2, #255	@ 0xff
 800c4ac:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2203      	movs	r2, #3
 800c4b2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	e06a      	b.n	800c594 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	f003 0301 	and.w	r3, r3, #1
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d0e4      	beq.n	800c496 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    /* Configure Alarm A register */
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	69fa      	ldr	r2, [r7, #28]
 800c4d2:	61da      	str	r2, [r3, #28]
    /* Configure Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable Alarm A */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	689a      	ldr	r2, [r3, #8]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c4ea:	609a      	str	r2, [r3, #8]
 800c4ec:	e047      	b.n	800c57e <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	689a      	ldr	r2, [r3, #8]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c4fc:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	689a      	ldr	r2, [r3, #8]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c50c:	609a      	str	r2, [r3, #8]

    /* Clear Alarm B flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	b2da      	uxtb	r2, r3
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800c51e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c520:	f7f9 ffd6 	bl	80064d0 <HAL_GetTick>
 800c524:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c526:	e013      	b.n	800c550 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c528:	f7f9 ffd2 	bl	80064d0 <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	69bb      	ldr	r3, [r7, #24]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c536:	d90b      	bls.n	800c550 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	22ff      	movs	r2, #255	@ 0xff
 800c53e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2203      	movs	r2, #3
 800c544:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e021      	b.n	800c594 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	68db      	ldr	r3, [r3, #12]
 800c556:	f003 0302 	and.w	r3, r3, #2
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d0e4      	beq.n	800c528 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    /* Configure Alarm B register */
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	69fa      	ldr	r2, [r7, #28]
 800c564:	621a      	str	r2, [r3, #32]
    /* Configure Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Enable Alarm B */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	689a      	ldr	r2, [r3, #8]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c57c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	22ff      	movs	r2, #255	@ 0xff
 800c584:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	2201      	movs	r2, #1
 800c58a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3724      	adds	r7, #36	@ 0x24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd90      	pop	{r4, r7, pc}

0800c59c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a0d      	ldr	r2, [pc, #52]	@ (800c5e4 <HAL_RTC_WaitForSynchro+0x48>)
 800c5ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c5b0:	f7f9 ff8e 	bl	80064d0 <HAL_GetTick>
 800c5b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c5b6:	e009      	b.n	800c5cc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c5b8:	f7f9 ff8a 	bl	80064d0 <HAL_GetTick>
 800c5bc:	4602      	mov	r2, r0
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	1ad3      	subs	r3, r2, r3
 800c5c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c5c6:	d901      	bls.n	800c5cc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c5c8:	2303      	movs	r3, #3
 800c5ca:	e007      	b.n	800c5dc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
 800c5d2:	f003 0320 	and.w	r3, r3, #32
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0ee      	beq.n	800c5b8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}
 800c5e4:	0001ff5f 	.word	0x0001ff5f

0800c5e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	68db      	ldr	r3, [r3, #12]
 800c5fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c602:	2b00      	cmp	r3, #0
 800c604:	d122      	bne.n	800c64c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68da      	ldr	r2, [r3, #12]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c614:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c616:	f7f9 ff5b 	bl	80064d0 <HAL_GetTick>
 800c61a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c61c:	e00c      	b.n	800c638 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c61e:	f7f9 ff57 	bl	80064d0 <HAL_GetTick>
 800c622:	4602      	mov	r2, r0
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c62c:	d904      	bls.n	800c638 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2204      	movs	r2, #4
 800c632:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c634:	2301      	movs	r3, #1
 800c636:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c642:	2b00      	cmp	r3, #0
 800c644:	d102      	bne.n	800c64c <RTC_EnterInitMode+0x64>
 800c646:	7bfb      	ldrb	r3, [r7, #15]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d1e8      	bne.n	800c61e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b084      	sub	sp, #16
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c65e:	2300      	movs	r3, #0
 800c660:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68da      	ldr	r2, [r3, #12]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c670:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	f003 0320 	and.w	r3, r3, #32
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10a      	bne.n	800c696 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f7ff ff8b 	bl	800c59c <HAL_RTC_WaitForSynchro>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d004      	beq.n	800c696 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2204      	movs	r2, #4
 800c690:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c696:	7bfb      	ldrb	r3, [r7, #15]
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c6ae:	e005      	b.n	800c6bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c6b6:	79fb      	ldrb	r3, [r7, #7]
 800c6b8:	3b0a      	subs	r3, #10
 800c6ba:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c6bc:	79fb      	ldrb	r3, [r7, #7]
 800c6be:	2b09      	cmp	r3, #9
 800c6c0:	d8f6      	bhi.n	800c6b0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	011b      	lsls	r3, r3, #4
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	79fb      	ldrb	r3, [r7, #7]
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	b2db      	uxtb	r3, r3
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3714      	adds	r7, #20
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b087      	sub	sp, #28
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	7f1b      	ldrb	r3, [r3, #28]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d101      	bne.n	800c6f8 <HAL_RTCEx_SetTimeStamp+0x1c>
 800c6f4:	2302      	movs	r3, #2
 800c6f6:	e050      	b.n	800c79a <HAL_RTCEx_SetTimeStamp+0xbe>
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2202      	movs	r2, #2
 800c702:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f022 0206 	bic.w	r2, r2, #6
 800c712:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	430a      	orrs	r2, r1
 800c722:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	4b1f      	ldr	r3, [pc, #124]	@ (800c7a8 <HAL_RTCEx_SetTimeStamp+0xcc>)
 800c72c:	4013      	ands	r3, r2
 800c72e:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 800c730:	697a      	ldr	r2, [r7, #20]
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	4313      	orrs	r3, r2
 800c736:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	22ca      	movs	r2, #202	@ 0xca
 800c73e:	625a      	str	r2, [r3, #36]	@ 0x24
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2253      	movs	r2, #83	@ 0x53
 800c746:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	697a      	ldr	r2, [r7, #20]
 800c74e:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	b2da      	uxtb	r2, r3
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 800c760:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	b2da      	uxtb	r2, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 800c772:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	689a      	ldr	r2, [r3, #8]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c782:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	22ff      	movs	r2, #255	@ 0xff
 800c78a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2201      	movs	r2, #1
 800c790:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	371c      	adds	r7, #28
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	fffff7f7 	.word	0xfffff7f7

0800c7ac <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b088      	sub	sp, #32
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d101      	bne.n	800c7ca <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	e156      	b.n	800ca78 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d106      	bne.n	800c7e4 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f7f8 fd34 	bl	800524c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f95b 	bl	800caa8 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68db      	ldr	r3, [r3, #12]
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d00c      	beq.n	800c814 <HAL_SAI_Init+0x68>
 800c7fa:	2b02      	cmp	r3, #2
 800c7fc:	d80d      	bhi.n	800c81a <HAL_SAI_Init+0x6e>
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d002      	beq.n	800c808 <HAL_SAI_Init+0x5c>
 800c802:	2b01      	cmp	r3, #1
 800c804:	d003      	beq.n	800c80e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800c806:	e008      	b.n	800c81a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	61fb      	str	r3, [r7, #28]
      break;
 800c80c:	e006      	b.n	800c81c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800c80e:	2310      	movs	r3, #16
 800c810:	61fb      	str	r3, [r7, #28]
      break;
 800c812:	e003      	b.n	800c81c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800c814:	2320      	movs	r3, #32
 800c816:	61fb      	str	r3, [r7, #28]
      break;
 800c818:	e000      	b.n	800c81c <HAL_SAI_Init+0x70>
      break;
 800c81a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	2b03      	cmp	r3, #3
 800c822:	d81e      	bhi.n	800c862 <HAL_SAI_Init+0xb6>
 800c824:	a201      	add	r2, pc, #4	@ (adr r2, 800c82c <HAL_SAI_Init+0x80>)
 800c826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c82a:	bf00      	nop
 800c82c:	0800c83d 	.word	0x0800c83d
 800c830:	0800c843 	.word	0x0800c843
 800c834:	0800c84b 	.word	0x0800c84b
 800c838:	0800c853 	.word	0x0800c853
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c840:	e010      	b.n	800c864 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800c842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c846:	617b      	str	r3, [r7, #20]
    }
    break;
 800c848:	e00c      	b.n	800c864 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c84a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c84e:	617b      	str	r3, [r7, #20]
    }
    break;
 800c850:	e008      	b.n	800c864 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c852:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c856:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	f043 0301 	orr.w	r3, r3, #1
 800c85e:	61fb      	str	r3, [r7, #28]
    }
    break;
 800c860:	e000      	b.n	800c864 <HAL_SAI_Init+0xb8>
    default:
      break;
 800c862:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4a85      	ldr	r2, [pc, #532]	@ (800ca80 <HAL_SAI_Init+0x2d4>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d004      	beq.n	800c878 <HAL_SAI_Init+0xcc>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a84      	ldr	r2, [pc, #528]	@ (800ca84 <HAL_SAI_Init+0x2d8>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d103      	bne.n	800c880 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800c878:	4a83      	ldr	r2, [pc, #524]	@ (800ca88 <HAL_SAI_Init+0x2dc>)
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	6013      	str	r3, [r2, #0]
 800c87e:	e002      	b.n	800c886 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800c880:	4a82      	ldr	r2, [pc, #520]	@ (800ca8c <HAL_SAI_Init+0x2e0>)
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	69db      	ldr	r3, [r3, #28]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d04c      	beq.n	800c928 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a7a      	ldr	r2, [pc, #488]	@ (800ca80 <HAL_SAI_Init+0x2d4>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d004      	beq.n	800c8a6 <HAL_SAI_Init+0xfa>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a78      	ldr	r2, [pc, #480]	@ (800ca84 <HAL_SAI_Init+0x2d8>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d104      	bne.n	800c8b0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c8a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800c8aa:	f7ff fa6d 	bl	800bd88 <HAL_RCCEx_GetPeriphCLKFreq>
 800c8ae:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a76      	ldr	r2, [pc, #472]	@ (800ca90 <HAL_SAI_Init+0x2e4>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d004      	beq.n	800c8c4 <HAL_SAI_Init+0x118>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a75      	ldr	r2, [pc, #468]	@ (800ca94 <HAL_SAI_Init+0x2e8>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d104      	bne.n	800c8ce <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c8c4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800c8c8:	f7ff fa5e 	bl	800bd88 <HAL_RCCEx_GetPeriphCLKFreq>
 800c8cc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	4413      	add	r3, r2
 800c8d6:	005b      	lsls	r3, r3, #1
 800c8d8:	461a      	mov	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	69db      	ldr	r3, [r3, #28]
 800c8de:	025b      	lsls	r3, r3, #9
 800c8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8e4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	4a6b      	ldr	r2, [pc, #428]	@ (800ca98 <HAL_SAI_Init+0x2ec>)
 800c8ea:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ee:	08da      	lsrs	r2, r3, #3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800c8f4:	68f9      	ldr	r1, [r7, #12]
 800c8f6:	4b68      	ldr	r3, [pc, #416]	@ (800ca98 <HAL_SAI_Init+0x2ec>)
 800c8f8:	fba3 2301 	umull	r2, r3, r3, r1
 800c8fc:	08da      	lsrs	r2, r3, #3
 800c8fe:	4613      	mov	r3, r2
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	4413      	add	r3, r2
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	1aca      	subs	r2, r1, r3
 800c908:	2a08      	cmp	r2, #8
 800c90a:	d904      	bls.n	800c916 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a1b      	ldr	r3, [r3, #32]
 800c910:	1c5a      	adds	r2, r3, #1
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c91a:	2b04      	cmp	r3, #4
 800c91c:	d104      	bne.n	800c928 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a1b      	ldr	r3, [r3, #32]
 800c922:	085a      	lsrs	r2, r3, #1
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d003      	beq.n	800c938 <HAL_SAI_Init+0x18c>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	2b02      	cmp	r3, #2
 800c936:	d109      	bne.n	800c94c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d101      	bne.n	800c944 <HAL_SAI_Init+0x198>
 800c940:	2300      	movs	r3, #0
 800c942:	e001      	b.n	800c948 <HAL_SAI_Init+0x19c>
 800c944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c948:	61bb      	str	r3, [r7, #24]
 800c94a:	e008      	b.n	800c95e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c950:	2b01      	cmp	r3, #1
 800c952:	d102      	bne.n	800c95a <HAL_SAI_Init+0x1ae>
 800c954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c958:	e000      	b.n	800c95c <HAL_SAI_Init+0x1b0>
 800c95a:	2300      	movs	r3, #0
 800c95c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6819      	ldr	r1, [r3, #0]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681a      	ldr	r2, [r3, #0]
 800c968:	4b4c      	ldr	r3, [pc, #304]	@ (800ca9c <HAL_SAI_Init+0x2f0>)
 800c96a:	400b      	ands	r3, r1
 800c96c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6819      	ldr	r1, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c97c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c982:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c988:	431a      	orrs	r2, r3
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 800c996:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800c9a2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a1b      	ldr	r3, [r3, #32]
 800c9a8:	051b      	lsls	r3, r3, #20
 800c9aa:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6859      	ldr	r1, [r3, #4]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	4b38      	ldr	r3, [pc, #224]	@ (800caa0 <HAL_SAI_Init+0x2f4>)
 800c9c0:	400b      	ands	r3, r1
 800c9c2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6859      	ldr	r1, [r3, #4]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	699a      	ldr	r2, [r3, #24]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d2:	431a      	orrs	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d8:	431a      	orrs	r2, r3
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	430a      	orrs	r2, r1
 800c9e0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6899      	ldr	r1, [r3, #8]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	4b2d      	ldr	r3, [pc, #180]	@ (800caa4 <HAL_SAI_Init+0x2f8>)
 800c9ee:	400b      	ands	r3, r1
 800c9f0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	6899      	ldr	r1, [r3, #8]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9fc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ca02:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 800ca08:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800ca0e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca14:	3b01      	subs	r3, #1
 800ca16:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800ca18:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	430a      	orrs	r2, r1
 800ca20:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68d9      	ldr	r1, [r3, #12]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800ca30:	400b      	ands	r3, r1
 800ca32:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68d9      	ldr	r1, [r3, #12]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca42:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ca48:	041b      	lsls	r3, r3, #16
 800ca4a:	431a      	orrs	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca50:	3b01      	subs	r3, #1
 800ca52:	021b      	lsls	r3, r3, #8
 800ca54:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	430a      	orrs	r2, r1
 800ca5c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800ca76:	2300      	movs	r3, #0
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3720      	adds	r7, #32
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	40015804 	.word	0x40015804
 800ca84:	40015824 	.word	0x40015824
 800ca88:	40015800 	.word	0x40015800
 800ca8c:	40015c00 	.word	0x40015c00
 800ca90:	40015c04 	.word	0x40015c04
 800ca94:	40015c24 	.word	0x40015c24
 800ca98:	cccccccd 	.word	0xcccccccd
 800ca9c:	ff05c010 	.word	0xff05c010
 800caa0:	ffff1ff0 	.word	0xffff1ff0
 800caa4:	fff88000 	.word	0xfff88000

0800caa8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800cab0:	4b17      	ldr	r3, [pc, #92]	@ (800cb10 <SAI_Disable+0x68>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a17      	ldr	r2, [pc, #92]	@ (800cb14 <SAI_Disable+0x6c>)
 800cab6:	fba2 2303 	umull	r2, r3, r2, r3
 800caba:	0b1b      	lsrs	r3, r3, #12
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800cac0:	2300      	movs	r3, #0
 800cac2:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800cad2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	1e5a      	subs	r2, r3, #1
 800cad8:	60fa      	str	r2, [r7, #12]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d10a      	bne.n	800caf4 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cae4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800caee:	2303      	movs	r3, #3
 800caf0:	72fb      	strb	r3, [r7, #11]
      break;
 800caf2:	e006      	b.n	800cb02 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d1e8      	bne.n	800cad4 <SAI_Disable+0x2c>

  return status;
 800cb02:	7afb      	ldrb	r3, [r7, #11]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3714      	adds	r7, #20
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	20000020 	.word	0x20000020
 800cb14:	95cbec1b 	.word	0x95cbec1b

0800cb18 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e022      	b.n	800cb70 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d105      	bne.n	800cb42 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7f7 ff9f 	bl	8004a80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	2203      	movs	r2, #3
 800cb46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f000 f814 	bl	800cb78 <HAL_SD_InitCard>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d001      	beq.n	800cb5a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e00a      	b.n	800cb70 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb78:	b5b0      	push	{r4, r5, r7, lr}
 800cb7a:	b08e      	sub	sp, #56	@ 0x38
 800cb7c:	af04      	add	r7, sp, #16
 800cb7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb80:	2300      	movs	r3, #0
 800cb82:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800cb84:	2300      	movs	r3, #0
 800cb86:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cb90:	2300      	movs	r3, #0
 800cb92:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800cb94:	2376      	movs	r3, #118	@ 0x76
 800cb96:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681d      	ldr	r5, [r3, #0]
 800cb9c:	466c      	mov	r4, sp
 800cb9e:	f107 0318 	add.w	r3, r7, #24
 800cba2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cbaa:	f107 030c 	add.w	r3, r7, #12
 800cbae:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	f004 f809 	bl	8010bc8 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cbc4:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f004 f846 	bl	8010c5c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cbde:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cbe0:	2002      	movs	r0, #2
 800cbe2:	f7f9 fc81 	bl	80064e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	f000 ff02 	bl	800d9f0 <SD_PowerON>
 800cbec:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d00b      	beq.n	800cc0c <HAL_SD_InitCard+0x94>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc02:	431a      	orrs	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e02e      	b.n	800cc6a <HAL_SD_InitCard+0xf2>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fe21 	bl	800d854 <SD_InitCard>
 800cc12:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d00b      	beq.n	800cc32 <HAL_SD_InitCard+0xba>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc28:	431a      	orrs	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e01b      	b.n	800cc6a <HAL_SD_InitCard+0xf2>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f004 f8a0 	bl	8010d80 <SDMMC_CmdBlockLength>
 800cc40:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00f      	beq.n	800cc68 <HAL_SD_InitCard+0xf0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4a09      	ldr	r2, [pc, #36]	@ (800cc74 <HAL_SD_InitCard+0xfc>)
 800cc4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	431a      	orrs	r2, r3
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800cc64:	2301      	movs	r3, #1
 800cc66:	e000      	b.n	800cc6a <HAL_SD_InitCard+0xf2>
  }

  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3728      	adds	r7, #40	@ 0x28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bdb0      	pop	{r4, r5, r7, pc}
 800cc72:	bf00      	nop
 800cc74:	004005ff 	.word	0x004005ff

0800cc78 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b092      	sub	sp, #72	@ 0x48
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
 800cc84:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc86:	f7f9 fc23 	bl	80064d0 <HAL_GetTick>
 800cc8a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d107      	bne.n	800ccaa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e1bd      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	f040 81b0 	bne.w	800d018 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	441a      	add	r2, r3
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d907      	bls.n	800ccdc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccd0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e1a4      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2203      	movs	r2, #3
 800cce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	2200      	movs	r2, #0
 800ccea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d002      	beq.n	800ccfa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf6:	025b      	lsls	r3, r3, #9
 800ccf8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	025b      	lsls	r3, r3, #9
 800cd04:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cd06:	2390      	movs	r3, #144	@ 0x90
 800cd08:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd0a:	2302      	movs	r3, #2
 800cd0c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cd12:	2301      	movs	r3, #1
 800cd14:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f107 0214 	add.w	r2, r7, #20
 800cd1e:	4611      	mov	r1, r2
 800cd20:	4618      	mov	r0, r3
 800cd22:	f004 f801 	bl	8010d28 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d90a      	bls.n	800cd42 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2202      	movs	r2, #2
 800cd30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f004 f865 	bl	8010e08 <SDMMC_CmdReadMultiBlock>
 800cd3e:	6478      	str	r0, [r7, #68]	@ 0x44
 800cd40:	e009      	b.n	800cd56 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2201      	movs	r2, #1
 800cd46:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f004 f838 	bl	8010dc4 <SDMMC_CmdReadSingleBlock>
 800cd54:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d012      	beq.n	800cd82 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a7a      	ldr	r2, [pc, #488]	@ (800cf4c <HAL_SD_ReadBlocks+0x2d4>)
 800cd62:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cd68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd6a:	431a      	orrs	r2, r3
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e151      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd86:	e061      	b.n	800ce4c <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d03c      	beq.n	800ce10 <HAL_SD_ReadBlocks+0x198>
 800cd96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d039      	beq.n	800ce10 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cda0:	e033      	b.n	800ce0a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f003 ff3a 	bl	8010c20 <SDMMC_ReadFIFO>
 800cdac:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb0:	b2da      	uxtb	r2, r3
 800cdb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdb4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdb8:	3301      	adds	r3, #1
 800cdba:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cdbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cdc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	b2da      	uxtb	r2, r3
 800cdc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdca:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdce:	3301      	adds	r3, #1
 800cdd0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cdd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	0c1b      	lsrs	r3, r3, #16
 800cddc:	b2da      	uxtb	r2, r3
 800cdde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cde2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cde4:	3301      	adds	r3, #1
 800cde6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cde8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdea:	3b01      	subs	r3, #1
 800cdec:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	0e1b      	lsrs	r3, r3, #24
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdf6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdfa:	3301      	adds	r3, #1
 800cdfc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cdfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce00:	3b01      	subs	r3, #1
 800ce02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800ce04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce06:	3301      	adds	r3, #1
 800ce08:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce0c:	2b07      	cmp	r3, #7
 800ce0e:	d9c8      	bls.n	800cda2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce10:	f7f9 fb5e 	bl	80064d0 <HAL_GetTick>
 800ce14:	4602      	mov	r2, r0
 800ce16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d902      	bls.n	800ce26 <HAL_SD_ReadBlocks+0x1ae>
 800ce20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d112      	bne.n	800ce4c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a48      	ldr	r2, [pc, #288]	@ (800cf4c <HAL_SD_ReadBlocks+0x2d4>)
 800ce2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce32:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2200      	movs	r2, #0
 800ce46:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800ce48:	2303      	movs	r3, #3
 800ce4a:	e0ec      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce52:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d096      	beq.n	800cd88 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d022      	beq.n	800ceae <HAL_SD_ReadBlocks+0x236>
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d91f      	bls.n	800ceae <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	d01b      	beq.n	800ceae <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f004 f82a 	bl	8010ed4 <SDMMC_CmdStopTransfer>
 800ce80:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d012      	beq.n	800ceae <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a2f      	ldr	r2, [pc, #188]	@ (800cf4c <HAL_SD_ReadBlocks+0x2d4>)
 800ce8e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce96:	431a      	orrs	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e0bb      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ceb4:	f003 0308 	and.w	r3, r3, #8
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d012      	beq.n	800cee2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a22      	ldr	r2, [pc, #136]	@ (800cf4c <HAL_SD_ReadBlocks+0x2d4>)
 800cec2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cec8:	f043 0208 	orr.w	r2, r3, #8
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2201      	movs	r2, #1
 800ced4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cede:	2301      	movs	r3, #1
 800cee0:	e0a1      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cee8:	f003 0302 	and.w	r3, r3, #2
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d012      	beq.n	800cf16 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a15      	ldr	r2, [pc, #84]	@ (800cf4c <HAL_SD_ReadBlocks+0x2d4>)
 800cef6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cefc:	f043 0202 	orr.w	r2, r3, #2
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cf12:	2301      	movs	r3, #1
 800cf14:	e087      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf1c:	f003 0320 	and.w	r3, r3, #32
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d064      	beq.n	800cfee <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a08      	ldr	r2, [pc, #32]	@ (800cf4c <HAL_SD_ReadBlocks+0x2d4>)
 800cf2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf30:	f043 0220 	orr.w	r2, r3, #32
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2200      	movs	r2, #0
 800cf44:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e06d      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
 800cf4a:	bf00      	nop
 800cf4c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4618      	mov	r0, r3
 800cf56:	f003 fe63 	bl	8010c20 <SDMMC_ReadFIFO>
 800cf5a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800cf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5e:	b2da      	uxtb	r2, r3
 800cf60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf62:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf66:	3301      	adds	r3, #1
 800cf68:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf72:	0a1b      	lsrs	r3, r3, #8
 800cf74:	b2da      	uxtb	r2, r3
 800cf76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf78:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf7c:	3301      	adds	r3, #1
 800cf7e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf82:	3b01      	subs	r3, #1
 800cf84:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cf86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf88:	0c1b      	lsrs	r3, r3, #16
 800cf8a:	b2da      	uxtb	r2, r3
 800cf8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf8e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cf90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf92:	3301      	adds	r3, #1
 800cf94:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cf96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cf9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9e:	0e1b      	lsrs	r3, r3, #24
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cfa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cfac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cfb2:	f7f9 fa8d 	bl	80064d0 <HAL_GetTick>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d902      	bls.n	800cfc8 <HAL_SD_ReadBlocks+0x350>
 800cfc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d112      	bne.n	800cfee <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a18      	ldr	r2, [pc, #96]	@ (800d030 <HAL_SD_ReadBlocks+0x3b8>)
 800cfce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cfd4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	e01b      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <HAL_SD_ReadBlocks+0x38a>
 800cffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1a6      	bne.n	800cf50 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d00a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2201      	movs	r2, #1
 800d010:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	e006      	b.n	800d026 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d01c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d024:	2301      	movs	r3, #1
  }
}
 800d026:	4618      	mov	r0, r3
 800d028:	3748      	adds	r7, #72	@ 0x48
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	004005ff 	.word	0x004005ff

0800d034 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b092      	sub	sp, #72	@ 0x48
 800d038:	af00      	add	r7, sp, #0
 800d03a:	60f8      	str	r0, [r7, #12]
 800d03c:	60b9      	str	r1, [r7, #8]
 800d03e:	607a      	str	r2, [r7, #4]
 800d040:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d042:	f7f9 fa45 	bl	80064d0 <HAL_GetTick>
 800d046:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d107      	bne.n	800d066 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d05a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d062:	2301      	movs	r3, #1
 800d064:	e165      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2b01      	cmp	r3, #1
 800d070:	f040 8158 	bne.w	800d324 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2200      	movs	r2, #0
 800d078:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d07a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	441a      	add	r2, r3
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d084:	429a      	cmp	r2, r3
 800d086:	d907      	bls.n	800d098 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d08c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	e14c      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2203      	movs	r2, #3
 800d09c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d002      	beq.n	800d0b6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b2:	025b      	lsls	r3, r3, #9
 800d0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d0b6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ba:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	025b      	lsls	r3, r3, #9
 800d0c0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d0c2:	2390      	movs	r3, #144	@ 0x90
 800d0c4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f107 0218 	add.w	r2, r7, #24
 800d0da:	4611      	mov	r1, r2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f003 fe23 	bl	8010d28 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d0e2:	683b      	ldr	r3, [r7, #0]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d90a      	bls.n	800d0fe <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2220      	movs	r2, #32
 800d0ec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f003 fecb 	bl	8010e90 <SDMMC_CmdWriteMultiBlock>
 800d0fa:	6478      	str	r0, [r7, #68]	@ 0x44
 800d0fc:	e009      	b.n	800d112 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2210      	movs	r2, #16
 800d102:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d10a:	4618      	mov	r0, r3
 800d10c:	f003 fe9e 	bl	8010e4c <SDMMC_CmdWriteSingleBlock>
 800d110:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d112:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d114:	2b00      	cmp	r3, #0
 800d116:	d012      	beq.n	800d13e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4a87      	ldr	r2, [pc, #540]	@ (800d33c <HAL_SD_WriteBlocks+0x308>)
 800d11e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d126:	431a      	orrs	r2, r3
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2201      	movs	r2, #1
 800d130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e0f9      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d142:	e065      	b.n	800d210 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d14a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d040      	beq.n	800d1d4 <HAL_SD_WriteBlocks+0x1a0>
 800d152:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d154:	2b00      	cmp	r3, #0
 800d156:	d03d      	beq.n	800d1d4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d158:	2300      	movs	r3, #0
 800d15a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d15c:	e037      	b.n	800d1ce <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d166:	3301      	adds	r3, #1
 800d168:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d16a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d16c:	3b01      	subs	r3, #1
 800d16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d170:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	021a      	lsls	r2, r3, #8
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	4313      	orrs	r3, r2
 800d17a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d17e:	3301      	adds	r3, #1
 800d180:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d184:	3b01      	subs	r3, #1
 800d186:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	041a      	lsls	r2, r3, #16
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	4313      	orrs	r3, r2
 800d192:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d196:	3301      	adds	r3, #1
 800d198:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d19c:	3b01      	subs	r3, #1
 800d19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d1a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	061a      	lsls	r2, r3, #24
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800d1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f107 0214 	add.w	r2, r7, #20
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f003 fd39 	bl	8010c3a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d1c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d0:	2b07      	cmp	r3, #7
 800d1d2:	d9c4      	bls.n	800d15e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d1d4:	f7f9 f97c 	bl	80064d0 <HAL_GetTick>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1dc:	1ad3      	subs	r3, r2, r3
 800d1de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d902      	bls.n	800d1ea <HAL_SD_WriteBlocks+0x1b6>
 800d1e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d112      	bne.n	800d210 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a53      	ldr	r2, [pc, #332]	@ (800d33c <HAL_SD_WriteBlocks+0x308>)
 800d1f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1f8:	431a      	orrs	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2201      	movs	r2, #1
 800d202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800d20c:	2303      	movs	r3, #3
 800d20e:	e090      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d216:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d092      	beq.n	800d144 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d224:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d022      	beq.n	800d272 <HAL_SD_WriteBlocks+0x23e>
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d91f      	bls.n	800d272 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d236:	2b03      	cmp	r3, #3
 800d238:	d01b      	beq.n	800d272 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	4618      	mov	r0, r3
 800d240:	f003 fe48 	bl	8010ed4 <SDMMC_CmdStopTransfer>
 800d244:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d012      	beq.n	800d272 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a3a      	ldr	r2, [pc, #232]	@ (800d33c <HAL_SD_WriteBlocks+0x308>)
 800d252:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d25a:	431a      	orrs	r2, r3
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2201      	movs	r2, #1
 800d264:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2200      	movs	r2, #0
 800d26c:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d26e:	2301      	movs	r3, #1
 800d270:	e05f      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d278:	f003 0308 	and.w	r3, r3, #8
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d012      	beq.n	800d2a6 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a2d      	ldr	r2, [pc, #180]	@ (800d33c <HAL_SD_WriteBlocks+0x308>)
 800d286:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d28c:	f043 0208 	orr.w	r2, r3, #8
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2201      	movs	r2, #1
 800d298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	e045      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2ac:	f003 0302 	and.w	r3, r3, #2
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d012      	beq.n	800d2da <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a20      	ldr	r2, [pc, #128]	@ (800d33c <HAL_SD_WriteBlocks+0x308>)
 800d2ba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2c0:	f043 0202 	orr.w	r2, r3, #2
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e02b      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2e0:	f003 0310 	and.w	r3, r3, #16
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d012      	beq.n	800d30e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a13      	ldr	r2, [pc, #76]	@ (800d33c <HAL_SD_WriteBlocks+0x308>)
 800d2ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2f4:	f043 0210 	orr.w	r2, r3, #16
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2200      	movs	r2, #0
 800d308:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d30a:	2301      	movs	r3, #1
 800d30c:	e011      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d316:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d320:	2300      	movs	r3, #0
 800d322:	e006      	b.n	800d332 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d328:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d330:	2301      	movs	r3, #1
  }
}
 800d332:	4618      	mov	r0, r3
 800d334:	3748      	adds	r7, #72	@ 0x48
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	004005ff 	.word	0x004005ff

0800d340 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d34e:	0f9b      	lsrs	r3, r3, #30
 800d350:	b2da      	uxtb	r2, r3
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d35a:	0e9b      	lsrs	r3, r3, #26
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	f003 030f 	and.w	r3, r3, #15
 800d362:	b2da      	uxtb	r2, r3
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d36c:	0e1b      	lsrs	r3, r3, #24
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	f003 0303 	and.w	r3, r3, #3
 800d374:	b2da      	uxtb	r2, r3
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d37e:	0c1b      	lsrs	r3, r3, #16
 800d380:	b2da      	uxtb	r2, r3
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d38a:	0a1b      	lsrs	r3, r3, #8
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d396:	b2da      	uxtb	r2, r3
 800d398:	683b      	ldr	r3, [r7, #0]
 800d39a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3a0:	0d1b      	lsrs	r3, r3, #20
 800d3a2:	b29a      	uxth	r2, r3
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3ac:	0c1b      	lsrs	r3, r3, #16
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	f003 030f 	and.w	r3, r3, #15
 800d3b4:	b2da      	uxtb	r2, r3
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3be:	0bdb      	lsrs	r3, r3, #15
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	f003 0301 	and.w	r3, r3, #1
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3d0:	0b9b      	lsrs	r3, r3, #14
 800d3d2:	b2db      	uxtb	r3, r3
 800d3d4:	f003 0301 	and.w	r3, r3, #1
 800d3d8:	b2da      	uxtb	r2, r3
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3e2:	0b5b      	lsrs	r3, r3, #13
 800d3e4:	b2db      	uxtb	r3, r3
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3f4:	0b1b      	lsrs	r3, r3, #12
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	b2da      	uxtb	r2, r3
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2200      	movs	r2, #0
 800d406:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d163      	bne.n	800d4d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d414:	009a      	lsls	r2, r3, #2
 800d416:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d41a:	4013      	ands	r3, r2
 800d41c:	687a      	ldr	r2, [r7, #4]
 800d41e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d420:	0f92      	lsrs	r2, r2, #30
 800d422:	431a      	orrs	r2, r3
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d42c:	0edb      	lsrs	r3, r3, #27
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	f003 0307 	and.w	r3, r3, #7
 800d434:	b2da      	uxtb	r2, r3
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d43e:	0e1b      	lsrs	r3, r3, #24
 800d440:	b2db      	uxtb	r3, r3
 800d442:	f003 0307 	and.w	r3, r3, #7
 800d446:	b2da      	uxtb	r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d450:	0d5b      	lsrs	r3, r3, #21
 800d452:	b2db      	uxtb	r3, r3
 800d454:	f003 0307 	and.w	r3, r3, #7
 800d458:	b2da      	uxtb	r2, r3
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d462:	0c9b      	lsrs	r3, r3, #18
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f003 0307 	and.w	r3, r3, #7
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d474:	0bdb      	lsrs	r3, r3, #15
 800d476:	b2db      	uxtb	r3, r3
 800d478:	f003 0307 	and.w	r3, r3, #7
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	691b      	ldr	r3, [r3, #16]
 800d486:	1c5a      	adds	r2, r3, #1
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	7e1b      	ldrb	r3, [r3, #24]
 800d490:	b2db      	uxtb	r3, r3
 800d492:	f003 0307 	and.w	r3, r3, #7
 800d496:	3302      	adds	r3, #2
 800d498:	2201      	movs	r2, #1
 800d49a:	fa02 f303 	lsl.w	r3, r2, r3
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d4a2:	fb03 f202 	mul.w	r2, r3, r2
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	7a1b      	ldrb	r3, [r3, #8]
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	f003 030f 	and.w	r3, r3, #15
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	409a      	lsls	r2, r3
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4c0:	687a      	ldr	r2, [r7, #4]
 800d4c2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d4c4:	0a52      	lsrs	r2, r2, #9
 800d4c6:	fb03 f202 	mul.w	r2, r3, r2
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4d4:	661a      	str	r2, [r3, #96]	@ 0x60
 800d4d6:	e031      	b.n	800d53c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d11d      	bne.n	800d51c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4e4:	041b      	lsls	r3, r3, #16
 800d4e6:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4ee:	0c1b      	lsrs	r3, r3, #16
 800d4f0:	431a      	orrs	r2, r3
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	691b      	ldr	r3, [r3, #16]
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	029a      	lsls	r2, r3, #10
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d510:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	661a      	str	r2, [r3, #96]	@ 0x60
 800d51a:	e00f      	b.n	800d53c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	4a58      	ldr	r2, [pc, #352]	@ (800d684 <HAL_SD_GetCardCSD+0x344>)
 800d522:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d528:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2201      	movs	r2, #1
 800d534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	e09d      	b.n	800d678 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d540:	0b9b      	lsrs	r3, r3, #14
 800d542:	b2db      	uxtb	r3, r3
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d552:	09db      	lsrs	r3, r3, #7
 800d554:	b2db      	uxtb	r3, r3
 800d556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d55a:	b2da      	uxtb	r2, r3
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d564:	b2db      	uxtb	r3, r3
 800d566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d56a:	b2da      	uxtb	r2, r3
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d574:	0fdb      	lsrs	r3, r3, #31
 800d576:	b2da      	uxtb	r2, r3
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d580:	0f5b      	lsrs	r3, r3, #29
 800d582:	b2db      	uxtb	r3, r3
 800d584:	f003 0303 	and.w	r3, r3, #3
 800d588:	b2da      	uxtb	r2, r3
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d592:	0e9b      	lsrs	r3, r3, #26
 800d594:	b2db      	uxtb	r3, r3
 800d596:	f003 0307 	and.w	r3, r3, #7
 800d59a:	b2da      	uxtb	r2, r3
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5a4:	0d9b      	lsrs	r3, r3, #22
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	f003 030f 	and.w	r3, r3, #15
 800d5ac:	b2da      	uxtb	r2, r3
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5b6:	0d5b      	lsrs	r3, r3, #21
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	f003 0301 	and.w	r3, r3, #1
 800d5be:	b2da      	uxtb	r2, r3
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5d2:	0c1b      	lsrs	r3, r3, #16
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5e6:	0bdb      	lsrs	r3, r3, #15
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	f003 0301 	and.w	r3, r3, #1
 800d5ee:	b2da      	uxtb	r2, r3
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5fa:	0b9b      	lsrs	r3, r3, #14
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	b2da      	uxtb	r2, r3
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d60e:	0b5b      	lsrs	r3, r3, #13
 800d610:	b2db      	uxtb	r3, r3
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	b2da      	uxtb	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d622:	0b1b      	lsrs	r3, r3, #12
 800d624:	b2db      	uxtb	r3, r3
 800d626:	f003 0301 	and.w	r3, r3, #1
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d636:	0a9b      	lsrs	r3, r3, #10
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	f003 0303 	and.w	r3, r3, #3
 800d63e:	b2da      	uxtb	r2, r3
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d64a:	0a1b      	lsrs	r3, r3, #8
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	f003 0303 	and.w	r3, r3, #3
 800d652:	b2da      	uxtb	r2, r3
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d65e:	085b      	lsrs	r3, r3, #1
 800d660:	b2db      	uxtb	r3, r3
 800d662:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d666:	b2da      	uxtb	r2, r3
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	370c      	adds	r7, #12
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	004005ff 	.word	0x004005ff

0800d688 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d6e0:	b5b0      	push	{r4, r5, r7, lr}
 800d6e2:	b08e      	sub	sp, #56	@ 0x38
 800d6e4:	af04      	add	r7, sp, #16
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2203      	movs	r2, #3
 800d6f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6fc:	2b03      	cmp	r3, #3
 800d6fe:	d02e      	beq.n	800d75e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d706:	d106      	bne.n	800d716 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d70c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	639a      	str	r2, [r3, #56]	@ 0x38
 800d714:	e029      	b.n	800d76a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d71c:	d10a      	bne.n	800d734 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fa1c 	bl	800db5c <SD_WideBus_Enable>
 800d724:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	431a      	orrs	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	639a      	str	r2, [r3, #56]	@ 0x38
 800d732:	e01a      	b.n	800d76a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10a      	bne.n	800d750 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fa59 	bl	800dbf2 <SD_WideBus_Disable>
 800d740:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	431a      	orrs	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	639a      	str	r2, [r3, #56]	@ 0x38
 800d74e:	e00c      	b.n	800d76a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d754:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d75c:	e005      	b.n	800d76a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d762:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00b      	beq.n	800d78a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a26      	ldr	r2, [pc, #152]	@ (800d810 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d778:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2201      	movs	r2, #1
 800d77e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d788:	e01f      	b.n	800d7ca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	695b      	ldr	r3, [r3, #20]
 800d7a4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	699b      	ldr	r3, [r3, #24]
 800d7aa:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681d      	ldr	r5, [r3, #0]
 800d7b0:	466c      	mov	r4, sp
 800d7b2:	f107 0314 	add.w	r3, r7, #20
 800d7b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d7ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d7be:	f107 0308 	add.w	r3, r7, #8
 800d7c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	f003 f9ff 	bl	8010bc8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f003 fad4 	bl	8010d80 <SDMMC_CmdBlockLength>
 800d7d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7da:	6a3b      	ldr	r3, [r7, #32]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d00c      	beq.n	800d7fa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a0a      	ldr	r2, [pc, #40]	@ (800d810 <HAL_SD_ConfigWideBusOperation+0x130>)
 800d7e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7ec:	6a3b      	ldr	r3, [r7, #32]
 800d7ee:	431a      	orrs	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
 800d7f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800d802:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d806:	4618      	mov	r0, r3
 800d808:	3728      	adds	r7, #40	@ 0x28
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bdb0      	pop	{r4, r5, r7, pc}
 800d80e:	bf00      	nop
 800d810:	004005ff 	.word	0x004005ff

0800d814 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d81c:	2300      	movs	r3, #0
 800d81e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d820:	f107 030c 	add.w	r3, r7, #12
 800d824:	4619      	mov	r1, r3
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f970 	bl	800db0c <SD_SendStatus>
 800d82c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d005      	beq.n	800d840 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	431a      	orrs	r2, r3
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	0a5b      	lsrs	r3, r3, #9
 800d844:	f003 030f 	and.w	r3, r3, #15
 800d848:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d84a:	693b      	ldr	r3, [r7, #16]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3718      	adds	r7, #24
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d854:	b5b0      	push	{r4, r5, r7, lr}
 800d856:	b094      	sub	sp, #80	@ 0x50
 800d858:	af04      	add	r7, sp, #16
 800d85a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d85c:	2301      	movs	r3, #1
 800d85e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4618      	mov	r0, r3
 800d866:	f003 fa07 	bl	8010c78 <SDMMC_GetPowerState>
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d870:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d874:	e0b8      	b.n	800d9e8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	d02f      	beq.n	800d8de <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4618      	mov	r0, r3
 800d884:	f003 fc31 	bl	80110ea <SDMMC_CmdSendCID>
 800d888:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d001      	beq.n	800d894 <SD_InitCard+0x40>
    {
      return errorstate;
 800d890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d892:	e0a9      	b.n	800d9e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f003 fa31 	bl	8010d02 <SDMMC_GetResponse>
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2104      	movs	r1, #4
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f003 fa28 	bl	8010d02 <SDMMC_GetResponse>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2108      	movs	r1, #8
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f003 fa1f 	bl	8010d02 <SDMMC_GetResponse>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	210c      	movs	r1, #12
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f003 fa16 	bl	8010d02 <SDMMC_GetResponse>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8e2:	2b03      	cmp	r3, #3
 800d8e4:	d00d      	beq.n	800d902 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f107 020e 	add.w	r2, r7, #14
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f003 fc37 	bl	8011164 <SDMMC_CmdSetRelAdd>
 800d8f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d001      	beq.n	800d902 <SD_InitCard+0xae>
    {
      return errorstate;
 800d8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d900:	e072      	b.n	800d9e8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d906:	2b03      	cmp	r3, #3
 800d908:	d036      	beq.n	800d978 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d90a:	89fb      	ldrh	r3, [r7, #14]
 800d90c:	461a      	mov	r2, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d91a:	041b      	lsls	r3, r3, #16
 800d91c:	4619      	mov	r1, r3
 800d91e:	4610      	mov	r0, r2
 800d920:	f003 fc01 	bl	8011126 <SDMMC_CmdSendCSD>
 800d924:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d001      	beq.n	800d930 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d92e:	e05b      	b.n	800d9e8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2100      	movs	r1, #0
 800d936:	4618      	mov	r0, r3
 800d938:	f003 f9e3 	bl	8010d02 <SDMMC_GetResponse>
 800d93c:	4602      	mov	r2, r0
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2104      	movs	r1, #4
 800d948:	4618      	mov	r0, r3
 800d94a:	f003 f9da 	bl	8010d02 <SDMMC_GetResponse>
 800d94e:	4602      	mov	r2, r0
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2108      	movs	r1, #8
 800d95a:	4618      	mov	r0, r3
 800d95c:	f003 f9d1 	bl	8010d02 <SDMMC_GetResponse>
 800d960:	4602      	mov	r2, r0
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	210c      	movs	r1, #12
 800d96c:	4618      	mov	r0, r3
 800d96e:	f003 f9c8 	bl	8010d02 <SDMMC_GetResponse>
 800d972:	4602      	mov	r2, r0
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2104      	movs	r1, #4
 800d97e:	4618      	mov	r0, r3
 800d980:	f003 f9bf 	bl	8010d02 <SDMMC_GetResponse>
 800d984:	4603      	mov	r3, r0
 800d986:	0d1a      	lsrs	r2, r3, #20
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d98c:	f107 0310 	add.w	r3, r7, #16
 800d990:	4619      	mov	r1, r3
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7ff fcd4 	bl	800d340 <HAL_SD_GetCardCSD>
 800d998:	4603      	mov	r3, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d002      	beq.n	800d9a4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d99e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800d9a2:	e021      	b.n	800d9e8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6819      	ldr	r1, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d9ac:	041b      	lsls	r3, r3, #16
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	461c      	mov	r4, r3
 800d9b2:	4615      	mov	r5, r2
 800d9b4:	4622      	mov	r2, r4
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	4608      	mov	r0, r1
 800d9ba:	f003 faad 	bl	8010f18 <SDMMC_CmdSelDesel>
 800d9be:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d001      	beq.n	800d9ca <SD_InitCard+0x176>
  {
    return errorstate;
 800d9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9c8:	e00e      	b.n	800d9e8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681d      	ldr	r5, [r3, #0]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	466c      	mov	r4, sp
 800d9d2:	f103 0210 	add.w	r2, r3, #16
 800d9d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800d9d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d9dc:	3304      	adds	r3, #4
 800d9de:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d9e0:	4628      	mov	r0, r5
 800d9e2:	f003 f8f1 	bl	8010bc8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d9e6:	2300      	movs	r3, #0
}
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	3740      	adds	r7, #64	@ 0x40
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bdb0      	pop	{r4, r5, r7, pc}

0800d9f0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	617b      	str	r3, [r7, #20]
 800da00:	2300      	movs	r3, #0
 800da02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4618      	mov	r0, r3
 800da0a:	f003 faa8 	bl	8010f5e <SDMMC_CmdGoIdleState>
 800da0e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <SD_PowerON+0x2a>
  {
    return errorstate;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	e072      	b.n	800db00 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	4618      	mov	r0, r3
 800da20:	f003 fabb 	bl	8010f9a <SDMMC_CmdOperCond>
 800da24:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00d      	beq.n	800da48 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4618      	mov	r0, r3
 800da38:	f003 fa91 	bl	8010f5e <SDMMC_CmdGoIdleState>
 800da3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d004      	beq.n	800da4e <SD_PowerON+0x5e>
    {
      return errorstate;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	e05b      	b.n	800db00 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800da52:	2b01      	cmp	r3, #1
 800da54:	d137      	bne.n	800dac6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2100      	movs	r1, #0
 800da5c:	4618      	mov	r0, r3
 800da5e:	f003 fabb 	bl	8010fd8 <SDMMC_CmdAppCommand>
 800da62:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d02d      	beq.n	800dac6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da6a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800da6e:	e047      	b.n	800db00 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2100      	movs	r1, #0
 800da76:	4618      	mov	r0, r3
 800da78:	f003 faae 	bl	8010fd8 <SDMMC_CmdAppCommand>
 800da7c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <SD_PowerON+0x98>
    {
      return errorstate;
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	e03b      	b.n	800db00 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	491e      	ldr	r1, [pc, #120]	@ (800db08 <SD_PowerON+0x118>)
 800da8e:	4618      	mov	r0, r3
 800da90:	f003 fac4 	bl	801101c <SDMMC_CmdAppOperCommand>
 800da94:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da9c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800daa0:	e02e      	b.n	800db00 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2100      	movs	r1, #0
 800daa8:	4618      	mov	r0, r3
 800daaa:	f003 f92a 	bl	8010d02 <SDMMC_GetResponse>
 800daae:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	0fdb      	lsrs	r3, r3, #31
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d101      	bne.n	800dabc <SD_PowerON+0xcc>
 800dab8:	2301      	movs	r3, #1
 800daba:	e000      	b.n	800dabe <SD_PowerON+0xce>
 800dabc:	2300      	movs	r3, #0
 800dabe:	613b      	str	r3, [r7, #16]

    count++;
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	3301      	adds	r3, #1
 800dac4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dacc:	4293      	cmp	r3, r2
 800dace:	d802      	bhi.n	800dad6 <SD_PowerON+0xe6>
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d0cc      	beq.n	800da70 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800dadc:	4293      	cmp	r3, r2
 800dade:	d902      	bls.n	800dae6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dae0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800dae4:	e00c      	b.n	800db00 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800daec:	2b00      	cmp	r3, #0
 800daee:	d003      	beq.n	800daf8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2201      	movs	r2, #1
 800daf4:	645a      	str	r2, [r3, #68]	@ 0x44
 800daf6:	e002      	b.n	800dafe <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dafe:	2300      	movs	r3, #0
}
 800db00:	4618      	mov	r0, r3
 800db02:	3718      	adds	r7, #24
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	c1100000 	.word	0xc1100000

0800db0c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d102      	bne.n	800db22 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800db1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db20:	e018      	b.n	800db54 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db2a:	041b      	lsls	r3, r3, #16
 800db2c:	4619      	mov	r1, r3
 800db2e:	4610      	mov	r0, r2
 800db30:	f003 fb39 	bl	80111a6 <SDMMC_CmdSendStatus>
 800db34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d001      	beq.n	800db40 <SD_SendStatus+0x34>
  {
    return errorstate;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	e009      	b.n	800db54 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2100      	movs	r1, #0
 800db46:	4618      	mov	r0, r3
 800db48:	f003 f8db 	bl	8010d02 <SDMMC_GetResponse>
 800db4c:	4602      	mov	r2, r0
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800db52:	2300      	movs	r3, #0
}
 800db54:	4618      	mov	r0, r3
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db64:	2300      	movs	r3, #0
 800db66:	60fb      	str	r3, [r7, #12]
 800db68:	2300      	movs	r3, #0
 800db6a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2100      	movs	r1, #0
 800db72:	4618      	mov	r0, r3
 800db74:	f003 f8c5 	bl	8010d02 <SDMMC_GetResponse>
 800db78:	4603      	mov	r3, r0
 800db7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800db82:	d102      	bne.n	800db8a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800db88:	e02f      	b.n	800dbea <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db8a:	f107 030c 	add.w	r3, r7, #12
 800db8e:	4619      	mov	r1, r3
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f879 	bl	800dc88 <SD_FindSCR>
 800db96:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d001      	beq.n	800dba2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	e023      	b.n	800dbea <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d01c      	beq.n	800dbe6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbb4:	041b      	lsls	r3, r3, #16
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f003 fa0d 	bl	8010fd8 <SDMMC_CmdAppCommand>
 800dbbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	e00f      	b.n	800dbea <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	2102      	movs	r1, #2
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f003 fa47 	bl	8011064 <SDMMC_CmdBusWidth>
 800dbd6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d001      	beq.n	800dbe2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	e003      	b.n	800dbea <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e001      	b.n	800dbea <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbe6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b086      	sub	sp, #24
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60fb      	str	r3, [r7, #12]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2100      	movs	r1, #0
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f003 f87a 	bl	8010d02 <SDMMC_GetResponse>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dc14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dc18:	d102      	bne.n	800dc20 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dc1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800dc1e:	e02f      	b.n	800dc80 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dc20:	f107 030c 	add.w	r3, r7, #12
 800dc24:	4619      	mov	r1, r3
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f82e 	bl	800dc88 <SD_FindSCR>
 800dc2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d001      	beq.n	800dc38 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	e023      	b.n	800dc80 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d01c      	beq.n	800dc7c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc4a:	041b      	lsls	r3, r3, #16
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	4610      	mov	r0, r2
 800dc50:	f003 f9c2 	bl	8010fd8 <SDMMC_CmdAppCommand>
 800dc54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc56:	697b      	ldr	r3, [r7, #20]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	e00f      	b.n	800dc80 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	2100      	movs	r1, #0
 800dc66:	4618      	mov	r0, r3
 800dc68:	f003 f9fc 	bl	8011064 <SDMMC_CmdBusWidth>
 800dc6c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	e003      	b.n	800dc80 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	e001      	b.n	800dc80 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc7c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3718      	adds	r7, #24
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc88:	b590      	push	{r4, r7, lr}
 800dc8a:	b08f      	sub	sp, #60	@ 0x3c
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc92:	f7f8 fc1d 	bl	80064d0 <HAL_GetTick>
 800dc96:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800dc98:	2300      	movs	r3, #0
 800dc9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	60bb      	str	r3, [r7, #8]
 800dca0:	2300      	movs	r3, #0
 800dca2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2108      	movs	r1, #8
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f003 f866 	bl	8010d80 <SDMMC_CmdBlockLength>
 800dcb4:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d001      	beq.n	800dcc0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcbe:	e0b2      	b.n	800de26 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcc8:	041b      	lsls	r3, r3, #16
 800dcca:	4619      	mov	r1, r3
 800dccc:	4610      	mov	r0, r2
 800dcce:	f003 f983 	bl	8010fd8 <SDMMC_CmdAppCommand>
 800dcd2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d001      	beq.n	800dcde <SD_FindSCR+0x56>
  {
    return errorstate;
 800dcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcdc:	e0a3      	b.n	800de26 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dcde:	f04f 33ff 	mov.w	r3, #4294967295
 800dce2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dce4:	2308      	movs	r3, #8
 800dce6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dce8:	2330      	movs	r3, #48	@ 0x30
 800dcea:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dcec:	2302      	movs	r3, #2
 800dcee:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f107 0210 	add.w	r2, r7, #16
 800dd00:	4611      	mov	r1, r2
 800dd02:	4618      	mov	r0, r3
 800dd04:	f003 f810 	bl	8010d28 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f003 f9cb 	bl	80110a8 <SDMMC_CmdSendSCR>
 800dd12:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d02a      	beq.n	800dd70 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800dd1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd1c:	e083      	b.n	800de26 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00f      	beq.n	800dd4c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6819      	ldr	r1, [r3, #0]
 800dd30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	f107 0208 	add.w	r2, r7, #8
 800dd38:	18d4      	adds	r4, r2, r3
 800dd3a:	4608      	mov	r0, r1
 800dd3c:	f002 ff70 	bl	8010c20 <SDMMC_ReadFIFO>
 800dd40:	4603      	mov	r3, r0
 800dd42:	6023      	str	r3, [r4, #0]
      index++;
 800dd44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd46:	3301      	adds	r3, #1
 800dd48:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd4a:	e006      	b.n	800dd5a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d012      	beq.n	800dd80 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800dd5a:	f7f8 fbb9 	bl	80064d0 <HAL_GetTick>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd68:	d102      	bne.n	800dd70 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd6a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd6e:	e05a      	b.n	800de26 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd76:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d0cf      	beq.n	800dd1e <SD_FindSCR+0x96>
 800dd7e:	e000      	b.n	800dd82 <SD_FindSCR+0xfa>
      break;
 800dd80:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd88:	f003 0308 	and.w	r3, r3, #8
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d005      	beq.n	800dd9c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	2208      	movs	r2, #8
 800dd96:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd98:	2308      	movs	r3, #8
 800dd9a:	e044      	b.n	800de26 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dda2:	f003 0302 	and.w	r3, r3, #2
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d005      	beq.n	800ddb6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	2202      	movs	r2, #2
 800ddb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ddb2:	2302      	movs	r3, #2
 800ddb4:	e037      	b.n	800de26 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddbc:	f003 0320 	and.w	r3, r3, #32
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d005      	beq.n	800ddd0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2220      	movs	r2, #32
 800ddca:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ddcc:	2320      	movs	r3, #32
 800ddce:	e02a      	b.n	800de26 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f240 523a 	movw	r2, #1338	@ 0x53a
 800ddd8:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	061a      	lsls	r2, r3, #24
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	021b      	lsls	r3, r3, #8
 800dde2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dde6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	0a1b      	lsrs	r3, r3, #8
 800ddec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddf0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	0e1b      	lsrs	r3, r3, #24
 800ddf6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddfa:	601a      	str	r2, [r3, #0]
    scr++;
 800ddfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddfe:	3304      	adds	r3, #4
 800de00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	061a      	lsls	r2, r3, #24
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	021b      	lsls	r3, r3, #8
 800de0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800de0e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	0a1b      	lsrs	r3, r3, #8
 800de14:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de18:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	0e1b      	lsrs	r3, r3, #24
 800de1e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de22:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800de24:	2300      	movs	r3, #0
}
 800de26:	4618      	mov	r0, r3
 800de28:	373c      	adds	r7, #60	@ 0x3c
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd90      	pop	{r4, r7, pc}

0800de2e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b082      	sub	sp, #8
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
 800de36:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d101      	bne.n	800de42 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	e025      	b.n	800de8e <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800de48:	b2db      	uxtb	r3, r3
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f7f7 f9ee 	bl	8005238 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2202      	movs	r2, #2
 800de60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	3304      	adds	r3, #4
 800de6c:	4619      	mov	r1, r3
 800de6e:	4610      	mov	r0, r2
 800de70:	f002 fde4 	bl	8010a3c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6818      	ldr	r0, [r3, #0]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	685b      	ldr	r3, [r3, #4]
 800de7c:	461a      	mov	r2, r3
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	f002 fe38 	bl	8010af4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2201      	movs	r2, #1
 800de88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
	...

0800de98 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800dea6:	2301      	movs	r3, #1
 800dea8:	e04c      	b.n	800df44 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7f6 fe40 	bl	8004b44 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2202      	movs	r2, #2
 800dec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f022 0203 	bic.w	r2, r2, #3
 800deda:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800dee4:	68fa      	ldr	r2, [r7, #12]
 800dee6:	4b19      	ldr	r3, [pc, #100]	@ (800df4c <HAL_SPDIFRX_Init+0xb4>)
 800dee8:	4013      	ands	r3, r2
 800deea:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800def4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 800defa:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 800df00:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 800df06:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 800df0c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 800df12:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 800df18:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 800df1e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 800df24:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 800df26:	68fa      	ldr	r2, [r7, #12]
 800df28:	4313      	orrs	r3, r2
 800df2a:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	68fa      	ldr	r2, [r7, #12]
 800df32:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2200      	movs	r2, #0
 800df38:	649a      	str	r2, [r3, #72]	@ 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	2201      	movs	r2, #1
 800df3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	3710      	adds	r7, #16
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	fff88407 	.word	0xfff88407

0800df50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d101      	bne.n	800df62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df5e:	2301      	movs	r3, #1
 800df60:	e09d      	b.n	800e09e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df66:	2b00      	cmp	r3, #0
 800df68:	d108      	bne.n	800df7c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df72:	d009      	beq.n	800df88 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	61da      	str	r2, [r3, #28]
 800df7a:	e005      	b.n	800df88 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2200      	movs	r2, #0
 800df80:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2200      	movs	r2, #0
 800df86:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2200      	movs	r2, #0
 800df8c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800df94:	b2db      	uxtb	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d106      	bne.n	800dfa8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f7f6 fe32 	bl	8004c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2202      	movs	r2, #2
 800dfac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	681a      	ldr	r2, [r3, #0]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dfbe:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	68db      	ldr	r3, [r3, #12]
 800dfc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dfc8:	d902      	bls.n	800dfd0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	e002      	b.n	800dfd6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dfd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dfd4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800dfde:	d007      	beq.n	800dff0 <HAL_SPI_Init+0xa0>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dfe8:	d002      	beq.n	800dff0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	685b      	ldr	r3, [r3, #4]
 800dff4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	689b      	ldr	r3, [r3, #8]
 800dffc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800e000:	431a      	orrs	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	691b      	ldr	r3, [r3, #16]
 800e006:	f003 0302 	and.w	r3, r3, #2
 800e00a:	431a      	orrs	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	695b      	ldr	r3, [r3, #20]
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	431a      	orrs	r2, r3
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	699b      	ldr	r3, [r3, #24]
 800e01a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e01e:	431a      	orrs	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	69db      	ldr	r3, [r3, #28]
 800e024:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800e028:	431a      	orrs	r2, r3
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a1b      	ldr	r3, [r3, #32]
 800e02e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e032:	ea42 0103 	orr.w	r1, r2, r3
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e03a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	430a      	orrs	r2, r1
 800e044:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	699b      	ldr	r3, [r3, #24]
 800e04a:	0c1b      	lsrs	r3, r3, #16
 800e04c:	f003 0204 	and.w	r2, r3, #4
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e054:	f003 0310 	and.w	r3, r3, #16
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e05e:	f003 0308 	and.w	r3, r3, #8
 800e062:	431a      	orrs	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800e06c:	ea42 0103 	orr.w	r1, r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	430a      	orrs	r2, r1
 800e07c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	69da      	ldr	r2, [r3, #28]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800e08c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d101      	bne.n	800e0b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e049      	b.n	800e14c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d106      	bne.n	800e0d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7f6 fdff 	bl	8004cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2202      	movs	r2, #2
 800e0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	3304      	adds	r3, #4
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	f000 fc11 	bl	800e90c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2201      	movs	r2, #1
 800e11e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2201      	movs	r2, #1
 800e12e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2201      	movs	r2, #1
 800e136:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2201      	movs	r2, #1
 800e13e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2201      	movs	r2, #1
 800e146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e14a:	2300      	movs	r3, #0
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	3708      	adds	r7, #8
 800e150:	46bd      	mov	sp, r7
 800e152:	bd80      	pop	{r7, pc}

0800e154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e154:	b480      	push	{r7}
 800e156:	b085      	sub	sp, #20
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e162:	b2db      	uxtb	r3, r3
 800e164:	2b01      	cmp	r3, #1
 800e166:	d001      	beq.n	800e16c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e054      	b.n	800e216 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2202      	movs	r2, #2
 800e170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	68da      	ldr	r2, [r3, #12]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f042 0201 	orr.w	r2, r2, #1
 800e182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	4a26      	ldr	r2, [pc, #152]	@ (800e224 <HAL_TIM_Base_Start_IT+0xd0>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d022      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0x80>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e196:	d01d      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0x80>
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a22      	ldr	r2, [pc, #136]	@ (800e228 <HAL_TIM_Base_Start_IT+0xd4>)
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d018      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0x80>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a21      	ldr	r2, [pc, #132]	@ (800e22c <HAL_TIM_Base_Start_IT+0xd8>)
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d013      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0x80>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	4a1f      	ldr	r2, [pc, #124]	@ (800e230 <HAL_TIM_Base_Start_IT+0xdc>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d00e      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0x80>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4a1e      	ldr	r2, [pc, #120]	@ (800e234 <HAL_TIM_Base_Start_IT+0xe0>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d009      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0x80>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	4a1c      	ldr	r2, [pc, #112]	@ (800e238 <HAL_TIM_Base_Start_IT+0xe4>)
 800e1c6:	4293      	cmp	r3, r2
 800e1c8:	d004      	beq.n	800e1d4 <HAL_TIM_Base_Start_IT+0x80>
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	4a1b      	ldr	r2, [pc, #108]	@ (800e23c <HAL_TIM_Base_Start_IT+0xe8>)
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d115      	bne.n	800e200 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	689a      	ldr	r2, [r3, #8]
 800e1da:	4b19      	ldr	r3, [pc, #100]	@ (800e240 <HAL_TIM_Base_Start_IT+0xec>)
 800e1dc:	4013      	ands	r3, r2
 800e1de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2b06      	cmp	r3, #6
 800e1e4:	d015      	beq.n	800e212 <HAL_TIM_Base_Start_IT+0xbe>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e1ec:	d011      	beq.n	800e212 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	681a      	ldr	r2, [r3, #0]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f042 0201 	orr.w	r2, r2, #1
 800e1fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1fe:	e008      	b.n	800e212 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	681a      	ldr	r2, [r3, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f042 0201 	orr.w	r2, r2, #1
 800e20e:	601a      	str	r2, [r3, #0]
 800e210:	e000      	b.n	800e214 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e212:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3714      	adds	r7, #20
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	40010000 	.word	0x40010000
 800e228:	40000400 	.word	0x40000400
 800e22c:	40000800 	.word	0x40000800
 800e230:	40000c00 	.word	0x40000c00
 800e234:	40010400 	.word	0x40010400
 800e238:	40014000 	.word	0x40014000
 800e23c:	40001800 	.word	0x40001800
 800e240:	00010007 	.word	0x00010007

0800e244 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d101      	bne.n	800e256 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e252:	2301      	movs	r3, #1
 800e254:	e049      	b.n	800e2ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d106      	bne.n	800e270 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2200      	movs	r2, #0
 800e266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7f6 fd9e 	bl	8004dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2202      	movs	r2, #2
 800e274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	3304      	adds	r3, #4
 800e280:	4619      	mov	r1, r3
 800e282:	4610      	mov	r0, r2
 800e284:	f000 fb42 	bl	800e90c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2201      	movs	r2, #1
 800e29c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e2e8:	2300      	movs	r3, #0
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3708      	adds	r7, #8
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2f2:	b580      	push	{r7, lr}
 800e2f4:	b084      	sub	sp, #16
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	f003 0302 	and.w	r3, r3, #2
 800e310:	2b00      	cmp	r3, #0
 800e312:	d020      	beq.n	800e356 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f003 0302 	and.w	r3, r3, #2
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d01b      	beq.n	800e356 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f06f 0202 	mvn.w	r2, #2
 800e326:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	699b      	ldr	r3, [r3, #24]
 800e334:	f003 0303 	and.w	r3, r3, #3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d003      	beq.n	800e344 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f000 fac7 	bl	800e8d0 <HAL_TIM_IC_CaptureCallback>
 800e342:	e005      	b.n	800e350 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 fab9 	bl	800e8bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 faca 	bl	800e8e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	f003 0304 	and.w	r3, r3, #4
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d020      	beq.n	800e3a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	f003 0304 	and.w	r3, r3, #4
 800e366:	2b00      	cmp	r3, #0
 800e368:	d01b      	beq.n	800e3a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	f06f 0204 	mvn.w	r2, #4
 800e372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2202      	movs	r2, #2
 800e378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	699b      	ldr	r3, [r3, #24]
 800e380:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e384:	2b00      	cmp	r3, #0
 800e386:	d003      	beq.n	800e390 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 faa1 	bl	800e8d0 <HAL_TIM_IC_CaptureCallback>
 800e38e:	e005      	b.n	800e39c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fa93 	bl	800e8bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 faa4 	bl	800e8e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	f003 0308 	and.w	r3, r3, #8
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d020      	beq.n	800e3ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f003 0308 	and.w	r3, r3, #8
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d01b      	beq.n	800e3ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f06f 0208 	mvn.w	r2, #8
 800e3be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2204      	movs	r2, #4
 800e3c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	f003 0303 	and.w	r3, r3, #3
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d003      	beq.n	800e3dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fa7b 	bl	800e8d0 <HAL_TIM_IC_CaptureCallback>
 800e3da:	e005      	b.n	800e3e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fa6d 	bl	800e8bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fa7e 	bl	800e8e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	f003 0310 	and.w	r3, r3, #16
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d020      	beq.n	800e43a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	f003 0310 	and.w	r3, r3, #16
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d01b      	beq.n	800e43a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f06f 0210 	mvn.w	r2, #16
 800e40a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2208      	movs	r2, #8
 800e410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	69db      	ldr	r3, [r3, #28]
 800e418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d003      	beq.n	800e428 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 fa55 	bl	800e8d0 <HAL_TIM_IC_CaptureCallback>
 800e426:	e005      	b.n	800e434 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fa47 	bl	800e8bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e42e:	6878      	ldr	r0, [r7, #4]
 800e430:	f000 fa58 	bl	800e8e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2200      	movs	r2, #0
 800e438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	f003 0301 	and.w	r3, r3, #1
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00c      	beq.n	800e45e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f003 0301 	and.w	r3, r3, #1
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d007      	beq.n	800e45e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f06f 0201 	mvn.w	r2, #1
 800e456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7f5 fe41 	bl	80040e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e464:	2b00      	cmp	r3, #0
 800e466:	d104      	bne.n	800e472 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00c      	beq.n	800e48c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d007      	beq.n	800e48c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 fef4 	bl	800f274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00c      	beq.n	800e4b0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d007      	beq.n	800e4b0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e4a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 feec 	bl	800f288 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00c      	beq.n	800e4d4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d007      	beq.n	800e4d4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e4cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f000 fa12 	bl	800e8f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	f003 0320 	and.w	r3, r3, #32
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00c      	beq.n	800e4f8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f003 0320 	and.w	r3, r3, #32
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d007      	beq.n	800e4f8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f06f 0220 	mvn.w	r2, #32
 800e4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 feb4 	bl	800f260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4f8:	bf00      	nop
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b086      	sub	sp, #24
 800e504:	af00      	add	r7, sp, #0
 800e506:	60f8      	str	r0, [r7, #12]
 800e508:	60b9      	str	r1, [r7, #8]
 800e50a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e50c:	2300      	movs	r3, #0
 800e50e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e516:	2b01      	cmp	r3, #1
 800e518:	d101      	bne.n	800e51e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e51a:	2302      	movs	r3, #2
 800e51c:	e0ff      	b.n	800e71e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2201      	movs	r2, #1
 800e522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b14      	cmp	r3, #20
 800e52a:	f200 80f0 	bhi.w	800e70e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e52e:	a201      	add	r2, pc, #4	@ (adr r2, 800e534 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e534:	0800e589 	.word	0x0800e589
 800e538:	0800e70f 	.word	0x0800e70f
 800e53c:	0800e70f 	.word	0x0800e70f
 800e540:	0800e70f 	.word	0x0800e70f
 800e544:	0800e5c9 	.word	0x0800e5c9
 800e548:	0800e70f 	.word	0x0800e70f
 800e54c:	0800e70f 	.word	0x0800e70f
 800e550:	0800e70f 	.word	0x0800e70f
 800e554:	0800e60b 	.word	0x0800e60b
 800e558:	0800e70f 	.word	0x0800e70f
 800e55c:	0800e70f 	.word	0x0800e70f
 800e560:	0800e70f 	.word	0x0800e70f
 800e564:	0800e64b 	.word	0x0800e64b
 800e568:	0800e70f 	.word	0x0800e70f
 800e56c:	0800e70f 	.word	0x0800e70f
 800e570:	0800e70f 	.word	0x0800e70f
 800e574:	0800e68d 	.word	0x0800e68d
 800e578:	0800e70f 	.word	0x0800e70f
 800e57c:	0800e70f 	.word	0x0800e70f
 800e580:	0800e70f 	.word	0x0800e70f
 800e584:	0800e6cd 	.word	0x0800e6cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	68b9      	ldr	r1, [r7, #8]
 800e58e:	4618      	mov	r0, r3
 800e590:	f000 fa62 	bl	800ea58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	699a      	ldr	r2, [r3, #24]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f042 0208 	orr.w	r2, r2, #8
 800e5a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	699a      	ldr	r2, [r3, #24]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f022 0204 	bic.w	r2, r2, #4
 800e5b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6999      	ldr	r1, [r3, #24]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	691a      	ldr	r2, [r3, #16]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	430a      	orrs	r2, r1
 800e5c4:	619a      	str	r2, [r3, #24]
      break;
 800e5c6:	e0a5      	b.n	800e714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68b9      	ldr	r1, [r7, #8]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f000 fab4 	bl	800eb3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	699a      	ldr	r2, [r3, #24]
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e5e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	699a      	ldr	r2, [r3, #24]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6999      	ldr	r1, [r3, #24]
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	691b      	ldr	r3, [r3, #16]
 800e5fe:	021a      	lsls	r2, r3, #8
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	430a      	orrs	r2, r1
 800e606:	619a      	str	r2, [r3, #24]
      break;
 800e608:	e084      	b.n	800e714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	68b9      	ldr	r1, [r7, #8]
 800e610:	4618      	mov	r0, r3
 800e612:	f000 fb0b 	bl	800ec2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	69da      	ldr	r2, [r3, #28]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f042 0208 	orr.w	r2, r2, #8
 800e624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	69da      	ldr	r2, [r3, #28]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f022 0204 	bic.w	r2, r2, #4
 800e634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	69d9      	ldr	r1, [r3, #28]
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	691a      	ldr	r2, [r3, #16]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	430a      	orrs	r2, r1
 800e646:	61da      	str	r2, [r3, #28]
      break;
 800e648:	e064      	b.n	800e714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	68b9      	ldr	r1, [r7, #8]
 800e650:	4618      	mov	r0, r3
 800e652:	f000 fb61 	bl	800ed18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	69da      	ldr	r2, [r3, #28]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	69da      	ldr	r2, [r3, #28]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	69d9      	ldr	r1, [r3, #28]
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	691b      	ldr	r3, [r3, #16]
 800e680:	021a      	lsls	r2, r3, #8
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	430a      	orrs	r2, r1
 800e688:	61da      	str	r2, [r3, #28]
      break;
 800e68a:	e043      	b.n	800e714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	68b9      	ldr	r1, [r7, #8]
 800e692:	4618      	mov	r0, r3
 800e694:	f000 fb98 	bl	800edc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f042 0208 	orr.w	r2, r2, #8
 800e6a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	f022 0204 	bic.w	r2, r2, #4
 800e6b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	691a      	ldr	r2, [r3, #16]
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	430a      	orrs	r2, r1
 800e6c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e6ca:	e023      	b.n	800e714 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	68b9      	ldr	r1, [r7, #8]
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f000 fbca 	bl	800ee6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	021a      	lsls	r2, r3, #8
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	430a      	orrs	r2, r1
 800e70a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e70c:	e002      	b.n	800e714 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e70e:	2301      	movs	r3, #1
 800e710:	75fb      	strb	r3, [r7, #23]
      break;
 800e712:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e71c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3718      	adds	r7, #24
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop

0800e728 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e732:	2300      	movs	r3, #0
 800e734:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e73c:	2b01      	cmp	r3, #1
 800e73e:	d101      	bne.n	800e744 <HAL_TIM_ConfigClockSource+0x1c>
 800e740:	2302      	movs	r3, #2
 800e742:	e0b4      	b.n	800e8ae <HAL_TIM_ConfigClockSource+0x186>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2202      	movs	r2, #2
 800e750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e75c:	68ba      	ldr	r2, [r7, #8]
 800e75e:	4b56      	ldr	r3, [pc, #344]	@ (800e8b8 <HAL_TIM_ConfigClockSource+0x190>)
 800e760:	4013      	ands	r3, r2
 800e762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e76a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	68ba      	ldr	r2, [r7, #8]
 800e772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e77c:	d03e      	beq.n	800e7fc <HAL_TIM_ConfigClockSource+0xd4>
 800e77e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e782:	f200 8087 	bhi.w	800e894 <HAL_TIM_ConfigClockSource+0x16c>
 800e786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e78a:	f000 8086 	beq.w	800e89a <HAL_TIM_ConfigClockSource+0x172>
 800e78e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e792:	d87f      	bhi.n	800e894 <HAL_TIM_ConfigClockSource+0x16c>
 800e794:	2b70      	cmp	r3, #112	@ 0x70
 800e796:	d01a      	beq.n	800e7ce <HAL_TIM_ConfigClockSource+0xa6>
 800e798:	2b70      	cmp	r3, #112	@ 0x70
 800e79a:	d87b      	bhi.n	800e894 <HAL_TIM_ConfigClockSource+0x16c>
 800e79c:	2b60      	cmp	r3, #96	@ 0x60
 800e79e:	d050      	beq.n	800e842 <HAL_TIM_ConfigClockSource+0x11a>
 800e7a0:	2b60      	cmp	r3, #96	@ 0x60
 800e7a2:	d877      	bhi.n	800e894 <HAL_TIM_ConfigClockSource+0x16c>
 800e7a4:	2b50      	cmp	r3, #80	@ 0x50
 800e7a6:	d03c      	beq.n	800e822 <HAL_TIM_ConfigClockSource+0xfa>
 800e7a8:	2b50      	cmp	r3, #80	@ 0x50
 800e7aa:	d873      	bhi.n	800e894 <HAL_TIM_ConfigClockSource+0x16c>
 800e7ac:	2b40      	cmp	r3, #64	@ 0x40
 800e7ae:	d058      	beq.n	800e862 <HAL_TIM_ConfigClockSource+0x13a>
 800e7b0:	2b40      	cmp	r3, #64	@ 0x40
 800e7b2:	d86f      	bhi.n	800e894 <HAL_TIM_ConfigClockSource+0x16c>
 800e7b4:	2b30      	cmp	r3, #48	@ 0x30
 800e7b6:	d064      	beq.n	800e882 <HAL_TIM_ConfigClockSource+0x15a>
 800e7b8:	2b30      	cmp	r3, #48	@ 0x30
 800e7ba:	d86b      	bhi.n	800e894 <HAL_TIM_ConfigClockSource+0x16c>
 800e7bc:	2b20      	cmp	r3, #32
 800e7be:	d060      	beq.n	800e882 <HAL_TIM_ConfigClockSource+0x15a>
 800e7c0:	2b20      	cmp	r3, #32
 800e7c2:	d867      	bhi.n	800e894 <HAL_TIM_ConfigClockSource+0x16c>
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d05c      	beq.n	800e882 <HAL_TIM_ConfigClockSource+0x15a>
 800e7c8:	2b10      	cmp	r3, #16
 800e7ca:	d05a      	beq.n	800e882 <HAL_TIM_ConfigClockSource+0x15a>
 800e7cc:	e062      	b.n	800e894 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7de:	f000 fc13 	bl	800f008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e7f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	609a      	str	r2, [r3, #8]
      break;
 800e7fa:	e04f      	b.n	800e89c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e80c:	f000 fbfc 	bl	800f008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	689a      	ldr	r2, [r3, #8]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e81e:	609a      	str	r2, [r3, #8]
      break;
 800e820:	e03c      	b.n	800e89c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e82e:	461a      	mov	r2, r3
 800e830:	f000 fb70 	bl	800ef14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2150      	movs	r1, #80	@ 0x50
 800e83a:	4618      	mov	r0, r3
 800e83c:	f000 fbc9 	bl	800efd2 <TIM_ITRx_SetConfig>
      break;
 800e840:	e02c      	b.n	800e89c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e84a:	683b      	ldr	r3, [r7, #0]
 800e84c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e84e:	461a      	mov	r2, r3
 800e850:	f000 fb8f 	bl	800ef72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2160      	movs	r1, #96	@ 0x60
 800e85a:	4618      	mov	r0, r3
 800e85c:	f000 fbb9 	bl	800efd2 <TIM_ITRx_SetConfig>
      break;
 800e860:	e01c      	b.n	800e89c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e866:	683b      	ldr	r3, [r7, #0]
 800e868:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e86e:	461a      	mov	r2, r3
 800e870:	f000 fb50 	bl	800ef14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2140      	movs	r1, #64	@ 0x40
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 fba9 	bl	800efd2 <TIM_ITRx_SetConfig>
      break;
 800e880:	e00c      	b.n	800e89c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4619      	mov	r1, r3
 800e88c:	4610      	mov	r0, r2
 800e88e:	f000 fba0 	bl	800efd2 <TIM_ITRx_SetConfig>
      break;
 800e892:	e003      	b.n	800e89c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e894:	2301      	movs	r3, #1
 800e896:	73fb      	strb	r3, [r7, #15]
      break;
 800e898:	e000      	b.n	800e89c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e89a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	fffeff88 	.word	0xfffeff88

0800e8bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8c4:	bf00      	nop
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8d8:	bf00      	nop
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8ec:	bf00      	nop
 800e8ee:	370c      	adds	r7, #12
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b085      	sub	sp, #20
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a43      	ldr	r2, [pc, #268]	@ (800ea2c <TIM_Base_SetConfig+0x120>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d013      	beq.n	800e94c <TIM_Base_SetConfig+0x40>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e92a:	d00f      	beq.n	800e94c <TIM_Base_SetConfig+0x40>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a40      	ldr	r2, [pc, #256]	@ (800ea30 <TIM_Base_SetConfig+0x124>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d00b      	beq.n	800e94c <TIM_Base_SetConfig+0x40>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a3f      	ldr	r2, [pc, #252]	@ (800ea34 <TIM_Base_SetConfig+0x128>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d007      	beq.n	800e94c <TIM_Base_SetConfig+0x40>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	4a3e      	ldr	r2, [pc, #248]	@ (800ea38 <TIM_Base_SetConfig+0x12c>)
 800e940:	4293      	cmp	r3, r2
 800e942:	d003      	beq.n	800e94c <TIM_Base_SetConfig+0x40>
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a3d      	ldr	r2, [pc, #244]	@ (800ea3c <TIM_Base_SetConfig+0x130>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d108      	bne.n	800e95e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	685b      	ldr	r3, [r3, #4]
 800e958:	68fa      	ldr	r2, [r7, #12]
 800e95a:	4313      	orrs	r3, r2
 800e95c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a32      	ldr	r2, [pc, #200]	@ (800ea2c <TIM_Base_SetConfig+0x120>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d02b      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e96c:	d027      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a2f      	ldr	r2, [pc, #188]	@ (800ea30 <TIM_Base_SetConfig+0x124>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d023      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a2e      	ldr	r2, [pc, #184]	@ (800ea34 <TIM_Base_SetConfig+0x128>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d01f      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a2d      	ldr	r2, [pc, #180]	@ (800ea38 <TIM_Base_SetConfig+0x12c>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d01b      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a2c      	ldr	r2, [pc, #176]	@ (800ea3c <TIM_Base_SetConfig+0x130>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d017      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a2b      	ldr	r2, [pc, #172]	@ (800ea40 <TIM_Base_SetConfig+0x134>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d013      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a2a      	ldr	r2, [pc, #168]	@ (800ea44 <TIM_Base_SetConfig+0x138>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d00f      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a29      	ldr	r2, [pc, #164]	@ (800ea48 <TIM_Base_SetConfig+0x13c>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d00b      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4a28      	ldr	r2, [pc, #160]	@ (800ea4c <TIM_Base_SetConfig+0x140>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d007      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4a27      	ldr	r2, [pc, #156]	@ (800ea50 <TIM_Base_SetConfig+0x144>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d003      	beq.n	800e9be <TIM_Base_SetConfig+0xb2>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4a26      	ldr	r2, [pc, #152]	@ (800ea54 <TIM_Base_SetConfig+0x148>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d108      	bne.n	800e9d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	695b      	ldr	r3, [r3, #20]
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	689a      	ldr	r2, [r3, #8]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	681a      	ldr	r2, [r3, #0]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4a0e      	ldr	r2, [pc, #56]	@ (800ea2c <TIM_Base_SetConfig+0x120>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d003      	beq.n	800e9fe <TIM_Base_SetConfig+0xf2>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4a10      	ldr	r2, [pc, #64]	@ (800ea3c <TIM_Base_SetConfig+0x130>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d103      	bne.n	800ea06 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	691a      	ldr	r2, [r3, #16]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f043 0204 	orr.w	r2, r3, #4
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2201      	movs	r2, #1
 800ea16:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	601a      	str	r2, [r3, #0]
}
 800ea1e:	bf00      	nop
 800ea20:	3714      	adds	r7, #20
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr
 800ea2a:	bf00      	nop
 800ea2c:	40010000 	.word	0x40010000
 800ea30:	40000400 	.word	0x40000400
 800ea34:	40000800 	.word	0x40000800
 800ea38:	40000c00 	.word	0x40000c00
 800ea3c:	40010400 	.word	0x40010400
 800ea40:	40014000 	.word	0x40014000
 800ea44:	40014400 	.word	0x40014400
 800ea48:	40014800 	.word	0x40014800
 800ea4c:	40001800 	.word	0x40001800
 800ea50:	40001c00 	.word	0x40001c00
 800ea54:	40002000 	.word	0x40002000

0800ea58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b087      	sub	sp, #28
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6a1b      	ldr	r3, [r3, #32]
 800ea66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6a1b      	ldr	r3, [r3, #32]
 800ea6c:	f023 0201 	bic.w	r2, r3, #1
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	699b      	ldr	r3, [r3, #24]
 800ea7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	4b2b      	ldr	r3, [pc, #172]	@ (800eb30 <TIM_OC1_SetConfig+0xd8>)
 800ea84:	4013      	ands	r3, r2
 800ea86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f023 0303 	bic.w	r3, r3, #3
 800ea8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	4313      	orrs	r3, r2
 800ea98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea9a:	697b      	ldr	r3, [r7, #20]
 800ea9c:	f023 0302 	bic.w	r3, r3, #2
 800eaa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	697a      	ldr	r2, [r7, #20]
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	4a21      	ldr	r2, [pc, #132]	@ (800eb34 <TIM_OC1_SetConfig+0xdc>)
 800eab0:	4293      	cmp	r3, r2
 800eab2:	d003      	beq.n	800eabc <TIM_OC1_SetConfig+0x64>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a20      	ldr	r2, [pc, #128]	@ (800eb38 <TIM_OC1_SetConfig+0xe0>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d10c      	bne.n	800ead6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	f023 0308 	bic.w	r3, r3, #8
 800eac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	68db      	ldr	r3, [r3, #12]
 800eac8:	697a      	ldr	r2, [r7, #20]
 800eaca:	4313      	orrs	r3, r2
 800eacc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	f023 0304 	bic.w	r3, r3, #4
 800ead4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4a16      	ldr	r2, [pc, #88]	@ (800eb34 <TIM_OC1_SetConfig+0xdc>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d003      	beq.n	800eae6 <TIM_OC1_SetConfig+0x8e>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4a15      	ldr	r2, [pc, #84]	@ (800eb38 <TIM_OC1_SetConfig+0xe0>)
 800eae2:	4293      	cmp	r3, r2
 800eae4:	d111      	bne.n	800eb0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eaec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eaf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	693a      	ldr	r2, [r7, #16]
 800eafc:	4313      	orrs	r3, r2
 800eafe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eb00:	683b      	ldr	r3, [r7, #0]
 800eb02:	699b      	ldr	r3, [r3, #24]
 800eb04:	693a      	ldr	r2, [r7, #16]
 800eb06:	4313      	orrs	r3, r2
 800eb08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	693a      	ldr	r2, [r7, #16]
 800eb0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	685a      	ldr	r2, [r3, #4]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	697a      	ldr	r2, [r7, #20]
 800eb22:	621a      	str	r2, [r3, #32]
}
 800eb24:	bf00      	nop
 800eb26:	371c      	adds	r7, #28
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	fffeff8f 	.word	0xfffeff8f
 800eb34:	40010000 	.word	0x40010000
 800eb38:	40010400 	.word	0x40010400

0800eb3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b087      	sub	sp, #28
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	6a1b      	ldr	r3, [r3, #32]
 800eb50:	f023 0210 	bic.w	r2, r3, #16
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	685b      	ldr	r3, [r3, #4]
 800eb5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	699b      	ldr	r3, [r3, #24]
 800eb62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	4b2e      	ldr	r3, [pc, #184]	@ (800ec20 <TIM_OC2_SetConfig+0xe4>)
 800eb68:	4013      	ands	r3, r2
 800eb6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	021b      	lsls	r3, r3, #8
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f023 0320 	bic.w	r3, r3, #32
 800eb86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	011b      	lsls	r3, r3, #4
 800eb8e:	697a      	ldr	r2, [r7, #20]
 800eb90:	4313      	orrs	r3, r2
 800eb92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a23      	ldr	r2, [pc, #140]	@ (800ec24 <TIM_OC2_SetConfig+0xe8>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d003      	beq.n	800eba4 <TIM_OC2_SetConfig+0x68>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4a22      	ldr	r2, [pc, #136]	@ (800ec28 <TIM_OC2_SetConfig+0xec>)
 800eba0:	4293      	cmp	r3, r2
 800eba2:	d10d      	bne.n	800ebc0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ebaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	011b      	lsls	r3, r3, #4
 800ebb2:	697a      	ldr	r2, [r7, #20]
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a18      	ldr	r2, [pc, #96]	@ (800ec24 <TIM_OC2_SetConfig+0xe8>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d003      	beq.n	800ebd0 <TIM_OC2_SetConfig+0x94>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4a17      	ldr	r2, [pc, #92]	@ (800ec28 <TIM_OC2_SetConfig+0xec>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d113      	bne.n	800ebf8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ebd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ebde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	695b      	ldr	r3, [r3, #20]
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	699b      	ldr	r3, [r3, #24]
 800ebf0:	009b      	lsls	r3, r3, #2
 800ebf2:	693a      	ldr	r2, [r7, #16]
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	685a      	ldr	r2, [r3, #4]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	697a      	ldr	r2, [r7, #20]
 800ec10:	621a      	str	r2, [r3, #32]
}
 800ec12:	bf00      	nop
 800ec14:	371c      	adds	r7, #28
 800ec16:	46bd      	mov	sp, r7
 800ec18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1c:	4770      	bx	lr
 800ec1e:	bf00      	nop
 800ec20:	feff8fff 	.word	0xfeff8fff
 800ec24:	40010000 	.word	0x40010000
 800ec28:	40010400 	.word	0x40010400

0800ec2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b087      	sub	sp, #28
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6a1b      	ldr	r3, [r3, #32]
 800ec40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	69db      	ldr	r3, [r3, #28]
 800ec52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	4b2d      	ldr	r3, [pc, #180]	@ (800ed0c <TIM_OC3_SetConfig+0xe0>)
 800ec58:	4013      	ands	r3, r2
 800ec5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	f023 0303 	bic.w	r3, r3, #3
 800ec62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	021b      	lsls	r3, r3, #8
 800ec7c:	697a      	ldr	r2, [r7, #20]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4a22      	ldr	r2, [pc, #136]	@ (800ed10 <TIM_OC3_SetConfig+0xe4>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d003      	beq.n	800ec92 <TIM_OC3_SetConfig+0x66>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4a21      	ldr	r2, [pc, #132]	@ (800ed14 <TIM_OC3_SetConfig+0xe8>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d10d      	bne.n	800ecae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	021b      	lsls	r3, r3, #8
 800eca0:	697a      	ldr	r2, [r7, #20]
 800eca2:	4313      	orrs	r3, r2
 800eca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ecac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4a17      	ldr	r2, [pc, #92]	@ (800ed10 <TIM_OC3_SetConfig+0xe4>)
 800ecb2:	4293      	cmp	r3, r2
 800ecb4:	d003      	beq.n	800ecbe <TIM_OC3_SetConfig+0x92>
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	4a16      	ldr	r2, [pc, #88]	@ (800ed14 <TIM_OC3_SetConfig+0xe8>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d113      	bne.n	800ece6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ecc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	011b      	lsls	r3, r3, #4
 800ecd4:	693a      	ldr	r2, [r7, #16]
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	699b      	ldr	r3, [r3, #24]
 800ecde:	011b      	lsls	r3, r3, #4
 800ece0:	693a      	ldr	r2, [r7, #16]
 800ece2:	4313      	orrs	r3, r2
 800ece4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	693a      	ldr	r2, [r7, #16]
 800ecea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	685a      	ldr	r2, [r3, #4]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	697a      	ldr	r2, [r7, #20]
 800ecfe:	621a      	str	r2, [r3, #32]
}
 800ed00:	bf00      	nop
 800ed02:	371c      	adds	r7, #28
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr
 800ed0c:	fffeff8f 	.word	0xfffeff8f
 800ed10:	40010000 	.word	0x40010000
 800ed14:	40010400 	.word	0x40010400

0800ed18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed18:	b480      	push	{r7}
 800ed1a:	b087      	sub	sp, #28
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a1b      	ldr	r3, [r3, #32]
 800ed26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	69db      	ldr	r3, [r3, #28]
 800ed3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	4b1e      	ldr	r3, [pc, #120]	@ (800edbc <TIM_OC4_SetConfig+0xa4>)
 800ed44:	4013      	ands	r3, r2
 800ed46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	021b      	lsls	r3, r3, #8
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	031b      	lsls	r3, r3, #12
 800ed6a:	693a      	ldr	r2, [r7, #16]
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a13      	ldr	r2, [pc, #76]	@ (800edc0 <TIM_OC4_SetConfig+0xa8>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d003      	beq.n	800ed80 <TIM_OC4_SetConfig+0x68>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a12      	ldr	r2, [pc, #72]	@ (800edc4 <TIM_OC4_SetConfig+0xac>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d109      	bne.n	800ed94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	695b      	ldr	r3, [r3, #20]
 800ed8c:	019b      	lsls	r3, r3, #6
 800ed8e:	697a      	ldr	r2, [r7, #20]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	685a      	ldr	r2, [r3, #4]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	693a      	ldr	r2, [r7, #16]
 800edac:	621a      	str	r2, [r3, #32]
}
 800edae:	bf00      	nop
 800edb0:	371c      	adds	r7, #28
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr
 800edba:	bf00      	nop
 800edbc:	feff8fff 	.word	0xfeff8fff
 800edc0:	40010000 	.word	0x40010000
 800edc4:	40010400 	.word	0x40010400

0800edc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800edc8:	b480      	push	{r7}
 800edca:	b087      	sub	sp, #28
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6a1b      	ldr	r3, [r3, #32]
 800edd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a1b      	ldr	r3, [r3, #32]
 800eddc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800edee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800edf0:	68fa      	ldr	r2, [r7, #12]
 800edf2:	4b1b      	ldr	r3, [pc, #108]	@ (800ee60 <TIM_OC5_SetConfig+0x98>)
 800edf4:	4013      	ands	r3, r2
 800edf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	4313      	orrs	r3, r2
 800ee00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ee08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	689b      	ldr	r3, [r3, #8]
 800ee0e:	041b      	lsls	r3, r3, #16
 800ee10:	693a      	ldr	r2, [r7, #16]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	4a12      	ldr	r2, [pc, #72]	@ (800ee64 <TIM_OC5_SetConfig+0x9c>)
 800ee1a:	4293      	cmp	r3, r2
 800ee1c:	d003      	beq.n	800ee26 <TIM_OC5_SetConfig+0x5e>
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4a11      	ldr	r2, [pc, #68]	@ (800ee68 <TIM_OC5_SetConfig+0xa0>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d109      	bne.n	800ee3a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee2e:	683b      	ldr	r3, [r7, #0]
 800ee30:	695b      	ldr	r3, [r3, #20]
 800ee32:	021b      	lsls	r3, r3, #8
 800ee34:	697a      	ldr	r2, [r7, #20]
 800ee36:	4313      	orrs	r3, r2
 800ee38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	697a      	ldr	r2, [r7, #20]
 800ee3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	68fa      	ldr	r2, [r7, #12]
 800ee44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	685a      	ldr	r2, [r3, #4]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	693a      	ldr	r2, [r7, #16]
 800ee52:	621a      	str	r2, [r3, #32]
}
 800ee54:	bf00      	nop
 800ee56:	371c      	adds	r7, #28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	fffeff8f 	.word	0xfffeff8f
 800ee64:	40010000 	.word	0x40010000
 800ee68:	40010400 	.word	0x40010400

0800ee6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b087      	sub	sp, #28
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a1b      	ldr	r3, [r3, #32]
 800ee7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a1b      	ldr	r3, [r3, #32]
 800ee80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	4b1c      	ldr	r3, [pc, #112]	@ (800ef08 <TIM_OC6_SetConfig+0x9c>)
 800ee98:	4013      	ands	r3, r2
 800ee9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	021b      	lsls	r3, r3, #8
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	4313      	orrs	r3, r2
 800eea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eeae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	051b      	lsls	r3, r3, #20
 800eeb6:	693a      	ldr	r2, [r7, #16]
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a13      	ldr	r2, [pc, #76]	@ (800ef0c <TIM_OC6_SetConfig+0xa0>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d003      	beq.n	800eecc <TIM_OC6_SetConfig+0x60>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a12      	ldr	r2, [pc, #72]	@ (800ef10 <TIM_OC6_SetConfig+0xa4>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d109      	bne.n	800eee0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eed2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	695b      	ldr	r3, [r3, #20]
 800eed8:	029b      	lsls	r3, r3, #10
 800eeda:	697a      	ldr	r2, [r7, #20]
 800eedc:	4313      	orrs	r3, r2
 800eede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	697a      	ldr	r2, [r7, #20]
 800eee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	68fa      	ldr	r2, [r7, #12]
 800eeea:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685a      	ldr	r2, [r3, #4]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	693a      	ldr	r2, [r7, #16]
 800eef8:	621a      	str	r2, [r3, #32]
}
 800eefa:	bf00      	nop
 800eefc:	371c      	adds	r7, #28
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	feff8fff 	.word	0xfeff8fff
 800ef0c:	40010000 	.word	0x40010000
 800ef10:	40010400 	.word	0x40010400

0800ef14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b087      	sub	sp, #28
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	6a1b      	ldr	r3, [r3, #32]
 800ef24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	6a1b      	ldr	r3, [r3, #32]
 800ef2a:	f023 0201 	bic.w	r2, r3, #1
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	699b      	ldr	r3, [r3, #24]
 800ef36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	011b      	lsls	r3, r3, #4
 800ef44:	693a      	ldr	r2, [r7, #16]
 800ef46:	4313      	orrs	r3, r2
 800ef48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	f023 030a 	bic.w	r3, r3, #10
 800ef50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ef52:	697a      	ldr	r2, [r7, #20]
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	4313      	orrs	r3, r2
 800ef58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	693a      	ldr	r2, [r7, #16]
 800ef5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	697a      	ldr	r2, [r7, #20]
 800ef64:	621a      	str	r2, [r3, #32]
}
 800ef66:	bf00      	nop
 800ef68:	371c      	adds	r7, #28
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef70:	4770      	bx	lr

0800ef72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef72:	b480      	push	{r7}
 800ef74:	b087      	sub	sp, #28
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	60f8      	str	r0, [r7, #12]
 800ef7a:	60b9      	str	r1, [r7, #8]
 800ef7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	6a1b      	ldr	r3, [r3, #32]
 800ef82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6a1b      	ldr	r3, [r3, #32]
 800ef88:	f023 0210 	bic.w	r2, r3, #16
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	699b      	ldr	r3, [r3, #24]
 800ef94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ef96:	693b      	ldr	r3, [r7, #16]
 800ef98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ef9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	031b      	lsls	r3, r3, #12
 800efa2:	693a      	ldr	r2, [r7, #16]
 800efa4:	4313      	orrs	r3, r2
 800efa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800efae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	011b      	lsls	r3, r3, #4
 800efb4:	697a      	ldr	r2, [r7, #20]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	693a      	ldr	r2, [r7, #16]
 800efbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	697a      	ldr	r2, [r7, #20]
 800efc4:	621a      	str	r2, [r3, #32]
}
 800efc6:	bf00      	nop
 800efc8:	371c      	adds	r7, #28
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr

0800efd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800efd2:	b480      	push	{r7}
 800efd4:	b085      	sub	sp, #20
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800efea:	683a      	ldr	r2, [r7, #0]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	4313      	orrs	r3, r2
 800eff0:	f043 0307 	orr.w	r3, r3, #7
 800eff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	609a      	str	r2, [r3, #8]
}
 800effc:	bf00      	nop
 800effe:	3714      	adds	r7, #20
 800f000:	46bd      	mov	sp, r7
 800f002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f006:	4770      	bx	lr

0800f008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	689b      	ldr	r3, [r3, #8]
 800f01a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	021a      	lsls	r2, r3, #8
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	431a      	orrs	r2, r3
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	4313      	orrs	r3, r2
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	4313      	orrs	r3, r2
 800f034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	697a      	ldr	r2, [r7, #20]
 800f03a:	609a      	str	r2, [r3, #8]
}
 800f03c:	bf00      	nop
 800f03e:	371c      	adds	r7, #28
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr

0800f048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f058:	2b01      	cmp	r3, #1
 800f05a:	d101      	bne.n	800f060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f05c:	2302      	movs	r3, #2
 800f05e:	e06d      	b.n	800f13c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	2201      	movs	r2, #1
 800f064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2202      	movs	r2, #2
 800f06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	4a30      	ldr	r2, [pc, #192]	@ (800f148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d004      	beq.n	800f094 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	4a2f      	ldr	r2, [pc, #188]	@ (800f14c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d108      	bne.n	800f0a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f09a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	685b      	ldr	r3, [r3, #4]
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	4313      	orrs	r3, r2
 800f0a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	68fa      	ldr	r2, [r7, #12]
 800f0be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4a20      	ldr	r2, [pc, #128]	@ (800f148 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d022      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0d2:	d01d      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4a1d      	ldr	r2, [pc, #116]	@ (800f150 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	d018      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	4a1c      	ldr	r2, [pc, #112]	@ (800f154 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d013      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4a1a      	ldr	r2, [pc, #104]	@ (800f158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d00e      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	4a15      	ldr	r2, [pc, #84]	@ (800f14c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d009      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a16      	ldr	r2, [pc, #88]	@ (800f15c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d004      	beq.n	800f110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	4a15      	ldr	r2, [pc, #84]	@ (800f160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f10c:	4293      	cmp	r3, r2
 800f10e:	d10c      	bne.n	800f12a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f116:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	689b      	ldr	r3, [r3, #8]
 800f11c:	68ba      	ldr	r2, [r7, #8]
 800f11e:	4313      	orrs	r3, r2
 800f120:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68ba      	ldr	r2, [r7, #8]
 800f128:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2201      	movs	r2, #1
 800f12e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2200      	movs	r2, #0
 800f136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr
 800f148:	40010000 	.word	0x40010000
 800f14c:	40010400 	.word	0x40010400
 800f150:	40000400 	.word	0x40000400
 800f154:	40000800 	.word	0x40000800
 800f158:	40000c00 	.word	0x40000c00
 800f15c:	40014000 	.word	0x40014000
 800f160:	40001800 	.word	0x40001800

0800f164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f164:	b480      	push	{r7}
 800f166:	b085      	sub	sp, #20
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f16e:	2300      	movs	r3, #0
 800f170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d101      	bne.n	800f180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f17c:	2302      	movs	r3, #2
 800f17e:	e065      	b.n	800f24c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	4313      	orrs	r3, r2
 800f194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	4313      	orrs	r3, r2
 800f1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	4313      	orrs	r3, r2
 800f1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	699b      	ldr	r3, [r3, #24]
 800f1f4:	041b      	lsls	r3, r3, #16
 800f1f6:	4313      	orrs	r3, r2
 800f1f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	4a16      	ldr	r2, [pc, #88]	@ (800f258 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f200:	4293      	cmp	r3, r2
 800f202:	d004      	beq.n	800f20e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4a14      	ldr	r2, [pc, #80]	@ (800f25c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d115      	bne.n	800f23a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f218:	051b      	lsls	r3, r3, #20
 800f21a:	4313      	orrs	r3, r2
 800f21c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	69db      	ldr	r3, [r3, #28]
 800f228:	4313      	orrs	r3, r2
 800f22a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	6a1b      	ldr	r3, [r3, #32]
 800f236:	4313      	orrs	r3, r2
 800f238:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2200      	movs	r2, #0
 800f246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	40010000 	.word	0x40010000
 800f25c:	40010400 	.word	0x40010400

0800f260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f268:	bf00      	nop
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f27c:	bf00      	nop
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f290:	bf00      	nop
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d101      	bne.n	800f2ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e040      	b.n	800f330 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d106      	bne.n	800f2c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7f5 fe62 	bl	8004f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2224      	movs	r2, #36	@ 0x24
 800f2c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f022 0201 	bic.w	r2, r2, #1
 800f2d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 ffb6 	bl	8010254 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f2e8:	6878      	ldr	r0, [r7, #4]
 800f2ea:	f000 fd4f 	bl	800fd8c <UART_SetConfig>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d101      	bne.n	800f2f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e01b      	b.n	800f330 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	685a      	ldr	r2, [r3, #4]
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	689a      	ldr	r2, [r3, #8]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	681a      	ldr	r2, [r3, #0]
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f042 0201 	orr.w	r2, r2, #1
 800f326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f001 f835 	bl	8010398 <UART_CheckIdleState>
 800f32e:	4603      	mov	r3, r0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b08a      	sub	sp, #40	@ 0x28
 800f33c:	af02      	add	r7, sp, #8
 800f33e:	60f8      	str	r0, [r7, #12]
 800f340:	60b9      	str	r1, [r7, #8]
 800f342:	603b      	str	r3, [r7, #0]
 800f344:	4613      	mov	r3, r2
 800f346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f34c:	2b20      	cmp	r3, #32
 800f34e:	d177      	bne.n	800f440 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d002      	beq.n	800f35c <HAL_UART_Transmit+0x24>
 800f356:	88fb      	ldrh	r3, [r7, #6]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d101      	bne.n	800f360 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f35c:	2301      	movs	r3, #1
 800f35e:	e070      	b.n	800f442 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2221      	movs	r2, #33	@ 0x21
 800f36c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f36e:	f7f7 f8af 	bl	80064d0 <HAL_GetTick>
 800f372:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	88fa      	ldrh	r2, [r7, #6]
 800f378:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	88fa      	ldrh	r2, [r7, #6]
 800f380:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f38c:	d108      	bne.n	800f3a0 <HAL_UART_Transmit+0x68>
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d104      	bne.n	800f3a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f396:	2300      	movs	r3, #0
 800f398:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	61bb      	str	r3, [r7, #24]
 800f39e:	e003      	b.n	800f3a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f3a8:	e02f      	b.n	800f40a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	9300      	str	r3, [sp, #0]
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	2180      	movs	r1, #128	@ 0x80
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f001 f846 	bl	8010446 <UART_WaitOnFlagUntilTimeout>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d004      	beq.n	800f3ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2220      	movs	r2, #32
 800f3c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	e03b      	b.n	800f442 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d10b      	bne.n	800f3e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f3d0:	69bb      	ldr	r3, [r7, #24]
 800f3d2:	881b      	ldrh	r3, [r3, #0]
 800f3d4:	461a      	mov	r2, r3
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f3de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f3e0:	69bb      	ldr	r3, [r7, #24]
 800f3e2:	3302      	adds	r3, #2
 800f3e4:	61bb      	str	r3, [r7, #24]
 800f3e6:	e007      	b.n	800f3f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	781a      	ldrb	r2, [r3, #0]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f3f2:	69fb      	ldr	r3, [r7, #28]
 800f3f4:	3301      	adds	r3, #1
 800f3f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	3b01      	subs	r3, #1
 800f402:	b29a      	uxth	r2, r3
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f410:	b29b      	uxth	r3, r3
 800f412:	2b00      	cmp	r3, #0
 800f414:	d1c9      	bne.n	800f3aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	9300      	str	r3, [sp, #0]
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	2200      	movs	r2, #0
 800f41e:	2140      	movs	r1, #64	@ 0x40
 800f420:	68f8      	ldr	r0, [r7, #12]
 800f422:	f001 f810 	bl	8010446 <UART_WaitOnFlagUntilTimeout>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d004      	beq.n	800f436 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2220      	movs	r2, #32
 800f430:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f432:	2303      	movs	r3, #3
 800f434:	e005      	b.n	800f442 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2220      	movs	r2, #32
 800f43a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	e000      	b.n	800f442 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f440:	2302      	movs	r3, #2
  }
}
 800f442:	4618      	mov	r0, r3
 800f444:	3720      	adds	r7, #32
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}

0800f44a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b08a      	sub	sp, #40	@ 0x28
 800f44e:	af02      	add	r7, sp, #8
 800f450:	60f8      	str	r0, [r7, #12]
 800f452:	60b9      	str	r1, [r7, #8]
 800f454:	603b      	str	r3, [r7, #0]
 800f456:	4613      	mov	r3, r2
 800f458:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f460:	2b20      	cmp	r3, #32
 800f462:	f040 80b5 	bne.w	800f5d0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d002      	beq.n	800f472 <HAL_UART_Receive+0x28>
 800f46c:	88fb      	ldrh	r3, [r7, #6]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d101      	bne.n	800f476 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f472:	2301      	movs	r3, #1
 800f474:	e0ad      	b.n	800f5d2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2200      	movs	r2, #0
 800f47a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	2222      	movs	r2, #34	@ 0x22
 800f482:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2200      	movs	r2, #0
 800f48a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f48c:	f7f7 f820 	bl	80064d0 <HAL_GetTick>
 800f490:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	88fa      	ldrh	r2, [r7, #6]
 800f496:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	88fa      	ldrh	r2, [r7, #6]
 800f49e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	689b      	ldr	r3, [r3, #8]
 800f4a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f4aa:	d10e      	bne.n	800f4ca <HAL_UART_Receive+0x80>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d105      	bne.n	800f4c0 <HAL_UART_Receive+0x76>
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f4ba:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4be:	e02d      	b.n	800f51c <HAL_UART_Receive+0xd2>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	22ff      	movs	r2, #255	@ 0xff
 800f4c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4c8:	e028      	b.n	800f51c <HAL_UART_Receive+0xd2>
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	689b      	ldr	r3, [r3, #8]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10d      	bne.n	800f4ee <HAL_UART_Receive+0xa4>
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	691b      	ldr	r3, [r3, #16]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d104      	bne.n	800f4e4 <HAL_UART_Receive+0x9a>
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	22ff      	movs	r2, #255	@ 0xff
 800f4de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4e2:	e01b      	b.n	800f51c <HAL_UART_Receive+0xd2>
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	227f      	movs	r2, #127	@ 0x7f
 800f4e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f4ec:	e016      	b.n	800f51c <HAL_UART_Receive+0xd2>
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f4f6:	d10d      	bne.n	800f514 <HAL_UART_Receive+0xca>
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d104      	bne.n	800f50a <HAL_UART_Receive+0xc0>
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	227f      	movs	r2, #127	@ 0x7f
 800f504:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f508:	e008      	b.n	800f51c <HAL_UART_Receive+0xd2>
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	223f      	movs	r2, #63	@ 0x3f
 800f50e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800f512:	e003      	b.n	800f51c <HAL_UART_Receive+0xd2>
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	2200      	movs	r2, #0
 800f518:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f522:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	689b      	ldr	r3, [r3, #8]
 800f528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f52c:	d108      	bne.n	800f540 <HAL_UART_Receive+0xf6>
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	691b      	ldr	r3, [r3, #16]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d104      	bne.n	800f540 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f536:	2300      	movs	r3, #0
 800f538:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f53a:	68bb      	ldr	r3, [r7, #8]
 800f53c:	61bb      	str	r3, [r7, #24]
 800f53e:	e003      	b.n	800f548 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f544:	2300      	movs	r3, #0
 800f546:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f548:	e036      	b.n	800f5b8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	9300      	str	r3, [sp, #0]
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2200      	movs	r2, #0
 800f552:	2120      	movs	r1, #32
 800f554:	68f8      	ldr	r0, [r7, #12]
 800f556:	f000 ff76 	bl	8010446 <UART_WaitOnFlagUntilTimeout>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d005      	beq.n	800f56c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2220      	movs	r2, #32
 800f564:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 800f568:	2303      	movs	r3, #3
 800f56a:	e032      	b.n	800f5d2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d10c      	bne.n	800f58c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f578:	b29a      	uxth	r2, r3
 800f57a:	8a7b      	ldrh	r3, [r7, #18]
 800f57c:	4013      	ands	r3, r2
 800f57e:	b29a      	uxth	r2, r3
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f584:	69bb      	ldr	r3, [r7, #24]
 800f586:	3302      	adds	r3, #2
 800f588:	61bb      	str	r3, [r7, #24]
 800f58a:	e00c      	b.n	800f5a6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f592:	b2da      	uxtb	r2, r3
 800f594:	8a7b      	ldrh	r3, [r7, #18]
 800f596:	b2db      	uxtb	r3, r3
 800f598:	4013      	ands	r3, r2
 800f59a:	b2da      	uxtb	r2, r3
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	3b01      	subs	r3, #1
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d1c2      	bne.n	800f54a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2220      	movs	r2, #32
 800f5c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	e000      	b.n	800f5d2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f5d0:	2302      	movs	r3, #2
  }
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3720      	adds	r7, #32
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}

0800f5da <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b08a      	sub	sp, #40	@ 0x28
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	60f8      	str	r0, [r7, #12]
 800f5e2:	60b9      	str	r1, [r7, #8]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5ee:	2b20      	cmp	r3, #32
 800f5f0:	d132      	bne.n	800f658 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <HAL_UART_Receive_DMA+0x24>
 800f5f8:	88fb      	ldrh	r3, [r7, #6]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d101      	bne.n	800f602 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f5fe:	2301      	movs	r3, #1
 800f600:	e02b      	b.n	800f65a <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	2200      	movs	r2, #0
 800f606:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f612:	2b00      	cmp	r3, #0
 800f614:	d018      	beq.n	800f648 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f61c:	697b      	ldr	r3, [r7, #20]
 800f61e:	e853 3f00 	ldrex	r3, [r3]
 800f622:	613b      	str	r3, [r7, #16]
   return(result);
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f62a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	461a      	mov	r2, r3
 800f632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f634:	623b      	str	r3, [r7, #32]
 800f636:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f638:	69f9      	ldr	r1, [r7, #28]
 800f63a:	6a3a      	ldr	r2, [r7, #32]
 800f63c:	e841 2300 	strex	r3, r2, [r1]
 800f640:	61bb      	str	r3, [r7, #24]
   return(result);
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d1e6      	bne.n	800f616 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f648:	88fb      	ldrh	r3, [r7, #6]
 800f64a:	461a      	mov	r2, r3
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f000 ff66 	bl	8010520 <UART_Start_Receive_DMA>
 800f654:	4603      	mov	r3, r0
 800f656:	e000      	b.n	800f65a <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f658:	2302      	movs	r3, #2
  }
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3728      	adds	r7, #40	@ 0x28
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}

0800f662 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f662:	b580      	push	{r7, lr}
 800f664:	b090      	sub	sp, #64	@ 0x40
 800f666:	af00      	add	r7, sp, #0
 800f668:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f676:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f682:	2b80      	cmp	r3, #128	@ 0x80
 800f684:	d139      	bne.n	800f6fa <HAL_UART_DMAStop+0x98>
 800f686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f688:	2b21      	cmp	r3, #33	@ 0x21
 800f68a:	d136      	bne.n	800f6fa <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	3308      	adds	r3, #8
 800f692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f694:	6a3b      	ldr	r3, [r7, #32]
 800f696:	e853 3f00 	ldrex	r3, [r3]
 800f69a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f6a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	3308      	adds	r3, #8
 800f6aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f6ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f6b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f6b4:	e841 2300 	strex	r3, r2, [r1]
 800f6b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f6ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1e5      	bne.n	800f68c <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d015      	beq.n	800f6f4 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7f7 fd81 	bl	80071d4 <HAL_DMA_Abort>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d00d      	beq.n	800f6f4 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7f7 ff95 	bl	800760c <HAL_DMA_GetError>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b20      	cmp	r3, #32
 800f6e6:	d105      	bne.n	800f6f4 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2210      	movs	r2, #16
 800f6ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f6f0:	2303      	movs	r3, #3
 800f6f2:	e044      	b.n	800f77e <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f000 ffb3 	bl	8010660 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f704:	2b40      	cmp	r3, #64	@ 0x40
 800f706:	d139      	bne.n	800f77c <HAL_UART_DMAStop+0x11a>
 800f708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f70a:	2b22      	cmp	r3, #34	@ 0x22
 800f70c:	d136      	bne.n	800f77c <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	3308      	adds	r3, #8
 800f714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	e853 3f00 	ldrex	r3, [r3]
 800f71c:	60bb      	str	r3, [r7, #8]
   return(result);
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f724:	633b      	str	r3, [r7, #48]	@ 0x30
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3308      	adds	r3, #8
 800f72c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f72e:	61ba      	str	r2, [r7, #24]
 800f730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f732:	6979      	ldr	r1, [r7, #20]
 800f734:	69ba      	ldr	r2, [r7, #24]
 800f736:	e841 2300 	strex	r3, r2, [r1]
 800f73a:	613b      	str	r3, [r7, #16]
   return(result);
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1e5      	bne.n	800f70e <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f746:	2b00      	cmp	r3, #0
 800f748:	d015      	beq.n	800f776 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f74e:	4618      	mov	r0, r3
 800f750:	f7f7 fd40 	bl	80071d4 <HAL_DMA_Abort>
 800f754:	4603      	mov	r3, r0
 800f756:	2b00      	cmp	r3, #0
 800f758:	d00d      	beq.n	800f776 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f75e:	4618      	mov	r0, r3
 800f760:	f7f7 ff54 	bl	800760c <HAL_DMA_GetError>
 800f764:	4603      	mov	r3, r0
 800f766:	2b20      	cmp	r3, #32
 800f768:	d105      	bne.n	800f776 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2210      	movs	r2, #16
 800f76e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800f772:	2303      	movs	r3, #3
 800f774:	e003      	b.n	800f77e <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f000 ff98 	bl	80106ac <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3740      	adds	r7, #64	@ 0x40
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
	...

0800f788 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b0ba      	sub	sp, #232	@ 0xe8
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	69db      	ldr	r3, [r3, #28]
 800f796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f7ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f7b2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f7b6:	4013      	ands	r3, r2
 800f7b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f7bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d115      	bne.n	800f7f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f7c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7c8:	f003 0320 	and.w	r3, r3, #32
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d00f      	beq.n	800f7f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7d4:	f003 0320 	and.w	r3, r3, #32
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d009      	beq.n	800f7f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f000 82b1 	beq.w	800fd48 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	4798      	blx	r3
      }
      return;
 800f7ee:	e2ab      	b.n	800fd48 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f7f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f000 8117 	beq.w	800fa28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f7fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7fe:	f003 0301 	and.w	r3, r3, #1
 800f802:	2b00      	cmp	r3, #0
 800f804:	d106      	bne.n	800f814 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f806:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f80a:	4b85      	ldr	r3, [pc, #532]	@ (800fa20 <HAL_UART_IRQHandler+0x298>)
 800f80c:	4013      	ands	r3, r2
 800f80e:	2b00      	cmp	r3, #0
 800f810:	f000 810a 	beq.w	800fa28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f818:	f003 0301 	and.w	r3, r3, #1
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d011      	beq.n	800f844 <HAL_UART_IRQHandler+0xbc>
 800f820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d00b      	beq.n	800f844 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2201      	movs	r2, #1
 800f832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f83a:	f043 0201 	orr.w	r2, r3, #1
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f848:	f003 0302 	and.w	r3, r3, #2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d011      	beq.n	800f874 <HAL_UART_IRQHandler+0xec>
 800f850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f854:	f003 0301 	and.w	r3, r3, #1
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d00b      	beq.n	800f874 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2202      	movs	r2, #2
 800f862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f86a:	f043 0204 	orr.w	r2, r3, #4
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f878:	f003 0304 	and.w	r3, r3, #4
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d011      	beq.n	800f8a4 <HAL_UART_IRQHandler+0x11c>
 800f880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00b      	beq.n	800f8a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2204      	movs	r2, #4
 800f892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f89a:	f043 0202 	orr.w	r2, r3, #2
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f8a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8a8:	f003 0308 	and.w	r3, r3, #8
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d017      	beq.n	800f8e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f8b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8b4:	f003 0320 	and.w	r3, r3, #32
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d105      	bne.n	800f8c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800f8bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d00b      	beq.n	800f8e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	2208      	movs	r2, #8
 800f8ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f8d6:	f043 0208 	orr.w	r2, r3, #8
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f8e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d012      	beq.n	800f912 <HAL_UART_IRQHandler+0x18a>
 800f8ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00c      	beq.n	800f912 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f908:	f043 0220 	orr.w	r2, r3, #32
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f918:	2b00      	cmp	r3, #0
 800f91a:	f000 8217 	beq.w	800fd4c <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f91e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f922:	f003 0320 	and.w	r3, r3, #32
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00d      	beq.n	800f946 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f92a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f92e:	f003 0320 	and.w	r3, r3, #32
 800f932:	2b00      	cmp	r3, #0
 800f934:	d007      	beq.n	800f946 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d003      	beq.n	800f946 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f94c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f95a:	2b40      	cmp	r3, #64	@ 0x40
 800f95c:	d005      	beq.n	800f96a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f95e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f962:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f966:	2b00      	cmp	r3, #0
 800f968:	d04f      	beq.n	800fa0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f000 fe9e 	bl	80106ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f97a:	2b40      	cmp	r3, #64	@ 0x40
 800f97c:	d141      	bne.n	800fa02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3308      	adds	r3, #8
 800f984:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f988:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f98c:	e853 3f00 	ldrex	r3, [r3]
 800f990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f994:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f99c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3308      	adds	r3, #8
 800f9a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f9aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f9ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f9b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f9ba:	e841 2300 	strex	r3, r2, [r1]
 800f9be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f9c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1d9      	bne.n	800f97e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d013      	beq.n	800f9fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9d6:	4a13      	ldr	r2, [pc, #76]	@ (800fa24 <HAL_UART_IRQHandler+0x29c>)
 800f9d8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7f7 fc68 	bl	80072b4 <HAL_DMA_Abort_IT>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d017      	beq.n	800fa1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800f9f4:	4610      	mov	r0, r2
 800f9f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9f8:	e00f      	b.n	800fa1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f7f6 fbf6 	bl	80061ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa00:	e00b      	b.n	800fa1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7f6 fbf2 	bl	80061ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa08:	e007      	b.n	800fa1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f7f6 fbee 	bl	80061ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800fa18:	e198      	b.n	800fd4c <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa1a:	bf00      	nop
    return;
 800fa1c:	e196      	b.n	800fd4c <HAL_UART_IRQHandler+0x5c4>
 800fa1e:	bf00      	nop
 800fa20:	04000120 	.word	0x04000120
 800fa24:	080109c3 	.word	0x080109c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	f040 8166 	bne.w	800fcfe <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fa32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa36:	f003 0310 	and.w	r3, r3, #16
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f000 815f 	beq.w	800fcfe <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa44:	f003 0310 	and.w	r3, r3, #16
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	f000 8158 	beq.w	800fcfe <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	2210      	movs	r2, #16
 800fa54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	689b      	ldr	r3, [r3, #8]
 800fa5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa60:	2b40      	cmp	r3, #64	@ 0x40
 800fa62:	f040 80d0 	bne.w	800fc06 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	685b      	ldr	r3, [r3, #4]
 800fa6e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	f000 80ab 	beq.w	800fbd2 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fa82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa86:	429a      	cmp	r2, r3
 800fa88:	f080 80a3 	bcs.w	800fbd2 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa9a:	69db      	ldr	r3, [r3, #28]
 800fa9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800faa0:	f000 8086 	beq.w	800fbb0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fab0:	e853 3f00 	ldrex	r3, [r3]
 800fab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fabc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	461a      	mov	r2, r3
 800faca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800face:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fad2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fada:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fade:	e841 2300 	strex	r3, r2, [r1]
 800fae2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800faea:	2b00      	cmp	r3, #0
 800faec:	d1da      	bne.n	800faa4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	3308      	adds	r3, #8
 800faf4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800faf8:	e853 3f00 	ldrex	r3, [r3]
 800fafc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fafe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb00:	f023 0301 	bic.w	r3, r3, #1
 800fb04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	3308      	adds	r3, #8
 800fb0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fb16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fb1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb1e:	e841 2300 	strex	r3, r2, [r1]
 800fb22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fb24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1e1      	bne.n	800faee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	3308      	adds	r3, #8
 800fb30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb34:	e853 3f00 	ldrex	r3, [r3]
 800fb38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fb3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	3308      	adds	r3, #8
 800fb4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fb4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fb50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fb54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fb56:	e841 2300 	strex	r3, r2, [r1]
 800fb5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fb5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d1e3      	bne.n	800fb2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2220      	movs	r2, #32
 800fb66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb78:	e853 3f00 	ldrex	r3, [r3]
 800fb7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fb7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb80:	f023 0310 	bic.w	r3, r3, #16
 800fb84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fb92:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fb98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fb9a:	e841 2300 	strex	r3, r2, [r1]
 800fb9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d1e4      	bne.n	800fb70 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7f7 fb12 	bl	80071d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	1ad3      	subs	r3, r2, r3
 800fbc6:	b29b      	uxth	r3, r3
 800fbc8:	4619      	mov	r1, r3
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 f8d2 	bl	800fd74 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fbd0:	e0be      	b.n	800fd50 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fbd8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	f040 80b7 	bne.w	800fd50 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fbe6:	69db      	ldr	r3, [r3, #28]
 800fbe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbec:	f040 80b0 	bne.w	800fd50 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2202      	movs	r2, #2
 800fbf4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f8b8 	bl	800fd74 <HAL_UARTEx_RxEventCallback>
      return;
 800fc04:	e0a4      	b.n	800fd50 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	1ad3      	subs	r3, r2, r3
 800fc16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f000 8096 	beq.w	800fd54 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800fc28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f000 8091 	beq.w	800fd54 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc3a:	e853 3f00 	ldrex	r3, [r3]
 800fc3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fc54:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc5c:	e841 2300 	strex	r3, r2, [r1]
 800fc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d1e4      	bne.n	800fc32 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	3308      	adds	r3, #8
 800fc6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc72:	e853 3f00 	ldrex	r3, [r3]
 800fc76:	623b      	str	r3, [r7, #32]
   return(result);
 800fc78:	6a3b      	ldr	r3, [r7, #32]
 800fc7a:	f023 0301 	bic.w	r3, r3, #1
 800fc7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	3308      	adds	r3, #8
 800fc88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fc8c:	633a      	str	r2, [r7, #48]	@ 0x30
 800fc8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc94:	e841 2300 	strex	r3, r2, [r1]
 800fc98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e3      	bne.n	800fc68 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2220      	movs	r2, #32
 800fca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	e853 3f00 	ldrex	r3, [r3]
 800fcc0:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f023 0310 	bic.w	r3, r3, #16
 800fcc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fcd6:	61fb      	str	r3, [r7, #28]
 800fcd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcda:	69b9      	ldr	r1, [r7, #24]
 800fcdc:	69fa      	ldr	r2, [r7, #28]
 800fcde:	e841 2300 	strex	r3, r2, [r1]
 800fce2:	617b      	str	r3, [r7, #20]
   return(result);
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d1e4      	bne.n	800fcb4 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2202      	movs	r2, #2
 800fcee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fcf0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f83c 	bl	800fd74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fcfc:	e02a      	b.n	800fd54 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fcfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d00e      	beq.n	800fd28 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fd0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d008      	beq.n	800fd28 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d01c      	beq.n	800fd58 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	4798      	blx	r3
    }
    return;
 800fd26:	e017      	b.n	800fd58 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d012      	beq.n	800fd5a <HAL_UART_IRQHandler+0x5d2>
 800fd34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d00c      	beq.n	800fd5a <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 fe50 	bl	80109e6 <UART_EndTransmit_IT>
    return;
 800fd46:	e008      	b.n	800fd5a <HAL_UART_IRQHandler+0x5d2>
      return;
 800fd48:	bf00      	nop
 800fd4a:	e006      	b.n	800fd5a <HAL_UART_IRQHandler+0x5d2>
    return;
 800fd4c:	bf00      	nop
 800fd4e:	e004      	b.n	800fd5a <HAL_UART_IRQHandler+0x5d2>
      return;
 800fd50:	bf00      	nop
 800fd52:	e002      	b.n	800fd5a <HAL_UART_IRQHandler+0x5d2>
      return;
 800fd54:	bf00      	nop
 800fd56:	e000      	b.n	800fd5a <HAL_UART_IRQHandler+0x5d2>
    return;
 800fd58:	bf00      	nop
  }

}
 800fd5a:	37e8      	adds	r7, #232	@ 0xe8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd60:	b480      	push	{r7}
 800fd62:	b083      	sub	sp, #12
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fd68:	bf00      	nop
 800fd6a:	370c      	adds	r7, #12
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fd80:	bf00      	nop
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr

0800fd8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b088      	sub	sp, #32
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fd94:	2300      	movs	r3, #0
 800fd96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	689a      	ldr	r2, [r3, #8]
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	431a      	orrs	r2, r3
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	695b      	ldr	r3, [r3, #20]
 800fda6:	431a      	orrs	r2, r3
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	69db      	ldr	r3, [r3, #28]
 800fdac:	4313      	orrs	r3, r2
 800fdae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	681a      	ldr	r2, [r3, #0]
 800fdb6:	4ba6      	ldr	r3, [pc, #664]	@ (8010050 <UART_SetConfig+0x2c4>)
 800fdb8:	4013      	ands	r3, r2
 800fdba:	687a      	ldr	r2, [r7, #4]
 800fdbc:	6812      	ldr	r2, [r2, #0]
 800fdbe:	6979      	ldr	r1, [r7, #20]
 800fdc0:	430b      	orrs	r3, r1
 800fdc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	685b      	ldr	r3, [r3, #4]
 800fdca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	68da      	ldr	r2, [r3, #12]
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	430a      	orrs	r2, r1
 800fdd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	699b      	ldr	r3, [r3, #24]
 800fdde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6a1b      	ldr	r3, [r3, #32]
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	697a      	ldr	r2, [r7, #20]
 800fdfa:	430a      	orrs	r2, r1
 800fdfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4a94      	ldr	r2, [pc, #592]	@ (8010054 <UART_SetConfig+0x2c8>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d120      	bne.n	800fe4a <UART_SetConfig+0xbe>
 800fe08:	4b93      	ldr	r3, [pc, #588]	@ (8010058 <UART_SetConfig+0x2cc>)
 800fe0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe0e:	f003 0303 	and.w	r3, r3, #3
 800fe12:	2b03      	cmp	r3, #3
 800fe14:	d816      	bhi.n	800fe44 <UART_SetConfig+0xb8>
 800fe16:	a201      	add	r2, pc, #4	@ (adr r2, 800fe1c <UART_SetConfig+0x90>)
 800fe18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1c:	0800fe2d 	.word	0x0800fe2d
 800fe20:	0800fe39 	.word	0x0800fe39
 800fe24:	0800fe33 	.word	0x0800fe33
 800fe28:	0800fe3f 	.word	0x0800fe3f
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	77fb      	strb	r3, [r7, #31]
 800fe30:	e150      	b.n	80100d4 <UART_SetConfig+0x348>
 800fe32:	2302      	movs	r3, #2
 800fe34:	77fb      	strb	r3, [r7, #31]
 800fe36:	e14d      	b.n	80100d4 <UART_SetConfig+0x348>
 800fe38:	2304      	movs	r3, #4
 800fe3a:	77fb      	strb	r3, [r7, #31]
 800fe3c:	e14a      	b.n	80100d4 <UART_SetConfig+0x348>
 800fe3e:	2308      	movs	r3, #8
 800fe40:	77fb      	strb	r3, [r7, #31]
 800fe42:	e147      	b.n	80100d4 <UART_SetConfig+0x348>
 800fe44:	2310      	movs	r3, #16
 800fe46:	77fb      	strb	r3, [r7, #31]
 800fe48:	e144      	b.n	80100d4 <UART_SetConfig+0x348>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4a83      	ldr	r2, [pc, #524]	@ (801005c <UART_SetConfig+0x2d0>)
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d132      	bne.n	800feba <UART_SetConfig+0x12e>
 800fe54:	4b80      	ldr	r3, [pc, #512]	@ (8010058 <UART_SetConfig+0x2cc>)
 800fe56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe5a:	f003 030c 	and.w	r3, r3, #12
 800fe5e:	2b0c      	cmp	r3, #12
 800fe60:	d828      	bhi.n	800feb4 <UART_SetConfig+0x128>
 800fe62:	a201      	add	r2, pc, #4	@ (adr r2, 800fe68 <UART_SetConfig+0xdc>)
 800fe64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe68:	0800fe9d 	.word	0x0800fe9d
 800fe6c:	0800feb5 	.word	0x0800feb5
 800fe70:	0800feb5 	.word	0x0800feb5
 800fe74:	0800feb5 	.word	0x0800feb5
 800fe78:	0800fea9 	.word	0x0800fea9
 800fe7c:	0800feb5 	.word	0x0800feb5
 800fe80:	0800feb5 	.word	0x0800feb5
 800fe84:	0800feb5 	.word	0x0800feb5
 800fe88:	0800fea3 	.word	0x0800fea3
 800fe8c:	0800feb5 	.word	0x0800feb5
 800fe90:	0800feb5 	.word	0x0800feb5
 800fe94:	0800feb5 	.word	0x0800feb5
 800fe98:	0800feaf 	.word	0x0800feaf
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	77fb      	strb	r3, [r7, #31]
 800fea0:	e118      	b.n	80100d4 <UART_SetConfig+0x348>
 800fea2:	2302      	movs	r3, #2
 800fea4:	77fb      	strb	r3, [r7, #31]
 800fea6:	e115      	b.n	80100d4 <UART_SetConfig+0x348>
 800fea8:	2304      	movs	r3, #4
 800feaa:	77fb      	strb	r3, [r7, #31]
 800feac:	e112      	b.n	80100d4 <UART_SetConfig+0x348>
 800feae:	2308      	movs	r3, #8
 800feb0:	77fb      	strb	r3, [r7, #31]
 800feb2:	e10f      	b.n	80100d4 <UART_SetConfig+0x348>
 800feb4:	2310      	movs	r3, #16
 800feb6:	77fb      	strb	r3, [r7, #31]
 800feb8:	e10c      	b.n	80100d4 <UART_SetConfig+0x348>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	4a68      	ldr	r2, [pc, #416]	@ (8010060 <UART_SetConfig+0x2d4>)
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d120      	bne.n	800ff06 <UART_SetConfig+0x17a>
 800fec4:	4b64      	ldr	r3, [pc, #400]	@ (8010058 <UART_SetConfig+0x2cc>)
 800fec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800feca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800fece:	2b30      	cmp	r3, #48	@ 0x30
 800fed0:	d013      	beq.n	800fefa <UART_SetConfig+0x16e>
 800fed2:	2b30      	cmp	r3, #48	@ 0x30
 800fed4:	d814      	bhi.n	800ff00 <UART_SetConfig+0x174>
 800fed6:	2b20      	cmp	r3, #32
 800fed8:	d009      	beq.n	800feee <UART_SetConfig+0x162>
 800feda:	2b20      	cmp	r3, #32
 800fedc:	d810      	bhi.n	800ff00 <UART_SetConfig+0x174>
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d002      	beq.n	800fee8 <UART_SetConfig+0x15c>
 800fee2:	2b10      	cmp	r3, #16
 800fee4:	d006      	beq.n	800fef4 <UART_SetConfig+0x168>
 800fee6:	e00b      	b.n	800ff00 <UART_SetConfig+0x174>
 800fee8:	2300      	movs	r3, #0
 800feea:	77fb      	strb	r3, [r7, #31]
 800feec:	e0f2      	b.n	80100d4 <UART_SetConfig+0x348>
 800feee:	2302      	movs	r3, #2
 800fef0:	77fb      	strb	r3, [r7, #31]
 800fef2:	e0ef      	b.n	80100d4 <UART_SetConfig+0x348>
 800fef4:	2304      	movs	r3, #4
 800fef6:	77fb      	strb	r3, [r7, #31]
 800fef8:	e0ec      	b.n	80100d4 <UART_SetConfig+0x348>
 800fefa:	2308      	movs	r3, #8
 800fefc:	77fb      	strb	r3, [r7, #31]
 800fefe:	e0e9      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff00:	2310      	movs	r3, #16
 800ff02:	77fb      	strb	r3, [r7, #31]
 800ff04:	e0e6      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4a56      	ldr	r2, [pc, #344]	@ (8010064 <UART_SetConfig+0x2d8>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d120      	bne.n	800ff52 <UART_SetConfig+0x1c6>
 800ff10:	4b51      	ldr	r3, [pc, #324]	@ (8010058 <UART_SetConfig+0x2cc>)
 800ff12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ff1a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ff1c:	d013      	beq.n	800ff46 <UART_SetConfig+0x1ba>
 800ff1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ff20:	d814      	bhi.n	800ff4c <UART_SetConfig+0x1c0>
 800ff22:	2b80      	cmp	r3, #128	@ 0x80
 800ff24:	d009      	beq.n	800ff3a <UART_SetConfig+0x1ae>
 800ff26:	2b80      	cmp	r3, #128	@ 0x80
 800ff28:	d810      	bhi.n	800ff4c <UART_SetConfig+0x1c0>
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d002      	beq.n	800ff34 <UART_SetConfig+0x1a8>
 800ff2e:	2b40      	cmp	r3, #64	@ 0x40
 800ff30:	d006      	beq.n	800ff40 <UART_SetConfig+0x1b4>
 800ff32:	e00b      	b.n	800ff4c <UART_SetConfig+0x1c0>
 800ff34:	2300      	movs	r3, #0
 800ff36:	77fb      	strb	r3, [r7, #31]
 800ff38:	e0cc      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff3a:	2302      	movs	r3, #2
 800ff3c:	77fb      	strb	r3, [r7, #31]
 800ff3e:	e0c9      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff40:	2304      	movs	r3, #4
 800ff42:	77fb      	strb	r3, [r7, #31]
 800ff44:	e0c6      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff46:	2308      	movs	r3, #8
 800ff48:	77fb      	strb	r3, [r7, #31]
 800ff4a:	e0c3      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff4c:	2310      	movs	r3, #16
 800ff4e:	77fb      	strb	r3, [r7, #31]
 800ff50:	e0c0      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4a44      	ldr	r2, [pc, #272]	@ (8010068 <UART_SetConfig+0x2dc>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d125      	bne.n	800ffa8 <UART_SetConfig+0x21c>
 800ff5c:	4b3e      	ldr	r3, [pc, #248]	@ (8010058 <UART_SetConfig+0x2cc>)
 800ff5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ff62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ff66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff6a:	d017      	beq.n	800ff9c <UART_SetConfig+0x210>
 800ff6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ff70:	d817      	bhi.n	800ffa2 <UART_SetConfig+0x216>
 800ff72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff76:	d00b      	beq.n	800ff90 <UART_SetConfig+0x204>
 800ff78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff7c:	d811      	bhi.n	800ffa2 <UART_SetConfig+0x216>
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d003      	beq.n	800ff8a <UART_SetConfig+0x1fe>
 800ff82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ff86:	d006      	beq.n	800ff96 <UART_SetConfig+0x20a>
 800ff88:	e00b      	b.n	800ffa2 <UART_SetConfig+0x216>
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	77fb      	strb	r3, [r7, #31]
 800ff8e:	e0a1      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff90:	2302      	movs	r3, #2
 800ff92:	77fb      	strb	r3, [r7, #31]
 800ff94:	e09e      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff96:	2304      	movs	r3, #4
 800ff98:	77fb      	strb	r3, [r7, #31]
 800ff9a:	e09b      	b.n	80100d4 <UART_SetConfig+0x348>
 800ff9c:	2308      	movs	r3, #8
 800ff9e:	77fb      	strb	r3, [r7, #31]
 800ffa0:	e098      	b.n	80100d4 <UART_SetConfig+0x348>
 800ffa2:	2310      	movs	r3, #16
 800ffa4:	77fb      	strb	r3, [r7, #31]
 800ffa6:	e095      	b.n	80100d4 <UART_SetConfig+0x348>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a2f      	ldr	r2, [pc, #188]	@ (801006c <UART_SetConfig+0x2e0>)
 800ffae:	4293      	cmp	r3, r2
 800ffb0:	d125      	bne.n	800fffe <UART_SetConfig+0x272>
 800ffb2:	4b29      	ldr	r3, [pc, #164]	@ (8010058 <UART_SetConfig+0x2cc>)
 800ffb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ffb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ffbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ffc0:	d017      	beq.n	800fff2 <UART_SetConfig+0x266>
 800ffc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ffc6:	d817      	bhi.n	800fff8 <UART_SetConfig+0x26c>
 800ffc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffcc:	d00b      	beq.n	800ffe6 <UART_SetConfig+0x25a>
 800ffce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ffd2:	d811      	bhi.n	800fff8 <UART_SetConfig+0x26c>
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d003      	beq.n	800ffe0 <UART_SetConfig+0x254>
 800ffd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ffdc:	d006      	beq.n	800ffec <UART_SetConfig+0x260>
 800ffde:	e00b      	b.n	800fff8 <UART_SetConfig+0x26c>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	77fb      	strb	r3, [r7, #31]
 800ffe4:	e076      	b.n	80100d4 <UART_SetConfig+0x348>
 800ffe6:	2302      	movs	r3, #2
 800ffe8:	77fb      	strb	r3, [r7, #31]
 800ffea:	e073      	b.n	80100d4 <UART_SetConfig+0x348>
 800ffec:	2304      	movs	r3, #4
 800ffee:	77fb      	strb	r3, [r7, #31]
 800fff0:	e070      	b.n	80100d4 <UART_SetConfig+0x348>
 800fff2:	2308      	movs	r3, #8
 800fff4:	77fb      	strb	r3, [r7, #31]
 800fff6:	e06d      	b.n	80100d4 <UART_SetConfig+0x348>
 800fff8:	2310      	movs	r3, #16
 800fffa:	77fb      	strb	r3, [r7, #31]
 800fffc:	e06a      	b.n	80100d4 <UART_SetConfig+0x348>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	4a1b      	ldr	r2, [pc, #108]	@ (8010070 <UART_SetConfig+0x2e4>)
 8010004:	4293      	cmp	r3, r2
 8010006:	d138      	bne.n	801007a <UART_SetConfig+0x2ee>
 8010008:	4b13      	ldr	r3, [pc, #76]	@ (8010058 <UART_SetConfig+0x2cc>)
 801000a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801000e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8010012:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010016:	d017      	beq.n	8010048 <UART_SetConfig+0x2bc>
 8010018:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801001c:	d82a      	bhi.n	8010074 <UART_SetConfig+0x2e8>
 801001e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010022:	d00b      	beq.n	801003c <UART_SetConfig+0x2b0>
 8010024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010028:	d824      	bhi.n	8010074 <UART_SetConfig+0x2e8>
 801002a:	2b00      	cmp	r3, #0
 801002c:	d003      	beq.n	8010036 <UART_SetConfig+0x2aa>
 801002e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010032:	d006      	beq.n	8010042 <UART_SetConfig+0x2b6>
 8010034:	e01e      	b.n	8010074 <UART_SetConfig+0x2e8>
 8010036:	2300      	movs	r3, #0
 8010038:	77fb      	strb	r3, [r7, #31]
 801003a:	e04b      	b.n	80100d4 <UART_SetConfig+0x348>
 801003c:	2302      	movs	r3, #2
 801003e:	77fb      	strb	r3, [r7, #31]
 8010040:	e048      	b.n	80100d4 <UART_SetConfig+0x348>
 8010042:	2304      	movs	r3, #4
 8010044:	77fb      	strb	r3, [r7, #31]
 8010046:	e045      	b.n	80100d4 <UART_SetConfig+0x348>
 8010048:	2308      	movs	r3, #8
 801004a:	77fb      	strb	r3, [r7, #31]
 801004c:	e042      	b.n	80100d4 <UART_SetConfig+0x348>
 801004e:	bf00      	nop
 8010050:	efff69f3 	.word	0xefff69f3
 8010054:	40011000 	.word	0x40011000
 8010058:	40023800 	.word	0x40023800
 801005c:	40004400 	.word	0x40004400
 8010060:	40004800 	.word	0x40004800
 8010064:	40004c00 	.word	0x40004c00
 8010068:	40005000 	.word	0x40005000
 801006c:	40011400 	.word	0x40011400
 8010070:	40007800 	.word	0x40007800
 8010074:	2310      	movs	r3, #16
 8010076:	77fb      	strb	r3, [r7, #31]
 8010078:	e02c      	b.n	80100d4 <UART_SetConfig+0x348>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	4a72      	ldr	r2, [pc, #456]	@ (8010248 <UART_SetConfig+0x4bc>)
 8010080:	4293      	cmp	r3, r2
 8010082:	d125      	bne.n	80100d0 <UART_SetConfig+0x344>
 8010084:	4b71      	ldr	r3, [pc, #452]	@ (801024c <UART_SetConfig+0x4c0>)
 8010086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801008a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801008e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010092:	d017      	beq.n	80100c4 <UART_SetConfig+0x338>
 8010094:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8010098:	d817      	bhi.n	80100ca <UART_SetConfig+0x33e>
 801009a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801009e:	d00b      	beq.n	80100b8 <UART_SetConfig+0x32c>
 80100a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80100a4:	d811      	bhi.n	80100ca <UART_SetConfig+0x33e>
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d003      	beq.n	80100b2 <UART_SetConfig+0x326>
 80100aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80100ae:	d006      	beq.n	80100be <UART_SetConfig+0x332>
 80100b0:	e00b      	b.n	80100ca <UART_SetConfig+0x33e>
 80100b2:	2300      	movs	r3, #0
 80100b4:	77fb      	strb	r3, [r7, #31]
 80100b6:	e00d      	b.n	80100d4 <UART_SetConfig+0x348>
 80100b8:	2302      	movs	r3, #2
 80100ba:	77fb      	strb	r3, [r7, #31]
 80100bc:	e00a      	b.n	80100d4 <UART_SetConfig+0x348>
 80100be:	2304      	movs	r3, #4
 80100c0:	77fb      	strb	r3, [r7, #31]
 80100c2:	e007      	b.n	80100d4 <UART_SetConfig+0x348>
 80100c4:	2308      	movs	r3, #8
 80100c6:	77fb      	strb	r3, [r7, #31]
 80100c8:	e004      	b.n	80100d4 <UART_SetConfig+0x348>
 80100ca:	2310      	movs	r3, #16
 80100cc:	77fb      	strb	r3, [r7, #31]
 80100ce:	e001      	b.n	80100d4 <UART_SetConfig+0x348>
 80100d0:	2310      	movs	r3, #16
 80100d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	69db      	ldr	r3, [r3, #28]
 80100d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80100dc:	d15b      	bne.n	8010196 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80100de:	7ffb      	ldrb	r3, [r7, #31]
 80100e0:	2b08      	cmp	r3, #8
 80100e2:	d828      	bhi.n	8010136 <UART_SetConfig+0x3aa>
 80100e4:	a201      	add	r2, pc, #4	@ (adr r2, 80100ec <UART_SetConfig+0x360>)
 80100e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ea:	bf00      	nop
 80100ec:	08010111 	.word	0x08010111
 80100f0:	08010119 	.word	0x08010119
 80100f4:	08010121 	.word	0x08010121
 80100f8:	08010137 	.word	0x08010137
 80100fc:	08010127 	.word	0x08010127
 8010100:	08010137 	.word	0x08010137
 8010104:	08010137 	.word	0x08010137
 8010108:	08010137 	.word	0x08010137
 801010c:	0801012f 	.word	0x0801012f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010110:	f7fb f9f0 	bl	800b4f4 <HAL_RCC_GetPCLK1Freq>
 8010114:	61b8      	str	r0, [r7, #24]
        break;
 8010116:	e013      	b.n	8010140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010118:	f7fb fa00 	bl	800b51c <HAL_RCC_GetPCLK2Freq>
 801011c:	61b8      	str	r0, [r7, #24]
        break;
 801011e:	e00f      	b.n	8010140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010120:	4b4b      	ldr	r3, [pc, #300]	@ (8010250 <UART_SetConfig+0x4c4>)
 8010122:	61bb      	str	r3, [r7, #24]
        break;
 8010124:	e00c      	b.n	8010140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010126:	f7fb f913 	bl	800b350 <HAL_RCC_GetSysClockFreq>
 801012a:	61b8      	str	r0, [r7, #24]
        break;
 801012c:	e008      	b.n	8010140 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801012e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010132:	61bb      	str	r3, [r7, #24]
        break;
 8010134:	e004      	b.n	8010140 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8010136:	2300      	movs	r3, #0
 8010138:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801013a:	2301      	movs	r3, #1
 801013c:	77bb      	strb	r3, [r7, #30]
        break;
 801013e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010140:	69bb      	ldr	r3, [r7, #24]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d074      	beq.n	8010230 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010146:	69bb      	ldr	r3, [r7, #24]
 8010148:	005a      	lsls	r2, r3, #1
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	085b      	lsrs	r3, r3, #1
 8010150:	441a      	add	r2, r3
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	fbb2 f3f3 	udiv	r3, r2, r3
 801015a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	2b0f      	cmp	r3, #15
 8010160:	d916      	bls.n	8010190 <UART_SetConfig+0x404>
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010168:	d212      	bcs.n	8010190 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	b29b      	uxth	r3, r3
 801016e:	f023 030f 	bic.w	r3, r3, #15
 8010172:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	085b      	lsrs	r3, r3, #1
 8010178:	b29b      	uxth	r3, r3
 801017a:	f003 0307 	and.w	r3, r3, #7
 801017e:	b29a      	uxth	r2, r3
 8010180:	89fb      	ldrh	r3, [r7, #14]
 8010182:	4313      	orrs	r3, r2
 8010184:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	89fa      	ldrh	r2, [r7, #14]
 801018c:	60da      	str	r2, [r3, #12]
 801018e:	e04f      	b.n	8010230 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8010190:	2301      	movs	r3, #1
 8010192:	77bb      	strb	r3, [r7, #30]
 8010194:	e04c      	b.n	8010230 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010196:	7ffb      	ldrb	r3, [r7, #31]
 8010198:	2b08      	cmp	r3, #8
 801019a:	d828      	bhi.n	80101ee <UART_SetConfig+0x462>
 801019c:	a201      	add	r2, pc, #4	@ (adr r2, 80101a4 <UART_SetConfig+0x418>)
 801019e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101a2:	bf00      	nop
 80101a4:	080101c9 	.word	0x080101c9
 80101a8:	080101d1 	.word	0x080101d1
 80101ac:	080101d9 	.word	0x080101d9
 80101b0:	080101ef 	.word	0x080101ef
 80101b4:	080101df 	.word	0x080101df
 80101b8:	080101ef 	.word	0x080101ef
 80101bc:	080101ef 	.word	0x080101ef
 80101c0:	080101ef 	.word	0x080101ef
 80101c4:	080101e7 	.word	0x080101e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80101c8:	f7fb f994 	bl	800b4f4 <HAL_RCC_GetPCLK1Freq>
 80101cc:	61b8      	str	r0, [r7, #24]
        break;
 80101ce:	e013      	b.n	80101f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80101d0:	f7fb f9a4 	bl	800b51c <HAL_RCC_GetPCLK2Freq>
 80101d4:	61b8      	str	r0, [r7, #24]
        break;
 80101d6:	e00f      	b.n	80101f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80101d8:	4b1d      	ldr	r3, [pc, #116]	@ (8010250 <UART_SetConfig+0x4c4>)
 80101da:	61bb      	str	r3, [r7, #24]
        break;
 80101dc:	e00c      	b.n	80101f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80101de:	f7fb f8b7 	bl	800b350 <HAL_RCC_GetSysClockFreq>
 80101e2:	61b8      	str	r0, [r7, #24]
        break;
 80101e4:	e008      	b.n	80101f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80101e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80101ea:	61bb      	str	r3, [r7, #24]
        break;
 80101ec:	e004      	b.n	80101f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80101ee:	2300      	movs	r3, #0
 80101f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80101f2:	2301      	movs	r3, #1
 80101f4:	77bb      	strb	r3, [r7, #30]
        break;
 80101f6:	bf00      	nop
    }

    if (pclk != 0U)
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d018      	beq.n	8010230 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	085a      	lsrs	r2, r3, #1
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	441a      	add	r2, r3
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010210:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	2b0f      	cmp	r3, #15
 8010216:	d909      	bls.n	801022c <UART_SetConfig+0x4a0>
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801021e:	d205      	bcs.n	801022c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	b29a      	uxth	r2, r3
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	60da      	str	r2, [r3, #12]
 801022a:	e001      	b.n	8010230 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801022c:	2301      	movs	r3, #1
 801022e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 801023c:	7fbb      	ldrb	r3, [r7, #30]
}
 801023e:	4618      	mov	r0, r3
 8010240:	3720      	adds	r7, #32
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	40007c00 	.word	0x40007c00
 801024c:	40023800 	.word	0x40023800
 8010250:	00f42400 	.word	0x00f42400

08010254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010260:	f003 0308 	and.w	r3, r3, #8
 8010264:	2b00      	cmp	r3, #0
 8010266:	d00a      	beq.n	801027e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	430a      	orrs	r2, r1
 801027c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010282:	f003 0301 	and.w	r3, r3, #1
 8010286:	2b00      	cmp	r3, #0
 8010288:	d00a      	beq.n	80102a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	685b      	ldr	r3, [r3, #4]
 8010290:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	430a      	orrs	r2, r1
 801029e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102a4:	f003 0302 	and.w	r3, r3, #2
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d00a      	beq.n	80102c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	430a      	orrs	r2, r1
 80102c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102c6:	f003 0304 	and.w	r3, r3, #4
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00a      	beq.n	80102e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	430a      	orrs	r2, r1
 80102e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102e8:	f003 0310 	and.w	r3, r3, #16
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00a      	beq.n	8010306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	430a      	orrs	r2, r1
 8010304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801030a:	f003 0320 	and.w	r3, r3, #32
 801030e:	2b00      	cmp	r3, #0
 8010310:	d00a      	beq.n	8010328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	430a      	orrs	r2, r1
 8010326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801032c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010330:	2b00      	cmp	r3, #0
 8010332:	d01a      	beq.n	801036a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	430a      	orrs	r2, r1
 8010348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801034e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010352:	d10a      	bne.n	801036a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	430a      	orrs	r2, r1
 8010368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801036e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010372:	2b00      	cmp	r3, #0
 8010374:	d00a      	beq.n	801038c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	430a      	orrs	r2, r1
 801038a:	605a      	str	r2, [r3, #4]
  }
}
 801038c:	bf00      	nop
 801038e:	370c      	adds	r7, #12
 8010390:	46bd      	mov	sp, r7
 8010392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010396:	4770      	bx	lr

08010398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b08c      	sub	sp, #48	@ 0x30
 801039c:	af02      	add	r7, sp, #8
 801039e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2200      	movs	r2, #0
 80103a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80103a8:	f7f6 f892 	bl	80064d0 <HAL_GetTick>
 80103ac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f003 0308 	and.w	r3, r3, #8
 80103b8:	2b08      	cmp	r3, #8
 80103ba:	d12e      	bne.n	801041a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80103bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80103c0:	9300      	str	r3, [sp, #0]
 80103c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c4:	2200      	movs	r2, #0
 80103c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f000 f83b 	bl	8010446 <UART_WaitOnFlagUntilTimeout>
 80103d0:	4603      	mov	r3, r0
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d021      	beq.n	801041a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	e853 3f00 	ldrex	r3, [r3]
 80103e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80103ea:	623b      	str	r3, [r7, #32]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	461a      	mov	r2, r3
 80103f2:	6a3b      	ldr	r3, [r7, #32]
 80103f4:	61fb      	str	r3, [r7, #28]
 80103f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103f8:	69b9      	ldr	r1, [r7, #24]
 80103fa:	69fa      	ldr	r2, [r7, #28]
 80103fc:	e841 2300 	strex	r3, r2, [r1]
 8010400:	617b      	str	r3, [r7, #20]
   return(result);
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d1e6      	bne.n	80103d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2220      	movs	r2, #32
 801040c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2200      	movs	r2, #0
 8010412:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010416:	2303      	movs	r3, #3
 8010418:	e011      	b.n	801043e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2220      	movs	r2, #32
 801041e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2220      	movs	r2, #32
 8010424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2200      	movs	r2, #0
 801042c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2200      	movs	r2, #0
 8010432:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 801043c:	2300      	movs	r3, #0
}
 801043e:	4618      	mov	r0, r3
 8010440:	3728      	adds	r7, #40	@ 0x28
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b084      	sub	sp, #16
 801044a:	af00      	add	r7, sp, #0
 801044c:	60f8      	str	r0, [r7, #12]
 801044e:	60b9      	str	r1, [r7, #8]
 8010450:	603b      	str	r3, [r7, #0]
 8010452:	4613      	mov	r3, r2
 8010454:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010456:	e04f      	b.n	80104f8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010458:	69bb      	ldr	r3, [r7, #24]
 801045a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801045e:	d04b      	beq.n	80104f8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010460:	f7f6 f836 	bl	80064d0 <HAL_GetTick>
 8010464:	4602      	mov	r2, r0
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	1ad3      	subs	r3, r2, r3
 801046a:	69ba      	ldr	r2, [r7, #24]
 801046c:	429a      	cmp	r2, r3
 801046e:	d302      	bcc.n	8010476 <UART_WaitOnFlagUntilTimeout+0x30>
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d101      	bne.n	801047a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010476:	2303      	movs	r3, #3
 8010478:	e04e      	b.n	8010518 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f003 0304 	and.w	r3, r3, #4
 8010484:	2b00      	cmp	r3, #0
 8010486:	d037      	beq.n	80104f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	2b80      	cmp	r3, #128	@ 0x80
 801048c:	d034      	beq.n	80104f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	2b40      	cmp	r3, #64	@ 0x40
 8010492:	d031      	beq.n	80104f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	69db      	ldr	r3, [r3, #28]
 801049a:	f003 0308 	and.w	r3, r3, #8
 801049e:	2b08      	cmp	r3, #8
 80104a0:	d110      	bne.n	80104c4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2208      	movs	r2, #8
 80104a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104aa:	68f8      	ldr	r0, [r7, #12]
 80104ac:	f000 f8fe 	bl	80106ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	2208      	movs	r2, #8
 80104b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2200      	movs	r2, #0
 80104bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80104c0:	2301      	movs	r3, #1
 80104c2:	e029      	b.n	8010518 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	69db      	ldr	r3, [r3, #28]
 80104ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80104ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80104d2:	d111      	bne.n	80104f8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80104dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f000 f8e4 	bl	80106ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	2220      	movs	r2, #32
 80104e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80104f4:	2303      	movs	r3, #3
 80104f6:	e00f      	b.n	8010518 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	69da      	ldr	r2, [r3, #28]
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	4013      	ands	r3, r2
 8010502:	68ba      	ldr	r2, [r7, #8]
 8010504:	429a      	cmp	r2, r3
 8010506:	bf0c      	ite	eq
 8010508:	2301      	moveq	r3, #1
 801050a:	2300      	movne	r3, #0
 801050c:	b2db      	uxtb	r3, r3
 801050e:	461a      	mov	r2, r3
 8010510:	79fb      	ldrb	r3, [r7, #7]
 8010512:	429a      	cmp	r2, r3
 8010514:	d0a0      	beq.n	8010458 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010516:	2300      	movs	r3, #0
}
 8010518:	4618      	mov	r0, r3
 801051a:	3710      	adds	r7, #16
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}

08010520 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b096      	sub	sp, #88	@ 0x58
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	4613      	mov	r3, r2
 801052c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	88fa      	ldrh	r2, [r7, #6]
 8010538:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	2200      	movs	r2, #0
 8010540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2222      	movs	r2, #34	@ 0x22
 8010548:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010550:	2b00      	cmp	r3, #0
 8010552:	d028      	beq.n	80105a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010558:	4a3e      	ldr	r2, [pc, #248]	@ (8010654 <UART_Start_Receive_DMA+0x134>)
 801055a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010560:	4a3d      	ldr	r2, [pc, #244]	@ (8010658 <UART_Start_Receive_DMA+0x138>)
 8010562:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010568:	4a3c      	ldr	r2, [pc, #240]	@ (801065c <UART_Start_Receive_DMA+0x13c>)
 801056a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010570:	2200      	movs	r2, #0
 8010572:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	3324      	adds	r3, #36	@ 0x24
 801057e:	4619      	mov	r1, r3
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010584:	461a      	mov	r2, r3
 8010586:	88fb      	ldrh	r3, [r7, #6]
 8010588:	f7f6 fdc4 	bl	8007114 <HAL_DMA_Start_IT>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d009      	beq.n	80105a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2210      	movs	r2, #16
 8010596:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2220      	movs	r2, #32
 801059e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80105a2:	2301      	movs	r3, #1
 80105a4:	e051      	b.n	801064a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	691b      	ldr	r3, [r3, #16]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d018      	beq.n	80105e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105b6:	e853 3f00 	ldrex	r3, [r3]
 80105ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80105bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80105c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	461a      	mov	r2, r3
 80105ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80105ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80105d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80105d4:	e841 2300 	strex	r3, r2, [r1]
 80105d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80105da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1e6      	bne.n	80105ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	3308      	adds	r3, #8
 80105e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ea:	e853 3f00 	ldrex	r3, [r3]
 80105ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80105f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105f2:	f043 0301 	orr.w	r3, r3, #1
 80105f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	3308      	adds	r3, #8
 80105fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010600:	637a      	str	r2, [r7, #52]	@ 0x34
 8010602:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010604:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010606:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010608:	e841 2300 	strex	r3, r2, [r1]
 801060c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801060e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010610:	2b00      	cmp	r3, #0
 8010612:	d1e5      	bne.n	80105e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	3308      	adds	r3, #8
 801061a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	e853 3f00 	ldrex	r3, [r3]
 8010622:	613b      	str	r3, [r7, #16]
   return(result);
 8010624:	693b      	ldr	r3, [r7, #16]
 8010626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801062a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	3308      	adds	r3, #8
 8010632:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010634:	623a      	str	r2, [r7, #32]
 8010636:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010638:	69f9      	ldr	r1, [r7, #28]
 801063a:	6a3a      	ldr	r2, [r7, #32]
 801063c:	e841 2300 	strex	r3, r2, [r1]
 8010640:	61bb      	str	r3, [r7, #24]
   return(result);
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d1e5      	bne.n	8010614 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8010648:	2300      	movs	r3, #0
}
 801064a:	4618      	mov	r0, r3
 801064c:	3758      	adds	r7, #88	@ 0x58
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}
 8010652:	bf00      	nop
 8010654:	08010775 	.word	0x08010775
 8010658:	080108d3 	.word	0x080108d3
 801065c:	08010945 	.word	0x08010945

08010660 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010660:	b480      	push	{r7}
 8010662:	b089      	sub	sp, #36	@ 0x24
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	e853 3f00 	ldrex	r3, [r3]
 8010674:	60bb      	str	r3, [r7, #8]
   return(result);
 8010676:	68bb      	ldr	r3, [r7, #8]
 8010678:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801067c:	61fb      	str	r3, [r7, #28]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	461a      	mov	r2, r3
 8010684:	69fb      	ldr	r3, [r7, #28]
 8010686:	61bb      	str	r3, [r7, #24]
 8010688:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068a:	6979      	ldr	r1, [r7, #20]
 801068c:	69ba      	ldr	r2, [r7, #24]
 801068e:	e841 2300 	strex	r3, r2, [r1]
 8010692:	613b      	str	r3, [r7, #16]
   return(result);
 8010694:	693b      	ldr	r3, [r7, #16]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1e6      	bne.n	8010668 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2220      	movs	r2, #32
 801069e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80106a0:	bf00      	nop
 80106a2:	3724      	adds	r7, #36	@ 0x24
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b095      	sub	sp, #84	@ 0x54
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106bc:	e853 3f00 	ldrex	r3, [r3]
 80106c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80106c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	461a      	mov	r2, r3
 80106d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80106d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80106d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80106da:	e841 2300 	strex	r3, r2, [r1]
 80106de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80106e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d1e6      	bne.n	80106b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	3308      	adds	r3, #8
 80106ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106ee:	6a3b      	ldr	r3, [r7, #32]
 80106f0:	e853 3f00 	ldrex	r3, [r3]
 80106f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80106f6:	69fb      	ldr	r3, [r7, #28]
 80106f8:	f023 0301 	bic.w	r3, r3, #1
 80106fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	3308      	adds	r3, #8
 8010704:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010708:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801070c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801070e:	e841 2300 	strex	r3, r2, [r1]
 8010712:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010716:	2b00      	cmp	r3, #0
 8010718:	d1e5      	bne.n	80106e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801071e:	2b01      	cmp	r3, #1
 8010720:	d118      	bne.n	8010754 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	e853 3f00 	ldrex	r3, [r3]
 801072e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	f023 0310 	bic.w	r3, r3, #16
 8010736:	647b      	str	r3, [r7, #68]	@ 0x44
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	461a      	mov	r2, r3
 801073e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010740:	61bb      	str	r3, [r7, #24]
 8010742:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010744:	6979      	ldr	r1, [r7, #20]
 8010746:	69ba      	ldr	r2, [r7, #24]
 8010748:	e841 2300 	strex	r3, r2, [r1]
 801074c:	613b      	str	r3, [r7, #16]
   return(result);
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d1e6      	bne.n	8010722 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2220      	movs	r2, #32
 8010758:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2200      	movs	r2, #0
 8010766:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8010768:	bf00      	nop
 801076a:	3754      	adds	r7, #84	@ 0x54
 801076c:	46bd      	mov	sp, r7
 801076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010772:	4770      	bx	lr

08010774 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b09c      	sub	sp, #112	@ 0x70
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010780:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	69db      	ldr	r3, [r3, #28]
 8010786:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801078a:	d071      	beq.n	8010870 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801078c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801078e:	2200      	movs	r2, #0
 8010790:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801079a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801079c:	e853 3f00 	ldrex	r3, [r3]
 80107a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80107a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80107a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80107a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80107aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	461a      	mov	r2, r3
 80107b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80107b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80107b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80107b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80107ba:	e841 2300 	strex	r3, r2, [r1]
 80107be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80107c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d1e6      	bne.n	8010794 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3308      	adds	r3, #8
 80107cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107d0:	e853 3f00 	ldrex	r3, [r3]
 80107d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80107d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d8:	f023 0301 	bic.w	r3, r3, #1
 80107dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80107de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	3308      	adds	r3, #8
 80107e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80107e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80107e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80107ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80107ee:	e841 2300 	strex	r3, r2, [r1]
 80107f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80107f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d1e5      	bne.n	80107c6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	3308      	adds	r3, #8
 8010800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010802:	6a3b      	ldr	r3, [r7, #32]
 8010804:	e853 3f00 	ldrex	r3, [r3]
 8010808:	61fb      	str	r3, [r7, #28]
   return(result);
 801080a:	69fb      	ldr	r3, [r7, #28]
 801080c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010810:	663b      	str	r3, [r7, #96]	@ 0x60
 8010812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	3308      	adds	r3, #8
 8010818:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801081a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801081c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801081e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010820:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010822:	e841 2300 	strex	r3, r2, [r1]
 8010826:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082a:	2b00      	cmp	r3, #0
 801082c:	d1e5      	bne.n	80107fa <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801082e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010830:	2220      	movs	r2, #32
 8010832:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010836:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801083a:	2b01      	cmp	r3, #1
 801083c:	d118      	bne.n	8010870 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801083e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	e853 3f00 	ldrex	r3, [r3]
 801084a:	60bb      	str	r3, [r7, #8]
   return(result);
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	f023 0310 	bic.w	r3, r3, #16
 8010852:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	461a      	mov	r2, r3
 801085a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801085c:	61bb      	str	r3, [r7, #24]
 801085e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010860:	6979      	ldr	r1, [r7, #20]
 8010862:	69ba      	ldr	r2, [r7, #24]
 8010864:	e841 2300 	strex	r3, r2, [r1]
 8010868:	613b      	str	r3, [r7, #16]
   return(result);
 801086a:	693b      	ldr	r3, [r7, #16]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d1e6      	bne.n	801083e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010872:	2200      	movs	r2, #0
 8010874:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801087a:	2b01      	cmp	r3, #1
 801087c:	d122      	bne.n	80108c4 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 801087e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010880:	2200      	movs	r2, #0
 8010882:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 8010890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010892:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8010896:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 801089a:	429a      	cmp	r2, r3
 801089c:	d204      	bcs.n	80108a8 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 801089e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108a0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 80108a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80108a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108aa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80108ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80108b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	1ad3      	subs	r3, r2, r3
 80108b8:	b29b      	uxth	r3, r3
 80108ba:	4619      	mov	r1, r3
 80108bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108be:	f7ff fa59 	bl	800fd74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80108c2:	e002      	b.n	80108ca <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 80108c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80108c6:	f7f5 fc57 	bl	8006178 <HAL_UART_RxCpltCallback>
}
 80108ca:	bf00      	nop
 80108cc:	3770      	adds	r7, #112	@ 0x70
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}

080108d2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80108d2:	b580      	push	{r7, lr}
 80108d4:	b084      	sub	sp, #16
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	2201      	movs	r2, #1
 80108e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80108ea:	2b01      	cmp	r3, #1
 80108ec:	d123      	bne.n	8010936 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80108f4:	085b      	lsrs	r3, r3, #1
 80108f6:	b29a      	uxth	r2, r3
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801090c:	897a      	ldrh	r2, [r7, #10]
 801090e:	429a      	cmp	r2, r3
 8010910:	d803      	bhi.n	801091a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	897a      	ldrh	r2, [r7, #10]
 8010916:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8010926:	b29b      	uxth	r3, r3
 8010928:	1ad3      	subs	r3, r2, r3
 801092a:	b29b      	uxth	r3, r3
 801092c:	4619      	mov	r1, r3
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f7ff fa20 	bl	800fd74 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010934:	e002      	b.n	801093c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 8010936:	68f8      	ldr	r0, [r7, #12]
 8010938:	f7f5 fc42 	bl	80061c0 <HAL_UART_RxHalfCpltCallback>
}
 801093c:	bf00      	nop
 801093e:	3710      	adds	r7, #16
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b086      	sub	sp, #24
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010950:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010956:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801095e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	689b      	ldr	r3, [r3, #8]
 8010966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801096a:	2b80      	cmp	r3, #128	@ 0x80
 801096c:	d109      	bne.n	8010982 <UART_DMAError+0x3e>
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	2b21      	cmp	r3, #33	@ 0x21
 8010972:	d106      	bne.n	8010982 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	2200      	movs	r2, #0
 8010978:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 801097c:	6978      	ldr	r0, [r7, #20]
 801097e:	f7ff fe6f 	bl	8010660 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801098c:	2b40      	cmp	r3, #64	@ 0x40
 801098e:	d109      	bne.n	80109a4 <UART_DMAError+0x60>
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2b22      	cmp	r3, #34	@ 0x22
 8010994:	d106      	bne.n	80109a4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	2200      	movs	r2, #0
 801099a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 801099e:	6978      	ldr	r0, [r7, #20]
 80109a0:	f7ff fe84 	bl	80106ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80109aa:	f043 0210 	orr.w	r2, r3, #16
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109b4:	6978      	ldr	r0, [r7, #20]
 80109b6:	f7f5 fc19 	bl	80061ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109ba:	bf00      	nop
 80109bc:	3718      	adds	r7, #24
 80109be:	46bd      	mov	sp, r7
 80109c0:	bd80      	pop	{r7, pc}

080109c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80109c2:	b580      	push	{r7, lr}
 80109c4:	b084      	sub	sp, #16
 80109c6:	af00      	add	r7, sp, #0
 80109c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2200      	movs	r2, #0
 80109d4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f7f5 fc07 	bl	80061ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109de:	bf00      	nop
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b088      	sub	sp, #32
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	e853 3f00 	ldrex	r3, [r3]
 80109fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010a02:	61fb      	str	r3, [r7, #28]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	461a      	mov	r2, r3
 8010a0a:	69fb      	ldr	r3, [r7, #28]
 8010a0c:	61bb      	str	r3, [r7, #24]
 8010a0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a10:	6979      	ldr	r1, [r7, #20]
 8010a12:	69ba      	ldr	r2, [r7, #24]
 8010a14:	e841 2300 	strex	r3, r2, [r1]
 8010a18:	613b      	str	r3, [r7, #16]
   return(result);
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1e6      	bne.n	80109ee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2220      	movs	r2, #32
 8010a24:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	2200      	movs	r2, #0
 8010a2a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f7ff f997 	bl	800fd60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010a32:	bf00      	nop
 8010a34:	3720      	adds	r7, #32
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
	...

08010a3c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d121      	bne.n	8010a92 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681a      	ldr	r2, [r3, #0]
 8010a52:	4b27      	ldr	r3, [pc, #156]	@ (8010af0 <FMC_SDRAM_Init+0xb4>)
 8010a54:	4013      	ands	r3, r2
 8010a56:	683a      	ldr	r2, [r7, #0]
 8010a58:	6851      	ldr	r1, [r2, #4]
 8010a5a:	683a      	ldr	r2, [r7, #0]
 8010a5c:	6892      	ldr	r2, [r2, #8]
 8010a5e:	4311      	orrs	r1, r2
 8010a60:	683a      	ldr	r2, [r7, #0]
 8010a62:	68d2      	ldr	r2, [r2, #12]
 8010a64:	4311      	orrs	r1, r2
 8010a66:	683a      	ldr	r2, [r7, #0]
 8010a68:	6912      	ldr	r2, [r2, #16]
 8010a6a:	4311      	orrs	r1, r2
 8010a6c:	683a      	ldr	r2, [r7, #0]
 8010a6e:	6952      	ldr	r2, [r2, #20]
 8010a70:	4311      	orrs	r1, r2
 8010a72:	683a      	ldr	r2, [r7, #0]
 8010a74:	6992      	ldr	r2, [r2, #24]
 8010a76:	4311      	orrs	r1, r2
 8010a78:	683a      	ldr	r2, [r7, #0]
 8010a7a:	69d2      	ldr	r2, [r2, #28]
 8010a7c:	4311      	orrs	r1, r2
 8010a7e:	683a      	ldr	r2, [r7, #0]
 8010a80:	6a12      	ldr	r2, [r2, #32]
 8010a82:	4311      	orrs	r1, r2
 8010a84:	683a      	ldr	r2, [r7, #0]
 8010a86:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8010a88:	430a      	orrs	r2, r1
 8010a8a:	431a      	orrs	r2, r3
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	601a      	str	r2, [r3, #0]
 8010a90:	e026      	b.n	8010ae0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	69d9      	ldr	r1, [r3, #28]
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	6a1b      	ldr	r3, [r3, #32]
 8010aa2:	4319      	orrs	r1, r3
 8010aa4:	683b      	ldr	r3, [r7, #0]
 8010aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aa8:	430b      	orrs	r3, r1
 8010aaa:	431a      	orrs	r2, r3
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	685a      	ldr	r2, [r3, #4]
 8010ab4:	4b0e      	ldr	r3, [pc, #56]	@ (8010af0 <FMC_SDRAM_Init+0xb4>)
 8010ab6:	4013      	ands	r3, r2
 8010ab8:	683a      	ldr	r2, [r7, #0]
 8010aba:	6851      	ldr	r1, [r2, #4]
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	6892      	ldr	r2, [r2, #8]
 8010ac0:	4311      	orrs	r1, r2
 8010ac2:	683a      	ldr	r2, [r7, #0]
 8010ac4:	68d2      	ldr	r2, [r2, #12]
 8010ac6:	4311      	orrs	r1, r2
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	6912      	ldr	r2, [r2, #16]
 8010acc:	4311      	orrs	r1, r2
 8010ace:	683a      	ldr	r2, [r7, #0]
 8010ad0:	6952      	ldr	r2, [r2, #20]
 8010ad2:	4311      	orrs	r1, r2
 8010ad4:	683a      	ldr	r2, [r7, #0]
 8010ad6:	6992      	ldr	r2, [r2, #24]
 8010ad8:	430a      	orrs	r2, r1
 8010ada:	431a      	orrs	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	370c      	adds	r7, #12
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr
 8010aee:	bf00      	nop
 8010af0:	ffff8000 	.word	0xffff8000

08010af4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d128      	bne.n	8010b58 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010b0e:	68bb      	ldr	r3, [r7, #8]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	1e59      	subs	r1, r3, #1
 8010b14:	68bb      	ldr	r3, [r7, #8]
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	011b      	lsls	r3, r3, #4
 8010b1c:	4319      	orrs	r1, r3
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	689b      	ldr	r3, [r3, #8]
 8010b22:	3b01      	subs	r3, #1
 8010b24:	021b      	lsls	r3, r3, #8
 8010b26:	4319      	orrs	r1, r3
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	3b01      	subs	r3, #1
 8010b2e:	031b      	lsls	r3, r3, #12
 8010b30:	4319      	orrs	r1, r3
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	691b      	ldr	r3, [r3, #16]
 8010b36:	3b01      	subs	r3, #1
 8010b38:	041b      	lsls	r3, r3, #16
 8010b3a:	4319      	orrs	r1, r3
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	695b      	ldr	r3, [r3, #20]
 8010b40:	3b01      	subs	r3, #1
 8010b42:	051b      	lsls	r3, r3, #20
 8010b44:	4319      	orrs	r1, r3
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	699b      	ldr	r3, [r3, #24]
 8010b4a:	3b01      	subs	r3, #1
 8010b4c:	061b      	lsls	r3, r3, #24
 8010b4e:	430b      	orrs	r3, r1
 8010b50:	431a      	orrs	r2, r3
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	609a      	str	r2, [r3, #8]
 8010b56:	e02d      	b.n	8010bb4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	689a      	ldr	r2, [r3, #8]
 8010b5c:	4b19      	ldr	r3, [pc, #100]	@ (8010bc4 <FMC_SDRAM_Timing_Init+0xd0>)
 8010b5e:	4013      	ands	r3, r2
 8010b60:	68ba      	ldr	r2, [r7, #8]
 8010b62:	68d2      	ldr	r2, [r2, #12]
 8010b64:	3a01      	subs	r2, #1
 8010b66:	0311      	lsls	r1, r2, #12
 8010b68:	68ba      	ldr	r2, [r7, #8]
 8010b6a:	6952      	ldr	r2, [r2, #20]
 8010b6c:	3a01      	subs	r2, #1
 8010b6e:	0512      	lsls	r2, r2, #20
 8010b70:	430a      	orrs	r2, r1
 8010b72:	431a      	orrs	r2, r3
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	68db      	ldr	r3, [r3, #12]
 8010b7c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	1e59      	subs	r1, r3, #1
 8010b86:	68bb      	ldr	r3, [r7, #8]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	3b01      	subs	r3, #1
 8010b8c:	011b      	lsls	r3, r3, #4
 8010b8e:	4319      	orrs	r1, r3
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	689b      	ldr	r3, [r3, #8]
 8010b94:	3b01      	subs	r3, #1
 8010b96:	021b      	lsls	r3, r3, #8
 8010b98:	4319      	orrs	r1, r3
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	691b      	ldr	r3, [r3, #16]
 8010b9e:	3b01      	subs	r3, #1
 8010ba0:	041b      	lsls	r3, r3, #16
 8010ba2:	4319      	orrs	r1, r3
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	699b      	ldr	r3, [r3, #24]
 8010ba8:	3b01      	subs	r3, #1
 8010baa:	061b      	lsls	r3, r3, #24
 8010bac:	430b      	orrs	r3, r1
 8010bae:	431a      	orrs	r2, r3
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8010bb4:	2300      	movs	r3, #0
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3714      	adds	r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	ff0f0fff 	.word	0xff0f0fff

08010bc8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010bc8:	b084      	sub	sp, #16
 8010bca:	b480      	push	{r7}
 8010bcc:	b085      	sub	sp, #20
 8010bce:	af00      	add	r7, sp, #0
 8010bd0:	6078      	str	r0, [r7, #4]
 8010bd2:	f107 001c 	add.w	r0, r7, #28
 8010bd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010bda:	2300      	movs	r3, #0
 8010bdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010bde:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010be0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010be2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8010be6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8010bea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8010bee:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8010bf2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010bf4:	68fa      	ldr	r2, [r7, #12]
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	685a      	ldr	r2, [r3, #4]
 8010bfe:	4b07      	ldr	r3, [pc, #28]	@ (8010c1c <SDMMC_Init+0x54>)
 8010c00:	4013      	ands	r3, r2
 8010c02:	68fa      	ldr	r2, [r7, #12]
 8010c04:	431a      	orrs	r2, r3
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010c0a:	2300      	movs	r3, #0
}
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	3714      	adds	r7, #20
 8010c10:	46bd      	mov	sp, r7
 8010c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c16:	b004      	add	sp, #16
 8010c18:	4770      	bx	lr
 8010c1a:	bf00      	nop
 8010c1c:	ffff8100 	.word	0xffff8100

08010c20 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8010c2e:	4618      	mov	r0, r3
 8010c30:	370c      	adds	r7, #12
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr

08010c3a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8010c3a:	b480      	push	{r7}
 8010c3c:	b083      	sub	sp, #12
 8010c3e:	af00      	add	r7, sp, #0
 8010c40:	6078      	str	r0, [r7, #4]
 8010c42:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	681a      	ldr	r2, [r3, #0]
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8010c4e:	2300      	movs	r3, #0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	370c      	adds	r7, #12
 8010c54:	46bd      	mov	sp, r7
 8010c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5a:	4770      	bx	lr

08010c5c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010c5c:	b480      	push	{r7}
 8010c5e:	b083      	sub	sp, #12
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2203      	movs	r2, #3
 8010c68:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	370c      	adds	r7, #12
 8010c70:	46bd      	mov	sp, r7
 8010c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c76:	4770      	bx	lr

08010c78 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010c78:	b480      	push	{r7}
 8010c7a:	b083      	sub	sp, #12
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f003 0303 	and.w	r3, r3, #3
}
 8010c88:	4618      	mov	r0, r3
 8010c8a:	370c      	adds	r7, #12
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr

08010c94 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b085      	sub	sp, #20
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	681a      	ldr	r2, [r3, #0]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cb2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010cb8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010cbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010cc0:	68fa      	ldr	r2, [r7, #12]
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	68da      	ldr	r2, [r3, #12]
 8010cca:	4b06      	ldr	r3, [pc, #24]	@ (8010ce4 <SDMMC_SendCommand+0x50>)
 8010ccc:	4013      	ands	r3, r2
 8010cce:	68fa      	ldr	r2, [r7, #12]
 8010cd0:	431a      	orrs	r2, r3
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010cd6:	2300      	movs	r3, #0
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3714      	adds	r7, #20
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr
 8010ce4:	fffff000 	.word	0xfffff000

08010ce8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	691b      	ldr	r3, [r3, #16]
 8010cf4:	b2db      	uxtb	r3, r3
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	370c      	adds	r7, #12
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr

08010d02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8010d02:	b480      	push	{r7}
 8010d04:	b085      	sub	sp, #20
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
 8010d0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	3314      	adds	r3, #20
 8010d10:	461a      	mov	r2, r3
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	4413      	add	r3, r2
 8010d16:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
}  
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3714      	adds	r7, #20
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b085      	sub	sp, #20
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010d32:	2300      	movs	r3, #0
 8010d34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	685a      	ldr	r2, [r3, #4]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d4e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010d54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010d5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010d5c:	68fa      	ldr	r2, [r7, #12]
 8010d5e:	4313      	orrs	r3, r2
 8010d60:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d66:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	431a      	orrs	r2, r3
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8010d72:	2300      	movs	r3, #0

}
 8010d74:	4618      	mov	r0, r3
 8010d76:	3714      	adds	r7, #20
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr

08010d80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b088      	sub	sp, #32
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010d8e:	2310      	movs	r3, #16
 8010d90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d92:	2340      	movs	r3, #64	@ 0x40
 8010d94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d96:	2300      	movs	r3, #0
 8010d98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010da0:	f107 0308 	add.w	r3, r7, #8
 8010da4:	4619      	mov	r1, r3
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7ff ff74 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010db0:	2110      	movs	r1, #16
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 fa1a 	bl	80111ec <SDMMC_GetCmdResp1>
 8010db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dba:	69fb      	ldr	r3, [r7, #28]
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3720      	adds	r7, #32
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b088      	sub	sp, #32
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010dd2:	2311      	movs	r3, #17
 8010dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dd6:	2340      	movs	r3, #64	@ 0x40
 8010dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010de4:	f107 0308 	add.w	r3, r7, #8
 8010de8:	4619      	mov	r1, r3
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7ff ff52 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010df4:	2111      	movs	r1, #17
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f000 f9f8 	bl	80111ec <SDMMC_GetCmdResp1>
 8010dfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010dfe:	69fb      	ldr	r3, [r7, #28]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3720      	adds	r7, #32
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b088      	sub	sp, #32
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010e16:	2312      	movs	r3, #18
 8010e18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e1a:	2340      	movs	r3, #64	@ 0x40
 8010e1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e28:	f107 0308 	add.w	r3, r7, #8
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	6878      	ldr	r0, [r7, #4]
 8010e30:	f7ff ff30 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e38:	2112      	movs	r1, #18
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f000 f9d6 	bl	80111ec <SDMMC_GetCmdResp1>
 8010e40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e42:	69fb      	ldr	r3, [r7, #28]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3720      	adds	r7, #32
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b088      	sub	sp, #32
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010e5a:	2318      	movs	r3, #24
 8010e5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e5e:	2340      	movs	r3, #64	@ 0x40
 8010e60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e62:	2300      	movs	r3, #0
 8010e64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010e6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e6c:	f107 0308 	add.w	r3, r7, #8
 8010e70:	4619      	mov	r1, r3
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff ff0e 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010e7c:	2118      	movs	r1, #24
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f000 f9b4 	bl	80111ec <SDMMC_GetCmdResp1>
 8010e84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e86:	69fb      	ldr	r3, [r7, #28]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3720      	adds	r7, #32
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b088      	sub	sp, #32
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010e9e:	2319      	movs	r3, #25
 8010ea0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ea2:	2340      	movs	r3, #64	@ 0x40
 8010ea4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010eae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010eb0:	f107 0308 	add.w	r3, r7, #8
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f7ff feec 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010ebc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010ec0:	2119      	movs	r1, #25
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f000 f992 	bl	80111ec <SDMMC_GetCmdResp1>
 8010ec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010eca:	69fb      	ldr	r3, [r7, #28]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3720      	adds	r7, #32
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b088      	sub	sp, #32
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010edc:	2300      	movs	r3, #0
 8010ede:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010ee0:	230c      	movs	r3, #12
 8010ee2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ee4:	2340      	movs	r3, #64	@ 0x40
 8010ee6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010eec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ef0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ef2:	f107 0308 	add.w	r3, r7, #8
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f7ff fecb 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010efe:	4a05      	ldr	r2, [pc, #20]	@ (8010f14 <SDMMC_CmdStopTransfer+0x40>)
 8010f00:	210c      	movs	r1, #12
 8010f02:	6878      	ldr	r0, [r7, #4]
 8010f04:	f000 f972 	bl	80111ec <SDMMC_GetCmdResp1>
 8010f08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f0a:	69fb      	ldr	r3, [r7, #28]
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3720      	adds	r7, #32
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	05f5e100 	.word	0x05f5e100

08010f18 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b08a      	sub	sp, #40	@ 0x28
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010f28:	2307      	movs	r3, #7
 8010f2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010f2c:	2340      	movs	r3, #64	@ 0x40
 8010f2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f30:	2300      	movs	r3, #0
 8010f32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f38:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f3a:	f107 0310 	add.w	r3, r7, #16
 8010f3e:	4619      	mov	r1, r3
 8010f40:	68f8      	ldr	r0, [r7, #12]
 8010f42:	f7ff fea7 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010f4a:	2107      	movs	r1, #7
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f000 f94d 	bl	80111ec <SDMMC_GetCmdResp1>
 8010f52:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3728      	adds	r7, #40	@ 0x28
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}

08010f5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010f5e:	b580      	push	{r7, lr}
 8010f60:	b088      	sub	sp, #32
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010f66:	2300      	movs	r3, #0
 8010f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010f72:	2300      	movs	r3, #0
 8010f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f7a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010f7c:	f107 0308 	add.w	r3, r7, #8
 8010f80:	4619      	mov	r1, r3
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7ff fe86 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010f88:	6878      	ldr	r0, [r7, #4]
 8010f8a:	f000 fb67 	bl	801165c <SDMMC_GetCmdError>
 8010f8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f90:	69fb      	ldr	r3, [r7, #28]
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3720      	adds	r7, #32
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b088      	sub	sp, #32
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010fa2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010fa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010fa8:	2308      	movs	r3, #8
 8010faa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fac:	2340      	movs	r3, #64	@ 0x40
 8010fae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010fb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010fba:	f107 0308 	add.w	r3, r7, #8
 8010fbe:	4619      	mov	r1, r3
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f7ff fe67 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fafa 	bl	80115c0 <SDMMC_GetCmdResp7>
 8010fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fce:	69fb      	ldr	r3, [r7, #28]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	3720      	adds	r7, #32
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b088      	sub	sp, #32
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
 8010fe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010fe6:	2337      	movs	r3, #55	@ 0x37
 8010fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010fea:	2340      	movs	r3, #64	@ 0x40
 8010fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010ff6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ff8:	f107 0308 	add.w	r3, r7, #8
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f7ff fe48 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011008:	2137      	movs	r1, #55	@ 0x37
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 f8ee 	bl	80111ec <SDMMC_GetCmdResp1>
 8011010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011012:	69fb      	ldr	r3, [r7, #28]
}
 8011014:	4618      	mov	r0, r3
 8011016:	3720      	adds	r7, #32
 8011018:	46bd      	mov	sp, r7
 801101a:	bd80      	pop	{r7, pc}

0801101c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801101c:	b580      	push	{r7, lr}
 801101e:	b088      	sub	sp, #32
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
 8011024:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	4b0d      	ldr	r3, [pc, #52]	@ (8011060 <SDMMC_CmdAppOperCommand+0x44>)
 801102a:	4313      	orrs	r3, r2
 801102c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801102e:	2329      	movs	r3, #41	@ 0x29
 8011030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011032:	2340      	movs	r3, #64	@ 0x40
 8011034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011036:	2300      	movs	r3, #0
 8011038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801103a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801103e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011040:	f107 0308 	add.w	r3, r7, #8
 8011044:	4619      	mov	r1, r3
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f7ff fe24 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f000 fa03 	bl	8011458 <SDMMC_GetCmdResp3>
 8011052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011054:	69fb      	ldr	r3, [r7, #28]
}
 8011056:	4618      	mov	r0, r3
 8011058:	3720      	adds	r7, #32
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}
 801105e:	bf00      	nop
 8011060:	80100000 	.word	0x80100000

08011064 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b088      	sub	sp, #32
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801106e:	683b      	ldr	r3, [r7, #0]
 8011070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011072:	2306      	movs	r3, #6
 8011074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011076:	2340      	movs	r3, #64	@ 0x40
 8011078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801107a:	2300      	movs	r3, #0
 801107c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801107e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011082:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011084:	f107 0308 	add.w	r3, r7, #8
 8011088:	4619      	mov	r1, r3
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f7ff fe02 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011094:	2106      	movs	r1, #6
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 f8a8 	bl	80111ec <SDMMC_GetCmdResp1>
 801109c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801109e:	69fb      	ldr	r3, [r7, #28]
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3720      	adds	r7, #32
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd80      	pop	{r7, pc}

080110a8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b088      	sub	sp, #32
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80110b0:	2300      	movs	r3, #0
 80110b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80110b4:	2333      	movs	r3, #51	@ 0x33
 80110b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80110b8:	2340      	movs	r3, #64	@ 0x40
 80110ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110bc:	2300      	movs	r3, #0
 80110be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80110c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80110c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80110c6:	f107 0308 	add.w	r3, r7, #8
 80110ca:	4619      	mov	r1, r3
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f7ff fde1 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80110d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80110d6:	2133      	movs	r1, #51	@ 0x33
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f887 	bl	80111ec <SDMMC_GetCmdResp1>
 80110de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110e0:	69fb      	ldr	r3, [r7, #28]
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3720      	adds	r7, #32
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b088      	sub	sp, #32
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80110f2:	2300      	movs	r3, #0
 80110f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80110f6:	2302      	movs	r3, #2
 80110f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80110fa:	23c0      	movs	r3, #192	@ 0xc0
 80110fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80110fe:	2300      	movs	r3, #0
 8011100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011102:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011108:	f107 0308 	add.w	r3, r7, #8
 801110c:	4619      	mov	r1, r3
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f7ff fdc0 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f000 f957 	bl	80113c8 <SDMMC_GetCmdResp2>
 801111a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801111c:	69fb      	ldr	r3, [r7, #28]
}
 801111e:	4618      	mov	r0, r3
 8011120:	3720      	adds	r7, #32
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}

08011126 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011126:	b580      	push	{r7, lr}
 8011128:	b088      	sub	sp, #32
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
 801112e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011134:	2309      	movs	r3, #9
 8011136:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011138:	23c0      	movs	r3, #192	@ 0xc0
 801113a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801113c:	2300      	movs	r3, #0
 801113e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011140:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011144:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011146:	f107 0308 	add.w	r3, r7, #8
 801114a:	4619      	mov	r1, r3
 801114c:	6878      	ldr	r0, [r7, #4]
 801114e:	f7ff fda1 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 f938 	bl	80113c8 <SDMMC_GetCmdResp2>
 8011158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801115a:	69fb      	ldr	r3, [r7, #28]
}
 801115c:	4618      	mov	r0, r3
 801115e:	3720      	adds	r7, #32
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}

08011164 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011164:	b580      	push	{r7, lr}
 8011166:	b088      	sub	sp, #32
 8011168:	af00      	add	r7, sp, #0
 801116a:	6078      	str	r0, [r7, #4]
 801116c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801116e:	2300      	movs	r3, #0
 8011170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011172:	2303      	movs	r3, #3
 8011174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011176:	2340      	movs	r3, #64	@ 0x40
 8011178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801117a:	2300      	movs	r3, #0
 801117c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801117e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011182:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011184:	f107 0308 	add.w	r3, r7, #8
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7ff fd82 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011190:	683a      	ldr	r2, [r7, #0]
 8011192:	2103      	movs	r1, #3
 8011194:	6878      	ldr	r0, [r7, #4]
 8011196:	f000 f99d 	bl	80114d4 <SDMMC_GetCmdResp6>
 801119a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801119c:	69fb      	ldr	r3, [r7, #28]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3720      	adds	r7, #32
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b088      	sub	sp, #32
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
 80111ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80111b4:	230d      	movs	r3, #13
 80111b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111b8:	2340      	movs	r3, #64	@ 0x40
 80111ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111bc:	2300      	movs	r3, #0
 80111be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80111c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111c6:	f107 0308 	add.w	r3, r7, #8
 80111ca:	4619      	mov	r1, r3
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f7ff fd61 	bl	8010c94 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80111d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80111d6:	210d      	movs	r1, #13
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f000 f807 	bl	80111ec <SDMMC_GetCmdResp1>
 80111de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111e0:	69fb      	ldr	r3, [r7, #28]
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3720      	adds	r7, #32
 80111e6:	46bd      	mov	sp, r7
 80111e8:	bd80      	pop	{r7, pc}
	...

080111ec <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b088      	sub	sp, #32
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	460b      	mov	r3, r1
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80111fa:	4b70      	ldr	r3, [pc, #448]	@ (80113bc <SDMMC_GetCmdResp1+0x1d0>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	4a70      	ldr	r2, [pc, #448]	@ (80113c0 <SDMMC_GetCmdResp1+0x1d4>)
 8011200:	fba2 2303 	umull	r2, r3, r2, r3
 8011204:	0a5a      	lsrs	r2, r3, #9
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	fb02 f303 	mul.w	r3, r2, r3
 801120c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801120e:	69fb      	ldr	r3, [r7, #28]
 8011210:	1e5a      	subs	r2, r3, #1
 8011212:	61fa      	str	r2, [r7, #28]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d102      	bne.n	801121e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011218:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801121c:	e0c9      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011222:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801122a:	2b00      	cmp	r3, #0
 801122c:	d0ef      	beq.n	801120e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801122e:	69bb      	ldr	r3, [r7, #24]
 8011230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011234:	2b00      	cmp	r3, #0
 8011236:	d1ea      	bne.n	801120e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801123c:	f003 0304 	and.w	r3, r3, #4
 8011240:	2b00      	cmp	r3, #0
 8011242:	d004      	beq.n	801124e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2204      	movs	r2, #4
 8011248:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801124a:	2304      	movs	r3, #4
 801124c:	e0b1      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011252:	f003 0301 	and.w	r3, r3, #1
 8011256:	2b00      	cmp	r3, #0
 8011258:	d004      	beq.n	8011264 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	2201      	movs	r2, #1
 801125e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011260:	2301      	movs	r3, #1
 8011262:	e0a6      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	22c5      	movs	r2, #197	@ 0xc5
 8011268:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801126a:	68f8      	ldr	r0, [r7, #12]
 801126c:	f7ff fd3c 	bl	8010ce8 <SDMMC_GetCommandResponse>
 8011270:	4603      	mov	r3, r0
 8011272:	461a      	mov	r2, r3
 8011274:	7afb      	ldrb	r3, [r7, #11]
 8011276:	4293      	cmp	r3, r2
 8011278:	d001      	beq.n	801127e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801127a:	2301      	movs	r3, #1
 801127c:	e099      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801127e:	2100      	movs	r1, #0
 8011280:	68f8      	ldr	r0, [r7, #12]
 8011282:	f7ff fd3e 	bl	8010d02 <SDMMC_GetResponse>
 8011286:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011288:	697a      	ldr	r2, [r7, #20]
 801128a:	4b4e      	ldr	r3, [pc, #312]	@ (80113c4 <SDMMC_GetCmdResp1+0x1d8>)
 801128c:	4013      	ands	r3, r2
 801128e:	2b00      	cmp	r3, #0
 8011290:	d101      	bne.n	8011296 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011292:	2300      	movs	r3, #0
 8011294:	e08d      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	2b00      	cmp	r3, #0
 801129a:	da02      	bge.n	80112a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801129c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80112a0:	e087      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d001      	beq.n	80112b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80112ac:	2340      	movs	r3, #64	@ 0x40
 80112ae:	e080      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80112b0:	697b      	ldr	r3, [r7, #20]
 80112b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d001      	beq.n	80112be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80112ba:	2380      	movs	r3, #128	@ 0x80
 80112bc:	e079      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d002      	beq.n	80112ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80112c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80112cc:	e071      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d002      	beq.n	80112de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80112d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80112dc:	e069      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d002      	beq.n	80112ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80112e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80112ec:	e061      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d002      	beq.n	80112fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80112f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80112fc:	e059      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011304:	2b00      	cmp	r3, #0
 8011306:	d002      	beq.n	801130e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801130c:	e051      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011314:	2b00      	cmp	r3, #0
 8011316:	d002      	beq.n	801131e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801131c:	e049      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011324:	2b00      	cmp	r3, #0
 8011326:	d002      	beq.n	801132e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011328:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801132c:	e041      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8011334:	2b00      	cmp	r3, #0
 8011336:	d002      	beq.n	801133e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011338:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801133c:	e039      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801133e:	697b      	ldr	r3, [r7, #20]
 8011340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011344:	2b00      	cmp	r3, #0
 8011346:	d002      	beq.n	801134e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011348:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 801134c:	e031      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011354:	2b00      	cmp	r3, #0
 8011356:	d002      	beq.n	801135e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011358:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801135c:	e029      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011368:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801136c:	e021      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011374:	2b00      	cmp	r3, #0
 8011376:	d002      	beq.n	801137e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011378:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801137c:	e019      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801137e:	697b      	ldr	r3, [r7, #20]
 8011380:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011384:	2b00      	cmp	r3, #0
 8011386:	d002      	beq.n	801138e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011388:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801138c:	e011      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011394:	2b00      	cmp	r3, #0
 8011396:	d002      	beq.n	801139e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011398:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801139c:	e009      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	f003 0308 	and.w	r3, r3, #8
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d002      	beq.n	80113ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80113a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80113ac:	e001      	b.n	80113b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80113ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3720      	adds	r7, #32
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	20000020 	.word	0x20000020
 80113c0:	10624dd3 	.word	0x10624dd3
 80113c4:	fdffe008 	.word	0xfdffe008

080113c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b085      	sub	sp, #20
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80113d0:	4b1f      	ldr	r3, [pc, #124]	@ (8011450 <SDMMC_GetCmdResp2+0x88>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a1f      	ldr	r2, [pc, #124]	@ (8011454 <SDMMC_GetCmdResp2+0x8c>)
 80113d6:	fba2 2303 	umull	r2, r3, r2, r3
 80113da:	0a5b      	lsrs	r3, r3, #9
 80113dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80113e0:	fb02 f303 	mul.w	r3, r2, r3
 80113e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	1e5a      	subs	r2, r3, #1
 80113ea:	60fa      	str	r2, [r7, #12]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d102      	bne.n	80113f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80113f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80113f4:	e026      	b.n	8011444 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011402:	2b00      	cmp	r3, #0
 8011404:	d0ef      	beq.n	80113e6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801140c:	2b00      	cmp	r3, #0
 801140e:	d1ea      	bne.n	80113e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011414:	f003 0304 	and.w	r3, r3, #4
 8011418:	2b00      	cmp	r3, #0
 801141a:	d004      	beq.n	8011426 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2204      	movs	r2, #4
 8011420:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011422:	2304      	movs	r3, #4
 8011424:	e00e      	b.n	8011444 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801142a:	f003 0301 	and.w	r3, r3, #1
 801142e:	2b00      	cmp	r3, #0
 8011430:	d004      	beq.n	801143c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2201      	movs	r2, #1
 8011436:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011438:	2301      	movs	r3, #1
 801143a:	e003      	b.n	8011444 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	22c5      	movs	r2, #197	@ 0xc5
 8011440:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	3714      	adds	r7, #20
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr
 8011450:	20000020 	.word	0x20000020
 8011454:	10624dd3 	.word	0x10624dd3

08011458 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011458:	b480      	push	{r7}
 801145a:	b085      	sub	sp, #20
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011460:	4b1a      	ldr	r3, [pc, #104]	@ (80114cc <SDMMC_GetCmdResp3+0x74>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4a1a      	ldr	r2, [pc, #104]	@ (80114d0 <SDMMC_GetCmdResp3+0x78>)
 8011466:	fba2 2303 	umull	r2, r3, r2, r3
 801146a:	0a5b      	lsrs	r3, r3, #9
 801146c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011470:	fb02 f303 	mul.w	r3, r2, r3
 8011474:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	1e5a      	subs	r2, r3, #1
 801147a:	60fa      	str	r2, [r7, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d102      	bne.n	8011486 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011480:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011484:	e01b      	b.n	80114be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801148a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011492:	2b00      	cmp	r3, #0
 8011494:	d0ef      	beq.n	8011476 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1ea      	bne.n	8011476 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114a4:	f003 0304 	and.w	r3, r3, #4
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d004      	beq.n	80114b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2204      	movs	r2, #4
 80114b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80114b2:	2304      	movs	r3, #4
 80114b4:	e003      	b.n	80114be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	22c5      	movs	r2, #197	@ 0xc5
 80114ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80114bc:	2300      	movs	r3, #0
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3714      	adds	r7, #20
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr
 80114ca:	bf00      	nop
 80114cc:	20000020 	.word	0x20000020
 80114d0:	10624dd3 	.word	0x10624dd3

080114d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b088      	sub	sp, #32
 80114d8:	af00      	add	r7, sp, #0
 80114da:	60f8      	str	r0, [r7, #12]
 80114dc:	460b      	mov	r3, r1
 80114de:	607a      	str	r2, [r7, #4]
 80114e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80114e2:	4b35      	ldr	r3, [pc, #212]	@ (80115b8 <SDMMC_GetCmdResp6+0xe4>)
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	4a35      	ldr	r2, [pc, #212]	@ (80115bc <SDMMC_GetCmdResp6+0xe8>)
 80114e8:	fba2 2303 	umull	r2, r3, r2, r3
 80114ec:	0a5b      	lsrs	r3, r3, #9
 80114ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80114f2:	fb02 f303 	mul.w	r3, r2, r3
 80114f6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80114f8:	69fb      	ldr	r3, [r7, #28]
 80114fa:	1e5a      	subs	r2, r3, #1
 80114fc:	61fa      	str	r2, [r7, #28]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d102      	bne.n	8011508 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011502:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011506:	e052      	b.n	80115ae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801150c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8011514:	2b00      	cmp	r3, #0
 8011516:	d0ef      	beq.n	80114f8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801151e:	2b00      	cmp	r3, #0
 8011520:	d1ea      	bne.n	80114f8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011526:	f003 0304 	and.w	r3, r3, #4
 801152a:	2b00      	cmp	r3, #0
 801152c:	d004      	beq.n	8011538 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2204      	movs	r2, #4
 8011532:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011534:	2304      	movs	r3, #4
 8011536:	e03a      	b.n	80115ae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801153c:	f003 0301 	and.w	r3, r3, #1
 8011540:	2b00      	cmp	r3, #0
 8011542:	d004      	beq.n	801154e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	2201      	movs	r2, #1
 8011548:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801154a:	2301      	movs	r3, #1
 801154c:	e02f      	b.n	80115ae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801154e:	68f8      	ldr	r0, [r7, #12]
 8011550:	f7ff fbca 	bl	8010ce8 <SDMMC_GetCommandResponse>
 8011554:	4603      	mov	r3, r0
 8011556:	461a      	mov	r2, r3
 8011558:	7afb      	ldrb	r3, [r7, #11]
 801155a:	4293      	cmp	r3, r2
 801155c:	d001      	beq.n	8011562 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801155e:	2301      	movs	r3, #1
 8011560:	e025      	b.n	80115ae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	22c5      	movs	r2, #197	@ 0xc5
 8011566:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011568:	2100      	movs	r1, #0
 801156a:	68f8      	ldr	r0, [r7, #12]
 801156c:	f7ff fbc9 	bl	8010d02 <SDMMC_GetResponse>
 8011570:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8011578:	2b00      	cmp	r3, #0
 801157a:	d106      	bne.n	801158a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	0c1b      	lsrs	r3, r3, #16
 8011580:	b29a      	uxth	r2, r3
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8011586:	2300      	movs	r3, #0
 8011588:	e011      	b.n	80115ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011598:	e009      	b.n	80115ae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d002      	beq.n	80115aa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80115a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80115a8:	e001      	b.n	80115ae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80115aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3720      	adds	r7, #32
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	20000020 	.word	0x20000020
 80115bc:	10624dd3 	.word	0x10624dd3

080115c0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80115c0:	b480      	push	{r7}
 80115c2:	b085      	sub	sp, #20
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80115c8:	4b22      	ldr	r3, [pc, #136]	@ (8011654 <SDMMC_GetCmdResp7+0x94>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4a22      	ldr	r2, [pc, #136]	@ (8011658 <SDMMC_GetCmdResp7+0x98>)
 80115ce:	fba2 2303 	umull	r2, r3, r2, r3
 80115d2:	0a5b      	lsrs	r3, r3, #9
 80115d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80115d8:	fb02 f303 	mul.w	r3, r2, r3
 80115dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	1e5a      	subs	r2, r3, #1
 80115e2:	60fa      	str	r2, [r7, #12]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d102      	bne.n	80115ee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80115e8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80115ec:	e02c      	b.n	8011648 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80115f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d0ef      	beq.n	80115de <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011604:	2b00      	cmp	r3, #0
 8011606:	d1ea      	bne.n	80115de <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801160c:	f003 0304 	and.w	r3, r3, #4
 8011610:	2b00      	cmp	r3, #0
 8011612:	d004      	beq.n	801161e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2204      	movs	r2, #4
 8011618:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801161a:	2304      	movs	r3, #4
 801161c:	e014      	b.n	8011648 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011622:	f003 0301 	and.w	r3, r3, #1
 8011626:	2b00      	cmp	r3, #0
 8011628:	d004      	beq.n	8011634 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2201      	movs	r2, #1
 801162e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011630:	2301      	movs	r3, #1
 8011632:	e009      	b.n	8011648 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011638:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801163c:	2b00      	cmp	r3, #0
 801163e:	d002      	beq.n	8011646 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2240      	movs	r2, #64	@ 0x40
 8011644:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011646:	2300      	movs	r3, #0
  
}
 8011648:	4618      	mov	r0, r3
 801164a:	3714      	adds	r7, #20
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr
 8011654:	20000020 	.word	0x20000020
 8011658:	10624dd3 	.word	0x10624dd3

0801165c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801165c:	b480      	push	{r7}
 801165e:	b085      	sub	sp, #20
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011664:	4b11      	ldr	r3, [pc, #68]	@ (80116ac <SDMMC_GetCmdError+0x50>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4a11      	ldr	r2, [pc, #68]	@ (80116b0 <SDMMC_GetCmdError+0x54>)
 801166a:	fba2 2303 	umull	r2, r3, r2, r3
 801166e:	0a5b      	lsrs	r3, r3, #9
 8011670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011674:	fb02 f303 	mul.w	r3, r2, r3
 8011678:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	1e5a      	subs	r2, r3, #1
 801167e:	60fa      	str	r2, [r7, #12]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d102      	bne.n	801168a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011684:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8011688:	e009      	b.n	801169e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801168e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011692:	2b00      	cmp	r3, #0
 8011694:	d0f1      	beq.n	801167a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	22c5      	movs	r2, #197	@ 0xc5
 801169a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 801169c:	2300      	movs	r3, #0
}
 801169e:	4618      	mov	r0, r3
 80116a0:	3714      	adds	r7, #20
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr
 80116aa:	bf00      	nop
 80116ac:	20000020 	.word	0x20000020
 80116b0:	10624dd3 	.word	0x10624dd3

080116b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b083      	sub	sp, #12
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	689b      	ldr	r3, [r3, #8]
 80116c0:	f043 0201 	orr.w	r2, r3, #1
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80116c8:	2300      	movs	r3, #0
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	370c      	adds	r7, #12
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr

080116d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80116d6:	b480      	push	{r7}
 80116d8:	b083      	sub	sp, #12
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	689b      	ldr	r3, [r3, #8]
 80116e2:	f023 0201 	bic.w	r2, r3, #1
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80116ea:	2300      	movs	r3, #0
}
 80116ec:	4618      	mov	r0, r3
 80116ee:	370c      	adds	r7, #12
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr

080116f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b085      	sub	sp, #20
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011702:	2300      	movs	r3, #0
 8011704:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	3301      	adds	r3, #1
 801170a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011712:	d901      	bls.n	8011718 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011714:	2303      	movs	r3, #3
 8011716:	e01b      	b.n	8011750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	691b      	ldr	r3, [r3, #16]
 801171c:	2b00      	cmp	r3, #0
 801171e:	daf2      	bge.n	8011706 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011720:	2300      	movs	r3, #0
 8011722:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	019b      	lsls	r3, r3, #6
 8011728:	f043 0220 	orr.w	r2, r3, #32
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	3301      	adds	r3, #1
 8011734:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801173c:	d901      	bls.n	8011742 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801173e:	2303      	movs	r3, #3
 8011740:	e006      	b.n	8011750 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	691b      	ldr	r3, [r3, #16]
 8011746:	f003 0320 	and.w	r3, r3, #32
 801174a:	2b20      	cmp	r3, #32
 801174c:	d0f0      	beq.n	8011730 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801174e:	2300      	movs	r3, #0
}
 8011750:	4618      	mov	r0, r3
 8011752:	3714      	adds	r7, #20
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr

0801175c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801175c:	b480      	push	{r7}
 801175e:	b085      	sub	sp, #20
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011764:	2300      	movs	r3, #0
 8011766:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	3301      	adds	r3, #1
 801176c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011774:	d901      	bls.n	801177a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011776:	2303      	movs	r3, #3
 8011778:	e018      	b.n	80117ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	691b      	ldr	r3, [r3, #16]
 801177e:	2b00      	cmp	r3, #0
 8011780:	daf2      	bge.n	8011768 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011782:	2300      	movs	r3, #0
 8011784:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2210      	movs	r2, #16
 801178a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	3301      	adds	r3, #1
 8011790:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011798:	d901      	bls.n	801179e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801179a:	2303      	movs	r3, #3
 801179c:	e006      	b.n	80117ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	691b      	ldr	r3, [r3, #16]
 80117a2:	f003 0310 	and.w	r3, r3, #16
 80117a6:	2b10      	cmp	r3, #16
 80117a8:	d0f0      	beq.n	801178c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80117aa:	2300      	movs	r3, #0
}
 80117ac:	4618      	mov	r0, r3
 80117ae:	3714      	adds	r7, #20
 80117b0:	46bd      	mov	sp, r7
 80117b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b6:	4770      	bx	lr

080117b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b08b      	sub	sp, #44	@ 0x2c
 80117bc:	af00      	add	r7, sp, #0
 80117be:	60f8      	str	r0, [r7, #12]
 80117c0:	60b9      	str	r1, [r7, #8]
 80117c2:	4613      	mov	r3, r2
 80117c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80117ce:	88fb      	ldrh	r3, [r7, #6]
 80117d0:	089b      	lsrs	r3, r3, #2
 80117d2:	b29b      	uxth	r3, r3
 80117d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80117d6:	88fb      	ldrh	r3, [r7, #6]
 80117d8:	f003 0303 	and.w	r3, r3, #3
 80117dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80117de:	2300      	movs	r3, #0
 80117e0:	623b      	str	r3, [r7, #32]
 80117e2:	e014      	b.n	801180e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80117e4:	69bb      	ldr	r3, [r7, #24]
 80117e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80117f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f2:	3301      	adds	r3, #1
 80117f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80117f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117f8:	3301      	adds	r3, #1
 80117fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80117fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117fe:	3301      	adds	r3, #1
 8011800:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011804:	3301      	adds	r3, #1
 8011806:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011808:	6a3b      	ldr	r3, [r7, #32]
 801180a:	3301      	adds	r3, #1
 801180c:	623b      	str	r3, [r7, #32]
 801180e:	6a3a      	ldr	r2, [r7, #32]
 8011810:	697b      	ldr	r3, [r7, #20]
 8011812:	429a      	cmp	r2, r3
 8011814:	d3e6      	bcc.n	80117e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011816:	8bfb      	ldrh	r3, [r7, #30]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d01e      	beq.n	801185a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801181c:	2300      	movs	r3, #0
 801181e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011820:	69bb      	ldr	r3, [r7, #24]
 8011822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011826:	461a      	mov	r2, r3
 8011828:	f107 0310 	add.w	r3, r7, #16
 801182c:	6812      	ldr	r2, [r2, #0]
 801182e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011830:	693a      	ldr	r2, [r7, #16]
 8011832:	6a3b      	ldr	r3, [r7, #32]
 8011834:	b2db      	uxtb	r3, r3
 8011836:	00db      	lsls	r3, r3, #3
 8011838:	fa22 f303 	lsr.w	r3, r2, r3
 801183c:	b2da      	uxtb	r2, r3
 801183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011840:	701a      	strb	r2, [r3, #0]
      i++;
 8011842:	6a3b      	ldr	r3, [r7, #32]
 8011844:	3301      	adds	r3, #1
 8011846:	623b      	str	r3, [r7, #32]
      pDest++;
 8011848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801184a:	3301      	adds	r3, #1
 801184c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801184e:	8bfb      	ldrh	r3, [r7, #30]
 8011850:	3b01      	subs	r3, #1
 8011852:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011854:	8bfb      	ldrh	r3, [r7, #30]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d1ea      	bne.n	8011830 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801185c:	4618      	mov	r0, r3
 801185e:	372c      	adds	r7, #44	@ 0x2c
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr

08011868 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	695b      	ldr	r3, [r3, #20]
 8011874:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	699b      	ldr	r3, [r3, #24]
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	4013      	ands	r3, r2
 801187e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011880:	68fb      	ldr	r3, [r7, #12]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3714      	adds	r7, #20
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 801188e:	b480      	push	{r7}
 8011890:	b085      	sub	sp, #20
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	460b      	mov	r3, r1
 8011898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 801189e:	78fb      	ldrb	r3, [r7, #3]
 80118a0:	015a      	lsls	r2, r3, #5
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	4413      	add	r3, r2
 80118a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118aa:	689b      	ldr	r3, [r3, #8]
 80118ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80118ae:	78fb      	ldrb	r3, [r7, #3]
 80118b0:	015a      	lsls	r2, r3, #5
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	4413      	add	r3, r2
 80118b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	68ba      	ldr	r2, [r7, #8]
 80118be:	4013      	ands	r3, r2
 80118c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80118c2:	68bb      	ldr	r3, [r7, #8]
}
 80118c4:	4618      	mov	r0, r3
 80118c6:	3714      	adds	r7, #20
 80118c8:	46bd      	mov	sp, r7
 80118ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ce:	4770      	bx	lr

080118d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80118d0:	b480      	push	{r7}
 80118d2:	b083      	sub	sp, #12
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	695b      	ldr	r3, [r3, #20]
 80118dc:	f003 0301 	and.w	r3, r3, #1
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	370c      	adds	r7, #12
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr

080118ec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b085      	sub	sp, #20
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	460b      	mov	r3, r1
 80118f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	68fa      	ldr	r2, [r7, #12]
 8011906:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801190a:	f023 0303 	bic.w	r3, r3, #3
 801190e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	78fb      	ldrb	r3, [r7, #3]
 801191a:	f003 0303 	and.w	r3, r3, #3
 801191e:	68f9      	ldr	r1, [r7, #12]
 8011920:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8011924:	4313      	orrs	r3, r2
 8011926:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8011928:	78fb      	ldrb	r3, [r7, #3]
 801192a:	2b01      	cmp	r3, #1
 801192c:	d107      	bne.n	801193e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011934:	461a      	mov	r2, r3
 8011936:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 801193a:	6053      	str	r3, [r2, #4]
 801193c:	e00c      	b.n	8011958 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 801193e:	78fb      	ldrb	r3, [r7, #3]
 8011940:	2b02      	cmp	r3, #2
 8011942:	d107      	bne.n	8011954 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801194a:	461a      	mov	r2, r3
 801194c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8011950:	6053      	str	r3, [r2, #4]
 8011952:	e001      	b.n	8011958 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8011954:	2301      	movs	r3, #1
 8011956:	e000      	b.n	801195a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	3714      	adds	r7, #20
 801195e:	46bd      	mov	sp, r7
 8011960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011964:	4770      	bx	lr

08011966 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011966:	b480      	push	{r7}
 8011968:	b085      	sub	sp, #20
 801196a:	af00      	add	r7, sp, #0
 801196c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011978:	695b      	ldr	r3, [r3, #20]
 801197a:	b29b      	uxth	r3, r3
}
 801197c:	4618      	mov	r0, r3
 801197e:	3714      	adds	r7, #20
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8011988:	b480      	push	{r7}
 801198a:	b089      	sub	sp, #36	@ 0x24
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	460b      	mov	r3, r1
 8011992:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8011998:	78fb      	ldrb	r3, [r7, #3]
 801199a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 801199c:	2300      	movs	r3, #0
 801199e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	015a      	lsls	r2, r3, #5
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	4413      	add	r3, r2
 80119a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	0c9b      	lsrs	r3, r3, #18
 80119b0:	f003 0303 	and.w	r3, r3, #3
 80119b4:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	015a      	lsls	r2, r3, #5
 80119ba:	69fb      	ldr	r3, [r7, #28]
 80119bc:	4413      	add	r3, r2
 80119be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	0fdb      	lsrs	r3, r3, #31
 80119c6:	f003 0301 	and.w	r3, r3, #1
 80119ca:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80119cc:	69bb      	ldr	r3, [r7, #24]
 80119ce:	015a      	lsls	r2, r3, #5
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	4413      	add	r3, r2
 80119d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	0fdb      	lsrs	r3, r3, #31
 80119dc:	f003 0301 	and.w	r3, r3, #1
 80119e0:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	689b      	ldr	r3, [r3, #8]
 80119e6:	f003 0320 	and.w	r3, r3, #32
 80119ea:	2b20      	cmp	r3, #32
 80119ec:	d10d      	bne.n	8011a0a <USB_HC_Halt+0x82>
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d10a      	bne.n	8011a0a <USB_HC_Halt+0x82>
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d005      	beq.n	8011a06 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80119fa:	697b      	ldr	r3, [r7, #20]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	d002      	beq.n	8011a06 <USB_HC_Halt+0x7e>
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	2b03      	cmp	r3, #3
 8011a04:	d101      	bne.n	8011a0a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8011a06:	2300      	movs	r3, #0
 8011a08:	e0d8      	b.n	8011bbc <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d002      	beq.n	8011a16 <USB_HC_Halt+0x8e>
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	2b02      	cmp	r3, #2
 8011a14:	d173      	bne.n	8011afe <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011a16:	69bb      	ldr	r3, [r7, #24]
 8011a18:	015a      	lsls	r2, r3, #5
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	4413      	add	r3, r2
 8011a1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	69ba      	ldr	r2, [r7, #24]
 8011a26:	0151      	lsls	r1, r2, #5
 8011a28:	69fa      	ldr	r2, [r7, #28]
 8011a2a:	440a      	add	r2, r1
 8011a2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011a34:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	689b      	ldr	r3, [r3, #8]
 8011a3a:	f003 0320 	and.w	r3, r3, #32
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d14a      	bne.n	8011ad8 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a46:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d133      	bne.n	8011ab6 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	015a      	lsls	r2, r3, #5
 8011a52:	69fb      	ldr	r3, [r7, #28]
 8011a54:	4413      	add	r3, r2
 8011a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	69ba      	ldr	r2, [r7, #24]
 8011a5e:	0151      	lsls	r1, r2, #5
 8011a60:	69fa      	ldr	r2, [r7, #28]
 8011a62:	440a      	add	r2, r1
 8011a64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011a6c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	015a      	lsls	r2, r3, #5
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	4413      	add	r3, r2
 8011a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	69ba      	ldr	r2, [r7, #24]
 8011a7e:	0151      	lsls	r1, r2, #5
 8011a80:	69fa      	ldr	r2, [r7, #28]
 8011a82:	440a      	add	r2, r1
 8011a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011a88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011a8c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	3301      	adds	r3, #1
 8011a92:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011a9a:	d82e      	bhi.n	8011afa <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011a9c:	69bb      	ldr	r3, [r7, #24]
 8011a9e:	015a      	lsls	r2, r3, #5
 8011aa0:	69fb      	ldr	r3, [r7, #28]
 8011aa2:	4413      	add	r3, r2
 8011aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011aae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011ab2:	d0ec      	beq.n	8011a8e <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011ab4:	e081      	b.n	8011bba <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	015a      	lsls	r2, r3, #5
 8011aba:	69fb      	ldr	r3, [r7, #28]
 8011abc:	4413      	add	r3, r2
 8011abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	69ba      	ldr	r2, [r7, #24]
 8011ac6:	0151      	lsls	r1, r2, #5
 8011ac8:	69fa      	ldr	r2, [r7, #28]
 8011aca:	440a      	add	r2, r1
 8011acc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011ad0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011ad4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011ad6:	e070      	b.n	8011bba <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	015a      	lsls	r2, r3, #5
 8011adc:	69fb      	ldr	r3, [r7, #28]
 8011ade:	4413      	add	r3, r2
 8011ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	69ba      	ldr	r2, [r7, #24]
 8011ae8:	0151      	lsls	r1, r2, #5
 8011aea:	69fa      	ldr	r2, [r7, #28]
 8011aec:	440a      	add	r2, r1
 8011aee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011af2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011af6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011af8:	e05f      	b.n	8011bba <USB_HC_Halt+0x232>
            break;
 8011afa:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8011afc:	e05d      	b.n	8011bba <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8011afe:	69bb      	ldr	r3, [r7, #24]
 8011b00:	015a      	lsls	r2, r3, #5
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	4413      	add	r3, r2
 8011b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	69ba      	ldr	r2, [r7, #24]
 8011b0e:	0151      	lsls	r1, r2, #5
 8011b10:	69fa      	ldr	r2, [r7, #28]
 8011b12:	440a      	add	r2, r1
 8011b14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011b1c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8011b1e:	69fb      	ldr	r3, [r7, #28]
 8011b20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011b24:	691b      	ldr	r3, [r3, #16]
 8011b26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d133      	bne.n	8011b96 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8011b2e:	69bb      	ldr	r3, [r7, #24]
 8011b30:	015a      	lsls	r2, r3, #5
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	4413      	add	r3, r2
 8011b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	69ba      	ldr	r2, [r7, #24]
 8011b3e:	0151      	lsls	r1, r2, #5
 8011b40:	69fa      	ldr	r2, [r7, #28]
 8011b42:	440a      	add	r2, r1
 8011b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011b4c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	015a      	lsls	r2, r3, #5
 8011b52:	69fb      	ldr	r3, [r7, #28]
 8011b54:	4413      	add	r3, r2
 8011b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	69ba      	ldr	r2, [r7, #24]
 8011b5e:	0151      	lsls	r1, r2, #5
 8011b60:	69fa      	ldr	r2, [r7, #28]
 8011b62:	440a      	add	r2, r1
 8011b64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011b6c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8011b6e:	68bb      	ldr	r3, [r7, #8]
 8011b70:	3301      	adds	r3, #1
 8011b72:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8011b74:	68bb      	ldr	r3, [r7, #8]
 8011b76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011b7a:	d81d      	bhi.n	8011bb8 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	015a      	lsls	r2, r3, #5
 8011b80:	69fb      	ldr	r3, [r7, #28]
 8011b82:	4413      	add	r3, r2
 8011b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011b88:	681b      	ldr	r3, [r3, #0]
 8011b8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011b92:	d0ec      	beq.n	8011b6e <USB_HC_Halt+0x1e6>
 8011b94:	e011      	b.n	8011bba <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8011b96:	69bb      	ldr	r3, [r7, #24]
 8011b98:	015a      	lsls	r2, r3, #5
 8011b9a:	69fb      	ldr	r3, [r7, #28]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	69ba      	ldr	r2, [r7, #24]
 8011ba6:	0151      	lsls	r1, r2, #5
 8011ba8:	69fa      	ldr	r2, [r7, #28]
 8011baa:	440a      	add	r2, r1
 8011bac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8011bb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011bb4:	6013      	str	r3, [r2, #0]
 8011bb6:	e000      	b.n	8011bba <USB_HC_Halt+0x232>
          break;
 8011bb8:	bf00      	nop
    }
  }

  return HAL_OK;
 8011bba:	2300      	movs	r3, #0
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3724      	adds	r7, #36	@ 0x24
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr

08011bc8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b088      	sub	sp, #32
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	f7ff fd7a 	bl	80116d6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011be2:	2110      	movs	r1, #16
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f7ff fd87 	bl	80116f8 <USB_FlushTxFifo>
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d001      	beq.n	8011bf4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011bf4:	6878      	ldr	r0, [r7, #4]
 8011bf6:	f7ff fdb1 	bl	801175c <USB_FlushRxFifo>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d001      	beq.n	8011c04 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8011c00:	2301      	movs	r3, #1
 8011c02:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8011c04:	2300      	movs	r3, #0
 8011c06:	61bb      	str	r3, [r7, #24]
 8011c08:	e01f      	b.n	8011c4a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	015a      	lsls	r2, r3, #5
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	4413      	add	r3, r2
 8011c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011c20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011c28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011c30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011c32:	69bb      	ldr	r3, [r7, #24]
 8011c34:	015a      	lsls	r2, r3, #5
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	4413      	add	r3, r2
 8011c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c3e:	461a      	mov	r2, r3
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8011c44:	69bb      	ldr	r3, [r7, #24]
 8011c46:	3301      	adds	r3, #1
 8011c48:	61bb      	str	r3, [r7, #24]
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	2b0f      	cmp	r3, #15
 8011c4e:	d9dc      	bls.n	8011c0a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8011c50:	2300      	movs	r3, #0
 8011c52:	61bb      	str	r3, [r7, #24]
 8011c54:	e034      	b.n	8011cc0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	015a      	lsls	r2, r3, #5
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011c6c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8011c6e:	693b      	ldr	r3, [r7, #16]
 8011c70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8011c74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8011c76:	693b      	ldr	r3, [r7, #16]
 8011c78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8011c7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	015a      	lsls	r2, r3, #5
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	4413      	add	r3, r2
 8011c86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	693b      	ldr	r3, [r7, #16]
 8011c8e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	3301      	adds	r3, #1
 8011c94:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011c9c:	d80c      	bhi.n	8011cb8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8011c9e:	69bb      	ldr	r3, [r7, #24]
 8011ca0:	015a      	lsls	r2, r3, #5
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	4413      	add	r3, r2
 8011ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011cb4:	d0ec      	beq.n	8011c90 <USB_StopHost+0xc8>
 8011cb6:	e000      	b.n	8011cba <USB_StopHost+0xf2>
        break;
 8011cb8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8011cba:	69bb      	ldr	r3, [r7, #24]
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	61bb      	str	r3, [r7, #24]
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	2b0f      	cmp	r3, #15
 8011cc4:	d9c7      	bls.n	8011c56 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011ccc:	461a      	mov	r2, r3
 8011cce:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cda:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f7ff fce9 	bl	80116b4 <USB_EnableGlobalInt>

  return ret;
 8011ce2:	7ffb      	ldrb	r3, [r7, #31]
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	3720      	adds	r7, #32
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bd80      	pop	{r7, pc}

08011cec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011cf0:	4904      	ldr	r1, [pc, #16]	@ (8011d04 <MX_FATFS_Init+0x18>)
 8011cf2:	4805      	ldr	r0, [pc, #20]	@ (8011d08 <MX_FATFS_Init+0x1c>)
 8011cf4:	f003 f91e 	bl	8014f34 <FATFS_LinkDriver>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	4b03      	ldr	r3, [pc, #12]	@ (8011d0c <MX_FATFS_Init+0x20>)
 8011cfe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011d00:	bf00      	nop
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	20001800 	.word	0x20001800
 8011d08:	0801ca14 	.word	0x0801ca14
 8011d0c:	200017fc 	.word	0x200017fc

08011d10 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011d10:	b480      	push	{r7}
 8011d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011d14:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011d2a:	f000 f879 	bl	8011e20 <BSP_SD_IsDetected>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2b01      	cmp	r3, #1
 8011d32:	d001      	beq.n	8011d38 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011d34:	2302      	movs	r3, #2
 8011d36:	e012      	b.n	8011d5e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8011d38:	480b      	ldr	r0, [pc, #44]	@ (8011d68 <BSP_SD_Init+0x48>)
 8011d3a:	f7fa feed 	bl	800cb18 <HAL_SD_Init>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8011d42:	79fb      	ldrb	r3, [r7, #7]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d109      	bne.n	8011d5c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8011d48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8011d4c:	4806      	ldr	r0, [pc, #24]	@ (8011d68 <BSP_SD_Init+0x48>)
 8011d4e:	f7fb fcc7 	bl	800d6e0 <HAL_SD_ConfigWideBusOperation>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d001      	beq.n	8011d5c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011d5c:	79fb      	ldrb	r3, [r7, #7]
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3708      	adds	r7, #8
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	bf00      	nop
 8011d68:	20000ebc 	.word	0x20000ebc

08011d6c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b088      	sub	sp, #32
 8011d70:	af02      	add	r7, sp, #8
 8011d72:	60f8      	str	r0, [r7, #12]
 8011d74:	60b9      	str	r1, [r7, #8]
 8011d76:	607a      	str	r2, [r7, #4]
 8011d78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	9300      	str	r3, [sp, #0]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	68ba      	ldr	r2, [r7, #8]
 8011d86:	68f9      	ldr	r1, [r7, #12]
 8011d88:	4806      	ldr	r0, [pc, #24]	@ (8011da4 <BSP_SD_ReadBlocks+0x38>)
 8011d8a:	f7fa ff75 	bl	800cc78 <HAL_SD_ReadBlocks>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d001      	beq.n	8011d98 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011d94:	2301      	movs	r3, #1
 8011d96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3718      	adds	r7, #24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	20000ebc 	.word	0x20000ebc

08011da8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b088      	sub	sp, #32
 8011dac:	af02      	add	r7, sp, #8
 8011dae:	60f8      	str	r0, [r7, #12]
 8011db0:	60b9      	str	r1, [r7, #8]
 8011db2:	607a      	str	r2, [r7, #4]
 8011db4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011db6:	2300      	movs	r3, #0
 8011db8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	9300      	str	r3, [sp, #0]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	68ba      	ldr	r2, [r7, #8]
 8011dc2:	68f9      	ldr	r1, [r7, #12]
 8011dc4:	4806      	ldr	r0, [pc, #24]	@ (8011de0 <BSP_SD_WriteBlocks+0x38>)
 8011dc6:	f7fb f935 	bl	800d034 <HAL_SD_WriteBlocks>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d001      	beq.n	8011dd4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011dd0:	2301      	movs	r3, #1
 8011dd2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	3718      	adds	r7, #24
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	bf00      	nop
 8011de0:	20000ebc 	.word	0x20000ebc

08011de4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011de8:	4805      	ldr	r0, [pc, #20]	@ (8011e00 <BSP_SD_GetCardState+0x1c>)
 8011dea:	f7fb fd13 	bl	800d814 <HAL_SD_GetCardState>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b04      	cmp	r3, #4
 8011df2:	bf14      	ite	ne
 8011df4:	2301      	movne	r3, #1
 8011df6:	2300      	moveq	r3, #0
 8011df8:	b2db      	uxtb	r3, r3
}
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop
 8011e00:	20000ebc 	.word	0x20000ebc

08011e04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b082      	sub	sp, #8
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011e0c:	6879      	ldr	r1, [r7, #4]
 8011e0e:	4803      	ldr	r0, [pc, #12]	@ (8011e1c <BSP_SD_GetCardInfo+0x18>)
 8011e10:	f7fb fc3a 	bl	800d688 <HAL_SD_GetCardInfo>
}
 8011e14:	bf00      	nop
 8011e16:	3708      	adds	r7, #8
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}
 8011e1c:	20000ebc 	.word	0x20000ebc

08011e20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b082      	sub	sp, #8
 8011e24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011e26:	2301      	movs	r3, #1
 8011e28:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011e2a:	f000 f80b 	bl	8011e44 <BSP_PlatformIsDetected>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d101      	bne.n	8011e38 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011e34:	2300      	movs	r3, #0
 8011e36:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011e38:	79fb      	ldrb	r3, [r7, #7]
 8011e3a:	b2db      	uxtb	r3, r3
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3708      	adds	r7, #8
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}

08011e44 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011e44:	b580      	push	{r7, lr}
 8011e46:	b082      	sub	sp, #8
 8011e48:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011e4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011e52:	4806      	ldr	r0, [pc, #24]	@ (8011e6c <BSP_PlatformIsDetected+0x28>)
 8011e54:	f7f6 fbac 	bl	80085b0 <HAL_GPIO_ReadPin>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d001      	beq.n	8011e62 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011e5e:	2300      	movs	r3, #0
 8011e60:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011e62:	79fb      	ldrb	r3, [r7, #7]
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	40020800 	.word	0x40020800

08011e70 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011e70:	b480      	push	{r7}
 8011e72:	b087      	sub	sp, #28
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
 8011e78:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011e82:	2320      	movs	r3, #32
 8011e84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011e86:	f3bf 8f4f 	dsb	sy
}
 8011e8a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011e8c:	e00b      	b.n	8011ea6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8011e8e:	4a0d      	ldr	r2, [pc, #52]	@ (8011ec4 <SCB_InvalidateDCache_by_Addr+0x54>)
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	693a      	ldr	r2, [r7, #16]
 8011e9a:	4413      	add	r3, r2
 8011e9c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011e9e:	697a      	ldr	r2, [r7, #20]
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	1ad3      	subs	r3, r2, r3
 8011ea4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	dcf0      	bgt.n	8011e8e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011eac:	f3bf 8f4f 	dsb	sy
}
 8011eb0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011eb2:	f3bf 8f6f 	isb	sy
}
 8011eb6:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011eb8:	bf00      	nop
 8011eba:	371c      	adds	r7, #28
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec2:	4770      	bx	lr
 8011ec4:	e000ed00 	.word	0xe000ed00

08011ec8 <SCB_CleanDCache_by_Addr>:
  \details Cleans D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011ec8:	b480      	push	{r7}
 8011eca:	b087      	sub	sp, #28
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t) addr;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8011eda:	2320      	movs	r3, #32
 8011edc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8011ede:	f3bf 8f4f 	dsb	sy
}
 8011ee2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011ee4:	e00b      	b.n	8011efe <SCB_CleanDCache_by_Addr+0x36>
      SCB->DCCMVAC = op_addr;
 8011ee6:	4a0d      	ldr	r2, [pc, #52]	@ (8011f1c <SCB_CleanDCache_by_Addr+0x54>)
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
      op_addr += (uint32_t)linesize;
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	693a      	ldr	r2, [r7, #16]
 8011ef2:	4413      	add	r3, r2
 8011ef4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011ef6:	697a      	ldr	r2, [r7, #20]
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	1ad3      	subs	r3, r2, r3
 8011efc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	dcf0      	bgt.n	8011ee6 <SCB_CleanDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011f04:	f3bf 8f4f 	dsb	sy
}
 8011f08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011f0a:	f3bf 8f6f 	isb	sy
}
 8011f0e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011f10:	bf00      	nop
 8011f12:	371c      	adds	r7, #28
 8011f14:	46bd      	mov	sp, r7
 8011f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1a:	4770      	bx	lr
 8011f1c:	e000ed00 	.word	0xe000ed00

08011f20 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b084      	sub	sp, #16
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8011f28:	f003 f850 	bl	8014fcc <osKernelSysTick>
 8011f2c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8011f2e:	e006      	b.n	8011f3e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011f30:	f7ff ff58 	bl	8011de4 <BSP_SD_GetCardState>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d101      	bne.n	8011f3e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	e009      	b.n	8011f52 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8011f3e:	f003 f845 	bl	8014fcc <osKernelSysTick>
 8011f42:	4602      	mov	r2, r0
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	429a      	cmp	r2, r3
 8011f4c:	d8f0      	bhi.n	8011f30 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3710      	adds	r7, #16
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}
	...

08011f5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	4603      	mov	r3, r0
 8011f64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011f66:	4b0b      	ldr	r3, [pc, #44]	@ (8011f94 <SD_CheckStatus+0x38>)
 8011f68:	2201      	movs	r2, #1
 8011f6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011f6c:	f7ff ff3a 	bl	8011de4 <BSP_SD_GetCardState>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d107      	bne.n	8011f86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011f76:	4b07      	ldr	r3, [pc, #28]	@ (8011f94 <SD_CheckStatus+0x38>)
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	f023 0301 	bic.w	r3, r3, #1
 8011f80:	b2da      	uxtb	r2, r3
 8011f82:	4b04      	ldr	r3, [pc, #16]	@ (8011f94 <SD_CheckStatus+0x38>)
 8011f84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011f86:	4b03      	ldr	r3, [pc, #12]	@ (8011f94 <SD_CheckStatus+0x38>)
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	b2db      	uxtb	r3, r3
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	3708      	adds	r7, #8
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	20000075 	.word	0x20000075

08011f98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011f98:	b590      	push	{r4, r7, lr}
 8011f9a:	b087      	sub	sp, #28
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8012018 <SD_initialize+0x80>)
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8011fa8:	f003 f804 	bl	8014fb4 <osKernelRunning>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d02b      	beq.n	801200a <SD_initialize+0x72>
    {
      Stat = SD_CheckStatus(lun);
    }

#else
    Stat = SD_CheckStatus(lun);
 8011fb2:	79fb      	ldrb	r3, [r7, #7]
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7ff ffd1 	bl	8011f5c <SD_CheckStatus>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	4b16      	ldr	r3, [pc, #88]	@ (8012018 <SD_initialize+0x80>)
 8011fc0:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011fc2:	4b15      	ldr	r3, [pc, #84]	@ (8012018 <SD_initialize+0x80>)
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d01e      	beq.n	801200a <SD_initialize+0x72>
    {
      if (SDQueueID == NULL)
 8011fcc:	4b13      	ldr	r3, [pc, #76]	@ (801201c <SD_initialize+0x84>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d10e      	bne.n	8011ff2 <SD_initialize+0x5a>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8011fd4:	4b12      	ldr	r3, [pc, #72]	@ (8012020 <SD_initialize+0x88>)
 8011fd6:	f107 0408 	add.w	r4, r7, #8
 8011fda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011fdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8011fe0:	f107 0308 	add.w	r3, r7, #8
 8011fe4:	2100      	movs	r1, #0
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f003 f860 	bl	80150ac <osMessageCreate>
 8011fec:	4603      	mov	r3, r0
 8011fee:	4a0b      	ldr	r2, [pc, #44]	@ (801201c <SD_initialize+0x84>)
 8011ff0:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8011ff2:	4b0a      	ldr	r3, [pc, #40]	@ (801201c <SD_initialize+0x84>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d107      	bne.n	801200a <SD_initialize+0x72>
      {
        Stat |= STA_NOINIT;
 8011ffa:	4b07      	ldr	r3, [pc, #28]	@ (8012018 <SD_initialize+0x80>)
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	f043 0301 	orr.w	r3, r3, #1
 8012004:	b2da      	uxtb	r2, r3
 8012006:	4b04      	ldr	r3, [pc, #16]	@ (8012018 <SD_initialize+0x80>)
 8012008:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801200a:	4b03      	ldr	r3, [pc, #12]	@ (8012018 <SD_initialize+0x80>)
 801200c:	781b      	ldrb	r3, [r3, #0]
 801200e:	b2db      	uxtb	r3, r3
}
 8012010:	4618      	mov	r0, r3
 8012012:	371c      	adds	r7, #28
 8012014:	46bd      	mov	sp, r7
 8012016:	bd90      	pop	{r4, r7, pc}
 8012018:	20000075 	.word	0x20000075
 801201c:	20001c40 	.word	0x20001c40
 8012020:	0801c98c 	.word	0x0801c98c

08012024 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	4603      	mov	r3, r0
 801202c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801202e:	79fb      	ldrb	r3, [r7, #7]
 8012030:	4618      	mov	r0, r3
 8012032:	f7ff ff93 	bl	8011f5c <SD_CheckStatus>
 8012036:	4603      	mov	r3, r0
}
 8012038:	4618      	mov	r0, r3
 801203a:	3708      	adds	r7, #8
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}

08012040 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b08a      	sub	sp, #40	@ 0x28
 8012044:	af00      	add	r7, sp, #0
 8012046:	60b9      	str	r1, [r7, #8]
 8012048:	607a      	str	r2, [r7, #4]
 801204a:	603b      	str	r3, [r7, #0]
 801204c:	4603      	mov	r3, r0
 801204e:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8012050:	2301      	movs	r3, #1
 8012052:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012056:	f247 5030 	movw	r0, #30000	@ 0x7530
 801205a:	f7ff ff61 	bl	8011f20 <SD_CheckStatusWithTimeout>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	da02      	bge.n	801206a <SD_read+0x2a>
  {
    return res;
 8012064:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012068:	e051      	b.n	801210e <SD_read+0xce>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	f003 0303 	and.w	r3, r3, #3
 8012070:	2b00      	cmp	r3, #0
 8012072:	d111      	bne.n	8012098 <SD_read+0x58>
  {
#endif
    /* Use polling mode instead of DMA to avoid callback issues */
    ret = BSP_SD_ReadBlocks((uint32_t*)buff, (uint32_t)(sector), count, SD_TIMEOUT);
 8012074:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012078:	683a      	ldr	r2, [r7, #0]
 801207a:	6879      	ldr	r1, [r7, #4]
 801207c:	68b8      	ldr	r0, [r7, #8]
 801207e:	f7ff fe75 	bl	8011d6c <BSP_SD_ReadBlocks>
 8012082:	4603      	mov	r3, r0
 8012084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ret == MSD_OK) {
 8012088:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801208c:	2b00      	cmp	r3, #0
 801208e:	d13c      	bne.n	801210a <SD_read+0xca>
      /* Polling mode - no need for message queue */
      res = RES_OK;
 8012090:	2300      	movs	r3, #0
 8012092:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012096:	e038      	b.n	801210a <SD_read+0xca>
    else
    {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++)
 8012098:	2300      	movs	r3, #0
 801209a:	623b      	str	r3, [r7, #32]
 801209c:	e024      	b.n	80120e8 <SD_read+0xa8>
      {
        ret = BSP_SD_ReadBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 801209e:	6879      	ldr	r1, [r7, #4]
 80120a0:	1c4b      	adds	r3, r1, #1
 80120a2:	607b      	str	r3, [r7, #4]
 80120a4:	f247 5330 	movw	r3, #30000	@ 0x7530
 80120a8:	2201      	movs	r2, #1
 80120aa:	481b      	ldr	r0, [pc, #108]	@ (8012118 <SD_read+0xd8>)
 80120ac:	f7ff fe5e 	bl	8011d6c <BSP_SD_ReadBlocks>
 80120b0:	4603      	mov	r3, r0
 80120b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (ret == MSD_OK )
 80120b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d119      	bne.n	80120f2 <SD_read+0xb2>
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
          /*
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 80120be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80120c2:	4815      	ldr	r0, [pc, #84]	@ (8012118 <SD_read+0xd8>)
 80120c4:	f7ff fed4 	bl	8011e70 <SCB_InvalidateDCache_by_Addr>
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	4a13      	ldr	r2, [pc, #76]	@ (8012118 <SD_read+0xd8>)
 80120cc:	4618      	mov	r0, r3
 80120ce:	4611      	mov	r1, r2
 80120d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80120d4:	461a      	mov	r2, r3
 80120d6:	f005 fec6 	bl	8017e66 <memcpy>
          buff += BLOCKSIZE;
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80120e0:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80120e2:	6a3b      	ldr	r3, [r7, #32]
 80120e4:	3301      	adds	r3, #1
 80120e6:	623b      	str	r3, [r7, #32]
 80120e8:	6a3b      	ldr	r3, [r7, #32]
 80120ea:	683a      	ldr	r2, [r7, #0]
 80120ec:	429a      	cmp	r2, r3
 80120ee:	d8d6      	bhi.n	801209e <SD_read+0x5e>
 80120f0:	e000      	b.n	80120f4 <SD_read+0xb4>
        }
        else
        {
          break;
 80120f2:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 80120f4:	6a3b      	ldr	r3, [r7, #32]
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d106      	bne.n	801210a <SD_read+0xca>
 80120fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012100:	2b00      	cmp	r3, #0
 8012102:	d102      	bne.n	801210a <SD_read+0xca>
        res = RES_OK;
 8012104:	2300      	movs	r3, #0
 8012106:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    }
#endif
  return res;
 801210a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
}
 801210e:	4618      	mov	r0, r3
 8012110:	3728      	adds	r7, #40	@ 0x28
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
 8012116:	bf00      	nop
 8012118:	20001a40 	.word	0x20001a40

0801211c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801211c:	b580      	push	{r7, lr}
 801211e:	b08c      	sub	sp, #48	@ 0x30
 8012120:	af00      	add	r7, sp, #0
 8012122:	60b9      	str	r1, [r7, #8]
 8012124:	607a      	str	r2, [r7, #4]
 8012126:	603b      	str	r3, [r7, #0]
 8012128:	4603      	mov	r3, r0
 801212a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801212c:	2301      	movs	r3, #1
 801212e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012132:	f247 5030 	movw	r0, #30000	@ 0x7530
 8012136:	f7ff fef3 	bl	8011f20 <SD_CheckStatusWithTimeout>
 801213a:	4603      	mov	r3, r0
 801213c:	2b00      	cmp	r3, #0
 801213e:	da02      	bge.n	8012146 <SD_write+0x2a>
  {
    return res;
 8012140:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012144:	e082      	b.n	801224c <SD_write+0x130>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	f003 0303 	and.w	r3, r3, #3
 801214c:	2b00      	cmp	r3, #0
 801214e:	d17b      	bne.n	8012248 <SD_write+0x12c>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8012150:	68bb      	ldr	r3, [r7, #8]
 8012152:	f023 031f 	bic.w	r3, r3, #31
 8012156:	623b      	str	r3, [r7, #32]
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8012158:	6a38      	ldr	r0, [r7, #32]
 801215a:	683b      	ldr	r3, [r7, #0]
 801215c:	025a      	lsls	r2, r3, #9
 801215e:	68b9      	ldr	r1, [r7, #8]
 8012160:	6a3b      	ldr	r3, [r7, #32]
 8012162:	1acb      	subs	r3, r1, r3
 8012164:	4413      	add	r3, r2
 8012166:	4619      	mov	r1, r3
 8012168:	f7ff feae 	bl	8011ec8 <SCB_CleanDCache_by_Addr>
#endif

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801216c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8012170:	683a      	ldr	r2, [r7, #0]
 8012172:	6879      	ldr	r1, [r7, #4]
 8012174:	68b8      	ldr	r0, [r7, #8]
 8012176:	f7ff fe17 	bl	8011da8 <BSP_SD_WriteBlocks>
 801217a:	4603      	mov	r3, r0
 801217c:	2b00      	cmp	r3, #0
 801217e:	d103      	bne.n	8012188 <SD_write+0x6c>
                        (uint32_t) (sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
    /* Polling mode - no need for message queue */
    res = RES_OK;
 8012180:	2300      	movs	r3, #0
 8012182:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012186:	e05f      	b.n	8012248 <SD_write+0x12c>

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
    /*
     * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
     */
     SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
 8012188:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801218c:	4831      	ldr	r0, [pc, #196]	@ (8012254 <SD_write+0x138>)
 801218e:	f7ff fe6f 	bl	8011e70 <SCB_InvalidateDCache_by_Addr>
#endif
      for (i = 0; i < count; i++)
 8012192:	2300      	movs	r3, #0
 8012194:	627b      	str	r3, [r7, #36]	@ 0x24
 8012196:	e045      	b.n	8012224 <SD_write+0x108>
      {
        memcpy((void *)scratch, buff, BLOCKSIZE);
 8012198:	4a2e      	ldr	r2, [pc, #184]	@ (8012254 <SD_write+0x138>)
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	4610      	mov	r0, r2
 801219e:	4619      	mov	r1, r3
 80121a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80121a4:	461a      	mov	r2, r3
 80121a6:	f005 fe5e 	bl	8017e66 <memcpy>
        buff += BLOCKSIZE;
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80121b0:	60bb      	str	r3, [r7, #8]

        ret = BSP_SD_WriteBlocks((uint32_t*)scratch, (uint32_t)sector++, 1, SD_TIMEOUT);
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	1c4b      	adds	r3, r1, #1
 80121b6:	607b      	str	r3, [r7, #4]
 80121b8:	f247 5330 	movw	r3, #30000	@ 0x7530
 80121bc:	2201      	movs	r2, #1
 80121be:	4825      	ldr	r0, [pc, #148]	@ (8012254 <SD_write+0x138>)
 80121c0:	f7ff fdf2 	bl	8011da8 <BSP_SD_WriteBlocks>
 80121c4:	4603      	mov	r3, r0
 80121c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (ret == MSD_OK )
 80121c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d12f      	bne.n	801222e <SD_write+0x112>
        {
          /* Polling mode - operation already completed */
#if (osCMSIS < 0x20000U)
          /* wait for a message from the queue or a timeout */
          event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80121ce:	4b22      	ldr	r3, [pc, #136]	@ (8012258 <SD_write+0x13c>)
 80121d0:	6819      	ldr	r1, [r3, #0]
 80121d2:	f107 0310 	add.w	r3, r7, #16
 80121d6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80121da:	4618      	mov	r0, r3
 80121dc:	f002 ffce 	bl	801517c <osMessageGet>

          if (event.status == osEventMessage)
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	2b10      	cmp	r3, #16
 80121e4:	d11b      	bne.n	801221e <SD_write+0x102>
          {
            if (event.value.v == READ_CPLT_MSG)
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d118      	bne.n	801221e <SD_write+0x102>
            {
              timer = osKernelSysTick();
 80121ec:	f002 feee 	bl	8014fcc <osKernelSysTick>
 80121f0:	61f8      	str	r0, [r7, #28]
              /* block until SDIO IP is ready or a timeout occur */
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 80121f2:	e006      	b.n	8012202 <SD_write+0xe6>
                /* block until SDIO IP is ready or a timeout occur */
                ret = MSD_ERROR;
                while(osKernelGetTickCount() - timer < SD_TIMEOUT)
#endif
                {
                  ret = BSP_SD_GetCardState();
 80121f4:	f7ff fdf6 	bl	8011de4 <BSP_SD_GetCardState>
 80121f8:	4603      	mov	r3, r0
 80121fa:	62bb      	str	r3, [r7, #40]	@ 0x28

                  if (ret == MSD_OK)
 80121fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d009      	beq.n	8012216 <SD_write+0xfa>
              while(osKernelSysTick() - timer <SD_TIMEOUT)
 8012202:	f002 fee3 	bl	8014fcc <osKernelSysTick>
 8012206:	4602      	mov	r2, r0
 8012208:	69fb      	ldr	r3, [r7, #28]
 801220a:	1ad3      	subs	r3, r2, r3
 801220c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8012210:	4293      	cmp	r3, r2
 8012212:	d9ef      	bls.n	80121f4 <SD_write+0xd8>
 8012214:	e000      	b.n	8012218 <SD_write+0xfc>
                  {
                    break;
 8012216:	bf00      	nop
                  }
                }

                if (ret != MSD_OK)
 8012218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801221a:	2b00      	cmp	r3, #0
 801221c:	d109      	bne.n	8012232 <SD_write+0x116>
      for (i = 0; i < count; i++)
 801221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012220:	3301      	adds	r3, #1
 8012222:	627b      	str	r3, [r7, #36]	@ 0x24
 8012224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012226:	683a      	ldr	r2, [r7, #0]
 8012228:	429a      	cmp	r2, r3
 801222a:	d8b5      	bhi.n	8012198 <SD_write+0x7c>
 801222c:	e002      	b.n	8012234 <SD_write+0x118>
          }
#endif
        }
        else
        {
          break;
 801222e:	bf00      	nop
 8012230:	e000      	b.n	8012234 <SD_write+0x118>
                  break;
 8012232:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK ))
 8012234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012236:	683a      	ldr	r2, [r7, #0]
 8012238:	429a      	cmp	r2, r3
 801223a:	d105      	bne.n	8012248 <SD_write+0x12c>
 801223c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801223e:	2b00      	cmp	r3, #0
 8012240:	d102      	bne.n	8012248 <SD_write+0x12c>
        res = RES_OK;
 8012242:	2300      	movs	r3, #0
 8012244:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

  }
#endif

  return res;
 8012248:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801224c:	4618      	mov	r0, r3
 801224e:	3730      	adds	r7, #48	@ 0x30
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}
 8012254:	20001a40 	.word	0x20001a40
 8012258:	20001c40 	.word	0x20001c40

0801225c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b08c      	sub	sp, #48	@ 0x30
 8012260:	af00      	add	r7, sp, #0
 8012262:	4603      	mov	r3, r0
 8012264:	603a      	str	r2, [r7, #0]
 8012266:	71fb      	strb	r3, [r7, #7]
 8012268:	460b      	mov	r3, r1
 801226a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801226c:	2301      	movs	r3, #1
 801226e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012272:	4b25      	ldr	r3, [pc, #148]	@ (8012308 <SD_ioctl+0xac>)
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	b2db      	uxtb	r3, r3
 8012278:	f003 0301 	and.w	r3, r3, #1
 801227c:	2b00      	cmp	r3, #0
 801227e:	d001      	beq.n	8012284 <SD_ioctl+0x28>
 8012280:	2303      	movs	r3, #3
 8012282:	e03c      	b.n	80122fe <SD_ioctl+0xa2>

  switch (cmd)
 8012284:	79bb      	ldrb	r3, [r7, #6]
 8012286:	2b03      	cmp	r3, #3
 8012288:	d834      	bhi.n	80122f4 <SD_ioctl+0x98>
 801228a:	a201      	add	r2, pc, #4	@ (adr r2, 8012290 <SD_ioctl+0x34>)
 801228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012290:	080122a1 	.word	0x080122a1
 8012294:	080122a9 	.word	0x080122a9
 8012298:	080122c1 	.word	0x080122c1
 801229c:	080122db 	.word	0x080122db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80122a0:	2300      	movs	r3, #0
 80122a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80122a6:	e028      	b.n	80122fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80122a8:	f107 030c 	add.w	r3, r7, #12
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7ff fda9 	bl	8011e04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80122b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80122b8:	2300      	movs	r3, #0
 80122ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80122be:	e01c      	b.n	80122fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80122c0:	f107 030c 	add.w	r3, r7, #12
 80122c4:	4618      	mov	r0, r3
 80122c6:	f7ff fd9d 	bl	8011e04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80122ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122cc:	b29a      	uxth	r2, r3
 80122ce:	683b      	ldr	r3, [r7, #0]
 80122d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80122d2:	2300      	movs	r3, #0
 80122d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80122d8:	e00f      	b.n	80122fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80122da:	f107 030c 	add.w	r3, r7, #12
 80122de:	4618      	mov	r0, r3
 80122e0:	f7ff fd90 	bl	8011e04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80122e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e6:	0a5a      	lsrs	r2, r3, #9
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80122ec:	2300      	movs	r3, #0
 80122ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80122f2:	e002      	b.n	80122fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80122f4:	2304      	movs	r3, #4
 80122f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 80122fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3730      	adds	r7, #48	@ 0x30
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	20000075 	.word	0x20000075

0801230c <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b082      	sub	sp, #8
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801231a:	1c5a      	adds	r2, r3, #1
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8012322:	6878      	ldr	r0, [r7, #4]
 8012324:	f000 f804 	bl	8012330 <USBH_HandleSof>
}
 8012328:	bf00      	nop
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	b2db      	uxtb	r3, r3
 801233e:	2b0b      	cmp	r3, #11
 8012340:	d10a      	bne.n	8012358 <USBH_HandleSof+0x28>
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012348:	2b00      	cmp	r3, #0
 801234a:	d005      	beq.n	8012358 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8012352:	699b      	ldr	r3, [r3, #24]
 8012354:	6878      	ldr	r0, [r7, #4]
 8012356:	4798      	blx	r3
  }
}
 8012358:	bf00      	nop
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b082      	sub	sp, #8
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2201      	movs	r2, #1
 801236c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012370:	2300      	movs	r3, #0
 8012372:	2200      	movs	r2, #0
 8012374:	2101      	movs	r1, #1
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 f85b 	bl	8012432 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return;
 801237c:	bf00      	nop
}
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}

08012384 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8012384:	b480      	push	{r7}
 8012386:	b083      	sub	sp, #12
 8012388:	af00      	add	r7, sp, #0
 801238a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	2200      	movs	r2, #0
 8012390:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_disconnected = 1U;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2201      	movs	r2, #1
 8012398:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

  return;
 801239c:	bf00      	nop
}
 801239e:	370c      	adds	r7, #12
 80123a0:	46bd      	mov	sp, r7
 80123a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a6:	4770      	bx	lr

080123a8 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b082      	sub	sp, #8
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	2201      	movs	r2, #1
 80123b4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2200      	movs	r2, #0
 80123bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 80123c8:	2300      	movs	r3, #0
 80123ca:	2200      	movs	r2, #0
 80123cc:	2101      	movs	r1, #1
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f82f 	bl	8012432 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3708      	adds	r7, #8
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b082      	sub	sp, #8
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	2201      	movs	r2, #1
 80123ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	2200      	movs	r2, #0
 80123f2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80123fe:	6878      	ldr	r0, [r7, #4]
 8012400:	f005 f9a0 	bl	8017744 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	791b      	ldrb	r3, [r3, #4]
 8012408:	4619      	mov	r1, r3
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f000 f847 	bl	801249e <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	795b      	ldrb	r3, [r3, #5]
 8012414:	4619      	mov	r1, r3
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 f841 	bl	801249e <USBH_FreePipe>

#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 801241c:	2300      	movs	r3, #0
 801241e:	2200      	movs	r2, #0
 8012420:	2101      	movs	r1, #1
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f000 f805 	bl	8012432 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012428:	2300      	movs	r3, #0
}
 801242a:	4618      	mov	r0, r3
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <USBH_OS_PutMessage>:
  * @param  timeout message event timeout
  * @param  priority message event priority
  * @retval None
  */
void USBH_OS_PutMessage(USBH_HandleTypeDef *phost, USBH_OSEventTypeDef message, uint32_t timeout, uint32_t priority)
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b086      	sub	sp, #24
 8012436:	af00      	add	r7, sp, #0
 8012438:	60f8      	str	r0, [r7, #12]
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	603b      	str	r3, [r7, #0]
 801243e:	460b      	mov	r3, r1
 8012440:	72fb      	strb	r3, [r7, #11]
  phost->os_msg = (uint32_t)message;
 8012442:	7afa      	ldrb	r2, [r7, #11]
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  UNUSED(priority);

  /* Calculate the number of available spaces */
  uint32_t available_spaces = MSGQUEUE_OBJECTS - osMessageWaiting(phost->os_event);
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f8d3 33d8 	ldr.w	r3, [r3, #984]	@ 0x3d8
 8012450:	4618      	mov	r0, r3
 8012452:	f002 ff07 	bl	8015264 <osMessageWaiting>
 8012456:	4603      	mov	r3, r0
 8012458:	f1c3 0310 	rsb	r3, r3, #16
 801245c:	617b      	str	r3, [r7, #20]

  if (available_spaces != 0U)
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d009      	beq.n	8012478 <USBH_OS_PutMessage+0x46>
  {
    (void)osMessagePut(phost->os_event, phost->os_msg, timeout);
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8012470:	687a      	ldr	r2, [r7, #4]
 8012472:	4619      	mov	r1, r3
 8012474:	f002 fe42 	bl	80150fc <osMessagePut>
  if (osMessageQueueGetSpace(phost->os_event) != 0U)
  {
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, priority, timeout);
  }
#endif /* (osCMSIS < 0x20000U) */
}
 8012478:	bf00      	nop
 801247a:	3718      	adds	r7, #24
 801247c:	46bd      	mov	sp, r7
 801247e:	bd80      	pop	{r7, pc}

08012480 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
#if (USBH_USE_OS == 1U)
  USBH_OS_PutMessage(phost, USBH_PORT_EVENT, 0U, 0U);
 8012488:	2300      	movs	r3, #0
 801248a:	2200      	movs	r2, #0
 801248c:	2101      	movs	r1, #1
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7ff ffcf 	bl	8012432 <USBH_OS_PutMessage>
#endif /* (USBH_USE_OS == 1U) */

  return USBH_OK;
 8012494:	2300      	movs	r3, #0
}
 8012496:	4618      	mov	r0, r3
 8012498:	3708      	adds	r7, #8
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}

0801249e <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 801249e:	b480      	push	{r7}
 80124a0:	b083      	sub	sp, #12
 80124a2:	af00      	add	r7, sp, #0
 80124a4:	6078      	str	r0, [r7, #4]
 80124a6:	460b      	mov	r3, r1
 80124a8:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80124aa:	78fb      	ldrb	r3, [r7, #3]
 80124ac:	2b0f      	cmp	r3, #15
 80124ae:	d80d      	bhi.n	80124cc <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80124b0:	78fb      	ldrb	r3, [r7, #3]
 80124b2:	687a      	ldr	r2, [r7, #4]
 80124b4:	33e0      	adds	r3, #224	@ 0xe0
 80124b6:	009b      	lsls	r3, r3, #2
 80124b8:	4413      	add	r3, r2
 80124ba:	685a      	ldr	r2, [r3, #4]
 80124bc:	78fb      	ldrb	r3, [r7, #3]
 80124be:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80124c2:	6879      	ldr	r1, [r7, #4]
 80124c4:	33e0      	adds	r3, #224	@ 0xe0
 80124c6:	009b      	lsls	r3, r3, #2
 80124c8:	440b      	add	r3, r1
 80124ca:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80124cc:	2300      	movs	r3, #0
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	370c      	adds	r7, #12
 80124d2:	46bd      	mov	sp, r7
 80124d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d8:	4770      	bx	lr
	...

080124dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	4603      	mov	r3, r0
 80124e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80124e6:	79fb      	ldrb	r3, [r7, #7]
 80124e8:	4a08      	ldr	r2, [pc, #32]	@ (801250c <disk_status+0x30>)
 80124ea:	009b      	lsls	r3, r3, #2
 80124ec:	4413      	add	r3, r2
 80124ee:	685b      	ldr	r3, [r3, #4]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	79fa      	ldrb	r2, [r7, #7]
 80124f4:	4905      	ldr	r1, [pc, #20]	@ (801250c <disk_status+0x30>)
 80124f6:	440a      	add	r2, r1
 80124f8:	7a12      	ldrb	r2, [r2, #8]
 80124fa:	4610      	mov	r0, r2
 80124fc:	4798      	blx	r3
 80124fe:	4603      	mov	r3, r0
 8012500:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012502:	7bfb      	ldrb	r3, [r7, #15]
}
 8012504:	4618      	mov	r0, r3
 8012506:	3710      	adds	r7, #16
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	20001c4c 	.word	0x20001c4c

08012510 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b084      	sub	sp, #16
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801251a:	2300      	movs	r3, #0
 801251c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801251e:	79fb      	ldrb	r3, [r7, #7]
 8012520:	4a0d      	ldr	r2, [pc, #52]	@ (8012558 <disk_initialize+0x48>)
 8012522:	5cd3      	ldrb	r3, [r2, r3]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d111      	bne.n	801254c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012528:	79fb      	ldrb	r3, [r7, #7]
 801252a:	4a0b      	ldr	r2, [pc, #44]	@ (8012558 <disk_initialize+0x48>)
 801252c:	2101      	movs	r1, #1
 801252e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012530:	79fb      	ldrb	r3, [r7, #7]
 8012532:	4a09      	ldr	r2, [pc, #36]	@ (8012558 <disk_initialize+0x48>)
 8012534:	009b      	lsls	r3, r3, #2
 8012536:	4413      	add	r3, r2
 8012538:	685b      	ldr	r3, [r3, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	79fa      	ldrb	r2, [r7, #7]
 801253e:	4906      	ldr	r1, [pc, #24]	@ (8012558 <disk_initialize+0x48>)
 8012540:	440a      	add	r2, r1
 8012542:	7a12      	ldrb	r2, [r2, #8]
 8012544:	4610      	mov	r0, r2
 8012546:	4798      	blx	r3
 8012548:	4603      	mov	r3, r0
 801254a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801254c:	7bfb      	ldrb	r3, [r7, #15]
}
 801254e:	4618      	mov	r0, r3
 8012550:	3710      	adds	r7, #16
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}
 8012556:	bf00      	nop
 8012558:	20001c4c 	.word	0x20001c4c

0801255c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801255c:	b590      	push	{r4, r7, lr}
 801255e:	b087      	sub	sp, #28
 8012560:	af00      	add	r7, sp, #0
 8012562:	60b9      	str	r1, [r7, #8]
 8012564:	607a      	str	r2, [r7, #4]
 8012566:	603b      	str	r3, [r7, #0]
 8012568:	4603      	mov	r3, r0
 801256a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801256c:	7bfb      	ldrb	r3, [r7, #15]
 801256e:	4a0a      	ldr	r2, [pc, #40]	@ (8012598 <disk_read+0x3c>)
 8012570:	009b      	lsls	r3, r3, #2
 8012572:	4413      	add	r3, r2
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	689c      	ldr	r4, [r3, #8]
 8012578:	7bfb      	ldrb	r3, [r7, #15]
 801257a:	4a07      	ldr	r2, [pc, #28]	@ (8012598 <disk_read+0x3c>)
 801257c:	4413      	add	r3, r2
 801257e:	7a18      	ldrb	r0, [r3, #8]
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	68b9      	ldr	r1, [r7, #8]
 8012586:	47a0      	blx	r4
 8012588:	4603      	mov	r3, r0
 801258a:	75fb      	strb	r3, [r7, #23]
  return res;
 801258c:	7dfb      	ldrb	r3, [r7, #23]
}
 801258e:	4618      	mov	r0, r3
 8012590:	371c      	adds	r7, #28
 8012592:	46bd      	mov	sp, r7
 8012594:	bd90      	pop	{r4, r7, pc}
 8012596:	bf00      	nop
 8012598:	20001c4c 	.word	0x20001c4c

0801259c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b087      	sub	sp, #28
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60b9      	str	r1, [r7, #8]
 80125a4:	607a      	str	r2, [r7, #4]
 80125a6:	603b      	str	r3, [r7, #0]
 80125a8:	4603      	mov	r3, r0
 80125aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80125ac:	7bfb      	ldrb	r3, [r7, #15]
 80125ae:	4a0a      	ldr	r2, [pc, #40]	@ (80125d8 <disk_write+0x3c>)
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	4413      	add	r3, r2
 80125b4:	685b      	ldr	r3, [r3, #4]
 80125b6:	68dc      	ldr	r4, [r3, #12]
 80125b8:	7bfb      	ldrb	r3, [r7, #15]
 80125ba:	4a07      	ldr	r2, [pc, #28]	@ (80125d8 <disk_write+0x3c>)
 80125bc:	4413      	add	r3, r2
 80125be:	7a18      	ldrb	r0, [r3, #8]
 80125c0:	683b      	ldr	r3, [r7, #0]
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	68b9      	ldr	r1, [r7, #8]
 80125c6:	47a0      	blx	r4
 80125c8:	4603      	mov	r3, r0
 80125ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80125cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	371c      	adds	r7, #28
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd90      	pop	{r4, r7, pc}
 80125d6:	bf00      	nop
 80125d8:	20001c4c 	.word	0x20001c4c

080125dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	4603      	mov	r3, r0
 80125e4:	603a      	str	r2, [r7, #0]
 80125e6:	71fb      	strb	r3, [r7, #7]
 80125e8:	460b      	mov	r3, r1
 80125ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80125ec:	79fb      	ldrb	r3, [r7, #7]
 80125ee:	4a09      	ldr	r2, [pc, #36]	@ (8012614 <disk_ioctl+0x38>)
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	4413      	add	r3, r2
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	691b      	ldr	r3, [r3, #16]
 80125f8:	79fa      	ldrb	r2, [r7, #7]
 80125fa:	4906      	ldr	r1, [pc, #24]	@ (8012614 <disk_ioctl+0x38>)
 80125fc:	440a      	add	r2, r1
 80125fe:	7a10      	ldrb	r0, [r2, #8]
 8012600:	79b9      	ldrb	r1, [r7, #6]
 8012602:	683a      	ldr	r2, [r7, #0]
 8012604:	4798      	blx	r3
 8012606:	4603      	mov	r3, r0
 8012608:	73fb      	strb	r3, [r7, #15]
  return res;
 801260a:	7bfb      	ldrb	r3, [r7, #15]
}
 801260c:	4618      	mov	r0, r3
 801260e:	3710      	adds	r7, #16
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	20001c4c 	.word	0x20001c4c

08012618 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012618:	b480      	push	{r7}
 801261a:	b085      	sub	sp, #20
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	3301      	adds	r3, #1
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012628:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801262c:	021b      	lsls	r3, r3, #8
 801262e:	b21a      	sxth	r2, r3
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	b21b      	sxth	r3, r3
 8012636:	4313      	orrs	r3, r2
 8012638:	b21b      	sxth	r3, r3
 801263a:	81fb      	strh	r3, [r7, #14]
	return rv;
 801263c:	89fb      	ldrh	r3, [r7, #14]
}
 801263e:	4618      	mov	r0, r3
 8012640:	3714      	adds	r7, #20
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr

0801264a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801264a:	b480      	push	{r7}
 801264c:	b085      	sub	sp, #20
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	3303      	adds	r3, #3
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	021b      	lsls	r3, r3, #8
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	3202      	adds	r2, #2
 8012662:	7812      	ldrb	r2, [r2, #0]
 8012664:	4313      	orrs	r3, r2
 8012666:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	021b      	lsls	r3, r3, #8
 801266c:	687a      	ldr	r2, [r7, #4]
 801266e:	3201      	adds	r2, #1
 8012670:	7812      	ldrb	r2, [r2, #0]
 8012672:	4313      	orrs	r3, r2
 8012674:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	021b      	lsls	r3, r3, #8
 801267a:	687a      	ldr	r2, [r7, #4]
 801267c:	7812      	ldrb	r2, [r2, #0]
 801267e:	4313      	orrs	r3, r2
 8012680:	60fb      	str	r3, [r7, #12]
	return rv;
 8012682:	68fb      	ldr	r3, [r7, #12]
}
 8012684:	4618      	mov	r0, r3
 8012686:	3714      	adds	r7, #20
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012690:	b480      	push	{r7}
 8012692:	b083      	sub	sp, #12
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	460b      	mov	r3, r1
 801269a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	1c5a      	adds	r2, r3, #1
 80126a0:	607a      	str	r2, [r7, #4]
 80126a2:	887a      	ldrh	r2, [r7, #2]
 80126a4:	b2d2      	uxtb	r2, r2
 80126a6:	701a      	strb	r2, [r3, #0]
 80126a8:	887b      	ldrh	r3, [r7, #2]
 80126aa:	0a1b      	lsrs	r3, r3, #8
 80126ac:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	1c5a      	adds	r2, r3, #1
 80126b2:	607a      	str	r2, [r7, #4]
 80126b4:	887a      	ldrh	r2, [r7, #2]
 80126b6:	b2d2      	uxtb	r2, r2
 80126b8:	701a      	strb	r2, [r3, #0]
}
 80126ba:	bf00      	nop
 80126bc:	370c      	adds	r7, #12
 80126be:	46bd      	mov	sp, r7
 80126c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c4:	4770      	bx	lr

080126c6 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80126c6:	b480      	push	{r7}
 80126c8:	b083      	sub	sp, #12
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
 80126ce:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	1c5a      	adds	r2, r3, #1
 80126d4:	607a      	str	r2, [r7, #4]
 80126d6:	683a      	ldr	r2, [r7, #0]
 80126d8:	b2d2      	uxtb	r2, r2
 80126da:	701a      	strb	r2, [r3, #0]
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	0a1b      	lsrs	r3, r3, #8
 80126e0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	1c5a      	adds	r2, r3, #1
 80126e6:	607a      	str	r2, [r7, #4]
 80126e8:	683a      	ldr	r2, [r7, #0]
 80126ea:	b2d2      	uxtb	r2, r2
 80126ec:	701a      	strb	r2, [r3, #0]
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	0a1b      	lsrs	r3, r3, #8
 80126f2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	1c5a      	adds	r2, r3, #1
 80126f8:	607a      	str	r2, [r7, #4]
 80126fa:	683a      	ldr	r2, [r7, #0]
 80126fc:	b2d2      	uxtb	r2, r2
 80126fe:	701a      	strb	r2, [r3, #0]
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	0a1b      	lsrs	r3, r3, #8
 8012704:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	1c5a      	adds	r2, r3, #1
 801270a:	607a      	str	r2, [r7, #4]
 801270c:	683a      	ldr	r2, [r7, #0]
 801270e:	b2d2      	uxtb	r2, r2
 8012710:	701a      	strb	r2, [r3, #0]
}
 8012712:	bf00      	nop
 8012714:	370c      	adds	r7, #12
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr

0801271e <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801271e:	b480      	push	{r7}
 8012720:	b087      	sub	sp, #28
 8012722:	af00      	add	r7, sp, #0
 8012724:	60f8      	str	r0, [r7, #12]
 8012726:	60b9      	str	r1, [r7, #8]
 8012728:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d00d      	beq.n	8012754 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012738:	693a      	ldr	r2, [r7, #16]
 801273a:	1c53      	adds	r3, r2, #1
 801273c:	613b      	str	r3, [r7, #16]
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	1c59      	adds	r1, r3, #1
 8012742:	6179      	str	r1, [r7, #20]
 8012744:	7812      	ldrb	r2, [r2, #0]
 8012746:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	3b01      	subs	r3, #1
 801274c:	607b      	str	r3, [r7, #4]
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d1f1      	bne.n	8012738 <mem_cpy+0x1a>
	}
}
 8012754:	bf00      	nop
 8012756:	371c      	adds	r7, #28
 8012758:	46bd      	mov	sp, r7
 801275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275e:	4770      	bx	lr

08012760 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012760:	b480      	push	{r7}
 8012762:	b087      	sub	sp, #28
 8012764:	af00      	add	r7, sp, #0
 8012766:	60f8      	str	r0, [r7, #12]
 8012768:	60b9      	str	r1, [r7, #8]
 801276a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	1c5a      	adds	r2, r3, #1
 8012774:	617a      	str	r2, [r7, #20]
 8012776:	68ba      	ldr	r2, [r7, #8]
 8012778:	b2d2      	uxtb	r2, r2
 801277a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	3b01      	subs	r3, #1
 8012780:	607b      	str	r3, [r7, #4]
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d1f3      	bne.n	8012770 <mem_set+0x10>
}
 8012788:	bf00      	nop
 801278a:	bf00      	nop
 801278c:	371c      	adds	r7, #28
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr

08012796 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012796:	b480      	push	{r7}
 8012798:	b089      	sub	sp, #36	@ 0x24
 801279a:	af00      	add	r7, sp, #0
 801279c:	60f8      	str	r0, [r7, #12]
 801279e:	60b9      	str	r1, [r7, #8]
 80127a0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	61fb      	str	r3, [r7, #28]
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80127aa:	2300      	movs	r3, #0
 80127ac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	1c5a      	adds	r2, r3, #1
 80127b2:	61fa      	str	r2, [r7, #28]
 80127b4:	781b      	ldrb	r3, [r3, #0]
 80127b6:	4619      	mov	r1, r3
 80127b8:	69bb      	ldr	r3, [r7, #24]
 80127ba:	1c5a      	adds	r2, r3, #1
 80127bc:	61ba      	str	r2, [r7, #24]
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	1acb      	subs	r3, r1, r3
 80127c2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	3b01      	subs	r3, #1
 80127c8:	607b      	str	r3, [r7, #4]
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d002      	beq.n	80127d6 <mem_cmp+0x40>
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d0eb      	beq.n	80127ae <mem_cmp+0x18>

	return r;
 80127d6:	697b      	ldr	r3, [r7, #20]
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3724      	adds	r7, #36	@ 0x24
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80127ee:	e002      	b.n	80127f6 <chk_chr+0x12>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	3301      	adds	r3, #1
 80127f4:	607b      	str	r3, [r7, #4]
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d005      	beq.n	801280a <chk_chr+0x26>
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	461a      	mov	r2, r3
 8012804:	683b      	ldr	r3, [r7, #0]
 8012806:	4293      	cmp	r3, r2
 8012808:	d1f2      	bne.n	80127f0 <chk_chr+0xc>
	return *str;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	781b      	ldrb	r3, [r3, #0]
}
 801280e:	4618      	mov	r0, r3
 8012810:	370c      	adds	r7, #12
 8012812:	46bd      	mov	sp, r7
 8012814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012818:	4770      	bx	lr

0801281a <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801281a:	b580      	push	{r7, lr}
 801281c:	b086      	sub	sp, #24
 801281e:	af00      	add	r7, sp, #0
 8012820:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012822:	2300      	movs	r3, #0
 8012824:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	78db      	ldrb	r3, [r3, #3]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d034      	beq.n	8012898 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012832:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	7858      	ldrb	r0, [r3, #1]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801283e:	2301      	movs	r3, #1
 8012840:	697a      	ldr	r2, [r7, #20]
 8012842:	f7ff feab 	bl	801259c <disk_write>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d002      	beq.n	8012852 <sync_window+0x38>
			res = FR_DISK_ERR;
 801284c:	2301      	movs	r3, #1
 801284e:	73fb      	strb	r3, [r7, #15]
 8012850:	e022      	b.n	8012898 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2200      	movs	r2, #0
 8012856:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6a1b      	ldr	r3, [r3, #32]
 801285c:	697a      	ldr	r2, [r7, #20]
 801285e:	1ad2      	subs	r2, r2, r3
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	699b      	ldr	r3, [r3, #24]
 8012864:	429a      	cmp	r2, r3
 8012866:	d217      	bcs.n	8012898 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	789b      	ldrb	r3, [r3, #2]
 801286c:	613b      	str	r3, [r7, #16]
 801286e:	e010      	b.n	8012892 <sync_window+0x78>
					wsect += fs->fsize;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	699b      	ldr	r3, [r3, #24]
 8012874:	697a      	ldr	r2, [r7, #20]
 8012876:	4413      	add	r3, r2
 8012878:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	7858      	ldrb	r0, [r3, #1]
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012884:	2301      	movs	r3, #1
 8012886:	697a      	ldr	r2, [r7, #20]
 8012888:	f7ff fe88 	bl	801259c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	3b01      	subs	r3, #1
 8012890:	613b      	str	r3, [r7, #16]
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	2b01      	cmp	r3, #1
 8012896:	d8eb      	bhi.n	8012870 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8012898:	7bfb      	ldrb	r3, [r7, #15]
}
 801289a:	4618      	mov	r0, r3
 801289c:	3718      	adds	r7, #24
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b084      	sub	sp, #16
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
 80128aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80128ac:	2300      	movs	r3, #0
 80128ae:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128b4:	683a      	ldr	r2, [r7, #0]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d01b      	beq.n	80128f2 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7ff ffad 	bl	801281a <sync_window>
 80128c0:	4603      	mov	r3, r0
 80128c2:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80128c4:	7bfb      	ldrb	r3, [r7, #15]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d113      	bne.n	80128f2 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	7858      	ldrb	r0, [r3, #1]
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80128d4:	2301      	movs	r3, #1
 80128d6:	683a      	ldr	r2, [r7, #0]
 80128d8:	f7ff fe40 	bl	801255c <disk_read>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d004      	beq.n	80128ec <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80128e2:	f04f 33ff 	mov.w	r3, #4294967295
 80128e6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80128e8:	2301      	movs	r3, #1
 80128ea:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	683a      	ldr	r2, [r7, #0]
 80128f0:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80128f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3710      	adds	r7, #16
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f7ff ff88 	bl	801281a <sync_window>
 801290a:	4603      	mov	r3, r0
 801290c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801290e:	7bfb      	ldrb	r3, [r7, #15]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d158      	bne.n	80129c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	2b03      	cmp	r3, #3
 801291a:	d148      	bne.n	80129ae <sync_fs+0xb2>
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	791b      	ldrb	r3, [r3, #4]
 8012920:	2b01      	cmp	r3, #1
 8012922:	d144      	bne.n	80129ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	3330      	adds	r3, #48	@ 0x30
 8012928:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801292c:	2100      	movs	r1, #0
 801292e:	4618      	mov	r0, r3
 8012930:	f7ff ff16 	bl	8012760 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	3330      	adds	r3, #48	@ 0x30
 8012938:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801293c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8012940:	4618      	mov	r0, r3
 8012942:	f7ff fea5 	bl	8012690 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	3330      	adds	r3, #48	@ 0x30
 801294a:	4921      	ldr	r1, [pc, #132]	@ (80129d0 <sync_fs+0xd4>)
 801294c:	4618      	mov	r0, r3
 801294e:	f7ff feba 	bl	80126c6 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	3330      	adds	r3, #48	@ 0x30
 8012956:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801295a:	491e      	ldr	r1, [pc, #120]	@ (80129d4 <sync_fs+0xd8>)
 801295c:	4618      	mov	r0, r3
 801295e:	f7ff feb2 	bl	80126c6 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3330      	adds	r3, #48	@ 0x30
 8012966:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	691b      	ldr	r3, [r3, #16]
 801296e:	4619      	mov	r1, r3
 8012970:	4610      	mov	r0, r2
 8012972:	f7ff fea8 	bl	80126c6 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	3330      	adds	r3, #48	@ 0x30
 801297a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	68db      	ldr	r3, [r3, #12]
 8012982:	4619      	mov	r1, r3
 8012984:	4610      	mov	r0, r2
 8012986:	f7ff fe9e 	bl	80126c6 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	69db      	ldr	r3, [r3, #28]
 801298e:	1c5a      	adds	r2, r3, #1
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	7858      	ldrb	r0, [r3, #1]
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80129a2:	2301      	movs	r3, #1
 80129a4:	f7ff fdfa 	bl	801259c <disk_write>
			fs->fsi_flag = 0;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	2200      	movs	r2, #0
 80129ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	785b      	ldrb	r3, [r3, #1]
 80129b2:	2200      	movs	r2, #0
 80129b4:	2100      	movs	r1, #0
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7ff fe10 	bl	80125dc <disk_ioctl>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d001      	beq.n	80129c6 <sync_fs+0xca>
 80129c2:	2301      	movs	r3, #1
 80129c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80129c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3710      	adds	r7, #16
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	41615252 	.word	0x41615252
 80129d4:	61417272 	.word	0x61417272

080129d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80129d8:	b480      	push	{r7}
 80129da:	b083      	sub	sp, #12
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	3b02      	subs	r3, #2
 80129e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	695b      	ldr	r3, [r3, #20]
 80129ec:	3b02      	subs	r3, #2
 80129ee:	683a      	ldr	r2, [r7, #0]
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d301      	bcc.n	80129f8 <clust2sect+0x20>
 80129f4:	2300      	movs	r3, #0
 80129f6:	e008      	b.n	8012a0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	895b      	ldrh	r3, [r3, #10]
 80129fc:	461a      	mov	r2, r3
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	fb03 f202 	mul.w	r2, r3, r2
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a08:	4413      	add	r3, r2
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	370c      	adds	r7, #12
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a14:	4770      	bx	lr

08012a16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8012a16:	b580      	push	{r7, lr}
 8012a18:	b086      	sub	sp, #24
 8012a1a:	af00      	add	r7, sp, #0
 8012a1c:	6078      	str	r0, [r7, #4]
 8012a1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	2b01      	cmp	r3, #1
 8012a2a:	d904      	bls.n	8012a36 <get_fat+0x20>
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	695b      	ldr	r3, [r3, #20]
 8012a30:	683a      	ldr	r2, [r7, #0]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d302      	bcc.n	8012a3c <get_fat+0x26>
		val = 1;	/* Internal error */
 8012a36:	2301      	movs	r3, #1
 8012a38:	617b      	str	r3, [r7, #20]
 8012a3a:	e08e      	b.n	8012b5a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	2b03      	cmp	r3, #3
 8012a48:	d061      	beq.n	8012b0e <get_fat+0xf8>
 8012a4a:	2b03      	cmp	r3, #3
 8012a4c:	dc7b      	bgt.n	8012b46 <get_fat+0x130>
 8012a4e:	2b01      	cmp	r3, #1
 8012a50:	d002      	beq.n	8012a58 <get_fat+0x42>
 8012a52:	2b02      	cmp	r3, #2
 8012a54:	d041      	beq.n	8012ada <get_fat+0xc4>
 8012a56:	e076      	b.n	8012b46 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012a58:	683b      	ldr	r3, [r7, #0]
 8012a5a:	60fb      	str	r3, [r7, #12]
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	085b      	lsrs	r3, r3, #1
 8012a60:	68fa      	ldr	r2, [r7, #12]
 8012a62:	4413      	add	r3, r2
 8012a64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	6a1a      	ldr	r2, [r3, #32]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	0a5b      	lsrs	r3, r3, #9
 8012a6e:	4413      	add	r3, r2
 8012a70:	4619      	mov	r1, r3
 8012a72:	6938      	ldr	r0, [r7, #16]
 8012a74:	f7ff ff15 	bl	80128a2 <move_window>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d166      	bne.n	8012b4c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	1c5a      	adds	r2, r3, #1
 8012a82:	60fa      	str	r2, [r7, #12]
 8012a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a88:	693a      	ldr	r2, [r7, #16]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012a90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	6a1a      	ldr	r2, [r3, #32]
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	0a5b      	lsrs	r3, r3, #9
 8012a9a:	4413      	add	r3, r2
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	6938      	ldr	r0, [r7, #16]
 8012aa0:	f7ff feff 	bl	80128a2 <move_window>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d152      	bne.n	8012b50 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ab0:	693a      	ldr	r2, [r7, #16]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012ab8:	021b      	lsls	r3, r3, #8
 8012aba:	68ba      	ldr	r2, [r7, #8]
 8012abc:	4313      	orrs	r3, r2
 8012abe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	f003 0301 	and.w	r3, r3, #1
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d002      	beq.n	8012ad0 <get_fat+0xba>
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	091b      	lsrs	r3, r3, #4
 8012ace:	e002      	b.n	8012ad6 <get_fat+0xc0>
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012ad6:	617b      	str	r3, [r7, #20]
			break;
 8012ad8:	e03f      	b.n	8012b5a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	6a1a      	ldr	r2, [r3, #32]
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	0a1b      	lsrs	r3, r3, #8
 8012ae2:	4413      	add	r3, r2
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	6938      	ldr	r0, [r7, #16]
 8012ae8:	f7ff fedb 	bl	80128a2 <move_window>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d130      	bne.n	8012b54 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	005b      	lsls	r3, r3, #1
 8012afc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012b00:	4413      	add	r3, r2
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7ff fd88 	bl	8012618 <ld_word>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	617b      	str	r3, [r7, #20]
			break;
 8012b0c:	e025      	b.n	8012b5a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	6a1a      	ldr	r2, [r3, #32]
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	09db      	lsrs	r3, r3, #7
 8012b16:	4413      	add	r3, r2
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6938      	ldr	r0, [r7, #16]
 8012b1c:	f7ff fec1 	bl	80128a2 <move_window>
 8012b20:	4603      	mov	r3, r0
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d118      	bne.n	8012b58 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012b26:	693b      	ldr	r3, [r7, #16]
 8012b28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012b2c:	683b      	ldr	r3, [r7, #0]
 8012b2e:	009b      	lsls	r3, r3, #2
 8012b30:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012b34:	4413      	add	r3, r2
 8012b36:	4618      	mov	r0, r3
 8012b38:	f7ff fd87 	bl	801264a <ld_dword>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012b42:	617b      	str	r3, [r7, #20]
			break;
 8012b44:	e009      	b.n	8012b5a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012b46:	2301      	movs	r3, #1
 8012b48:	617b      	str	r3, [r7, #20]
 8012b4a:	e006      	b.n	8012b5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b4c:	bf00      	nop
 8012b4e:	e004      	b.n	8012b5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012b50:	bf00      	nop
 8012b52:	e002      	b.n	8012b5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012b54:	bf00      	nop
 8012b56:	e000      	b.n	8012b5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012b58:	bf00      	nop
		}
	}

	return val;
 8012b5a:	697b      	ldr	r3, [r7, #20]
}
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	3718      	adds	r7, #24
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}

08012b64 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012b64:	b590      	push	{r4, r7, lr}
 8012b66:	b089      	sub	sp, #36	@ 0x24
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	60b9      	str	r1, [r7, #8]
 8012b6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012b70:	2302      	movs	r3, #2
 8012b72:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	f240 80d9 	bls.w	8012d2e <put_fat+0x1ca>
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	695b      	ldr	r3, [r3, #20]
 8012b80:	68ba      	ldr	r2, [r7, #8]
 8012b82:	429a      	cmp	r2, r3
 8012b84:	f080 80d3 	bcs.w	8012d2e <put_fat+0x1ca>
		switch (fs->fs_type) {
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	2b03      	cmp	r3, #3
 8012b8e:	f000 8096 	beq.w	8012cbe <put_fat+0x15a>
 8012b92:	2b03      	cmp	r3, #3
 8012b94:	f300 80cb 	bgt.w	8012d2e <put_fat+0x1ca>
 8012b98:	2b01      	cmp	r3, #1
 8012b9a:	d002      	beq.n	8012ba2 <put_fat+0x3e>
 8012b9c:	2b02      	cmp	r3, #2
 8012b9e:	d06e      	beq.n	8012c7e <put_fat+0x11a>
 8012ba0:	e0c5      	b.n	8012d2e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	61bb      	str	r3, [r7, #24]
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	085b      	lsrs	r3, r3, #1
 8012baa:	69ba      	ldr	r2, [r7, #24]
 8012bac:	4413      	add	r3, r2
 8012bae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	6a1a      	ldr	r2, [r3, #32]
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	0a5b      	lsrs	r3, r3, #9
 8012bb8:	4413      	add	r3, r2
 8012bba:	4619      	mov	r1, r3
 8012bbc:	68f8      	ldr	r0, [r7, #12]
 8012bbe:	f7ff fe70 	bl	80128a2 <move_window>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012bc6:	7ffb      	ldrb	r3, [r7, #31]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	f040 80a9 	bne.w	8012d20 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012bd4:	69bb      	ldr	r3, [r7, #24]
 8012bd6:	1c59      	adds	r1, r3, #1
 8012bd8:	61b9      	str	r1, [r7, #24]
 8012bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012bde:	4413      	add	r3, r2
 8012be0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	f003 0301 	and.w	r3, r3, #1
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d00d      	beq.n	8012c08 <put_fat+0xa4>
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	b25b      	sxtb	r3, r3
 8012bf2:	f003 030f 	and.w	r3, r3, #15
 8012bf6:	b25a      	sxtb	r2, r3
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	b25b      	sxtb	r3, r3
 8012bfc:	011b      	lsls	r3, r3, #4
 8012bfe:	b25b      	sxtb	r3, r3
 8012c00:	4313      	orrs	r3, r2
 8012c02:	b25b      	sxtb	r3, r3
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	e001      	b.n	8012c0c <put_fat+0xa8>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	697a      	ldr	r2, [r7, #20]
 8012c0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2201      	movs	r2, #1
 8012c14:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	6a1a      	ldr	r2, [r3, #32]
 8012c1a:	69bb      	ldr	r3, [r7, #24]
 8012c1c:	0a5b      	lsrs	r3, r3, #9
 8012c1e:	4413      	add	r3, r2
 8012c20:	4619      	mov	r1, r3
 8012c22:	68f8      	ldr	r0, [r7, #12]
 8012c24:	f7ff fe3d 	bl	80128a2 <move_window>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c2c:	7ffb      	ldrb	r3, [r7, #31]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d178      	bne.n	8012d24 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c3e:	4413      	add	r3, r2
 8012c40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	f003 0301 	and.w	r3, r3, #1
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d003      	beq.n	8012c54 <put_fat+0xf0>
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	091b      	lsrs	r3, r3, #4
 8012c50:	b2db      	uxtb	r3, r3
 8012c52:	e00e      	b.n	8012c72 <put_fat+0x10e>
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	b25b      	sxtb	r3, r3
 8012c5a:	f023 030f 	bic.w	r3, r3, #15
 8012c5e:	b25a      	sxtb	r2, r3
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	0a1b      	lsrs	r3, r3, #8
 8012c64:	b25b      	sxtb	r3, r3
 8012c66:	f003 030f 	and.w	r3, r3, #15
 8012c6a:	b25b      	sxtb	r3, r3
 8012c6c:	4313      	orrs	r3, r2
 8012c6e:	b25b      	sxtb	r3, r3
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	697a      	ldr	r2, [r7, #20]
 8012c74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2201      	movs	r2, #1
 8012c7a:	70da      	strb	r2, [r3, #3]
			break;
 8012c7c:	e057      	b.n	8012d2e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	6a1a      	ldr	r2, [r3, #32]
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	0a1b      	lsrs	r3, r3, #8
 8012c86:	4413      	add	r3, r2
 8012c88:	4619      	mov	r1, r3
 8012c8a:	68f8      	ldr	r0, [r7, #12]
 8012c8c:	f7ff fe09 	bl	80128a2 <move_window>
 8012c90:	4603      	mov	r3, r0
 8012c92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012c94:	7ffb      	ldrb	r3, [r7, #31]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d146      	bne.n	8012d28 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	005b      	lsls	r3, r3, #1
 8012ca4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8012ca8:	4413      	add	r3, r2
 8012caa:	687a      	ldr	r2, [r7, #4]
 8012cac:	b292      	uxth	r2, r2
 8012cae:	4611      	mov	r1, r2
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7ff fced 	bl	8012690 <st_word>
			fs->wflag = 1;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2201      	movs	r2, #1
 8012cba:	70da      	strb	r2, [r3, #3]
			break;
 8012cbc:	e037      	b.n	8012d2e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	6a1a      	ldr	r2, [r3, #32]
 8012cc2:	68bb      	ldr	r3, [r7, #8]
 8012cc4:	09db      	lsrs	r3, r3, #7
 8012cc6:	4413      	add	r3, r2
 8012cc8:	4619      	mov	r1, r3
 8012cca:	68f8      	ldr	r0, [r7, #12]
 8012ccc:	f7ff fde9 	bl	80128a2 <move_window>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012cd4:	7ffb      	ldrb	r3, [r7, #31]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d128      	bne.n	8012d2c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012ce6:	68bb      	ldr	r3, [r7, #8]
 8012ce8:	009b      	lsls	r3, r3, #2
 8012cea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012cee:	4413      	add	r3, r2
 8012cf0:	4618      	mov	r0, r3
 8012cf2:	f7ff fcaa 	bl	801264a <ld_dword>
 8012cf6:	4603      	mov	r3, r0
 8012cf8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012cfc:	4323      	orrs	r3, r4
 8012cfe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	009b      	lsls	r3, r3, #2
 8012d0a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012d0e:	4413      	add	r3, r2
 8012d10:	6879      	ldr	r1, [r7, #4]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7ff fcd7 	bl	80126c6 <st_dword>
			fs->wflag = 1;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	70da      	strb	r2, [r3, #3]
			break;
 8012d1e:	e006      	b.n	8012d2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d20:	bf00      	nop
 8012d22:	e004      	b.n	8012d2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d24:	bf00      	nop
 8012d26:	e002      	b.n	8012d2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d28:	bf00      	nop
 8012d2a:	e000      	b.n	8012d2e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8012d2c:	bf00      	nop
		}
	}
	return res;
 8012d2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012d30:	4618      	mov	r0, r3
 8012d32:	3724      	adds	r7, #36	@ 0x24
 8012d34:	46bd      	mov	sp, r7
 8012d36:	bd90      	pop	{r4, r7, pc}

08012d38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b088      	sub	sp, #32
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012d44:	2300      	movs	r3, #0
 8012d46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d4e:	68bb      	ldr	r3, [r7, #8]
 8012d50:	2b01      	cmp	r3, #1
 8012d52:	d904      	bls.n	8012d5e <remove_chain+0x26>
 8012d54:	69bb      	ldr	r3, [r7, #24]
 8012d56:	695b      	ldr	r3, [r3, #20]
 8012d58:	68ba      	ldr	r2, [r7, #8]
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	d301      	bcc.n	8012d62 <remove_chain+0x2a>
 8012d5e:	2302      	movs	r3, #2
 8012d60:	e04b      	b.n	8012dfa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d00c      	beq.n	8012d82 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012d68:	f04f 32ff 	mov.w	r2, #4294967295
 8012d6c:	6879      	ldr	r1, [r7, #4]
 8012d6e:	69b8      	ldr	r0, [r7, #24]
 8012d70:	f7ff fef8 	bl	8012b64 <put_fat>
 8012d74:	4603      	mov	r3, r0
 8012d76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012d78:	7ffb      	ldrb	r3, [r7, #31]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d001      	beq.n	8012d82 <remove_chain+0x4a>
 8012d7e:	7ffb      	ldrb	r3, [r7, #31]
 8012d80:	e03b      	b.n	8012dfa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012d82:	68b9      	ldr	r1, [r7, #8]
 8012d84:	68f8      	ldr	r0, [r7, #12]
 8012d86:	f7ff fe46 	bl	8012a16 <get_fat>
 8012d8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012d8c:	697b      	ldr	r3, [r7, #20]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d031      	beq.n	8012df6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d101      	bne.n	8012d9c <remove_chain+0x64>
 8012d98:	2302      	movs	r3, #2
 8012d9a:	e02e      	b.n	8012dfa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012d9c:	697b      	ldr	r3, [r7, #20]
 8012d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012da2:	d101      	bne.n	8012da8 <remove_chain+0x70>
 8012da4:	2301      	movs	r3, #1
 8012da6:	e028      	b.n	8012dfa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012da8:	2200      	movs	r2, #0
 8012daa:	68b9      	ldr	r1, [r7, #8]
 8012dac:	69b8      	ldr	r0, [r7, #24]
 8012dae:	f7ff fed9 	bl	8012b64 <put_fat>
 8012db2:	4603      	mov	r3, r0
 8012db4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012db6:	7ffb      	ldrb	r3, [r7, #31]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d001      	beq.n	8012dc0 <remove_chain+0x88>
 8012dbc:	7ffb      	ldrb	r3, [r7, #31]
 8012dbe:	e01c      	b.n	8012dfa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012dc0:	69bb      	ldr	r3, [r7, #24]
 8012dc2:	691a      	ldr	r2, [r3, #16]
 8012dc4:	69bb      	ldr	r3, [r7, #24]
 8012dc6:	695b      	ldr	r3, [r3, #20]
 8012dc8:	3b02      	subs	r3, #2
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d20b      	bcs.n	8012de6 <remove_chain+0xae>
			fs->free_clst++;
 8012dce:	69bb      	ldr	r3, [r7, #24]
 8012dd0:	691b      	ldr	r3, [r3, #16]
 8012dd2:	1c5a      	adds	r2, r3, #1
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8012dd8:	69bb      	ldr	r3, [r7, #24]
 8012dda:	791b      	ldrb	r3, [r3, #4]
 8012ddc:	f043 0301 	orr.w	r3, r3, #1
 8012de0:	b2da      	uxtb	r2, r3
 8012de2:	69bb      	ldr	r3, [r7, #24]
 8012de4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012dea:	69bb      	ldr	r3, [r7, #24]
 8012dec:	695b      	ldr	r3, [r3, #20]
 8012dee:	68ba      	ldr	r2, [r7, #8]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d3c6      	bcc.n	8012d82 <remove_chain+0x4a>
 8012df4:	e000      	b.n	8012df8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012df6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012df8:	2300      	movs	r3, #0
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	3720      	adds	r7, #32
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b088      	sub	sp, #32
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
 8012e0a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d10d      	bne.n	8012e34 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	68db      	ldr	r3, [r3, #12]
 8012e1c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012e1e:	69bb      	ldr	r3, [r7, #24]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d004      	beq.n	8012e2e <create_chain+0x2c>
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	695b      	ldr	r3, [r3, #20]
 8012e28:	69ba      	ldr	r2, [r7, #24]
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	d31b      	bcc.n	8012e66 <create_chain+0x64>
 8012e2e:	2301      	movs	r3, #1
 8012e30:	61bb      	str	r3, [r7, #24]
 8012e32:	e018      	b.n	8012e66 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012e34:	6839      	ldr	r1, [r7, #0]
 8012e36:	6878      	ldr	r0, [r7, #4]
 8012e38:	f7ff fded 	bl	8012a16 <get_fat>
 8012e3c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d801      	bhi.n	8012e48 <create_chain+0x46>
 8012e44:	2301      	movs	r3, #1
 8012e46:	e070      	b.n	8012f2a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e4e:	d101      	bne.n	8012e54 <create_chain+0x52>
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	e06a      	b.n	8012f2a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	695b      	ldr	r3, [r3, #20]
 8012e58:	68fa      	ldr	r2, [r7, #12]
 8012e5a:	429a      	cmp	r2, r3
 8012e5c:	d201      	bcs.n	8012e62 <create_chain+0x60>
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	e063      	b.n	8012f2a <create_chain+0x128>
		scl = clst;
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012e66:	69bb      	ldr	r3, [r7, #24]
 8012e68:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012e6a:	69fb      	ldr	r3, [r7, #28]
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	695b      	ldr	r3, [r3, #20]
 8012e74:	69fa      	ldr	r2, [r7, #28]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d307      	bcc.n	8012e8a <create_chain+0x88>
				ncl = 2;
 8012e7a:	2302      	movs	r3, #2
 8012e7c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012e7e:	69fa      	ldr	r2, [r7, #28]
 8012e80:	69bb      	ldr	r3, [r7, #24]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d901      	bls.n	8012e8a <create_chain+0x88>
 8012e86:	2300      	movs	r3, #0
 8012e88:	e04f      	b.n	8012f2a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012e8a:	69f9      	ldr	r1, [r7, #28]
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7ff fdc2 	bl	8012a16 <get_fat>
 8012e92:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d00e      	beq.n	8012eb8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2b01      	cmp	r3, #1
 8012e9e:	d003      	beq.n	8012ea8 <create_chain+0xa6>
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ea6:	d101      	bne.n	8012eac <create_chain+0xaa>
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	e03e      	b.n	8012f2a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012eac:	69fa      	ldr	r2, [r7, #28]
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	429a      	cmp	r2, r3
 8012eb2:	d1da      	bne.n	8012e6a <create_chain+0x68>
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	e038      	b.n	8012f2a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012eb8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012eba:	f04f 32ff 	mov.w	r2, #4294967295
 8012ebe:	69f9      	ldr	r1, [r7, #28]
 8012ec0:	6938      	ldr	r0, [r7, #16]
 8012ec2:	f7ff fe4f 	bl	8012b64 <put_fat>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012eca:	7dfb      	ldrb	r3, [r7, #23]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d109      	bne.n	8012ee4 <create_chain+0xe2>
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d006      	beq.n	8012ee4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012ed6:	69fa      	ldr	r2, [r7, #28]
 8012ed8:	6839      	ldr	r1, [r7, #0]
 8012eda:	6938      	ldr	r0, [r7, #16]
 8012edc:	f7ff fe42 	bl	8012b64 <put_fat>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012ee4:	7dfb      	ldrb	r3, [r7, #23]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d116      	bne.n	8012f18 <create_chain+0x116>
		fs->last_clst = ncl;
 8012eea:	693b      	ldr	r3, [r7, #16]
 8012eec:	69fa      	ldr	r2, [r7, #28]
 8012eee:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012ef0:	693b      	ldr	r3, [r7, #16]
 8012ef2:	691a      	ldr	r2, [r3, #16]
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	695b      	ldr	r3, [r3, #20]
 8012ef8:	3b02      	subs	r3, #2
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d804      	bhi.n	8012f08 <create_chain+0x106>
 8012efe:	693b      	ldr	r3, [r7, #16]
 8012f00:	691b      	ldr	r3, [r3, #16]
 8012f02:	1e5a      	subs	r2, r3, #1
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	791b      	ldrb	r3, [r3, #4]
 8012f0c:	f043 0301 	orr.w	r3, r3, #1
 8012f10:	b2da      	uxtb	r2, r3
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	711a      	strb	r2, [r3, #4]
 8012f16:	e007      	b.n	8012f28 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012f18:	7dfb      	ldrb	r3, [r7, #23]
 8012f1a:	2b01      	cmp	r3, #1
 8012f1c:	d102      	bne.n	8012f24 <create_chain+0x122>
 8012f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012f22:	e000      	b.n	8012f26 <create_chain+0x124>
 8012f24:	2301      	movs	r3, #1
 8012f26:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012f28:	69fb      	ldr	r3, [r7, #28]
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3720      	adds	r7, #32
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}

08012f32 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012f32:	b480      	push	{r7}
 8012f34:	b087      	sub	sp, #28
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	6078      	str	r0, [r7, #4]
 8012f3a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f46:	3304      	adds	r3, #4
 8012f48:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	0a5b      	lsrs	r3, r3, #9
 8012f4e:	68fa      	ldr	r2, [r7, #12]
 8012f50:	8952      	ldrh	r2, [r2, #10]
 8012f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f56:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	1d1a      	adds	r2, r3, #4
 8012f5c:	613a      	str	r2, [r7, #16]
 8012f5e:	681b      	ldr	r3, [r3, #0]
 8012f60:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d101      	bne.n	8012f6c <clmt_clust+0x3a>
 8012f68:	2300      	movs	r3, #0
 8012f6a:	e010      	b.n	8012f8e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8012f6c:	697a      	ldr	r2, [r7, #20]
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d307      	bcc.n	8012f84 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8012f74:	697a      	ldr	r2, [r7, #20]
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	1ad3      	subs	r3, r2, r3
 8012f7a:	617b      	str	r3, [r7, #20]
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	3304      	adds	r3, #4
 8012f80:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012f82:	e7e9      	b.n	8012f58 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012f84:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	681a      	ldr	r2, [r3, #0]
 8012f8a:	697b      	ldr	r3, [r7, #20]
 8012f8c:	4413      	add	r3, r2
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	371c      	adds	r7, #28
 8012f92:	46bd      	mov	sp, r7
 8012f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f98:	4770      	bx	lr

08012f9a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b086      	sub	sp, #24
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
 8012fa2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012faa:	683b      	ldr	r3, [r7, #0]
 8012fac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012fb0:	d204      	bcs.n	8012fbc <dir_sdi+0x22>
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	f003 031f 	and.w	r3, r3, #31
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d001      	beq.n	8012fc0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012fbc:	2302      	movs	r3, #2
 8012fbe:	e063      	b.n	8013088 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	683a      	ldr	r2, [r7, #0]
 8012fc4:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	689b      	ldr	r3, [r3, #8]
 8012fca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d106      	bne.n	8012fe0 <dir_sdi+0x46>
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	2b02      	cmp	r3, #2
 8012fd8:	d902      	bls.n	8012fe0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fde:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012fe0:	697b      	ldr	r3, [r7, #20]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d10c      	bne.n	8013000 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	095b      	lsrs	r3, r3, #5
 8012fea:	693a      	ldr	r2, [r7, #16]
 8012fec:	8912      	ldrh	r2, [r2, #8]
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d301      	bcc.n	8012ff6 <dir_sdi+0x5c>
 8012ff2:	2302      	movs	r3, #2
 8012ff4:	e048      	b.n	8013088 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	619a      	str	r2, [r3, #24]
 8012ffe:	e029      	b.n	8013054 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	895b      	ldrh	r3, [r3, #10]
 8013004:	025b      	lsls	r3, r3, #9
 8013006:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013008:	e019      	b.n	801303e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6979      	ldr	r1, [r7, #20]
 801300e:	4618      	mov	r0, r3
 8013010:	f7ff fd01 	bl	8012a16 <get_fat>
 8013014:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801301c:	d101      	bne.n	8013022 <dir_sdi+0x88>
 801301e:	2301      	movs	r3, #1
 8013020:	e032      	b.n	8013088 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d904      	bls.n	8013032 <dir_sdi+0x98>
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	695b      	ldr	r3, [r3, #20]
 801302c:	697a      	ldr	r2, [r7, #20]
 801302e:	429a      	cmp	r2, r3
 8013030:	d301      	bcc.n	8013036 <dir_sdi+0x9c>
 8013032:	2302      	movs	r3, #2
 8013034:	e028      	b.n	8013088 <dir_sdi+0xee>
			ofs -= csz;
 8013036:	683a      	ldr	r2, [r7, #0]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	1ad3      	subs	r3, r2, r3
 801303c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801303e:	683a      	ldr	r2, [r7, #0]
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	429a      	cmp	r2, r3
 8013044:	d2e1      	bcs.n	801300a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013046:	6979      	ldr	r1, [r7, #20]
 8013048:	6938      	ldr	r0, [r7, #16]
 801304a:	f7ff fcc5 	bl	80129d8 <clust2sect>
 801304e:	4602      	mov	r2, r0
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	697a      	ldr	r2, [r7, #20]
 8013058:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	699b      	ldr	r3, [r3, #24]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d101      	bne.n	8013066 <dir_sdi+0xcc>
 8013062:	2302      	movs	r3, #2
 8013064:	e010      	b.n	8013088 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	699a      	ldr	r2, [r3, #24]
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	0a5b      	lsrs	r3, r3, #9
 801306e:	441a      	add	r2, r3
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013080:	441a      	add	r2, r3
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8013086:	2300      	movs	r3, #0
}
 8013088:	4618      	mov	r0, r3
 801308a:	3718      	adds	r7, #24
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}

08013090 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	691b      	ldr	r3, [r3, #16]
 80130a4:	3320      	adds	r3, #32
 80130a6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	699b      	ldr	r3, [r3, #24]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d003      	beq.n	80130b8 <dir_next+0x28>
 80130b0:	68bb      	ldr	r3, [r7, #8]
 80130b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80130b6:	d301      	bcc.n	80130bc <dir_next+0x2c>
 80130b8:	2304      	movs	r3, #4
 80130ba:	e0aa      	b.n	8013212 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f040 8098 	bne.w	80131f8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	699b      	ldr	r3, [r3, #24]
 80130cc:	1c5a      	adds	r2, r3, #1
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	695b      	ldr	r3, [r3, #20]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d10b      	bne.n	80130f2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	095b      	lsrs	r3, r3, #5
 80130de:	68fa      	ldr	r2, [r7, #12]
 80130e0:	8912      	ldrh	r2, [r2, #8]
 80130e2:	4293      	cmp	r3, r2
 80130e4:	f0c0 8088 	bcc.w	80131f8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2200      	movs	r2, #0
 80130ec:	619a      	str	r2, [r3, #24]
 80130ee:	2304      	movs	r3, #4
 80130f0:	e08f      	b.n	8013212 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	0a5b      	lsrs	r3, r3, #9
 80130f6:	68fa      	ldr	r2, [r7, #12]
 80130f8:	8952      	ldrh	r2, [r2, #10]
 80130fa:	3a01      	subs	r2, #1
 80130fc:	4013      	ands	r3, r2
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d17a      	bne.n	80131f8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013102:	687a      	ldr	r2, [r7, #4]
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	695b      	ldr	r3, [r3, #20]
 8013108:	4619      	mov	r1, r3
 801310a:	4610      	mov	r0, r2
 801310c:	f7ff fc83 	bl	8012a16 <get_fat>
 8013110:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	2b01      	cmp	r3, #1
 8013116:	d801      	bhi.n	801311c <dir_next+0x8c>
 8013118:	2302      	movs	r3, #2
 801311a:	e07a      	b.n	8013212 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013122:	d101      	bne.n	8013128 <dir_next+0x98>
 8013124:	2301      	movs	r3, #1
 8013126:	e074      	b.n	8013212 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	695b      	ldr	r3, [r3, #20]
 801312c:	697a      	ldr	r2, [r7, #20]
 801312e:	429a      	cmp	r2, r3
 8013130:	d358      	bcc.n	80131e4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	2b00      	cmp	r3, #0
 8013136:	d104      	bne.n	8013142 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2200      	movs	r2, #0
 801313c:	619a      	str	r2, [r3, #24]
 801313e:	2304      	movs	r3, #4
 8013140:	e067      	b.n	8013212 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	695b      	ldr	r3, [r3, #20]
 8013148:	4619      	mov	r1, r3
 801314a:	4610      	mov	r0, r2
 801314c:	f7ff fe59 	bl	8012e02 <create_chain>
 8013150:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d101      	bne.n	801315c <dir_next+0xcc>
 8013158:	2307      	movs	r3, #7
 801315a:	e05a      	b.n	8013212 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	2b01      	cmp	r3, #1
 8013160:	d101      	bne.n	8013166 <dir_next+0xd6>
 8013162:	2302      	movs	r3, #2
 8013164:	e055      	b.n	8013212 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013166:	697b      	ldr	r3, [r7, #20]
 8013168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801316c:	d101      	bne.n	8013172 <dir_next+0xe2>
 801316e:	2301      	movs	r3, #1
 8013170:	e04f      	b.n	8013212 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013172:	68f8      	ldr	r0, [r7, #12]
 8013174:	f7ff fb51 	bl	801281a <sync_window>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <dir_next+0xf2>
 801317e:	2301      	movs	r3, #1
 8013180:	e047      	b.n	8013212 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	3330      	adds	r3, #48	@ 0x30
 8013186:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801318a:	2100      	movs	r1, #0
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff fae7 	bl	8012760 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013192:	2300      	movs	r3, #0
 8013194:	613b      	str	r3, [r7, #16]
 8013196:	6979      	ldr	r1, [r7, #20]
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f7ff fc1d 	bl	80129d8 <clust2sect>
 801319e:	4602      	mov	r2, r0
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80131a4:	e012      	b.n	80131cc <dir_next+0x13c>
						fs->wflag = 1;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2201      	movs	r2, #1
 80131aa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f7ff fb34 	bl	801281a <sync_window>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d001      	beq.n	80131bc <dir_next+0x12c>
 80131b8:	2301      	movs	r3, #1
 80131ba:	e02a      	b.n	8013212 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	3301      	adds	r3, #1
 80131c0:	613b      	str	r3, [r7, #16]
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131c6:	1c5a      	adds	r2, r3, #1
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	895b      	ldrh	r3, [r3, #10]
 80131d0:	461a      	mov	r2, r3
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d3e6      	bcc.n	80131a6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	1ad2      	subs	r2, r2, r3
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	697a      	ldr	r2, [r7, #20]
 80131e8:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 80131ea:	6979      	ldr	r1, [r7, #20]
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f7ff fbf3 	bl	80129d8 <clust2sect>
 80131f2:	4602      	mov	r2, r0
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801320a:	441a      	add	r2, r3
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8013210:	2300      	movs	r3, #0
}
 8013212:	4618      	mov	r0, r3
 8013214:	3718      	adds	r7, #24
 8013216:	46bd      	mov	sp, r7
 8013218:	bd80      	pop	{r7, pc}

0801321a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801321a:	b580      	push	{r7, lr}
 801321c:	b086      	sub	sp, #24
 801321e:	af00      	add	r7, sp, #0
 8013220:	6078      	str	r0, [r7, #4]
 8013222:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801322a:	2100      	movs	r1, #0
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f7ff feb4 	bl	8012f9a <dir_sdi>
 8013232:	4603      	mov	r3, r0
 8013234:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013236:	7dfb      	ldrb	r3, [r7, #23]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d12b      	bne.n	8013294 <dir_alloc+0x7a>
		n = 0;
 801323c:	2300      	movs	r3, #0
 801323e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	699b      	ldr	r3, [r3, #24]
 8013244:	4619      	mov	r1, r3
 8013246:	68f8      	ldr	r0, [r7, #12]
 8013248:	f7ff fb2b 	bl	80128a2 <move_window>
 801324c:	4603      	mov	r3, r0
 801324e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013250:	7dfb      	ldrb	r3, [r7, #23]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d11d      	bne.n	8013292 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	69db      	ldr	r3, [r3, #28]
 801325a:	781b      	ldrb	r3, [r3, #0]
 801325c:	2be5      	cmp	r3, #229	@ 0xe5
 801325e:	d004      	beq.n	801326a <dir_alloc+0x50>
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	69db      	ldr	r3, [r3, #28]
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d107      	bne.n	801327a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	3301      	adds	r3, #1
 801326e:	613b      	str	r3, [r7, #16]
 8013270:	693a      	ldr	r2, [r7, #16]
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	429a      	cmp	r2, r3
 8013276:	d102      	bne.n	801327e <dir_alloc+0x64>
 8013278:	e00c      	b.n	8013294 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801327a:	2300      	movs	r3, #0
 801327c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801327e:	2101      	movs	r1, #1
 8013280:	6878      	ldr	r0, [r7, #4]
 8013282:	f7ff ff05 	bl	8013090 <dir_next>
 8013286:	4603      	mov	r3, r0
 8013288:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801328a:	7dfb      	ldrb	r3, [r7, #23]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d0d7      	beq.n	8013240 <dir_alloc+0x26>
 8013290:	e000      	b.n	8013294 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013292:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013294:	7dfb      	ldrb	r3, [r7, #23]
 8013296:	2b04      	cmp	r3, #4
 8013298:	d101      	bne.n	801329e <dir_alloc+0x84>
 801329a:	2307      	movs	r3, #7
 801329c:	75fb      	strb	r3, [r7, #23]
	return res;
 801329e:	7dfb      	ldrb	r3, [r7, #23]
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3718      	adds	r7, #24
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}

080132a8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b084      	sub	sp, #16
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
 80132b0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80132b2:	683b      	ldr	r3, [r7, #0]
 80132b4:	331a      	adds	r3, #26
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7ff f9ae 	bl	8012618 <ld_word>
 80132bc:	4603      	mov	r3, r0
 80132be:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	2b03      	cmp	r3, #3
 80132c6:	d109      	bne.n	80132dc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	3314      	adds	r3, #20
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7ff f9a3 	bl	8012618 <ld_word>
 80132d2:	4603      	mov	r3, r0
 80132d4:	041b      	lsls	r3, r3, #16
 80132d6:	68fa      	ldr	r2, [r7, #12]
 80132d8:	4313      	orrs	r3, r2
 80132da:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80132dc:	68fb      	ldr	r3, [r7, #12]
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3710      	adds	r7, #16
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}

080132e6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b084      	sub	sp, #16
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	60f8      	str	r0, [r7, #12]
 80132ee:	60b9      	str	r1, [r7, #8]
 80132f0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	331a      	adds	r3, #26
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	b292      	uxth	r2, r2
 80132fa:	4611      	mov	r1, r2
 80132fc:	4618      	mov	r0, r3
 80132fe:	f7ff f9c7 	bl	8012690 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	781b      	ldrb	r3, [r3, #0]
 8013306:	2b03      	cmp	r3, #3
 8013308:	d109      	bne.n	801331e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	f103 0214 	add.w	r2, r3, #20
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	0c1b      	lsrs	r3, r3, #16
 8013314:	b29b      	uxth	r3, r3
 8013316:	4619      	mov	r1, r3
 8013318:	4610      	mov	r0, r2
 801331a:	f7ff f9b9 	bl	8012690 <st_word>
	}
}
 801331e:	bf00      	nop
 8013320:	3710      	adds	r7, #16
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}

08013326 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013326:	b580      	push	{r7, lr}
 8013328:	b086      	sub	sp, #24
 801332a:	af00      	add	r7, sp, #0
 801332c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013334:	2100      	movs	r1, #0
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f7ff fe2f 	bl	8012f9a <dir_sdi>
 801333c:	4603      	mov	r3, r0
 801333e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013340:	7dfb      	ldrb	r3, [r7, #23]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d001      	beq.n	801334a <dir_find+0x24>
 8013346:	7dfb      	ldrb	r3, [r7, #23]
 8013348:	e03e      	b.n	80133c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	699b      	ldr	r3, [r3, #24]
 801334e:	4619      	mov	r1, r3
 8013350:	6938      	ldr	r0, [r7, #16]
 8013352:	f7ff faa6 	bl	80128a2 <move_window>
 8013356:	4603      	mov	r3, r0
 8013358:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801335a:	7dfb      	ldrb	r3, [r7, #23]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d12f      	bne.n	80133c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	69db      	ldr	r3, [r3, #28]
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013368:	7bfb      	ldrb	r3, [r7, #15]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d102      	bne.n	8013374 <dir_find+0x4e>
 801336e:	2304      	movs	r3, #4
 8013370:	75fb      	strb	r3, [r7, #23]
 8013372:	e028      	b.n	80133c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	69db      	ldr	r3, [r3, #28]
 8013378:	330b      	adds	r3, #11
 801337a:	781b      	ldrb	r3, [r3, #0]
 801337c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013380:	b2da      	uxtb	r2, r3
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	69db      	ldr	r3, [r3, #28]
 801338a:	330b      	adds	r3, #11
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	f003 0308 	and.w	r3, r3, #8
 8013392:	2b00      	cmp	r3, #0
 8013394:	d10a      	bne.n	80133ac <dir_find+0x86>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	69d8      	ldr	r0, [r3, #28]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	3320      	adds	r3, #32
 801339e:	220b      	movs	r2, #11
 80133a0:	4619      	mov	r1, r3
 80133a2:	f7ff f9f8 	bl	8012796 <mem_cmp>
 80133a6:	4603      	mov	r3, r0
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00b      	beq.n	80133c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80133ac:	2100      	movs	r1, #0
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f7ff fe6e 	bl	8013090 <dir_next>
 80133b4:	4603      	mov	r3, r0
 80133b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80133b8:	7dfb      	ldrb	r3, [r7, #23]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d0c5      	beq.n	801334a <dir_find+0x24>
 80133be:	e002      	b.n	80133c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80133c0:	bf00      	nop
 80133c2:	e000      	b.n	80133c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80133c4:	bf00      	nop

	return res;
 80133c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	3718      	adds	r7, #24
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b084      	sub	sp, #16
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80133de:	2101      	movs	r1, #1
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7ff ff1a 	bl	801321a <dir_alloc>
 80133e6:	4603      	mov	r3, r0
 80133e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80133ea:	7bfb      	ldrb	r3, [r7, #15]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d11c      	bne.n	801342a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	699b      	ldr	r3, [r3, #24]
 80133f4:	4619      	mov	r1, r3
 80133f6:	68b8      	ldr	r0, [r7, #8]
 80133f8:	f7ff fa53 	bl	80128a2 <move_window>
 80133fc:	4603      	mov	r3, r0
 80133fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013400:	7bfb      	ldrb	r3, [r7, #15]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d111      	bne.n	801342a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	69db      	ldr	r3, [r3, #28]
 801340a:	2220      	movs	r2, #32
 801340c:	2100      	movs	r1, #0
 801340e:	4618      	mov	r0, r3
 8013410:	f7ff f9a6 	bl	8012760 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	69d8      	ldr	r0, [r3, #28]
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3320      	adds	r3, #32
 801341c:	220b      	movs	r2, #11
 801341e:	4619      	mov	r1, r3
 8013420:	f7ff f97d 	bl	801271e <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013424:	68bb      	ldr	r3, [r7, #8]
 8013426:	2201      	movs	r2, #1
 8013428:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801342a:	7bfb      	ldrb	r3, [r7, #15]
}
 801342c:	4618      	mov	r0, r3
 801342e:	3710      	adds	r7, #16
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}

08013434 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b088      	sub	sp, #32
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
 801343c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	60fb      	str	r3, [r7, #12]
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	3320      	adds	r3, #32
 8013448:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801344a:	220b      	movs	r2, #11
 801344c:	2120      	movs	r1, #32
 801344e:	68b8      	ldr	r0, [r7, #8]
 8013450:	f7ff f986 	bl	8012760 <mem_set>
	si = i = 0; ni = 8;
 8013454:	2300      	movs	r3, #0
 8013456:	613b      	str	r3, [r7, #16]
 8013458:	693b      	ldr	r3, [r7, #16]
 801345a:	61fb      	str	r3, [r7, #28]
 801345c:	2308      	movs	r3, #8
 801345e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	1c5a      	adds	r2, r3, #1
 8013464:	61fa      	str	r2, [r7, #28]
 8013466:	68fa      	ldr	r2, [r7, #12]
 8013468:	4413      	add	r3, r2
 801346a:	781b      	ldrb	r3, [r3, #0]
 801346c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801346e:	7efb      	ldrb	r3, [r7, #27]
 8013470:	2b20      	cmp	r3, #32
 8013472:	d94e      	bls.n	8013512 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8013474:	7efb      	ldrb	r3, [r7, #27]
 8013476:	2b2f      	cmp	r3, #47	@ 0x2f
 8013478:	d006      	beq.n	8013488 <create_name+0x54>
 801347a:	7efb      	ldrb	r3, [r7, #27]
 801347c:	2b5c      	cmp	r3, #92	@ 0x5c
 801347e:	d110      	bne.n	80134a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013480:	e002      	b.n	8013488 <create_name+0x54>
 8013482:	69fb      	ldr	r3, [r7, #28]
 8013484:	3301      	adds	r3, #1
 8013486:	61fb      	str	r3, [r7, #28]
 8013488:	68fa      	ldr	r2, [r7, #12]
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	4413      	add	r3, r2
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	2b2f      	cmp	r3, #47	@ 0x2f
 8013492:	d0f6      	beq.n	8013482 <create_name+0x4e>
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	69fb      	ldr	r3, [r7, #28]
 8013498:	4413      	add	r3, r2
 801349a:	781b      	ldrb	r3, [r3, #0]
 801349c:	2b5c      	cmp	r3, #92	@ 0x5c
 801349e:	d0f0      	beq.n	8013482 <create_name+0x4e>
			break;
 80134a0:	e038      	b.n	8013514 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80134a2:	7efb      	ldrb	r3, [r7, #27]
 80134a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80134a6:	d003      	beq.n	80134b0 <create_name+0x7c>
 80134a8:	693a      	ldr	r2, [r7, #16]
 80134aa:	697b      	ldr	r3, [r7, #20]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d30c      	bcc.n	80134ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80134b0:	697b      	ldr	r3, [r7, #20]
 80134b2:	2b0b      	cmp	r3, #11
 80134b4:	d002      	beq.n	80134bc <create_name+0x88>
 80134b6:	7efb      	ldrb	r3, [r7, #27]
 80134b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80134ba:	d001      	beq.n	80134c0 <create_name+0x8c>
 80134bc:	2306      	movs	r3, #6
 80134be:	e044      	b.n	801354a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80134c0:	2308      	movs	r3, #8
 80134c2:	613b      	str	r3, [r7, #16]
 80134c4:	230b      	movs	r3, #11
 80134c6:	617b      	str	r3, [r7, #20]
			continue;
 80134c8:	e022      	b.n	8013510 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80134ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	da04      	bge.n	80134dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80134d2:	7efb      	ldrb	r3, [r7, #27]
 80134d4:	3b80      	subs	r3, #128	@ 0x80
 80134d6:	4a1f      	ldr	r2, [pc, #124]	@ (8013554 <create_name+0x120>)
 80134d8:	5cd3      	ldrb	r3, [r2, r3]
 80134da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80134dc:	7efb      	ldrb	r3, [r7, #27]
 80134de:	4619      	mov	r1, r3
 80134e0:	481d      	ldr	r0, [pc, #116]	@ (8013558 <create_name+0x124>)
 80134e2:	f7ff f97f 	bl	80127e4 <chk_chr>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d001      	beq.n	80134f0 <create_name+0xbc>
 80134ec:	2306      	movs	r3, #6
 80134ee:	e02c      	b.n	801354a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80134f0:	7efb      	ldrb	r3, [r7, #27]
 80134f2:	2b60      	cmp	r3, #96	@ 0x60
 80134f4:	d905      	bls.n	8013502 <create_name+0xce>
 80134f6:	7efb      	ldrb	r3, [r7, #27]
 80134f8:	2b7a      	cmp	r3, #122	@ 0x7a
 80134fa:	d802      	bhi.n	8013502 <create_name+0xce>
 80134fc:	7efb      	ldrb	r3, [r7, #27]
 80134fe:	3b20      	subs	r3, #32
 8013500:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	1c5a      	adds	r2, r3, #1
 8013506:	613a      	str	r2, [r7, #16]
 8013508:	68ba      	ldr	r2, [r7, #8]
 801350a:	4413      	add	r3, r2
 801350c:	7efa      	ldrb	r2, [r7, #27]
 801350e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8013510:	e7a6      	b.n	8013460 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8013512:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8013514:	68fa      	ldr	r2, [r7, #12]
 8013516:	69fb      	ldr	r3, [r7, #28]
 8013518:	441a      	add	r2, r3
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d101      	bne.n	8013528 <create_name+0xf4>
 8013524:	2306      	movs	r3, #6
 8013526:	e010      	b.n	801354a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	781b      	ldrb	r3, [r3, #0]
 801352c:	2be5      	cmp	r3, #229	@ 0xe5
 801352e:	d102      	bne.n	8013536 <create_name+0x102>
 8013530:	68bb      	ldr	r3, [r7, #8]
 8013532:	2205      	movs	r2, #5
 8013534:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013536:	7efb      	ldrb	r3, [r7, #27]
 8013538:	2b20      	cmp	r3, #32
 801353a:	d801      	bhi.n	8013540 <create_name+0x10c>
 801353c:	2204      	movs	r2, #4
 801353e:	e000      	b.n	8013542 <create_name+0x10e>
 8013540:	2200      	movs	r2, #0
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	330b      	adds	r3, #11
 8013546:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8013548:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801354a:	4618      	mov	r0, r3
 801354c:	3720      	adds	r7, #32
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	0801ca28 	.word	0x0801ca28
 8013558:	0801c99c 	.word	0x0801c99c

0801355c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b086      	sub	sp, #24
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
 8013564:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013570:	e002      	b.n	8013578 <follow_path+0x1c>
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	3301      	adds	r3, #1
 8013576:	603b      	str	r3, [r7, #0]
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	2b2f      	cmp	r3, #47	@ 0x2f
 801357e:	d0f8      	beq.n	8013572 <follow_path+0x16>
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	781b      	ldrb	r3, [r3, #0]
 8013584:	2b5c      	cmp	r3, #92	@ 0x5c
 8013586:	d0f4      	beq.n	8013572 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	2200      	movs	r2, #0
 801358c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	781b      	ldrb	r3, [r3, #0]
 8013592:	2b1f      	cmp	r3, #31
 8013594:	d80a      	bhi.n	80135ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2280      	movs	r2, #128	@ 0x80
 801359a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		res = dir_sdi(dp, 0);
 801359e:	2100      	movs	r1, #0
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f7ff fcfa 	bl	8012f9a <dir_sdi>
 80135a6:	4603      	mov	r3, r0
 80135a8:	75fb      	strb	r3, [r7, #23]
 80135aa:	e043      	b.n	8013634 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80135ac:	463b      	mov	r3, r7
 80135ae:	4619      	mov	r1, r3
 80135b0:	6878      	ldr	r0, [r7, #4]
 80135b2:	f7ff ff3f 	bl	8013434 <create_name>
 80135b6:	4603      	mov	r3, r0
 80135b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80135ba:	7dfb      	ldrb	r3, [r7, #23]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d134      	bne.n	801362a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80135c0:	6878      	ldr	r0, [r7, #4]
 80135c2:	f7ff feb0 	bl	8013326 <dir_find>
 80135c6:	4603      	mov	r3, r0
 80135c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80135d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80135d2:	7dfb      	ldrb	r3, [r7, #23]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d00a      	beq.n	80135ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80135d8:	7dfb      	ldrb	r3, [r7, #23]
 80135da:	2b04      	cmp	r3, #4
 80135dc:	d127      	bne.n	801362e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80135de:	7afb      	ldrb	r3, [r7, #11]
 80135e0:	f003 0304 	and.w	r3, r3, #4
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d122      	bne.n	801362e <follow_path+0xd2>
 80135e8:	2305      	movs	r3, #5
 80135ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80135ec:	e01f      	b.n	801362e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135ee:	7afb      	ldrb	r3, [r7, #11]
 80135f0:	f003 0304 	and.w	r3, r3, #4
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d11c      	bne.n	8013632 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80135f8:	693b      	ldr	r3, [r7, #16]
 80135fa:	799b      	ldrb	r3, [r3, #6]
 80135fc:	f003 0310 	and.w	r3, r3, #16
 8013600:	2b00      	cmp	r3, #0
 8013602:	d102      	bne.n	801360a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013604:	2305      	movs	r3, #5
 8013606:	75fb      	strb	r3, [r7, #23]
 8013608:	e014      	b.n	8013634 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	691b      	ldr	r3, [r3, #16]
 8013614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013618:	4413      	add	r3, r2
 801361a:	4619      	mov	r1, r3
 801361c:	68f8      	ldr	r0, [r7, #12]
 801361e:	f7ff fe43 	bl	80132a8 <ld_clust>
 8013622:	4602      	mov	r2, r0
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013628:	e7c0      	b.n	80135ac <follow_path+0x50>
			if (res != FR_OK) break;
 801362a:	bf00      	nop
 801362c:	e002      	b.n	8013634 <follow_path+0xd8>
				break;
 801362e:	bf00      	nop
 8013630:	e000      	b.n	8013634 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013632:	bf00      	nop
			}
		}
	}

	return res;
 8013634:	7dfb      	ldrb	r3, [r7, #23]
}
 8013636:	4618      	mov	r0, r3
 8013638:	3718      	adds	r7, #24
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}

0801363e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801363e:	b480      	push	{r7}
 8013640:	b087      	sub	sp, #28
 8013642:	af00      	add	r7, sp, #0
 8013644:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013646:	f04f 33ff 	mov.w	r3, #4294967295
 801364a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d031      	beq.n	80136b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	617b      	str	r3, [r7, #20]
 801365a:	e002      	b.n	8013662 <get_ldnumber+0x24>
 801365c:	697b      	ldr	r3, [r7, #20]
 801365e:	3301      	adds	r3, #1
 8013660:	617b      	str	r3, [r7, #20]
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	2b20      	cmp	r3, #32
 8013668:	d903      	bls.n	8013672 <get_ldnumber+0x34>
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	781b      	ldrb	r3, [r3, #0]
 801366e:	2b3a      	cmp	r3, #58	@ 0x3a
 8013670:	d1f4      	bne.n	801365c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	781b      	ldrb	r3, [r3, #0]
 8013676:	2b3a      	cmp	r3, #58	@ 0x3a
 8013678:	d11c      	bne.n	80136b4 <get_ldnumber+0x76>
			tp = *path;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	1c5a      	adds	r2, r3, #1
 8013684:	60fa      	str	r2, [r7, #12]
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	3b30      	subs	r3, #48	@ 0x30
 801368a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	2b09      	cmp	r3, #9
 8013690:	d80e      	bhi.n	80136b0 <get_ldnumber+0x72>
 8013692:	68fa      	ldr	r2, [r7, #12]
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	429a      	cmp	r2, r3
 8013698:	d10a      	bne.n	80136b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d107      	bne.n	80136b0 <get_ldnumber+0x72>
					vol = (int)i;
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	3301      	adds	r3, #1
 80136a8:	617b      	str	r3, [r7, #20]
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	697a      	ldr	r2, [r7, #20]
 80136ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	e002      	b.n	80136ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80136b4:	2300      	movs	r3, #0
 80136b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80136b8:	693b      	ldr	r3, [r7, #16]
}
 80136ba:	4618      	mov	r0, r3
 80136bc:	371c      	adds	r7, #28
 80136be:	46bd      	mov	sp, r7
 80136c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c4:	4770      	bx	lr
	...

080136c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	2200      	movs	r2, #0
 80136d6:	70da      	strb	r2, [r3, #3]
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f04f 32ff 	mov.w	r2, #4294967295
 80136de:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80136e0:	6839      	ldr	r1, [r7, #0]
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7ff f8dd 	bl	80128a2 <move_window>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d001      	beq.n	80136f2 <check_fs+0x2a>
 80136ee:	2304      	movs	r3, #4
 80136f0:	e038      	b.n	8013764 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	3330      	adds	r3, #48	@ 0x30
 80136f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7fe ff8c 	bl	8012618 <ld_word>
 8013700:	4603      	mov	r3, r0
 8013702:	461a      	mov	r2, r3
 8013704:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013708:	429a      	cmp	r2, r3
 801370a:	d001      	beq.n	8013710 <check_fs+0x48>
 801370c:	2303      	movs	r3, #3
 801370e:	e029      	b.n	8013764 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013716:	2be9      	cmp	r3, #233	@ 0xe9
 8013718:	d009      	beq.n	801372e <check_fs+0x66>
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013720:	2beb      	cmp	r3, #235	@ 0xeb
 8013722:	d11e      	bne.n	8013762 <check_fs+0x9a>
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801372a:	2b90      	cmp	r3, #144	@ 0x90
 801372c:	d119      	bne.n	8013762 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	3330      	adds	r3, #48	@ 0x30
 8013732:	3336      	adds	r3, #54	@ 0x36
 8013734:	4618      	mov	r0, r3
 8013736:	f7fe ff88 	bl	801264a <ld_dword>
 801373a:	4603      	mov	r3, r0
 801373c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013740:	4a0a      	ldr	r2, [pc, #40]	@ (801376c <check_fs+0xa4>)
 8013742:	4293      	cmp	r3, r2
 8013744:	d101      	bne.n	801374a <check_fs+0x82>
 8013746:	2300      	movs	r3, #0
 8013748:	e00c      	b.n	8013764 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	3330      	adds	r3, #48	@ 0x30
 801374e:	3352      	adds	r3, #82	@ 0x52
 8013750:	4618      	mov	r0, r3
 8013752:	f7fe ff7a 	bl	801264a <ld_dword>
 8013756:	4603      	mov	r3, r0
 8013758:	4a05      	ldr	r2, [pc, #20]	@ (8013770 <check_fs+0xa8>)
 801375a:	4293      	cmp	r3, r2
 801375c:	d101      	bne.n	8013762 <check_fs+0x9a>
 801375e:	2300      	movs	r3, #0
 8013760:	e000      	b.n	8013764 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013762:	2302      	movs	r3, #2
}
 8013764:	4618      	mov	r0, r3
 8013766:	3708      	adds	r7, #8
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}
 801376c:	00544146 	.word	0x00544146
 8013770:	33544146 	.word	0x33544146

08013774 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b096      	sub	sp, #88	@ 0x58
 8013778:	af00      	add	r7, sp, #0
 801377a:	60f8      	str	r0, [r7, #12]
 801377c:	60b9      	str	r1, [r7, #8]
 801377e:	4613      	mov	r3, r2
 8013780:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013782:	68bb      	ldr	r3, [r7, #8]
 8013784:	2200      	movs	r2, #0
 8013786:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013788:	68f8      	ldr	r0, [r7, #12]
 801378a:	f7ff ff58 	bl	801363e <get_ldnumber>
 801378e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013792:	2b00      	cmp	r3, #0
 8013794:	da01      	bge.n	801379a <find_volume+0x26>
 8013796:	230b      	movs	r3, #11
 8013798:	e22a      	b.n	8013bf0 <find_volume+0x47c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801379a:	4aa1      	ldr	r2, [pc, #644]	@ (8013a20 <find_volume+0x2ac>)
 801379c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801379e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80137a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d101      	bne.n	80137ae <find_volume+0x3a>
 80137aa:	230c      	movs	r3, #12
 80137ac:	e220      	b.n	8013bf0 <find_volume+0x47c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137b2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80137b4:	79fb      	ldrb	r3, [r7, #7]
 80137b6:	f023 0301 	bic.w	r3, r3, #1
 80137ba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80137bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137be:	781b      	ldrb	r3, [r3, #0]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d01a      	beq.n	80137fa <find_volume+0x86>
		stat = disk_status(fs->drv);
 80137c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137c6:	785b      	ldrb	r3, [r3, #1]
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7fe fe87 	bl	80124dc <disk_status>
 80137ce:	4603      	mov	r3, r0
 80137d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80137d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80137d8:	f003 0301 	and.w	r3, r3, #1
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d10c      	bne.n	80137fa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80137e0:	79fb      	ldrb	r3, [r7, #7]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d007      	beq.n	80137f6 <find_volume+0x82>
 80137e6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80137ea:	f003 0304 	and.w	r3, r3, #4
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d001      	beq.n	80137f6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80137f2:	230a      	movs	r3, #10
 80137f4:	e1fc      	b.n	8013bf0 <find_volume+0x47c>
			}
			return FR_OK;				/* The file system object is valid */
 80137f6:	2300      	movs	r3, #0
 80137f8:	e1fa      	b.n	8013bf0 <find_volume+0x47c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80137fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137fc:	2200      	movs	r2, #0
 80137fe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013802:	b2da      	uxtb	r2, r3
 8013804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013806:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801380a:	785b      	ldrb	r3, [r3, #1]
 801380c:	4618      	mov	r0, r3
 801380e:	f7fe fe7f 	bl	8012510 <disk_initialize>
 8013812:	4603      	mov	r3, r0
 8013814:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013818:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801381c:	f003 0301 	and.w	r3, r3, #1
 8013820:	2b00      	cmp	r3, #0
 8013822:	d001      	beq.n	8013828 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013824:	2303      	movs	r3, #3
 8013826:	e1e3      	b.n	8013bf0 <find_volume+0x47c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013828:	79fb      	ldrb	r3, [r7, #7]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d007      	beq.n	801383e <find_volume+0xca>
 801382e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013832:	f003 0304 	and.w	r3, r3, #4
 8013836:	2b00      	cmp	r3, #0
 8013838:	d001      	beq.n	801383e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801383a:	230a      	movs	r3, #10
 801383c:	e1d8      	b.n	8013bf0 <find_volume+0x47c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801383e:	2300      	movs	r3, #0
 8013840:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013842:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013844:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013846:	f7ff ff3f 	bl	80136c8 <check_fs>
 801384a:	4603      	mov	r3, r0
 801384c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013850:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013854:	2b02      	cmp	r3, #2
 8013856:	d149      	bne.n	80138ec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013858:	2300      	movs	r3, #0
 801385a:	643b      	str	r3, [r7, #64]	@ 0x40
 801385c:	e01e      	b.n	801389c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801385e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013860:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013866:	011b      	lsls	r3, r3, #4
 8013868:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 801386c:	4413      	add	r3, r2
 801386e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013872:	3304      	adds	r3, #4
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d006      	beq.n	8013888 <find_volume+0x114>
 801387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801387c:	3308      	adds	r3, #8
 801387e:	4618      	mov	r0, r3
 8013880:	f7fe fee3 	bl	801264a <ld_dword>
 8013884:	4602      	mov	r2, r0
 8013886:	e000      	b.n	801388a <find_volume+0x116>
 8013888:	2200      	movs	r2, #0
 801388a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801388c:	009b      	lsls	r3, r3, #2
 801388e:	3358      	adds	r3, #88	@ 0x58
 8013890:	443b      	add	r3, r7
 8013892:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013898:	3301      	adds	r3, #1
 801389a:	643b      	str	r3, [r7, #64]	@ 0x40
 801389c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801389e:	2b03      	cmp	r3, #3
 80138a0:	d9dd      	bls.n	801385e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80138a2:	2300      	movs	r3, #0
 80138a4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80138a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d002      	beq.n	80138b2 <find_volume+0x13e>
 80138ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138ae:	3b01      	subs	r3, #1
 80138b0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80138b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138b4:	009b      	lsls	r3, r3, #2
 80138b6:	3358      	adds	r3, #88	@ 0x58
 80138b8:	443b      	add	r3, r7
 80138ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80138be:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80138c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d005      	beq.n	80138d2 <find_volume+0x15e>
 80138c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80138c8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80138ca:	f7ff fefd 	bl	80136c8 <check_fs>
 80138ce:	4603      	mov	r3, r0
 80138d0:	e000      	b.n	80138d4 <find_volume+0x160>
 80138d2:	2303      	movs	r3, #3
 80138d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80138d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d905      	bls.n	80138ec <find_volume+0x178>
 80138e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138e2:	3301      	adds	r3, #1
 80138e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80138e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80138e8:	2b03      	cmp	r3, #3
 80138ea:	d9e2      	bls.n	80138b2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80138ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138f0:	2b04      	cmp	r3, #4
 80138f2:	d101      	bne.n	80138f8 <find_volume+0x184>
 80138f4:	2301      	movs	r3, #1
 80138f6:	e17b      	b.n	8013bf0 <find_volume+0x47c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80138f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	d901      	bls.n	8013904 <find_volume+0x190>
 8013900:	230d      	movs	r3, #13
 8013902:	e175      	b.n	8013bf0 <find_volume+0x47c>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013906:	3330      	adds	r3, #48	@ 0x30
 8013908:	330b      	adds	r3, #11
 801390a:	4618      	mov	r0, r3
 801390c:	f7fe fe84 	bl	8012618 <ld_word>
 8013910:	4603      	mov	r3, r0
 8013912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013916:	d001      	beq.n	801391c <find_volume+0x1a8>
 8013918:	230d      	movs	r3, #13
 801391a:	e169      	b.n	8013bf0 <find_volume+0x47c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801391c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391e:	3330      	adds	r3, #48	@ 0x30
 8013920:	3316      	adds	r3, #22
 8013922:	4618      	mov	r0, r3
 8013924:	f7fe fe78 	bl	8012618 <ld_word>
 8013928:	4603      	mov	r3, r0
 801392a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801392c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801392e:	2b00      	cmp	r3, #0
 8013930:	d106      	bne.n	8013940 <find_volume+0x1cc>
 8013932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013934:	3330      	adds	r3, #48	@ 0x30
 8013936:	3324      	adds	r3, #36	@ 0x24
 8013938:	4618      	mov	r0, r3
 801393a:	f7fe fe86 	bl	801264a <ld_dword>
 801393e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8013940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013942:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013944:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013948:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 801394c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801394e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013952:	789b      	ldrb	r3, [r3, #2]
 8013954:	2b01      	cmp	r3, #1
 8013956:	d005      	beq.n	8013964 <find_volume+0x1f0>
 8013958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801395a:	789b      	ldrb	r3, [r3, #2]
 801395c:	2b02      	cmp	r3, #2
 801395e:	d001      	beq.n	8013964 <find_volume+0x1f0>
 8013960:	230d      	movs	r3, #13
 8013962:	e145      	b.n	8013bf0 <find_volume+0x47c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013966:	789b      	ldrb	r3, [r3, #2]
 8013968:	461a      	mov	r2, r3
 801396a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801396c:	fb02 f303 	mul.w	r3, r2, r3
 8013970:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8013978:	461a      	mov	r2, r3
 801397a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801397c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013980:	895b      	ldrh	r3, [r3, #10]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d008      	beq.n	8013998 <find_volume+0x224>
 8013986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013988:	895b      	ldrh	r3, [r3, #10]
 801398a:	461a      	mov	r2, r3
 801398c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801398e:	895b      	ldrh	r3, [r3, #10]
 8013990:	3b01      	subs	r3, #1
 8013992:	4013      	ands	r3, r2
 8013994:	2b00      	cmp	r3, #0
 8013996:	d001      	beq.n	801399c <find_volume+0x228>
 8013998:	230d      	movs	r3, #13
 801399a:	e129      	b.n	8013bf0 <find_volume+0x47c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801399c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801399e:	3330      	adds	r3, #48	@ 0x30
 80139a0:	3311      	adds	r3, #17
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7fe fe38 	bl	8012618 <ld_word>
 80139a8:	4603      	mov	r3, r0
 80139aa:	461a      	mov	r2, r3
 80139ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80139b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139b2:	891b      	ldrh	r3, [r3, #8]
 80139b4:	f003 030f 	and.w	r3, r3, #15
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d001      	beq.n	80139c2 <find_volume+0x24e>
 80139be:	230d      	movs	r3, #13
 80139c0:	e116      	b.n	8013bf0 <find_volume+0x47c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80139c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139c4:	3330      	adds	r3, #48	@ 0x30
 80139c6:	3313      	adds	r3, #19
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7fe fe25 	bl	8012618 <ld_word>
 80139ce:	4603      	mov	r3, r0
 80139d0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80139d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d106      	bne.n	80139e6 <find_volume+0x272>
 80139d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139da:	3330      	adds	r3, #48	@ 0x30
 80139dc:	3320      	adds	r3, #32
 80139de:	4618      	mov	r0, r3
 80139e0:	f7fe fe33 	bl	801264a <ld_dword>
 80139e4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80139e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139e8:	3330      	adds	r3, #48	@ 0x30
 80139ea:	330e      	adds	r3, #14
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7fe fe13 	bl	8012618 <ld_word>
 80139f2:	4603      	mov	r3, r0
 80139f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80139f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <find_volume+0x28c>
 80139fc:	230d      	movs	r3, #13
 80139fe:	e0f7      	b.n	8013bf0 <find_volume+0x47c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013a00:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a04:	4413      	add	r3, r2
 8013a06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a08:	8912      	ldrh	r2, [r2, #8]
 8013a0a:	0912      	lsrs	r2, r2, #4
 8013a0c:	b292      	uxth	r2, r2
 8013a0e:	4413      	add	r3, r2
 8013a10:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013a12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d204      	bcs.n	8013a24 <find_volume+0x2b0>
 8013a1a:	230d      	movs	r3, #13
 8013a1c:	e0e8      	b.n	8013bf0 <find_volume+0x47c>
 8013a1e:	bf00      	nop
 8013a20:	20001c44 	.word	0x20001c44
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a28:	1ad3      	subs	r3, r2, r3
 8013a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a2c:	8952      	ldrh	r2, [r2, #10]
 8013a2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a32:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d101      	bne.n	8013a3e <find_volume+0x2ca>
 8013a3a:	230d      	movs	r3, #13
 8013a3c:	e0d8      	b.n	8013bf0 <find_volume+0x47c>
		fmt = FS_FAT32;
 8013a3e:	2303      	movs	r3, #3
 8013a40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a46:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8013a4a:	4293      	cmp	r3, r2
 8013a4c:	d802      	bhi.n	8013a54 <find_volume+0x2e0>
 8013a4e:	2302      	movs	r3, #2
 8013a50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a56:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d802      	bhi.n	8013a64 <find_volume+0x2f0>
 8013a5e:	2301      	movs	r3, #1
 8013a60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a66:	1c9a      	adds	r2, r3, #2
 8013a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8013a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a70:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a72:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a76:	441a      	add	r2, r3
 8013a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a7a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8013a7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a80:	441a      	add	r2, r3
 8013a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a84:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8013a86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013a8a:	2b03      	cmp	r3, #3
 8013a8c:	d11e      	bne.n	8013acc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a90:	3330      	adds	r3, #48	@ 0x30
 8013a92:	332a      	adds	r3, #42	@ 0x2a
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fe fdbf 	bl	8012618 <ld_word>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d001      	beq.n	8013aa4 <find_volume+0x330>
 8013aa0:	230d      	movs	r3, #13
 8013aa2:	e0a5      	b.n	8013bf0 <find_volume+0x47c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa6:	891b      	ldrh	r3, [r3, #8]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d001      	beq.n	8013ab0 <find_volume+0x33c>
 8013aac:	230d      	movs	r3, #13
 8013aae:	e09f      	b.n	8013bf0 <find_volume+0x47c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ab2:	3330      	adds	r3, #48	@ 0x30
 8013ab4:	332c      	adds	r3, #44	@ 0x2c
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f7fe fdc7 	bl	801264a <ld_dword>
 8013abc:	4602      	mov	r2, r0
 8013abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ac0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ac4:	695b      	ldr	r3, [r3, #20]
 8013ac6:	009b      	lsls	r3, r3, #2
 8013ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8013aca:	e01f      	b.n	8013b0c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ace:	891b      	ldrh	r3, [r3, #8]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d101      	bne.n	8013ad8 <find_volume+0x364>
 8013ad4:	230d      	movs	r3, #13
 8013ad6:	e08b      	b.n	8013bf0 <find_volume+0x47c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ada:	6a1a      	ldr	r2, [r3, #32]
 8013adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ade:	441a      	add	r2, r3
 8013ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ae8:	2b02      	cmp	r3, #2
 8013aea:	d103      	bne.n	8013af4 <find_volume+0x380>
 8013aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aee:	695b      	ldr	r3, [r3, #20]
 8013af0:	005b      	lsls	r3, r3, #1
 8013af2:	e00a      	b.n	8013b0a <find_volume+0x396>
 8013af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af6:	695a      	ldr	r2, [r3, #20]
 8013af8:	4613      	mov	r3, r2
 8013afa:	005b      	lsls	r3, r3, #1
 8013afc:	4413      	add	r3, r2
 8013afe:	085a      	lsrs	r2, r3, #1
 8013b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b02:	695b      	ldr	r3, [r3, #20]
 8013b04:	f003 0301 	and.w	r3, r3, #1
 8013b08:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013b0a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b0e:	699a      	ldr	r2, [r3, #24]
 8013b10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b12:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8013b16:	0a5b      	lsrs	r3, r3, #9
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d201      	bcs.n	8013b20 <find_volume+0x3ac>
 8013b1c:	230d      	movs	r3, #13
 8013b1e:	e067      	b.n	8013bf0 <find_volume+0x47c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b22:	f04f 32ff 	mov.w	r2, #4294967295
 8013b26:	611a      	str	r2, [r3, #16]
 8013b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2a:	691a      	ldr	r2, [r3, #16]
 8013b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b2e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8013b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b32:	2280      	movs	r2, #128	@ 0x80
 8013b34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013b36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013b3a:	2b03      	cmp	r3, #3
 8013b3c:	d149      	bne.n	8013bd2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b40:	3330      	adds	r3, #48	@ 0x30
 8013b42:	3330      	adds	r3, #48	@ 0x30
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fe fd67 	bl	8012618 <ld_word>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d140      	bne.n	8013bd2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b52:	3301      	adds	r3, #1
 8013b54:	4619      	mov	r1, r3
 8013b56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013b58:	f7fe fea3 	bl	80128a2 <move_window>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d137      	bne.n	8013bd2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8013b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b64:	2200      	movs	r2, #0
 8013b66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b6a:	3330      	adds	r3, #48	@ 0x30
 8013b6c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013b70:	4618      	mov	r0, r3
 8013b72:	f7fe fd51 	bl	8012618 <ld_word>
 8013b76:	4603      	mov	r3, r0
 8013b78:	461a      	mov	r2, r3
 8013b7a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d127      	bne.n	8013bd2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b84:	3330      	adds	r3, #48	@ 0x30
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7fe fd5f 	bl	801264a <ld_dword>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8013bf8 <find_volume+0x484>)
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d11e      	bne.n	8013bd2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b96:	3330      	adds	r3, #48	@ 0x30
 8013b98:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	f7fe fd54 	bl	801264a <ld_dword>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	4a15      	ldr	r2, [pc, #84]	@ (8013bfc <find_volume+0x488>)
 8013ba6:	4293      	cmp	r3, r2
 8013ba8:	d113      	bne.n	8013bd2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bac:	3330      	adds	r3, #48	@ 0x30
 8013bae:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7fe fd49 	bl	801264a <ld_dword>
 8013bb8:	4602      	mov	r2, r0
 8013bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bbc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc0:	3330      	adds	r3, #48	@ 0x30
 8013bc2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7fe fd3f 	bl	801264a <ld_dword>
 8013bcc:	4602      	mov	r2, r0
 8013bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bd4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013bd8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013bda:	4b09      	ldr	r3, [pc, #36]	@ (8013c00 <find_volume+0x48c>)
 8013bdc:	881b      	ldrh	r3, [r3, #0]
 8013bde:	3301      	adds	r3, #1
 8013be0:	b29a      	uxth	r2, r3
 8013be2:	4b07      	ldr	r3, [pc, #28]	@ (8013c00 <find_volume+0x48c>)
 8013be4:	801a      	strh	r2, [r3, #0]
 8013be6:	4b06      	ldr	r3, [pc, #24]	@ (8013c00 <find_volume+0x48c>)
 8013be8:	881a      	ldrh	r2, [r3, #0]
 8013bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bec:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8013bee:	2300      	movs	r3, #0
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	3758      	adds	r7, #88	@ 0x58
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bd80      	pop	{r7, pc}
 8013bf8:	41615252 	.word	0x41615252
 8013bfc:	61417272 	.word	0x61417272
 8013c00:	20001c48 	.word	0x20001c48

08013c04 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	b084      	sub	sp, #16
 8013c08:	af00      	add	r7, sp, #0
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c0e:	2309      	movs	r3, #9
 8013c10:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d01c      	beq.n	8013c52 <validate+0x4e>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d018      	beq.n	8013c52 <validate+0x4e>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d013      	beq.n	8013c52 <validate+0x4e>
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	889a      	ldrh	r2, [r3, #4]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	88db      	ldrh	r3, [r3, #6]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d10c      	bne.n	8013c52 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	785b      	ldrb	r3, [r3, #1]
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fe fc4c 	bl	80124dc <disk_status>
 8013c44:	4603      	mov	r3, r0
 8013c46:	f003 0301 	and.w	r3, r3, #1
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d101      	bne.n	8013c52 <validate+0x4e>
			res = FR_OK;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c52:	7bfb      	ldrb	r3, [r7, #15]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d102      	bne.n	8013c5e <validate+0x5a>
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	e000      	b.n	8013c60 <validate+0x5c>
 8013c5e:	2300      	movs	r3, #0
 8013c60:	683a      	ldr	r2, [r7, #0]
 8013c62:	6013      	str	r3, [r2, #0]
	return res;
 8013c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3710      	adds	r7, #16
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
	...

08013c70 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b088      	sub	sp, #32
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	60f8      	str	r0, [r7, #12]
 8013c78:	60b9      	str	r1, [r7, #8]
 8013c7a:	4613      	mov	r3, r2
 8013c7c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c82:	f107 0310 	add.w	r3, r7, #16
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7ff fcd9 	bl	801363e <get_ldnumber>
 8013c8c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	da01      	bge.n	8013c98 <f_mount+0x28>
 8013c94:	230b      	movs	r3, #11
 8013c96:	e028      	b.n	8013cea <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013c98:	4a16      	ldr	r2, [pc, #88]	@ (8013cf4 <f_mount+0x84>)
 8013c9a:	69fb      	ldr	r3, [r7, #28]
 8013c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ca0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013ca2:	69bb      	ldr	r3, [r7, #24]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d002      	beq.n	8013cae <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013ca8:	69bb      	ldr	r3, [r7, #24]
 8013caa:	2200      	movs	r2, #0
 8013cac:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d002      	beq.n	8013cba <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013cba:	68fa      	ldr	r2, [r7, #12]
 8013cbc:	490d      	ldr	r1, [pc, #52]	@ (8013cf4 <f_mount+0x84>)
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d002      	beq.n	8013cd0 <f_mount+0x60>
 8013cca:	79fb      	ldrb	r3, [r7, #7]
 8013ccc:	2b01      	cmp	r3, #1
 8013cce:	d001      	beq.n	8013cd4 <f_mount+0x64>
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	e00a      	b.n	8013cea <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013cd4:	f107 010c 	add.w	r1, r7, #12
 8013cd8:	f107 0308 	add.w	r3, r7, #8
 8013cdc:	2200      	movs	r2, #0
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7ff fd48 	bl	8013774 <find_volume>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cea:	4618      	mov	r0, r3
 8013cec:	3720      	adds	r7, #32
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
 8013cf2:	bf00      	nop
 8013cf4:	20001c44 	.word	0x20001c44

08013cf8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b098      	sub	sp, #96	@ 0x60
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	60f8      	str	r0, [r7, #12]
 8013d00:	60b9      	str	r1, [r7, #8]
 8013d02:	4613      	mov	r3, r2
 8013d04:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d101      	bne.n	8013d10 <f_open+0x18>
 8013d0c:	2309      	movs	r3, #9
 8013d0e:	e17a      	b.n	8014006 <f_open+0x30e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013d10:	79fb      	ldrb	r3, [r7, #7]
 8013d12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013d16:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013d18:	79fa      	ldrb	r2, [r7, #7]
 8013d1a:	f107 0114 	add.w	r1, r7, #20
 8013d1e:	f107 0308 	add.w	r3, r7, #8
 8013d22:	4618      	mov	r0, r3
 8013d24:	f7ff fd26 	bl	8013774 <find_volume>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8013d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	f040 815e 	bne.w	8013ff4 <f_open+0x2fc>
		dj.obj.fs = fs;
 8013d38:	697b      	ldr	r3, [r7, #20]
 8013d3a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013d3c:	68ba      	ldr	r2, [r7, #8]
 8013d3e:	f107 0318 	add.w	r3, r7, #24
 8013d42:	4611      	mov	r1, r2
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7ff fc09 	bl	801355c <follow_path>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013d50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d107      	bne.n	8013d68 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013d58:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013d5c:	b25b      	sxtb	r3, r3
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	da02      	bge.n	8013d68 <f_open+0x70>
				res = FR_INVALID_NAME;
 8013d62:	2306      	movs	r3, #6
 8013d64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013d68:	79fb      	ldrb	r3, [r7, #7]
 8013d6a:	f003 031c 	and.w	r3, r3, #28
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d078      	beq.n	8013e64 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8013d72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d010      	beq.n	8013d9c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013d7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013d7e:	2b04      	cmp	r3, #4
 8013d80:	d107      	bne.n	8013d92 <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8013d82:	f107 0318 	add.w	r3, r7, #24
 8013d86:	4618      	mov	r0, r3
 8013d88:	f7ff fb22 	bl	80133d0 <dir_register>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013d92:	79fb      	ldrb	r3, [r7, #7]
 8013d94:	f043 0308 	orr.w	r3, r3, #8
 8013d98:	71fb      	strb	r3, [r7, #7]
 8013d9a:	e010      	b.n	8013dbe <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013d9c:	7fbb      	ldrb	r3, [r7, #30]
 8013d9e:	f003 0311 	and.w	r3, r3, #17
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d003      	beq.n	8013dae <f_open+0xb6>
					res = FR_DENIED;
 8013da6:	2307      	movs	r3, #7
 8013da8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013dac:	e007      	b.n	8013dbe <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013dae:	79fb      	ldrb	r3, [r7, #7]
 8013db0:	f003 0304 	and.w	r3, r3, #4
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d002      	beq.n	8013dbe <f_open+0xc6>
 8013db8:	2308      	movs	r3, #8
 8013dba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013dbe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d168      	bne.n	8013e98 <f_open+0x1a0>
 8013dc6:	79fb      	ldrb	r3, [r7, #7]
 8013dc8:	f003 0308 	and.w	r3, r3, #8
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d063      	beq.n	8013e98 <f_open+0x1a0>
				dw = GET_FATTIME();
 8013dd0:	f7fd ff9e 	bl	8011d10 <get_fattime>
 8013dd4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dd8:	330e      	adds	r3, #14
 8013dda:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7fe fc72 	bl	80126c6 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013de4:	3316      	adds	r3, #22
 8013de6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7fe fc6c 	bl	80126c6 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013df0:	330b      	adds	r3, #11
 8013df2:	2220      	movs	r2, #32
 8013df4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013dfa:	4611      	mov	r1, r2
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	f7ff fa53 	bl	80132a8 <ld_clust>
 8013e02:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013e04:	697b      	ldr	r3, [r7, #20]
 8013e06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013e08:	2200      	movs	r2, #0
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7ff fa6b 	bl	80132e6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013e12:	331c      	adds	r3, #28
 8013e14:	2100      	movs	r1, #0
 8013e16:	4618      	mov	r0, r3
 8013e18:	f7fe fc55 	bl	80126c6 <st_dword>
					fs->wflag = 1;
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	2201      	movs	r2, #1
 8013e20:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d037      	beq.n	8013e98 <f_open+0x1a0>
						dw = fs->winsect;
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e2c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013e2e:	f107 0318 	add.w	r3, r7, #24
 8013e32:	2200      	movs	r2, #0
 8013e34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7fe ff7e 	bl	8012d38 <remove_chain>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8013e42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d126      	bne.n	8013e98 <f_open+0x1a0>
							res = move_window(fs, dw);
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013e4e:	4618      	mov	r0, r3
 8013e50:	f7fe fd27 	bl	80128a2 <move_window>
 8013e54:	4603      	mov	r3, r0
 8013e56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013e5e:	3a01      	subs	r2, #1
 8013e60:	60da      	str	r2, [r3, #12]
 8013e62:	e019      	b.n	8013e98 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013e64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d115      	bne.n	8013e98 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013e6c:	7fbb      	ldrb	r3, [r7, #30]
 8013e6e:	f003 0310 	and.w	r3, r3, #16
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d003      	beq.n	8013e7e <f_open+0x186>
					res = FR_NO_FILE;
 8013e76:	2304      	movs	r3, #4
 8013e78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013e7c:	e00c      	b.n	8013e98 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013e7e:	79fb      	ldrb	r3, [r7, #7]
 8013e80:	f003 0302 	and.w	r3, r3, #2
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d007      	beq.n	8013e98 <f_open+0x1a0>
 8013e88:	7fbb      	ldrb	r3, [r7, #30]
 8013e8a:	f003 0301 	and.w	r3, r3, #1
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d002      	beq.n	8013e98 <f_open+0x1a0>
						res = FR_DENIED;
 8013e92:	2307      	movs	r3, #7
 8013e94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013e98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d10f      	bne.n	8013ec0 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013ea0:	79fb      	ldrb	r3, [r7, #7]
 8013ea2:	f003 0308 	and.w	r3, r3, #8
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d003      	beq.n	8013eb2 <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8013eaa:	79fb      	ldrb	r3, [r7, #7]
 8013eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013eb0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013eb2:	697b      	ldr	r3, [r7, #20]
 8013eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8013eba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	625a      	str	r2, [r3, #36]	@ 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f040 8095 	bne.w	8013ff4 <f_open+0x2fc>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013ece:	4611      	mov	r1, r2
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7ff f9e9 	bl	80132a8 <ld_clust>
 8013ed6:	4602      	mov	r2, r0
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013ede:	331c      	adds	r3, #28
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	f7fe fbb2 	bl	801264a <ld_dword>
 8013ee6:	4602      	mov	r2, r0
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	2200      	movs	r2, #0
 8013ef0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013ef2:	697a      	ldr	r2, [r7, #20]
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	88da      	ldrh	r2, [r3, #6]
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	79fa      	ldrb	r2, [r7, #7]
 8013f04:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	2200      	movs	r2, #0
 8013f16:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	332c      	adds	r3, #44	@ 0x2c
 8013f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013f20:	2100      	movs	r1, #0
 8013f22:	4618      	mov	r0, r3
 8013f24:	f7fe fc1c 	bl	8012760 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013f28:	79fb      	ldrb	r3, [r7, #7]
 8013f2a:	f003 0320 	and.w	r3, r3, #32
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d060      	beq.n	8013ff4 <f_open+0x2fc>
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d05c      	beq.n	8013ff4 <f_open+0x2fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	68da      	ldr	r2, [r3, #12]
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013f42:	697b      	ldr	r3, [r7, #20]
 8013f44:	895b      	ldrh	r3, [r3, #10]
 8013f46:	025b      	lsls	r3, r3, #9
 8013f48:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	689b      	ldr	r3, [r3, #8]
 8013f4e:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f56:	e016      	b.n	8013f86 <f_open+0x28e>
					clst = get_fat(&fp->obj, clst);
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f7fe fd5a 	bl	8012a16 <get_fat>
 8013f62:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013f64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f66:	2b01      	cmp	r3, #1
 8013f68:	d802      	bhi.n	8013f70 <f_open+0x278>
 8013f6a:	2302      	movs	r3, #2
 8013f6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013f70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f76:	d102      	bne.n	8013f7e <f_open+0x286>
 8013f78:	2301      	movs	r3, #1
 8013f7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f7e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f82:	1ad3      	subs	r3, r2, r3
 8013f84:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d103      	bne.n	8013f96 <f_open+0x29e>
 8013f8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d8e0      	bhi.n	8013f58 <f_open+0x260>
				}
				fp->clust = clst;
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013f9a:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d127      	bne.n	8013ff4 <f_open+0x2fc>
 8013fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d022      	beq.n	8013ff4 <f_open+0x2fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fe fd10 	bl	80129d8 <clust2sect>
 8013fb8:	6478      	str	r0, [r7, #68]	@ 0x44
 8013fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d103      	bne.n	8013fc8 <f_open+0x2d0>
						res = FR_INT_ERR;
 8013fc0:	2302      	movs	r3, #2
 8013fc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013fc6:	e015      	b.n	8013ff4 <f_open+0x2fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fca:	0a5a      	lsrs	r2, r3, #9
 8013fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013fce:	441a      	add	r2, r3
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	7858      	ldrb	r0, [r3, #1]
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	69da      	ldr	r2, [r3, #28]
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	f7fe faba 	bl	801255c <disk_read>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d002      	beq.n	8013ff4 <f_open+0x2fc>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013ff4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d002      	beq.n	8014002 <f_open+0x30a>
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	2200      	movs	r2, #0
 8014000:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014002:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8014006:	4618      	mov	r0, r3
 8014008:	3760      	adds	r7, #96	@ 0x60
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}

0801400e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801400e:	b580      	push	{r7, lr}
 8014010:	b08c      	sub	sp, #48	@ 0x30
 8014012:	af00      	add	r7, sp, #0
 8014014:	60f8      	str	r0, [r7, #12]
 8014016:	60b9      	str	r1, [r7, #8]
 8014018:	607a      	str	r2, [r7, #4]
 801401a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	2200      	movs	r2, #0
 8014024:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	f107 0210 	add.w	r2, r7, #16
 801402c:	4611      	mov	r1, r2
 801402e:	4618      	mov	r0, r3
 8014030:	f7ff fde8 	bl	8013c04 <validate>
 8014034:	4603      	mov	r3, r0
 8014036:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801403a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801403e:	2b00      	cmp	r3, #0
 8014040:	d107      	bne.n	8014052 <f_write+0x44>
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	7c5b      	ldrb	r3, [r3, #17]
 8014046:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 801404a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801404e:	2b00      	cmp	r3, #0
 8014050:	d002      	beq.n	8014058 <f_write+0x4a>
 8014052:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014056:	e14b      	b.n	80142f0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	7c1b      	ldrb	r3, [r3, #16]
 801405c:	f003 0302 	and.w	r3, r3, #2
 8014060:	2b00      	cmp	r3, #0
 8014062:	d101      	bne.n	8014068 <f_write+0x5a>
 8014064:	2307      	movs	r3, #7
 8014066:	e143      	b.n	80142f0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014068:	68fb      	ldr	r3, [r7, #12]
 801406a:	695a      	ldr	r2, [r3, #20]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	441a      	add	r2, r3
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	695b      	ldr	r3, [r3, #20]
 8014074:	429a      	cmp	r2, r3
 8014076:	f080 812d 	bcs.w	80142d4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	695b      	ldr	r3, [r3, #20]
 801407e:	43db      	mvns	r3, r3
 8014080:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014082:	e127      	b.n	80142d4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	695b      	ldr	r3, [r3, #20]
 8014088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801408c:	2b00      	cmp	r3, #0
 801408e:	f040 80e3 	bne.w	8014258 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	695b      	ldr	r3, [r3, #20]
 8014096:	0a5b      	lsrs	r3, r3, #9
 8014098:	693a      	ldr	r2, [r7, #16]
 801409a:	8952      	ldrh	r2, [r2, #10]
 801409c:	3a01      	subs	r2, #1
 801409e:	4013      	ands	r3, r2
 80140a0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80140a2:	69bb      	ldr	r3, [r7, #24]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d143      	bne.n	8014130 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	695b      	ldr	r3, [r3, #20]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d10c      	bne.n	80140ca <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	689b      	ldr	r3, [r3, #8]
 80140b4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80140b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d11a      	bne.n	80140f2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	2100      	movs	r1, #0
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7fe fe9e 	bl	8012e02 <create_chain>
 80140c6:	62b8      	str	r0, [r7, #40]	@ 0x28
 80140c8:	e013      	b.n	80140f2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d007      	beq.n	80140e2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	695b      	ldr	r3, [r3, #20]
 80140d6:	4619      	mov	r1, r3
 80140d8:	68f8      	ldr	r0, [r7, #12]
 80140da:	f7fe ff2a 	bl	8012f32 <clmt_clust>
 80140de:	62b8      	str	r0, [r7, #40]	@ 0x28
 80140e0:	e007      	b.n	80140f2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80140e2:	68fa      	ldr	r2, [r7, #12]
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	699b      	ldr	r3, [r3, #24]
 80140e8:	4619      	mov	r1, r3
 80140ea:	4610      	mov	r0, r2
 80140ec:	f7fe fe89 	bl	8012e02 <create_chain>
 80140f0:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80140f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	f000 80f2 	beq.w	80142de <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80140fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	d104      	bne.n	801410a <f_write+0xfc>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2202      	movs	r2, #2
 8014104:	745a      	strb	r2, [r3, #17]
 8014106:	2302      	movs	r3, #2
 8014108:	e0f2      	b.n	80142f0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014110:	d104      	bne.n	801411c <f_write+0x10e>
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	2201      	movs	r2, #1
 8014116:	745a      	strb	r2, [r3, #17]
 8014118:	2301      	movs	r3, #1
 801411a:	e0e9      	b.n	80142f0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014120:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	689b      	ldr	r3, [r3, #8]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d102      	bne.n	8014130 <f_write+0x122>
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801412e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	7c1b      	ldrb	r3, [r3, #16]
 8014134:	b25b      	sxtb	r3, r3
 8014136:	2b00      	cmp	r3, #0
 8014138:	da18      	bge.n	801416c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801413a:	693b      	ldr	r3, [r7, #16]
 801413c:	7858      	ldrb	r0, [r3, #1]
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	69da      	ldr	r2, [r3, #28]
 8014148:	2301      	movs	r3, #1
 801414a:	f7fe fa27 	bl	801259c <disk_write>
 801414e:	4603      	mov	r3, r0
 8014150:	2b00      	cmp	r3, #0
 8014152:	d004      	beq.n	801415e <f_write+0x150>
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2201      	movs	r2, #1
 8014158:	745a      	strb	r2, [r3, #17]
 801415a:	2301      	movs	r3, #1
 801415c:	e0c8      	b.n	80142f0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	7c1b      	ldrb	r3, [r3, #16]
 8014162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014166:	b2da      	uxtb	r2, r3
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801416c:	693a      	ldr	r2, [r7, #16]
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	699b      	ldr	r3, [r3, #24]
 8014172:	4619      	mov	r1, r3
 8014174:	4610      	mov	r0, r2
 8014176:	f7fe fc2f 	bl	80129d8 <clust2sect>
 801417a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d104      	bne.n	801418c <f_write+0x17e>
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	2202      	movs	r2, #2
 8014186:	745a      	strb	r2, [r3, #17]
 8014188:	2302      	movs	r3, #2
 801418a:	e0b1      	b.n	80142f0 <f_write+0x2e2>
			sect += csect;
 801418c:	697a      	ldr	r2, [r7, #20]
 801418e:	69bb      	ldr	r3, [r7, #24]
 8014190:	4413      	add	r3, r2
 8014192:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	0a5b      	lsrs	r3, r3, #9
 8014198:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801419a:	6a3b      	ldr	r3, [r7, #32]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d03c      	beq.n	801421a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80141a0:	69ba      	ldr	r2, [r7, #24]
 80141a2:	6a3b      	ldr	r3, [r7, #32]
 80141a4:	4413      	add	r3, r2
 80141a6:	693a      	ldr	r2, [r7, #16]
 80141a8:	8952      	ldrh	r2, [r2, #10]
 80141aa:	4293      	cmp	r3, r2
 80141ac:	d905      	bls.n	80141ba <f_write+0x1ac>
					cc = fs->csize - csect;
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	895b      	ldrh	r3, [r3, #10]
 80141b2:	461a      	mov	r2, r3
 80141b4:	69bb      	ldr	r3, [r7, #24]
 80141b6:	1ad3      	subs	r3, r2, r3
 80141b8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80141ba:	693b      	ldr	r3, [r7, #16]
 80141bc:	7858      	ldrb	r0, [r3, #1]
 80141be:	6a3b      	ldr	r3, [r7, #32]
 80141c0:	697a      	ldr	r2, [r7, #20]
 80141c2:	69f9      	ldr	r1, [r7, #28]
 80141c4:	f7fe f9ea 	bl	801259c <disk_write>
 80141c8:	4603      	mov	r3, r0
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d004      	beq.n	80141d8 <f_write+0x1ca>
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	2201      	movs	r2, #1
 80141d2:	745a      	strb	r2, [r3, #17]
 80141d4:	2301      	movs	r3, #1
 80141d6:	e08b      	b.n	80142f0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	69da      	ldr	r2, [r3, #28]
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	1ad3      	subs	r3, r2, r3
 80141e0:	6a3a      	ldr	r2, [r7, #32]
 80141e2:	429a      	cmp	r2, r3
 80141e4:	d915      	bls.n	8014212 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	f103 002c 	add.w	r0, r3, #44	@ 0x2c
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	69da      	ldr	r2, [r3, #28]
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	1ad3      	subs	r3, r2, r3
 80141f4:	025b      	lsls	r3, r3, #9
 80141f6:	69fa      	ldr	r2, [r7, #28]
 80141f8:	4413      	add	r3, r2
 80141fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80141fe:	4619      	mov	r1, r3
 8014200:	f7fe fa8d 	bl	801271e <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	7c1b      	ldrb	r3, [r3, #16]
 8014208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801420c:	b2da      	uxtb	r2, r3
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	025b      	lsls	r3, r3, #9
 8014216:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8014218:	e03f      	b.n	801429a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	69db      	ldr	r3, [r3, #28]
 801421e:	697a      	ldr	r2, [r7, #20]
 8014220:	429a      	cmp	r2, r3
 8014222:	d016      	beq.n	8014252 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	695a      	ldr	r2, [r3, #20]
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801422c:	429a      	cmp	r2, r3
 801422e:	d210      	bcs.n	8014252 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014230:	693b      	ldr	r3, [r7, #16]
 8014232:	7858      	ldrb	r0, [r3, #1]
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 801423a:	2301      	movs	r3, #1
 801423c:	697a      	ldr	r2, [r7, #20]
 801423e:	f7fe f98d 	bl	801255c <disk_read>
 8014242:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014244:	2b00      	cmp	r3, #0
 8014246:	d004      	beq.n	8014252 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	2201      	movs	r2, #1
 801424c:	745a      	strb	r2, [r3, #17]
 801424e:	2301      	movs	r3, #1
 8014250:	e04e      	b.n	80142f0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	697a      	ldr	r2, [r7, #20]
 8014256:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	695b      	ldr	r3, [r3, #20]
 801425c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014260:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8014264:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	429a      	cmp	r2, r3
 801426c:	d901      	bls.n	8014272 <f_write+0x264>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	695b      	ldr	r3, [r3, #20]
 801427c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014280:	4413      	add	r3, r2
 8014282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014284:	69f9      	ldr	r1, [r7, #28]
 8014286:	4618      	mov	r0, r3
 8014288:	f7fe fa49 	bl	801271e <mem_cpy>
		fp->flag |= FA_DIRTY;
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	7c1b      	ldrb	r3, [r3, #16]
 8014290:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014294:	b2da      	uxtb	r2, r3
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801429a:	69fa      	ldr	r2, [r7, #28]
 801429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801429e:	4413      	add	r3, r2
 80142a0:	61fb      	str	r3, [r7, #28]
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	695a      	ldr	r2, [r3, #20]
 80142a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142a8:	441a      	add	r2, r3
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	615a      	str	r2, [r3, #20]
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	68da      	ldr	r2, [r3, #12]
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	695b      	ldr	r3, [r3, #20]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	bf38      	it	cc
 80142ba:	461a      	movcc	r2, r3
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	60da      	str	r2, [r3, #12]
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	681a      	ldr	r2, [r3, #0]
 80142c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142c6:	441a      	add	r2, r3
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	601a      	str	r2, [r3, #0]
 80142cc:	687a      	ldr	r2, [r7, #4]
 80142ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f47f aed4 	bne.w	8014084 <f_write+0x76>
 80142dc:	e000      	b.n	80142e0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80142de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	7c1b      	ldrb	r3, [r3, #16]
 80142e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142e8:	b2da      	uxtb	r2, r3
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80142ee:	2300      	movs	r3, #0
}
 80142f0:	4618      	mov	r0, r3
 80142f2:	3730      	adds	r7, #48	@ 0x30
 80142f4:	46bd      	mov	sp, r7
 80142f6:	bd80      	pop	{r7, pc}

080142f8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b086      	sub	sp, #24
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	f107 0208 	add.w	r2, r7, #8
 8014306:	4611      	mov	r1, r2
 8014308:	4618      	mov	r0, r3
 801430a:	f7ff fc7b 	bl	8013c04 <validate>
 801430e:	4603      	mov	r3, r0
 8014310:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014312:	7dfb      	ldrb	r3, [r7, #23]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d168      	bne.n	80143ea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	7c1b      	ldrb	r3, [r3, #16]
 801431c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014320:	2b00      	cmp	r3, #0
 8014322:	d062      	beq.n	80143ea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	7c1b      	ldrb	r3, [r3, #16]
 8014328:	b25b      	sxtb	r3, r3
 801432a:	2b00      	cmp	r3, #0
 801432c:	da15      	bge.n	801435a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	7858      	ldrb	r0, [r3, #1]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	69da      	ldr	r2, [r3, #28]
 801433c:	2301      	movs	r3, #1
 801433e:	f7fe f92d 	bl	801259c <disk_write>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	d001      	beq.n	801434c <f_sync+0x54>
 8014348:	2301      	movs	r3, #1
 801434a:	e04f      	b.n	80143ec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	7c1b      	ldrb	r3, [r3, #16]
 8014350:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014354:	b2da      	uxtb	r2, r3
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801435a:	f7fd fcd9 	bl	8011d10 <get_fattime>
 801435e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014360:	68ba      	ldr	r2, [r7, #8]
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6a1b      	ldr	r3, [r3, #32]
 8014366:	4619      	mov	r1, r3
 8014368:	4610      	mov	r0, r2
 801436a:	f7fe fa9a 	bl	80128a2 <move_window>
 801436e:	4603      	mov	r3, r0
 8014370:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014372:	7dfb      	ldrb	r3, [r7, #23]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d138      	bne.n	80143ea <f_sync+0xf2>
					dir = fp->dir_ptr;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801437c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	330b      	adds	r3, #11
 8014382:	781a      	ldrb	r2, [r3, #0]
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	330b      	adds	r3, #11
 8014388:	f042 0220 	orr.w	r2, r2, #32
 801438c:	b2d2      	uxtb	r2, r2
 801438e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	6818      	ldr	r0, [r3, #0]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	689b      	ldr	r3, [r3, #8]
 8014398:	461a      	mov	r2, r3
 801439a:	68f9      	ldr	r1, [r7, #12]
 801439c:	f7fe ffa3 	bl	80132e6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	f103 021c 	add.w	r2, r3, #28
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	68db      	ldr	r3, [r3, #12]
 80143aa:	4619      	mov	r1, r3
 80143ac:	4610      	mov	r0, r2
 80143ae:	f7fe f98a 	bl	80126c6 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	3316      	adds	r3, #22
 80143b6:	6939      	ldr	r1, [r7, #16]
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7fe f984 	bl	80126c6 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	3312      	adds	r3, #18
 80143c2:	2100      	movs	r1, #0
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7fe f963 	bl	8012690 <st_word>
					fs->wflag = 1;
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	2201      	movs	r2, #1
 80143ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fe fa92 	bl	80128fc <sync_fs>
 80143d8:	4603      	mov	r3, r0
 80143da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	7c1b      	ldrb	r3, [r3, #16]
 80143e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80143e4:	b2da      	uxtb	r2, r3
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80143ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3718      	adds	r7, #24
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}

080143f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f7ff ff7b 	bl	80142f8 <f_sync>
 8014402:	4603      	mov	r3, r0
 8014404:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014406:	7bfb      	ldrb	r3, [r7, #15]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d10e      	bne.n	801442a <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f107 0208 	add.w	r2, r7, #8
 8014412:	4611      	mov	r1, r2
 8014414:	4618      	mov	r0, r3
 8014416:	f7ff fbf5 	bl	8013c04 <validate>
 801441a:	4603      	mov	r3, r0
 801441c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801441e:	7bfb      	ldrb	r3, [r7, #15]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d102      	bne.n	801442a <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	2200      	movs	r2, #0
 8014428:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801442a:	7bfb      	ldrb	r3, [r7, #15]
}
 801442c:	4618      	mov	r0, r3
 801442e:	3710      	adds	r7, #16
 8014430:	46bd      	mov	sp, r7
 8014432:	bd80      	pop	{r7, pc}

08014434 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b096      	sub	sp, #88	@ 0x58
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801443c:	f107 010c 	add.w	r1, r7, #12
 8014440:	1d3b      	adds	r3, r7, #4
 8014442:	2202      	movs	r2, #2
 8014444:	4618      	mov	r0, r3
 8014446:	f7ff f995 	bl	8013774 <find_volume>
 801444a:	4603      	mov	r3, r0
 801444c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	dj.obj.fs = fs;
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8014454:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014458:	2b00      	cmp	r3, #0
 801445a:	f040 80ec 	bne.w	8014636 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801445e:	687a      	ldr	r2, [r7, #4]
 8014460:	f107 0310 	add.w	r3, r7, #16
 8014464:	4611      	mov	r1, r2
 8014466:	4618      	mov	r0, r3
 8014468:	f7ff f878 	bl	801355c <follow_path>
 801446c:	4603      	mov	r3, r0
 801446e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014472:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014476:	2b00      	cmp	r3, #0
 8014478:	d102      	bne.n	8014480 <f_mkdir+0x4c>
 801447a:	2308      	movs	r3, #8
 801447c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014480:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014484:	2b04      	cmp	r3, #4
 8014486:	f040 80d6 	bne.w	8014636 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801448a:	f107 0310 	add.w	r3, r7, #16
 801448e:	2100      	movs	r1, #0
 8014490:	4618      	mov	r0, r3
 8014492:	f7fe fcb6 	bl	8012e02 <create_chain>
 8014496:	6478      	str	r0, [r7, #68]	@ 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	895b      	ldrh	r3, [r3, #10]
 801449c:	025b      	lsls	r3, r3, #9
 801449e:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 80144a0:	2300      	movs	r3, #0
 80144a2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80144a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d102      	bne.n	80144b2 <f_mkdir+0x7e>
 80144ac:	2307      	movs	r3, #7
 80144ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80144b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144b4:	2b01      	cmp	r3, #1
 80144b6:	d102      	bne.n	80144be <f_mkdir+0x8a>
 80144b8:	2302      	movs	r3, #2
 80144ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80144be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80144c4:	d102      	bne.n	80144cc <f_mkdir+0x98>
 80144c6:	2301      	movs	r3, #1
 80144c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80144cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d106      	bne.n	80144e2 <f_mkdir+0xae>
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7fe f99f 	bl	801281a <sync_window>
 80144dc:	4603      	mov	r3, r0
 80144de:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			tm = GET_FATTIME();
 80144e2:	f7fd fc15 	bl	8011d10 <get_fattime>
 80144e6:	6438      	str	r0, [r7, #64]	@ 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80144e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d16a      	bne.n	80145c6 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80144f4:	4618      	mov	r0, r3
 80144f6:	f7fe fa6f 	bl	80129d8 <clust2sect>
 80144fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
				dir = fs->win;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	3330      	adds	r3, #48	@ 0x30
 8014500:	63fb      	str	r3, [r7, #60]	@ 0x3c
				mem_set(dir, 0, SS(fs));
 8014502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014506:	2100      	movs	r1, #0
 8014508:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801450a:	f7fe f929 	bl	8012760 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801450e:	220b      	movs	r2, #11
 8014510:	2120      	movs	r1, #32
 8014512:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014514:	f7fe f924 	bl	8012760 <mem_set>
					dir[DIR_Name] = '.';
 8014518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801451a:	222e      	movs	r2, #46	@ 0x2e
 801451c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801451e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014520:	330b      	adds	r3, #11
 8014522:	2210      	movs	r2, #16
 8014524:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8014526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014528:	3316      	adds	r3, #22
 801452a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801452c:	4618      	mov	r0, r3
 801452e:	f7fe f8ca 	bl	80126c6 <st_dword>
					st_clust(fs, dir, dcl);
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014536:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014538:	4618      	mov	r0, r3
 801453a:	f7fe fed4 	bl	80132e6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801453e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014540:	3320      	adds	r3, #32
 8014542:	2220      	movs	r2, #32
 8014544:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014546:	4618      	mov	r0, r3
 8014548:	f7fe f8e9 	bl	801271e <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801454c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801454e:	3321      	adds	r3, #33	@ 0x21
 8014550:	222e      	movs	r2, #46	@ 0x2e
 8014552:	701a      	strb	r2, [r3, #0]
 8014554:	69bb      	ldr	r3, [r7, #24]
 8014556:	64bb      	str	r3, [r7, #72]	@ 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	781b      	ldrb	r3, [r3, #0]
 801455c:	2b03      	cmp	r3, #3
 801455e:	d106      	bne.n	801456e <f_mkdir+0x13a>
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014566:	429a      	cmp	r2, r3
 8014568:	d101      	bne.n	801456e <f_mkdir+0x13a>
 801456a:	2300      	movs	r3, #0
 801456c:	64bb      	str	r3, [r7, #72]	@ 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801456e:	68f8      	ldr	r0, [r7, #12]
 8014570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014572:	3320      	adds	r3, #32
 8014574:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014576:	4619      	mov	r1, r3
 8014578:	f7fe feb5 	bl	80132e6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	895b      	ldrh	r3, [r3, #10]
 8014580:	653b      	str	r3, [r7, #80]	@ 0x50
 8014582:	e01b      	b.n	80145bc <f_mkdir+0x188>
					fs->winsect = dsc++;
 8014584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014586:	1c5a      	adds	r2, r3, #1
 8014588:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801458a:	68fa      	ldr	r2, [r7, #12]
 801458c:	62d3      	str	r3, [r2, #44]	@ 0x2c
					fs->wflag = 1;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2201      	movs	r2, #1
 8014592:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	4618      	mov	r0, r3
 8014598:	f7fe f93f 	bl	801281a <sync_window>
 801459c:	4603      	mov	r3, r0
 801459e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					if (res != FR_OK) break;
 80145a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d10c      	bne.n	80145c4 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 80145aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80145ae:	2100      	movs	r1, #0
 80145b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80145b2:	f7fe f8d5 	bl	8012760 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80145b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145b8:	3b01      	subs	r3, #1
 80145ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80145bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d1e0      	bne.n	8014584 <f_mkdir+0x150>
 80145c2:	e000      	b.n	80145c6 <f_mkdir+0x192>
					if (res != FR_OK) break;
 80145c4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80145c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d107      	bne.n	80145de <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80145ce:	f107 0310 	add.w	r3, r7, #16
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7fe fefc 	bl	80133d0 <dir_register>
 80145d8:	4603      	mov	r3, r0
 80145da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}
			if (res == FR_OK) {
 80145de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d120      	bne.n	8014628 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80145e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80145ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145ec:	3316      	adds	r3, #22
 80145ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7fe f868 	bl	80126c6 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80145fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fe fe72 	bl	80132e6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014604:	330b      	adds	r3, #11
 8014606:	2210      	movs	r2, #16
 8014608:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	2201      	movs	r2, #1
 801460e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014610:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014614:	2b00      	cmp	r3, #0
 8014616:	d10e      	bne.n	8014636 <f_mkdir+0x202>
					res = sync_fs(fs);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	4618      	mov	r0, r3
 801461c:	f7fe f96e 	bl	80128fc <sync_fs>
 8014620:	4603      	mov	r3, r0
 8014622:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8014626:	e006      	b.n	8014636 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014628:	f107 0310 	add.w	r3, r7, #16
 801462c:	2200      	movs	r2, #0
 801462e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014630:	4618      	mov	r0, r3
 8014632:	f7fe fb81 	bl	8012d38 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014636:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 801463a:	4618      	mov	r0, r3
 801463c:	3758      	adds	r7, #88	@ 0x58
 801463e:	46bd      	mov	sp, r7
 8014640:	bd80      	pop	{r7, pc}
	...

08014644 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8014644:	b590      	push	{r4, r7, lr}
 8014646:	b09d      	sub	sp, #116	@ 0x74
 8014648:	af00      	add	r7, sp, #0
 801464a:	60f8      	str	r0, [r7, #12]
 801464c:	607a      	str	r2, [r7, #4]
 801464e:	603b      	str	r3, [r7, #0]
 8014650:	460b      	mov	r3, r1
 8014652:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 8014654:	2301      	movs	r3, #1
 8014656:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 8014658:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801465c:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 801465e:	f107 030c 	add.w	r3, r7, #12
 8014662:	4618      	mov	r0, r3
 8014664:	f7fe ffeb 	bl	801363e <get_ldnumber>
 8014668:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801466a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801466c:	2b00      	cmp	r3, #0
 801466e:	da02      	bge.n	8014676 <f_mkfs+0x32>
 8014670:	230b      	movs	r3, #11
 8014672:	f000 bc0d 	b.w	8014e90 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 8014676:	4a94      	ldr	r2, [pc, #592]	@ (80148c8 <f_mkfs+0x284>)
 8014678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801467a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d005      	beq.n	801468e <f_mkfs+0x4a>
 8014682:	4a91      	ldr	r2, [pc, #580]	@ (80148c8 <f_mkfs+0x284>)
 8014684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801468a:	2200      	movs	r2, #0
 801468c:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 801468e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014690:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 8014694:	2300      	movs	r3, #0
 8014696:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 801469a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801469e:	4618      	mov	r0, r3
 80146a0:	f7fd ff36 	bl	8012510 <disk_initialize>
 80146a4:	4603      	mov	r3, r0
 80146a6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 80146aa:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80146ae:	f003 0301 	and.w	r3, r3, #1
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d001      	beq.n	80146ba <f_mkfs+0x76>
 80146b6:	2303      	movs	r3, #3
 80146b8:	e3ea      	b.n	8014e90 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 80146ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80146be:	f003 0304 	and.w	r3, r3, #4
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d001      	beq.n	80146ca <f_mkfs+0x86>
 80146c6:	230a      	movs	r3, #10
 80146c8:	e3e2      	b.n	8014e90 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 80146ca:	f107 0214 	add.w	r2, r7, #20
 80146ce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80146d2:	2103      	movs	r1, #3
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7fd ff81 	bl	80125dc <disk_ioctl>
 80146da:	4603      	mov	r3, r0
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d10c      	bne.n	80146fa <f_mkfs+0xb6>
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d009      	beq.n	80146fa <f_mkfs+0xb6>
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80146ec:	d805      	bhi.n	80146fa <f_mkfs+0xb6>
 80146ee:	697b      	ldr	r3, [r7, #20]
 80146f0:	1e5a      	subs	r2, r3, #1
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	4013      	ands	r3, r2
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d001      	beq.n	80146fe <f_mkfs+0xba>
 80146fa:	2301      	movs	r3, #1
 80146fc:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 80146fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8014702:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d003      	beq.n	8014712 <f_mkfs+0xce>
 801470a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801470c:	687a      	ldr	r2, [r7, #4]
 801470e:	429a      	cmp	r2, r3
 8014710:	d309      	bcc.n	8014726 <f_mkfs+0xe2>
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014718:	d805      	bhi.n	8014726 <f_mkfs+0xe2>
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	1e5a      	subs	r2, r3, #1
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	4013      	ands	r3, r2
 8014722:	2b00      	cmp	r3, #0
 8014724:	d001      	beq.n	801472a <f_mkfs+0xe6>
 8014726:	2313      	movs	r3, #19
 8014728:	e3b2      	b.n	8014e90 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 801472a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801472c:	687a      	ldr	r2, [r7, #4]
 801472e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014732:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 8014738:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801473a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014742:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 8014744:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014748:	fb02 f303 	mul.w	r3, r2, r3
 801474c:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 801474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014750:	2b00      	cmp	r3, #0
 8014752:	d101      	bne.n	8014758 <f_mkfs+0x114>
 8014754:	230e      	movs	r3, #14
 8014756:	e39b      	b.n	8014e90 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8014758:	f107 0210 	add.w	r2, r7, #16
 801475c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014760:	2101      	movs	r1, #1
 8014762:	4618      	mov	r0, r3
 8014764:	f7fd ff3a 	bl	80125dc <disk_ioctl>
 8014768:	4603      	mov	r3, r0
 801476a:	2b00      	cmp	r3, #0
 801476c:	d001      	beq.n	8014772 <f_mkfs+0x12e>
 801476e:	2301      	movs	r3, #1
 8014770:	e38e      	b.n	8014e90 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 8014772:	7afb      	ldrb	r3, [r7, #11]
 8014774:	f003 0308 	and.w	r3, r3, #8
 8014778:	2b00      	cmp	r3, #0
 801477a:	d001      	beq.n	8014780 <f_mkfs+0x13c>
 801477c:	2300      	movs	r3, #0
 801477e:	e000      	b.n	8014782 <f_mkfs+0x13e>
 8014780:	233f      	movs	r3, #63	@ 0x3f
 8014782:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014788:	429a      	cmp	r2, r3
 801478a:	d901      	bls.n	8014790 <f_mkfs+0x14c>
 801478c:	230e      	movs	r3, #14
 801478e:	e37f      	b.n	8014e90 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 8014790:	693a      	ldr	r2, [r7, #16]
 8014792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014794:	1ad3      	subs	r3, r2, r3
 8014796:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 8014798:	693b      	ldr	r3, [r7, #16]
 801479a:	2b7f      	cmp	r3, #127	@ 0x7f
 801479c:	d801      	bhi.n	80147a2 <f_mkfs+0x15e>
 801479e:	230e      	movs	r3, #14
 80147a0:	e376      	b.n	8014e90 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	2b80      	cmp	r3, #128	@ 0x80
 80147a6:	d901      	bls.n	80147ac <f_mkfs+0x168>
 80147a8:	2313      	movs	r3, #19
 80147aa:	e371      	b.n	8014e90 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80147ac:	7afb      	ldrb	r3, [r7, #11]
 80147ae:	f003 0302 	and.w	r3, r3, #2
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d00d      	beq.n	80147d2 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80147b6:	7afb      	ldrb	r3, [r7, #11]
 80147b8:	f003 0307 	and.w	r3, r3, #7
 80147bc:	2b02      	cmp	r3, #2
 80147be:	d004      	beq.n	80147ca <f_mkfs+0x186>
 80147c0:	7afb      	ldrb	r3, [r7, #11]
 80147c2:	f003 0301 	and.w	r3, r3, #1
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d103      	bne.n	80147d2 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 80147ca:	2303      	movs	r3, #3
 80147cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80147d0:	e009      	b.n	80147e6 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 80147d2:	7afb      	ldrb	r3, [r7, #11]
 80147d4:	f003 0301 	and.w	r3, r3, #1
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d101      	bne.n	80147e0 <f_mkfs+0x19c>
 80147dc:	2313      	movs	r3, #19
 80147de:	e357      	b.n	8014e90 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 80147e0:	2302      	movs	r3, #2
 80147e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 80147ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80147ee:	2b03      	cmp	r3, #3
 80147f0:	d13c      	bne.n	801486c <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 80147f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d11b      	bne.n	8014830 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 80147f8:	693b      	ldr	r3, [r7, #16]
 80147fa:	0c5b      	lsrs	r3, r3, #17
 80147fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80147fe:	2300      	movs	r3, #0
 8014800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014802:	2301      	movs	r3, #1
 8014804:	653b      	str	r3, [r7, #80]	@ 0x50
 8014806:	e005      	b.n	8014814 <f_mkfs+0x1d0>
 8014808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801480a:	3301      	adds	r3, #1
 801480c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801480e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014810:	005b      	lsls	r3, r3, #1
 8014812:	653b      	str	r3, [r7, #80]	@ 0x50
 8014814:	4a2d      	ldr	r2, [pc, #180]	@ (80148cc <f_mkfs+0x288>)
 8014816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d007      	beq.n	8014830 <f_mkfs+0x1ec>
 8014820:	4a2a      	ldr	r2, [pc, #168]	@ (80148cc <f_mkfs+0x288>)
 8014822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014828:	461a      	mov	r2, r3
 801482a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801482c:	4293      	cmp	r3, r2
 801482e:	d2eb      	bcs.n	8014808 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 8014830:	693a      	ldr	r2, [r7, #16]
 8014832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014834:	fbb2 f3f3 	udiv	r3, r2, r3
 8014838:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 801483a:	6a3b      	ldr	r3, [r7, #32]
 801483c:	3302      	adds	r3, #2
 801483e:	009a      	lsls	r2, r3, #2
 8014840:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014842:	4413      	add	r3, r2
 8014844:	1e5a      	subs	r2, r3, #1
 8014846:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014848:	fbb2 f3f3 	udiv	r3, r2, r3
 801484c:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 801484e:	2320      	movs	r3, #32
 8014850:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 8014852:	2300      	movs	r3, #0
 8014854:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8014856:	6a3b      	ldr	r3, [r7, #32]
 8014858:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 801485c:	4293      	cmp	r3, r2
 801485e:	d903      	bls.n	8014868 <f_mkfs+0x224>
 8014860:	6a3b      	ldr	r3, [r7, #32]
 8014862:	4a1b      	ldr	r2, [pc, #108]	@ (80148d0 <f_mkfs+0x28c>)
 8014864:	4293      	cmp	r3, r2
 8014866:	d952      	bls.n	801490e <f_mkfs+0x2ca>
 8014868:	230e      	movs	r3, #14
 801486a:	e311      	b.n	8014e90 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 801486c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801486e:	2b00      	cmp	r3, #0
 8014870:	d11b      	bne.n	80148aa <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 8014872:	693b      	ldr	r3, [r7, #16]
 8014874:	0b1b      	lsrs	r3, r3, #12
 8014876:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8014878:	2300      	movs	r3, #0
 801487a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801487c:	2301      	movs	r3, #1
 801487e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014880:	e005      	b.n	801488e <f_mkfs+0x24a>
 8014882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014884:	3301      	adds	r3, #1
 8014886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801488a:	005b      	lsls	r3, r3, #1
 801488c:	653b      	str	r3, [r7, #80]	@ 0x50
 801488e:	4a11      	ldr	r2, [pc, #68]	@ (80148d4 <f_mkfs+0x290>)
 8014890:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d007      	beq.n	80148aa <f_mkfs+0x266>
 801489a:	4a0e      	ldr	r2, [pc, #56]	@ (80148d4 <f_mkfs+0x290>)
 801489c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801489e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80148a2:	461a      	mov	r2, r3
 80148a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80148a6:	4293      	cmp	r3, r2
 80148a8:	d2eb      	bcs.n	8014882 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 80148aa:	693a      	ldr	r2, [r7, #16]
 80148ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80148ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80148b2:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 80148b4:	6a3b      	ldr	r3, [r7, #32]
 80148b6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80148ba:	4293      	cmp	r3, r2
 80148bc:	d90c      	bls.n	80148d8 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80148be:	6a3b      	ldr	r3, [r7, #32]
 80148c0:	3302      	adds	r3, #2
 80148c2:	005b      	lsls	r3, r3, #1
 80148c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80148c6:	e012      	b.n	80148ee <f_mkfs+0x2aa>
 80148c8:	20001c44 	.word	0x20001c44
 80148cc:	0801caa8 	.word	0x0801caa8
 80148d0:	0ffffff5 	.word	0x0ffffff5
 80148d4:	0801cab8 	.word	0x0801cab8
				} else {
					fmt = FS_FAT12;
 80148d8:	2301      	movs	r3, #1
 80148da:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80148de:	6a3a      	ldr	r2, [r7, #32]
 80148e0:	4613      	mov	r3, r2
 80148e2:	005b      	lsls	r3, r3, #1
 80148e4:	4413      	add	r3, r2
 80148e6:	3301      	adds	r3, #1
 80148e8:	085b      	lsrs	r3, r3, #1
 80148ea:	3303      	adds	r3, #3
 80148ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80148ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80148f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80148f2:	4413      	add	r3, r2
 80148f4:	1e5a      	subs	r2, r3, #1
 80148f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80148f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80148fc:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 80148fe:	2301      	movs	r3, #1
 8014900:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 8014902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014904:	015a      	lsls	r2, r3, #5
 8014906:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014908:	fbb2 f3f3 	udiv	r3, r2, r3
 801490c:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 801490e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014912:	4413      	add	r3, r2
 8014914:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8014916:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014918:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801491a:	fb03 f202 	mul.w	r2, r3, r2
 801491e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014920:	4413      	add	r3, r2
 8014922:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014924:	4413      	add	r3, r2
 8014926:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8014928:	697a      	ldr	r2, [r7, #20]
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	4413      	add	r3, r2
 801492e:	1e5a      	subs	r2, r3, #1
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	425b      	negs	r3, r3
 8014934:	401a      	ands	r2, r3
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	1ad3      	subs	r3, r2, r3
 801493a:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 801493c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014940:	2b03      	cmp	r3, #3
 8014942:	d108      	bne.n	8014956 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 8014944:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014948:	4413      	add	r3, r2
 801494a:	657b      	str	r3, [r7, #84]	@ 0x54
 801494c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801494e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014950:	4413      	add	r3, r2
 8014952:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014954:	e006      	b.n	8014964 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 8014956:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801495a:	fbb2 f3f3 	udiv	r3, r2, r3
 801495e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014960:	4413      	add	r3, r2
 8014962:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8014964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014966:	011a      	lsls	r2, r3, #4
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	441a      	add	r2, r3
 801496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801496e:	1ad2      	subs	r2, r2, r3
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	429a      	cmp	r2, r3
 8014974:	d901      	bls.n	801497a <f_mkfs+0x336>
 8014976:	230e      	movs	r3, #14
 8014978:	e28a      	b.n	8014e90 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 801497a:	693a      	ldr	r2, [r7, #16]
 801497c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801497e:	1ad2      	subs	r2, r2, r3
 8014980:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014982:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014984:	fb01 f303 	mul.w	r3, r1, r3
 8014988:	1ad2      	subs	r2, r2, r3
 801498a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801498c:	1ad2      	subs	r2, r2, r3
 801498e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014990:	fbb2 f3f3 	udiv	r3, r2, r3
 8014994:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 8014996:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 801499a:	2b03      	cmp	r3, #3
 801499c:	d10f      	bne.n	80149be <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 801499e:	6a3b      	ldr	r3, [r7, #32]
 80149a0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80149a4:	4293      	cmp	r3, r2
 80149a6:	d80a      	bhi.n	80149be <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d105      	bne.n	80149ba <f_mkfs+0x376>
 80149ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149b0:	085b      	lsrs	r3, r3, #1
 80149b2:	607b      	str	r3, [r7, #4]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d144      	bne.n	8014a44 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 80149ba:	230e      	movs	r3, #14
 80149bc:	e268      	b.n	8014e90 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 80149be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80149c2:	2b02      	cmp	r3, #2
 80149c4:	d133      	bne.n	8014a2e <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 80149c6:	6a3b      	ldr	r3, [r7, #32]
 80149c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80149cc:	4293      	cmp	r3, r2
 80149ce:	d91e      	bls.n	8014a0e <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d107      	bne.n	80149e6 <f_mkfs+0x3a2>
 80149d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149d8:	005b      	lsls	r3, r3, #1
 80149da:	2b40      	cmp	r3, #64	@ 0x40
 80149dc:	d803      	bhi.n	80149e6 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 80149de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80149e0:	005b      	lsls	r3, r3, #1
 80149e2:	607b      	str	r3, [r7, #4]
 80149e4:	e033      	b.n	8014a4e <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 80149e6:	7afb      	ldrb	r3, [r7, #11]
 80149e8:	f003 0302 	and.w	r3, r3, #2
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d003      	beq.n	80149f8 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 80149f0:	2303      	movs	r3, #3
 80149f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80149f6:	e02a      	b.n	8014a4e <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d105      	bne.n	8014a0a <f_mkfs+0x3c6>
 80149fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a00:	005b      	lsls	r3, r3, #1
 8014a02:	607b      	str	r3, [r7, #4]
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	2b80      	cmp	r3, #128	@ 0x80
 8014a08:	d91e      	bls.n	8014a48 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8014a0a:	230e      	movs	r3, #14
 8014a0c:	e240      	b.n	8014e90 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 8014a0e:	6a3b      	ldr	r3, [r7, #32]
 8014a10:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014a14:	4293      	cmp	r3, r2
 8014a16:	d80a      	bhi.n	8014a2e <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d105      	bne.n	8014a2a <f_mkfs+0x3e6>
 8014a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	607b      	str	r3, [r7, #4]
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	2b80      	cmp	r3, #128	@ 0x80
 8014a28:	d910      	bls.n	8014a4c <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8014a2a:	230e      	movs	r3, #14
 8014a2c:	e230      	b.n	8014e90 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 8014a2e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d10c      	bne.n	8014a50 <f_mkfs+0x40c>
 8014a36:	6a3b      	ldr	r3, [r7, #32]
 8014a38:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d907      	bls.n	8014a50 <f_mkfs+0x40c>
 8014a40:	230e      	movs	r3, #14
 8014a42:	e225      	b.n	8014e90 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8014a44:	bf00      	nop
 8014a46:	e6ce      	b.n	80147e6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014a48:	bf00      	nop
 8014a4a:	e6cc      	b.n	80147e6 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8014a4c:	bf00      	nop
			pau = au;
 8014a4e:	e6ca      	b.n	80147e6 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8014a50:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 8014a52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014a54:	461a      	mov	r2, r3
 8014a56:	2100      	movs	r1, #0
 8014a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a5a:	f7fd fe81 	bl	8012760 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8014a5e:	220b      	movs	r2, #11
 8014a60:	49b2      	ldr	r1, [pc, #712]	@ (8014d2c <f_mkfs+0x6e8>)
 8014a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014a64:	f7fd fe5b 	bl	801271e <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8014a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a6a:	330b      	adds	r3, #11
 8014a6c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014a6e:	4611      	mov	r1, r2
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7fd fe0d 	bl	8012690 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8014a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a78:	330d      	adds	r3, #13
 8014a7a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014a7c:	b2d2      	uxtb	r2, r2
 8014a7e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8014a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a82:	330e      	adds	r3, #14
 8014a84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014a86:	b292      	uxth	r2, r2
 8014a88:	4611      	mov	r1, r2
 8014a8a:	4618      	mov	r0, r3
 8014a8c:	f7fd fe00 	bl	8012690 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8014a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a92:	3310      	adds	r3, #16
 8014a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014a96:	b2d2      	uxtb	r2, r2
 8014a98:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8014a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014a9c:	f103 0211 	add.w	r2, r3, #17
 8014aa0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014aa4:	2b03      	cmp	r3, #3
 8014aa6:	d002      	beq.n	8014aae <f_mkfs+0x46a>
 8014aa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	e000      	b.n	8014ab0 <f_mkfs+0x46c>
 8014aae:	2300      	movs	r3, #0
 8014ab0:	4619      	mov	r1, r3
 8014ab2:	4610      	mov	r0, r2
 8014ab4:	f7fd fdec 	bl	8012690 <st_word>
		if (sz_vol < 0x10000) {
 8014ab8:	693b      	ldr	r3, [r7, #16]
 8014aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014abe:	d208      	bcs.n	8014ad2 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8014ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ac2:	3313      	adds	r3, #19
 8014ac4:	693a      	ldr	r2, [r7, #16]
 8014ac6:	b292      	uxth	r2, r2
 8014ac8:	4611      	mov	r1, r2
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7fd fde0 	bl	8012690 <st_word>
 8014ad0:	e006      	b.n	8014ae0 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8014ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ad4:	3320      	adds	r3, #32
 8014ad6:	693a      	ldr	r2, [r7, #16]
 8014ad8:	4611      	mov	r1, r2
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7fd fdf3 	bl	80126c6 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8014ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ae2:	3315      	adds	r3, #21
 8014ae4:	22f8      	movs	r2, #248	@ 0xf8
 8014ae6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8014ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014aea:	3318      	adds	r3, #24
 8014aec:	213f      	movs	r1, #63	@ 0x3f
 8014aee:	4618      	mov	r0, r3
 8014af0:	f7fd fdce 	bl	8012690 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8014af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014af6:	331a      	adds	r3, #26
 8014af8:	21ff      	movs	r1, #255	@ 0xff
 8014afa:	4618      	mov	r0, r3
 8014afc:	f7fd fdc8 	bl	8012690 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 8014b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b02:	331c      	adds	r3, #28
 8014b04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7fd fddd 	bl	80126c6 <st_dword>
		if (fmt == FS_FAT32) {
 8014b0c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014b10:	2b03      	cmp	r3, #3
 8014b12:	d131      	bne.n	8014b78 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8014b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b16:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 8014b1a:	f7fd f8f9 	bl	8011d10 <get_fattime>
 8014b1e:	4603      	mov	r3, r0
 8014b20:	4619      	mov	r1, r3
 8014b22:	4620      	mov	r0, r4
 8014b24:	f7fd fdcf 	bl	80126c6 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8014b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b2a:	3324      	adds	r3, #36	@ 0x24
 8014b2c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8014b2e:	4618      	mov	r0, r3
 8014b30:	f7fd fdc9 	bl	80126c6 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8014b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b36:	332c      	adds	r3, #44	@ 0x2c
 8014b38:	2102      	movs	r1, #2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fd fdc3 	bl	80126c6 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 8014b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b42:	3330      	adds	r3, #48	@ 0x30
 8014b44:	2101      	movs	r1, #1
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7fd fda2 	bl	8012690 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8014b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b4e:	3332      	adds	r3, #50	@ 0x32
 8014b50:	2106      	movs	r1, #6
 8014b52:	4618      	mov	r0, r3
 8014b54:	f7fd fd9c 	bl	8012690 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8014b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b5a:	3340      	adds	r3, #64	@ 0x40
 8014b5c:	2280      	movs	r2, #128	@ 0x80
 8014b5e:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8014b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b62:	3342      	adds	r3, #66	@ 0x42
 8014b64:	2229      	movs	r2, #41	@ 0x29
 8014b66:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8014b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b6a:	3347      	adds	r3, #71	@ 0x47
 8014b6c:	2213      	movs	r2, #19
 8014b6e:	4970      	ldr	r1, [pc, #448]	@ (8014d30 <f_mkfs+0x6ec>)
 8014b70:	4618      	mov	r0, r3
 8014b72:	f7fd fdd4 	bl	801271e <mem_cpy>
 8014b76:	e020      	b.n	8014bba <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8014b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b7a:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 8014b7e:	f7fd f8c7 	bl	8011d10 <get_fattime>
 8014b82:	4603      	mov	r3, r0
 8014b84:	4619      	mov	r1, r3
 8014b86:	4620      	mov	r0, r4
 8014b88:	f7fd fd9d 	bl	80126c6 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8014b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b8e:	3316      	adds	r3, #22
 8014b90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014b92:	b292      	uxth	r2, r2
 8014b94:	4611      	mov	r1, r2
 8014b96:	4618      	mov	r0, r3
 8014b98:	f7fd fd7a 	bl	8012690 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8014b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014b9e:	3324      	adds	r3, #36	@ 0x24
 8014ba0:	2280      	movs	r2, #128	@ 0x80
 8014ba2:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8014ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ba6:	3326      	adds	r3, #38	@ 0x26
 8014ba8:	2229      	movs	r2, #41	@ 0x29
 8014baa:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8014bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bae:	332b      	adds	r3, #43	@ 0x2b
 8014bb0:	2213      	movs	r2, #19
 8014bb2:	4960      	ldr	r1, [pc, #384]	@ (8014d34 <f_mkfs+0x6f0>)
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7fd fdb2 	bl	801271e <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8014bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bbc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014bc0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7fd fd63 	bl	8012690 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8014bca:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014bce:	2301      	movs	r3, #1
 8014bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014bd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014bd4:	f7fd fce2 	bl	801259c <disk_write>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d001      	beq.n	8014be2 <f_mkfs+0x59e>
 8014bde:	2301      	movs	r3, #1
 8014be0:	e156      	b.n	8014e90 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 8014be2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014be6:	2b03      	cmp	r3, #3
 8014be8:	d140      	bne.n	8014c6c <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8014bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bec:	1d9a      	adds	r2, r3, #6
 8014bee:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014bf6:	f7fd fcd1 	bl	801259c <disk_write>
			mem_set(buf, 0, ss);
 8014bfa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	2100      	movs	r1, #0
 8014c00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c02:	f7fd fdad 	bl	8012760 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8014c06:	494c      	ldr	r1, [pc, #304]	@ (8014d38 <f_mkfs+0x6f4>)
 8014c08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c0a:	f7fd fd5c 	bl	80126c6 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 8014c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c10:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8014c14:	4949      	ldr	r1, [pc, #292]	@ (8014d3c <f_mkfs+0x6f8>)
 8014c16:	4618      	mov	r0, r3
 8014c18:	f7fd fd55 	bl	80126c6 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8014c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c1e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8014c22:	6a3b      	ldr	r3, [r7, #32]
 8014c24:	3b01      	subs	r3, #1
 8014c26:	4619      	mov	r1, r3
 8014c28:	4610      	mov	r0, r2
 8014c2a:	f7fd fd4c 	bl	80126c6 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 8014c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c30:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8014c34:	2102      	movs	r1, #2
 8014c36:	4618      	mov	r0, r3
 8014c38:	f7fd fd45 	bl	80126c6 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8014c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c3e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014c42:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014c46:	4618      	mov	r0, r3
 8014c48:	f7fd fd22 	bl	8012690 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8014c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c4e:	1dda      	adds	r2, r3, #7
 8014c50:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014c54:	2301      	movs	r3, #1
 8014c56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c58:	f7fd fca0 	bl	801259c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8014c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c5e:	1c5a      	adds	r2, r3, #1
 8014c60:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014c64:	2301      	movs	r3, #1
 8014c66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014c68:	f7fd fc98 	bl	801259c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8014c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c6e:	2100      	movs	r1, #0
 8014c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c72:	f7fd fd75 	bl	8012760 <mem_set>
		sect = b_fat;		/* FAT start sector */
 8014c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014c78:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014c7e:	e04b      	b.n	8014d18 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8014c80:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014c84:	2b03      	cmp	r3, #3
 8014c86:	d113      	bne.n	8014cb0 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8014c88:	f06f 0107 	mvn.w	r1, #7
 8014c8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014c8e:	f7fd fd1a 	bl	80126c6 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 8014c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c94:	3304      	adds	r3, #4
 8014c96:	f04f 31ff 	mov.w	r1, #4294967295
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	f7fd fd13 	bl	80126c6 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ca2:	3308      	adds	r3, #8
 8014ca4:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f7fd fd0c 	bl	80126c6 <st_dword>
 8014cae:	e00b      	b.n	8014cc8 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8014cb0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	d101      	bne.n	8014cbc <f_mkfs+0x678>
 8014cb8:	4b21      	ldr	r3, [pc, #132]	@ (8014d40 <f_mkfs+0x6fc>)
 8014cba:	e001      	b.n	8014cc0 <f_mkfs+0x67c>
 8014cbc:	f06f 0307 	mvn.w	r3, #7
 8014cc0:	4619      	mov	r1, r3
 8014cc2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014cc4:	f7fd fcff 	bl	80126c6 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8014cc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014cca:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8014ccc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014cd0:	4293      	cmp	r3, r2
 8014cd2:	bf28      	it	cs
 8014cd4:	4613      	movcs	r3, r2
 8014cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014cd8:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014cdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014cde:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014ce0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014ce2:	f7fd fc5b 	bl	801259c <disk_write>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d001      	beq.n	8014cf0 <f_mkfs+0x6ac>
 8014cec:	2301      	movs	r3, #1
 8014cee:	e0cf      	b.n	8014e90 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 8014cf0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014cf2:	461a      	mov	r2, r3
 8014cf4:	2100      	movs	r1, #0
 8014cf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014cf8:	f7fd fd32 	bl	8012760 <mem_set>
				sect += n; nsect -= n;
 8014cfc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014cfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d00:	4413      	add	r3, r2
 8014d02:	667b      	str	r3, [r7, #100]	@ 0x64
 8014d04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014d06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d08:	1ad3      	subs	r3, r2, r3
 8014d0a:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 8014d0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d1dc      	bne.n	8014ccc <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8014d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d14:	3301      	adds	r3, #1
 8014d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014d18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014d1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d3af      	bcc.n	8014c80 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8014d20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d24:	2b03      	cmp	r3, #3
 8014d26:	d10d      	bne.n	8014d44 <f_mkfs+0x700>
 8014d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014d2a:	e00c      	b.n	8014d46 <f_mkfs+0x702>
 8014d2c:	0801c9ac 	.word	0x0801c9ac
 8014d30:	0801c9b8 	.word	0x0801c9b8
 8014d34:	0801c9cc 	.word	0x0801c9cc
 8014d38:	41615252 	.word	0x41615252
 8014d3c:	61417272 	.word	0x61417272
 8014d40:	00fffff8 	.word	0x00fffff8
 8014d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8014d46:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8014d48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d4c:	4293      	cmp	r3, r2
 8014d4e:	bf28      	it	cs
 8014d50:	4613      	movcs	r3, r2
 8014d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8014d54:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d5a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014d5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014d5e:	f7fd fc1d 	bl	801259c <disk_write>
 8014d62:	4603      	mov	r3, r0
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d001      	beq.n	8014d6c <f_mkfs+0x728>
 8014d68:	2301      	movs	r3, #1
 8014d6a:	e091      	b.n	8014e90 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 8014d6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8014d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d70:	4413      	add	r3, r2
 8014d72:	667b      	str	r3, [r7, #100]	@ 0x64
 8014d74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8014d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014d78:	1ad3      	subs	r3, r2, r3
 8014d7a:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 8014d7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d1e2      	bne.n	8014d48 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 8014d82:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d86:	2b03      	cmp	r3, #3
 8014d88:	d103      	bne.n	8014d92 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8014d8a:	230c      	movs	r3, #12
 8014d8c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014d90:	e010      	b.n	8014db4 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d98:	d303      	bcc.n	8014da2 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8014d9a:	2306      	movs	r3, #6
 8014d9c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8014da0:	e008      	b.n	8014db4 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 8014da2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014da6:	2b02      	cmp	r3, #2
 8014da8:	d101      	bne.n	8014dae <f_mkfs+0x76a>
 8014daa:	2304      	movs	r3, #4
 8014dac:	e000      	b.n	8014db0 <f_mkfs+0x76c>
 8014dae:	2301      	movs	r3, #1
 8014db0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 8014db4:	7afb      	ldrb	r3, [r7, #11]
 8014db6:	f003 0308 	and.w	r3, r3, #8
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d15b      	bne.n	8014e76 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8014dbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014dc0:	461a      	mov	r2, r3
 8014dc2:	2100      	movs	r1, #0
 8014dc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014dc6:	f7fd fccb 	bl	8012760 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8014dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dcc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8014dd0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f7fd fc5b 	bl	8012690 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8014dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ddc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8014de0:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	2200      	movs	r2, #0
 8014de6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8014de8:	69bb      	ldr	r3, [r7, #24]
 8014dea:	3301      	adds	r3, #1
 8014dec:	2201      	movs	r2, #1
 8014dee:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 8014df0:	69bb      	ldr	r3, [r7, #24]
 8014df2:	3302      	adds	r3, #2
 8014df4:	2201      	movs	r2, #1
 8014df6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	3303      	adds	r3, #3
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 8014e00:	69bb      	ldr	r3, [r7, #24]
 8014e02:	3304      	adds	r3, #4
 8014e04:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8014e08:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8014e0a:	693a      	ldr	r2, [r7, #16]
 8014e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e0e:	441a      	add	r2, r3
 8014e10:	4b21      	ldr	r3, [pc, #132]	@ (8014e98 <f_mkfs+0x854>)
 8014e12:	fba3 1302 	umull	r1, r3, r3, r2
 8014e16:	1ad2      	subs	r2, r2, r3
 8014e18:	0852      	lsrs	r2, r2, #1
 8014e1a:	4413      	add	r3, r2
 8014e1c:	0b5b      	lsrs	r3, r3, #13
 8014e1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 8014e20:	69bb      	ldr	r3, [r7, #24]
 8014e22:	3305      	adds	r3, #5
 8014e24:	22fe      	movs	r2, #254	@ 0xfe
 8014e26:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8014e28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014e2a:	089b      	lsrs	r3, r3, #2
 8014e2c:	b2da      	uxtb	r2, r3
 8014e2e:	69bb      	ldr	r3, [r7, #24]
 8014e30:	3306      	adds	r3, #6
 8014e32:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 8014e36:	b2d2      	uxtb	r2, r2
 8014e38:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8014e3a:	69bb      	ldr	r3, [r7, #24]
 8014e3c:	3307      	adds	r3, #7
 8014e3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014e40:	b2d2      	uxtb	r2, r2
 8014e42:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8014e44:	69bb      	ldr	r3, [r7, #24]
 8014e46:	3308      	adds	r3, #8
 8014e48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f7fd fc3b 	bl	80126c6 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8014e50:	69bb      	ldr	r3, [r7, #24]
 8014e52:	330c      	adds	r3, #12
 8014e54:	693a      	ldr	r2, [r7, #16]
 8014e56:	4611      	mov	r1, r2
 8014e58:	4618      	mov	r0, r3
 8014e5a:	f7fd fc34 	bl	80126c6 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8014e5e:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 8014e62:	2301      	movs	r3, #1
 8014e64:	2200      	movs	r2, #0
 8014e66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8014e68:	f7fd fb98 	bl	801259c <disk_write>
 8014e6c:	4603      	mov	r3, r0
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d001      	beq.n	8014e76 <f_mkfs+0x832>
 8014e72:	2301      	movs	r3, #1
 8014e74:	e00c      	b.n	8014e90 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 8014e76:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	2100      	movs	r1, #0
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7fd fbac 	bl	80125dc <disk_ioctl>
 8014e84:	4603      	mov	r3, r0
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d001      	beq.n	8014e8e <f_mkfs+0x84a>
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	e000      	b.n	8014e90 <f_mkfs+0x84c>

	return FR_OK;
 8014e8e:	2300      	movs	r3, #0
}
 8014e90:	4618      	mov	r0, r3
 8014e92:	3774      	adds	r7, #116	@ 0x74
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bd90      	pop	{r4, r7, pc}
 8014e98:	0515565b 	.word	0x0515565b

08014e9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014e9c:	b480      	push	{r7}
 8014e9e:	b087      	sub	sp, #28
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	4613      	mov	r3, r2
 8014ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014eaa:	2301      	movs	r3, #1
 8014eac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014eb2:	4b1f      	ldr	r3, [pc, #124]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014eb4:	7a5b      	ldrb	r3, [r3, #9]
 8014eb6:	b2db      	uxtb	r3, r3
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d131      	bne.n	8014f20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014ebe:	7a5b      	ldrb	r3, [r3, #9]
 8014ec0:	b2db      	uxtb	r3, r3
 8014ec2:	461a      	mov	r2, r3
 8014ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014ec6:	2100      	movs	r1, #0
 8014ec8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014eca:	4b19      	ldr	r3, [pc, #100]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014ecc:	7a5b      	ldrb	r3, [r3, #9]
 8014ece:	b2db      	uxtb	r3, r3
 8014ed0:	4a17      	ldr	r2, [pc, #92]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014ed2:	009b      	lsls	r3, r3, #2
 8014ed4:	4413      	add	r3, r2
 8014ed6:	68fa      	ldr	r2, [r7, #12]
 8014ed8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014eda:	4b15      	ldr	r3, [pc, #84]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014edc:	7a5b      	ldrb	r3, [r3, #9]
 8014ede:	b2db      	uxtb	r3, r3
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	4b13      	ldr	r3, [pc, #76]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014ee4:	4413      	add	r3, r2
 8014ee6:	79fa      	ldrb	r2, [r7, #7]
 8014ee8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014eea:	4b11      	ldr	r3, [pc, #68]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014eec:	7a5b      	ldrb	r3, [r3, #9]
 8014eee:	b2db      	uxtb	r3, r3
 8014ef0:	1c5a      	adds	r2, r3, #1
 8014ef2:	b2d1      	uxtb	r1, r2
 8014ef4:	4a0e      	ldr	r2, [pc, #56]	@ (8014f30 <FATFS_LinkDriverEx+0x94>)
 8014ef6:	7251      	strb	r1, [r2, #9]
 8014ef8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014efa:	7dbb      	ldrb	r3, [r7, #22]
 8014efc:	3330      	adds	r3, #48	@ 0x30
 8014efe:	b2da      	uxtb	r2, r3
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	3301      	adds	r3, #1
 8014f08:	223a      	movs	r2, #58	@ 0x3a
 8014f0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	3302      	adds	r3, #2
 8014f10:	222f      	movs	r2, #47	@ 0x2f
 8014f12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014f14:	68bb      	ldr	r3, [r7, #8]
 8014f16:	3303      	adds	r3, #3
 8014f18:	2200      	movs	r2, #0
 8014f1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8014f22:	4618      	mov	r0, r3
 8014f24:	371c      	adds	r7, #28
 8014f26:	46bd      	mov	sp, r7
 8014f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2c:	4770      	bx	lr
 8014f2e:	bf00      	nop
 8014f30:	20001c4c 	.word	0x20001c4c

08014f34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014f3e:	2200      	movs	r2, #0
 8014f40:	6839      	ldr	r1, [r7, #0]
 8014f42:	6878      	ldr	r0, [r7, #4]
 8014f44:	f7ff ffaa 	bl	8014e9c <FATFS_LinkDriverEx>
 8014f48:	4603      	mov	r3, r0
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3708      	adds	r7, #8
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8014f52:	b480      	push	{r7}
 8014f54:	b085      	sub	sp, #20
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	4603      	mov	r3, r0
 8014f5a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8014f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014f64:	2b84      	cmp	r3, #132	@ 0x84
 8014f66:	d005      	beq.n	8014f74 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8014f68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	4413      	add	r3, r2
 8014f70:	3303      	adds	r3, #3
 8014f72:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8014f74:	68fb      	ldr	r3, [r7, #12]
}
 8014f76:	4618      	mov	r0, r3
 8014f78:	3714      	adds	r7, #20
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f80:	4770      	bx	lr

08014f82 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8014f82:	b480      	push	{r7}
 8014f84:	b083      	sub	sp, #12
 8014f86:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014f88:	f3ef 8305 	mrs	r3, IPSR
 8014f8c:	607b      	str	r3, [r7, #4]
  return(result);
 8014f8e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	bf14      	ite	ne
 8014f94:	2301      	movne	r3, #1
 8014f96:	2300      	moveq	r3, #0
 8014f98:	b2db      	uxtb	r3, r3
}
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	370c      	adds	r7, #12
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa4:	4770      	bx	lr

08014fa6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014fa6:	b580      	push	{r7, lr}
 8014fa8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8014faa:	f001 f9cd 	bl	8016348 <vTaskStartScheduler>
  
  return osOK;
 8014fae:	2300      	movs	r3, #0
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8014fb8:	f001 fe2e 	bl	8016c18 <xTaskGetSchedulerState>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	d101      	bne.n	8014fc6 <osKernelRunning+0x12>
    return 0;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	e000      	b.n	8014fc8 <osKernelRunning+0x14>
  else
    return 1;
 8014fc6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8014fc8:	4618      	mov	r0, r3
 8014fca:	bd80      	pop	{r7, pc}

08014fcc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8014fd0:	f7ff ffd7 	bl	8014f82 <inHandlerMode>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d003      	beq.n	8014fe2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8014fda:	f001 fad9 	bl	8016590 <xTaskGetTickCountFromISR>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	e002      	b.n	8014fe8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8014fe2:	f001 fac5 	bl	8016570 <xTaskGetTickCount>
 8014fe6:	4603      	mov	r3, r0
  }
}
 8014fe8:	4618      	mov	r0, r3
 8014fea:	bd80      	pop	{r7, pc}

08014fec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014fee:	b089      	sub	sp, #36	@ 0x24
 8014ff0:	af04      	add	r7, sp, #16
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	695b      	ldr	r3, [r3, #20]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d020      	beq.n	8015040 <osThreadCreate+0x54>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	699b      	ldr	r3, [r3, #24]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d01c      	beq.n	8015040 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	685c      	ldr	r4, [r3, #4]
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	691e      	ldr	r6, [r3, #16]
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015018:	4618      	mov	r0, r3
 801501a:	f7ff ff9a 	bl	8014f52 <makeFreeRtosPriority>
 801501e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	695b      	ldr	r3, [r3, #20]
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015028:	9202      	str	r2, [sp, #8]
 801502a:	9301      	str	r3, [sp, #4]
 801502c:	9100      	str	r1, [sp, #0]
 801502e:	683b      	ldr	r3, [r7, #0]
 8015030:	4632      	mov	r2, r6
 8015032:	4629      	mov	r1, r5
 8015034:	4620      	mov	r0, r4
 8015036:	f000 ffa5 	bl	8015f84 <xTaskCreateStatic>
 801503a:	4603      	mov	r3, r0
 801503c:	60fb      	str	r3, [r7, #12]
 801503e:	e01c      	b.n	801507a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	685c      	ldr	r4, [r3, #4]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801504c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015054:	4618      	mov	r0, r3
 8015056:	f7ff ff7c 	bl	8014f52 <makeFreeRtosPriority>
 801505a:	4602      	mov	r2, r0
 801505c:	f107 030c 	add.w	r3, r7, #12
 8015060:	9301      	str	r3, [sp, #4]
 8015062:	9200      	str	r2, [sp, #0]
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	4632      	mov	r2, r6
 8015068:	4629      	mov	r1, r5
 801506a:	4620      	mov	r0, r4
 801506c:	f000 fff0 	bl	8016050 <xTaskCreate>
 8015070:	4603      	mov	r3, r0
 8015072:	2b01      	cmp	r3, #1
 8015074:	d001      	beq.n	801507a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8015076:	2300      	movs	r3, #0
 8015078:	e000      	b.n	801507c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801507a:	68fb      	ldr	r3, [r7, #12]
}
 801507c:	4618      	mov	r0, r3
 801507e:	3714      	adds	r7, #20
 8015080:	46bd      	mov	sp, r7
 8015082:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015084 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b084      	sub	sp, #16
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d001      	beq.n	801509a <osDelay+0x16>
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	e000      	b.n	801509c <osDelay+0x18>
 801509a:	2301      	movs	r3, #1
 801509c:	4618      	mov	r0, r3
 801509e:	f001 f91b 	bl	80162d8 <vTaskDelay>
  
  return osOK;
 80150a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80150a4:	4618      	mov	r0, r3
 80150a6:	3710      	adds	r7, #16
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80150ac:	b590      	push	{r4, r7, lr}
 80150ae:	b085      	sub	sp, #20
 80150b0:	af02      	add	r7, sp, #8
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	689b      	ldr	r3, [r3, #8]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d011      	beq.n	80150e2 <osMessageCreate+0x36>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	68db      	ldr	r3, [r3, #12]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d00d      	beq.n	80150e2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6818      	ldr	r0, [r3, #0]
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6859      	ldr	r1, [r3, #4]
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	689a      	ldr	r2, [r3, #8]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	68db      	ldr	r3, [r3, #12]
 80150d6:	2400      	movs	r4, #0
 80150d8:	9400      	str	r4, [sp, #0]
 80150da:	f000 f9f9 	bl	80154d0 <xQueueGenericCreateStatic>
 80150de:	4603      	mov	r3, r0
 80150e0:	e008      	b.n	80150f4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6818      	ldr	r0, [r3, #0]
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	685b      	ldr	r3, [r3, #4]
 80150ea:	2200      	movs	r2, #0
 80150ec:	4619      	mov	r1, r3
 80150ee:	f000 fa76 	bl	80155de <xQueueGenericCreate>
 80150f2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	370c      	adds	r7, #12
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd90      	pop	{r4, r7, pc}

080150fc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b086      	sub	sp, #24
 8015100:	af00      	add	r7, sp, #0
 8015102:	60f8      	str	r0, [r7, #12]
 8015104:	60b9      	str	r1, [r7, #8]
 8015106:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8015108:	2300      	movs	r3, #0
 801510a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8015110:	697b      	ldr	r3, [r7, #20]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d101      	bne.n	801511a <osMessagePut+0x1e>
    ticks = 1;
 8015116:	2301      	movs	r3, #1
 8015118:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 801511a:	f7ff ff32 	bl	8014f82 <inHandlerMode>
 801511e:	4603      	mov	r3, r0
 8015120:	2b00      	cmp	r3, #0
 8015122:	d018      	beq.n	8015156 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8015124:	f107 0210 	add.w	r2, r7, #16
 8015128:	f107 0108 	add.w	r1, r7, #8
 801512c:	2300      	movs	r3, #0
 801512e:	68f8      	ldr	r0, [r7, #12]
 8015130:	f000 fbc2 	bl	80158b8 <xQueueGenericSendFromISR>
 8015134:	4603      	mov	r3, r0
 8015136:	2b01      	cmp	r3, #1
 8015138:	d001      	beq.n	801513e <osMessagePut+0x42>
      return osErrorOS;
 801513a:	23ff      	movs	r3, #255	@ 0xff
 801513c:	e018      	b.n	8015170 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d014      	beq.n	801516e <osMessagePut+0x72>
 8015144:	4b0c      	ldr	r3, [pc, #48]	@ (8015178 <osMessagePut+0x7c>)
 8015146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801514a:	601a      	str	r2, [r3, #0]
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	f3bf 8f6f 	isb	sy
 8015154:	e00b      	b.n	801516e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8015156:	f107 0108 	add.w	r1, r7, #8
 801515a:	2300      	movs	r3, #0
 801515c:	697a      	ldr	r2, [r7, #20]
 801515e:	68f8      	ldr	r0, [r7, #12]
 8015160:	f000 faa0 	bl	80156a4 <xQueueGenericSend>
 8015164:	4603      	mov	r3, r0
 8015166:	2b01      	cmp	r3, #1
 8015168:	d001      	beq.n	801516e <osMessagePut+0x72>
      return osErrorOS;
 801516a:	23ff      	movs	r3, #255	@ 0xff
 801516c:	e000      	b.n	8015170 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801516e:	2300      	movs	r3, #0
}
 8015170:	4618      	mov	r0, r3
 8015172:	3718      	adds	r7, #24
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}
 8015178:	e000ed04 	.word	0xe000ed04

0801517c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801517c:	b590      	push	{r4, r7, lr}
 801517e:	b08b      	sub	sp, #44	@ 0x2c
 8015180:	af00      	add	r7, sp, #0
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8015188:	68bb      	ldr	r3, [r7, #8]
 801518a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801518c:	2300      	movs	r3, #0
 801518e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d10a      	bne.n	80151ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8015196:	2380      	movs	r3, #128	@ 0x80
 8015198:	617b      	str	r3, [r7, #20]
    return event;
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	461c      	mov	r4, r3
 801519e:	f107 0314 	add.w	r3, r7, #20
 80151a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80151a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80151aa:	e054      	b.n	8015256 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80151ac:	2300      	movs	r3, #0
 80151ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80151b0:	2300      	movs	r3, #0
 80151b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ba:	d103      	bne.n	80151c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80151bc:	f04f 33ff 	mov.w	r3, #4294967295
 80151c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80151c2:	e009      	b.n	80151d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d006      	beq.n	80151d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80151ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d101      	bne.n	80151d8 <osMessageGet+0x5c>
      ticks = 1;
 80151d4:	2301      	movs	r3, #1
 80151d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80151d8:	f7ff fed3 	bl	8014f82 <inHandlerMode>
 80151dc:	4603      	mov	r3, r0
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d01c      	beq.n	801521c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80151e2:	f107 0220 	add.w	r2, r7, #32
 80151e6:	f107 0314 	add.w	r3, r7, #20
 80151ea:	3304      	adds	r3, #4
 80151ec:	4619      	mov	r1, r3
 80151ee:	68b8      	ldr	r0, [r7, #8]
 80151f0:	f000 fcee 	bl	8015bd0 <xQueueReceiveFromISR>
 80151f4:	4603      	mov	r3, r0
 80151f6:	2b01      	cmp	r3, #1
 80151f8:	d102      	bne.n	8015200 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80151fa:	2310      	movs	r3, #16
 80151fc:	617b      	str	r3, [r7, #20]
 80151fe:	e001      	b.n	8015204 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8015200:	2300      	movs	r3, #0
 8015202:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8015204:	6a3b      	ldr	r3, [r7, #32]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d01d      	beq.n	8015246 <osMessageGet+0xca>
 801520a:	4b15      	ldr	r3, [pc, #84]	@ (8015260 <osMessageGet+0xe4>)
 801520c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015210:	601a      	str	r2, [r3, #0]
 8015212:	f3bf 8f4f 	dsb	sy
 8015216:	f3bf 8f6f 	isb	sy
 801521a:	e014      	b.n	8015246 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 801521c:	f107 0314 	add.w	r3, r7, #20
 8015220:	3304      	adds	r3, #4
 8015222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015224:	4619      	mov	r1, r3
 8015226:	68b8      	ldr	r0, [r7, #8]
 8015228:	f000 fbea 	bl	8015a00 <xQueueReceive>
 801522c:	4603      	mov	r3, r0
 801522e:	2b01      	cmp	r3, #1
 8015230:	d102      	bne.n	8015238 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8015232:	2310      	movs	r3, #16
 8015234:	617b      	str	r3, [r7, #20]
 8015236:	e006      	b.n	8015246 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8015238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801523a:	2b00      	cmp	r3, #0
 801523c:	d101      	bne.n	8015242 <osMessageGet+0xc6>
 801523e:	2300      	movs	r3, #0
 8015240:	e000      	b.n	8015244 <osMessageGet+0xc8>
 8015242:	2340      	movs	r3, #64	@ 0x40
 8015244:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	461c      	mov	r4, r3
 801524a:	f107 0314 	add.w	r3, r7, #20
 801524e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015256:	68f8      	ldr	r0, [r7, #12]
 8015258:	372c      	adds	r7, #44	@ 0x2c
 801525a:	46bd      	mov	sp, r7
 801525c:	bd90      	pop	{r4, r7, pc}
 801525e:	bf00      	nop
 8015260:	e000ed04 	.word	0xe000ed04

08015264 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801526c:	f7ff fe89 	bl	8014f82 <inHandlerMode>
 8015270:	4603      	mov	r3, r0
 8015272:	2b00      	cmp	r3, #0
 8015274:	d004      	beq.n	8015280 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8015276:	6878      	ldr	r0, [r7, #4]
 8015278:	f000 fd53 	bl	8015d22 <uxQueueMessagesWaitingFromISR>
 801527c:	4603      	mov	r3, r0
 801527e:	e003      	b.n	8015288 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f000 fd2d 	bl	8015ce0 <uxQueueMessagesWaiting>
 8015286:	4603      	mov	r3, r0
  }
}
 8015288:	4618      	mov	r0, r3
 801528a:	3708      	adds	r7, #8
 801528c:	46bd      	mov	sp, r7
 801528e:	bd80      	pop	{r7, pc}

08015290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015290:	b480      	push	{r7}
 8015292:	b083      	sub	sp, #12
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f103 0208 	add.w	r2, r3, #8
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f04f 32ff 	mov.w	r2, #4294967295
 80152a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f103 0208 	add.w	r2, r3, #8
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f103 0208 	add.w	r2, r3, #8
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2200      	movs	r2, #0
 80152c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80152c4:	bf00      	nop
 80152c6:	370c      	adds	r7, #12
 80152c8:	46bd      	mov	sp, r7
 80152ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ce:	4770      	bx	lr

080152d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80152d0:	b480      	push	{r7}
 80152d2:	b083      	sub	sp, #12
 80152d4:	af00      	add	r7, sp, #0
 80152d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	2200      	movs	r2, #0
 80152dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80152de:	bf00      	nop
 80152e0:	370c      	adds	r7, #12
 80152e2:	46bd      	mov	sp, r7
 80152e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e8:	4770      	bx	lr

080152ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80152ea:	b480      	push	{r7}
 80152ec:	b085      	sub	sp, #20
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
 80152f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	685b      	ldr	r3, [r3, #4]
 80152f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	68fa      	ldr	r2, [r7, #12]
 80152fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	689a      	ldr	r2, [r3, #8]
 8015304:	683b      	ldr	r3, [r7, #0]
 8015306:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	689b      	ldr	r3, [r3, #8]
 801530c:	683a      	ldr	r2, [r7, #0]
 801530e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	683a      	ldr	r2, [r7, #0]
 8015314:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	1c5a      	adds	r2, r3, #1
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	601a      	str	r2, [r3, #0]
}
 8015326:	bf00      	nop
 8015328:	3714      	adds	r7, #20
 801532a:	46bd      	mov	sp, r7
 801532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015330:	4770      	bx	lr

08015332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015332:	b480      	push	{r7}
 8015334:	b085      	sub	sp, #20
 8015336:	af00      	add	r7, sp, #0
 8015338:	6078      	str	r0, [r7, #4]
 801533a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801533c:	683b      	ldr	r3, [r7, #0]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015348:	d103      	bne.n	8015352 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	691b      	ldr	r3, [r3, #16]
 801534e:	60fb      	str	r3, [r7, #12]
 8015350:	e00c      	b.n	801536c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	3308      	adds	r3, #8
 8015356:	60fb      	str	r3, [r7, #12]
 8015358:	e002      	b.n	8015360 <vListInsert+0x2e>
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	60fb      	str	r3, [r7, #12]
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	685b      	ldr	r3, [r3, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	68ba      	ldr	r2, [r7, #8]
 8015368:	429a      	cmp	r2, r3
 801536a:	d2f6      	bcs.n	801535a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	685a      	ldr	r2, [r3, #4]
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	683a      	ldr	r2, [r7, #0]
 801537a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	68fa      	ldr	r2, [r7, #12]
 8015380:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	683a      	ldr	r2, [r7, #0]
 8015386:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015388:	683b      	ldr	r3, [r7, #0]
 801538a:	687a      	ldr	r2, [r7, #4]
 801538c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	1c5a      	adds	r2, r3, #1
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	601a      	str	r2, [r3, #0]
}
 8015398:	bf00      	nop
 801539a:	3714      	adds	r7, #20
 801539c:	46bd      	mov	sp, r7
 801539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a2:	4770      	bx	lr

080153a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80153a4:	b480      	push	{r7}
 80153a6:	b085      	sub	sp, #20
 80153a8:	af00      	add	r7, sp, #0
 80153aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	691b      	ldr	r3, [r3, #16]
 80153b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	687a      	ldr	r2, [r7, #4]
 80153b8:	6892      	ldr	r2, [r2, #8]
 80153ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	689b      	ldr	r3, [r3, #8]
 80153c0:	687a      	ldr	r2, [r7, #4]
 80153c2:	6852      	ldr	r2, [r2, #4]
 80153c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	685b      	ldr	r3, [r3, #4]
 80153ca:	687a      	ldr	r2, [r7, #4]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d103      	bne.n	80153d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	689a      	ldr	r2, [r3, #8]
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2200      	movs	r2, #0
 80153dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	1e5a      	subs	r2, r3, #1
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	681b      	ldr	r3, [r3, #0]
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3714      	adds	r7, #20
 80153f0:	46bd      	mov	sp, r7
 80153f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f6:	4770      	bx	lr

080153f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d10d      	bne.n	8015428 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015410:	b672      	cpsid	i
 8015412:	f383 8811 	msr	BASEPRI, r3
 8015416:	f3bf 8f6f 	isb	sy
 801541a:	f3bf 8f4f 	dsb	sy
 801541e:	b662      	cpsie	i
 8015420:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015422:	bf00      	nop
 8015424:	bf00      	nop
 8015426:	e7fd      	b.n	8015424 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8015428:	f001 fe18 	bl	801705c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015434:	68f9      	ldr	r1, [r7, #12]
 8015436:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8015438:	fb01 f303 	mul.w	r3, r1, r3
 801543c:	441a      	add	r2, r3
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	2200      	movs	r2, #0
 8015446:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	681a      	ldr	r2, [r3, #0]
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015458:	3b01      	subs	r3, #1
 801545a:	68f9      	ldr	r1, [r7, #12]
 801545c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801545e:	fb01 f303 	mul.w	r3, r1, r3
 8015462:	441a      	add	r2, r3
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	22ff      	movs	r2, #255	@ 0xff
 801546c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	22ff      	movs	r2, #255	@ 0xff
 8015474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d114      	bne.n	80154a8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	691b      	ldr	r3, [r3, #16]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d01a      	beq.n	80154bc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	3310      	adds	r3, #16
 801548a:	4618      	mov	r0, r3
 801548c:	f001 f9fa 	bl	8016884 <xTaskRemoveFromEventList>
 8015490:	4603      	mov	r3, r0
 8015492:	2b00      	cmp	r3, #0
 8015494:	d012      	beq.n	80154bc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015496:	4b0d      	ldr	r3, [pc, #52]	@ (80154cc <xQueueGenericReset+0xd4>)
 8015498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801549c:	601a      	str	r2, [r3, #0]
 801549e:	f3bf 8f4f 	dsb	sy
 80154a2:	f3bf 8f6f 	isb	sy
 80154a6:	e009      	b.n	80154bc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	3310      	adds	r3, #16
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7ff feef 	bl	8015290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	3324      	adds	r3, #36	@ 0x24
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7ff feea 	bl	8015290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80154bc:	f001 fe04 	bl	80170c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80154c0:	2301      	movs	r3, #1
}
 80154c2:	4618      	mov	r0, r3
 80154c4:	3710      	adds	r7, #16
 80154c6:	46bd      	mov	sp, r7
 80154c8:	bd80      	pop	{r7, pc}
 80154ca:	bf00      	nop
 80154cc:	e000ed04 	.word	0xe000ed04

080154d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b08e      	sub	sp, #56	@ 0x38
 80154d4:	af02      	add	r7, sp, #8
 80154d6:	60f8      	str	r0, [r7, #12]
 80154d8:	60b9      	str	r1, [r7, #8]
 80154da:	607a      	str	r2, [r7, #4]
 80154dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	d10d      	bne.n	8015500 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80154e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80154e8:	b672      	cpsid	i
 80154ea:	f383 8811 	msr	BASEPRI, r3
 80154ee:	f3bf 8f6f 	isb	sy
 80154f2:	f3bf 8f4f 	dsb	sy
 80154f6:	b662      	cpsie	i
 80154f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80154fa:	bf00      	nop
 80154fc:	bf00      	nop
 80154fe:	e7fd      	b.n	80154fc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015500:	683b      	ldr	r3, [r7, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d10d      	bne.n	8015522 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8015506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801550a:	b672      	cpsid	i
 801550c:	f383 8811 	msr	BASEPRI, r3
 8015510:	f3bf 8f6f 	isb	sy
 8015514:	f3bf 8f4f 	dsb	sy
 8015518:	b662      	cpsie	i
 801551a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801551c:	bf00      	nop
 801551e:	bf00      	nop
 8015520:	e7fd      	b.n	801551e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d002      	beq.n	801552e <xQueueGenericCreateStatic+0x5e>
 8015528:	68bb      	ldr	r3, [r7, #8]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d001      	beq.n	8015532 <xQueueGenericCreateStatic+0x62>
 801552e:	2301      	movs	r3, #1
 8015530:	e000      	b.n	8015534 <xQueueGenericCreateStatic+0x64>
 8015532:	2300      	movs	r3, #0
 8015534:	2b00      	cmp	r3, #0
 8015536:	d10d      	bne.n	8015554 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8015538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801553c:	b672      	cpsid	i
 801553e:	f383 8811 	msr	BASEPRI, r3
 8015542:	f3bf 8f6f 	isb	sy
 8015546:	f3bf 8f4f 	dsb	sy
 801554a:	b662      	cpsie	i
 801554c:	623b      	str	r3, [r7, #32]
}
 801554e:	bf00      	nop
 8015550:	bf00      	nop
 8015552:	e7fd      	b.n	8015550 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d102      	bne.n	8015560 <xQueueGenericCreateStatic+0x90>
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d101      	bne.n	8015564 <xQueueGenericCreateStatic+0x94>
 8015560:	2301      	movs	r3, #1
 8015562:	e000      	b.n	8015566 <xQueueGenericCreateStatic+0x96>
 8015564:	2300      	movs	r3, #0
 8015566:	2b00      	cmp	r3, #0
 8015568:	d10d      	bne.n	8015586 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801556e:	b672      	cpsid	i
 8015570:	f383 8811 	msr	BASEPRI, r3
 8015574:	f3bf 8f6f 	isb	sy
 8015578:	f3bf 8f4f 	dsb	sy
 801557c:	b662      	cpsie	i
 801557e:	61fb      	str	r3, [r7, #28]
}
 8015580:	bf00      	nop
 8015582:	bf00      	nop
 8015584:	e7fd      	b.n	8015582 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015586:	2348      	movs	r3, #72	@ 0x48
 8015588:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801558a:	697b      	ldr	r3, [r7, #20]
 801558c:	2b48      	cmp	r3, #72	@ 0x48
 801558e:	d00d      	beq.n	80155ac <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8015590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015594:	b672      	cpsid	i
 8015596:	f383 8811 	msr	BASEPRI, r3
 801559a:	f3bf 8f6f 	isb	sy
 801559e:	f3bf 8f4f 	dsb	sy
 80155a2:	b662      	cpsie	i
 80155a4:	61bb      	str	r3, [r7, #24]
}
 80155a6:	bf00      	nop
 80155a8:	bf00      	nop
 80155aa:	e7fd      	b.n	80155a8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80155ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80155b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d00d      	beq.n	80155d4 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80155b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155ba:	2201      	movs	r2, #1
 80155bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80155c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80155c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155c6:	9300      	str	r3, [sp, #0]
 80155c8:	4613      	mov	r3, r2
 80155ca:	687a      	ldr	r2, [r7, #4]
 80155cc:	68b9      	ldr	r1, [r7, #8]
 80155ce:	68f8      	ldr	r0, [r7, #12]
 80155d0:	f000 f848 	bl	8015664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80155d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3730      	adds	r7, #48	@ 0x30
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}

080155de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80155de:	b580      	push	{r7, lr}
 80155e0:	b08a      	sub	sp, #40	@ 0x28
 80155e2:	af02      	add	r7, sp, #8
 80155e4:	60f8      	str	r0, [r7, #12]
 80155e6:	60b9      	str	r1, [r7, #8]
 80155e8:	4613      	mov	r3, r2
 80155ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d10d      	bne.n	801560e <xQueueGenericCreate+0x30>
	__asm volatile
 80155f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155f6:	b672      	cpsid	i
 80155f8:	f383 8811 	msr	BASEPRI, r3
 80155fc:	f3bf 8f6f 	isb	sy
 8015600:	f3bf 8f4f 	dsb	sy
 8015604:	b662      	cpsie	i
 8015606:	613b      	str	r3, [r7, #16]
}
 8015608:	bf00      	nop
 801560a:	bf00      	nop
 801560c:	e7fd      	b.n	801560a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d102      	bne.n	801561a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8015614:	2300      	movs	r3, #0
 8015616:	61fb      	str	r3, [r7, #28]
 8015618:	e004      	b.n	8015624 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	68ba      	ldr	r2, [r7, #8]
 801561e:	fb02 f303 	mul.w	r3, r2, r3
 8015622:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	3348      	adds	r3, #72	@ 0x48
 8015628:	4618      	mov	r0, r3
 801562a:	f001 fe45 	bl	80172b8 <pvPortMalloc>
 801562e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015630:	69bb      	ldr	r3, [r7, #24]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d011      	beq.n	801565a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015636:	69bb      	ldr	r3, [r7, #24]
 8015638:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	3348      	adds	r3, #72	@ 0x48
 801563e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015640:	69bb      	ldr	r3, [r7, #24]
 8015642:	2200      	movs	r2, #0
 8015644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015648:	79fa      	ldrb	r2, [r7, #7]
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	9300      	str	r3, [sp, #0]
 801564e:	4613      	mov	r3, r2
 8015650:	697a      	ldr	r2, [r7, #20]
 8015652:	68b9      	ldr	r1, [r7, #8]
 8015654:	68f8      	ldr	r0, [r7, #12]
 8015656:	f000 f805 	bl	8015664 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801565a:	69bb      	ldr	r3, [r7, #24]
	}
 801565c:	4618      	mov	r0, r3
 801565e:	3720      	adds	r7, #32
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}

08015664 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b084      	sub	sp, #16
 8015668:	af00      	add	r7, sp, #0
 801566a:	60f8      	str	r0, [r7, #12]
 801566c:	60b9      	str	r1, [r7, #8]
 801566e:	607a      	str	r2, [r7, #4]
 8015670:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d103      	bne.n	8015680 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015678:	69bb      	ldr	r3, [r7, #24]
 801567a:	69ba      	ldr	r2, [r7, #24]
 801567c:	601a      	str	r2, [r3, #0]
 801567e:	e002      	b.n	8015686 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015680:	69bb      	ldr	r3, [r7, #24]
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015686:	69bb      	ldr	r3, [r7, #24]
 8015688:	68fa      	ldr	r2, [r7, #12]
 801568a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801568c:	69bb      	ldr	r3, [r7, #24]
 801568e:	68ba      	ldr	r2, [r7, #8]
 8015690:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015692:	2101      	movs	r1, #1
 8015694:	69b8      	ldr	r0, [r7, #24]
 8015696:	f7ff feaf 	bl	80153f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801569a:	bf00      	nop
 801569c:	3710      	adds	r7, #16
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd80      	pop	{r7, pc}
	...

080156a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b08e      	sub	sp, #56	@ 0x38
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	607a      	str	r2, [r7, #4]
 80156b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80156b2:	2300      	movs	r3, #0
 80156b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80156ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d10d      	bne.n	80156dc <xQueueGenericSend+0x38>
	__asm volatile
 80156c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156c4:	b672      	cpsid	i
 80156c6:	f383 8811 	msr	BASEPRI, r3
 80156ca:	f3bf 8f6f 	isb	sy
 80156ce:	f3bf 8f4f 	dsb	sy
 80156d2:	b662      	cpsie	i
 80156d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80156d6:	bf00      	nop
 80156d8:	bf00      	nop
 80156da:	e7fd      	b.n	80156d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80156dc:	68bb      	ldr	r3, [r7, #8]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d103      	bne.n	80156ea <xQueueGenericSend+0x46>
 80156e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d101      	bne.n	80156ee <xQueueGenericSend+0x4a>
 80156ea:	2301      	movs	r3, #1
 80156ec:	e000      	b.n	80156f0 <xQueueGenericSend+0x4c>
 80156ee:	2300      	movs	r3, #0
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d10d      	bne.n	8015710 <xQueueGenericSend+0x6c>
	__asm volatile
 80156f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80156f8:	b672      	cpsid	i
 80156fa:	f383 8811 	msr	BASEPRI, r3
 80156fe:	f3bf 8f6f 	isb	sy
 8015702:	f3bf 8f4f 	dsb	sy
 8015706:	b662      	cpsie	i
 8015708:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801570a:	bf00      	nop
 801570c:	bf00      	nop
 801570e:	e7fd      	b.n	801570c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015710:	683b      	ldr	r3, [r7, #0]
 8015712:	2b02      	cmp	r3, #2
 8015714:	d103      	bne.n	801571e <xQueueGenericSend+0x7a>
 8015716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801571a:	2b01      	cmp	r3, #1
 801571c:	d101      	bne.n	8015722 <xQueueGenericSend+0x7e>
 801571e:	2301      	movs	r3, #1
 8015720:	e000      	b.n	8015724 <xQueueGenericSend+0x80>
 8015722:	2300      	movs	r3, #0
 8015724:	2b00      	cmp	r3, #0
 8015726:	d10d      	bne.n	8015744 <xQueueGenericSend+0xa0>
	__asm volatile
 8015728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801572c:	b672      	cpsid	i
 801572e:	f383 8811 	msr	BASEPRI, r3
 8015732:	f3bf 8f6f 	isb	sy
 8015736:	f3bf 8f4f 	dsb	sy
 801573a:	b662      	cpsie	i
 801573c:	623b      	str	r3, [r7, #32]
}
 801573e:	bf00      	nop
 8015740:	bf00      	nop
 8015742:	e7fd      	b.n	8015740 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015744:	f001 fa68 	bl	8016c18 <xTaskGetSchedulerState>
 8015748:	4603      	mov	r3, r0
 801574a:	2b00      	cmp	r3, #0
 801574c:	d102      	bne.n	8015754 <xQueueGenericSend+0xb0>
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d101      	bne.n	8015758 <xQueueGenericSend+0xb4>
 8015754:	2301      	movs	r3, #1
 8015756:	e000      	b.n	801575a <xQueueGenericSend+0xb6>
 8015758:	2300      	movs	r3, #0
 801575a:	2b00      	cmp	r3, #0
 801575c:	d10d      	bne.n	801577a <xQueueGenericSend+0xd6>
	__asm volatile
 801575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015762:	b672      	cpsid	i
 8015764:	f383 8811 	msr	BASEPRI, r3
 8015768:	f3bf 8f6f 	isb	sy
 801576c:	f3bf 8f4f 	dsb	sy
 8015770:	b662      	cpsie	i
 8015772:	61fb      	str	r3, [r7, #28]
}
 8015774:	bf00      	nop
 8015776:	bf00      	nop
 8015778:	e7fd      	b.n	8015776 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801577a:	f001 fc6f 	bl	801705c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801577e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015780:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015786:	429a      	cmp	r2, r3
 8015788:	d302      	bcc.n	8015790 <xQueueGenericSend+0xec>
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	2b02      	cmp	r3, #2
 801578e:	d129      	bne.n	80157e4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015790:	683a      	ldr	r2, [r7, #0]
 8015792:	68b9      	ldr	r1, [r7, #8]
 8015794:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015796:	f000 fae5 	bl	8015d64 <prvCopyDataToQueue>
 801579a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801579e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d010      	beq.n	80157c6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80157a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157a6:	3324      	adds	r3, #36	@ 0x24
 80157a8:	4618      	mov	r0, r3
 80157aa:	f001 f86b 	bl	8016884 <xTaskRemoveFromEventList>
 80157ae:	4603      	mov	r3, r0
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d013      	beq.n	80157dc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80157b4:	4b3f      	ldr	r3, [pc, #252]	@ (80158b4 <xQueueGenericSend+0x210>)
 80157b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157ba:	601a      	str	r2, [r3, #0]
 80157bc:	f3bf 8f4f 	dsb	sy
 80157c0:	f3bf 8f6f 	isb	sy
 80157c4:	e00a      	b.n	80157dc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80157c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d007      	beq.n	80157dc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80157cc:	4b39      	ldr	r3, [pc, #228]	@ (80158b4 <xQueueGenericSend+0x210>)
 80157ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80157d2:	601a      	str	r2, [r3, #0]
 80157d4:	f3bf 8f4f 	dsb	sy
 80157d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80157dc:	f001 fc74 	bl	80170c8 <vPortExitCritical>
				return pdPASS;
 80157e0:	2301      	movs	r3, #1
 80157e2:	e063      	b.n	80158ac <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d103      	bne.n	80157f2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80157ea:	f001 fc6d 	bl	80170c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80157ee:	2300      	movs	r3, #0
 80157f0:	e05c      	b.n	80158ac <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80157f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d106      	bne.n	8015806 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80157f8:	f107 0314 	add.w	r3, r7, #20
 80157fc:	4618      	mov	r0, r3
 80157fe:	f001 f8a7 	bl	8016950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015802:	2301      	movs	r3, #1
 8015804:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015806:	f001 fc5f 	bl	80170c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801580a:	f000 fe03 	bl	8016414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801580e:	f001 fc25 	bl	801705c <vPortEnterCritical>
 8015812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015814:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015818:	b25b      	sxtb	r3, r3
 801581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801581e:	d103      	bne.n	8015828 <xQueueGenericSend+0x184>
 8015820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015822:	2200      	movs	r2, #0
 8015824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801582a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801582e:	b25b      	sxtb	r3, r3
 8015830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015834:	d103      	bne.n	801583e <xQueueGenericSend+0x19a>
 8015836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015838:	2200      	movs	r2, #0
 801583a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801583e:	f001 fc43 	bl	80170c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015842:	1d3a      	adds	r2, r7, #4
 8015844:	f107 0314 	add.w	r3, r7, #20
 8015848:	4611      	mov	r1, r2
 801584a:	4618      	mov	r0, r3
 801584c:	f001 f896 	bl	801697c <xTaskCheckForTimeOut>
 8015850:	4603      	mov	r3, r0
 8015852:	2b00      	cmp	r3, #0
 8015854:	d124      	bne.n	80158a0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015856:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015858:	f000 fb7c 	bl	8015f54 <prvIsQueueFull>
 801585c:	4603      	mov	r3, r0
 801585e:	2b00      	cmp	r3, #0
 8015860:	d018      	beq.n	8015894 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015864:	3310      	adds	r3, #16
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	4611      	mov	r1, r2
 801586a:	4618      	mov	r0, r3
 801586c:	f000 ffe2 	bl	8016834 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015872:	f000 fb07 	bl	8015e84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015876:	f000 fddb 	bl	8016430 <xTaskResumeAll>
 801587a:	4603      	mov	r3, r0
 801587c:	2b00      	cmp	r3, #0
 801587e:	f47f af7c 	bne.w	801577a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8015882:	4b0c      	ldr	r3, [pc, #48]	@ (80158b4 <xQueueGenericSend+0x210>)
 8015884:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015888:	601a      	str	r2, [r3, #0]
 801588a:	f3bf 8f4f 	dsb	sy
 801588e:	f3bf 8f6f 	isb	sy
 8015892:	e772      	b.n	801577a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015894:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015896:	f000 faf5 	bl	8015e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801589a:	f000 fdc9 	bl	8016430 <xTaskResumeAll>
 801589e:	e76c      	b.n	801577a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80158a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80158a2:	f000 faef 	bl	8015e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80158a6:	f000 fdc3 	bl	8016430 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80158aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3738      	adds	r7, #56	@ 0x38
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}
 80158b4:	e000ed04 	.word	0xe000ed04

080158b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b08e      	sub	sp, #56	@ 0x38
 80158bc:	af00      	add	r7, sp, #0
 80158be:	60f8      	str	r0, [r7, #12]
 80158c0:	60b9      	str	r1, [r7, #8]
 80158c2:	607a      	str	r2, [r7, #4]
 80158c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80158c6:	68fb      	ldr	r3, [r7, #12]
 80158c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80158ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d10d      	bne.n	80158ec <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80158d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80158d4:	b672      	cpsid	i
 80158d6:	f383 8811 	msr	BASEPRI, r3
 80158da:	f3bf 8f6f 	isb	sy
 80158de:	f3bf 8f4f 	dsb	sy
 80158e2:	b662      	cpsie	i
 80158e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80158e6:	bf00      	nop
 80158e8:	bf00      	nop
 80158ea:	e7fd      	b.n	80158e8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80158ec:	68bb      	ldr	r3, [r7, #8]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d103      	bne.n	80158fa <xQueueGenericSendFromISR+0x42>
 80158f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d101      	bne.n	80158fe <xQueueGenericSendFromISR+0x46>
 80158fa:	2301      	movs	r3, #1
 80158fc:	e000      	b.n	8015900 <xQueueGenericSendFromISR+0x48>
 80158fe:	2300      	movs	r3, #0
 8015900:	2b00      	cmp	r3, #0
 8015902:	d10d      	bne.n	8015920 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8015904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015908:	b672      	cpsid	i
 801590a:	f383 8811 	msr	BASEPRI, r3
 801590e:	f3bf 8f6f 	isb	sy
 8015912:	f3bf 8f4f 	dsb	sy
 8015916:	b662      	cpsie	i
 8015918:	623b      	str	r3, [r7, #32]
}
 801591a:	bf00      	nop
 801591c:	bf00      	nop
 801591e:	e7fd      	b.n	801591c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	2b02      	cmp	r3, #2
 8015924:	d103      	bne.n	801592e <xQueueGenericSendFromISR+0x76>
 8015926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801592a:	2b01      	cmp	r3, #1
 801592c:	d101      	bne.n	8015932 <xQueueGenericSendFromISR+0x7a>
 801592e:	2301      	movs	r3, #1
 8015930:	e000      	b.n	8015934 <xQueueGenericSendFromISR+0x7c>
 8015932:	2300      	movs	r3, #0
 8015934:	2b00      	cmp	r3, #0
 8015936:	d10d      	bne.n	8015954 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8015938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801593c:	b672      	cpsid	i
 801593e:	f383 8811 	msr	BASEPRI, r3
 8015942:	f3bf 8f6f 	isb	sy
 8015946:	f3bf 8f4f 	dsb	sy
 801594a:	b662      	cpsie	i
 801594c:	61fb      	str	r3, [r7, #28]
}
 801594e:	bf00      	nop
 8015950:	bf00      	nop
 8015952:	e7fd      	b.n	8015950 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015954:	f001 fc6a 	bl	801722c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015958:	f3ef 8211 	mrs	r2, BASEPRI
 801595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015960:	b672      	cpsid	i
 8015962:	f383 8811 	msr	BASEPRI, r3
 8015966:	f3bf 8f6f 	isb	sy
 801596a:	f3bf 8f4f 	dsb	sy
 801596e:	b662      	cpsie	i
 8015970:	61ba      	str	r2, [r7, #24]
 8015972:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015974:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015976:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801597a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801597e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015980:	429a      	cmp	r2, r3
 8015982:	d302      	bcc.n	801598a <xQueueGenericSendFromISR+0xd2>
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	2b02      	cmp	r3, #2
 8015988:	d12c      	bne.n	80159e4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801598c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015990:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015994:	683a      	ldr	r2, [r7, #0]
 8015996:	68b9      	ldr	r1, [r7, #8]
 8015998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801599a:	f000 f9e3 	bl	8015d64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801599e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80159a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159a6:	d112      	bne.n	80159ce <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80159a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d016      	beq.n	80159de <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80159b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159b2:	3324      	adds	r3, #36	@ 0x24
 80159b4:	4618      	mov	r0, r3
 80159b6:	f000 ff65 	bl	8016884 <xTaskRemoveFromEventList>
 80159ba:	4603      	mov	r3, r0
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d00e      	beq.n	80159de <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d00b      	beq.n	80159de <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	2201      	movs	r2, #1
 80159ca:	601a      	str	r2, [r3, #0]
 80159cc:	e007      	b.n	80159de <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80159ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80159d2:	3301      	adds	r3, #1
 80159d4:	b2db      	uxtb	r3, r3
 80159d6:	b25a      	sxtb	r2, r3
 80159d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80159de:	2301      	movs	r3, #1
 80159e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80159e2:	e001      	b.n	80159e8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80159e4:	2300      	movs	r3, #0
 80159e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80159e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80159ec:	693b      	ldr	r3, [r7, #16]
 80159ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80159f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80159f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3738      	adds	r7, #56	@ 0x38
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
	...

08015a00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b08c      	sub	sp, #48	@ 0x30
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	60f8      	str	r0, [r7, #12]
 8015a08:	60b9      	str	r1, [r7, #8]
 8015a0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8015a0c:	2300      	movs	r3, #0
 8015a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8015a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d10d      	bne.n	8015a36 <xQueueReceive+0x36>
	__asm volatile
 8015a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a1e:	b672      	cpsid	i
 8015a20:	f383 8811 	msr	BASEPRI, r3
 8015a24:	f3bf 8f6f 	isb	sy
 8015a28:	f3bf 8f4f 	dsb	sy
 8015a2c:	b662      	cpsie	i
 8015a2e:	623b      	str	r3, [r7, #32]
}
 8015a30:	bf00      	nop
 8015a32:	bf00      	nop
 8015a34:	e7fd      	b.n	8015a32 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d103      	bne.n	8015a44 <xQueueReceive+0x44>
 8015a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d101      	bne.n	8015a48 <xQueueReceive+0x48>
 8015a44:	2301      	movs	r3, #1
 8015a46:	e000      	b.n	8015a4a <xQueueReceive+0x4a>
 8015a48:	2300      	movs	r3, #0
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d10d      	bne.n	8015a6a <xQueueReceive+0x6a>
	__asm volatile
 8015a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a52:	b672      	cpsid	i
 8015a54:	f383 8811 	msr	BASEPRI, r3
 8015a58:	f3bf 8f6f 	isb	sy
 8015a5c:	f3bf 8f4f 	dsb	sy
 8015a60:	b662      	cpsie	i
 8015a62:	61fb      	str	r3, [r7, #28]
}
 8015a64:	bf00      	nop
 8015a66:	bf00      	nop
 8015a68:	e7fd      	b.n	8015a66 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015a6a:	f001 f8d5 	bl	8016c18 <xTaskGetSchedulerState>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d102      	bne.n	8015a7a <xQueueReceive+0x7a>
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d101      	bne.n	8015a7e <xQueueReceive+0x7e>
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	e000      	b.n	8015a80 <xQueueReceive+0x80>
 8015a7e:	2300      	movs	r3, #0
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d10d      	bne.n	8015aa0 <xQueueReceive+0xa0>
	__asm volatile
 8015a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a88:	b672      	cpsid	i
 8015a8a:	f383 8811 	msr	BASEPRI, r3
 8015a8e:	f3bf 8f6f 	isb	sy
 8015a92:	f3bf 8f4f 	dsb	sy
 8015a96:	b662      	cpsie	i
 8015a98:	61bb      	str	r3, [r7, #24]
}
 8015a9a:	bf00      	nop
 8015a9c:	bf00      	nop
 8015a9e:	e7fd      	b.n	8015a9c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015aa0:	f001 fadc 	bl	801705c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015aa8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d01f      	beq.n	8015af0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015ab0:	68b9      	ldr	r1, [r7, #8]
 8015ab2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ab4:	f000 f9c0 	bl	8015e38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aba:	1e5a      	subs	r2, r3, #1
 8015abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015abe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ac2:	691b      	ldr	r3, [r3, #16]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d00f      	beq.n	8015ae8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015aca:	3310      	adds	r3, #16
 8015acc:	4618      	mov	r0, r3
 8015ace:	f000 fed9 	bl	8016884 <xTaskRemoveFromEventList>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d007      	beq.n	8015ae8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8015bcc <xQueueReceive+0x1cc>)
 8015ada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ade:	601a      	str	r2, [r3, #0]
 8015ae0:	f3bf 8f4f 	dsb	sy
 8015ae4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015ae8:	f001 faee 	bl	80170c8 <vPortExitCritical>
				return pdPASS;
 8015aec:	2301      	movs	r3, #1
 8015aee:	e069      	b.n	8015bc4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d103      	bne.n	8015afe <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015af6:	f001 fae7 	bl	80170c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015afa:	2300      	movs	r3, #0
 8015afc:	e062      	b.n	8015bc4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d106      	bne.n	8015b12 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015b04:	f107 0310 	add.w	r3, r7, #16
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f000 ff21 	bl	8016950 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015b0e:	2301      	movs	r3, #1
 8015b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015b12:	f001 fad9 	bl	80170c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015b16:	f000 fc7d 	bl	8016414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b1a:	f001 fa9f 	bl	801705c <vPortEnterCritical>
 8015b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015b24:	b25b      	sxtb	r3, r3
 8015b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b2a:	d103      	bne.n	8015b34 <xQueueReceive+0x134>
 8015b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b2e:	2200      	movs	r2, #0
 8015b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015b3a:	b25b      	sxtb	r3, r3
 8015b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b40:	d103      	bne.n	8015b4a <xQueueReceive+0x14a>
 8015b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b44:	2200      	movs	r2, #0
 8015b46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015b4a:	f001 fabd 	bl	80170c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b4e:	1d3a      	adds	r2, r7, #4
 8015b50:	f107 0310 	add.w	r3, r7, #16
 8015b54:	4611      	mov	r1, r2
 8015b56:	4618      	mov	r0, r3
 8015b58:	f000 ff10 	bl	801697c <xTaskCheckForTimeOut>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d123      	bne.n	8015baa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b64:	f000 f9e0 	bl	8015f28 <prvIsQueueEmpty>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d017      	beq.n	8015b9e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b70:	3324      	adds	r3, #36	@ 0x24
 8015b72:	687a      	ldr	r2, [r7, #4]
 8015b74:	4611      	mov	r1, r2
 8015b76:	4618      	mov	r0, r3
 8015b78:	f000 fe5c 	bl	8016834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015b7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015b7e:	f000 f981 	bl	8015e84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015b82:	f000 fc55 	bl	8016430 <xTaskResumeAll>
 8015b86:	4603      	mov	r3, r0
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d189      	bne.n	8015aa0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8015b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8015bcc <xQueueReceive+0x1cc>)
 8015b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b92:	601a      	str	r2, [r3, #0]
 8015b94:	f3bf 8f4f 	dsb	sy
 8015b98:	f3bf 8f6f 	isb	sy
 8015b9c:	e780      	b.n	8015aa0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015ba0:	f000 f970 	bl	8015e84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015ba4:	f000 fc44 	bl	8016430 <xTaskResumeAll>
 8015ba8:	e77a      	b.n	8015aa0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015bac:	f000 f96a 	bl	8015e84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015bb0:	f000 fc3e 	bl	8016430 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015bb6:	f000 f9b7 	bl	8015f28 <prvIsQueueEmpty>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	f43f af6f 	beq.w	8015aa0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015bc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	3730      	adds	r7, #48	@ 0x30
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}
 8015bcc:	e000ed04 	.word	0xe000ed04

08015bd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b08e      	sub	sp, #56	@ 0x38
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	60f8      	str	r0, [r7, #12]
 8015bd8:	60b9      	str	r1, [r7, #8]
 8015bda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015bdc:	68fb      	ldr	r3, [r7, #12]
 8015bde:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8015be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d10d      	bne.n	8015c02 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8015be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bea:	b672      	cpsid	i
 8015bec:	f383 8811 	msr	BASEPRI, r3
 8015bf0:	f3bf 8f6f 	isb	sy
 8015bf4:	f3bf 8f4f 	dsb	sy
 8015bf8:	b662      	cpsie	i
 8015bfa:	623b      	str	r3, [r7, #32]
}
 8015bfc:	bf00      	nop
 8015bfe:	bf00      	nop
 8015c00:	e7fd      	b.n	8015bfe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d103      	bne.n	8015c10 <xQueueReceiveFromISR+0x40>
 8015c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d101      	bne.n	8015c14 <xQueueReceiveFromISR+0x44>
 8015c10:	2301      	movs	r3, #1
 8015c12:	e000      	b.n	8015c16 <xQueueReceiveFromISR+0x46>
 8015c14:	2300      	movs	r3, #0
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d10d      	bne.n	8015c36 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8015c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c1e:	b672      	cpsid	i
 8015c20:	f383 8811 	msr	BASEPRI, r3
 8015c24:	f3bf 8f6f 	isb	sy
 8015c28:	f3bf 8f4f 	dsb	sy
 8015c2c:	b662      	cpsie	i
 8015c2e:	61fb      	str	r3, [r7, #28]
}
 8015c30:	bf00      	nop
 8015c32:	bf00      	nop
 8015c34:	e7fd      	b.n	8015c32 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c36:	f001 faf9 	bl	801722c <vPortValidateInterruptPriority>
	__asm volatile
 8015c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8015c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c42:	b672      	cpsid	i
 8015c44:	f383 8811 	msr	BASEPRI, r3
 8015c48:	f3bf 8f6f 	isb	sy
 8015c4c:	f3bf 8f4f 	dsb	sy
 8015c50:	b662      	cpsie	i
 8015c52:	61ba      	str	r2, [r7, #24]
 8015c54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8015c56:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c5e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d02f      	beq.n	8015cc6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8015c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015c6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015c70:	68b9      	ldr	r1, [r7, #8]
 8015c72:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015c74:	f000 f8e0 	bl	8015e38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c7a:	1e5a      	subs	r2, r3, #1
 8015c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c7e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8015c80:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8015c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c88:	d112      	bne.n	8015cb0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c8c:	691b      	ldr	r3, [r3, #16]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d016      	beq.n	8015cc0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c94:	3310      	adds	r3, #16
 8015c96:	4618      	mov	r0, r3
 8015c98:	f000 fdf4 	bl	8016884 <xTaskRemoveFromEventList>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d00e      	beq.n	8015cc0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d00b      	beq.n	8015cc0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	2201      	movs	r2, #1
 8015cac:	601a      	str	r2, [r3, #0]
 8015cae:	e007      	b.n	8015cc0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015cb4:	3301      	adds	r3, #1
 8015cb6:	b2db      	uxtb	r3, r3
 8015cb8:	b25a      	sxtb	r2, r3
 8015cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8015cc4:	e001      	b.n	8015cca <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8015cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ccc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	f383 8811 	msr	BASEPRI, r3
}
 8015cd4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8015cd8:	4618      	mov	r0, r3
 8015cda:	3738      	adds	r7, #56	@ 0x38
 8015cdc:	46bd      	mov	sp, r7
 8015cde:	bd80      	pop	{r7, pc}

08015ce0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b084      	sub	sp, #16
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d10d      	bne.n	8015d0a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 8015cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cf2:	b672      	cpsid	i
 8015cf4:	f383 8811 	msr	BASEPRI, r3
 8015cf8:	f3bf 8f6f 	isb	sy
 8015cfc:	f3bf 8f4f 	dsb	sy
 8015d00:	b662      	cpsie	i
 8015d02:	60bb      	str	r3, [r7, #8]
}
 8015d04:	bf00      	nop
 8015d06:	bf00      	nop
 8015d08:	e7fd      	b.n	8015d06 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 8015d0a:	f001 f9a7 	bl	801705c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d12:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8015d14:	f001 f9d8 	bl	80170c8 <vPortExitCritical>

	return uxReturn;
 8015d18:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3710      	adds	r7, #16
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8015d22:	b480      	push	{r7}
 8015d24:	b087      	sub	sp, #28
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d10d      	bne.n	8015d50 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 8015d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d38:	b672      	cpsid	i
 8015d3a:	f383 8811 	msr	BASEPRI, r3
 8015d3e:	f3bf 8f6f 	isb	sy
 8015d42:	f3bf 8f4f 	dsb	sy
 8015d46:	b662      	cpsie	i
 8015d48:	60fb      	str	r3, [r7, #12]
}
 8015d4a:	bf00      	nop
 8015d4c:	bf00      	nop
 8015d4e:	e7fd      	b.n	8015d4c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8015d50:	697b      	ldr	r3, [r7, #20]
 8015d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d54:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8015d56:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8015d58:	4618      	mov	r0, r3
 8015d5a:	371c      	adds	r7, #28
 8015d5c:	46bd      	mov	sp, r7
 8015d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d62:	4770      	bx	lr

08015d64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b086      	sub	sp, #24
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	60f8      	str	r0, [r7, #12]
 8015d6c:	60b9      	str	r1, [r7, #8]
 8015d6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015d70:	2300      	movs	r3, #0
 8015d72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015d78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015d7a:	68fb      	ldr	r3, [r7, #12]
 8015d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d10d      	bne.n	8015d9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d14d      	bne.n	8015e26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	689b      	ldr	r3, [r3, #8]
 8015d8e:	4618      	mov	r0, r3
 8015d90:	f000 ff60 	bl	8016c54 <xTaskPriorityDisinherit>
 8015d94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	2200      	movs	r2, #0
 8015d9a:	609a      	str	r2, [r3, #8]
 8015d9c:	e043      	b.n	8015e26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d119      	bne.n	8015dd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	6858      	ldr	r0, [r3, #4]
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015dac:	461a      	mov	r2, r3
 8015dae:	68b9      	ldr	r1, [r7, #8]
 8015db0:	f002 f859 	bl	8017e66 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	685a      	ldr	r2, [r3, #4]
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015dbc:	441a      	add	r2, r3
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	685a      	ldr	r2, [r3, #4]
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	689b      	ldr	r3, [r3, #8]
 8015dca:	429a      	cmp	r2, r3
 8015dcc:	d32b      	bcc.n	8015e26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	681a      	ldr	r2, [r3, #0]
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	605a      	str	r2, [r3, #4]
 8015dd6:	e026      	b.n	8015e26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	68d8      	ldr	r0, [r3, #12]
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015de0:	461a      	mov	r2, r3
 8015de2:	68b9      	ldr	r1, [r7, #8]
 8015de4:	f002 f83f 	bl	8017e66 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	68da      	ldr	r2, [r3, #12]
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015df0:	425b      	negs	r3, r3
 8015df2:	441a      	add	r2, r3
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	68da      	ldr	r2, [r3, #12]
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d207      	bcs.n	8015e14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	689a      	ldr	r2, [r3, #8]
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e0c:	425b      	negs	r3, r3
 8015e0e:	441a      	add	r2, r3
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2b02      	cmp	r3, #2
 8015e18:	d105      	bne.n	8015e26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d002      	beq.n	8015e26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	3b01      	subs	r3, #1
 8015e24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	1c5a      	adds	r2, r3, #1
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8015e2e:	697b      	ldr	r3, [r7, #20]
}
 8015e30:	4618      	mov	r0, r3
 8015e32:	3718      	adds	r7, #24
 8015e34:	46bd      	mov	sp, r7
 8015e36:	bd80      	pop	{r7, pc}

08015e38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b082      	sub	sp, #8
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
 8015e40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d018      	beq.n	8015e7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	68da      	ldr	r2, [r3, #12]
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e52:	441a      	add	r2, r3
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	68da      	ldr	r2, [r3, #12]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	689b      	ldr	r3, [r3, #8]
 8015e60:	429a      	cmp	r2, r3
 8015e62:	d303      	bcc.n	8015e6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	681a      	ldr	r2, [r3, #0]
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	68d9      	ldr	r1, [r3, #12]
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e74:	461a      	mov	r2, r3
 8015e76:	6838      	ldr	r0, [r7, #0]
 8015e78:	f001 fff5 	bl	8017e66 <memcpy>
	}
}
 8015e7c:	bf00      	nop
 8015e7e:	3708      	adds	r7, #8
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b084      	sub	sp, #16
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015e8c:	f001 f8e6 	bl	801705c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015e96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015e98:	e011      	b.n	8015ebe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d012      	beq.n	8015ec8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	3324      	adds	r3, #36	@ 0x24
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f000 fcec 	bl	8016884 <xTaskRemoveFromEventList>
 8015eac:	4603      	mov	r3, r0
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d001      	beq.n	8015eb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015eb2:	f000 fdcb 	bl	8016a4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015eb6:	7bfb      	ldrb	r3, [r7, #15]
 8015eb8:	3b01      	subs	r3, #1
 8015eba:	b2db      	uxtb	r3, r3
 8015ebc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	dce9      	bgt.n	8015e9a <prvUnlockQueue+0x16>
 8015ec6:	e000      	b.n	8015eca <prvUnlockQueue+0x46>
					break;
 8015ec8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	22ff      	movs	r2, #255	@ 0xff
 8015ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8015ed2:	f001 f8f9 	bl	80170c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015ed6:	f001 f8c1 	bl	801705c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015ee0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015ee2:	e011      	b.n	8015f08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	691b      	ldr	r3, [r3, #16]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d012      	beq.n	8015f12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	3310      	adds	r3, #16
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f000 fcc7 	bl	8016884 <xTaskRemoveFromEventList>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d001      	beq.n	8015f00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015efc:	f000 fda6 	bl	8016a4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015f00:	7bbb      	ldrb	r3, [r7, #14]
 8015f02:	3b01      	subs	r3, #1
 8015f04:	b2db      	uxtb	r3, r3
 8015f06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	dce9      	bgt.n	8015ee4 <prvUnlockQueue+0x60>
 8015f10:	e000      	b.n	8015f14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015f12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	22ff      	movs	r2, #255	@ 0xff
 8015f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8015f1c:	f001 f8d4 	bl	80170c8 <vPortExitCritical>
}
 8015f20:	bf00      	nop
 8015f22:	3710      	adds	r7, #16
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}

08015f28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f30:	f001 f894 	bl	801705c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d102      	bne.n	8015f42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	60fb      	str	r3, [r7, #12]
 8015f40:	e001      	b.n	8015f46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8015f42:	2300      	movs	r3, #0
 8015f44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f46:	f001 f8bf 	bl	80170c8 <vPortExitCritical>

	return xReturn;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3710      	adds	r7, #16
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8015f5c:	f001 f87e 	bl	801705c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015f68:	429a      	cmp	r2, r3
 8015f6a:	d102      	bne.n	8015f72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015f6c:	2301      	movs	r3, #1
 8015f6e:	60fb      	str	r3, [r7, #12]
 8015f70:	e001      	b.n	8015f76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8015f72:	2300      	movs	r3, #0
 8015f74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8015f76:	f001 f8a7 	bl	80170c8 <vPortExitCritical>

	return xReturn;
 8015f7a:	68fb      	ldr	r3, [r7, #12]
}
 8015f7c:	4618      	mov	r0, r3
 8015f7e:	3710      	adds	r7, #16
 8015f80:	46bd      	mov	sp, r7
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b08e      	sub	sp, #56	@ 0x38
 8015f88:	af04      	add	r7, sp, #16
 8015f8a:	60f8      	str	r0, [r7, #12]
 8015f8c:	60b9      	str	r1, [r7, #8]
 8015f8e:	607a      	str	r2, [r7, #4]
 8015f90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d10d      	bne.n	8015fb4 <xTaskCreateStatic+0x30>
	__asm volatile
 8015f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015f9c:	b672      	cpsid	i
 8015f9e:	f383 8811 	msr	BASEPRI, r3
 8015fa2:	f3bf 8f6f 	isb	sy
 8015fa6:	f3bf 8f4f 	dsb	sy
 8015faa:	b662      	cpsie	i
 8015fac:	623b      	str	r3, [r7, #32]
}
 8015fae:	bf00      	nop
 8015fb0:	bf00      	nop
 8015fb2:	e7fd      	b.n	8015fb0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8015fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d10d      	bne.n	8015fd6 <xTaskCreateStatic+0x52>
	__asm volatile
 8015fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fbe:	b672      	cpsid	i
 8015fc0:	f383 8811 	msr	BASEPRI, r3
 8015fc4:	f3bf 8f6f 	isb	sy
 8015fc8:	f3bf 8f4f 	dsb	sy
 8015fcc:	b662      	cpsie	i
 8015fce:	61fb      	str	r3, [r7, #28]
}
 8015fd0:	bf00      	nop
 8015fd2:	bf00      	nop
 8015fd4:	e7fd      	b.n	8015fd2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015fd6:	2358      	movs	r3, #88	@ 0x58
 8015fd8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	2b58      	cmp	r3, #88	@ 0x58
 8015fde:	d00d      	beq.n	8015ffc <xTaskCreateStatic+0x78>
	__asm volatile
 8015fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fe4:	b672      	cpsid	i
 8015fe6:	f383 8811 	msr	BASEPRI, r3
 8015fea:	f3bf 8f6f 	isb	sy
 8015fee:	f3bf 8f4f 	dsb	sy
 8015ff2:	b662      	cpsie	i
 8015ff4:	61bb      	str	r3, [r7, #24]
}
 8015ff6:	bf00      	nop
 8015ff8:	bf00      	nop
 8015ffa:	e7fd      	b.n	8015ff8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015ffc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016000:	2b00      	cmp	r3, #0
 8016002:	d01e      	beq.n	8016042 <xTaskCreateStatic+0xbe>
 8016004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016006:	2b00      	cmp	r3, #0
 8016008:	d01b      	beq.n	8016042 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801600a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801600c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016010:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8016012:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016016:	2202      	movs	r2, #2
 8016018:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801601c:	2300      	movs	r3, #0
 801601e:	9303      	str	r3, [sp, #12]
 8016020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016022:	9302      	str	r3, [sp, #8]
 8016024:	f107 0314 	add.w	r3, r7, #20
 8016028:	9301      	str	r3, [sp, #4]
 801602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801602c:	9300      	str	r3, [sp, #0]
 801602e:	683b      	ldr	r3, [r7, #0]
 8016030:	687a      	ldr	r2, [r7, #4]
 8016032:	68b9      	ldr	r1, [r7, #8]
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f000 f850 	bl	80160da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801603a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801603c:	f000 f8e2 	bl	8016204 <prvAddNewTaskToReadyList>
 8016040:	e001      	b.n	8016046 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8016042:	2300      	movs	r3, #0
 8016044:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016046:	697b      	ldr	r3, [r7, #20]
	}
 8016048:	4618      	mov	r0, r3
 801604a:	3728      	adds	r7, #40	@ 0x28
 801604c:	46bd      	mov	sp, r7
 801604e:	bd80      	pop	{r7, pc}

08016050 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016050:	b580      	push	{r7, lr}
 8016052:	b08c      	sub	sp, #48	@ 0x30
 8016054:	af04      	add	r7, sp, #16
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	603b      	str	r3, [r7, #0]
 801605c:	4613      	mov	r3, r2
 801605e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016060:	88fb      	ldrh	r3, [r7, #6]
 8016062:	009b      	lsls	r3, r3, #2
 8016064:	4618      	mov	r0, r3
 8016066:	f001 f927 	bl	80172b8 <pvPortMalloc>
 801606a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d00e      	beq.n	8016090 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016072:	2058      	movs	r0, #88	@ 0x58
 8016074:	f001 f920 	bl	80172b8 <pvPortMalloc>
 8016078:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801607a:	69fb      	ldr	r3, [r7, #28]
 801607c:	2b00      	cmp	r3, #0
 801607e:	d003      	beq.n	8016088 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016080:	69fb      	ldr	r3, [r7, #28]
 8016082:	697a      	ldr	r2, [r7, #20]
 8016084:	631a      	str	r2, [r3, #48]	@ 0x30
 8016086:	e005      	b.n	8016094 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016088:	6978      	ldr	r0, [r7, #20]
 801608a:	f001 f9e7 	bl	801745c <vPortFree>
 801608e:	e001      	b.n	8016094 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016090:	2300      	movs	r3, #0
 8016092:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016094:	69fb      	ldr	r3, [r7, #28]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d017      	beq.n	80160ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801609a:	69fb      	ldr	r3, [r7, #28]
 801609c:	2200      	movs	r2, #0
 801609e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80160a2:	88fa      	ldrh	r2, [r7, #6]
 80160a4:	2300      	movs	r3, #0
 80160a6:	9303      	str	r3, [sp, #12]
 80160a8:	69fb      	ldr	r3, [r7, #28]
 80160aa:	9302      	str	r3, [sp, #8]
 80160ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160ae:	9301      	str	r3, [sp, #4]
 80160b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160b2:	9300      	str	r3, [sp, #0]
 80160b4:	683b      	ldr	r3, [r7, #0]
 80160b6:	68b9      	ldr	r1, [r7, #8]
 80160b8:	68f8      	ldr	r0, [r7, #12]
 80160ba:	f000 f80e 	bl	80160da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80160be:	69f8      	ldr	r0, [r7, #28]
 80160c0:	f000 f8a0 	bl	8016204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80160c4:	2301      	movs	r3, #1
 80160c6:	61bb      	str	r3, [r7, #24]
 80160c8:	e002      	b.n	80160d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80160ca:	f04f 33ff 	mov.w	r3, #4294967295
 80160ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80160d0:	69bb      	ldr	r3, [r7, #24]
	}
 80160d2:	4618      	mov	r0, r3
 80160d4:	3720      	adds	r7, #32
 80160d6:	46bd      	mov	sp, r7
 80160d8:	bd80      	pop	{r7, pc}

080160da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80160da:	b580      	push	{r7, lr}
 80160dc:	b088      	sub	sp, #32
 80160de:	af00      	add	r7, sp, #0
 80160e0:	60f8      	str	r0, [r7, #12]
 80160e2:	60b9      	str	r1, [r7, #8]
 80160e4:	607a      	str	r2, [r7, #4]
 80160e6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80160e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	009b      	lsls	r3, r3, #2
 80160f0:	461a      	mov	r2, r3
 80160f2:	21a5      	movs	r1, #165	@ 0xa5
 80160f4:	f001 fdf6 	bl	8017ce4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80160f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80160fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80160fc:	6879      	ldr	r1, [r7, #4]
 80160fe:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8016102:	440b      	add	r3, r1
 8016104:	009b      	lsls	r3, r3, #2
 8016106:	4413      	add	r3, r2
 8016108:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801610a:	69bb      	ldr	r3, [r7, #24]
 801610c:	f023 0307 	bic.w	r3, r3, #7
 8016110:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016112:	69bb      	ldr	r3, [r7, #24]
 8016114:	f003 0307 	and.w	r3, r3, #7
 8016118:	2b00      	cmp	r3, #0
 801611a:	d00d      	beq.n	8016138 <prvInitialiseNewTask+0x5e>
	__asm volatile
 801611c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016120:	b672      	cpsid	i
 8016122:	f383 8811 	msr	BASEPRI, r3
 8016126:	f3bf 8f6f 	isb	sy
 801612a:	f3bf 8f4f 	dsb	sy
 801612e:	b662      	cpsie	i
 8016130:	617b      	str	r3, [r7, #20]
}
 8016132:	bf00      	nop
 8016134:	bf00      	nop
 8016136:	e7fd      	b.n	8016134 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d01f      	beq.n	801617e <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801613e:	2300      	movs	r3, #0
 8016140:	61fb      	str	r3, [r7, #28]
 8016142:	e012      	b.n	801616a <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016144:	68ba      	ldr	r2, [r7, #8]
 8016146:	69fb      	ldr	r3, [r7, #28]
 8016148:	4413      	add	r3, r2
 801614a:	7819      	ldrb	r1, [r3, #0]
 801614c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801614e:	69fb      	ldr	r3, [r7, #28]
 8016150:	4413      	add	r3, r2
 8016152:	3334      	adds	r3, #52	@ 0x34
 8016154:	460a      	mov	r2, r1
 8016156:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016158:	68ba      	ldr	r2, [r7, #8]
 801615a:	69fb      	ldr	r3, [r7, #28]
 801615c:	4413      	add	r3, r2
 801615e:	781b      	ldrb	r3, [r3, #0]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d006      	beq.n	8016172 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	3301      	adds	r3, #1
 8016168:	61fb      	str	r3, [r7, #28]
 801616a:	69fb      	ldr	r3, [r7, #28]
 801616c:	2b0f      	cmp	r3, #15
 801616e:	d9e9      	bls.n	8016144 <prvInitialiseNewTask+0x6a>
 8016170:	e000      	b.n	8016174 <prvInitialiseNewTask+0x9a>
			{
				break;
 8016172:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016176:	2200      	movs	r2, #0
 8016178:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801617c:	e003      	b.n	8016186 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016180:	2200      	movs	r2, #0
 8016182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016188:	2b06      	cmp	r3, #6
 801618a:	d901      	bls.n	8016190 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801618c:	2306      	movs	r3, #6
 801618e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016194:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801619a:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801619e:	2200      	movs	r2, #0
 80161a0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80161a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161a4:	3304      	adds	r3, #4
 80161a6:	4618      	mov	r0, r3
 80161a8:	f7ff f892 	bl	80152d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80161ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ae:	3318      	adds	r3, #24
 80161b0:	4618      	mov	r0, r3
 80161b2:	f7ff f88d 	bl	80152d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80161b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161be:	f1c3 0207 	rsb	r2, r3, #7
 80161c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80161c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161ca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80161cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ce:	2200      	movs	r2, #0
 80161d0:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80161d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161d4:	2200      	movs	r2, #0
 80161d6:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80161d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161da:	2200      	movs	r2, #0
 80161dc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80161e0:	683a      	ldr	r2, [r7, #0]
 80161e2:	68f9      	ldr	r1, [r7, #12]
 80161e4:	69b8      	ldr	r0, [r7, #24]
 80161e6:	f000 fe27 	bl	8016e38 <pxPortInitialiseStack>
 80161ea:	4602      	mov	r2, r0
 80161ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80161f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d002      	beq.n	80161fc <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80161f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80161fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80161fc:	bf00      	nop
 80161fe:	3720      	adds	r7, #32
 8016200:	46bd      	mov	sp, r7
 8016202:	bd80      	pop	{r7, pc}

08016204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b082      	sub	sp, #8
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801620c:	f000 ff26 	bl	801705c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016210:	4b2a      	ldr	r3, [pc, #168]	@ (80162bc <prvAddNewTaskToReadyList+0xb8>)
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	3301      	adds	r3, #1
 8016216:	4a29      	ldr	r2, [pc, #164]	@ (80162bc <prvAddNewTaskToReadyList+0xb8>)
 8016218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801621a:	4b29      	ldr	r3, [pc, #164]	@ (80162c0 <prvAddNewTaskToReadyList+0xbc>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d109      	bne.n	8016236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016222:	4a27      	ldr	r2, [pc, #156]	@ (80162c0 <prvAddNewTaskToReadyList+0xbc>)
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016228:	4b24      	ldr	r3, [pc, #144]	@ (80162bc <prvAddNewTaskToReadyList+0xb8>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	2b01      	cmp	r3, #1
 801622e:	d110      	bne.n	8016252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016230:	f000 fc32 	bl	8016a98 <prvInitialiseTaskLists>
 8016234:	e00d      	b.n	8016252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016236:	4b23      	ldr	r3, [pc, #140]	@ (80162c4 <prvAddNewTaskToReadyList+0xc0>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d109      	bne.n	8016252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801623e:	4b20      	ldr	r3, [pc, #128]	@ (80162c0 <prvAddNewTaskToReadyList+0xbc>)
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016248:	429a      	cmp	r2, r3
 801624a:	d802      	bhi.n	8016252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801624c:	4a1c      	ldr	r2, [pc, #112]	@ (80162c0 <prvAddNewTaskToReadyList+0xbc>)
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016252:	4b1d      	ldr	r3, [pc, #116]	@ (80162c8 <prvAddNewTaskToReadyList+0xc4>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	3301      	adds	r3, #1
 8016258:	4a1b      	ldr	r2, [pc, #108]	@ (80162c8 <prvAddNewTaskToReadyList+0xc4>)
 801625a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016260:	2201      	movs	r2, #1
 8016262:	409a      	lsls	r2, r3
 8016264:	4b19      	ldr	r3, [pc, #100]	@ (80162cc <prvAddNewTaskToReadyList+0xc8>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	4313      	orrs	r3, r2
 801626a:	4a18      	ldr	r2, [pc, #96]	@ (80162cc <prvAddNewTaskToReadyList+0xc8>)
 801626c:	6013      	str	r3, [r2, #0]
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016272:	4613      	mov	r3, r2
 8016274:	009b      	lsls	r3, r3, #2
 8016276:	4413      	add	r3, r2
 8016278:	009b      	lsls	r3, r3, #2
 801627a:	4a15      	ldr	r2, [pc, #84]	@ (80162d0 <prvAddNewTaskToReadyList+0xcc>)
 801627c:	441a      	add	r2, r3
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	3304      	adds	r3, #4
 8016282:	4619      	mov	r1, r3
 8016284:	4610      	mov	r0, r2
 8016286:	f7ff f830 	bl	80152ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801628a:	f000 ff1d 	bl	80170c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801628e:	4b0d      	ldr	r3, [pc, #52]	@ (80162c4 <prvAddNewTaskToReadyList+0xc0>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d00e      	beq.n	80162b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016296:	4b0a      	ldr	r3, [pc, #40]	@ (80162c0 <prvAddNewTaskToReadyList+0xbc>)
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d207      	bcs.n	80162b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80162a4:	4b0b      	ldr	r3, [pc, #44]	@ (80162d4 <prvAddNewTaskToReadyList+0xd0>)
 80162a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80162aa:	601a      	str	r2, [r3, #0]
 80162ac:	f3bf 8f4f 	dsb	sy
 80162b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80162b4:	bf00      	nop
 80162b6:	3708      	adds	r7, #8
 80162b8:	46bd      	mov	sp, r7
 80162ba:	bd80      	pop	{r7, pc}
 80162bc:	20001d58 	.word	0x20001d58
 80162c0:	20001c58 	.word	0x20001c58
 80162c4:	20001d64 	.word	0x20001d64
 80162c8:	20001d74 	.word	0x20001d74
 80162cc:	20001d60 	.word	0x20001d60
 80162d0:	20001c5c 	.word	0x20001c5c
 80162d4:	e000ed04 	.word	0xe000ed04

080162d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80162d8:	b580      	push	{r7, lr}
 80162da:	b084      	sub	sp, #16
 80162dc:	af00      	add	r7, sp, #0
 80162de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80162e0:	2300      	movs	r3, #0
 80162e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d01a      	beq.n	8016320 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80162ea:	4b15      	ldr	r3, [pc, #84]	@ (8016340 <vTaskDelay+0x68>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d00d      	beq.n	801630e <vTaskDelay+0x36>
	__asm volatile
 80162f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162f6:	b672      	cpsid	i
 80162f8:	f383 8811 	msr	BASEPRI, r3
 80162fc:	f3bf 8f6f 	isb	sy
 8016300:	f3bf 8f4f 	dsb	sy
 8016304:	b662      	cpsie	i
 8016306:	60bb      	str	r3, [r7, #8]
}
 8016308:	bf00      	nop
 801630a:	bf00      	nop
 801630c:	e7fd      	b.n	801630a <vTaskDelay+0x32>
			vTaskSuspendAll();
 801630e:	f000 f881 	bl	8016414 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016312:	2100      	movs	r1, #0
 8016314:	6878      	ldr	r0, [r7, #4]
 8016316:	f000 fd29 	bl	8016d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801631a:	f000 f889 	bl	8016430 <xTaskResumeAll>
 801631e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8016320:	68fb      	ldr	r3, [r7, #12]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d107      	bne.n	8016336 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8016326:	4b07      	ldr	r3, [pc, #28]	@ (8016344 <vTaskDelay+0x6c>)
 8016328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801632c:	601a      	str	r2, [r3, #0]
 801632e:	f3bf 8f4f 	dsb	sy
 8016332:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016336:	bf00      	nop
 8016338:	3710      	adds	r7, #16
 801633a:	46bd      	mov	sp, r7
 801633c:	bd80      	pop	{r7, pc}
 801633e:	bf00      	nop
 8016340:	20001d80 	.word	0x20001d80
 8016344:	e000ed04 	.word	0xe000ed04

08016348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b08a      	sub	sp, #40	@ 0x28
 801634c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801634e:	2300      	movs	r3, #0
 8016350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8016352:	2300      	movs	r3, #0
 8016354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016356:	463a      	mov	r2, r7
 8016358:	1d39      	adds	r1, r7, #4
 801635a:	f107 0308 	add.w	r3, r7, #8
 801635e:	4618      	mov	r0, r3
 8016360:	f7eb fe1a 	bl	8001f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016364:	6839      	ldr	r1, [r7, #0]
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	68ba      	ldr	r2, [r7, #8]
 801636a:	9202      	str	r2, [sp, #8]
 801636c:	9301      	str	r3, [sp, #4]
 801636e:	2300      	movs	r3, #0
 8016370:	9300      	str	r3, [sp, #0]
 8016372:	2300      	movs	r3, #0
 8016374:	460a      	mov	r2, r1
 8016376:	4921      	ldr	r1, [pc, #132]	@ (80163fc <vTaskStartScheduler+0xb4>)
 8016378:	4821      	ldr	r0, [pc, #132]	@ (8016400 <vTaskStartScheduler+0xb8>)
 801637a:	f7ff fe03 	bl	8015f84 <xTaskCreateStatic>
 801637e:	4603      	mov	r3, r0
 8016380:	4a20      	ldr	r2, [pc, #128]	@ (8016404 <vTaskStartScheduler+0xbc>)
 8016382:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8016384:	4b1f      	ldr	r3, [pc, #124]	@ (8016404 <vTaskStartScheduler+0xbc>)
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d002      	beq.n	8016392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801638c:	2301      	movs	r3, #1
 801638e:	617b      	str	r3, [r7, #20]
 8016390:	e001      	b.n	8016396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8016392:	2300      	movs	r3, #0
 8016394:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	2b01      	cmp	r3, #1
 801639a:	d118      	bne.n	80163ce <vTaskStartScheduler+0x86>
	__asm volatile
 801639c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163a0:	b672      	cpsid	i
 80163a2:	f383 8811 	msr	BASEPRI, r3
 80163a6:	f3bf 8f6f 	isb	sy
 80163aa:	f3bf 8f4f 	dsb	sy
 80163ae:	b662      	cpsie	i
 80163b0:	613b      	str	r3, [r7, #16]
}
 80163b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80163b4:	4b14      	ldr	r3, [pc, #80]	@ (8016408 <vTaskStartScheduler+0xc0>)
 80163b6:	f04f 32ff 	mov.w	r2, #4294967295
 80163ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80163bc:	4b13      	ldr	r3, [pc, #76]	@ (801640c <vTaskStartScheduler+0xc4>)
 80163be:	2201      	movs	r2, #1
 80163c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80163c2:	4b13      	ldr	r3, [pc, #76]	@ (8016410 <vTaskStartScheduler+0xc8>)
 80163c4:	2200      	movs	r2, #0
 80163c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80163c8:	f000 fdca 	bl	8016f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80163cc:	e011      	b.n	80163f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163d4:	d10d      	bne.n	80163f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80163d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163da:	b672      	cpsid	i
 80163dc:	f383 8811 	msr	BASEPRI, r3
 80163e0:	f3bf 8f6f 	isb	sy
 80163e4:	f3bf 8f4f 	dsb	sy
 80163e8:	b662      	cpsie	i
 80163ea:	60fb      	str	r3, [r7, #12]
}
 80163ec:	bf00      	nop
 80163ee:	bf00      	nop
 80163f0:	e7fd      	b.n	80163ee <vTaskStartScheduler+0xa6>
}
 80163f2:	bf00      	nop
 80163f4:	3718      	adds	r7, #24
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	0801c9e0 	.word	0x0801c9e0
 8016400:	08016a65 	.word	0x08016a65
 8016404:	20001d7c 	.word	0x20001d7c
 8016408:	20001d78 	.word	0x20001d78
 801640c:	20001d64 	.word	0x20001d64
 8016410:	20001d5c 	.word	0x20001d5c

08016414 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8016414:	b480      	push	{r7}
 8016416:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8016418:	4b04      	ldr	r3, [pc, #16]	@ (801642c <vTaskSuspendAll+0x18>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	3301      	adds	r3, #1
 801641e:	4a03      	ldr	r2, [pc, #12]	@ (801642c <vTaskSuspendAll+0x18>)
 8016420:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8016422:	bf00      	nop
 8016424:	46bd      	mov	sp, r7
 8016426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801642a:	4770      	bx	lr
 801642c:	20001d80 	.word	0x20001d80

08016430 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8016430:	b580      	push	{r7, lr}
 8016432:	b084      	sub	sp, #16
 8016434:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8016436:	2300      	movs	r3, #0
 8016438:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801643a:	2300      	movs	r3, #0
 801643c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801643e:	4b43      	ldr	r3, [pc, #268]	@ (801654c <xTaskResumeAll+0x11c>)
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d10d      	bne.n	8016462 <xTaskResumeAll+0x32>
	__asm volatile
 8016446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801644a:	b672      	cpsid	i
 801644c:	f383 8811 	msr	BASEPRI, r3
 8016450:	f3bf 8f6f 	isb	sy
 8016454:	f3bf 8f4f 	dsb	sy
 8016458:	b662      	cpsie	i
 801645a:	603b      	str	r3, [r7, #0]
}
 801645c:	bf00      	nop
 801645e:	bf00      	nop
 8016460:	e7fd      	b.n	801645e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8016462:	f000 fdfb 	bl	801705c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8016466:	4b39      	ldr	r3, [pc, #228]	@ (801654c <xTaskResumeAll+0x11c>)
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	3b01      	subs	r3, #1
 801646c:	4a37      	ldr	r2, [pc, #220]	@ (801654c <xTaskResumeAll+0x11c>)
 801646e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016470:	4b36      	ldr	r3, [pc, #216]	@ (801654c <xTaskResumeAll+0x11c>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d161      	bne.n	801653c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8016478:	4b35      	ldr	r3, [pc, #212]	@ (8016550 <xTaskResumeAll+0x120>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	2b00      	cmp	r3, #0
 801647e:	d05d      	beq.n	801653c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016480:	e02e      	b.n	80164e0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016482:	4b34      	ldr	r3, [pc, #208]	@ (8016554 <xTaskResumeAll+0x124>)
 8016484:	68db      	ldr	r3, [r3, #12]
 8016486:	68db      	ldr	r3, [r3, #12]
 8016488:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	3318      	adds	r3, #24
 801648e:	4618      	mov	r0, r3
 8016490:	f7fe ff88 	bl	80153a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	3304      	adds	r3, #4
 8016498:	4618      	mov	r0, r3
 801649a:	f7fe ff83 	bl	80153a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164a2:	2201      	movs	r2, #1
 80164a4:	409a      	lsls	r2, r3
 80164a6:	4b2c      	ldr	r3, [pc, #176]	@ (8016558 <xTaskResumeAll+0x128>)
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	4313      	orrs	r3, r2
 80164ac:	4a2a      	ldr	r2, [pc, #168]	@ (8016558 <xTaskResumeAll+0x128>)
 80164ae:	6013      	str	r3, [r2, #0]
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164b4:	4613      	mov	r3, r2
 80164b6:	009b      	lsls	r3, r3, #2
 80164b8:	4413      	add	r3, r2
 80164ba:	009b      	lsls	r3, r3, #2
 80164bc:	4a27      	ldr	r2, [pc, #156]	@ (801655c <xTaskResumeAll+0x12c>)
 80164be:	441a      	add	r2, r3
 80164c0:	68fb      	ldr	r3, [r7, #12]
 80164c2:	3304      	adds	r3, #4
 80164c4:	4619      	mov	r1, r3
 80164c6:	4610      	mov	r0, r2
 80164c8:	f7fe ff0f 	bl	80152ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80164cc:	68fb      	ldr	r3, [r7, #12]
 80164ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164d0:	4b23      	ldr	r3, [pc, #140]	@ (8016560 <xTaskResumeAll+0x130>)
 80164d2:	681b      	ldr	r3, [r3, #0]
 80164d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80164d6:	429a      	cmp	r2, r3
 80164d8:	d302      	bcc.n	80164e0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80164da:	4b22      	ldr	r3, [pc, #136]	@ (8016564 <xTaskResumeAll+0x134>)
 80164dc:	2201      	movs	r2, #1
 80164de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80164e0:	4b1c      	ldr	r3, [pc, #112]	@ (8016554 <xTaskResumeAll+0x124>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d1cc      	bne.n	8016482 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d001      	beq.n	80164f2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80164ee:	f000 fb73 	bl	8016bd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80164f2:	4b1d      	ldr	r3, [pc, #116]	@ (8016568 <xTaskResumeAll+0x138>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d010      	beq.n	8016520 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80164fe:	f000 f859 	bl	80165b4 <xTaskIncrementTick>
 8016502:	4603      	mov	r3, r0
 8016504:	2b00      	cmp	r3, #0
 8016506:	d002      	beq.n	801650e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8016508:	4b16      	ldr	r3, [pc, #88]	@ (8016564 <xTaskResumeAll+0x134>)
 801650a:	2201      	movs	r2, #1
 801650c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	3b01      	subs	r3, #1
 8016512:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	2b00      	cmp	r3, #0
 8016518:	d1f1      	bne.n	80164fe <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 801651a:	4b13      	ldr	r3, [pc, #76]	@ (8016568 <xTaskResumeAll+0x138>)
 801651c:	2200      	movs	r2, #0
 801651e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8016520:	4b10      	ldr	r3, [pc, #64]	@ (8016564 <xTaskResumeAll+0x134>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d009      	beq.n	801653c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8016528:	2301      	movs	r3, #1
 801652a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801652c:	4b0f      	ldr	r3, [pc, #60]	@ (801656c <xTaskResumeAll+0x13c>)
 801652e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016532:	601a      	str	r2, [r3, #0]
 8016534:	f3bf 8f4f 	dsb	sy
 8016538:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801653c:	f000 fdc4 	bl	80170c8 <vPortExitCritical>

	return xAlreadyYielded;
 8016540:	68bb      	ldr	r3, [r7, #8]
}
 8016542:	4618      	mov	r0, r3
 8016544:	3710      	adds	r7, #16
 8016546:	46bd      	mov	sp, r7
 8016548:	bd80      	pop	{r7, pc}
 801654a:	bf00      	nop
 801654c:	20001d80 	.word	0x20001d80
 8016550:	20001d58 	.word	0x20001d58
 8016554:	20001d18 	.word	0x20001d18
 8016558:	20001d60 	.word	0x20001d60
 801655c:	20001c5c 	.word	0x20001c5c
 8016560:	20001c58 	.word	0x20001c58
 8016564:	20001d6c 	.word	0x20001d6c
 8016568:	20001d68 	.word	0x20001d68
 801656c:	e000ed04 	.word	0xe000ed04

08016570 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016570:	b480      	push	{r7}
 8016572:	b083      	sub	sp, #12
 8016574:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016576:	4b05      	ldr	r3, [pc, #20]	@ (801658c <xTaskGetTickCount+0x1c>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801657c:	687b      	ldr	r3, [r7, #4]
}
 801657e:	4618      	mov	r0, r3
 8016580:	370c      	adds	r7, #12
 8016582:	46bd      	mov	sp, r7
 8016584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016588:	4770      	bx	lr
 801658a:	bf00      	nop
 801658c:	20001d5c 	.word	0x20001d5c

08016590 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016596:	f000 fe49 	bl	801722c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801659a:	2300      	movs	r3, #0
 801659c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801659e:	4b04      	ldr	r3, [pc, #16]	@ (80165b0 <xTaskGetTickCountFromISR+0x20>)
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165a4:	683b      	ldr	r3, [r7, #0]
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3708      	adds	r7, #8
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	20001d5c 	.word	0x20001d5c

080165b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80165ba:	2300      	movs	r3, #0
 80165bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80165be:	4b50      	ldr	r3, [pc, #320]	@ (8016700 <xTaskIncrementTick+0x14c>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	f040 808b 	bne.w	80166de <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80165c8:	4b4e      	ldr	r3, [pc, #312]	@ (8016704 <xTaskIncrementTick+0x150>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	3301      	adds	r3, #1
 80165ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80165d0:	4a4c      	ldr	r2, [pc, #304]	@ (8016704 <xTaskIncrementTick+0x150>)
 80165d2:	693b      	ldr	r3, [r7, #16]
 80165d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80165d6:	693b      	ldr	r3, [r7, #16]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d123      	bne.n	8016624 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80165dc:	4b4a      	ldr	r3, [pc, #296]	@ (8016708 <xTaskIncrementTick+0x154>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d00d      	beq.n	8016602 <xTaskIncrementTick+0x4e>
	__asm volatile
 80165e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165ea:	b672      	cpsid	i
 80165ec:	f383 8811 	msr	BASEPRI, r3
 80165f0:	f3bf 8f6f 	isb	sy
 80165f4:	f3bf 8f4f 	dsb	sy
 80165f8:	b662      	cpsie	i
 80165fa:	603b      	str	r3, [r7, #0]
}
 80165fc:	bf00      	nop
 80165fe:	bf00      	nop
 8016600:	e7fd      	b.n	80165fe <xTaskIncrementTick+0x4a>
 8016602:	4b41      	ldr	r3, [pc, #260]	@ (8016708 <xTaskIncrementTick+0x154>)
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	60fb      	str	r3, [r7, #12]
 8016608:	4b40      	ldr	r3, [pc, #256]	@ (801670c <xTaskIncrementTick+0x158>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	4a3e      	ldr	r2, [pc, #248]	@ (8016708 <xTaskIncrementTick+0x154>)
 801660e:	6013      	str	r3, [r2, #0]
 8016610:	4a3e      	ldr	r2, [pc, #248]	@ (801670c <xTaskIncrementTick+0x158>)
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	6013      	str	r3, [r2, #0]
 8016616:	4b3e      	ldr	r3, [pc, #248]	@ (8016710 <xTaskIncrementTick+0x15c>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	3301      	adds	r3, #1
 801661c:	4a3c      	ldr	r2, [pc, #240]	@ (8016710 <xTaskIncrementTick+0x15c>)
 801661e:	6013      	str	r3, [r2, #0]
 8016620:	f000 fada 	bl	8016bd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016624:	4b3b      	ldr	r3, [pc, #236]	@ (8016714 <xTaskIncrementTick+0x160>)
 8016626:	681b      	ldr	r3, [r3, #0]
 8016628:	693a      	ldr	r2, [r7, #16]
 801662a:	429a      	cmp	r2, r3
 801662c:	d348      	bcc.n	80166c0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801662e:	4b36      	ldr	r3, [pc, #216]	@ (8016708 <xTaskIncrementTick+0x154>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d104      	bne.n	8016642 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016638:	4b36      	ldr	r3, [pc, #216]	@ (8016714 <xTaskIncrementTick+0x160>)
 801663a:	f04f 32ff 	mov.w	r2, #4294967295
 801663e:	601a      	str	r2, [r3, #0]
					break;
 8016640:	e03e      	b.n	80166c0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016642:	4b31      	ldr	r3, [pc, #196]	@ (8016708 <xTaskIncrementTick+0x154>)
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	68db      	ldr	r3, [r3, #12]
 8016648:	68db      	ldr	r3, [r3, #12]
 801664a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801664c:	68bb      	ldr	r3, [r7, #8]
 801664e:	685b      	ldr	r3, [r3, #4]
 8016650:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8016652:	693a      	ldr	r2, [r7, #16]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	429a      	cmp	r2, r3
 8016658:	d203      	bcs.n	8016662 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801665a:	4a2e      	ldr	r2, [pc, #184]	@ (8016714 <xTaskIncrementTick+0x160>)
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8016660:	e02e      	b.n	80166c0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016662:	68bb      	ldr	r3, [r7, #8]
 8016664:	3304      	adds	r3, #4
 8016666:	4618      	mov	r0, r3
 8016668:	f7fe fe9c 	bl	80153a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016670:	2b00      	cmp	r3, #0
 8016672:	d004      	beq.n	801667e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016674:	68bb      	ldr	r3, [r7, #8]
 8016676:	3318      	adds	r3, #24
 8016678:	4618      	mov	r0, r3
 801667a:	f7fe fe93 	bl	80153a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016682:	2201      	movs	r2, #1
 8016684:	409a      	lsls	r2, r3
 8016686:	4b24      	ldr	r3, [pc, #144]	@ (8016718 <xTaskIncrementTick+0x164>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	4313      	orrs	r3, r2
 801668c:	4a22      	ldr	r2, [pc, #136]	@ (8016718 <xTaskIncrementTick+0x164>)
 801668e:	6013      	str	r3, [r2, #0]
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016694:	4613      	mov	r3, r2
 8016696:	009b      	lsls	r3, r3, #2
 8016698:	4413      	add	r3, r2
 801669a:	009b      	lsls	r3, r3, #2
 801669c:	4a1f      	ldr	r2, [pc, #124]	@ (801671c <xTaskIncrementTick+0x168>)
 801669e:	441a      	add	r2, r3
 80166a0:	68bb      	ldr	r3, [r7, #8]
 80166a2:	3304      	adds	r3, #4
 80166a4:	4619      	mov	r1, r3
 80166a6:	4610      	mov	r0, r2
 80166a8:	f7fe fe1f 	bl	80152ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166b0:	4b1b      	ldr	r3, [pc, #108]	@ (8016720 <xTaskIncrementTick+0x16c>)
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d3b9      	bcc.n	801662e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80166ba:	2301      	movs	r3, #1
 80166bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80166be:	e7b6      	b.n	801662e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80166c0:	4b17      	ldr	r3, [pc, #92]	@ (8016720 <xTaskIncrementTick+0x16c>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80166c6:	4915      	ldr	r1, [pc, #84]	@ (801671c <xTaskIncrementTick+0x168>)
 80166c8:	4613      	mov	r3, r2
 80166ca:	009b      	lsls	r3, r3, #2
 80166cc:	4413      	add	r3, r2
 80166ce:	009b      	lsls	r3, r3, #2
 80166d0:	440b      	add	r3, r1
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	2b01      	cmp	r3, #1
 80166d6:	d907      	bls.n	80166e8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80166d8:	2301      	movs	r3, #1
 80166da:	617b      	str	r3, [r7, #20]
 80166dc:	e004      	b.n	80166e8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80166de:	4b11      	ldr	r3, [pc, #68]	@ (8016724 <xTaskIncrementTick+0x170>)
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	3301      	adds	r3, #1
 80166e4:	4a0f      	ldr	r2, [pc, #60]	@ (8016724 <xTaskIncrementTick+0x170>)
 80166e6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80166e8:	4b0f      	ldr	r3, [pc, #60]	@ (8016728 <xTaskIncrementTick+0x174>)
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d001      	beq.n	80166f4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80166f0:	2301      	movs	r3, #1
 80166f2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80166f4:	697b      	ldr	r3, [r7, #20]
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3718      	adds	r7, #24
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	bf00      	nop
 8016700:	20001d80 	.word	0x20001d80
 8016704:	20001d5c 	.word	0x20001d5c
 8016708:	20001d10 	.word	0x20001d10
 801670c:	20001d14 	.word	0x20001d14
 8016710:	20001d70 	.word	0x20001d70
 8016714:	20001d78 	.word	0x20001d78
 8016718:	20001d60 	.word	0x20001d60
 801671c:	20001c5c 	.word	0x20001c5c
 8016720:	20001c58 	.word	0x20001c58
 8016724:	20001d68 	.word	0x20001d68
 8016728:	20001d6c 	.word	0x20001d6c

0801672c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801672c:	b580      	push	{r7, lr}
 801672e:	b088      	sub	sp, #32
 8016730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016732:	4b3b      	ldr	r3, [pc, #236]	@ (8016820 <vTaskSwitchContext+0xf4>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d003      	beq.n	8016742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801673a:	4b3a      	ldr	r3, [pc, #232]	@ (8016824 <vTaskSwitchContext+0xf8>)
 801673c:	2201      	movs	r2, #1
 801673e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8016740:	e069      	b.n	8016816 <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 8016742:	4b38      	ldr	r3, [pc, #224]	@ (8016824 <vTaskSwitchContext+0xf8>)
 8016744:	2200      	movs	r2, #0
 8016746:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016748:	4b37      	ldr	r3, [pc, #220]	@ (8016828 <vTaskSwitchContext+0xfc>)
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801674e:	61fb      	str	r3, [r7, #28]
 8016750:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8016754:	61bb      	str	r3, [r7, #24]
 8016756:	69fb      	ldr	r3, [r7, #28]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	69ba      	ldr	r2, [r7, #24]
 801675c:	429a      	cmp	r2, r3
 801675e:	d111      	bne.n	8016784 <vTaskSwitchContext+0x58>
 8016760:	69fb      	ldr	r3, [r7, #28]
 8016762:	3304      	adds	r3, #4
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	69ba      	ldr	r2, [r7, #24]
 8016768:	429a      	cmp	r2, r3
 801676a:	d10b      	bne.n	8016784 <vTaskSwitchContext+0x58>
 801676c:	69fb      	ldr	r3, [r7, #28]
 801676e:	3308      	adds	r3, #8
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	69ba      	ldr	r2, [r7, #24]
 8016774:	429a      	cmp	r2, r3
 8016776:	d105      	bne.n	8016784 <vTaskSwitchContext+0x58>
 8016778:	69fb      	ldr	r3, [r7, #28]
 801677a:	330c      	adds	r3, #12
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	69ba      	ldr	r2, [r7, #24]
 8016780:	429a      	cmp	r2, r3
 8016782:	d008      	beq.n	8016796 <vTaskSwitchContext+0x6a>
 8016784:	4b28      	ldr	r3, [pc, #160]	@ (8016828 <vTaskSwitchContext+0xfc>)
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	4b27      	ldr	r3, [pc, #156]	@ (8016828 <vTaskSwitchContext+0xfc>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	3334      	adds	r3, #52	@ 0x34
 801678e:	4619      	mov	r1, r3
 8016790:	4610      	mov	r0, r2
 8016792:	f7eb fbee 	bl	8001f72 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016796:	4b25      	ldr	r3, [pc, #148]	@ (801682c <vTaskSwitchContext+0x100>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	fab3 f383 	clz	r3, r3
 80167a2:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80167a4:	7afb      	ldrb	r3, [r7, #11]
 80167a6:	f1c3 031f 	rsb	r3, r3, #31
 80167aa:	617b      	str	r3, [r7, #20]
 80167ac:	4920      	ldr	r1, [pc, #128]	@ (8016830 <vTaskSwitchContext+0x104>)
 80167ae:	697a      	ldr	r2, [r7, #20]
 80167b0:	4613      	mov	r3, r2
 80167b2:	009b      	lsls	r3, r3, #2
 80167b4:	4413      	add	r3, r2
 80167b6:	009b      	lsls	r3, r3, #2
 80167b8:	440b      	add	r3, r1
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d10d      	bne.n	80167dc <vTaskSwitchContext+0xb0>
	__asm volatile
 80167c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167c4:	b672      	cpsid	i
 80167c6:	f383 8811 	msr	BASEPRI, r3
 80167ca:	f3bf 8f6f 	isb	sy
 80167ce:	f3bf 8f4f 	dsb	sy
 80167d2:	b662      	cpsie	i
 80167d4:	607b      	str	r3, [r7, #4]
}
 80167d6:	bf00      	nop
 80167d8:	bf00      	nop
 80167da:	e7fd      	b.n	80167d8 <vTaskSwitchContext+0xac>
 80167dc:	697a      	ldr	r2, [r7, #20]
 80167de:	4613      	mov	r3, r2
 80167e0:	009b      	lsls	r3, r3, #2
 80167e2:	4413      	add	r3, r2
 80167e4:	009b      	lsls	r3, r3, #2
 80167e6:	4a12      	ldr	r2, [pc, #72]	@ (8016830 <vTaskSwitchContext+0x104>)
 80167e8:	4413      	add	r3, r2
 80167ea:	613b      	str	r3, [r7, #16]
 80167ec:	693b      	ldr	r3, [r7, #16]
 80167ee:	685b      	ldr	r3, [r3, #4]
 80167f0:	685a      	ldr	r2, [r3, #4]
 80167f2:	693b      	ldr	r3, [r7, #16]
 80167f4:	605a      	str	r2, [r3, #4]
 80167f6:	693b      	ldr	r3, [r7, #16]
 80167f8:	685a      	ldr	r2, [r3, #4]
 80167fa:	693b      	ldr	r3, [r7, #16]
 80167fc:	3308      	adds	r3, #8
 80167fe:	429a      	cmp	r2, r3
 8016800:	d104      	bne.n	801680c <vTaskSwitchContext+0xe0>
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	685b      	ldr	r3, [r3, #4]
 8016806:	685a      	ldr	r2, [r3, #4]
 8016808:	693b      	ldr	r3, [r7, #16]
 801680a:	605a      	str	r2, [r3, #4]
 801680c:	693b      	ldr	r3, [r7, #16]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	68db      	ldr	r3, [r3, #12]
 8016812:	4a05      	ldr	r2, [pc, #20]	@ (8016828 <vTaskSwitchContext+0xfc>)
 8016814:	6013      	str	r3, [r2, #0]
}
 8016816:	bf00      	nop
 8016818:	3720      	adds	r7, #32
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	20001d80 	.word	0x20001d80
 8016824:	20001d6c 	.word	0x20001d6c
 8016828:	20001c58 	.word	0x20001c58
 801682c:	20001d60 	.word	0x20001d60
 8016830:	20001c5c 	.word	0x20001c5c

08016834 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b084      	sub	sp, #16
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
 801683c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d10d      	bne.n	8016860 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8016844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016848:	b672      	cpsid	i
 801684a:	f383 8811 	msr	BASEPRI, r3
 801684e:	f3bf 8f6f 	isb	sy
 8016852:	f3bf 8f4f 	dsb	sy
 8016856:	b662      	cpsie	i
 8016858:	60fb      	str	r3, [r7, #12]
}
 801685a:	bf00      	nop
 801685c:	bf00      	nop
 801685e:	e7fd      	b.n	801685c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016860:	4b07      	ldr	r3, [pc, #28]	@ (8016880 <vTaskPlaceOnEventList+0x4c>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	3318      	adds	r3, #24
 8016866:	4619      	mov	r1, r3
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f7fe fd62 	bl	8015332 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801686e:	2101      	movs	r1, #1
 8016870:	6838      	ldr	r0, [r7, #0]
 8016872:	f000 fa7b 	bl	8016d6c <prvAddCurrentTaskToDelayedList>
}
 8016876:	bf00      	nop
 8016878:	3710      	adds	r7, #16
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	20001c58 	.word	0x20001c58

08016884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b086      	sub	sp, #24
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	68db      	ldr	r3, [r3, #12]
 8016890:	68db      	ldr	r3, [r3, #12]
 8016892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d10d      	bne.n	80168b6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 801689a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801689e:	b672      	cpsid	i
 80168a0:	f383 8811 	msr	BASEPRI, r3
 80168a4:	f3bf 8f6f 	isb	sy
 80168a8:	f3bf 8f4f 	dsb	sy
 80168ac:	b662      	cpsie	i
 80168ae:	60fb      	str	r3, [r7, #12]
}
 80168b0:	bf00      	nop
 80168b2:	bf00      	nop
 80168b4:	e7fd      	b.n	80168b2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	3318      	adds	r3, #24
 80168ba:	4618      	mov	r0, r3
 80168bc:	f7fe fd72 	bl	80153a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168c0:	4b1d      	ldr	r3, [pc, #116]	@ (8016938 <xTaskRemoveFromEventList+0xb4>)
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d11c      	bne.n	8016902 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80168c8:	693b      	ldr	r3, [r7, #16]
 80168ca:	3304      	adds	r3, #4
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7fe fd69 	bl	80153a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80168d2:	693b      	ldr	r3, [r7, #16]
 80168d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80168d6:	2201      	movs	r2, #1
 80168d8:	409a      	lsls	r2, r3
 80168da:	4b18      	ldr	r3, [pc, #96]	@ (801693c <xTaskRemoveFromEventList+0xb8>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	4313      	orrs	r3, r2
 80168e0:	4a16      	ldr	r2, [pc, #88]	@ (801693c <xTaskRemoveFromEventList+0xb8>)
 80168e2:	6013      	str	r3, [r2, #0]
 80168e4:	693b      	ldr	r3, [r7, #16]
 80168e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80168e8:	4613      	mov	r3, r2
 80168ea:	009b      	lsls	r3, r3, #2
 80168ec:	4413      	add	r3, r2
 80168ee:	009b      	lsls	r3, r3, #2
 80168f0:	4a13      	ldr	r2, [pc, #76]	@ (8016940 <xTaskRemoveFromEventList+0xbc>)
 80168f2:	441a      	add	r2, r3
 80168f4:	693b      	ldr	r3, [r7, #16]
 80168f6:	3304      	adds	r3, #4
 80168f8:	4619      	mov	r1, r3
 80168fa:	4610      	mov	r0, r2
 80168fc:	f7fe fcf5 	bl	80152ea <vListInsertEnd>
 8016900:	e005      	b.n	801690e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016902:	693b      	ldr	r3, [r7, #16]
 8016904:	3318      	adds	r3, #24
 8016906:	4619      	mov	r1, r3
 8016908:	480e      	ldr	r0, [pc, #56]	@ (8016944 <xTaskRemoveFromEventList+0xc0>)
 801690a:	f7fe fcee 	bl	80152ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801690e:	693b      	ldr	r3, [r7, #16]
 8016910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016912:	4b0d      	ldr	r3, [pc, #52]	@ (8016948 <xTaskRemoveFromEventList+0xc4>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016918:	429a      	cmp	r2, r3
 801691a:	d905      	bls.n	8016928 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801691c:	2301      	movs	r3, #1
 801691e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016920:	4b0a      	ldr	r3, [pc, #40]	@ (801694c <xTaskRemoveFromEventList+0xc8>)
 8016922:	2201      	movs	r2, #1
 8016924:	601a      	str	r2, [r3, #0]
 8016926:	e001      	b.n	801692c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8016928:	2300      	movs	r3, #0
 801692a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801692c:	697b      	ldr	r3, [r7, #20]
}
 801692e:	4618      	mov	r0, r3
 8016930:	3718      	adds	r7, #24
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}
 8016936:	bf00      	nop
 8016938:	20001d80 	.word	0x20001d80
 801693c:	20001d60 	.word	0x20001d60
 8016940:	20001c5c 	.word	0x20001c5c
 8016944:	20001d18 	.word	0x20001d18
 8016948:	20001c58 	.word	0x20001c58
 801694c:	20001d6c 	.word	0x20001d6c

08016950 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016950:	b480      	push	{r7}
 8016952:	b083      	sub	sp, #12
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016958:	4b06      	ldr	r3, [pc, #24]	@ (8016974 <vTaskInternalSetTimeOutState+0x24>)
 801695a:	681a      	ldr	r2, [r3, #0]
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016960:	4b05      	ldr	r3, [pc, #20]	@ (8016978 <vTaskInternalSetTimeOutState+0x28>)
 8016962:	681a      	ldr	r2, [r3, #0]
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	605a      	str	r2, [r3, #4]
}
 8016968:	bf00      	nop
 801696a:	370c      	adds	r7, #12
 801696c:	46bd      	mov	sp, r7
 801696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016972:	4770      	bx	lr
 8016974:	20001d70 	.word	0x20001d70
 8016978:	20001d5c 	.word	0x20001d5c

0801697c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801697c:	b580      	push	{r7, lr}
 801697e:	b088      	sub	sp, #32
 8016980:	af00      	add	r7, sp, #0
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d10d      	bne.n	80169a8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 801698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016990:	b672      	cpsid	i
 8016992:	f383 8811 	msr	BASEPRI, r3
 8016996:	f3bf 8f6f 	isb	sy
 801699a:	f3bf 8f4f 	dsb	sy
 801699e:	b662      	cpsie	i
 80169a0:	613b      	str	r3, [r7, #16]
}
 80169a2:	bf00      	nop
 80169a4:	bf00      	nop
 80169a6:	e7fd      	b.n	80169a4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80169a8:	683b      	ldr	r3, [r7, #0]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d10d      	bne.n	80169ca <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80169ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169b2:	b672      	cpsid	i
 80169b4:	f383 8811 	msr	BASEPRI, r3
 80169b8:	f3bf 8f6f 	isb	sy
 80169bc:	f3bf 8f4f 	dsb	sy
 80169c0:	b662      	cpsie	i
 80169c2:	60fb      	str	r3, [r7, #12]
}
 80169c4:	bf00      	nop
 80169c6:	bf00      	nop
 80169c8:	e7fd      	b.n	80169c6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80169ca:	f000 fb47 	bl	801705c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80169ce:	4b1d      	ldr	r3, [pc, #116]	@ (8016a44 <xTaskCheckForTimeOut+0xc8>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	685b      	ldr	r3, [r3, #4]
 80169d8:	69ba      	ldr	r2, [r7, #24]
 80169da:	1ad3      	subs	r3, r2, r3
 80169dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80169de:	683b      	ldr	r3, [r7, #0]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169e6:	d102      	bne.n	80169ee <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80169e8:	2300      	movs	r3, #0
 80169ea:	61fb      	str	r3, [r7, #28]
 80169ec:	e023      	b.n	8016a36 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	4b15      	ldr	r3, [pc, #84]	@ (8016a48 <xTaskCheckForTimeOut+0xcc>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	429a      	cmp	r2, r3
 80169f8:	d007      	beq.n	8016a0a <xTaskCheckForTimeOut+0x8e>
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	685b      	ldr	r3, [r3, #4]
 80169fe:	69ba      	ldr	r2, [r7, #24]
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d302      	bcc.n	8016a0a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016a04:	2301      	movs	r3, #1
 8016a06:	61fb      	str	r3, [r7, #28]
 8016a08:	e015      	b.n	8016a36 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	697a      	ldr	r2, [r7, #20]
 8016a10:	429a      	cmp	r2, r3
 8016a12:	d20b      	bcs.n	8016a2c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016a14:	683b      	ldr	r3, [r7, #0]
 8016a16:	681a      	ldr	r2, [r3, #0]
 8016a18:	697b      	ldr	r3, [r7, #20]
 8016a1a:	1ad2      	subs	r2, r2, r3
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8016a20:	6878      	ldr	r0, [r7, #4]
 8016a22:	f7ff ff95 	bl	8016950 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016a26:	2300      	movs	r3, #0
 8016a28:	61fb      	str	r3, [r7, #28]
 8016a2a:	e004      	b.n	8016a36 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	2200      	movs	r2, #0
 8016a30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8016a32:	2301      	movs	r3, #1
 8016a34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8016a36:	f000 fb47 	bl	80170c8 <vPortExitCritical>

	return xReturn;
 8016a3a:	69fb      	ldr	r3, [r7, #28]
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3720      	adds	r7, #32
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}
 8016a44:	20001d5c 	.word	0x20001d5c
 8016a48:	20001d70 	.word	0x20001d70

08016a4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016a4c:	b480      	push	{r7}
 8016a4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016a50:	4b03      	ldr	r3, [pc, #12]	@ (8016a60 <vTaskMissedYield+0x14>)
 8016a52:	2201      	movs	r2, #1
 8016a54:	601a      	str	r2, [r3, #0]
}
 8016a56:	bf00      	nop
 8016a58:	46bd      	mov	sp, r7
 8016a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5e:	4770      	bx	lr
 8016a60:	20001d6c 	.word	0x20001d6c

08016a64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b082      	sub	sp, #8
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016a6c:	f000 f854 	bl	8016b18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016a70:	4b07      	ldr	r3, [pc, #28]	@ (8016a90 <prvIdleTask+0x2c>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	2b01      	cmp	r3, #1
 8016a76:	d907      	bls.n	8016a88 <prvIdleTask+0x24>
			{
				taskYIELD();
 8016a78:	4b06      	ldr	r3, [pc, #24]	@ (8016a94 <prvIdleTask+0x30>)
 8016a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016a7e:	601a      	str	r2, [r3, #0]
 8016a80:	f3bf 8f4f 	dsb	sy
 8016a84:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8016a88:	f7eb fa6c 	bl	8001f64 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016a8c:	e7ee      	b.n	8016a6c <prvIdleTask+0x8>
 8016a8e:	bf00      	nop
 8016a90:	20001c5c 	.word	0x20001c5c
 8016a94:	e000ed04 	.word	0xe000ed04

08016a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016a98:	b580      	push	{r7, lr}
 8016a9a:	b082      	sub	sp, #8
 8016a9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	607b      	str	r3, [r7, #4]
 8016aa2:	e00c      	b.n	8016abe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	4613      	mov	r3, r2
 8016aa8:	009b      	lsls	r3, r3, #2
 8016aaa:	4413      	add	r3, r2
 8016aac:	009b      	lsls	r3, r3, #2
 8016aae:	4a12      	ldr	r2, [pc, #72]	@ (8016af8 <prvInitialiseTaskLists+0x60>)
 8016ab0:	4413      	add	r3, r2
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f7fe fbec 	bl	8015290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	3301      	adds	r3, #1
 8016abc:	607b      	str	r3, [r7, #4]
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	2b06      	cmp	r3, #6
 8016ac2:	d9ef      	bls.n	8016aa4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016ac4:	480d      	ldr	r0, [pc, #52]	@ (8016afc <prvInitialiseTaskLists+0x64>)
 8016ac6:	f7fe fbe3 	bl	8015290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016aca:	480d      	ldr	r0, [pc, #52]	@ (8016b00 <prvInitialiseTaskLists+0x68>)
 8016acc:	f7fe fbe0 	bl	8015290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016ad0:	480c      	ldr	r0, [pc, #48]	@ (8016b04 <prvInitialiseTaskLists+0x6c>)
 8016ad2:	f7fe fbdd 	bl	8015290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016ad6:	480c      	ldr	r0, [pc, #48]	@ (8016b08 <prvInitialiseTaskLists+0x70>)
 8016ad8:	f7fe fbda 	bl	8015290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016adc:	480b      	ldr	r0, [pc, #44]	@ (8016b0c <prvInitialiseTaskLists+0x74>)
 8016ade:	f7fe fbd7 	bl	8015290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8016ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8016b10 <prvInitialiseTaskLists+0x78>)
 8016ae4:	4a05      	ldr	r2, [pc, #20]	@ (8016afc <prvInitialiseTaskLists+0x64>)
 8016ae6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8016b14 <prvInitialiseTaskLists+0x7c>)
 8016aea:	4a05      	ldr	r2, [pc, #20]	@ (8016b00 <prvInitialiseTaskLists+0x68>)
 8016aec:	601a      	str	r2, [r3, #0]
}
 8016aee:	bf00      	nop
 8016af0:	3708      	adds	r7, #8
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}
 8016af6:	bf00      	nop
 8016af8:	20001c5c 	.word	0x20001c5c
 8016afc:	20001ce8 	.word	0x20001ce8
 8016b00:	20001cfc 	.word	0x20001cfc
 8016b04:	20001d18 	.word	0x20001d18
 8016b08:	20001d2c 	.word	0x20001d2c
 8016b0c:	20001d44 	.word	0x20001d44
 8016b10:	20001d10 	.word	0x20001d10
 8016b14:	20001d14 	.word	0x20001d14

08016b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b082      	sub	sp, #8
 8016b1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b1e:	e019      	b.n	8016b54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016b20:	f000 fa9c 	bl	801705c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016b24:	4b10      	ldr	r3, [pc, #64]	@ (8016b68 <prvCheckTasksWaitingTermination+0x50>)
 8016b26:	68db      	ldr	r3, [r3, #12]
 8016b28:	68db      	ldr	r3, [r3, #12]
 8016b2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	3304      	adds	r3, #4
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7fe fc37 	bl	80153a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016b36:	4b0d      	ldr	r3, [pc, #52]	@ (8016b6c <prvCheckTasksWaitingTermination+0x54>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	3b01      	subs	r3, #1
 8016b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8016b6c <prvCheckTasksWaitingTermination+0x54>)
 8016b3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016b40:	4b0b      	ldr	r3, [pc, #44]	@ (8016b70 <prvCheckTasksWaitingTermination+0x58>)
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	3b01      	subs	r3, #1
 8016b46:	4a0a      	ldr	r2, [pc, #40]	@ (8016b70 <prvCheckTasksWaitingTermination+0x58>)
 8016b48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8016b4a:	f000 fabd 	bl	80170c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	f000 f810 	bl	8016b74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016b54:	4b06      	ldr	r3, [pc, #24]	@ (8016b70 <prvCheckTasksWaitingTermination+0x58>)
 8016b56:	681b      	ldr	r3, [r3, #0]
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d1e1      	bne.n	8016b20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8016b5c:	bf00      	nop
 8016b5e:	bf00      	nop
 8016b60:	3708      	adds	r7, #8
 8016b62:	46bd      	mov	sp, r7
 8016b64:	bd80      	pop	{r7, pc}
 8016b66:	bf00      	nop
 8016b68:	20001d2c 	.word	0x20001d2c
 8016b6c:	20001d58 	.word	0x20001d58
 8016b70:	20001d40 	.word	0x20001d40

08016b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b084      	sub	sp, #16
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d108      	bne.n	8016b98 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f000 fc66 	bl	801745c <vPortFree>
				vPortFree( pxTCB );
 8016b90:	6878      	ldr	r0, [r7, #4]
 8016b92:	f000 fc63 	bl	801745c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016b96:	e01b      	b.n	8016bd0 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016b9e:	2b01      	cmp	r3, #1
 8016ba0:	d103      	bne.n	8016baa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f000 fc5a 	bl	801745c <vPortFree>
	}
 8016ba8:	e012      	b.n	8016bd0 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8016bb0:	2b02      	cmp	r3, #2
 8016bb2:	d00d      	beq.n	8016bd0 <prvDeleteTCB+0x5c>
	__asm volatile
 8016bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bb8:	b672      	cpsid	i
 8016bba:	f383 8811 	msr	BASEPRI, r3
 8016bbe:	f3bf 8f6f 	isb	sy
 8016bc2:	f3bf 8f4f 	dsb	sy
 8016bc6:	b662      	cpsie	i
 8016bc8:	60fb      	str	r3, [r7, #12]
}
 8016bca:	bf00      	nop
 8016bcc:	bf00      	nop
 8016bce:	e7fd      	b.n	8016bcc <prvDeleteTCB+0x58>
	}
 8016bd0:	bf00      	nop
 8016bd2:	3710      	adds	r7, #16
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}

08016bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b083      	sub	sp, #12
 8016bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016bde:	4b0c      	ldr	r3, [pc, #48]	@ (8016c10 <prvResetNextTaskUnblockTime+0x38>)
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d104      	bne.n	8016bf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016be8:	4b0a      	ldr	r3, [pc, #40]	@ (8016c14 <prvResetNextTaskUnblockTime+0x3c>)
 8016bea:	f04f 32ff 	mov.w	r2, #4294967295
 8016bee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016bf0:	e008      	b.n	8016c04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bf2:	4b07      	ldr	r3, [pc, #28]	@ (8016c10 <prvResetNextTaskUnblockTime+0x38>)
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	68db      	ldr	r3, [r3, #12]
 8016bf8:	68db      	ldr	r3, [r3, #12]
 8016bfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	685b      	ldr	r3, [r3, #4]
 8016c00:	4a04      	ldr	r2, [pc, #16]	@ (8016c14 <prvResetNextTaskUnblockTime+0x3c>)
 8016c02:	6013      	str	r3, [r2, #0]
}
 8016c04:	bf00      	nop
 8016c06:	370c      	adds	r7, #12
 8016c08:	46bd      	mov	sp, r7
 8016c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0e:	4770      	bx	lr
 8016c10:	20001d10 	.word	0x20001d10
 8016c14:	20001d78 	.word	0x20001d78

08016c18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016c18:	b480      	push	{r7}
 8016c1a:	b083      	sub	sp, #12
 8016c1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8016c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8016c4c <xTaskGetSchedulerState+0x34>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d102      	bne.n	8016c2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016c26:	2301      	movs	r3, #1
 8016c28:	607b      	str	r3, [r7, #4]
 8016c2a:	e008      	b.n	8016c3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c2c:	4b08      	ldr	r3, [pc, #32]	@ (8016c50 <xTaskGetSchedulerState+0x38>)
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d102      	bne.n	8016c3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8016c34:	2302      	movs	r3, #2
 8016c36:	607b      	str	r3, [r7, #4]
 8016c38:	e001      	b.n	8016c3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8016c3e:	687b      	ldr	r3, [r7, #4]
	}
 8016c40:	4618      	mov	r0, r3
 8016c42:	370c      	adds	r7, #12
 8016c44:	46bd      	mov	sp, r7
 8016c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4a:	4770      	bx	lr
 8016c4c:	20001d64 	.word	0x20001d64
 8016c50:	20001d80 	.word	0x20001d80

08016c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016c60:	2300      	movs	r3, #0
 8016c62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d074      	beq.n	8016d54 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8016d60 <xTaskPriorityDisinherit+0x10c>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	693a      	ldr	r2, [r7, #16]
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d00d      	beq.n	8016c90 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8016c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c78:	b672      	cpsid	i
 8016c7a:	f383 8811 	msr	BASEPRI, r3
 8016c7e:	f3bf 8f6f 	isb	sy
 8016c82:	f3bf 8f4f 	dsb	sy
 8016c86:	b662      	cpsie	i
 8016c88:	60fb      	str	r3, [r7, #12]
}
 8016c8a:	bf00      	nop
 8016c8c:	bf00      	nop
 8016c8e:	e7fd      	b.n	8016c8c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d10d      	bne.n	8016cb4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8016c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c9c:	b672      	cpsid	i
 8016c9e:	f383 8811 	msr	BASEPRI, r3
 8016ca2:	f3bf 8f6f 	isb	sy
 8016ca6:	f3bf 8f4f 	dsb	sy
 8016caa:	b662      	cpsie	i
 8016cac:	60bb      	str	r3, [r7, #8]
}
 8016cae:	bf00      	nop
 8016cb0:	bf00      	nop
 8016cb2:	e7fd      	b.n	8016cb0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8016cb4:	693b      	ldr	r3, [r7, #16]
 8016cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016cb8:	1e5a      	subs	r2, r3, #1
 8016cba:	693b      	ldr	r3, [r7, #16]
 8016cbc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016cc6:	429a      	cmp	r2, r3
 8016cc8:	d044      	beq.n	8016d54 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	d140      	bne.n	8016d54 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	3304      	adds	r3, #4
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	f7fe fb64 	bl	80153a4 <uxListRemove>
 8016cdc:	4603      	mov	r3, r0
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d115      	bne.n	8016d0e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016ce2:	693b      	ldr	r3, [r7, #16]
 8016ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016ce6:	491f      	ldr	r1, [pc, #124]	@ (8016d64 <xTaskPriorityDisinherit+0x110>)
 8016ce8:	4613      	mov	r3, r2
 8016cea:	009b      	lsls	r3, r3, #2
 8016cec:	4413      	add	r3, r2
 8016cee:	009b      	lsls	r3, r3, #2
 8016cf0:	440b      	add	r3, r1
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d10a      	bne.n	8016d0e <xTaskPriorityDisinherit+0xba>
 8016cf8:	693b      	ldr	r3, [r7, #16]
 8016cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cfc:	2201      	movs	r2, #1
 8016cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8016d02:	43da      	mvns	r2, r3
 8016d04:	4b18      	ldr	r3, [pc, #96]	@ (8016d68 <xTaskPriorityDisinherit+0x114>)
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	4013      	ands	r3, r2
 8016d0a:	4a17      	ldr	r2, [pc, #92]	@ (8016d68 <xTaskPriorityDisinherit+0x114>)
 8016d0c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016d12:	693b      	ldr	r3, [r7, #16]
 8016d14:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d1a:	f1c3 0207 	rsb	r2, r3, #7
 8016d1e:	693b      	ldr	r3, [r7, #16]
 8016d20:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016d22:	693b      	ldr	r3, [r7, #16]
 8016d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d26:	2201      	movs	r2, #1
 8016d28:	409a      	lsls	r2, r3
 8016d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8016d68 <xTaskPriorityDisinherit+0x114>)
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	4313      	orrs	r3, r2
 8016d30:	4a0d      	ldr	r2, [pc, #52]	@ (8016d68 <xTaskPriorityDisinherit+0x114>)
 8016d32:	6013      	str	r3, [r2, #0]
 8016d34:	693b      	ldr	r3, [r7, #16]
 8016d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016d38:	4613      	mov	r3, r2
 8016d3a:	009b      	lsls	r3, r3, #2
 8016d3c:	4413      	add	r3, r2
 8016d3e:	009b      	lsls	r3, r3, #2
 8016d40:	4a08      	ldr	r2, [pc, #32]	@ (8016d64 <xTaskPriorityDisinherit+0x110>)
 8016d42:	441a      	add	r2, r3
 8016d44:	693b      	ldr	r3, [r7, #16]
 8016d46:	3304      	adds	r3, #4
 8016d48:	4619      	mov	r1, r3
 8016d4a:	4610      	mov	r0, r2
 8016d4c:	f7fe facd 	bl	80152ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016d50:	2301      	movs	r3, #1
 8016d52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016d54:	697b      	ldr	r3, [r7, #20]
	}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3718      	adds	r7, #24
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
 8016d5e:	bf00      	nop
 8016d60:	20001c58 	.word	0x20001c58
 8016d64:	20001c5c 	.word	0x20001c5c
 8016d68:	20001d60 	.word	0x20001d60

08016d6c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016d6c:	b580      	push	{r7, lr}
 8016d6e:	b084      	sub	sp, #16
 8016d70:	af00      	add	r7, sp, #0
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016d76:	4b29      	ldr	r3, [pc, #164]	@ (8016e1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016d7c:	4b28      	ldr	r3, [pc, #160]	@ (8016e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	3304      	adds	r3, #4
 8016d82:	4618      	mov	r0, r3
 8016d84:	f7fe fb0e 	bl	80153a4 <uxListRemove>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d10b      	bne.n	8016da6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8016d8e:	4b24      	ldr	r3, [pc, #144]	@ (8016e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016d94:	2201      	movs	r2, #1
 8016d96:	fa02 f303 	lsl.w	r3, r2, r3
 8016d9a:	43da      	mvns	r2, r3
 8016d9c:	4b21      	ldr	r3, [pc, #132]	@ (8016e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	4013      	ands	r3, r2
 8016da2:	4a20      	ldr	r2, [pc, #128]	@ (8016e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8016da4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dac:	d10a      	bne.n	8016dc4 <prvAddCurrentTaskToDelayedList+0x58>
 8016dae:	683b      	ldr	r3, [r7, #0]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d007      	beq.n	8016dc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016db4:	4b1a      	ldr	r3, [pc, #104]	@ (8016e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	3304      	adds	r3, #4
 8016dba:	4619      	mov	r1, r3
 8016dbc:	481a      	ldr	r0, [pc, #104]	@ (8016e28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8016dbe:	f7fe fa94 	bl	80152ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016dc2:	e026      	b.n	8016e12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016dc4:	68fa      	ldr	r2, [r7, #12]
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	4413      	add	r3, r2
 8016dca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016dcc:	4b14      	ldr	r3, [pc, #80]	@ (8016e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	68ba      	ldr	r2, [r7, #8]
 8016dd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016dd4:	68ba      	ldr	r2, [r7, #8]
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	d209      	bcs.n	8016df0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016ddc:	4b13      	ldr	r3, [pc, #76]	@ (8016e2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8016dde:	681a      	ldr	r2, [r3, #0]
 8016de0:	4b0f      	ldr	r3, [pc, #60]	@ (8016e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	3304      	adds	r3, #4
 8016de6:	4619      	mov	r1, r3
 8016de8:	4610      	mov	r0, r2
 8016dea:	f7fe faa2 	bl	8015332 <vListInsert>
}
 8016dee:	e010      	b.n	8016e12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016df0:	4b0f      	ldr	r3, [pc, #60]	@ (8016e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8016df2:	681a      	ldr	r2, [r3, #0]
 8016df4:	4b0a      	ldr	r3, [pc, #40]	@ (8016e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	3304      	adds	r3, #4
 8016dfa:	4619      	mov	r1, r3
 8016dfc:	4610      	mov	r0, r2
 8016dfe:	f7fe fa98 	bl	8015332 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016e02:	4b0c      	ldr	r3, [pc, #48]	@ (8016e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	68ba      	ldr	r2, [r7, #8]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d202      	bcs.n	8016e12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8016e0c:	4a09      	ldr	r2, [pc, #36]	@ (8016e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	6013      	str	r3, [r2, #0]
}
 8016e12:	bf00      	nop
 8016e14:	3710      	adds	r7, #16
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}
 8016e1a:	bf00      	nop
 8016e1c:	20001d5c 	.word	0x20001d5c
 8016e20:	20001c58 	.word	0x20001c58
 8016e24:	20001d60 	.word	0x20001d60
 8016e28:	20001d44 	.word	0x20001d44
 8016e2c:	20001d14 	.word	0x20001d14
 8016e30:	20001d10 	.word	0x20001d10
 8016e34:	20001d78 	.word	0x20001d78

08016e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016e38:	b480      	push	{r7}
 8016e3a:	b085      	sub	sp, #20
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	3b04      	subs	r3, #4
 8016e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	3b04      	subs	r3, #4
 8016e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	f023 0201 	bic.w	r2, r3, #1
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	3b04      	subs	r3, #4
 8016e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016e68:	4a0c      	ldr	r2, [pc, #48]	@ (8016e9c <pxPortInitialiseStack+0x64>)
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	3b14      	subs	r3, #20
 8016e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016e74:	687a      	ldr	r2, [r7, #4]
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	3b04      	subs	r3, #4
 8016e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	f06f 0202 	mvn.w	r2, #2
 8016e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	3b20      	subs	r3, #32
 8016e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016e8e:	68fb      	ldr	r3, [r7, #12]
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	3714      	adds	r7, #20
 8016e94:	46bd      	mov	sp, r7
 8016e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9a:	4770      	bx	lr
 8016e9c:	08016ea1 	.word	0x08016ea1

08016ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b085      	sub	sp, #20
 8016ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016eaa:	4b15      	ldr	r3, [pc, #84]	@ (8016f00 <prvTaskExitError+0x60>)
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016eb2:	d00d      	beq.n	8016ed0 <prvTaskExitError+0x30>
	__asm volatile
 8016eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016eb8:	b672      	cpsid	i
 8016eba:	f383 8811 	msr	BASEPRI, r3
 8016ebe:	f3bf 8f6f 	isb	sy
 8016ec2:	f3bf 8f4f 	dsb	sy
 8016ec6:	b662      	cpsie	i
 8016ec8:	60fb      	str	r3, [r7, #12]
}
 8016eca:	bf00      	nop
 8016ecc:	bf00      	nop
 8016ece:	e7fd      	b.n	8016ecc <prvTaskExitError+0x2c>
	__asm volatile
 8016ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ed4:	b672      	cpsid	i
 8016ed6:	f383 8811 	msr	BASEPRI, r3
 8016eda:	f3bf 8f6f 	isb	sy
 8016ede:	f3bf 8f4f 	dsb	sy
 8016ee2:	b662      	cpsie	i
 8016ee4:	60bb      	str	r3, [r7, #8]
}
 8016ee6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016ee8:	bf00      	nop
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d0fc      	beq.n	8016eea <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8016ef0:	bf00      	nop
 8016ef2:	bf00      	nop
 8016ef4:	3714      	adds	r7, #20
 8016ef6:	46bd      	mov	sp, r7
 8016ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efc:	4770      	bx	lr
 8016efe:	bf00      	nop
 8016f00:	20000078 	.word	0x20000078
	...

08016f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8016f10:	4b07      	ldr	r3, [pc, #28]	@ (8016f30 <pxCurrentTCBConst2>)
 8016f12:	6819      	ldr	r1, [r3, #0]
 8016f14:	6808      	ldr	r0, [r1, #0]
 8016f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f1a:	f380 8809 	msr	PSP, r0
 8016f1e:	f3bf 8f6f 	isb	sy
 8016f22:	f04f 0000 	mov.w	r0, #0
 8016f26:	f380 8811 	msr	BASEPRI, r0
 8016f2a:	4770      	bx	lr
 8016f2c:	f3af 8000 	nop.w

08016f30 <pxCurrentTCBConst2>:
 8016f30:	20001c58 	.word	0x20001c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8016f34:	bf00      	nop
 8016f36:	bf00      	nop

08016f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8016f38:	4808      	ldr	r0, [pc, #32]	@ (8016f5c <prvPortStartFirstTask+0x24>)
 8016f3a:	6800      	ldr	r0, [r0, #0]
 8016f3c:	6800      	ldr	r0, [r0, #0]
 8016f3e:	f380 8808 	msr	MSP, r0
 8016f42:	f04f 0000 	mov.w	r0, #0
 8016f46:	f380 8814 	msr	CONTROL, r0
 8016f4a:	b662      	cpsie	i
 8016f4c:	b661      	cpsie	f
 8016f4e:	f3bf 8f4f 	dsb	sy
 8016f52:	f3bf 8f6f 	isb	sy
 8016f56:	df00      	svc	0
 8016f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016f5a:	bf00      	nop
 8016f5c:	e000ed08 	.word	0xe000ed08

08016f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b084      	sub	sp, #16
 8016f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016f66:	4b37      	ldr	r3, [pc, #220]	@ (8017044 <xPortStartScheduler+0xe4>)
 8016f68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	b2db      	uxtb	r3, r3
 8016f70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	22ff      	movs	r2, #255	@ 0xff
 8016f76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	b2db      	uxtb	r3, r3
 8016f7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016f80:	78fb      	ldrb	r3, [r7, #3]
 8016f82:	b2db      	uxtb	r3, r3
 8016f84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016f88:	b2da      	uxtb	r2, r3
 8016f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8017048 <xPortStartScheduler+0xe8>)
 8016f8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016f8e:	4b2f      	ldr	r3, [pc, #188]	@ (801704c <xPortStartScheduler+0xec>)
 8016f90:	2207      	movs	r2, #7
 8016f92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016f94:	e009      	b.n	8016faa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8016f96:	4b2d      	ldr	r3, [pc, #180]	@ (801704c <xPortStartScheduler+0xec>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	3b01      	subs	r3, #1
 8016f9c:	4a2b      	ldr	r2, [pc, #172]	@ (801704c <xPortStartScheduler+0xec>)
 8016f9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016fa0:	78fb      	ldrb	r3, [r7, #3]
 8016fa2:	b2db      	uxtb	r3, r3
 8016fa4:	005b      	lsls	r3, r3, #1
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016faa:	78fb      	ldrb	r3, [r7, #3]
 8016fac:	b2db      	uxtb	r3, r3
 8016fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016fb2:	2b80      	cmp	r3, #128	@ 0x80
 8016fb4:	d0ef      	beq.n	8016f96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016fb6:	4b25      	ldr	r3, [pc, #148]	@ (801704c <xPortStartScheduler+0xec>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	f1c3 0307 	rsb	r3, r3, #7
 8016fbe:	2b04      	cmp	r3, #4
 8016fc0:	d00d      	beq.n	8016fde <xPortStartScheduler+0x7e>
	__asm volatile
 8016fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fc6:	b672      	cpsid	i
 8016fc8:	f383 8811 	msr	BASEPRI, r3
 8016fcc:	f3bf 8f6f 	isb	sy
 8016fd0:	f3bf 8f4f 	dsb	sy
 8016fd4:	b662      	cpsie	i
 8016fd6:	60bb      	str	r3, [r7, #8]
}
 8016fd8:	bf00      	nop
 8016fda:	bf00      	nop
 8016fdc:	e7fd      	b.n	8016fda <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016fde:	4b1b      	ldr	r3, [pc, #108]	@ (801704c <xPortStartScheduler+0xec>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	021b      	lsls	r3, r3, #8
 8016fe4:	4a19      	ldr	r2, [pc, #100]	@ (801704c <xPortStartScheduler+0xec>)
 8016fe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016fe8:	4b18      	ldr	r3, [pc, #96]	@ (801704c <xPortStartScheduler+0xec>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016ff0:	4a16      	ldr	r2, [pc, #88]	@ (801704c <xPortStartScheduler+0xec>)
 8016ff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	b2da      	uxtb	r2, r3
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016ffc:	4b14      	ldr	r3, [pc, #80]	@ (8017050 <xPortStartScheduler+0xf0>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	4a13      	ldr	r2, [pc, #76]	@ (8017050 <xPortStartScheduler+0xf0>)
 8017002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8017006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017008:	4b11      	ldr	r3, [pc, #68]	@ (8017050 <xPortStartScheduler+0xf0>)
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	4a10      	ldr	r2, [pc, #64]	@ (8017050 <xPortStartScheduler+0xf0>)
 801700e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8017012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8017014:	f000 f8dc 	bl	80171d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017018:	4b0e      	ldr	r3, [pc, #56]	@ (8017054 <xPortStartScheduler+0xf4>)
 801701a:	2200      	movs	r2, #0
 801701c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801701e:	f000 f8fb 	bl	8017218 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017022:	4b0d      	ldr	r3, [pc, #52]	@ (8017058 <xPortStartScheduler+0xf8>)
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	4a0c      	ldr	r2, [pc, #48]	@ (8017058 <xPortStartScheduler+0xf8>)
 8017028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801702c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801702e:	f7ff ff83 	bl	8016f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8017032:	f7ff fb7b 	bl	801672c <vTaskSwitchContext>
	prvTaskExitError();
 8017036:	f7ff ff33 	bl	8016ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801703a:	2300      	movs	r3, #0
}
 801703c:	4618      	mov	r0, r3
 801703e:	3710      	adds	r7, #16
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	e000e400 	.word	0xe000e400
 8017048:	20001d84 	.word	0x20001d84
 801704c:	20001d88 	.word	0x20001d88
 8017050:	e000ed20 	.word	0xe000ed20
 8017054:	20000078 	.word	0x20000078
 8017058:	e000ef34 	.word	0xe000ef34

0801705c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801705c:	b480      	push	{r7}
 801705e:	b083      	sub	sp, #12
 8017060:	af00      	add	r7, sp, #0
	__asm volatile
 8017062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017066:	b672      	cpsid	i
 8017068:	f383 8811 	msr	BASEPRI, r3
 801706c:	f3bf 8f6f 	isb	sy
 8017070:	f3bf 8f4f 	dsb	sy
 8017074:	b662      	cpsie	i
 8017076:	607b      	str	r3, [r7, #4]
}
 8017078:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801707a:	4b11      	ldr	r3, [pc, #68]	@ (80170c0 <vPortEnterCritical+0x64>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	3301      	adds	r3, #1
 8017080:	4a0f      	ldr	r2, [pc, #60]	@ (80170c0 <vPortEnterCritical+0x64>)
 8017082:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8017084:	4b0e      	ldr	r3, [pc, #56]	@ (80170c0 <vPortEnterCritical+0x64>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	2b01      	cmp	r3, #1
 801708a:	d112      	bne.n	80170b2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801708c:	4b0d      	ldr	r3, [pc, #52]	@ (80170c4 <vPortEnterCritical+0x68>)
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	b2db      	uxtb	r3, r3
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00d      	beq.n	80170b2 <vPortEnterCritical+0x56>
	__asm volatile
 8017096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801709a:	b672      	cpsid	i
 801709c:	f383 8811 	msr	BASEPRI, r3
 80170a0:	f3bf 8f6f 	isb	sy
 80170a4:	f3bf 8f4f 	dsb	sy
 80170a8:	b662      	cpsie	i
 80170aa:	603b      	str	r3, [r7, #0]
}
 80170ac:	bf00      	nop
 80170ae:	bf00      	nop
 80170b0:	e7fd      	b.n	80170ae <vPortEnterCritical+0x52>
	}
}
 80170b2:	bf00      	nop
 80170b4:	370c      	adds	r7, #12
 80170b6:	46bd      	mov	sp, r7
 80170b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170bc:	4770      	bx	lr
 80170be:	bf00      	nop
 80170c0:	20000078 	.word	0x20000078
 80170c4:	e000ed04 	.word	0xe000ed04

080170c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80170c8:	b480      	push	{r7}
 80170ca:	b083      	sub	sp, #12
 80170cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80170ce:	4b13      	ldr	r3, [pc, #76]	@ (801711c <vPortExitCritical+0x54>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d10d      	bne.n	80170f2 <vPortExitCritical+0x2a>
	__asm volatile
 80170d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170da:	b672      	cpsid	i
 80170dc:	f383 8811 	msr	BASEPRI, r3
 80170e0:	f3bf 8f6f 	isb	sy
 80170e4:	f3bf 8f4f 	dsb	sy
 80170e8:	b662      	cpsie	i
 80170ea:	607b      	str	r3, [r7, #4]
}
 80170ec:	bf00      	nop
 80170ee:	bf00      	nop
 80170f0:	e7fd      	b.n	80170ee <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80170f2:	4b0a      	ldr	r3, [pc, #40]	@ (801711c <vPortExitCritical+0x54>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	3b01      	subs	r3, #1
 80170f8:	4a08      	ldr	r2, [pc, #32]	@ (801711c <vPortExitCritical+0x54>)
 80170fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80170fc:	4b07      	ldr	r3, [pc, #28]	@ (801711c <vPortExitCritical+0x54>)
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	2b00      	cmp	r3, #0
 8017102:	d105      	bne.n	8017110 <vPortExitCritical+0x48>
 8017104:	2300      	movs	r3, #0
 8017106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017108:	683b      	ldr	r3, [r7, #0]
 801710a:	f383 8811 	msr	BASEPRI, r3
}
 801710e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017110:	bf00      	nop
 8017112:	370c      	adds	r7, #12
 8017114:	46bd      	mov	sp, r7
 8017116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801711a:	4770      	bx	lr
 801711c:	20000078 	.word	0x20000078

08017120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017120:	f3ef 8009 	mrs	r0, PSP
 8017124:	f3bf 8f6f 	isb	sy
 8017128:	4b15      	ldr	r3, [pc, #84]	@ (8017180 <pxCurrentTCBConst>)
 801712a:	681a      	ldr	r2, [r3, #0]
 801712c:	f01e 0f10 	tst.w	lr, #16
 8017130:	bf08      	it	eq
 8017132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801713a:	6010      	str	r0, [r2, #0]
 801713c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8017144:	b672      	cpsid	i
 8017146:	f380 8811 	msr	BASEPRI, r0
 801714a:	f3bf 8f4f 	dsb	sy
 801714e:	f3bf 8f6f 	isb	sy
 8017152:	b662      	cpsie	i
 8017154:	f7ff faea 	bl	801672c <vTaskSwitchContext>
 8017158:	f04f 0000 	mov.w	r0, #0
 801715c:	f380 8811 	msr	BASEPRI, r0
 8017160:	bc09      	pop	{r0, r3}
 8017162:	6819      	ldr	r1, [r3, #0]
 8017164:	6808      	ldr	r0, [r1, #0]
 8017166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801716a:	f01e 0f10 	tst.w	lr, #16
 801716e:	bf08      	it	eq
 8017170:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017174:	f380 8809 	msr	PSP, r0
 8017178:	f3bf 8f6f 	isb	sy
 801717c:	4770      	bx	lr
 801717e:	bf00      	nop

08017180 <pxCurrentTCBConst>:
 8017180:	20001c58 	.word	0x20001c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017184:	bf00      	nop
 8017186:	bf00      	nop

08017188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017188:	b580      	push	{r7, lr}
 801718a:	b082      	sub	sp, #8
 801718c:	af00      	add	r7, sp, #0
	__asm volatile
 801718e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017192:	b672      	cpsid	i
 8017194:	f383 8811 	msr	BASEPRI, r3
 8017198:	f3bf 8f6f 	isb	sy
 801719c:	f3bf 8f4f 	dsb	sy
 80171a0:	b662      	cpsie	i
 80171a2:	607b      	str	r3, [r7, #4]
}
 80171a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80171a6:	f7ff fa05 	bl	80165b4 <xTaskIncrementTick>
 80171aa:	4603      	mov	r3, r0
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d003      	beq.n	80171b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80171b0:	4b06      	ldr	r3, [pc, #24]	@ (80171cc <SysTick_Handler+0x44>)
 80171b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80171b6:	601a      	str	r2, [r3, #0]
 80171b8:	2300      	movs	r3, #0
 80171ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	f383 8811 	msr	BASEPRI, r3
}
 80171c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80171c4:	bf00      	nop
 80171c6:	3708      	adds	r7, #8
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bd80      	pop	{r7, pc}
 80171cc:	e000ed04 	.word	0xe000ed04

080171d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80171d0:	b480      	push	{r7}
 80171d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80171d4:	4b0b      	ldr	r3, [pc, #44]	@ (8017204 <vPortSetupTimerInterrupt+0x34>)
 80171d6:	2200      	movs	r2, #0
 80171d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80171da:	4b0b      	ldr	r3, [pc, #44]	@ (8017208 <vPortSetupTimerInterrupt+0x38>)
 80171dc:	2200      	movs	r2, #0
 80171de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80171e0:	4b0a      	ldr	r3, [pc, #40]	@ (801720c <vPortSetupTimerInterrupt+0x3c>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	4a0a      	ldr	r2, [pc, #40]	@ (8017210 <vPortSetupTimerInterrupt+0x40>)
 80171e6:	fba2 2303 	umull	r2, r3, r2, r3
 80171ea:	099b      	lsrs	r3, r3, #6
 80171ec:	4a09      	ldr	r2, [pc, #36]	@ (8017214 <vPortSetupTimerInterrupt+0x44>)
 80171ee:	3b01      	subs	r3, #1
 80171f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80171f2:	4b04      	ldr	r3, [pc, #16]	@ (8017204 <vPortSetupTimerInterrupt+0x34>)
 80171f4:	2207      	movs	r2, #7
 80171f6:	601a      	str	r2, [r3, #0]
}
 80171f8:	bf00      	nop
 80171fa:	46bd      	mov	sp, r7
 80171fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017200:	4770      	bx	lr
 8017202:	bf00      	nop
 8017204:	e000e010 	.word	0xe000e010
 8017208:	e000e018 	.word	0xe000e018
 801720c:	20000020 	.word	0x20000020
 8017210:	10624dd3 	.word	0x10624dd3
 8017214:	e000e014 	.word	0xe000e014

08017218 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017218:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8017228 <vPortEnableVFP+0x10>
 801721c:	6801      	ldr	r1, [r0, #0]
 801721e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8017222:	6001      	str	r1, [r0, #0]
 8017224:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017226:	bf00      	nop
 8017228:	e000ed88 	.word	0xe000ed88

0801722c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801722c:	b480      	push	{r7}
 801722e:	b085      	sub	sp, #20
 8017230:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017232:	f3ef 8305 	mrs	r3, IPSR
 8017236:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2b0f      	cmp	r3, #15
 801723c:	d917      	bls.n	801726e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801723e:	4a1a      	ldr	r2, [pc, #104]	@ (80172a8 <vPortValidateInterruptPriority+0x7c>)
 8017240:	68fb      	ldr	r3, [r7, #12]
 8017242:	4413      	add	r3, r2
 8017244:	781b      	ldrb	r3, [r3, #0]
 8017246:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017248:	4b18      	ldr	r3, [pc, #96]	@ (80172ac <vPortValidateInterruptPriority+0x80>)
 801724a:	781b      	ldrb	r3, [r3, #0]
 801724c:	7afa      	ldrb	r2, [r7, #11]
 801724e:	429a      	cmp	r2, r3
 8017250:	d20d      	bcs.n	801726e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8017252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017256:	b672      	cpsid	i
 8017258:	f383 8811 	msr	BASEPRI, r3
 801725c:	f3bf 8f6f 	isb	sy
 8017260:	f3bf 8f4f 	dsb	sy
 8017264:	b662      	cpsie	i
 8017266:	607b      	str	r3, [r7, #4]
}
 8017268:	bf00      	nop
 801726a:	bf00      	nop
 801726c:	e7fd      	b.n	801726a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801726e:	4b10      	ldr	r3, [pc, #64]	@ (80172b0 <vPortValidateInterruptPriority+0x84>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8017276:	4b0f      	ldr	r3, [pc, #60]	@ (80172b4 <vPortValidateInterruptPriority+0x88>)
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	429a      	cmp	r2, r3
 801727c:	d90d      	bls.n	801729a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017282:	b672      	cpsid	i
 8017284:	f383 8811 	msr	BASEPRI, r3
 8017288:	f3bf 8f6f 	isb	sy
 801728c:	f3bf 8f4f 	dsb	sy
 8017290:	b662      	cpsie	i
 8017292:	603b      	str	r3, [r7, #0]
}
 8017294:	bf00      	nop
 8017296:	bf00      	nop
 8017298:	e7fd      	b.n	8017296 <vPortValidateInterruptPriority+0x6a>
	}
 801729a:	bf00      	nop
 801729c:	3714      	adds	r7, #20
 801729e:	46bd      	mov	sp, r7
 80172a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a4:	4770      	bx	lr
 80172a6:	bf00      	nop
 80172a8:	e000e3f0 	.word	0xe000e3f0
 80172ac:	20001d84 	.word	0x20001d84
 80172b0:	e000ed0c 	.word	0xe000ed0c
 80172b4:	20001d88 	.word	0x20001d88

080172b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b08a      	sub	sp, #40	@ 0x28
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80172c0:	2300      	movs	r3, #0
 80172c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80172c4:	f7ff f8a6 	bl	8016414 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80172c8:	4b5f      	ldr	r3, [pc, #380]	@ (8017448 <pvPortMalloc+0x190>)
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d101      	bne.n	80172d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80172d0:	f000 f924 	bl	801751c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80172d4:	4b5d      	ldr	r3, [pc, #372]	@ (801744c <pvPortMalloc+0x194>)
 80172d6:	681a      	ldr	r2, [r3, #0]
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	4013      	ands	r3, r2
 80172dc:	2b00      	cmp	r3, #0
 80172de:	f040 8094 	bne.w	801740a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d020      	beq.n	801732a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80172e8:	2208      	movs	r2, #8
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	4413      	add	r3, r2
 80172ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	f003 0307 	and.w	r3, r3, #7
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d017      	beq.n	801732a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f023 0307 	bic.w	r3, r3, #7
 8017300:	3308      	adds	r3, #8
 8017302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	f003 0307 	and.w	r3, r3, #7
 801730a:	2b00      	cmp	r3, #0
 801730c:	d00d      	beq.n	801732a <pvPortMalloc+0x72>
	__asm volatile
 801730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017312:	b672      	cpsid	i
 8017314:	f383 8811 	msr	BASEPRI, r3
 8017318:	f3bf 8f6f 	isb	sy
 801731c:	f3bf 8f4f 	dsb	sy
 8017320:	b662      	cpsie	i
 8017322:	617b      	str	r3, [r7, #20]
}
 8017324:	bf00      	nop
 8017326:	bf00      	nop
 8017328:	e7fd      	b.n	8017326 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d06c      	beq.n	801740a <pvPortMalloc+0x152>
 8017330:	4b47      	ldr	r3, [pc, #284]	@ (8017450 <pvPortMalloc+0x198>)
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	687a      	ldr	r2, [r7, #4]
 8017336:	429a      	cmp	r2, r3
 8017338:	d867      	bhi.n	801740a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801733a:	4b46      	ldr	r3, [pc, #280]	@ (8017454 <pvPortMalloc+0x19c>)
 801733c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801733e:	4b45      	ldr	r3, [pc, #276]	@ (8017454 <pvPortMalloc+0x19c>)
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017344:	e004      	b.n	8017350 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8017346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017348:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801734a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017352:	685b      	ldr	r3, [r3, #4]
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	429a      	cmp	r2, r3
 8017358:	d903      	bls.n	8017362 <pvPortMalloc+0xaa>
 801735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	2b00      	cmp	r3, #0
 8017360:	d1f1      	bne.n	8017346 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017362:	4b39      	ldr	r3, [pc, #228]	@ (8017448 <pvPortMalloc+0x190>)
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017368:	429a      	cmp	r2, r3
 801736a:	d04e      	beq.n	801740a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801736c:	6a3b      	ldr	r3, [r7, #32]
 801736e:	681b      	ldr	r3, [r3, #0]
 8017370:	2208      	movs	r2, #8
 8017372:	4413      	add	r3, r2
 8017374:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017378:	681a      	ldr	r2, [r3, #0]
 801737a:	6a3b      	ldr	r3, [r7, #32]
 801737c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017380:	685a      	ldr	r2, [r3, #4]
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	1ad2      	subs	r2, r2, r3
 8017386:	2308      	movs	r3, #8
 8017388:	005b      	lsls	r3, r3, #1
 801738a:	429a      	cmp	r2, r3
 801738c:	d922      	bls.n	80173d4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801738e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	4413      	add	r3, r2
 8017394:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017396:	69bb      	ldr	r3, [r7, #24]
 8017398:	f003 0307 	and.w	r3, r3, #7
 801739c:	2b00      	cmp	r3, #0
 801739e:	d00d      	beq.n	80173bc <pvPortMalloc+0x104>
	__asm volatile
 80173a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80173a4:	b672      	cpsid	i
 80173a6:	f383 8811 	msr	BASEPRI, r3
 80173aa:	f3bf 8f6f 	isb	sy
 80173ae:	f3bf 8f4f 	dsb	sy
 80173b2:	b662      	cpsie	i
 80173b4:	613b      	str	r3, [r7, #16]
}
 80173b6:	bf00      	nop
 80173b8:	bf00      	nop
 80173ba:	e7fd      	b.n	80173b8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80173bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173be:	685a      	ldr	r2, [r3, #4]
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	1ad2      	subs	r2, r2, r3
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80173c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173ca:	687a      	ldr	r2, [r7, #4]
 80173cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80173ce:	69b8      	ldr	r0, [r7, #24]
 80173d0:	f000 f906 	bl	80175e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80173d4:	4b1e      	ldr	r3, [pc, #120]	@ (8017450 <pvPortMalloc+0x198>)
 80173d6:	681a      	ldr	r2, [r3, #0]
 80173d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	1ad3      	subs	r3, r2, r3
 80173de:	4a1c      	ldr	r2, [pc, #112]	@ (8017450 <pvPortMalloc+0x198>)
 80173e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80173e2:	4b1b      	ldr	r3, [pc, #108]	@ (8017450 <pvPortMalloc+0x198>)
 80173e4:	681a      	ldr	r2, [r3, #0]
 80173e6:	4b1c      	ldr	r3, [pc, #112]	@ (8017458 <pvPortMalloc+0x1a0>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	429a      	cmp	r2, r3
 80173ec:	d203      	bcs.n	80173f6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80173ee:	4b18      	ldr	r3, [pc, #96]	@ (8017450 <pvPortMalloc+0x198>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	4a19      	ldr	r2, [pc, #100]	@ (8017458 <pvPortMalloc+0x1a0>)
 80173f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80173f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f8:	685a      	ldr	r2, [r3, #4]
 80173fa:	4b14      	ldr	r3, [pc, #80]	@ (801744c <pvPortMalloc+0x194>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	431a      	orrs	r2, r3
 8017400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017402:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017406:	2200      	movs	r2, #0
 8017408:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801740a:	f7ff f811 	bl	8016430 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801740e:	69fb      	ldr	r3, [r7, #28]
 8017410:	2b00      	cmp	r3, #0
 8017412:	d101      	bne.n	8017418 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8017414:	f7ea fdb8 	bl	8001f88 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017418:	69fb      	ldr	r3, [r7, #28]
 801741a:	f003 0307 	and.w	r3, r3, #7
 801741e:	2b00      	cmp	r3, #0
 8017420:	d00d      	beq.n	801743e <pvPortMalloc+0x186>
	__asm volatile
 8017422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017426:	b672      	cpsid	i
 8017428:	f383 8811 	msr	BASEPRI, r3
 801742c:	f3bf 8f6f 	isb	sy
 8017430:	f3bf 8f4f 	dsb	sy
 8017434:	b662      	cpsie	i
 8017436:	60fb      	str	r3, [r7, #12]
}
 8017438:	bf00      	nop
 801743a:	bf00      	nop
 801743c:	e7fd      	b.n	801743a <pvPortMalloc+0x182>
	return pvReturn;
 801743e:	69fb      	ldr	r3, [r7, #28]
}
 8017440:	4618      	mov	r0, r3
 8017442:	3728      	adds	r7, #40	@ 0x28
 8017444:	46bd      	mov	sp, r7
 8017446:	bd80      	pop	{r7, pc}
 8017448:	20011d94 	.word	0x20011d94
 801744c:	20011da0 	.word	0x20011da0
 8017450:	20011d98 	.word	0x20011d98
 8017454:	20011d8c 	.word	0x20011d8c
 8017458:	20011d9c 	.word	0x20011d9c

0801745c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b086      	sub	sp, #24
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d04e      	beq.n	801750c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801746e:	2308      	movs	r3, #8
 8017470:	425b      	negs	r3, r3
 8017472:	697a      	ldr	r2, [r7, #20]
 8017474:	4413      	add	r3, r2
 8017476:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801747c:	693b      	ldr	r3, [r7, #16]
 801747e:	685a      	ldr	r2, [r3, #4]
 8017480:	4b24      	ldr	r3, [pc, #144]	@ (8017514 <vPortFree+0xb8>)
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	4013      	ands	r3, r2
 8017486:	2b00      	cmp	r3, #0
 8017488:	d10d      	bne.n	80174a6 <vPortFree+0x4a>
	__asm volatile
 801748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801748e:	b672      	cpsid	i
 8017490:	f383 8811 	msr	BASEPRI, r3
 8017494:	f3bf 8f6f 	isb	sy
 8017498:	f3bf 8f4f 	dsb	sy
 801749c:	b662      	cpsie	i
 801749e:	60fb      	str	r3, [r7, #12]
}
 80174a0:	bf00      	nop
 80174a2:	bf00      	nop
 80174a4:	e7fd      	b.n	80174a2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80174a6:	693b      	ldr	r3, [r7, #16]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d00d      	beq.n	80174ca <vPortFree+0x6e>
	__asm volatile
 80174ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80174b2:	b672      	cpsid	i
 80174b4:	f383 8811 	msr	BASEPRI, r3
 80174b8:	f3bf 8f6f 	isb	sy
 80174bc:	f3bf 8f4f 	dsb	sy
 80174c0:	b662      	cpsie	i
 80174c2:	60bb      	str	r3, [r7, #8]
}
 80174c4:	bf00      	nop
 80174c6:	bf00      	nop
 80174c8:	e7fd      	b.n	80174c6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	685a      	ldr	r2, [r3, #4]
 80174ce:	4b11      	ldr	r3, [pc, #68]	@ (8017514 <vPortFree+0xb8>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	4013      	ands	r3, r2
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d019      	beq.n	801750c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d115      	bne.n	801750c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	685a      	ldr	r2, [r3, #4]
 80174e4:	4b0b      	ldr	r3, [pc, #44]	@ (8017514 <vPortFree+0xb8>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	43db      	mvns	r3, r3
 80174ea:	401a      	ands	r2, r3
 80174ec:	693b      	ldr	r3, [r7, #16]
 80174ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80174f0:	f7fe ff90 	bl	8016414 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80174f4:	693b      	ldr	r3, [r7, #16]
 80174f6:	685a      	ldr	r2, [r3, #4]
 80174f8:	4b07      	ldr	r3, [pc, #28]	@ (8017518 <vPortFree+0xbc>)
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	4413      	add	r3, r2
 80174fe:	4a06      	ldr	r2, [pc, #24]	@ (8017518 <vPortFree+0xbc>)
 8017500:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017502:	6938      	ldr	r0, [r7, #16]
 8017504:	f000 f86c 	bl	80175e0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8017508:	f7fe ff92 	bl	8016430 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801750c:	bf00      	nop
 801750e:	3718      	adds	r7, #24
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}
 8017514:	20011da0 	.word	0x20011da0
 8017518:	20011d98 	.word	0x20011d98

0801751c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801751c:	b480      	push	{r7}
 801751e:	b085      	sub	sp, #20
 8017520:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017522:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8017526:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017528:	4b27      	ldr	r3, [pc, #156]	@ (80175c8 <prvHeapInit+0xac>)
 801752a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	f003 0307 	and.w	r3, r3, #7
 8017532:	2b00      	cmp	r3, #0
 8017534:	d00c      	beq.n	8017550 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	3307      	adds	r3, #7
 801753a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	f023 0307 	bic.w	r3, r3, #7
 8017542:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017544:	68ba      	ldr	r2, [r7, #8]
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	1ad3      	subs	r3, r2, r3
 801754a:	4a1f      	ldr	r2, [pc, #124]	@ (80175c8 <prvHeapInit+0xac>)
 801754c:	4413      	add	r3, r2
 801754e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017554:	4a1d      	ldr	r2, [pc, #116]	@ (80175cc <prvHeapInit+0xb0>)
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801755a:	4b1c      	ldr	r3, [pc, #112]	@ (80175cc <prvHeapInit+0xb0>)
 801755c:	2200      	movs	r2, #0
 801755e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	68ba      	ldr	r2, [r7, #8]
 8017564:	4413      	add	r3, r2
 8017566:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017568:	2208      	movs	r2, #8
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	1a9b      	subs	r3, r3, r2
 801756e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	f023 0307 	bic.w	r3, r3, #7
 8017576:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017578:	68fb      	ldr	r3, [r7, #12]
 801757a:	4a15      	ldr	r2, [pc, #84]	@ (80175d0 <prvHeapInit+0xb4>)
 801757c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801757e:	4b14      	ldr	r3, [pc, #80]	@ (80175d0 <prvHeapInit+0xb4>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	2200      	movs	r2, #0
 8017584:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017586:	4b12      	ldr	r3, [pc, #72]	@ (80175d0 <prvHeapInit+0xb4>)
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	2200      	movs	r2, #0
 801758c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017592:	683b      	ldr	r3, [r7, #0]
 8017594:	68fa      	ldr	r2, [r7, #12]
 8017596:	1ad2      	subs	r2, r2, r3
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801759c:	4b0c      	ldr	r3, [pc, #48]	@ (80175d0 <prvHeapInit+0xb4>)
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	683b      	ldr	r3, [r7, #0]
 80175a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80175a4:	683b      	ldr	r3, [r7, #0]
 80175a6:	685b      	ldr	r3, [r3, #4]
 80175a8:	4a0a      	ldr	r2, [pc, #40]	@ (80175d4 <prvHeapInit+0xb8>)
 80175aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	685b      	ldr	r3, [r3, #4]
 80175b0:	4a09      	ldr	r2, [pc, #36]	@ (80175d8 <prvHeapInit+0xbc>)
 80175b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80175b4:	4b09      	ldr	r3, [pc, #36]	@ (80175dc <prvHeapInit+0xc0>)
 80175b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80175ba:	601a      	str	r2, [r3, #0]
}
 80175bc:	bf00      	nop
 80175be:	3714      	adds	r7, #20
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr
 80175c8:	20001d8c 	.word	0x20001d8c
 80175cc:	20011d8c 	.word	0x20011d8c
 80175d0:	20011d94 	.word	0x20011d94
 80175d4:	20011d9c 	.word	0x20011d9c
 80175d8:	20011d98 	.word	0x20011d98
 80175dc:	20011da0 	.word	0x20011da0

080175e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80175e0:	b480      	push	{r7}
 80175e2:	b085      	sub	sp, #20
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80175e8:	4b28      	ldr	r3, [pc, #160]	@ (801768c <prvInsertBlockIntoFreeList+0xac>)
 80175ea:	60fb      	str	r3, [r7, #12]
 80175ec:	e002      	b.n	80175f4 <prvInsertBlockIntoFreeList+0x14>
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	60fb      	str	r3, [r7, #12]
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	687a      	ldr	r2, [r7, #4]
 80175fa:	429a      	cmp	r2, r3
 80175fc:	d8f7      	bhi.n	80175ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	685b      	ldr	r3, [r3, #4]
 8017606:	68ba      	ldr	r2, [r7, #8]
 8017608:	4413      	add	r3, r2
 801760a:	687a      	ldr	r2, [r7, #4]
 801760c:	429a      	cmp	r2, r3
 801760e:	d108      	bne.n	8017622 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	685a      	ldr	r2, [r3, #4]
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	685b      	ldr	r3, [r3, #4]
 8017618:	441a      	add	r2, r3
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	685b      	ldr	r3, [r3, #4]
 801762a:	68ba      	ldr	r2, [r7, #8]
 801762c:	441a      	add	r2, r3
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	681b      	ldr	r3, [r3, #0]
 8017632:	429a      	cmp	r2, r3
 8017634:	d118      	bne.n	8017668 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	4b15      	ldr	r3, [pc, #84]	@ (8017690 <prvInsertBlockIntoFreeList+0xb0>)
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	429a      	cmp	r2, r3
 8017640:	d00d      	beq.n	801765e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	685a      	ldr	r2, [r3, #4]
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	441a      	add	r2, r3
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	681a      	ldr	r2, [r3, #0]
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	601a      	str	r2, [r3, #0]
 801765c:	e008      	b.n	8017670 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801765e:	4b0c      	ldr	r3, [pc, #48]	@ (8017690 <prvInsertBlockIntoFreeList+0xb0>)
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	601a      	str	r2, [r3, #0]
 8017666:	e003      	b.n	8017670 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017670:	68fa      	ldr	r2, [r7, #12]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	429a      	cmp	r2, r3
 8017676:	d002      	beq.n	801767e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801767e:	bf00      	nop
 8017680:	3714      	adds	r7, #20
 8017682:	46bd      	mov	sp, r7
 8017684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017688:	4770      	bx	lr
 801768a:	bf00      	nop
 801768c:	20011d8c 	.word	0x20011d8c
 8017690:	20011d94 	.word	0x20011d94

08017694 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8017694:	b580      	push	{r7, lr}
 8017696:	b082      	sub	sp, #8
 8017698:	af00      	add	r7, sp, #0
 801769a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7fa fe32 	bl	801230c <USBH_LL_IncTimer>
}
 80176a8:	bf00      	nop
 80176aa:	3708      	adds	r7, #8
 80176ac:	46bd      	mov	sp, r7
 80176ae:	bd80      	pop	{r7, pc}

080176b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b082      	sub	sp, #8
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176be:	4618      	mov	r0, r3
 80176c0:	f7fa fe72 	bl	80123a8 <USBH_LL_Connect>
}
 80176c4:	bf00      	nop
 80176c6:	3708      	adds	r7, #8
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bd80      	pop	{r7, pc}

080176cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b082      	sub	sp, #8
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176da:	4618      	mov	r0, r3
 80176dc:	f7fa fe7f 	bl	80123de <USBH_LL_Disconnect>
}
 80176e0:	bf00      	nop
 80176e2:	3708      	adds	r7, #8
 80176e4:	46bd      	mov	sp, r7
 80176e6:	bd80      	pop	{r7, pc}

080176e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80176e8:	b580      	push	{r7, lr}
 80176ea:	b082      	sub	sp, #8
 80176ec:	af00      	add	r7, sp, #0
 80176ee:	6078      	str	r0, [r7, #4]
 80176f0:	460b      	mov	r3, r1
 80176f2:	70fb      	strb	r3, [r7, #3]
 80176f4:	4613      	mov	r3, r2
 80176f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80176fe:	4618      	mov	r0, r3
 8017700:	f7fa febe 	bl	8012480 <USBH_LL_NotifyURBChange>
#endif
}
 8017704:	bf00      	nop
 8017706:	3708      	adds	r7, #8
 8017708:	46bd      	mov	sp, r7
 801770a:	bd80      	pop	{r7, pc}

0801770c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b082      	sub	sp, #8
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801771a:	4618      	mov	r0, r3
 801771c:	f7fa fe20 	bl	8012360 <USBH_LL_PortEnabled>
}
 8017720:	bf00      	nop
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}

08017728 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8017736:	4618      	mov	r0, r3
 8017738:	f7fa fe24 	bl	8012384 <USBH_LL_PortDisabled>
}
 801773c:	bf00      	nop
 801773e:	3708      	adds	r7, #8
 8017740:	46bd      	mov	sp, r7
 8017742:	bd80      	pop	{r7, pc}

08017744 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b084      	sub	sp, #16
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801774c:	2300      	movs	r3, #0
 801774e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017750:	2300      	movs	r3, #0
 8017752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 801775a:	4618      	mov	r0, r3
 801775c:	f7f1 f869 	bl	8008832 <HAL_HCD_Stop>
 8017760:	4603      	mov	r3, r0
 8017762:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8017764:	7bfb      	ldrb	r3, [r7, #15]
 8017766:	4618      	mov	r0, r3
 8017768:	f000 f808 	bl	801777c <USBH_Get_USB_Status>
 801776c:	4603      	mov	r3, r0
 801776e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017770:	7bbb      	ldrb	r3, [r7, #14]
}
 8017772:	4618      	mov	r0, r3
 8017774:	3710      	adds	r7, #16
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
	...

0801777c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801777c:	b480      	push	{r7}
 801777e:	b085      	sub	sp, #20
 8017780:	af00      	add	r7, sp, #0
 8017782:	4603      	mov	r3, r0
 8017784:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8017786:	2300      	movs	r3, #0
 8017788:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801778a:	79fb      	ldrb	r3, [r7, #7]
 801778c:	2b03      	cmp	r3, #3
 801778e:	d817      	bhi.n	80177c0 <USBH_Get_USB_Status+0x44>
 8017790:	a201      	add	r2, pc, #4	@ (adr r2, 8017798 <USBH_Get_USB_Status+0x1c>)
 8017792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017796:	bf00      	nop
 8017798:	080177a9 	.word	0x080177a9
 801779c:	080177af 	.word	0x080177af
 80177a0:	080177b5 	.word	0x080177b5
 80177a4:	080177bb 	.word	0x080177bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80177a8:	2300      	movs	r3, #0
 80177aa:	73fb      	strb	r3, [r7, #15]
    break;
 80177ac:	e00b      	b.n	80177c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80177ae:	2302      	movs	r3, #2
 80177b0:	73fb      	strb	r3, [r7, #15]
    break;
 80177b2:	e008      	b.n	80177c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80177b4:	2301      	movs	r3, #1
 80177b6:	73fb      	strb	r3, [r7, #15]
    break;
 80177b8:	e005      	b.n	80177c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80177ba:	2302      	movs	r3, #2
 80177bc:	73fb      	strb	r3, [r7, #15]
    break;
 80177be:	e002      	b.n	80177c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80177c0:	2302      	movs	r3, #2
 80177c2:	73fb      	strb	r3, [r7, #15]
    break;
 80177c4:	bf00      	nop
  }
  return usb_status;
 80177c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	3714      	adds	r7, #20
 80177cc:	46bd      	mov	sp, r7
 80177ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d2:	4770      	bx	lr

080177d4 <sbrk_aligned>:
 80177d4:	b570      	push	{r4, r5, r6, lr}
 80177d6:	4e0f      	ldr	r6, [pc, #60]	@ (8017814 <sbrk_aligned+0x40>)
 80177d8:	460c      	mov	r4, r1
 80177da:	6831      	ldr	r1, [r6, #0]
 80177dc:	4605      	mov	r5, r0
 80177de:	b911      	cbnz	r1, 80177e6 <sbrk_aligned+0x12>
 80177e0:	f000 faf2 	bl	8017dc8 <_sbrk_r>
 80177e4:	6030      	str	r0, [r6, #0]
 80177e6:	4621      	mov	r1, r4
 80177e8:	4628      	mov	r0, r5
 80177ea:	f000 faed 	bl	8017dc8 <_sbrk_r>
 80177ee:	1c43      	adds	r3, r0, #1
 80177f0:	d103      	bne.n	80177fa <sbrk_aligned+0x26>
 80177f2:	f04f 34ff 	mov.w	r4, #4294967295
 80177f6:	4620      	mov	r0, r4
 80177f8:	bd70      	pop	{r4, r5, r6, pc}
 80177fa:	1cc4      	adds	r4, r0, #3
 80177fc:	f024 0403 	bic.w	r4, r4, #3
 8017800:	42a0      	cmp	r0, r4
 8017802:	d0f8      	beq.n	80177f6 <sbrk_aligned+0x22>
 8017804:	1a21      	subs	r1, r4, r0
 8017806:	4628      	mov	r0, r5
 8017808:	f000 fade 	bl	8017dc8 <_sbrk_r>
 801780c:	3001      	adds	r0, #1
 801780e:	d1f2      	bne.n	80177f6 <sbrk_aligned+0x22>
 8017810:	e7ef      	b.n	80177f2 <sbrk_aligned+0x1e>
 8017812:	bf00      	nop
 8017814:	20012184 	.word	0x20012184

08017818 <_malloc_r>:
 8017818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801781c:	1ccd      	adds	r5, r1, #3
 801781e:	f025 0503 	bic.w	r5, r5, #3
 8017822:	3508      	adds	r5, #8
 8017824:	2d0c      	cmp	r5, #12
 8017826:	bf38      	it	cc
 8017828:	250c      	movcc	r5, #12
 801782a:	2d00      	cmp	r5, #0
 801782c:	4606      	mov	r6, r0
 801782e:	db01      	blt.n	8017834 <_malloc_r+0x1c>
 8017830:	42a9      	cmp	r1, r5
 8017832:	d904      	bls.n	801783e <_malloc_r+0x26>
 8017834:	230c      	movs	r3, #12
 8017836:	6033      	str	r3, [r6, #0]
 8017838:	2000      	movs	r0, #0
 801783a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801783e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8017914 <_malloc_r+0xfc>
 8017842:	f000 f869 	bl	8017918 <__malloc_lock>
 8017846:	f8d8 3000 	ldr.w	r3, [r8]
 801784a:	461c      	mov	r4, r3
 801784c:	bb44      	cbnz	r4, 80178a0 <_malloc_r+0x88>
 801784e:	4629      	mov	r1, r5
 8017850:	4630      	mov	r0, r6
 8017852:	f7ff ffbf 	bl	80177d4 <sbrk_aligned>
 8017856:	1c43      	adds	r3, r0, #1
 8017858:	4604      	mov	r4, r0
 801785a:	d158      	bne.n	801790e <_malloc_r+0xf6>
 801785c:	f8d8 4000 	ldr.w	r4, [r8]
 8017860:	4627      	mov	r7, r4
 8017862:	2f00      	cmp	r7, #0
 8017864:	d143      	bne.n	80178ee <_malloc_r+0xd6>
 8017866:	2c00      	cmp	r4, #0
 8017868:	d04b      	beq.n	8017902 <_malloc_r+0xea>
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	4639      	mov	r1, r7
 801786e:	4630      	mov	r0, r6
 8017870:	eb04 0903 	add.w	r9, r4, r3
 8017874:	f000 faa8 	bl	8017dc8 <_sbrk_r>
 8017878:	4581      	cmp	r9, r0
 801787a:	d142      	bne.n	8017902 <_malloc_r+0xea>
 801787c:	6821      	ldr	r1, [r4, #0]
 801787e:	1a6d      	subs	r5, r5, r1
 8017880:	4629      	mov	r1, r5
 8017882:	4630      	mov	r0, r6
 8017884:	f7ff ffa6 	bl	80177d4 <sbrk_aligned>
 8017888:	3001      	adds	r0, #1
 801788a:	d03a      	beq.n	8017902 <_malloc_r+0xea>
 801788c:	6823      	ldr	r3, [r4, #0]
 801788e:	442b      	add	r3, r5
 8017890:	6023      	str	r3, [r4, #0]
 8017892:	f8d8 3000 	ldr.w	r3, [r8]
 8017896:	685a      	ldr	r2, [r3, #4]
 8017898:	bb62      	cbnz	r2, 80178f4 <_malloc_r+0xdc>
 801789a:	f8c8 7000 	str.w	r7, [r8]
 801789e:	e00f      	b.n	80178c0 <_malloc_r+0xa8>
 80178a0:	6822      	ldr	r2, [r4, #0]
 80178a2:	1b52      	subs	r2, r2, r5
 80178a4:	d420      	bmi.n	80178e8 <_malloc_r+0xd0>
 80178a6:	2a0b      	cmp	r2, #11
 80178a8:	d917      	bls.n	80178da <_malloc_r+0xc2>
 80178aa:	1961      	adds	r1, r4, r5
 80178ac:	42a3      	cmp	r3, r4
 80178ae:	6025      	str	r5, [r4, #0]
 80178b0:	bf18      	it	ne
 80178b2:	6059      	strne	r1, [r3, #4]
 80178b4:	6863      	ldr	r3, [r4, #4]
 80178b6:	bf08      	it	eq
 80178b8:	f8c8 1000 	streq.w	r1, [r8]
 80178bc:	5162      	str	r2, [r4, r5]
 80178be:	604b      	str	r3, [r1, #4]
 80178c0:	4630      	mov	r0, r6
 80178c2:	f000 f82f 	bl	8017924 <__malloc_unlock>
 80178c6:	f104 000b 	add.w	r0, r4, #11
 80178ca:	1d23      	adds	r3, r4, #4
 80178cc:	f020 0007 	bic.w	r0, r0, #7
 80178d0:	1ac2      	subs	r2, r0, r3
 80178d2:	bf1c      	itt	ne
 80178d4:	1a1b      	subne	r3, r3, r0
 80178d6:	50a3      	strne	r3, [r4, r2]
 80178d8:	e7af      	b.n	801783a <_malloc_r+0x22>
 80178da:	6862      	ldr	r2, [r4, #4]
 80178dc:	42a3      	cmp	r3, r4
 80178de:	bf0c      	ite	eq
 80178e0:	f8c8 2000 	streq.w	r2, [r8]
 80178e4:	605a      	strne	r2, [r3, #4]
 80178e6:	e7eb      	b.n	80178c0 <_malloc_r+0xa8>
 80178e8:	4623      	mov	r3, r4
 80178ea:	6864      	ldr	r4, [r4, #4]
 80178ec:	e7ae      	b.n	801784c <_malloc_r+0x34>
 80178ee:	463c      	mov	r4, r7
 80178f0:	687f      	ldr	r7, [r7, #4]
 80178f2:	e7b6      	b.n	8017862 <_malloc_r+0x4a>
 80178f4:	461a      	mov	r2, r3
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	42a3      	cmp	r3, r4
 80178fa:	d1fb      	bne.n	80178f4 <_malloc_r+0xdc>
 80178fc:	2300      	movs	r3, #0
 80178fe:	6053      	str	r3, [r2, #4]
 8017900:	e7de      	b.n	80178c0 <_malloc_r+0xa8>
 8017902:	230c      	movs	r3, #12
 8017904:	6033      	str	r3, [r6, #0]
 8017906:	4630      	mov	r0, r6
 8017908:	f000 f80c 	bl	8017924 <__malloc_unlock>
 801790c:	e794      	b.n	8017838 <_malloc_r+0x20>
 801790e:	6005      	str	r5, [r0, #0]
 8017910:	e7d6      	b.n	80178c0 <_malloc_r+0xa8>
 8017912:	bf00      	nop
 8017914:	20012188 	.word	0x20012188

08017918 <__malloc_lock>:
 8017918:	4801      	ldr	r0, [pc, #4]	@ (8017920 <__malloc_lock+0x8>)
 801791a:	f000 baa2 	b.w	8017e62 <__retarget_lock_acquire_recursive>
 801791e:	bf00      	nop
 8017920:	200122cc 	.word	0x200122cc

08017924 <__malloc_unlock>:
 8017924:	4801      	ldr	r0, [pc, #4]	@ (801792c <__malloc_unlock+0x8>)
 8017926:	f000 ba9d 	b.w	8017e64 <__retarget_lock_release_recursive>
 801792a:	bf00      	nop
 801792c:	200122cc 	.word	0x200122cc

08017930 <std>:
 8017930:	2300      	movs	r3, #0
 8017932:	b510      	push	{r4, lr}
 8017934:	4604      	mov	r4, r0
 8017936:	e9c0 3300 	strd	r3, r3, [r0]
 801793a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801793e:	6083      	str	r3, [r0, #8]
 8017940:	8181      	strh	r1, [r0, #12]
 8017942:	6643      	str	r3, [r0, #100]	@ 0x64
 8017944:	81c2      	strh	r2, [r0, #14]
 8017946:	6183      	str	r3, [r0, #24]
 8017948:	4619      	mov	r1, r3
 801794a:	2208      	movs	r2, #8
 801794c:	305c      	adds	r0, #92	@ 0x5c
 801794e:	f000 f9c9 	bl	8017ce4 <memset>
 8017952:	4b0d      	ldr	r3, [pc, #52]	@ (8017988 <std+0x58>)
 8017954:	6263      	str	r3, [r4, #36]	@ 0x24
 8017956:	4b0d      	ldr	r3, [pc, #52]	@ (801798c <std+0x5c>)
 8017958:	62a3      	str	r3, [r4, #40]	@ 0x28
 801795a:	4b0d      	ldr	r3, [pc, #52]	@ (8017990 <std+0x60>)
 801795c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801795e:	4b0d      	ldr	r3, [pc, #52]	@ (8017994 <std+0x64>)
 8017960:	6323      	str	r3, [r4, #48]	@ 0x30
 8017962:	4b0d      	ldr	r3, [pc, #52]	@ (8017998 <std+0x68>)
 8017964:	6224      	str	r4, [r4, #32]
 8017966:	429c      	cmp	r4, r3
 8017968:	d006      	beq.n	8017978 <std+0x48>
 801796a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801796e:	4294      	cmp	r4, r2
 8017970:	d002      	beq.n	8017978 <std+0x48>
 8017972:	33d0      	adds	r3, #208	@ 0xd0
 8017974:	429c      	cmp	r4, r3
 8017976:	d105      	bne.n	8017984 <std+0x54>
 8017978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017980:	f000 ba6e 	b.w	8017e60 <__retarget_lock_init_recursive>
 8017984:	bd10      	pop	{r4, pc}
 8017986:	bf00      	nop
 8017988:	08017be1 	.word	0x08017be1
 801798c:	08017c07 	.word	0x08017c07
 8017990:	08017c3f 	.word	0x08017c3f
 8017994:	08017c63 	.word	0x08017c63
 8017998:	2001218c 	.word	0x2001218c

0801799c <stdio_exit_handler>:
 801799c:	4a02      	ldr	r2, [pc, #8]	@ (80179a8 <stdio_exit_handler+0xc>)
 801799e:	4903      	ldr	r1, [pc, #12]	@ (80179ac <stdio_exit_handler+0x10>)
 80179a0:	4803      	ldr	r0, [pc, #12]	@ (80179b0 <stdio_exit_handler+0x14>)
 80179a2:	f000 b869 	b.w	8017a78 <_fwalk_sglue>
 80179a6:	bf00      	nop
 80179a8:	2000007c 	.word	0x2000007c
 80179ac:	08018ea9 	.word	0x08018ea9
 80179b0:	2000008c 	.word	0x2000008c

080179b4 <cleanup_stdio>:
 80179b4:	6841      	ldr	r1, [r0, #4]
 80179b6:	4b0c      	ldr	r3, [pc, #48]	@ (80179e8 <cleanup_stdio+0x34>)
 80179b8:	4299      	cmp	r1, r3
 80179ba:	b510      	push	{r4, lr}
 80179bc:	4604      	mov	r4, r0
 80179be:	d001      	beq.n	80179c4 <cleanup_stdio+0x10>
 80179c0:	f001 fa72 	bl	8018ea8 <_fflush_r>
 80179c4:	68a1      	ldr	r1, [r4, #8]
 80179c6:	4b09      	ldr	r3, [pc, #36]	@ (80179ec <cleanup_stdio+0x38>)
 80179c8:	4299      	cmp	r1, r3
 80179ca:	d002      	beq.n	80179d2 <cleanup_stdio+0x1e>
 80179cc:	4620      	mov	r0, r4
 80179ce:	f001 fa6b 	bl	8018ea8 <_fflush_r>
 80179d2:	68e1      	ldr	r1, [r4, #12]
 80179d4:	4b06      	ldr	r3, [pc, #24]	@ (80179f0 <cleanup_stdio+0x3c>)
 80179d6:	4299      	cmp	r1, r3
 80179d8:	d004      	beq.n	80179e4 <cleanup_stdio+0x30>
 80179da:	4620      	mov	r0, r4
 80179dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179e0:	f001 ba62 	b.w	8018ea8 <_fflush_r>
 80179e4:	bd10      	pop	{r4, pc}
 80179e6:	bf00      	nop
 80179e8:	2001218c 	.word	0x2001218c
 80179ec:	200121f4 	.word	0x200121f4
 80179f0:	2001225c 	.word	0x2001225c

080179f4 <global_stdio_init.part.0>:
 80179f4:	b510      	push	{r4, lr}
 80179f6:	4b0b      	ldr	r3, [pc, #44]	@ (8017a24 <global_stdio_init.part.0+0x30>)
 80179f8:	4c0b      	ldr	r4, [pc, #44]	@ (8017a28 <global_stdio_init.part.0+0x34>)
 80179fa:	4a0c      	ldr	r2, [pc, #48]	@ (8017a2c <global_stdio_init.part.0+0x38>)
 80179fc:	601a      	str	r2, [r3, #0]
 80179fe:	4620      	mov	r0, r4
 8017a00:	2200      	movs	r2, #0
 8017a02:	2104      	movs	r1, #4
 8017a04:	f7ff ff94 	bl	8017930 <std>
 8017a08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017a0c:	2201      	movs	r2, #1
 8017a0e:	2109      	movs	r1, #9
 8017a10:	f7ff ff8e 	bl	8017930 <std>
 8017a14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017a18:	2202      	movs	r2, #2
 8017a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a1e:	2112      	movs	r1, #18
 8017a20:	f7ff bf86 	b.w	8017930 <std>
 8017a24:	200122c4 	.word	0x200122c4
 8017a28:	2001218c 	.word	0x2001218c
 8017a2c:	0801799d 	.word	0x0801799d

08017a30 <__sfp_lock_acquire>:
 8017a30:	4801      	ldr	r0, [pc, #4]	@ (8017a38 <__sfp_lock_acquire+0x8>)
 8017a32:	f000 ba16 	b.w	8017e62 <__retarget_lock_acquire_recursive>
 8017a36:	bf00      	nop
 8017a38:	200122cd 	.word	0x200122cd

08017a3c <__sfp_lock_release>:
 8017a3c:	4801      	ldr	r0, [pc, #4]	@ (8017a44 <__sfp_lock_release+0x8>)
 8017a3e:	f000 ba11 	b.w	8017e64 <__retarget_lock_release_recursive>
 8017a42:	bf00      	nop
 8017a44:	200122cd 	.word	0x200122cd

08017a48 <__sinit>:
 8017a48:	b510      	push	{r4, lr}
 8017a4a:	4604      	mov	r4, r0
 8017a4c:	f7ff fff0 	bl	8017a30 <__sfp_lock_acquire>
 8017a50:	6a23      	ldr	r3, [r4, #32]
 8017a52:	b11b      	cbz	r3, 8017a5c <__sinit+0x14>
 8017a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a58:	f7ff bff0 	b.w	8017a3c <__sfp_lock_release>
 8017a5c:	4b04      	ldr	r3, [pc, #16]	@ (8017a70 <__sinit+0x28>)
 8017a5e:	6223      	str	r3, [r4, #32]
 8017a60:	4b04      	ldr	r3, [pc, #16]	@ (8017a74 <__sinit+0x2c>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d1f5      	bne.n	8017a54 <__sinit+0xc>
 8017a68:	f7ff ffc4 	bl	80179f4 <global_stdio_init.part.0>
 8017a6c:	e7f2      	b.n	8017a54 <__sinit+0xc>
 8017a6e:	bf00      	nop
 8017a70:	080179b5 	.word	0x080179b5
 8017a74:	200122c4 	.word	0x200122c4

08017a78 <_fwalk_sglue>:
 8017a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a7c:	4607      	mov	r7, r0
 8017a7e:	4688      	mov	r8, r1
 8017a80:	4614      	mov	r4, r2
 8017a82:	2600      	movs	r6, #0
 8017a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017a88:	f1b9 0901 	subs.w	r9, r9, #1
 8017a8c:	d505      	bpl.n	8017a9a <_fwalk_sglue+0x22>
 8017a8e:	6824      	ldr	r4, [r4, #0]
 8017a90:	2c00      	cmp	r4, #0
 8017a92:	d1f7      	bne.n	8017a84 <_fwalk_sglue+0xc>
 8017a94:	4630      	mov	r0, r6
 8017a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a9a:	89ab      	ldrh	r3, [r5, #12]
 8017a9c:	2b01      	cmp	r3, #1
 8017a9e:	d907      	bls.n	8017ab0 <_fwalk_sglue+0x38>
 8017aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017aa4:	3301      	adds	r3, #1
 8017aa6:	d003      	beq.n	8017ab0 <_fwalk_sglue+0x38>
 8017aa8:	4629      	mov	r1, r5
 8017aaa:	4638      	mov	r0, r7
 8017aac:	47c0      	blx	r8
 8017aae:	4306      	orrs	r6, r0
 8017ab0:	3568      	adds	r5, #104	@ 0x68
 8017ab2:	e7e9      	b.n	8017a88 <_fwalk_sglue+0x10>

08017ab4 <iprintf>:
 8017ab4:	b40f      	push	{r0, r1, r2, r3}
 8017ab6:	b507      	push	{r0, r1, r2, lr}
 8017ab8:	4906      	ldr	r1, [pc, #24]	@ (8017ad4 <iprintf+0x20>)
 8017aba:	ab04      	add	r3, sp, #16
 8017abc:	6808      	ldr	r0, [r1, #0]
 8017abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ac2:	6881      	ldr	r1, [r0, #8]
 8017ac4:	9301      	str	r3, [sp, #4]
 8017ac6:	f000 fd79 	bl	80185bc <_vfiprintf_r>
 8017aca:	b003      	add	sp, #12
 8017acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ad0:	b004      	add	sp, #16
 8017ad2:	4770      	bx	lr
 8017ad4:	20000088 	.word	0x20000088

08017ad8 <sniprintf>:
 8017ad8:	b40c      	push	{r2, r3}
 8017ada:	b530      	push	{r4, r5, lr}
 8017adc:	4b18      	ldr	r3, [pc, #96]	@ (8017b40 <sniprintf+0x68>)
 8017ade:	1e0c      	subs	r4, r1, #0
 8017ae0:	681d      	ldr	r5, [r3, #0]
 8017ae2:	b09d      	sub	sp, #116	@ 0x74
 8017ae4:	da08      	bge.n	8017af8 <sniprintf+0x20>
 8017ae6:	238b      	movs	r3, #139	@ 0x8b
 8017ae8:	602b      	str	r3, [r5, #0]
 8017aea:	f04f 30ff 	mov.w	r0, #4294967295
 8017aee:	b01d      	add	sp, #116	@ 0x74
 8017af0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017af4:	b002      	add	sp, #8
 8017af6:	4770      	bx	lr
 8017af8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017afc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017b00:	f04f 0300 	mov.w	r3, #0
 8017b04:	931b      	str	r3, [sp, #108]	@ 0x6c
 8017b06:	bf14      	ite	ne
 8017b08:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017b0c:	4623      	moveq	r3, r4
 8017b0e:	9304      	str	r3, [sp, #16]
 8017b10:	9307      	str	r3, [sp, #28]
 8017b12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017b16:	9002      	str	r0, [sp, #8]
 8017b18:	9006      	str	r0, [sp, #24]
 8017b1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017b1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017b20:	ab21      	add	r3, sp, #132	@ 0x84
 8017b22:	a902      	add	r1, sp, #8
 8017b24:	4628      	mov	r0, r5
 8017b26:	9301      	str	r3, [sp, #4]
 8017b28:	f000 fa52 	bl	8017fd0 <_svfiprintf_r>
 8017b2c:	1c43      	adds	r3, r0, #1
 8017b2e:	bfbc      	itt	lt
 8017b30:	238b      	movlt	r3, #139	@ 0x8b
 8017b32:	602b      	strlt	r3, [r5, #0]
 8017b34:	2c00      	cmp	r4, #0
 8017b36:	d0da      	beq.n	8017aee <sniprintf+0x16>
 8017b38:	9b02      	ldr	r3, [sp, #8]
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	701a      	strb	r2, [r3, #0]
 8017b3e:	e7d6      	b.n	8017aee <sniprintf+0x16>
 8017b40:	20000088 	.word	0x20000088

08017b44 <siprintf>:
 8017b44:	b40e      	push	{r1, r2, r3}
 8017b46:	b510      	push	{r4, lr}
 8017b48:	b09d      	sub	sp, #116	@ 0x74
 8017b4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8017b4c:	9002      	str	r0, [sp, #8]
 8017b4e:	9006      	str	r0, [sp, #24]
 8017b50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017b54:	480a      	ldr	r0, [pc, #40]	@ (8017b80 <siprintf+0x3c>)
 8017b56:	9107      	str	r1, [sp, #28]
 8017b58:	9104      	str	r1, [sp, #16]
 8017b5a:	490a      	ldr	r1, [pc, #40]	@ (8017b84 <siprintf+0x40>)
 8017b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b60:	9105      	str	r1, [sp, #20]
 8017b62:	2400      	movs	r4, #0
 8017b64:	a902      	add	r1, sp, #8
 8017b66:	6800      	ldr	r0, [r0, #0]
 8017b68:	9301      	str	r3, [sp, #4]
 8017b6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017b6c:	f000 fa30 	bl	8017fd0 <_svfiprintf_r>
 8017b70:	9b02      	ldr	r3, [sp, #8]
 8017b72:	701c      	strb	r4, [r3, #0]
 8017b74:	b01d      	add	sp, #116	@ 0x74
 8017b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b7a:	b003      	add	sp, #12
 8017b7c:	4770      	bx	lr
 8017b7e:	bf00      	nop
 8017b80:	20000088 	.word	0x20000088
 8017b84:	ffff0208 	.word	0xffff0208

08017b88 <siscanf>:
 8017b88:	b40e      	push	{r1, r2, r3}
 8017b8a:	b570      	push	{r4, r5, r6, lr}
 8017b8c:	b09d      	sub	sp, #116	@ 0x74
 8017b8e:	ac21      	add	r4, sp, #132	@ 0x84
 8017b90:	2500      	movs	r5, #0
 8017b92:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8017b96:	f854 6b04 	ldr.w	r6, [r4], #4
 8017b9a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8017b9e:	951b      	str	r5, [sp, #108]	@ 0x6c
 8017ba0:	9002      	str	r0, [sp, #8]
 8017ba2:	9006      	str	r0, [sp, #24]
 8017ba4:	f7e8 fb3e 	bl	8000224 <strlen>
 8017ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8017bd8 <siscanf+0x50>)
 8017baa:	9003      	str	r0, [sp, #12]
 8017bac:	9007      	str	r0, [sp, #28]
 8017bae:	480b      	ldr	r0, [pc, #44]	@ (8017bdc <siscanf+0x54>)
 8017bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017bb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017bb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017bba:	4632      	mov	r2, r6
 8017bbc:	4623      	mov	r3, r4
 8017bbe:	a902      	add	r1, sp, #8
 8017bc0:	6800      	ldr	r0, [r0, #0]
 8017bc2:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017bc4:	9514      	str	r5, [sp, #80]	@ 0x50
 8017bc6:	9401      	str	r4, [sp, #4]
 8017bc8:	f000 fb58 	bl	801827c <__ssvfiscanf_r>
 8017bcc:	b01d      	add	sp, #116	@ 0x74
 8017bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bd2:	b003      	add	sp, #12
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop
 8017bd8:	08017c03 	.word	0x08017c03
 8017bdc:	20000088 	.word	0x20000088

08017be0 <__sread>:
 8017be0:	b510      	push	{r4, lr}
 8017be2:	460c      	mov	r4, r1
 8017be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017be8:	f000 f8dc 	bl	8017da4 <_read_r>
 8017bec:	2800      	cmp	r0, #0
 8017bee:	bfab      	itete	ge
 8017bf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8017bf4:	181b      	addge	r3, r3, r0
 8017bf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017bfa:	bfac      	ite	ge
 8017bfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017bfe:	81a3      	strhlt	r3, [r4, #12]
 8017c00:	bd10      	pop	{r4, pc}

08017c02 <__seofread>:
 8017c02:	2000      	movs	r0, #0
 8017c04:	4770      	bx	lr

08017c06 <__swrite>:
 8017c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c0a:	461f      	mov	r7, r3
 8017c0c:	898b      	ldrh	r3, [r1, #12]
 8017c0e:	05db      	lsls	r3, r3, #23
 8017c10:	4605      	mov	r5, r0
 8017c12:	460c      	mov	r4, r1
 8017c14:	4616      	mov	r6, r2
 8017c16:	d505      	bpl.n	8017c24 <__swrite+0x1e>
 8017c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c1c:	2302      	movs	r3, #2
 8017c1e:	2200      	movs	r2, #0
 8017c20:	f000 f8ae 	bl	8017d80 <_lseek_r>
 8017c24:	89a3      	ldrh	r3, [r4, #12]
 8017c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017c2e:	81a3      	strh	r3, [r4, #12]
 8017c30:	4632      	mov	r2, r6
 8017c32:	463b      	mov	r3, r7
 8017c34:	4628      	mov	r0, r5
 8017c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c3a:	f000 b8d5 	b.w	8017de8 <_write_r>

08017c3e <__sseek>:
 8017c3e:	b510      	push	{r4, lr}
 8017c40:	460c      	mov	r4, r1
 8017c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c46:	f000 f89b 	bl	8017d80 <_lseek_r>
 8017c4a:	1c43      	adds	r3, r0, #1
 8017c4c:	89a3      	ldrh	r3, [r4, #12]
 8017c4e:	bf15      	itete	ne
 8017c50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017c52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017c56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017c5a:	81a3      	strheq	r3, [r4, #12]
 8017c5c:	bf18      	it	ne
 8017c5e:	81a3      	strhne	r3, [r4, #12]
 8017c60:	bd10      	pop	{r4, pc}

08017c62 <__sclose>:
 8017c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c66:	f000 b87b 	b.w	8017d60 <_close_r>

08017c6a <_vsniprintf_r>:
 8017c6a:	b530      	push	{r4, r5, lr}
 8017c6c:	4614      	mov	r4, r2
 8017c6e:	2c00      	cmp	r4, #0
 8017c70:	b09b      	sub	sp, #108	@ 0x6c
 8017c72:	4605      	mov	r5, r0
 8017c74:	461a      	mov	r2, r3
 8017c76:	da05      	bge.n	8017c84 <_vsniprintf_r+0x1a>
 8017c78:	238b      	movs	r3, #139	@ 0x8b
 8017c7a:	6003      	str	r3, [r0, #0]
 8017c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c80:	b01b      	add	sp, #108	@ 0x6c
 8017c82:	bd30      	pop	{r4, r5, pc}
 8017c84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017c88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017c8c:	f04f 0300 	mov.w	r3, #0
 8017c90:	9319      	str	r3, [sp, #100]	@ 0x64
 8017c92:	bf14      	ite	ne
 8017c94:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017c98:	4623      	moveq	r3, r4
 8017c9a:	9302      	str	r3, [sp, #8]
 8017c9c:	9305      	str	r3, [sp, #20]
 8017c9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ca2:	9100      	str	r1, [sp, #0]
 8017ca4:	9104      	str	r1, [sp, #16]
 8017ca6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017caa:	4669      	mov	r1, sp
 8017cac:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017cae:	f000 f98f 	bl	8017fd0 <_svfiprintf_r>
 8017cb2:	1c43      	adds	r3, r0, #1
 8017cb4:	bfbc      	itt	lt
 8017cb6:	238b      	movlt	r3, #139	@ 0x8b
 8017cb8:	602b      	strlt	r3, [r5, #0]
 8017cba:	2c00      	cmp	r4, #0
 8017cbc:	d0e0      	beq.n	8017c80 <_vsniprintf_r+0x16>
 8017cbe:	9b00      	ldr	r3, [sp, #0]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	701a      	strb	r2, [r3, #0]
 8017cc4:	e7dc      	b.n	8017c80 <_vsniprintf_r+0x16>
	...

08017cc8 <vsniprintf>:
 8017cc8:	b507      	push	{r0, r1, r2, lr}
 8017cca:	9300      	str	r3, [sp, #0]
 8017ccc:	4613      	mov	r3, r2
 8017cce:	460a      	mov	r2, r1
 8017cd0:	4601      	mov	r1, r0
 8017cd2:	4803      	ldr	r0, [pc, #12]	@ (8017ce0 <vsniprintf+0x18>)
 8017cd4:	6800      	ldr	r0, [r0, #0]
 8017cd6:	f7ff ffc8 	bl	8017c6a <_vsniprintf_r>
 8017cda:	b003      	add	sp, #12
 8017cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ce0:	20000088 	.word	0x20000088

08017ce4 <memset>:
 8017ce4:	4402      	add	r2, r0
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d100      	bne.n	8017cee <memset+0xa>
 8017cec:	4770      	bx	lr
 8017cee:	f803 1b01 	strb.w	r1, [r3], #1
 8017cf2:	e7f9      	b.n	8017ce8 <memset+0x4>

08017cf4 <strchr>:
 8017cf4:	b2c9      	uxtb	r1, r1
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cfe:	b112      	cbz	r2, 8017d06 <strchr+0x12>
 8017d00:	428a      	cmp	r2, r1
 8017d02:	d1f9      	bne.n	8017cf8 <strchr+0x4>
 8017d04:	4770      	bx	lr
 8017d06:	2900      	cmp	r1, #0
 8017d08:	bf18      	it	ne
 8017d0a:	2000      	movne	r0, #0
 8017d0c:	4770      	bx	lr

08017d0e <strncpy>:
 8017d0e:	b510      	push	{r4, lr}
 8017d10:	3901      	subs	r1, #1
 8017d12:	4603      	mov	r3, r0
 8017d14:	b132      	cbz	r2, 8017d24 <strncpy+0x16>
 8017d16:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d1a:	f803 4b01 	strb.w	r4, [r3], #1
 8017d1e:	3a01      	subs	r2, #1
 8017d20:	2c00      	cmp	r4, #0
 8017d22:	d1f7      	bne.n	8017d14 <strncpy+0x6>
 8017d24:	441a      	add	r2, r3
 8017d26:	2100      	movs	r1, #0
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d100      	bne.n	8017d2e <strncpy+0x20>
 8017d2c:	bd10      	pop	{r4, pc}
 8017d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8017d32:	e7f9      	b.n	8017d28 <strncpy+0x1a>

08017d34 <strstr>:
 8017d34:	780a      	ldrb	r2, [r1, #0]
 8017d36:	b570      	push	{r4, r5, r6, lr}
 8017d38:	b96a      	cbnz	r2, 8017d56 <strstr+0x22>
 8017d3a:	bd70      	pop	{r4, r5, r6, pc}
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d109      	bne.n	8017d54 <strstr+0x20>
 8017d40:	460c      	mov	r4, r1
 8017d42:	4605      	mov	r5, r0
 8017d44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d0f6      	beq.n	8017d3a <strstr+0x6>
 8017d4c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017d50:	429e      	cmp	r6, r3
 8017d52:	d0f7      	beq.n	8017d44 <strstr+0x10>
 8017d54:	3001      	adds	r0, #1
 8017d56:	7803      	ldrb	r3, [r0, #0]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d1ef      	bne.n	8017d3c <strstr+0x8>
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	e7ec      	b.n	8017d3a <strstr+0x6>

08017d60 <_close_r>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	4d06      	ldr	r5, [pc, #24]	@ (8017d7c <_close_r+0x1c>)
 8017d64:	2300      	movs	r3, #0
 8017d66:	4604      	mov	r4, r0
 8017d68:	4608      	mov	r0, r1
 8017d6a:	602b      	str	r3, [r5, #0]
 8017d6c:	f7ed fbf1 	bl	8005552 <_close>
 8017d70:	1c43      	adds	r3, r0, #1
 8017d72:	d102      	bne.n	8017d7a <_close_r+0x1a>
 8017d74:	682b      	ldr	r3, [r5, #0]
 8017d76:	b103      	cbz	r3, 8017d7a <_close_r+0x1a>
 8017d78:	6023      	str	r3, [r4, #0]
 8017d7a:	bd38      	pop	{r3, r4, r5, pc}
 8017d7c:	200122c8 	.word	0x200122c8

08017d80 <_lseek_r>:
 8017d80:	b538      	push	{r3, r4, r5, lr}
 8017d82:	4d07      	ldr	r5, [pc, #28]	@ (8017da0 <_lseek_r+0x20>)
 8017d84:	4604      	mov	r4, r0
 8017d86:	4608      	mov	r0, r1
 8017d88:	4611      	mov	r1, r2
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	602a      	str	r2, [r5, #0]
 8017d8e:	461a      	mov	r2, r3
 8017d90:	f7ed fc06 	bl	80055a0 <_lseek>
 8017d94:	1c43      	adds	r3, r0, #1
 8017d96:	d102      	bne.n	8017d9e <_lseek_r+0x1e>
 8017d98:	682b      	ldr	r3, [r5, #0]
 8017d9a:	b103      	cbz	r3, 8017d9e <_lseek_r+0x1e>
 8017d9c:	6023      	str	r3, [r4, #0]
 8017d9e:	bd38      	pop	{r3, r4, r5, pc}
 8017da0:	200122c8 	.word	0x200122c8

08017da4 <_read_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4d07      	ldr	r5, [pc, #28]	@ (8017dc4 <_read_r+0x20>)
 8017da8:	4604      	mov	r4, r0
 8017daa:	4608      	mov	r0, r1
 8017dac:	4611      	mov	r1, r2
 8017dae:	2200      	movs	r2, #0
 8017db0:	602a      	str	r2, [r5, #0]
 8017db2:	461a      	mov	r2, r3
 8017db4:	f7ed fb94 	bl	80054e0 <_read>
 8017db8:	1c43      	adds	r3, r0, #1
 8017dba:	d102      	bne.n	8017dc2 <_read_r+0x1e>
 8017dbc:	682b      	ldr	r3, [r5, #0]
 8017dbe:	b103      	cbz	r3, 8017dc2 <_read_r+0x1e>
 8017dc0:	6023      	str	r3, [r4, #0]
 8017dc2:	bd38      	pop	{r3, r4, r5, pc}
 8017dc4:	200122c8 	.word	0x200122c8

08017dc8 <_sbrk_r>:
 8017dc8:	b538      	push	{r3, r4, r5, lr}
 8017dca:	4d06      	ldr	r5, [pc, #24]	@ (8017de4 <_sbrk_r+0x1c>)
 8017dcc:	2300      	movs	r3, #0
 8017dce:	4604      	mov	r4, r0
 8017dd0:	4608      	mov	r0, r1
 8017dd2:	602b      	str	r3, [r5, #0]
 8017dd4:	f7ed fbf2 	bl	80055bc <_sbrk>
 8017dd8:	1c43      	adds	r3, r0, #1
 8017dda:	d102      	bne.n	8017de2 <_sbrk_r+0x1a>
 8017ddc:	682b      	ldr	r3, [r5, #0]
 8017dde:	b103      	cbz	r3, 8017de2 <_sbrk_r+0x1a>
 8017de0:	6023      	str	r3, [r4, #0]
 8017de2:	bd38      	pop	{r3, r4, r5, pc}
 8017de4:	200122c8 	.word	0x200122c8

08017de8 <_write_r>:
 8017de8:	b538      	push	{r3, r4, r5, lr}
 8017dea:	4d07      	ldr	r5, [pc, #28]	@ (8017e08 <_write_r+0x20>)
 8017dec:	4604      	mov	r4, r0
 8017dee:	4608      	mov	r0, r1
 8017df0:	4611      	mov	r1, r2
 8017df2:	2200      	movs	r2, #0
 8017df4:	602a      	str	r2, [r5, #0]
 8017df6:	461a      	mov	r2, r3
 8017df8:	f7ed fb8f 	bl	800551a <_write>
 8017dfc:	1c43      	adds	r3, r0, #1
 8017dfe:	d102      	bne.n	8017e06 <_write_r+0x1e>
 8017e00:	682b      	ldr	r3, [r5, #0]
 8017e02:	b103      	cbz	r3, 8017e06 <_write_r+0x1e>
 8017e04:	6023      	str	r3, [r4, #0]
 8017e06:	bd38      	pop	{r3, r4, r5, pc}
 8017e08:	200122c8 	.word	0x200122c8

08017e0c <__errno>:
 8017e0c:	4b01      	ldr	r3, [pc, #4]	@ (8017e14 <__errno+0x8>)
 8017e0e:	6818      	ldr	r0, [r3, #0]
 8017e10:	4770      	bx	lr
 8017e12:	bf00      	nop
 8017e14:	20000088 	.word	0x20000088

08017e18 <__libc_init_array>:
 8017e18:	b570      	push	{r4, r5, r6, lr}
 8017e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8017e50 <__libc_init_array+0x38>)
 8017e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8017e54 <__libc_init_array+0x3c>)
 8017e1e:	1b64      	subs	r4, r4, r5
 8017e20:	10a4      	asrs	r4, r4, #2
 8017e22:	2600      	movs	r6, #0
 8017e24:	42a6      	cmp	r6, r4
 8017e26:	d109      	bne.n	8017e3c <__libc_init_array+0x24>
 8017e28:	4d0b      	ldr	r5, [pc, #44]	@ (8017e58 <__libc_init_array+0x40>)
 8017e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8017e5c <__libc_init_array+0x44>)
 8017e2c:	f001 fb2c 	bl	8019488 <_init>
 8017e30:	1b64      	subs	r4, r4, r5
 8017e32:	10a4      	asrs	r4, r4, #2
 8017e34:	2600      	movs	r6, #0
 8017e36:	42a6      	cmp	r6, r4
 8017e38:	d105      	bne.n	8017e46 <__libc_init_array+0x2e>
 8017e3a:	bd70      	pop	{r4, r5, r6, pc}
 8017e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e40:	4798      	blx	r3
 8017e42:	3601      	adds	r6, #1
 8017e44:	e7ee      	b.n	8017e24 <__libc_init_array+0xc>
 8017e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e4a:	4798      	blx	r3
 8017e4c:	3601      	adds	r6, #1
 8017e4e:	e7f2      	b.n	8017e36 <__libc_init_array+0x1e>
 8017e50:	0801cc20 	.word	0x0801cc20
 8017e54:	0801cc20 	.word	0x0801cc20
 8017e58:	0801cc20 	.word	0x0801cc20
 8017e5c:	0801cc24 	.word	0x0801cc24

08017e60 <__retarget_lock_init_recursive>:
 8017e60:	4770      	bx	lr

08017e62 <__retarget_lock_acquire_recursive>:
 8017e62:	4770      	bx	lr

08017e64 <__retarget_lock_release_recursive>:
 8017e64:	4770      	bx	lr

08017e66 <memcpy>:
 8017e66:	440a      	add	r2, r1
 8017e68:	4291      	cmp	r1, r2
 8017e6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e6e:	d100      	bne.n	8017e72 <memcpy+0xc>
 8017e70:	4770      	bx	lr
 8017e72:	b510      	push	{r4, lr}
 8017e74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e7c:	4291      	cmp	r1, r2
 8017e7e:	d1f9      	bne.n	8017e74 <memcpy+0xe>
 8017e80:	bd10      	pop	{r4, pc}
	...

08017e84 <_free_r>:
 8017e84:	b538      	push	{r3, r4, r5, lr}
 8017e86:	4605      	mov	r5, r0
 8017e88:	2900      	cmp	r1, #0
 8017e8a:	d041      	beq.n	8017f10 <_free_r+0x8c>
 8017e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e90:	1f0c      	subs	r4, r1, #4
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	bfb8      	it	lt
 8017e96:	18e4      	addlt	r4, r4, r3
 8017e98:	f7ff fd3e 	bl	8017918 <__malloc_lock>
 8017e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8017f14 <_free_r+0x90>)
 8017e9e:	6813      	ldr	r3, [r2, #0]
 8017ea0:	b933      	cbnz	r3, 8017eb0 <_free_r+0x2c>
 8017ea2:	6063      	str	r3, [r4, #4]
 8017ea4:	6014      	str	r4, [r2, #0]
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017eac:	f7ff bd3a 	b.w	8017924 <__malloc_unlock>
 8017eb0:	42a3      	cmp	r3, r4
 8017eb2:	d908      	bls.n	8017ec6 <_free_r+0x42>
 8017eb4:	6820      	ldr	r0, [r4, #0]
 8017eb6:	1821      	adds	r1, r4, r0
 8017eb8:	428b      	cmp	r3, r1
 8017eba:	bf01      	itttt	eq
 8017ebc:	6819      	ldreq	r1, [r3, #0]
 8017ebe:	685b      	ldreq	r3, [r3, #4]
 8017ec0:	1809      	addeq	r1, r1, r0
 8017ec2:	6021      	streq	r1, [r4, #0]
 8017ec4:	e7ed      	b.n	8017ea2 <_free_r+0x1e>
 8017ec6:	461a      	mov	r2, r3
 8017ec8:	685b      	ldr	r3, [r3, #4]
 8017eca:	b10b      	cbz	r3, 8017ed0 <_free_r+0x4c>
 8017ecc:	42a3      	cmp	r3, r4
 8017ece:	d9fa      	bls.n	8017ec6 <_free_r+0x42>
 8017ed0:	6811      	ldr	r1, [r2, #0]
 8017ed2:	1850      	adds	r0, r2, r1
 8017ed4:	42a0      	cmp	r0, r4
 8017ed6:	d10b      	bne.n	8017ef0 <_free_r+0x6c>
 8017ed8:	6820      	ldr	r0, [r4, #0]
 8017eda:	4401      	add	r1, r0
 8017edc:	1850      	adds	r0, r2, r1
 8017ede:	4283      	cmp	r3, r0
 8017ee0:	6011      	str	r1, [r2, #0]
 8017ee2:	d1e0      	bne.n	8017ea6 <_free_r+0x22>
 8017ee4:	6818      	ldr	r0, [r3, #0]
 8017ee6:	685b      	ldr	r3, [r3, #4]
 8017ee8:	6053      	str	r3, [r2, #4]
 8017eea:	4408      	add	r0, r1
 8017eec:	6010      	str	r0, [r2, #0]
 8017eee:	e7da      	b.n	8017ea6 <_free_r+0x22>
 8017ef0:	d902      	bls.n	8017ef8 <_free_r+0x74>
 8017ef2:	230c      	movs	r3, #12
 8017ef4:	602b      	str	r3, [r5, #0]
 8017ef6:	e7d6      	b.n	8017ea6 <_free_r+0x22>
 8017ef8:	6820      	ldr	r0, [r4, #0]
 8017efa:	1821      	adds	r1, r4, r0
 8017efc:	428b      	cmp	r3, r1
 8017efe:	bf04      	itt	eq
 8017f00:	6819      	ldreq	r1, [r3, #0]
 8017f02:	685b      	ldreq	r3, [r3, #4]
 8017f04:	6063      	str	r3, [r4, #4]
 8017f06:	bf04      	itt	eq
 8017f08:	1809      	addeq	r1, r1, r0
 8017f0a:	6021      	streq	r1, [r4, #0]
 8017f0c:	6054      	str	r4, [r2, #4]
 8017f0e:	e7ca      	b.n	8017ea6 <_free_r+0x22>
 8017f10:	bd38      	pop	{r3, r4, r5, pc}
 8017f12:	bf00      	nop
 8017f14:	20012188 	.word	0x20012188

08017f18 <__ssputs_r>:
 8017f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f1c:	688e      	ldr	r6, [r1, #8]
 8017f1e:	461f      	mov	r7, r3
 8017f20:	42be      	cmp	r6, r7
 8017f22:	680b      	ldr	r3, [r1, #0]
 8017f24:	4682      	mov	sl, r0
 8017f26:	460c      	mov	r4, r1
 8017f28:	4690      	mov	r8, r2
 8017f2a:	d82d      	bhi.n	8017f88 <__ssputs_r+0x70>
 8017f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017f30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017f34:	d026      	beq.n	8017f84 <__ssputs_r+0x6c>
 8017f36:	6965      	ldr	r5, [r4, #20]
 8017f38:	6909      	ldr	r1, [r1, #16]
 8017f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017f3e:	eba3 0901 	sub.w	r9, r3, r1
 8017f42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017f46:	1c7b      	adds	r3, r7, #1
 8017f48:	444b      	add	r3, r9
 8017f4a:	106d      	asrs	r5, r5, #1
 8017f4c:	429d      	cmp	r5, r3
 8017f4e:	bf38      	it	cc
 8017f50:	461d      	movcc	r5, r3
 8017f52:	0553      	lsls	r3, r2, #21
 8017f54:	d527      	bpl.n	8017fa6 <__ssputs_r+0x8e>
 8017f56:	4629      	mov	r1, r5
 8017f58:	f7ff fc5e 	bl	8017818 <_malloc_r>
 8017f5c:	4606      	mov	r6, r0
 8017f5e:	b360      	cbz	r0, 8017fba <__ssputs_r+0xa2>
 8017f60:	6921      	ldr	r1, [r4, #16]
 8017f62:	464a      	mov	r2, r9
 8017f64:	f7ff ff7f 	bl	8017e66 <memcpy>
 8017f68:	89a3      	ldrh	r3, [r4, #12]
 8017f6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017f72:	81a3      	strh	r3, [r4, #12]
 8017f74:	6126      	str	r6, [r4, #16]
 8017f76:	6165      	str	r5, [r4, #20]
 8017f78:	444e      	add	r6, r9
 8017f7a:	eba5 0509 	sub.w	r5, r5, r9
 8017f7e:	6026      	str	r6, [r4, #0]
 8017f80:	60a5      	str	r5, [r4, #8]
 8017f82:	463e      	mov	r6, r7
 8017f84:	42be      	cmp	r6, r7
 8017f86:	d900      	bls.n	8017f8a <__ssputs_r+0x72>
 8017f88:	463e      	mov	r6, r7
 8017f8a:	6820      	ldr	r0, [r4, #0]
 8017f8c:	4632      	mov	r2, r6
 8017f8e:	4641      	mov	r1, r8
 8017f90:	f001 f8ba 	bl	8019108 <memmove>
 8017f94:	68a3      	ldr	r3, [r4, #8]
 8017f96:	1b9b      	subs	r3, r3, r6
 8017f98:	60a3      	str	r3, [r4, #8]
 8017f9a:	6823      	ldr	r3, [r4, #0]
 8017f9c:	4433      	add	r3, r6
 8017f9e:	6023      	str	r3, [r4, #0]
 8017fa0:	2000      	movs	r0, #0
 8017fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fa6:	462a      	mov	r2, r5
 8017fa8:	f001 f8c8 	bl	801913c <_realloc_r>
 8017fac:	4606      	mov	r6, r0
 8017fae:	2800      	cmp	r0, #0
 8017fb0:	d1e0      	bne.n	8017f74 <__ssputs_r+0x5c>
 8017fb2:	6921      	ldr	r1, [r4, #16]
 8017fb4:	4650      	mov	r0, sl
 8017fb6:	f7ff ff65 	bl	8017e84 <_free_r>
 8017fba:	230c      	movs	r3, #12
 8017fbc:	f8ca 3000 	str.w	r3, [sl]
 8017fc0:	89a3      	ldrh	r3, [r4, #12]
 8017fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fc6:	81a3      	strh	r3, [r4, #12]
 8017fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8017fcc:	e7e9      	b.n	8017fa2 <__ssputs_r+0x8a>
	...

08017fd0 <_svfiprintf_r>:
 8017fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fd4:	4698      	mov	r8, r3
 8017fd6:	898b      	ldrh	r3, [r1, #12]
 8017fd8:	061b      	lsls	r3, r3, #24
 8017fda:	b09d      	sub	sp, #116	@ 0x74
 8017fdc:	4607      	mov	r7, r0
 8017fde:	460d      	mov	r5, r1
 8017fe0:	4614      	mov	r4, r2
 8017fe2:	d510      	bpl.n	8018006 <_svfiprintf_r+0x36>
 8017fe4:	690b      	ldr	r3, [r1, #16]
 8017fe6:	b973      	cbnz	r3, 8018006 <_svfiprintf_r+0x36>
 8017fe8:	2140      	movs	r1, #64	@ 0x40
 8017fea:	f7ff fc15 	bl	8017818 <_malloc_r>
 8017fee:	6028      	str	r0, [r5, #0]
 8017ff0:	6128      	str	r0, [r5, #16]
 8017ff2:	b930      	cbnz	r0, 8018002 <_svfiprintf_r+0x32>
 8017ff4:	230c      	movs	r3, #12
 8017ff6:	603b      	str	r3, [r7, #0]
 8017ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8017ffc:	b01d      	add	sp, #116	@ 0x74
 8017ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018002:	2340      	movs	r3, #64	@ 0x40
 8018004:	616b      	str	r3, [r5, #20]
 8018006:	2300      	movs	r3, #0
 8018008:	9309      	str	r3, [sp, #36]	@ 0x24
 801800a:	2320      	movs	r3, #32
 801800c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018010:	f8cd 800c 	str.w	r8, [sp, #12]
 8018014:	2330      	movs	r3, #48	@ 0x30
 8018016:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80181b4 <_svfiprintf_r+0x1e4>
 801801a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801801e:	f04f 0901 	mov.w	r9, #1
 8018022:	4623      	mov	r3, r4
 8018024:	469a      	mov	sl, r3
 8018026:	f813 2b01 	ldrb.w	r2, [r3], #1
 801802a:	b10a      	cbz	r2, 8018030 <_svfiprintf_r+0x60>
 801802c:	2a25      	cmp	r2, #37	@ 0x25
 801802e:	d1f9      	bne.n	8018024 <_svfiprintf_r+0x54>
 8018030:	ebba 0b04 	subs.w	fp, sl, r4
 8018034:	d00b      	beq.n	801804e <_svfiprintf_r+0x7e>
 8018036:	465b      	mov	r3, fp
 8018038:	4622      	mov	r2, r4
 801803a:	4629      	mov	r1, r5
 801803c:	4638      	mov	r0, r7
 801803e:	f7ff ff6b 	bl	8017f18 <__ssputs_r>
 8018042:	3001      	adds	r0, #1
 8018044:	f000 80a7 	beq.w	8018196 <_svfiprintf_r+0x1c6>
 8018048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801804a:	445a      	add	r2, fp
 801804c:	9209      	str	r2, [sp, #36]	@ 0x24
 801804e:	f89a 3000 	ldrb.w	r3, [sl]
 8018052:	2b00      	cmp	r3, #0
 8018054:	f000 809f 	beq.w	8018196 <_svfiprintf_r+0x1c6>
 8018058:	2300      	movs	r3, #0
 801805a:	f04f 32ff 	mov.w	r2, #4294967295
 801805e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018062:	f10a 0a01 	add.w	sl, sl, #1
 8018066:	9304      	str	r3, [sp, #16]
 8018068:	9307      	str	r3, [sp, #28]
 801806a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801806e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018070:	4654      	mov	r4, sl
 8018072:	2205      	movs	r2, #5
 8018074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018078:	484e      	ldr	r0, [pc, #312]	@ (80181b4 <_svfiprintf_r+0x1e4>)
 801807a:	f7e8 f8e1 	bl	8000240 <memchr>
 801807e:	9a04      	ldr	r2, [sp, #16]
 8018080:	b9d8      	cbnz	r0, 80180ba <_svfiprintf_r+0xea>
 8018082:	06d0      	lsls	r0, r2, #27
 8018084:	bf44      	itt	mi
 8018086:	2320      	movmi	r3, #32
 8018088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801808c:	0711      	lsls	r1, r2, #28
 801808e:	bf44      	itt	mi
 8018090:	232b      	movmi	r3, #43	@ 0x2b
 8018092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018096:	f89a 3000 	ldrb.w	r3, [sl]
 801809a:	2b2a      	cmp	r3, #42	@ 0x2a
 801809c:	d015      	beq.n	80180ca <_svfiprintf_r+0xfa>
 801809e:	9a07      	ldr	r2, [sp, #28]
 80180a0:	4654      	mov	r4, sl
 80180a2:	2000      	movs	r0, #0
 80180a4:	f04f 0c0a 	mov.w	ip, #10
 80180a8:	4621      	mov	r1, r4
 80180aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80180ae:	3b30      	subs	r3, #48	@ 0x30
 80180b0:	2b09      	cmp	r3, #9
 80180b2:	d94b      	bls.n	801814c <_svfiprintf_r+0x17c>
 80180b4:	b1b0      	cbz	r0, 80180e4 <_svfiprintf_r+0x114>
 80180b6:	9207      	str	r2, [sp, #28]
 80180b8:	e014      	b.n	80180e4 <_svfiprintf_r+0x114>
 80180ba:	eba0 0308 	sub.w	r3, r0, r8
 80180be:	fa09 f303 	lsl.w	r3, r9, r3
 80180c2:	4313      	orrs	r3, r2
 80180c4:	9304      	str	r3, [sp, #16]
 80180c6:	46a2      	mov	sl, r4
 80180c8:	e7d2      	b.n	8018070 <_svfiprintf_r+0xa0>
 80180ca:	9b03      	ldr	r3, [sp, #12]
 80180cc:	1d19      	adds	r1, r3, #4
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	9103      	str	r1, [sp, #12]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	bfbb      	ittet	lt
 80180d6:	425b      	neglt	r3, r3
 80180d8:	f042 0202 	orrlt.w	r2, r2, #2
 80180dc:	9307      	strge	r3, [sp, #28]
 80180de:	9307      	strlt	r3, [sp, #28]
 80180e0:	bfb8      	it	lt
 80180e2:	9204      	strlt	r2, [sp, #16]
 80180e4:	7823      	ldrb	r3, [r4, #0]
 80180e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80180e8:	d10a      	bne.n	8018100 <_svfiprintf_r+0x130>
 80180ea:	7863      	ldrb	r3, [r4, #1]
 80180ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80180ee:	d132      	bne.n	8018156 <_svfiprintf_r+0x186>
 80180f0:	9b03      	ldr	r3, [sp, #12]
 80180f2:	1d1a      	adds	r2, r3, #4
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	9203      	str	r2, [sp, #12]
 80180f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80180fc:	3402      	adds	r4, #2
 80180fe:	9305      	str	r3, [sp, #20]
 8018100:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80181c4 <_svfiprintf_r+0x1f4>
 8018104:	7821      	ldrb	r1, [r4, #0]
 8018106:	2203      	movs	r2, #3
 8018108:	4650      	mov	r0, sl
 801810a:	f7e8 f899 	bl	8000240 <memchr>
 801810e:	b138      	cbz	r0, 8018120 <_svfiprintf_r+0x150>
 8018110:	9b04      	ldr	r3, [sp, #16]
 8018112:	eba0 000a 	sub.w	r0, r0, sl
 8018116:	2240      	movs	r2, #64	@ 0x40
 8018118:	4082      	lsls	r2, r0
 801811a:	4313      	orrs	r3, r2
 801811c:	3401      	adds	r4, #1
 801811e:	9304      	str	r3, [sp, #16]
 8018120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018124:	4824      	ldr	r0, [pc, #144]	@ (80181b8 <_svfiprintf_r+0x1e8>)
 8018126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801812a:	2206      	movs	r2, #6
 801812c:	f7e8 f888 	bl	8000240 <memchr>
 8018130:	2800      	cmp	r0, #0
 8018132:	d036      	beq.n	80181a2 <_svfiprintf_r+0x1d2>
 8018134:	4b21      	ldr	r3, [pc, #132]	@ (80181bc <_svfiprintf_r+0x1ec>)
 8018136:	bb1b      	cbnz	r3, 8018180 <_svfiprintf_r+0x1b0>
 8018138:	9b03      	ldr	r3, [sp, #12]
 801813a:	3307      	adds	r3, #7
 801813c:	f023 0307 	bic.w	r3, r3, #7
 8018140:	3308      	adds	r3, #8
 8018142:	9303      	str	r3, [sp, #12]
 8018144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018146:	4433      	add	r3, r6
 8018148:	9309      	str	r3, [sp, #36]	@ 0x24
 801814a:	e76a      	b.n	8018022 <_svfiprintf_r+0x52>
 801814c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018150:	460c      	mov	r4, r1
 8018152:	2001      	movs	r0, #1
 8018154:	e7a8      	b.n	80180a8 <_svfiprintf_r+0xd8>
 8018156:	2300      	movs	r3, #0
 8018158:	3401      	adds	r4, #1
 801815a:	9305      	str	r3, [sp, #20]
 801815c:	4619      	mov	r1, r3
 801815e:	f04f 0c0a 	mov.w	ip, #10
 8018162:	4620      	mov	r0, r4
 8018164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018168:	3a30      	subs	r2, #48	@ 0x30
 801816a:	2a09      	cmp	r2, #9
 801816c:	d903      	bls.n	8018176 <_svfiprintf_r+0x1a6>
 801816e:	2b00      	cmp	r3, #0
 8018170:	d0c6      	beq.n	8018100 <_svfiprintf_r+0x130>
 8018172:	9105      	str	r1, [sp, #20]
 8018174:	e7c4      	b.n	8018100 <_svfiprintf_r+0x130>
 8018176:	fb0c 2101 	mla	r1, ip, r1, r2
 801817a:	4604      	mov	r4, r0
 801817c:	2301      	movs	r3, #1
 801817e:	e7f0      	b.n	8018162 <_svfiprintf_r+0x192>
 8018180:	ab03      	add	r3, sp, #12
 8018182:	9300      	str	r3, [sp, #0]
 8018184:	462a      	mov	r2, r5
 8018186:	4b0e      	ldr	r3, [pc, #56]	@ (80181c0 <_svfiprintf_r+0x1f0>)
 8018188:	a904      	add	r1, sp, #16
 801818a:	4638      	mov	r0, r7
 801818c:	f3af 8000 	nop.w
 8018190:	1c42      	adds	r2, r0, #1
 8018192:	4606      	mov	r6, r0
 8018194:	d1d6      	bne.n	8018144 <_svfiprintf_r+0x174>
 8018196:	89ab      	ldrh	r3, [r5, #12]
 8018198:	065b      	lsls	r3, r3, #25
 801819a:	f53f af2d 	bmi.w	8017ff8 <_svfiprintf_r+0x28>
 801819e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80181a0:	e72c      	b.n	8017ffc <_svfiprintf_r+0x2c>
 80181a2:	ab03      	add	r3, sp, #12
 80181a4:	9300      	str	r3, [sp, #0]
 80181a6:	462a      	mov	r2, r5
 80181a8:	4b05      	ldr	r3, [pc, #20]	@ (80181c0 <_svfiprintf_r+0x1f0>)
 80181aa:	a904      	add	r1, sp, #16
 80181ac:	4638      	mov	r0, r7
 80181ae:	f000 fb8b 	bl	80188c8 <_printf_i>
 80181b2:	e7ed      	b.n	8018190 <_svfiprintf_r+0x1c0>
 80181b4:	0801cac6 	.word	0x0801cac6
 80181b8:	0801cad0 	.word	0x0801cad0
 80181bc:	00000000 	.word	0x00000000
 80181c0:	08017f19 	.word	0x08017f19
 80181c4:	0801cacc 	.word	0x0801cacc

080181c8 <_sungetc_r>:
 80181c8:	b538      	push	{r3, r4, r5, lr}
 80181ca:	1c4b      	adds	r3, r1, #1
 80181cc:	4614      	mov	r4, r2
 80181ce:	d103      	bne.n	80181d8 <_sungetc_r+0x10>
 80181d0:	f04f 35ff 	mov.w	r5, #4294967295
 80181d4:	4628      	mov	r0, r5
 80181d6:	bd38      	pop	{r3, r4, r5, pc}
 80181d8:	8993      	ldrh	r3, [r2, #12]
 80181da:	f023 0320 	bic.w	r3, r3, #32
 80181de:	8193      	strh	r3, [r2, #12]
 80181e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80181e2:	6852      	ldr	r2, [r2, #4]
 80181e4:	b2cd      	uxtb	r5, r1
 80181e6:	b18b      	cbz	r3, 801820c <_sungetc_r+0x44>
 80181e8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80181ea:	4293      	cmp	r3, r2
 80181ec:	dd08      	ble.n	8018200 <_sungetc_r+0x38>
 80181ee:	6823      	ldr	r3, [r4, #0]
 80181f0:	1e5a      	subs	r2, r3, #1
 80181f2:	6022      	str	r2, [r4, #0]
 80181f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80181f8:	6863      	ldr	r3, [r4, #4]
 80181fa:	3301      	adds	r3, #1
 80181fc:	6063      	str	r3, [r4, #4]
 80181fe:	e7e9      	b.n	80181d4 <_sungetc_r+0xc>
 8018200:	4621      	mov	r1, r4
 8018202:	f000 feb2 	bl	8018f6a <__submore>
 8018206:	2800      	cmp	r0, #0
 8018208:	d0f1      	beq.n	80181ee <_sungetc_r+0x26>
 801820a:	e7e1      	b.n	80181d0 <_sungetc_r+0x8>
 801820c:	6921      	ldr	r1, [r4, #16]
 801820e:	6823      	ldr	r3, [r4, #0]
 8018210:	b151      	cbz	r1, 8018228 <_sungetc_r+0x60>
 8018212:	4299      	cmp	r1, r3
 8018214:	d208      	bcs.n	8018228 <_sungetc_r+0x60>
 8018216:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801821a:	42a9      	cmp	r1, r5
 801821c:	d104      	bne.n	8018228 <_sungetc_r+0x60>
 801821e:	3b01      	subs	r3, #1
 8018220:	3201      	adds	r2, #1
 8018222:	6023      	str	r3, [r4, #0]
 8018224:	6062      	str	r2, [r4, #4]
 8018226:	e7d5      	b.n	80181d4 <_sungetc_r+0xc>
 8018228:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801822c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018230:	6363      	str	r3, [r4, #52]	@ 0x34
 8018232:	2303      	movs	r3, #3
 8018234:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018236:	4623      	mov	r3, r4
 8018238:	f803 5f46 	strb.w	r5, [r3, #70]!
 801823c:	6023      	str	r3, [r4, #0]
 801823e:	2301      	movs	r3, #1
 8018240:	e7dc      	b.n	80181fc <_sungetc_r+0x34>

08018242 <__ssrefill_r>:
 8018242:	b510      	push	{r4, lr}
 8018244:	460c      	mov	r4, r1
 8018246:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018248:	b169      	cbz	r1, 8018266 <__ssrefill_r+0x24>
 801824a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801824e:	4299      	cmp	r1, r3
 8018250:	d001      	beq.n	8018256 <__ssrefill_r+0x14>
 8018252:	f7ff fe17 	bl	8017e84 <_free_r>
 8018256:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018258:	6063      	str	r3, [r4, #4]
 801825a:	2000      	movs	r0, #0
 801825c:	6360      	str	r0, [r4, #52]	@ 0x34
 801825e:	b113      	cbz	r3, 8018266 <__ssrefill_r+0x24>
 8018260:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8018262:	6023      	str	r3, [r4, #0]
 8018264:	bd10      	pop	{r4, pc}
 8018266:	6923      	ldr	r3, [r4, #16]
 8018268:	6023      	str	r3, [r4, #0]
 801826a:	2300      	movs	r3, #0
 801826c:	6063      	str	r3, [r4, #4]
 801826e:	89a3      	ldrh	r3, [r4, #12]
 8018270:	f043 0320 	orr.w	r3, r3, #32
 8018274:	81a3      	strh	r3, [r4, #12]
 8018276:	f04f 30ff 	mov.w	r0, #4294967295
 801827a:	e7f3      	b.n	8018264 <__ssrefill_r+0x22>

0801827c <__ssvfiscanf_r>:
 801827c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018280:	460c      	mov	r4, r1
 8018282:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8018286:	2100      	movs	r1, #0
 8018288:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801828c:	49a6      	ldr	r1, [pc, #664]	@ (8018528 <__ssvfiscanf_r+0x2ac>)
 801828e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8018290:	f10d 0804 	add.w	r8, sp, #4
 8018294:	49a5      	ldr	r1, [pc, #660]	@ (801852c <__ssvfiscanf_r+0x2b0>)
 8018296:	4fa6      	ldr	r7, [pc, #664]	@ (8018530 <__ssvfiscanf_r+0x2b4>)
 8018298:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801829c:	4606      	mov	r6, r0
 801829e:	91a1      	str	r1, [sp, #644]	@ 0x284
 80182a0:	9300      	str	r3, [sp, #0]
 80182a2:	f892 9000 	ldrb.w	r9, [r2]
 80182a6:	f1b9 0f00 	cmp.w	r9, #0
 80182aa:	f000 8158 	beq.w	801855e <__ssvfiscanf_r+0x2e2>
 80182ae:	f817 3009 	ldrb.w	r3, [r7, r9]
 80182b2:	f013 0308 	ands.w	r3, r3, #8
 80182b6:	f102 0501 	add.w	r5, r2, #1
 80182ba:	d019      	beq.n	80182f0 <__ssvfiscanf_r+0x74>
 80182bc:	6863      	ldr	r3, [r4, #4]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	dd0f      	ble.n	80182e2 <__ssvfiscanf_r+0x66>
 80182c2:	6823      	ldr	r3, [r4, #0]
 80182c4:	781a      	ldrb	r2, [r3, #0]
 80182c6:	5cba      	ldrb	r2, [r7, r2]
 80182c8:	0712      	lsls	r2, r2, #28
 80182ca:	d401      	bmi.n	80182d0 <__ssvfiscanf_r+0x54>
 80182cc:	462a      	mov	r2, r5
 80182ce:	e7e8      	b.n	80182a2 <__ssvfiscanf_r+0x26>
 80182d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80182d2:	3201      	adds	r2, #1
 80182d4:	9245      	str	r2, [sp, #276]	@ 0x114
 80182d6:	6862      	ldr	r2, [r4, #4]
 80182d8:	3301      	adds	r3, #1
 80182da:	3a01      	subs	r2, #1
 80182dc:	6062      	str	r2, [r4, #4]
 80182de:	6023      	str	r3, [r4, #0]
 80182e0:	e7ec      	b.n	80182bc <__ssvfiscanf_r+0x40>
 80182e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80182e4:	4621      	mov	r1, r4
 80182e6:	4630      	mov	r0, r6
 80182e8:	4798      	blx	r3
 80182ea:	2800      	cmp	r0, #0
 80182ec:	d0e9      	beq.n	80182c2 <__ssvfiscanf_r+0x46>
 80182ee:	e7ed      	b.n	80182cc <__ssvfiscanf_r+0x50>
 80182f0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80182f4:	f040 8085 	bne.w	8018402 <__ssvfiscanf_r+0x186>
 80182f8:	9341      	str	r3, [sp, #260]	@ 0x104
 80182fa:	9343      	str	r3, [sp, #268]	@ 0x10c
 80182fc:	7853      	ldrb	r3, [r2, #1]
 80182fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8018300:	bf02      	ittt	eq
 8018302:	2310      	moveq	r3, #16
 8018304:	1c95      	addeq	r5, r2, #2
 8018306:	9341      	streq	r3, [sp, #260]	@ 0x104
 8018308:	220a      	movs	r2, #10
 801830a:	46aa      	mov	sl, r5
 801830c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8018310:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8018314:	2b09      	cmp	r3, #9
 8018316:	d91e      	bls.n	8018356 <__ssvfiscanf_r+0xda>
 8018318:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8018534 <__ssvfiscanf_r+0x2b8>
 801831c:	2203      	movs	r2, #3
 801831e:	4658      	mov	r0, fp
 8018320:	f7e7 ff8e 	bl	8000240 <memchr>
 8018324:	b138      	cbz	r0, 8018336 <__ssvfiscanf_r+0xba>
 8018326:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018328:	eba0 000b 	sub.w	r0, r0, fp
 801832c:	2301      	movs	r3, #1
 801832e:	4083      	lsls	r3, r0
 8018330:	4313      	orrs	r3, r2
 8018332:	9341      	str	r3, [sp, #260]	@ 0x104
 8018334:	4655      	mov	r5, sl
 8018336:	f815 3b01 	ldrb.w	r3, [r5], #1
 801833a:	2b78      	cmp	r3, #120	@ 0x78
 801833c:	d806      	bhi.n	801834c <__ssvfiscanf_r+0xd0>
 801833e:	2b57      	cmp	r3, #87	@ 0x57
 8018340:	d810      	bhi.n	8018364 <__ssvfiscanf_r+0xe8>
 8018342:	2b25      	cmp	r3, #37	@ 0x25
 8018344:	d05d      	beq.n	8018402 <__ssvfiscanf_r+0x186>
 8018346:	d857      	bhi.n	80183f8 <__ssvfiscanf_r+0x17c>
 8018348:	2b00      	cmp	r3, #0
 801834a:	d075      	beq.n	8018438 <__ssvfiscanf_r+0x1bc>
 801834c:	2303      	movs	r3, #3
 801834e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018350:	230a      	movs	r3, #10
 8018352:	9342      	str	r3, [sp, #264]	@ 0x108
 8018354:	e088      	b.n	8018468 <__ssvfiscanf_r+0x1ec>
 8018356:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8018358:	fb02 1103 	mla	r1, r2, r3, r1
 801835c:	3930      	subs	r1, #48	@ 0x30
 801835e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8018360:	4655      	mov	r5, sl
 8018362:	e7d2      	b.n	801830a <__ssvfiscanf_r+0x8e>
 8018364:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8018368:	2a20      	cmp	r2, #32
 801836a:	d8ef      	bhi.n	801834c <__ssvfiscanf_r+0xd0>
 801836c:	a101      	add	r1, pc, #4	@ (adr r1, 8018374 <__ssvfiscanf_r+0xf8>)
 801836e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018372:	bf00      	nop
 8018374:	08018447 	.word	0x08018447
 8018378:	0801834d 	.word	0x0801834d
 801837c:	0801834d 	.word	0x0801834d
 8018380:	080184a1 	.word	0x080184a1
 8018384:	0801834d 	.word	0x0801834d
 8018388:	0801834d 	.word	0x0801834d
 801838c:	0801834d 	.word	0x0801834d
 8018390:	0801834d 	.word	0x0801834d
 8018394:	0801834d 	.word	0x0801834d
 8018398:	0801834d 	.word	0x0801834d
 801839c:	0801834d 	.word	0x0801834d
 80183a0:	080184b7 	.word	0x080184b7
 80183a4:	0801849d 	.word	0x0801849d
 80183a8:	080183ff 	.word	0x080183ff
 80183ac:	080183ff 	.word	0x080183ff
 80183b0:	080183ff 	.word	0x080183ff
 80183b4:	0801834d 	.word	0x0801834d
 80183b8:	08018459 	.word	0x08018459
 80183bc:	0801834d 	.word	0x0801834d
 80183c0:	0801834d 	.word	0x0801834d
 80183c4:	0801834d 	.word	0x0801834d
 80183c8:	0801834d 	.word	0x0801834d
 80183cc:	080184c7 	.word	0x080184c7
 80183d0:	08018461 	.word	0x08018461
 80183d4:	0801843f 	.word	0x0801843f
 80183d8:	0801834d 	.word	0x0801834d
 80183dc:	0801834d 	.word	0x0801834d
 80183e0:	080184c3 	.word	0x080184c3
 80183e4:	0801834d 	.word	0x0801834d
 80183e8:	0801849d 	.word	0x0801849d
 80183ec:	0801834d 	.word	0x0801834d
 80183f0:	0801834d 	.word	0x0801834d
 80183f4:	08018447 	.word	0x08018447
 80183f8:	3b45      	subs	r3, #69	@ 0x45
 80183fa:	2b02      	cmp	r3, #2
 80183fc:	d8a6      	bhi.n	801834c <__ssvfiscanf_r+0xd0>
 80183fe:	2305      	movs	r3, #5
 8018400:	e031      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 8018402:	6863      	ldr	r3, [r4, #4]
 8018404:	2b00      	cmp	r3, #0
 8018406:	dd0d      	ble.n	8018424 <__ssvfiscanf_r+0x1a8>
 8018408:	6823      	ldr	r3, [r4, #0]
 801840a:	781a      	ldrb	r2, [r3, #0]
 801840c:	454a      	cmp	r2, r9
 801840e:	f040 80a6 	bne.w	801855e <__ssvfiscanf_r+0x2e2>
 8018412:	3301      	adds	r3, #1
 8018414:	6862      	ldr	r2, [r4, #4]
 8018416:	6023      	str	r3, [r4, #0]
 8018418:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801841a:	3a01      	subs	r2, #1
 801841c:	3301      	adds	r3, #1
 801841e:	6062      	str	r2, [r4, #4]
 8018420:	9345      	str	r3, [sp, #276]	@ 0x114
 8018422:	e753      	b.n	80182cc <__ssvfiscanf_r+0x50>
 8018424:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018426:	4621      	mov	r1, r4
 8018428:	4630      	mov	r0, r6
 801842a:	4798      	blx	r3
 801842c:	2800      	cmp	r0, #0
 801842e:	d0eb      	beq.n	8018408 <__ssvfiscanf_r+0x18c>
 8018430:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018432:	2800      	cmp	r0, #0
 8018434:	f040 808b 	bne.w	801854e <__ssvfiscanf_r+0x2d2>
 8018438:	f04f 30ff 	mov.w	r0, #4294967295
 801843c:	e08b      	b.n	8018556 <__ssvfiscanf_r+0x2da>
 801843e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018440:	f042 0220 	orr.w	r2, r2, #32
 8018444:	9241      	str	r2, [sp, #260]	@ 0x104
 8018446:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8018448:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801844c:	9241      	str	r2, [sp, #260]	@ 0x104
 801844e:	2210      	movs	r2, #16
 8018450:	2b6e      	cmp	r3, #110	@ 0x6e
 8018452:	9242      	str	r2, [sp, #264]	@ 0x108
 8018454:	d902      	bls.n	801845c <__ssvfiscanf_r+0x1e0>
 8018456:	e005      	b.n	8018464 <__ssvfiscanf_r+0x1e8>
 8018458:	2300      	movs	r3, #0
 801845a:	9342      	str	r3, [sp, #264]	@ 0x108
 801845c:	2303      	movs	r3, #3
 801845e:	e002      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 8018460:	2308      	movs	r3, #8
 8018462:	9342      	str	r3, [sp, #264]	@ 0x108
 8018464:	2304      	movs	r3, #4
 8018466:	9347      	str	r3, [sp, #284]	@ 0x11c
 8018468:	6863      	ldr	r3, [r4, #4]
 801846a:	2b00      	cmp	r3, #0
 801846c:	dd39      	ble.n	80184e2 <__ssvfiscanf_r+0x266>
 801846e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8018470:	0659      	lsls	r1, r3, #25
 8018472:	d404      	bmi.n	801847e <__ssvfiscanf_r+0x202>
 8018474:	6823      	ldr	r3, [r4, #0]
 8018476:	781a      	ldrb	r2, [r3, #0]
 8018478:	5cba      	ldrb	r2, [r7, r2]
 801847a:	0712      	lsls	r2, r2, #28
 801847c:	d438      	bmi.n	80184f0 <__ssvfiscanf_r+0x274>
 801847e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8018480:	2b02      	cmp	r3, #2
 8018482:	dc47      	bgt.n	8018514 <__ssvfiscanf_r+0x298>
 8018484:	466b      	mov	r3, sp
 8018486:	4622      	mov	r2, r4
 8018488:	a941      	add	r1, sp, #260	@ 0x104
 801848a:	4630      	mov	r0, r6
 801848c:	f000 fb3a 	bl	8018b04 <_scanf_chars>
 8018490:	2801      	cmp	r0, #1
 8018492:	d064      	beq.n	801855e <__ssvfiscanf_r+0x2e2>
 8018494:	2802      	cmp	r0, #2
 8018496:	f47f af19 	bne.w	80182cc <__ssvfiscanf_r+0x50>
 801849a:	e7c9      	b.n	8018430 <__ssvfiscanf_r+0x1b4>
 801849c:	220a      	movs	r2, #10
 801849e:	e7d7      	b.n	8018450 <__ssvfiscanf_r+0x1d4>
 80184a0:	4629      	mov	r1, r5
 80184a2:	4640      	mov	r0, r8
 80184a4:	f000 fd28 	bl	8018ef8 <__sccl>
 80184a8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80184aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184ae:	9341      	str	r3, [sp, #260]	@ 0x104
 80184b0:	4605      	mov	r5, r0
 80184b2:	2301      	movs	r3, #1
 80184b4:	e7d7      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 80184b6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80184b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80184bc:	9341      	str	r3, [sp, #260]	@ 0x104
 80184be:	2300      	movs	r3, #0
 80184c0:	e7d1      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 80184c2:	2302      	movs	r3, #2
 80184c4:	e7cf      	b.n	8018466 <__ssvfiscanf_r+0x1ea>
 80184c6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80184c8:	06c3      	lsls	r3, r0, #27
 80184ca:	f53f aeff 	bmi.w	80182cc <__ssvfiscanf_r+0x50>
 80184ce:	9b00      	ldr	r3, [sp, #0]
 80184d0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80184d2:	1d19      	adds	r1, r3, #4
 80184d4:	9100      	str	r1, [sp, #0]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	07c0      	lsls	r0, r0, #31
 80184da:	bf4c      	ite	mi
 80184dc:	801a      	strhmi	r2, [r3, #0]
 80184de:	601a      	strpl	r2, [r3, #0]
 80184e0:	e6f4      	b.n	80182cc <__ssvfiscanf_r+0x50>
 80184e2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80184e4:	4621      	mov	r1, r4
 80184e6:	4630      	mov	r0, r6
 80184e8:	4798      	blx	r3
 80184ea:	2800      	cmp	r0, #0
 80184ec:	d0bf      	beq.n	801846e <__ssvfiscanf_r+0x1f2>
 80184ee:	e79f      	b.n	8018430 <__ssvfiscanf_r+0x1b4>
 80184f0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80184f2:	3201      	adds	r2, #1
 80184f4:	9245      	str	r2, [sp, #276]	@ 0x114
 80184f6:	6862      	ldr	r2, [r4, #4]
 80184f8:	3a01      	subs	r2, #1
 80184fa:	2a00      	cmp	r2, #0
 80184fc:	6062      	str	r2, [r4, #4]
 80184fe:	dd02      	ble.n	8018506 <__ssvfiscanf_r+0x28a>
 8018500:	3301      	adds	r3, #1
 8018502:	6023      	str	r3, [r4, #0]
 8018504:	e7b6      	b.n	8018474 <__ssvfiscanf_r+0x1f8>
 8018506:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8018508:	4621      	mov	r1, r4
 801850a:	4630      	mov	r0, r6
 801850c:	4798      	blx	r3
 801850e:	2800      	cmp	r0, #0
 8018510:	d0b0      	beq.n	8018474 <__ssvfiscanf_r+0x1f8>
 8018512:	e78d      	b.n	8018430 <__ssvfiscanf_r+0x1b4>
 8018514:	2b04      	cmp	r3, #4
 8018516:	dc0f      	bgt.n	8018538 <__ssvfiscanf_r+0x2bc>
 8018518:	466b      	mov	r3, sp
 801851a:	4622      	mov	r2, r4
 801851c:	a941      	add	r1, sp, #260	@ 0x104
 801851e:	4630      	mov	r0, r6
 8018520:	f000 fb4a 	bl	8018bb8 <_scanf_i>
 8018524:	e7b4      	b.n	8018490 <__ssvfiscanf_r+0x214>
 8018526:	bf00      	nop
 8018528:	080181c9 	.word	0x080181c9
 801852c:	08018243 	.word	0x08018243
 8018530:	0801cb15 	.word	0x0801cb15
 8018534:	0801cacc 	.word	0x0801cacc
 8018538:	4b0a      	ldr	r3, [pc, #40]	@ (8018564 <__ssvfiscanf_r+0x2e8>)
 801853a:	2b00      	cmp	r3, #0
 801853c:	f43f aec6 	beq.w	80182cc <__ssvfiscanf_r+0x50>
 8018540:	466b      	mov	r3, sp
 8018542:	4622      	mov	r2, r4
 8018544:	a941      	add	r1, sp, #260	@ 0x104
 8018546:	4630      	mov	r0, r6
 8018548:	f3af 8000 	nop.w
 801854c:	e7a0      	b.n	8018490 <__ssvfiscanf_r+0x214>
 801854e:	89a3      	ldrh	r3, [r4, #12]
 8018550:	065b      	lsls	r3, r3, #25
 8018552:	f53f af71 	bmi.w	8018438 <__ssvfiscanf_r+0x1bc>
 8018556:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801855e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8018560:	e7f9      	b.n	8018556 <__ssvfiscanf_r+0x2da>
 8018562:	bf00      	nop
 8018564:	00000000 	.word	0x00000000

08018568 <__sfputc_r>:
 8018568:	6893      	ldr	r3, [r2, #8]
 801856a:	3b01      	subs	r3, #1
 801856c:	2b00      	cmp	r3, #0
 801856e:	b410      	push	{r4}
 8018570:	6093      	str	r3, [r2, #8]
 8018572:	da08      	bge.n	8018586 <__sfputc_r+0x1e>
 8018574:	6994      	ldr	r4, [r2, #24]
 8018576:	42a3      	cmp	r3, r4
 8018578:	db01      	blt.n	801857e <__sfputc_r+0x16>
 801857a:	290a      	cmp	r1, #10
 801857c:	d103      	bne.n	8018586 <__sfputc_r+0x1e>
 801857e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018582:	f000 bd2c 	b.w	8018fde <__swbuf_r>
 8018586:	6813      	ldr	r3, [r2, #0]
 8018588:	1c58      	adds	r0, r3, #1
 801858a:	6010      	str	r0, [r2, #0]
 801858c:	7019      	strb	r1, [r3, #0]
 801858e:	4608      	mov	r0, r1
 8018590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018594:	4770      	bx	lr

08018596 <__sfputs_r>:
 8018596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018598:	4606      	mov	r6, r0
 801859a:	460f      	mov	r7, r1
 801859c:	4614      	mov	r4, r2
 801859e:	18d5      	adds	r5, r2, r3
 80185a0:	42ac      	cmp	r4, r5
 80185a2:	d101      	bne.n	80185a8 <__sfputs_r+0x12>
 80185a4:	2000      	movs	r0, #0
 80185a6:	e007      	b.n	80185b8 <__sfputs_r+0x22>
 80185a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185ac:	463a      	mov	r2, r7
 80185ae:	4630      	mov	r0, r6
 80185b0:	f7ff ffda 	bl	8018568 <__sfputc_r>
 80185b4:	1c43      	adds	r3, r0, #1
 80185b6:	d1f3      	bne.n	80185a0 <__sfputs_r+0xa>
 80185b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080185bc <_vfiprintf_r>:
 80185bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185c0:	460d      	mov	r5, r1
 80185c2:	b09d      	sub	sp, #116	@ 0x74
 80185c4:	4614      	mov	r4, r2
 80185c6:	4698      	mov	r8, r3
 80185c8:	4606      	mov	r6, r0
 80185ca:	b118      	cbz	r0, 80185d4 <_vfiprintf_r+0x18>
 80185cc:	6a03      	ldr	r3, [r0, #32]
 80185ce:	b90b      	cbnz	r3, 80185d4 <_vfiprintf_r+0x18>
 80185d0:	f7ff fa3a 	bl	8017a48 <__sinit>
 80185d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185d6:	07d9      	lsls	r1, r3, #31
 80185d8:	d405      	bmi.n	80185e6 <_vfiprintf_r+0x2a>
 80185da:	89ab      	ldrh	r3, [r5, #12]
 80185dc:	059a      	lsls	r2, r3, #22
 80185de:	d402      	bmi.n	80185e6 <_vfiprintf_r+0x2a>
 80185e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80185e2:	f7ff fc3e 	bl	8017e62 <__retarget_lock_acquire_recursive>
 80185e6:	89ab      	ldrh	r3, [r5, #12]
 80185e8:	071b      	lsls	r3, r3, #28
 80185ea:	d501      	bpl.n	80185f0 <_vfiprintf_r+0x34>
 80185ec:	692b      	ldr	r3, [r5, #16]
 80185ee:	b99b      	cbnz	r3, 8018618 <_vfiprintf_r+0x5c>
 80185f0:	4629      	mov	r1, r5
 80185f2:	4630      	mov	r0, r6
 80185f4:	f000 fd32 	bl	801905c <__swsetup_r>
 80185f8:	b170      	cbz	r0, 8018618 <_vfiprintf_r+0x5c>
 80185fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80185fc:	07dc      	lsls	r4, r3, #31
 80185fe:	d504      	bpl.n	801860a <_vfiprintf_r+0x4e>
 8018600:	f04f 30ff 	mov.w	r0, #4294967295
 8018604:	b01d      	add	sp, #116	@ 0x74
 8018606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801860a:	89ab      	ldrh	r3, [r5, #12]
 801860c:	0598      	lsls	r0, r3, #22
 801860e:	d4f7      	bmi.n	8018600 <_vfiprintf_r+0x44>
 8018610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018612:	f7ff fc27 	bl	8017e64 <__retarget_lock_release_recursive>
 8018616:	e7f3      	b.n	8018600 <_vfiprintf_r+0x44>
 8018618:	2300      	movs	r3, #0
 801861a:	9309      	str	r3, [sp, #36]	@ 0x24
 801861c:	2320      	movs	r3, #32
 801861e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018622:	f8cd 800c 	str.w	r8, [sp, #12]
 8018626:	2330      	movs	r3, #48	@ 0x30
 8018628:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80187d8 <_vfiprintf_r+0x21c>
 801862c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018630:	f04f 0901 	mov.w	r9, #1
 8018634:	4623      	mov	r3, r4
 8018636:	469a      	mov	sl, r3
 8018638:	f813 2b01 	ldrb.w	r2, [r3], #1
 801863c:	b10a      	cbz	r2, 8018642 <_vfiprintf_r+0x86>
 801863e:	2a25      	cmp	r2, #37	@ 0x25
 8018640:	d1f9      	bne.n	8018636 <_vfiprintf_r+0x7a>
 8018642:	ebba 0b04 	subs.w	fp, sl, r4
 8018646:	d00b      	beq.n	8018660 <_vfiprintf_r+0xa4>
 8018648:	465b      	mov	r3, fp
 801864a:	4622      	mov	r2, r4
 801864c:	4629      	mov	r1, r5
 801864e:	4630      	mov	r0, r6
 8018650:	f7ff ffa1 	bl	8018596 <__sfputs_r>
 8018654:	3001      	adds	r0, #1
 8018656:	f000 80a7 	beq.w	80187a8 <_vfiprintf_r+0x1ec>
 801865a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801865c:	445a      	add	r2, fp
 801865e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018660:	f89a 3000 	ldrb.w	r3, [sl]
 8018664:	2b00      	cmp	r3, #0
 8018666:	f000 809f 	beq.w	80187a8 <_vfiprintf_r+0x1ec>
 801866a:	2300      	movs	r3, #0
 801866c:	f04f 32ff 	mov.w	r2, #4294967295
 8018670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018674:	f10a 0a01 	add.w	sl, sl, #1
 8018678:	9304      	str	r3, [sp, #16]
 801867a:	9307      	str	r3, [sp, #28]
 801867c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018680:	931a      	str	r3, [sp, #104]	@ 0x68
 8018682:	4654      	mov	r4, sl
 8018684:	2205      	movs	r2, #5
 8018686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801868a:	4853      	ldr	r0, [pc, #332]	@ (80187d8 <_vfiprintf_r+0x21c>)
 801868c:	f7e7 fdd8 	bl	8000240 <memchr>
 8018690:	9a04      	ldr	r2, [sp, #16]
 8018692:	b9d8      	cbnz	r0, 80186cc <_vfiprintf_r+0x110>
 8018694:	06d1      	lsls	r1, r2, #27
 8018696:	bf44      	itt	mi
 8018698:	2320      	movmi	r3, #32
 801869a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801869e:	0713      	lsls	r3, r2, #28
 80186a0:	bf44      	itt	mi
 80186a2:	232b      	movmi	r3, #43	@ 0x2b
 80186a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80186a8:	f89a 3000 	ldrb.w	r3, [sl]
 80186ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80186ae:	d015      	beq.n	80186dc <_vfiprintf_r+0x120>
 80186b0:	9a07      	ldr	r2, [sp, #28]
 80186b2:	4654      	mov	r4, sl
 80186b4:	2000      	movs	r0, #0
 80186b6:	f04f 0c0a 	mov.w	ip, #10
 80186ba:	4621      	mov	r1, r4
 80186bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186c0:	3b30      	subs	r3, #48	@ 0x30
 80186c2:	2b09      	cmp	r3, #9
 80186c4:	d94b      	bls.n	801875e <_vfiprintf_r+0x1a2>
 80186c6:	b1b0      	cbz	r0, 80186f6 <_vfiprintf_r+0x13a>
 80186c8:	9207      	str	r2, [sp, #28]
 80186ca:	e014      	b.n	80186f6 <_vfiprintf_r+0x13a>
 80186cc:	eba0 0308 	sub.w	r3, r0, r8
 80186d0:	fa09 f303 	lsl.w	r3, r9, r3
 80186d4:	4313      	orrs	r3, r2
 80186d6:	9304      	str	r3, [sp, #16]
 80186d8:	46a2      	mov	sl, r4
 80186da:	e7d2      	b.n	8018682 <_vfiprintf_r+0xc6>
 80186dc:	9b03      	ldr	r3, [sp, #12]
 80186de:	1d19      	adds	r1, r3, #4
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	9103      	str	r1, [sp, #12]
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	bfbb      	ittet	lt
 80186e8:	425b      	neglt	r3, r3
 80186ea:	f042 0202 	orrlt.w	r2, r2, #2
 80186ee:	9307      	strge	r3, [sp, #28]
 80186f0:	9307      	strlt	r3, [sp, #28]
 80186f2:	bfb8      	it	lt
 80186f4:	9204      	strlt	r2, [sp, #16]
 80186f6:	7823      	ldrb	r3, [r4, #0]
 80186f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80186fa:	d10a      	bne.n	8018712 <_vfiprintf_r+0x156>
 80186fc:	7863      	ldrb	r3, [r4, #1]
 80186fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8018700:	d132      	bne.n	8018768 <_vfiprintf_r+0x1ac>
 8018702:	9b03      	ldr	r3, [sp, #12]
 8018704:	1d1a      	adds	r2, r3, #4
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	9203      	str	r2, [sp, #12]
 801870a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801870e:	3402      	adds	r4, #2
 8018710:	9305      	str	r3, [sp, #20]
 8018712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80187e8 <_vfiprintf_r+0x22c>
 8018716:	7821      	ldrb	r1, [r4, #0]
 8018718:	2203      	movs	r2, #3
 801871a:	4650      	mov	r0, sl
 801871c:	f7e7 fd90 	bl	8000240 <memchr>
 8018720:	b138      	cbz	r0, 8018732 <_vfiprintf_r+0x176>
 8018722:	9b04      	ldr	r3, [sp, #16]
 8018724:	eba0 000a 	sub.w	r0, r0, sl
 8018728:	2240      	movs	r2, #64	@ 0x40
 801872a:	4082      	lsls	r2, r0
 801872c:	4313      	orrs	r3, r2
 801872e:	3401      	adds	r4, #1
 8018730:	9304      	str	r3, [sp, #16]
 8018732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018736:	4829      	ldr	r0, [pc, #164]	@ (80187dc <_vfiprintf_r+0x220>)
 8018738:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801873c:	2206      	movs	r2, #6
 801873e:	f7e7 fd7f 	bl	8000240 <memchr>
 8018742:	2800      	cmp	r0, #0
 8018744:	d03f      	beq.n	80187c6 <_vfiprintf_r+0x20a>
 8018746:	4b26      	ldr	r3, [pc, #152]	@ (80187e0 <_vfiprintf_r+0x224>)
 8018748:	bb1b      	cbnz	r3, 8018792 <_vfiprintf_r+0x1d6>
 801874a:	9b03      	ldr	r3, [sp, #12]
 801874c:	3307      	adds	r3, #7
 801874e:	f023 0307 	bic.w	r3, r3, #7
 8018752:	3308      	adds	r3, #8
 8018754:	9303      	str	r3, [sp, #12]
 8018756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018758:	443b      	add	r3, r7
 801875a:	9309      	str	r3, [sp, #36]	@ 0x24
 801875c:	e76a      	b.n	8018634 <_vfiprintf_r+0x78>
 801875e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018762:	460c      	mov	r4, r1
 8018764:	2001      	movs	r0, #1
 8018766:	e7a8      	b.n	80186ba <_vfiprintf_r+0xfe>
 8018768:	2300      	movs	r3, #0
 801876a:	3401      	adds	r4, #1
 801876c:	9305      	str	r3, [sp, #20]
 801876e:	4619      	mov	r1, r3
 8018770:	f04f 0c0a 	mov.w	ip, #10
 8018774:	4620      	mov	r0, r4
 8018776:	f810 2b01 	ldrb.w	r2, [r0], #1
 801877a:	3a30      	subs	r2, #48	@ 0x30
 801877c:	2a09      	cmp	r2, #9
 801877e:	d903      	bls.n	8018788 <_vfiprintf_r+0x1cc>
 8018780:	2b00      	cmp	r3, #0
 8018782:	d0c6      	beq.n	8018712 <_vfiprintf_r+0x156>
 8018784:	9105      	str	r1, [sp, #20]
 8018786:	e7c4      	b.n	8018712 <_vfiprintf_r+0x156>
 8018788:	fb0c 2101 	mla	r1, ip, r1, r2
 801878c:	4604      	mov	r4, r0
 801878e:	2301      	movs	r3, #1
 8018790:	e7f0      	b.n	8018774 <_vfiprintf_r+0x1b8>
 8018792:	ab03      	add	r3, sp, #12
 8018794:	9300      	str	r3, [sp, #0]
 8018796:	462a      	mov	r2, r5
 8018798:	4b12      	ldr	r3, [pc, #72]	@ (80187e4 <_vfiprintf_r+0x228>)
 801879a:	a904      	add	r1, sp, #16
 801879c:	4630      	mov	r0, r6
 801879e:	f3af 8000 	nop.w
 80187a2:	4607      	mov	r7, r0
 80187a4:	1c78      	adds	r0, r7, #1
 80187a6:	d1d6      	bne.n	8018756 <_vfiprintf_r+0x19a>
 80187a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80187aa:	07d9      	lsls	r1, r3, #31
 80187ac:	d405      	bmi.n	80187ba <_vfiprintf_r+0x1fe>
 80187ae:	89ab      	ldrh	r3, [r5, #12]
 80187b0:	059a      	lsls	r2, r3, #22
 80187b2:	d402      	bmi.n	80187ba <_vfiprintf_r+0x1fe>
 80187b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80187b6:	f7ff fb55 	bl	8017e64 <__retarget_lock_release_recursive>
 80187ba:	89ab      	ldrh	r3, [r5, #12]
 80187bc:	065b      	lsls	r3, r3, #25
 80187be:	f53f af1f 	bmi.w	8018600 <_vfiprintf_r+0x44>
 80187c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80187c4:	e71e      	b.n	8018604 <_vfiprintf_r+0x48>
 80187c6:	ab03      	add	r3, sp, #12
 80187c8:	9300      	str	r3, [sp, #0]
 80187ca:	462a      	mov	r2, r5
 80187cc:	4b05      	ldr	r3, [pc, #20]	@ (80187e4 <_vfiprintf_r+0x228>)
 80187ce:	a904      	add	r1, sp, #16
 80187d0:	4630      	mov	r0, r6
 80187d2:	f000 f879 	bl	80188c8 <_printf_i>
 80187d6:	e7e4      	b.n	80187a2 <_vfiprintf_r+0x1e6>
 80187d8:	0801cac6 	.word	0x0801cac6
 80187dc:	0801cad0 	.word	0x0801cad0
 80187e0:	00000000 	.word	0x00000000
 80187e4:	08018597 	.word	0x08018597
 80187e8:	0801cacc 	.word	0x0801cacc

080187ec <_printf_common>:
 80187ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187f0:	4616      	mov	r6, r2
 80187f2:	4698      	mov	r8, r3
 80187f4:	688a      	ldr	r2, [r1, #8]
 80187f6:	690b      	ldr	r3, [r1, #16]
 80187f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80187fc:	4293      	cmp	r3, r2
 80187fe:	bfb8      	it	lt
 8018800:	4613      	movlt	r3, r2
 8018802:	6033      	str	r3, [r6, #0]
 8018804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018808:	4607      	mov	r7, r0
 801880a:	460c      	mov	r4, r1
 801880c:	b10a      	cbz	r2, 8018812 <_printf_common+0x26>
 801880e:	3301      	adds	r3, #1
 8018810:	6033      	str	r3, [r6, #0]
 8018812:	6823      	ldr	r3, [r4, #0]
 8018814:	0699      	lsls	r1, r3, #26
 8018816:	bf42      	ittt	mi
 8018818:	6833      	ldrmi	r3, [r6, #0]
 801881a:	3302      	addmi	r3, #2
 801881c:	6033      	strmi	r3, [r6, #0]
 801881e:	6825      	ldr	r5, [r4, #0]
 8018820:	f015 0506 	ands.w	r5, r5, #6
 8018824:	d106      	bne.n	8018834 <_printf_common+0x48>
 8018826:	f104 0a19 	add.w	sl, r4, #25
 801882a:	68e3      	ldr	r3, [r4, #12]
 801882c:	6832      	ldr	r2, [r6, #0]
 801882e:	1a9b      	subs	r3, r3, r2
 8018830:	42ab      	cmp	r3, r5
 8018832:	dc26      	bgt.n	8018882 <_printf_common+0x96>
 8018834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8018838:	6822      	ldr	r2, [r4, #0]
 801883a:	3b00      	subs	r3, #0
 801883c:	bf18      	it	ne
 801883e:	2301      	movne	r3, #1
 8018840:	0692      	lsls	r2, r2, #26
 8018842:	d42b      	bmi.n	801889c <_printf_common+0xb0>
 8018844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8018848:	4641      	mov	r1, r8
 801884a:	4638      	mov	r0, r7
 801884c:	47c8      	blx	r9
 801884e:	3001      	adds	r0, #1
 8018850:	d01e      	beq.n	8018890 <_printf_common+0xa4>
 8018852:	6823      	ldr	r3, [r4, #0]
 8018854:	6922      	ldr	r2, [r4, #16]
 8018856:	f003 0306 	and.w	r3, r3, #6
 801885a:	2b04      	cmp	r3, #4
 801885c:	bf02      	ittt	eq
 801885e:	68e5      	ldreq	r5, [r4, #12]
 8018860:	6833      	ldreq	r3, [r6, #0]
 8018862:	1aed      	subeq	r5, r5, r3
 8018864:	68a3      	ldr	r3, [r4, #8]
 8018866:	bf0c      	ite	eq
 8018868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801886c:	2500      	movne	r5, #0
 801886e:	4293      	cmp	r3, r2
 8018870:	bfc4      	itt	gt
 8018872:	1a9b      	subgt	r3, r3, r2
 8018874:	18ed      	addgt	r5, r5, r3
 8018876:	2600      	movs	r6, #0
 8018878:	341a      	adds	r4, #26
 801887a:	42b5      	cmp	r5, r6
 801887c:	d11a      	bne.n	80188b4 <_printf_common+0xc8>
 801887e:	2000      	movs	r0, #0
 8018880:	e008      	b.n	8018894 <_printf_common+0xa8>
 8018882:	2301      	movs	r3, #1
 8018884:	4652      	mov	r2, sl
 8018886:	4641      	mov	r1, r8
 8018888:	4638      	mov	r0, r7
 801888a:	47c8      	blx	r9
 801888c:	3001      	adds	r0, #1
 801888e:	d103      	bne.n	8018898 <_printf_common+0xac>
 8018890:	f04f 30ff 	mov.w	r0, #4294967295
 8018894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018898:	3501      	adds	r5, #1
 801889a:	e7c6      	b.n	801882a <_printf_common+0x3e>
 801889c:	18e1      	adds	r1, r4, r3
 801889e:	1c5a      	adds	r2, r3, #1
 80188a0:	2030      	movs	r0, #48	@ 0x30
 80188a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80188a6:	4422      	add	r2, r4
 80188a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80188ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80188b0:	3302      	adds	r3, #2
 80188b2:	e7c7      	b.n	8018844 <_printf_common+0x58>
 80188b4:	2301      	movs	r3, #1
 80188b6:	4622      	mov	r2, r4
 80188b8:	4641      	mov	r1, r8
 80188ba:	4638      	mov	r0, r7
 80188bc:	47c8      	blx	r9
 80188be:	3001      	adds	r0, #1
 80188c0:	d0e6      	beq.n	8018890 <_printf_common+0xa4>
 80188c2:	3601      	adds	r6, #1
 80188c4:	e7d9      	b.n	801887a <_printf_common+0x8e>
	...

080188c8 <_printf_i>:
 80188c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80188cc:	7e0f      	ldrb	r7, [r1, #24]
 80188ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80188d0:	2f78      	cmp	r7, #120	@ 0x78
 80188d2:	4691      	mov	r9, r2
 80188d4:	4680      	mov	r8, r0
 80188d6:	460c      	mov	r4, r1
 80188d8:	469a      	mov	sl, r3
 80188da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80188de:	d807      	bhi.n	80188f0 <_printf_i+0x28>
 80188e0:	2f62      	cmp	r7, #98	@ 0x62
 80188e2:	d80a      	bhi.n	80188fa <_printf_i+0x32>
 80188e4:	2f00      	cmp	r7, #0
 80188e6:	f000 80d1 	beq.w	8018a8c <_printf_i+0x1c4>
 80188ea:	2f58      	cmp	r7, #88	@ 0x58
 80188ec:	f000 80b8 	beq.w	8018a60 <_printf_i+0x198>
 80188f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80188f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80188f8:	e03a      	b.n	8018970 <_printf_i+0xa8>
 80188fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80188fe:	2b15      	cmp	r3, #21
 8018900:	d8f6      	bhi.n	80188f0 <_printf_i+0x28>
 8018902:	a101      	add	r1, pc, #4	@ (adr r1, 8018908 <_printf_i+0x40>)
 8018904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018908:	08018961 	.word	0x08018961
 801890c:	08018975 	.word	0x08018975
 8018910:	080188f1 	.word	0x080188f1
 8018914:	080188f1 	.word	0x080188f1
 8018918:	080188f1 	.word	0x080188f1
 801891c:	080188f1 	.word	0x080188f1
 8018920:	08018975 	.word	0x08018975
 8018924:	080188f1 	.word	0x080188f1
 8018928:	080188f1 	.word	0x080188f1
 801892c:	080188f1 	.word	0x080188f1
 8018930:	080188f1 	.word	0x080188f1
 8018934:	08018a73 	.word	0x08018a73
 8018938:	0801899f 	.word	0x0801899f
 801893c:	08018a2d 	.word	0x08018a2d
 8018940:	080188f1 	.word	0x080188f1
 8018944:	080188f1 	.word	0x080188f1
 8018948:	08018a95 	.word	0x08018a95
 801894c:	080188f1 	.word	0x080188f1
 8018950:	0801899f 	.word	0x0801899f
 8018954:	080188f1 	.word	0x080188f1
 8018958:	080188f1 	.word	0x080188f1
 801895c:	08018a35 	.word	0x08018a35
 8018960:	6833      	ldr	r3, [r6, #0]
 8018962:	1d1a      	adds	r2, r3, #4
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	6032      	str	r2, [r6, #0]
 8018968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801896c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018970:	2301      	movs	r3, #1
 8018972:	e09c      	b.n	8018aae <_printf_i+0x1e6>
 8018974:	6833      	ldr	r3, [r6, #0]
 8018976:	6820      	ldr	r0, [r4, #0]
 8018978:	1d19      	adds	r1, r3, #4
 801897a:	6031      	str	r1, [r6, #0]
 801897c:	0606      	lsls	r6, r0, #24
 801897e:	d501      	bpl.n	8018984 <_printf_i+0xbc>
 8018980:	681d      	ldr	r5, [r3, #0]
 8018982:	e003      	b.n	801898c <_printf_i+0xc4>
 8018984:	0645      	lsls	r5, r0, #25
 8018986:	d5fb      	bpl.n	8018980 <_printf_i+0xb8>
 8018988:	f9b3 5000 	ldrsh.w	r5, [r3]
 801898c:	2d00      	cmp	r5, #0
 801898e:	da03      	bge.n	8018998 <_printf_i+0xd0>
 8018990:	232d      	movs	r3, #45	@ 0x2d
 8018992:	426d      	negs	r5, r5
 8018994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018998:	4858      	ldr	r0, [pc, #352]	@ (8018afc <_printf_i+0x234>)
 801899a:	230a      	movs	r3, #10
 801899c:	e011      	b.n	80189c2 <_printf_i+0xfa>
 801899e:	6821      	ldr	r1, [r4, #0]
 80189a0:	6833      	ldr	r3, [r6, #0]
 80189a2:	0608      	lsls	r0, r1, #24
 80189a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80189a8:	d402      	bmi.n	80189b0 <_printf_i+0xe8>
 80189aa:	0649      	lsls	r1, r1, #25
 80189ac:	bf48      	it	mi
 80189ae:	b2ad      	uxthmi	r5, r5
 80189b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80189b2:	4852      	ldr	r0, [pc, #328]	@ (8018afc <_printf_i+0x234>)
 80189b4:	6033      	str	r3, [r6, #0]
 80189b6:	bf14      	ite	ne
 80189b8:	230a      	movne	r3, #10
 80189ba:	2308      	moveq	r3, #8
 80189bc:	2100      	movs	r1, #0
 80189be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80189c2:	6866      	ldr	r6, [r4, #4]
 80189c4:	60a6      	str	r6, [r4, #8]
 80189c6:	2e00      	cmp	r6, #0
 80189c8:	db05      	blt.n	80189d6 <_printf_i+0x10e>
 80189ca:	6821      	ldr	r1, [r4, #0]
 80189cc:	432e      	orrs	r6, r5
 80189ce:	f021 0104 	bic.w	r1, r1, #4
 80189d2:	6021      	str	r1, [r4, #0]
 80189d4:	d04b      	beq.n	8018a6e <_printf_i+0x1a6>
 80189d6:	4616      	mov	r6, r2
 80189d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80189dc:	fb03 5711 	mls	r7, r3, r1, r5
 80189e0:	5dc7      	ldrb	r7, [r0, r7]
 80189e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80189e6:	462f      	mov	r7, r5
 80189e8:	42bb      	cmp	r3, r7
 80189ea:	460d      	mov	r5, r1
 80189ec:	d9f4      	bls.n	80189d8 <_printf_i+0x110>
 80189ee:	2b08      	cmp	r3, #8
 80189f0:	d10b      	bne.n	8018a0a <_printf_i+0x142>
 80189f2:	6823      	ldr	r3, [r4, #0]
 80189f4:	07df      	lsls	r7, r3, #31
 80189f6:	d508      	bpl.n	8018a0a <_printf_i+0x142>
 80189f8:	6923      	ldr	r3, [r4, #16]
 80189fa:	6861      	ldr	r1, [r4, #4]
 80189fc:	4299      	cmp	r1, r3
 80189fe:	bfde      	ittt	le
 8018a00:	2330      	movle	r3, #48	@ 0x30
 8018a02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018a06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018a0a:	1b92      	subs	r2, r2, r6
 8018a0c:	6122      	str	r2, [r4, #16]
 8018a0e:	f8cd a000 	str.w	sl, [sp]
 8018a12:	464b      	mov	r3, r9
 8018a14:	aa03      	add	r2, sp, #12
 8018a16:	4621      	mov	r1, r4
 8018a18:	4640      	mov	r0, r8
 8018a1a:	f7ff fee7 	bl	80187ec <_printf_common>
 8018a1e:	3001      	adds	r0, #1
 8018a20:	d14a      	bne.n	8018ab8 <_printf_i+0x1f0>
 8018a22:	f04f 30ff 	mov.w	r0, #4294967295
 8018a26:	b004      	add	sp, #16
 8018a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a2c:	6823      	ldr	r3, [r4, #0]
 8018a2e:	f043 0320 	orr.w	r3, r3, #32
 8018a32:	6023      	str	r3, [r4, #0]
 8018a34:	4832      	ldr	r0, [pc, #200]	@ (8018b00 <_printf_i+0x238>)
 8018a36:	2778      	movs	r7, #120	@ 0x78
 8018a38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018a3c:	6823      	ldr	r3, [r4, #0]
 8018a3e:	6831      	ldr	r1, [r6, #0]
 8018a40:	061f      	lsls	r7, r3, #24
 8018a42:	f851 5b04 	ldr.w	r5, [r1], #4
 8018a46:	d402      	bmi.n	8018a4e <_printf_i+0x186>
 8018a48:	065f      	lsls	r7, r3, #25
 8018a4a:	bf48      	it	mi
 8018a4c:	b2ad      	uxthmi	r5, r5
 8018a4e:	6031      	str	r1, [r6, #0]
 8018a50:	07d9      	lsls	r1, r3, #31
 8018a52:	bf44      	itt	mi
 8018a54:	f043 0320 	orrmi.w	r3, r3, #32
 8018a58:	6023      	strmi	r3, [r4, #0]
 8018a5a:	b11d      	cbz	r5, 8018a64 <_printf_i+0x19c>
 8018a5c:	2310      	movs	r3, #16
 8018a5e:	e7ad      	b.n	80189bc <_printf_i+0xf4>
 8018a60:	4826      	ldr	r0, [pc, #152]	@ (8018afc <_printf_i+0x234>)
 8018a62:	e7e9      	b.n	8018a38 <_printf_i+0x170>
 8018a64:	6823      	ldr	r3, [r4, #0]
 8018a66:	f023 0320 	bic.w	r3, r3, #32
 8018a6a:	6023      	str	r3, [r4, #0]
 8018a6c:	e7f6      	b.n	8018a5c <_printf_i+0x194>
 8018a6e:	4616      	mov	r6, r2
 8018a70:	e7bd      	b.n	80189ee <_printf_i+0x126>
 8018a72:	6833      	ldr	r3, [r6, #0]
 8018a74:	6825      	ldr	r5, [r4, #0]
 8018a76:	6961      	ldr	r1, [r4, #20]
 8018a78:	1d18      	adds	r0, r3, #4
 8018a7a:	6030      	str	r0, [r6, #0]
 8018a7c:	062e      	lsls	r6, r5, #24
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	d501      	bpl.n	8018a86 <_printf_i+0x1be>
 8018a82:	6019      	str	r1, [r3, #0]
 8018a84:	e002      	b.n	8018a8c <_printf_i+0x1c4>
 8018a86:	0668      	lsls	r0, r5, #25
 8018a88:	d5fb      	bpl.n	8018a82 <_printf_i+0x1ba>
 8018a8a:	8019      	strh	r1, [r3, #0]
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	6123      	str	r3, [r4, #16]
 8018a90:	4616      	mov	r6, r2
 8018a92:	e7bc      	b.n	8018a0e <_printf_i+0x146>
 8018a94:	6833      	ldr	r3, [r6, #0]
 8018a96:	1d1a      	adds	r2, r3, #4
 8018a98:	6032      	str	r2, [r6, #0]
 8018a9a:	681e      	ldr	r6, [r3, #0]
 8018a9c:	6862      	ldr	r2, [r4, #4]
 8018a9e:	2100      	movs	r1, #0
 8018aa0:	4630      	mov	r0, r6
 8018aa2:	f7e7 fbcd 	bl	8000240 <memchr>
 8018aa6:	b108      	cbz	r0, 8018aac <_printf_i+0x1e4>
 8018aa8:	1b80      	subs	r0, r0, r6
 8018aaa:	6060      	str	r0, [r4, #4]
 8018aac:	6863      	ldr	r3, [r4, #4]
 8018aae:	6123      	str	r3, [r4, #16]
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018ab6:	e7aa      	b.n	8018a0e <_printf_i+0x146>
 8018ab8:	6923      	ldr	r3, [r4, #16]
 8018aba:	4632      	mov	r2, r6
 8018abc:	4649      	mov	r1, r9
 8018abe:	4640      	mov	r0, r8
 8018ac0:	47d0      	blx	sl
 8018ac2:	3001      	adds	r0, #1
 8018ac4:	d0ad      	beq.n	8018a22 <_printf_i+0x15a>
 8018ac6:	6823      	ldr	r3, [r4, #0]
 8018ac8:	079b      	lsls	r3, r3, #30
 8018aca:	d413      	bmi.n	8018af4 <_printf_i+0x22c>
 8018acc:	68e0      	ldr	r0, [r4, #12]
 8018ace:	9b03      	ldr	r3, [sp, #12]
 8018ad0:	4298      	cmp	r0, r3
 8018ad2:	bfb8      	it	lt
 8018ad4:	4618      	movlt	r0, r3
 8018ad6:	e7a6      	b.n	8018a26 <_printf_i+0x15e>
 8018ad8:	2301      	movs	r3, #1
 8018ada:	4632      	mov	r2, r6
 8018adc:	4649      	mov	r1, r9
 8018ade:	4640      	mov	r0, r8
 8018ae0:	47d0      	blx	sl
 8018ae2:	3001      	adds	r0, #1
 8018ae4:	d09d      	beq.n	8018a22 <_printf_i+0x15a>
 8018ae6:	3501      	adds	r5, #1
 8018ae8:	68e3      	ldr	r3, [r4, #12]
 8018aea:	9903      	ldr	r1, [sp, #12]
 8018aec:	1a5b      	subs	r3, r3, r1
 8018aee:	42ab      	cmp	r3, r5
 8018af0:	dcf2      	bgt.n	8018ad8 <_printf_i+0x210>
 8018af2:	e7eb      	b.n	8018acc <_printf_i+0x204>
 8018af4:	2500      	movs	r5, #0
 8018af6:	f104 0619 	add.w	r6, r4, #25
 8018afa:	e7f5      	b.n	8018ae8 <_printf_i+0x220>
 8018afc:	0801cad7 	.word	0x0801cad7
 8018b00:	0801cae8 	.word	0x0801cae8

08018b04 <_scanf_chars>:
 8018b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b08:	4615      	mov	r5, r2
 8018b0a:	688a      	ldr	r2, [r1, #8]
 8018b0c:	4680      	mov	r8, r0
 8018b0e:	460c      	mov	r4, r1
 8018b10:	b932      	cbnz	r2, 8018b20 <_scanf_chars+0x1c>
 8018b12:	698a      	ldr	r2, [r1, #24]
 8018b14:	2a00      	cmp	r2, #0
 8018b16:	bf14      	ite	ne
 8018b18:	f04f 32ff 	movne.w	r2, #4294967295
 8018b1c:	2201      	moveq	r2, #1
 8018b1e:	608a      	str	r2, [r1, #8]
 8018b20:	6822      	ldr	r2, [r4, #0]
 8018b22:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8018bb4 <_scanf_chars+0xb0>
 8018b26:	06d1      	lsls	r1, r2, #27
 8018b28:	bf5f      	itttt	pl
 8018b2a:	681a      	ldrpl	r2, [r3, #0]
 8018b2c:	1d11      	addpl	r1, r2, #4
 8018b2e:	6019      	strpl	r1, [r3, #0]
 8018b30:	6816      	ldrpl	r6, [r2, #0]
 8018b32:	2700      	movs	r7, #0
 8018b34:	69a0      	ldr	r0, [r4, #24]
 8018b36:	b188      	cbz	r0, 8018b5c <_scanf_chars+0x58>
 8018b38:	2801      	cmp	r0, #1
 8018b3a:	d107      	bne.n	8018b4c <_scanf_chars+0x48>
 8018b3c:	682b      	ldr	r3, [r5, #0]
 8018b3e:	781a      	ldrb	r2, [r3, #0]
 8018b40:	6963      	ldr	r3, [r4, #20]
 8018b42:	5c9b      	ldrb	r3, [r3, r2]
 8018b44:	b953      	cbnz	r3, 8018b5c <_scanf_chars+0x58>
 8018b46:	2f00      	cmp	r7, #0
 8018b48:	d031      	beq.n	8018bae <_scanf_chars+0xaa>
 8018b4a:	e022      	b.n	8018b92 <_scanf_chars+0x8e>
 8018b4c:	2802      	cmp	r0, #2
 8018b4e:	d120      	bne.n	8018b92 <_scanf_chars+0x8e>
 8018b50:	682b      	ldr	r3, [r5, #0]
 8018b52:	781b      	ldrb	r3, [r3, #0]
 8018b54:	f819 3003 	ldrb.w	r3, [r9, r3]
 8018b58:	071b      	lsls	r3, r3, #28
 8018b5a:	d41a      	bmi.n	8018b92 <_scanf_chars+0x8e>
 8018b5c:	6823      	ldr	r3, [r4, #0]
 8018b5e:	06da      	lsls	r2, r3, #27
 8018b60:	bf5e      	ittt	pl
 8018b62:	682b      	ldrpl	r3, [r5, #0]
 8018b64:	781b      	ldrbpl	r3, [r3, #0]
 8018b66:	f806 3b01 	strbpl.w	r3, [r6], #1
 8018b6a:	682a      	ldr	r2, [r5, #0]
 8018b6c:	686b      	ldr	r3, [r5, #4]
 8018b6e:	3201      	adds	r2, #1
 8018b70:	602a      	str	r2, [r5, #0]
 8018b72:	68a2      	ldr	r2, [r4, #8]
 8018b74:	3b01      	subs	r3, #1
 8018b76:	3a01      	subs	r2, #1
 8018b78:	606b      	str	r3, [r5, #4]
 8018b7a:	3701      	adds	r7, #1
 8018b7c:	60a2      	str	r2, [r4, #8]
 8018b7e:	b142      	cbz	r2, 8018b92 <_scanf_chars+0x8e>
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	dcd7      	bgt.n	8018b34 <_scanf_chars+0x30>
 8018b84:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018b88:	4629      	mov	r1, r5
 8018b8a:	4640      	mov	r0, r8
 8018b8c:	4798      	blx	r3
 8018b8e:	2800      	cmp	r0, #0
 8018b90:	d0d0      	beq.n	8018b34 <_scanf_chars+0x30>
 8018b92:	6823      	ldr	r3, [r4, #0]
 8018b94:	f013 0310 	ands.w	r3, r3, #16
 8018b98:	d105      	bne.n	8018ba6 <_scanf_chars+0xa2>
 8018b9a:	68e2      	ldr	r2, [r4, #12]
 8018b9c:	3201      	adds	r2, #1
 8018b9e:	60e2      	str	r2, [r4, #12]
 8018ba0:	69a2      	ldr	r2, [r4, #24]
 8018ba2:	b102      	cbz	r2, 8018ba6 <_scanf_chars+0xa2>
 8018ba4:	7033      	strb	r3, [r6, #0]
 8018ba6:	6923      	ldr	r3, [r4, #16]
 8018ba8:	443b      	add	r3, r7
 8018baa:	6123      	str	r3, [r4, #16]
 8018bac:	2000      	movs	r0, #0
 8018bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bb2:	bf00      	nop
 8018bb4:	0801cb15 	.word	0x0801cb15

08018bb8 <_scanf_i>:
 8018bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bbc:	4698      	mov	r8, r3
 8018bbe:	4b74      	ldr	r3, [pc, #464]	@ (8018d90 <_scanf_i+0x1d8>)
 8018bc0:	460c      	mov	r4, r1
 8018bc2:	4682      	mov	sl, r0
 8018bc4:	4616      	mov	r6, r2
 8018bc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018bca:	b087      	sub	sp, #28
 8018bcc:	ab03      	add	r3, sp, #12
 8018bce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018bd2:	4b70      	ldr	r3, [pc, #448]	@ (8018d94 <_scanf_i+0x1dc>)
 8018bd4:	69a1      	ldr	r1, [r4, #24]
 8018bd6:	4a70      	ldr	r2, [pc, #448]	@ (8018d98 <_scanf_i+0x1e0>)
 8018bd8:	2903      	cmp	r1, #3
 8018bda:	bf08      	it	eq
 8018bdc:	461a      	moveq	r2, r3
 8018bde:	68a3      	ldr	r3, [r4, #8]
 8018be0:	9201      	str	r2, [sp, #4]
 8018be2:	1e5a      	subs	r2, r3, #1
 8018be4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8018be8:	bf88      	it	hi
 8018bea:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8018bee:	4627      	mov	r7, r4
 8018bf0:	bf82      	ittt	hi
 8018bf2:	eb03 0905 	addhi.w	r9, r3, r5
 8018bf6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8018bfa:	60a3      	strhi	r3, [r4, #8]
 8018bfc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8018c00:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8018c04:	bf98      	it	ls
 8018c06:	f04f 0900 	movls.w	r9, #0
 8018c0a:	6023      	str	r3, [r4, #0]
 8018c0c:	463d      	mov	r5, r7
 8018c0e:	f04f 0b00 	mov.w	fp, #0
 8018c12:	6831      	ldr	r1, [r6, #0]
 8018c14:	ab03      	add	r3, sp, #12
 8018c16:	7809      	ldrb	r1, [r1, #0]
 8018c18:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018c1c:	2202      	movs	r2, #2
 8018c1e:	f7e7 fb0f 	bl	8000240 <memchr>
 8018c22:	b328      	cbz	r0, 8018c70 <_scanf_i+0xb8>
 8018c24:	f1bb 0f01 	cmp.w	fp, #1
 8018c28:	d159      	bne.n	8018cde <_scanf_i+0x126>
 8018c2a:	6862      	ldr	r2, [r4, #4]
 8018c2c:	b92a      	cbnz	r2, 8018c3a <_scanf_i+0x82>
 8018c2e:	6822      	ldr	r2, [r4, #0]
 8018c30:	2108      	movs	r1, #8
 8018c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8018c36:	6061      	str	r1, [r4, #4]
 8018c38:	6022      	str	r2, [r4, #0]
 8018c3a:	6822      	ldr	r2, [r4, #0]
 8018c3c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8018c40:	6022      	str	r2, [r4, #0]
 8018c42:	68a2      	ldr	r2, [r4, #8]
 8018c44:	1e51      	subs	r1, r2, #1
 8018c46:	60a1      	str	r1, [r4, #8]
 8018c48:	b192      	cbz	r2, 8018c70 <_scanf_i+0xb8>
 8018c4a:	6832      	ldr	r2, [r6, #0]
 8018c4c:	1c51      	adds	r1, r2, #1
 8018c4e:	6031      	str	r1, [r6, #0]
 8018c50:	7812      	ldrb	r2, [r2, #0]
 8018c52:	f805 2b01 	strb.w	r2, [r5], #1
 8018c56:	6872      	ldr	r2, [r6, #4]
 8018c58:	3a01      	subs	r2, #1
 8018c5a:	2a00      	cmp	r2, #0
 8018c5c:	6072      	str	r2, [r6, #4]
 8018c5e:	dc07      	bgt.n	8018c70 <_scanf_i+0xb8>
 8018c60:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8018c64:	4631      	mov	r1, r6
 8018c66:	4650      	mov	r0, sl
 8018c68:	4790      	blx	r2
 8018c6a:	2800      	cmp	r0, #0
 8018c6c:	f040 8085 	bne.w	8018d7a <_scanf_i+0x1c2>
 8018c70:	f10b 0b01 	add.w	fp, fp, #1
 8018c74:	f1bb 0f03 	cmp.w	fp, #3
 8018c78:	d1cb      	bne.n	8018c12 <_scanf_i+0x5a>
 8018c7a:	6863      	ldr	r3, [r4, #4]
 8018c7c:	b90b      	cbnz	r3, 8018c82 <_scanf_i+0xca>
 8018c7e:	230a      	movs	r3, #10
 8018c80:	6063      	str	r3, [r4, #4]
 8018c82:	6863      	ldr	r3, [r4, #4]
 8018c84:	4945      	ldr	r1, [pc, #276]	@ (8018d9c <_scanf_i+0x1e4>)
 8018c86:	6960      	ldr	r0, [r4, #20]
 8018c88:	1ac9      	subs	r1, r1, r3
 8018c8a:	f000 f935 	bl	8018ef8 <__sccl>
 8018c8e:	f04f 0b00 	mov.w	fp, #0
 8018c92:	68a3      	ldr	r3, [r4, #8]
 8018c94:	6822      	ldr	r2, [r4, #0]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d03d      	beq.n	8018d16 <_scanf_i+0x15e>
 8018c9a:	6831      	ldr	r1, [r6, #0]
 8018c9c:	6960      	ldr	r0, [r4, #20]
 8018c9e:	f891 c000 	ldrb.w	ip, [r1]
 8018ca2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018ca6:	2800      	cmp	r0, #0
 8018ca8:	d035      	beq.n	8018d16 <_scanf_i+0x15e>
 8018caa:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8018cae:	d124      	bne.n	8018cfa <_scanf_i+0x142>
 8018cb0:	0510      	lsls	r0, r2, #20
 8018cb2:	d522      	bpl.n	8018cfa <_scanf_i+0x142>
 8018cb4:	f10b 0b01 	add.w	fp, fp, #1
 8018cb8:	f1b9 0f00 	cmp.w	r9, #0
 8018cbc:	d003      	beq.n	8018cc6 <_scanf_i+0x10e>
 8018cbe:	3301      	adds	r3, #1
 8018cc0:	f109 39ff 	add.w	r9, r9, #4294967295
 8018cc4:	60a3      	str	r3, [r4, #8]
 8018cc6:	6873      	ldr	r3, [r6, #4]
 8018cc8:	3b01      	subs	r3, #1
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	6073      	str	r3, [r6, #4]
 8018cce:	dd1b      	ble.n	8018d08 <_scanf_i+0x150>
 8018cd0:	6833      	ldr	r3, [r6, #0]
 8018cd2:	3301      	adds	r3, #1
 8018cd4:	6033      	str	r3, [r6, #0]
 8018cd6:	68a3      	ldr	r3, [r4, #8]
 8018cd8:	3b01      	subs	r3, #1
 8018cda:	60a3      	str	r3, [r4, #8]
 8018cdc:	e7d9      	b.n	8018c92 <_scanf_i+0xda>
 8018cde:	f1bb 0f02 	cmp.w	fp, #2
 8018ce2:	d1ae      	bne.n	8018c42 <_scanf_i+0x8a>
 8018ce4:	6822      	ldr	r2, [r4, #0]
 8018ce6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8018cea:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8018cee:	d1c4      	bne.n	8018c7a <_scanf_i+0xc2>
 8018cf0:	2110      	movs	r1, #16
 8018cf2:	6061      	str	r1, [r4, #4]
 8018cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8018cf8:	e7a2      	b.n	8018c40 <_scanf_i+0x88>
 8018cfa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8018cfe:	6022      	str	r2, [r4, #0]
 8018d00:	780b      	ldrb	r3, [r1, #0]
 8018d02:	f805 3b01 	strb.w	r3, [r5], #1
 8018d06:	e7de      	b.n	8018cc6 <_scanf_i+0x10e>
 8018d08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8018d0c:	4631      	mov	r1, r6
 8018d0e:	4650      	mov	r0, sl
 8018d10:	4798      	blx	r3
 8018d12:	2800      	cmp	r0, #0
 8018d14:	d0df      	beq.n	8018cd6 <_scanf_i+0x11e>
 8018d16:	6823      	ldr	r3, [r4, #0]
 8018d18:	05d9      	lsls	r1, r3, #23
 8018d1a:	d50d      	bpl.n	8018d38 <_scanf_i+0x180>
 8018d1c:	42bd      	cmp	r5, r7
 8018d1e:	d909      	bls.n	8018d34 <_scanf_i+0x17c>
 8018d20:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8018d28:	4632      	mov	r2, r6
 8018d2a:	4650      	mov	r0, sl
 8018d2c:	4798      	blx	r3
 8018d2e:	f105 39ff 	add.w	r9, r5, #4294967295
 8018d32:	464d      	mov	r5, r9
 8018d34:	42bd      	cmp	r5, r7
 8018d36:	d028      	beq.n	8018d8a <_scanf_i+0x1d2>
 8018d38:	6822      	ldr	r2, [r4, #0]
 8018d3a:	f012 0210 	ands.w	r2, r2, #16
 8018d3e:	d113      	bne.n	8018d68 <_scanf_i+0x1b0>
 8018d40:	702a      	strb	r2, [r5, #0]
 8018d42:	6863      	ldr	r3, [r4, #4]
 8018d44:	9e01      	ldr	r6, [sp, #4]
 8018d46:	4639      	mov	r1, r7
 8018d48:	4650      	mov	r0, sl
 8018d4a:	47b0      	blx	r6
 8018d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8018d50:	6821      	ldr	r1, [r4, #0]
 8018d52:	1d1a      	adds	r2, r3, #4
 8018d54:	f8c8 2000 	str.w	r2, [r8]
 8018d58:	f011 0f20 	tst.w	r1, #32
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	d00f      	beq.n	8018d80 <_scanf_i+0x1c8>
 8018d60:	6018      	str	r0, [r3, #0]
 8018d62:	68e3      	ldr	r3, [r4, #12]
 8018d64:	3301      	adds	r3, #1
 8018d66:	60e3      	str	r3, [r4, #12]
 8018d68:	6923      	ldr	r3, [r4, #16]
 8018d6a:	1bed      	subs	r5, r5, r7
 8018d6c:	445d      	add	r5, fp
 8018d6e:	442b      	add	r3, r5
 8018d70:	6123      	str	r3, [r4, #16]
 8018d72:	2000      	movs	r0, #0
 8018d74:	b007      	add	sp, #28
 8018d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d7a:	f04f 0b00 	mov.w	fp, #0
 8018d7e:	e7ca      	b.n	8018d16 <_scanf_i+0x15e>
 8018d80:	07ca      	lsls	r2, r1, #31
 8018d82:	bf4c      	ite	mi
 8018d84:	8018      	strhmi	r0, [r3, #0]
 8018d86:	6018      	strpl	r0, [r3, #0]
 8018d88:	e7eb      	b.n	8018d62 <_scanf_i+0x1aa>
 8018d8a:	2001      	movs	r0, #1
 8018d8c:	e7f2      	b.n	8018d74 <_scanf_i+0x1bc>
 8018d8e:	bf00      	nop
 8018d90:	0801c9e8 	.word	0x0801c9e8
 8018d94:	0801928d 	.word	0x0801928d
 8018d98:	0801936d 	.word	0x0801936d
 8018d9c:	0801cb09 	.word	0x0801cb09

08018da0 <__sflush_r>:
 8018da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da8:	0716      	lsls	r6, r2, #28
 8018daa:	4605      	mov	r5, r0
 8018dac:	460c      	mov	r4, r1
 8018dae:	d454      	bmi.n	8018e5a <__sflush_r+0xba>
 8018db0:	684b      	ldr	r3, [r1, #4]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	dc02      	bgt.n	8018dbc <__sflush_r+0x1c>
 8018db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	dd48      	ble.n	8018e4e <__sflush_r+0xae>
 8018dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018dbe:	2e00      	cmp	r6, #0
 8018dc0:	d045      	beq.n	8018e4e <__sflush_r+0xae>
 8018dc2:	2300      	movs	r3, #0
 8018dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018dc8:	682f      	ldr	r7, [r5, #0]
 8018dca:	6a21      	ldr	r1, [r4, #32]
 8018dcc:	602b      	str	r3, [r5, #0]
 8018dce:	d030      	beq.n	8018e32 <__sflush_r+0x92>
 8018dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018dd2:	89a3      	ldrh	r3, [r4, #12]
 8018dd4:	0759      	lsls	r1, r3, #29
 8018dd6:	d505      	bpl.n	8018de4 <__sflush_r+0x44>
 8018dd8:	6863      	ldr	r3, [r4, #4]
 8018dda:	1ad2      	subs	r2, r2, r3
 8018ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018dde:	b10b      	cbz	r3, 8018de4 <__sflush_r+0x44>
 8018de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018de2:	1ad2      	subs	r2, r2, r3
 8018de4:	2300      	movs	r3, #0
 8018de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018de8:	6a21      	ldr	r1, [r4, #32]
 8018dea:	4628      	mov	r0, r5
 8018dec:	47b0      	blx	r6
 8018dee:	1c43      	adds	r3, r0, #1
 8018df0:	89a3      	ldrh	r3, [r4, #12]
 8018df2:	d106      	bne.n	8018e02 <__sflush_r+0x62>
 8018df4:	6829      	ldr	r1, [r5, #0]
 8018df6:	291d      	cmp	r1, #29
 8018df8:	d82b      	bhi.n	8018e52 <__sflush_r+0xb2>
 8018dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8018ea4 <__sflush_r+0x104>)
 8018dfc:	40ca      	lsrs	r2, r1
 8018dfe:	07d6      	lsls	r6, r2, #31
 8018e00:	d527      	bpl.n	8018e52 <__sflush_r+0xb2>
 8018e02:	2200      	movs	r2, #0
 8018e04:	6062      	str	r2, [r4, #4]
 8018e06:	04d9      	lsls	r1, r3, #19
 8018e08:	6922      	ldr	r2, [r4, #16]
 8018e0a:	6022      	str	r2, [r4, #0]
 8018e0c:	d504      	bpl.n	8018e18 <__sflush_r+0x78>
 8018e0e:	1c42      	adds	r2, r0, #1
 8018e10:	d101      	bne.n	8018e16 <__sflush_r+0x76>
 8018e12:	682b      	ldr	r3, [r5, #0]
 8018e14:	b903      	cbnz	r3, 8018e18 <__sflush_r+0x78>
 8018e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8018e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018e1a:	602f      	str	r7, [r5, #0]
 8018e1c:	b1b9      	cbz	r1, 8018e4e <__sflush_r+0xae>
 8018e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018e22:	4299      	cmp	r1, r3
 8018e24:	d002      	beq.n	8018e2c <__sflush_r+0x8c>
 8018e26:	4628      	mov	r0, r5
 8018e28:	f7ff f82c 	bl	8017e84 <_free_r>
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8018e30:	e00d      	b.n	8018e4e <__sflush_r+0xae>
 8018e32:	2301      	movs	r3, #1
 8018e34:	4628      	mov	r0, r5
 8018e36:	47b0      	blx	r6
 8018e38:	4602      	mov	r2, r0
 8018e3a:	1c50      	adds	r0, r2, #1
 8018e3c:	d1c9      	bne.n	8018dd2 <__sflush_r+0x32>
 8018e3e:	682b      	ldr	r3, [r5, #0]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d0c6      	beq.n	8018dd2 <__sflush_r+0x32>
 8018e44:	2b1d      	cmp	r3, #29
 8018e46:	d001      	beq.n	8018e4c <__sflush_r+0xac>
 8018e48:	2b16      	cmp	r3, #22
 8018e4a:	d11e      	bne.n	8018e8a <__sflush_r+0xea>
 8018e4c:	602f      	str	r7, [r5, #0]
 8018e4e:	2000      	movs	r0, #0
 8018e50:	e022      	b.n	8018e98 <__sflush_r+0xf8>
 8018e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e56:	b21b      	sxth	r3, r3
 8018e58:	e01b      	b.n	8018e92 <__sflush_r+0xf2>
 8018e5a:	690f      	ldr	r7, [r1, #16]
 8018e5c:	2f00      	cmp	r7, #0
 8018e5e:	d0f6      	beq.n	8018e4e <__sflush_r+0xae>
 8018e60:	0793      	lsls	r3, r2, #30
 8018e62:	680e      	ldr	r6, [r1, #0]
 8018e64:	bf08      	it	eq
 8018e66:	694b      	ldreq	r3, [r1, #20]
 8018e68:	600f      	str	r7, [r1, #0]
 8018e6a:	bf18      	it	ne
 8018e6c:	2300      	movne	r3, #0
 8018e6e:	eba6 0807 	sub.w	r8, r6, r7
 8018e72:	608b      	str	r3, [r1, #8]
 8018e74:	f1b8 0f00 	cmp.w	r8, #0
 8018e78:	dde9      	ble.n	8018e4e <__sflush_r+0xae>
 8018e7a:	6a21      	ldr	r1, [r4, #32]
 8018e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018e7e:	4643      	mov	r3, r8
 8018e80:	463a      	mov	r2, r7
 8018e82:	4628      	mov	r0, r5
 8018e84:	47b0      	blx	r6
 8018e86:	2800      	cmp	r0, #0
 8018e88:	dc08      	bgt.n	8018e9c <__sflush_r+0xfc>
 8018e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e92:	81a3      	strh	r3, [r4, #12]
 8018e94:	f04f 30ff 	mov.w	r0, #4294967295
 8018e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e9c:	4407      	add	r7, r0
 8018e9e:	eba8 0800 	sub.w	r8, r8, r0
 8018ea2:	e7e7      	b.n	8018e74 <__sflush_r+0xd4>
 8018ea4:	20400001 	.word	0x20400001

08018ea8 <_fflush_r>:
 8018ea8:	b538      	push	{r3, r4, r5, lr}
 8018eaa:	690b      	ldr	r3, [r1, #16]
 8018eac:	4605      	mov	r5, r0
 8018eae:	460c      	mov	r4, r1
 8018eb0:	b913      	cbnz	r3, 8018eb8 <_fflush_r+0x10>
 8018eb2:	2500      	movs	r5, #0
 8018eb4:	4628      	mov	r0, r5
 8018eb6:	bd38      	pop	{r3, r4, r5, pc}
 8018eb8:	b118      	cbz	r0, 8018ec2 <_fflush_r+0x1a>
 8018eba:	6a03      	ldr	r3, [r0, #32]
 8018ebc:	b90b      	cbnz	r3, 8018ec2 <_fflush_r+0x1a>
 8018ebe:	f7fe fdc3 	bl	8017a48 <__sinit>
 8018ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d0f3      	beq.n	8018eb2 <_fflush_r+0xa>
 8018eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018ecc:	07d0      	lsls	r0, r2, #31
 8018ece:	d404      	bmi.n	8018eda <_fflush_r+0x32>
 8018ed0:	0599      	lsls	r1, r3, #22
 8018ed2:	d402      	bmi.n	8018eda <_fflush_r+0x32>
 8018ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ed6:	f7fe ffc4 	bl	8017e62 <__retarget_lock_acquire_recursive>
 8018eda:	4628      	mov	r0, r5
 8018edc:	4621      	mov	r1, r4
 8018ede:	f7ff ff5f 	bl	8018da0 <__sflush_r>
 8018ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018ee4:	07da      	lsls	r2, r3, #31
 8018ee6:	4605      	mov	r5, r0
 8018ee8:	d4e4      	bmi.n	8018eb4 <_fflush_r+0xc>
 8018eea:	89a3      	ldrh	r3, [r4, #12]
 8018eec:	059b      	lsls	r3, r3, #22
 8018eee:	d4e1      	bmi.n	8018eb4 <_fflush_r+0xc>
 8018ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018ef2:	f7fe ffb7 	bl	8017e64 <__retarget_lock_release_recursive>
 8018ef6:	e7dd      	b.n	8018eb4 <_fflush_r+0xc>

08018ef8 <__sccl>:
 8018ef8:	b570      	push	{r4, r5, r6, lr}
 8018efa:	780b      	ldrb	r3, [r1, #0]
 8018efc:	4604      	mov	r4, r0
 8018efe:	2b5e      	cmp	r3, #94	@ 0x5e
 8018f00:	bf0b      	itete	eq
 8018f02:	784b      	ldrbeq	r3, [r1, #1]
 8018f04:	1c4a      	addne	r2, r1, #1
 8018f06:	1c8a      	addeq	r2, r1, #2
 8018f08:	2100      	movne	r1, #0
 8018f0a:	bf08      	it	eq
 8018f0c:	2101      	moveq	r1, #1
 8018f0e:	3801      	subs	r0, #1
 8018f10:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8018f14:	f800 1f01 	strb.w	r1, [r0, #1]!
 8018f18:	42a8      	cmp	r0, r5
 8018f1a:	d1fb      	bne.n	8018f14 <__sccl+0x1c>
 8018f1c:	b90b      	cbnz	r3, 8018f22 <__sccl+0x2a>
 8018f1e:	1e50      	subs	r0, r2, #1
 8018f20:	bd70      	pop	{r4, r5, r6, pc}
 8018f22:	f081 0101 	eor.w	r1, r1, #1
 8018f26:	54e1      	strb	r1, [r4, r3]
 8018f28:	4610      	mov	r0, r2
 8018f2a:	4602      	mov	r2, r0
 8018f2c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018f30:	2d2d      	cmp	r5, #45	@ 0x2d
 8018f32:	d005      	beq.n	8018f40 <__sccl+0x48>
 8018f34:	2d5d      	cmp	r5, #93	@ 0x5d
 8018f36:	d016      	beq.n	8018f66 <__sccl+0x6e>
 8018f38:	2d00      	cmp	r5, #0
 8018f3a:	d0f1      	beq.n	8018f20 <__sccl+0x28>
 8018f3c:	462b      	mov	r3, r5
 8018f3e:	e7f2      	b.n	8018f26 <__sccl+0x2e>
 8018f40:	7846      	ldrb	r6, [r0, #1]
 8018f42:	2e5d      	cmp	r6, #93	@ 0x5d
 8018f44:	d0fa      	beq.n	8018f3c <__sccl+0x44>
 8018f46:	42b3      	cmp	r3, r6
 8018f48:	dcf8      	bgt.n	8018f3c <__sccl+0x44>
 8018f4a:	3002      	adds	r0, #2
 8018f4c:	461a      	mov	r2, r3
 8018f4e:	3201      	adds	r2, #1
 8018f50:	4296      	cmp	r6, r2
 8018f52:	54a1      	strb	r1, [r4, r2]
 8018f54:	dcfb      	bgt.n	8018f4e <__sccl+0x56>
 8018f56:	1af2      	subs	r2, r6, r3
 8018f58:	3a01      	subs	r2, #1
 8018f5a:	1c5d      	adds	r5, r3, #1
 8018f5c:	42b3      	cmp	r3, r6
 8018f5e:	bfa8      	it	ge
 8018f60:	2200      	movge	r2, #0
 8018f62:	18ab      	adds	r3, r5, r2
 8018f64:	e7e1      	b.n	8018f2a <__sccl+0x32>
 8018f66:	4610      	mov	r0, r2
 8018f68:	e7da      	b.n	8018f20 <__sccl+0x28>

08018f6a <__submore>:
 8018f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f6e:	460c      	mov	r4, r1
 8018f70:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8018f72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018f76:	4299      	cmp	r1, r3
 8018f78:	d11d      	bne.n	8018fb6 <__submore+0x4c>
 8018f7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8018f7e:	f7fe fc4b 	bl	8017818 <_malloc_r>
 8018f82:	b918      	cbnz	r0, 8018f8c <__submore+0x22>
 8018f84:	f04f 30ff 	mov.w	r0, #4294967295
 8018f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018f90:	63a3      	str	r3, [r4, #56]	@ 0x38
 8018f92:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8018f96:	6360      	str	r0, [r4, #52]	@ 0x34
 8018f98:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8018f9c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8018fa0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8018fa4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8018fa8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8018fac:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8018fb0:	6020      	str	r0, [r4, #0]
 8018fb2:	2000      	movs	r0, #0
 8018fb4:	e7e8      	b.n	8018f88 <__submore+0x1e>
 8018fb6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8018fb8:	0077      	lsls	r7, r6, #1
 8018fba:	463a      	mov	r2, r7
 8018fbc:	f000 f8be 	bl	801913c <_realloc_r>
 8018fc0:	4605      	mov	r5, r0
 8018fc2:	2800      	cmp	r0, #0
 8018fc4:	d0de      	beq.n	8018f84 <__submore+0x1a>
 8018fc6:	eb00 0806 	add.w	r8, r0, r6
 8018fca:	4601      	mov	r1, r0
 8018fcc:	4632      	mov	r2, r6
 8018fce:	4640      	mov	r0, r8
 8018fd0:	f7fe ff49 	bl	8017e66 <memcpy>
 8018fd4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8018fd8:	f8c4 8000 	str.w	r8, [r4]
 8018fdc:	e7e9      	b.n	8018fb2 <__submore+0x48>

08018fde <__swbuf_r>:
 8018fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fe0:	460e      	mov	r6, r1
 8018fe2:	4614      	mov	r4, r2
 8018fe4:	4605      	mov	r5, r0
 8018fe6:	b118      	cbz	r0, 8018ff0 <__swbuf_r+0x12>
 8018fe8:	6a03      	ldr	r3, [r0, #32]
 8018fea:	b90b      	cbnz	r3, 8018ff0 <__swbuf_r+0x12>
 8018fec:	f7fe fd2c 	bl	8017a48 <__sinit>
 8018ff0:	69a3      	ldr	r3, [r4, #24]
 8018ff2:	60a3      	str	r3, [r4, #8]
 8018ff4:	89a3      	ldrh	r3, [r4, #12]
 8018ff6:	071a      	lsls	r2, r3, #28
 8018ff8:	d501      	bpl.n	8018ffe <__swbuf_r+0x20>
 8018ffa:	6923      	ldr	r3, [r4, #16]
 8018ffc:	b943      	cbnz	r3, 8019010 <__swbuf_r+0x32>
 8018ffe:	4621      	mov	r1, r4
 8019000:	4628      	mov	r0, r5
 8019002:	f000 f82b 	bl	801905c <__swsetup_r>
 8019006:	b118      	cbz	r0, 8019010 <__swbuf_r+0x32>
 8019008:	f04f 37ff 	mov.w	r7, #4294967295
 801900c:	4638      	mov	r0, r7
 801900e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019010:	6823      	ldr	r3, [r4, #0]
 8019012:	6922      	ldr	r2, [r4, #16]
 8019014:	1a98      	subs	r0, r3, r2
 8019016:	6963      	ldr	r3, [r4, #20]
 8019018:	b2f6      	uxtb	r6, r6
 801901a:	4283      	cmp	r3, r0
 801901c:	4637      	mov	r7, r6
 801901e:	dc05      	bgt.n	801902c <__swbuf_r+0x4e>
 8019020:	4621      	mov	r1, r4
 8019022:	4628      	mov	r0, r5
 8019024:	f7ff ff40 	bl	8018ea8 <_fflush_r>
 8019028:	2800      	cmp	r0, #0
 801902a:	d1ed      	bne.n	8019008 <__swbuf_r+0x2a>
 801902c:	68a3      	ldr	r3, [r4, #8]
 801902e:	3b01      	subs	r3, #1
 8019030:	60a3      	str	r3, [r4, #8]
 8019032:	6823      	ldr	r3, [r4, #0]
 8019034:	1c5a      	adds	r2, r3, #1
 8019036:	6022      	str	r2, [r4, #0]
 8019038:	701e      	strb	r6, [r3, #0]
 801903a:	6962      	ldr	r2, [r4, #20]
 801903c:	1c43      	adds	r3, r0, #1
 801903e:	429a      	cmp	r2, r3
 8019040:	d004      	beq.n	801904c <__swbuf_r+0x6e>
 8019042:	89a3      	ldrh	r3, [r4, #12]
 8019044:	07db      	lsls	r3, r3, #31
 8019046:	d5e1      	bpl.n	801900c <__swbuf_r+0x2e>
 8019048:	2e0a      	cmp	r6, #10
 801904a:	d1df      	bne.n	801900c <__swbuf_r+0x2e>
 801904c:	4621      	mov	r1, r4
 801904e:	4628      	mov	r0, r5
 8019050:	f7ff ff2a 	bl	8018ea8 <_fflush_r>
 8019054:	2800      	cmp	r0, #0
 8019056:	d0d9      	beq.n	801900c <__swbuf_r+0x2e>
 8019058:	e7d6      	b.n	8019008 <__swbuf_r+0x2a>
	...

0801905c <__swsetup_r>:
 801905c:	b538      	push	{r3, r4, r5, lr}
 801905e:	4b29      	ldr	r3, [pc, #164]	@ (8019104 <__swsetup_r+0xa8>)
 8019060:	4605      	mov	r5, r0
 8019062:	6818      	ldr	r0, [r3, #0]
 8019064:	460c      	mov	r4, r1
 8019066:	b118      	cbz	r0, 8019070 <__swsetup_r+0x14>
 8019068:	6a03      	ldr	r3, [r0, #32]
 801906a:	b90b      	cbnz	r3, 8019070 <__swsetup_r+0x14>
 801906c:	f7fe fcec 	bl	8017a48 <__sinit>
 8019070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019074:	0719      	lsls	r1, r3, #28
 8019076:	d422      	bmi.n	80190be <__swsetup_r+0x62>
 8019078:	06da      	lsls	r2, r3, #27
 801907a:	d407      	bmi.n	801908c <__swsetup_r+0x30>
 801907c:	2209      	movs	r2, #9
 801907e:	602a      	str	r2, [r5, #0]
 8019080:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019084:	81a3      	strh	r3, [r4, #12]
 8019086:	f04f 30ff 	mov.w	r0, #4294967295
 801908a:	e033      	b.n	80190f4 <__swsetup_r+0x98>
 801908c:	0758      	lsls	r0, r3, #29
 801908e:	d512      	bpl.n	80190b6 <__swsetup_r+0x5a>
 8019090:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019092:	b141      	cbz	r1, 80190a6 <__swsetup_r+0x4a>
 8019094:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019098:	4299      	cmp	r1, r3
 801909a:	d002      	beq.n	80190a2 <__swsetup_r+0x46>
 801909c:	4628      	mov	r0, r5
 801909e:	f7fe fef1 	bl	8017e84 <_free_r>
 80190a2:	2300      	movs	r3, #0
 80190a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80190a6:	89a3      	ldrh	r3, [r4, #12]
 80190a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80190ac:	81a3      	strh	r3, [r4, #12]
 80190ae:	2300      	movs	r3, #0
 80190b0:	6063      	str	r3, [r4, #4]
 80190b2:	6923      	ldr	r3, [r4, #16]
 80190b4:	6023      	str	r3, [r4, #0]
 80190b6:	89a3      	ldrh	r3, [r4, #12]
 80190b8:	f043 0308 	orr.w	r3, r3, #8
 80190bc:	81a3      	strh	r3, [r4, #12]
 80190be:	6923      	ldr	r3, [r4, #16]
 80190c0:	b94b      	cbnz	r3, 80190d6 <__swsetup_r+0x7a>
 80190c2:	89a3      	ldrh	r3, [r4, #12]
 80190c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80190c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80190cc:	d003      	beq.n	80190d6 <__swsetup_r+0x7a>
 80190ce:	4621      	mov	r1, r4
 80190d0:	4628      	mov	r0, r5
 80190d2:	f000 f973 	bl	80193bc <__smakebuf_r>
 80190d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80190da:	f013 0201 	ands.w	r2, r3, #1
 80190de:	d00a      	beq.n	80190f6 <__swsetup_r+0x9a>
 80190e0:	2200      	movs	r2, #0
 80190e2:	60a2      	str	r2, [r4, #8]
 80190e4:	6962      	ldr	r2, [r4, #20]
 80190e6:	4252      	negs	r2, r2
 80190e8:	61a2      	str	r2, [r4, #24]
 80190ea:	6922      	ldr	r2, [r4, #16]
 80190ec:	b942      	cbnz	r2, 8019100 <__swsetup_r+0xa4>
 80190ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80190f2:	d1c5      	bne.n	8019080 <__swsetup_r+0x24>
 80190f4:	bd38      	pop	{r3, r4, r5, pc}
 80190f6:	0799      	lsls	r1, r3, #30
 80190f8:	bf58      	it	pl
 80190fa:	6962      	ldrpl	r2, [r4, #20]
 80190fc:	60a2      	str	r2, [r4, #8]
 80190fe:	e7f4      	b.n	80190ea <__swsetup_r+0x8e>
 8019100:	2000      	movs	r0, #0
 8019102:	e7f7      	b.n	80190f4 <__swsetup_r+0x98>
 8019104:	20000088 	.word	0x20000088

08019108 <memmove>:
 8019108:	4288      	cmp	r0, r1
 801910a:	b510      	push	{r4, lr}
 801910c:	eb01 0402 	add.w	r4, r1, r2
 8019110:	d902      	bls.n	8019118 <memmove+0x10>
 8019112:	4284      	cmp	r4, r0
 8019114:	4623      	mov	r3, r4
 8019116:	d807      	bhi.n	8019128 <memmove+0x20>
 8019118:	1e43      	subs	r3, r0, #1
 801911a:	42a1      	cmp	r1, r4
 801911c:	d008      	beq.n	8019130 <memmove+0x28>
 801911e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019122:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019126:	e7f8      	b.n	801911a <memmove+0x12>
 8019128:	4402      	add	r2, r0
 801912a:	4601      	mov	r1, r0
 801912c:	428a      	cmp	r2, r1
 801912e:	d100      	bne.n	8019132 <memmove+0x2a>
 8019130:	bd10      	pop	{r4, pc}
 8019132:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019136:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801913a:	e7f7      	b.n	801912c <memmove+0x24>

0801913c <_realloc_r>:
 801913c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019140:	4607      	mov	r7, r0
 8019142:	4614      	mov	r4, r2
 8019144:	460d      	mov	r5, r1
 8019146:	b921      	cbnz	r1, 8019152 <_realloc_r+0x16>
 8019148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801914c:	4611      	mov	r1, r2
 801914e:	f7fe bb63 	b.w	8017818 <_malloc_r>
 8019152:	b92a      	cbnz	r2, 8019160 <_realloc_r+0x24>
 8019154:	f7fe fe96 	bl	8017e84 <_free_r>
 8019158:	4625      	mov	r5, r4
 801915a:	4628      	mov	r0, r5
 801915c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019160:	f000 f98a 	bl	8019478 <_malloc_usable_size_r>
 8019164:	4284      	cmp	r4, r0
 8019166:	4606      	mov	r6, r0
 8019168:	d802      	bhi.n	8019170 <_realloc_r+0x34>
 801916a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801916e:	d8f4      	bhi.n	801915a <_realloc_r+0x1e>
 8019170:	4621      	mov	r1, r4
 8019172:	4638      	mov	r0, r7
 8019174:	f7fe fb50 	bl	8017818 <_malloc_r>
 8019178:	4680      	mov	r8, r0
 801917a:	b908      	cbnz	r0, 8019180 <_realloc_r+0x44>
 801917c:	4645      	mov	r5, r8
 801917e:	e7ec      	b.n	801915a <_realloc_r+0x1e>
 8019180:	42b4      	cmp	r4, r6
 8019182:	4622      	mov	r2, r4
 8019184:	4629      	mov	r1, r5
 8019186:	bf28      	it	cs
 8019188:	4632      	movcs	r2, r6
 801918a:	f7fe fe6c 	bl	8017e66 <memcpy>
 801918e:	4629      	mov	r1, r5
 8019190:	4638      	mov	r0, r7
 8019192:	f7fe fe77 	bl	8017e84 <_free_r>
 8019196:	e7f1      	b.n	801917c <_realloc_r+0x40>

08019198 <_strtol_l.isra.0>:
 8019198:	2b24      	cmp	r3, #36	@ 0x24
 801919a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801919e:	4686      	mov	lr, r0
 80191a0:	4690      	mov	r8, r2
 80191a2:	d801      	bhi.n	80191a8 <_strtol_l.isra.0+0x10>
 80191a4:	2b01      	cmp	r3, #1
 80191a6:	d106      	bne.n	80191b6 <_strtol_l.isra.0+0x1e>
 80191a8:	f7fe fe30 	bl	8017e0c <__errno>
 80191ac:	2316      	movs	r3, #22
 80191ae:	6003      	str	r3, [r0, #0]
 80191b0:	2000      	movs	r0, #0
 80191b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191b6:	4834      	ldr	r0, [pc, #208]	@ (8019288 <_strtol_l.isra.0+0xf0>)
 80191b8:	460d      	mov	r5, r1
 80191ba:	462a      	mov	r2, r5
 80191bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191c0:	5d06      	ldrb	r6, [r0, r4]
 80191c2:	f016 0608 	ands.w	r6, r6, #8
 80191c6:	d1f8      	bne.n	80191ba <_strtol_l.isra.0+0x22>
 80191c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80191ca:	d110      	bne.n	80191ee <_strtol_l.isra.0+0x56>
 80191cc:	782c      	ldrb	r4, [r5, #0]
 80191ce:	2601      	movs	r6, #1
 80191d0:	1c95      	adds	r5, r2, #2
 80191d2:	f033 0210 	bics.w	r2, r3, #16
 80191d6:	d115      	bne.n	8019204 <_strtol_l.isra.0+0x6c>
 80191d8:	2c30      	cmp	r4, #48	@ 0x30
 80191da:	d10d      	bne.n	80191f8 <_strtol_l.isra.0+0x60>
 80191dc:	782a      	ldrb	r2, [r5, #0]
 80191de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80191e2:	2a58      	cmp	r2, #88	@ 0x58
 80191e4:	d108      	bne.n	80191f8 <_strtol_l.isra.0+0x60>
 80191e6:	786c      	ldrb	r4, [r5, #1]
 80191e8:	3502      	adds	r5, #2
 80191ea:	2310      	movs	r3, #16
 80191ec:	e00a      	b.n	8019204 <_strtol_l.isra.0+0x6c>
 80191ee:	2c2b      	cmp	r4, #43	@ 0x2b
 80191f0:	bf04      	itt	eq
 80191f2:	782c      	ldrbeq	r4, [r5, #0]
 80191f4:	1c95      	addeq	r5, r2, #2
 80191f6:	e7ec      	b.n	80191d2 <_strtol_l.isra.0+0x3a>
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d1f6      	bne.n	80191ea <_strtol_l.isra.0+0x52>
 80191fc:	2c30      	cmp	r4, #48	@ 0x30
 80191fe:	bf14      	ite	ne
 8019200:	230a      	movne	r3, #10
 8019202:	2308      	moveq	r3, #8
 8019204:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8019208:	f10c 3cff 	add.w	ip, ip, #4294967295
 801920c:	2200      	movs	r2, #0
 801920e:	fbbc f9f3 	udiv	r9, ip, r3
 8019212:	4610      	mov	r0, r2
 8019214:	fb03 ca19 	mls	sl, r3, r9, ip
 8019218:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801921c:	2f09      	cmp	r7, #9
 801921e:	d80f      	bhi.n	8019240 <_strtol_l.isra.0+0xa8>
 8019220:	463c      	mov	r4, r7
 8019222:	42a3      	cmp	r3, r4
 8019224:	dd1b      	ble.n	801925e <_strtol_l.isra.0+0xc6>
 8019226:	1c57      	adds	r7, r2, #1
 8019228:	d007      	beq.n	801923a <_strtol_l.isra.0+0xa2>
 801922a:	4581      	cmp	r9, r0
 801922c:	d314      	bcc.n	8019258 <_strtol_l.isra.0+0xc0>
 801922e:	d101      	bne.n	8019234 <_strtol_l.isra.0+0x9c>
 8019230:	45a2      	cmp	sl, r4
 8019232:	db11      	blt.n	8019258 <_strtol_l.isra.0+0xc0>
 8019234:	fb00 4003 	mla	r0, r0, r3, r4
 8019238:	2201      	movs	r2, #1
 801923a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801923e:	e7eb      	b.n	8019218 <_strtol_l.isra.0+0x80>
 8019240:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019244:	2f19      	cmp	r7, #25
 8019246:	d801      	bhi.n	801924c <_strtol_l.isra.0+0xb4>
 8019248:	3c37      	subs	r4, #55	@ 0x37
 801924a:	e7ea      	b.n	8019222 <_strtol_l.isra.0+0x8a>
 801924c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8019250:	2f19      	cmp	r7, #25
 8019252:	d804      	bhi.n	801925e <_strtol_l.isra.0+0xc6>
 8019254:	3c57      	subs	r4, #87	@ 0x57
 8019256:	e7e4      	b.n	8019222 <_strtol_l.isra.0+0x8a>
 8019258:	f04f 32ff 	mov.w	r2, #4294967295
 801925c:	e7ed      	b.n	801923a <_strtol_l.isra.0+0xa2>
 801925e:	1c53      	adds	r3, r2, #1
 8019260:	d108      	bne.n	8019274 <_strtol_l.isra.0+0xdc>
 8019262:	2322      	movs	r3, #34	@ 0x22
 8019264:	f8ce 3000 	str.w	r3, [lr]
 8019268:	4660      	mov	r0, ip
 801926a:	f1b8 0f00 	cmp.w	r8, #0
 801926e:	d0a0      	beq.n	80191b2 <_strtol_l.isra.0+0x1a>
 8019270:	1e69      	subs	r1, r5, #1
 8019272:	e006      	b.n	8019282 <_strtol_l.isra.0+0xea>
 8019274:	b106      	cbz	r6, 8019278 <_strtol_l.isra.0+0xe0>
 8019276:	4240      	negs	r0, r0
 8019278:	f1b8 0f00 	cmp.w	r8, #0
 801927c:	d099      	beq.n	80191b2 <_strtol_l.isra.0+0x1a>
 801927e:	2a00      	cmp	r2, #0
 8019280:	d1f6      	bne.n	8019270 <_strtol_l.isra.0+0xd8>
 8019282:	f8c8 1000 	str.w	r1, [r8]
 8019286:	e794      	b.n	80191b2 <_strtol_l.isra.0+0x1a>
 8019288:	0801cb15 	.word	0x0801cb15

0801928c <_strtol_r>:
 801928c:	f7ff bf84 	b.w	8019198 <_strtol_l.isra.0>

08019290 <_strtoul_l.isra.0>:
 8019290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019294:	4e34      	ldr	r6, [pc, #208]	@ (8019368 <_strtoul_l.isra.0+0xd8>)
 8019296:	4686      	mov	lr, r0
 8019298:	460d      	mov	r5, r1
 801929a:	4628      	mov	r0, r5
 801929c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80192a0:	5d37      	ldrb	r7, [r6, r4]
 80192a2:	f017 0708 	ands.w	r7, r7, #8
 80192a6:	d1f8      	bne.n	801929a <_strtoul_l.isra.0+0xa>
 80192a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80192aa:	d110      	bne.n	80192ce <_strtoul_l.isra.0+0x3e>
 80192ac:	782c      	ldrb	r4, [r5, #0]
 80192ae:	2701      	movs	r7, #1
 80192b0:	1c85      	adds	r5, r0, #2
 80192b2:	f033 0010 	bics.w	r0, r3, #16
 80192b6:	d115      	bne.n	80192e4 <_strtoul_l.isra.0+0x54>
 80192b8:	2c30      	cmp	r4, #48	@ 0x30
 80192ba:	d10d      	bne.n	80192d8 <_strtoul_l.isra.0+0x48>
 80192bc:	7828      	ldrb	r0, [r5, #0]
 80192be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80192c2:	2858      	cmp	r0, #88	@ 0x58
 80192c4:	d108      	bne.n	80192d8 <_strtoul_l.isra.0+0x48>
 80192c6:	786c      	ldrb	r4, [r5, #1]
 80192c8:	3502      	adds	r5, #2
 80192ca:	2310      	movs	r3, #16
 80192cc:	e00a      	b.n	80192e4 <_strtoul_l.isra.0+0x54>
 80192ce:	2c2b      	cmp	r4, #43	@ 0x2b
 80192d0:	bf04      	itt	eq
 80192d2:	782c      	ldrbeq	r4, [r5, #0]
 80192d4:	1c85      	addeq	r5, r0, #2
 80192d6:	e7ec      	b.n	80192b2 <_strtoul_l.isra.0+0x22>
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d1f6      	bne.n	80192ca <_strtoul_l.isra.0+0x3a>
 80192dc:	2c30      	cmp	r4, #48	@ 0x30
 80192de:	bf14      	ite	ne
 80192e0:	230a      	movne	r3, #10
 80192e2:	2308      	moveq	r3, #8
 80192e4:	f04f 38ff 	mov.w	r8, #4294967295
 80192e8:	2600      	movs	r6, #0
 80192ea:	fbb8 f8f3 	udiv	r8, r8, r3
 80192ee:	fb03 f908 	mul.w	r9, r3, r8
 80192f2:	ea6f 0909 	mvn.w	r9, r9
 80192f6:	4630      	mov	r0, r6
 80192f8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80192fc:	f1bc 0f09 	cmp.w	ip, #9
 8019300:	d810      	bhi.n	8019324 <_strtoul_l.isra.0+0x94>
 8019302:	4664      	mov	r4, ip
 8019304:	42a3      	cmp	r3, r4
 8019306:	dd1e      	ble.n	8019346 <_strtoul_l.isra.0+0xb6>
 8019308:	f1b6 3fff 	cmp.w	r6, #4294967295
 801930c:	d007      	beq.n	801931e <_strtoul_l.isra.0+0x8e>
 801930e:	4580      	cmp	r8, r0
 8019310:	d316      	bcc.n	8019340 <_strtoul_l.isra.0+0xb0>
 8019312:	d101      	bne.n	8019318 <_strtoul_l.isra.0+0x88>
 8019314:	45a1      	cmp	r9, r4
 8019316:	db13      	blt.n	8019340 <_strtoul_l.isra.0+0xb0>
 8019318:	fb00 4003 	mla	r0, r0, r3, r4
 801931c:	2601      	movs	r6, #1
 801931e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019322:	e7e9      	b.n	80192f8 <_strtoul_l.isra.0+0x68>
 8019324:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019328:	f1bc 0f19 	cmp.w	ip, #25
 801932c:	d801      	bhi.n	8019332 <_strtoul_l.isra.0+0xa2>
 801932e:	3c37      	subs	r4, #55	@ 0x37
 8019330:	e7e8      	b.n	8019304 <_strtoul_l.isra.0+0x74>
 8019332:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019336:	f1bc 0f19 	cmp.w	ip, #25
 801933a:	d804      	bhi.n	8019346 <_strtoul_l.isra.0+0xb6>
 801933c:	3c57      	subs	r4, #87	@ 0x57
 801933e:	e7e1      	b.n	8019304 <_strtoul_l.isra.0+0x74>
 8019340:	f04f 36ff 	mov.w	r6, #4294967295
 8019344:	e7eb      	b.n	801931e <_strtoul_l.isra.0+0x8e>
 8019346:	1c73      	adds	r3, r6, #1
 8019348:	d106      	bne.n	8019358 <_strtoul_l.isra.0+0xc8>
 801934a:	2322      	movs	r3, #34	@ 0x22
 801934c:	f8ce 3000 	str.w	r3, [lr]
 8019350:	4630      	mov	r0, r6
 8019352:	b932      	cbnz	r2, 8019362 <_strtoul_l.isra.0+0xd2>
 8019354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019358:	b107      	cbz	r7, 801935c <_strtoul_l.isra.0+0xcc>
 801935a:	4240      	negs	r0, r0
 801935c:	2a00      	cmp	r2, #0
 801935e:	d0f9      	beq.n	8019354 <_strtoul_l.isra.0+0xc4>
 8019360:	b106      	cbz	r6, 8019364 <_strtoul_l.isra.0+0xd4>
 8019362:	1e69      	subs	r1, r5, #1
 8019364:	6011      	str	r1, [r2, #0]
 8019366:	e7f5      	b.n	8019354 <_strtoul_l.isra.0+0xc4>
 8019368:	0801cb15 	.word	0x0801cb15

0801936c <_strtoul_r>:
 801936c:	f7ff bf90 	b.w	8019290 <_strtoul_l.isra.0>

08019370 <__swhatbuf_r>:
 8019370:	b570      	push	{r4, r5, r6, lr}
 8019372:	460c      	mov	r4, r1
 8019374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019378:	2900      	cmp	r1, #0
 801937a:	b096      	sub	sp, #88	@ 0x58
 801937c:	4615      	mov	r5, r2
 801937e:	461e      	mov	r6, r3
 8019380:	da0d      	bge.n	801939e <__swhatbuf_r+0x2e>
 8019382:	89a3      	ldrh	r3, [r4, #12]
 8019384:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019388:	f04f 0100 	mov.w	r1, #0
 801938c:	bf14      	ite	ne
 801938e:	2340      	movne	r3, #64	@ 0x40
 8019390:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019394:	2000      	movs	r0, #0
 8019396:	6031      	str	r1, [r6, #0]
 8019398:	602b      	str	r3, [r5, #0]
 801939a:	b016      	add	sp, #88	@ 0x58
 801939c:	bd70      	pop	{r4, r5, r6, pc}
 801939e:	466a      	mov	r2, sp
 80193a0:	f000 f848 	bl	8019434 <_fstat_r>
 80193a4:	2800      	cmp	r0, #0
 80193a6:	dbec      	blt.n	8019382 <__swhatbuf_r+0x12>
 80193a8:	9901      	ldr	r1, [sp, #4]
 80193aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80193ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80193b2:	4259      	negs	r1, r3
 80193b4:	4159      	adcs	r1, r3
 80193b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80193ba:	e7eb      	b.n	8019394 <__swhatbuf_r+0x24>

080193bc <__smakebuf_r>:
 80193bc:	898b      	ldrh	r3, [r1, #12]
 80193be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80193c0:	079d      	lsls	r5, r3, #30
 80193c2:	4606      	mov	r6, r0
 80193c4:	460c      	mov	r4, r1
 80193c6:	d507      	bpl.n	80193d8 <__smakebuf_r+0x1c>
 80193c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80193cc:	6023      	str	r3, [r4, #0]
 80193ce:	6123      	str	r3, [r4, #16]
 80193d0:	2301      	movs	r3, #1
 80193d2:	6163      	str	r3, [r4, #20]
 80193d4:	b003      	add	sp, #12
 80193d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193d8:	ab01      	add	r3, sp, #4
 80193da:	466a      	mov	r2, sp
 80193dc:	f7ff ffc8 	bl	8019370 <__swhatbuf_r>
 80193e0:	9f00      	ldr	r7, [sp, #0]
 80193e2:	4605      	mov	r5, r0
 80193e4:	4639      	mov	r1, r7
 80193e6:	4630      	mov	r0, r6
 80193e8:	f7fe fa16 	bl	8017818 <_malloc_r>
 80193ec:	b948      	cbnz	r0, 8019402 <__smakebuf_r+0x46>
 80193ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193f2:	059a      	lsls	r2, r3, #22
 80193f4:	d4ee      	bmi.n	80193d4 <__smakebuf_r+0x18>
 80193f6:	f023 0303 	bic.w	r3, r3, #3
 80193fa:	f043 0302 	orr.w	r3, r3, #2
 80193fe:	81a3      	strh	r3, [r4, #12]
 8019400:	e7e2      	b.n	80193c8 <__smakebuf_r+0xc>
 8019402:	89a3      	ldrh	r3, [r4, #12]
 8019404:	6020      	str	r0, [r4, #0]
 8019406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801940a:	81a3      	strh	r3, [r4, #12]
 801940c:	9b01      	ldr	r3, [sp, #4]
 801940e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019412:	b15b      	cbz	r3, 801942c <__smakebuf_r+0x70>
 8019414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019418:	4630      	mov	r0, r6
 801941a:	f000 f81d 	bl	8019458 <_isatty_r>
 801941e:	b128      	cbz	r0, 801942c <__smakebuf_r+0x70>
 8019420:	89a3      	ldrh	r3, [r4, #12]
 8019422:	f023 0303 	bic.w	r3, r3, #3
 8019426:	f043 0301 	orr.w	r3, r3, #1
 801942a:	81a3      	strh	r3, [r4, #12]
 801942c:	89a3      	ldrh	r3, [r4, #12]
 801942e:	431d      	orrs	r5, r3
 8019430:	81a5      	strh	r5, [r4, #12]
 8019432:	e7cf      	b.n	80193d4 <__smakebuf_r+0x18>

08019434 <_fstat_r>:
 8019434:	b538      	push	{r3, r4, r5, lr}
 8019436:	4d07      	ldr	r5, [pc, #28]	@ (8019454 <_fstat_r+0x20>)
 8019438:	2300      	movs	r3, #0
 801943a:	4604      	mov	r4, r0
 801943c:	4608      	mov	r0, r1
 801943e:	4611      	mov	r1, r2
 8019440:	602b      	str	r3, [r5, #0]
 8019442:	f7ec f892 	bl	800556a <_fstat>
 8019446:	1c43      	adds	r3, r0, #1
 8019448:	d102      	bne.n	8019450 <_fstat_r+0x1c>
 801944a:	682b      	ldr	r3, [r5, #0]
 801944c:	b103      	cbz	r3, 8019450 <_fstat_r+0x1c>
 801944e:	6023      	str	r3, [r4, #0]
 8019450:	bd38      	pop	{r3, r4, r5, pc}
 8019452:	bf00      	nop
 8019454:	200122c8 	.word	0x200122c8

08019458 <_isatty_r>:
 8019458:	b538      	push	{r3, r4, r5, lr}
 801945a:	4d06      	ldr	r5, [pc, #24]	@ (8019474 <_isatty_r+0x1c>)
 801945c:	2300      	movs	r3, #0
 801945e:	4604      	mov	r4, r0
 8019460:	4608      	mov	r0, r1
 8019462:	602b      	str	r3, [r5, #0]
 8019464:	f7ec f891 	bl	800558a <_isatty>
 8019468:	1c43      	adds	r3, r0, #1
 801946a:	d102      	bne.n	8019472 <_isatty_r+0x1a>
 801946c:	682b      	ldr	r3, [r5, #0]
 801946e:	b103      	cbz	r3, 8019472 <_isatty_r+0x1a>
 8019470:	6023      	str	r3, [r4, #0]
 8019472:	bd38      	pop	{r3, r4, r5, pc}
 8019474:	200122c8 	.word	0x200122c8

08019478 <_malloc_usable_size_r>:
 8019478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801947c:	1f18      	subs	r0, r3, #4
 801947e:	2b00      	cmp	r3, #0
 8019480:	bfbc      	itt	lt
 8019482:	580b      	ldrlt	r3, [r1, r0]
 8019484:	18c0      	addlt	r0, r0, r3
 8019486:	4770      	bx	lr

08019488 <_init>:
 8019488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801948a:	bf00      	nop
 801948c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801948e:	bc08      	pop	{r3}
 8019490:	469e      	mov	lr, r3
 8019492:	4770      	bx	lr

08019494 <_fini>:
 8019494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019496:	bf00      	nop
 8019498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801949a:	bc08      	pop	{r3}
 801949c:	469e      	mov	lr, r3
 801949e:	4770      	bx	lr
